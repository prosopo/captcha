name: Tests

on:
  pull_request:
    branches: [ develop, main ]

env:
  CARGO_TERM_COLOR: always
  ENVIRONMENT: development
  GH_TOKEN: ${{ github.token }}

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}



    steps:
      - name: Check github refname
        run: |
          echo ${{ github.ref }}
          echo ${{ github.ref_name }}
          echo ${{ github.head_ref }}
          echo ${{ github.base_ref }}

      - name: Check if workspaces branch exists
        run: |
          if [[ $(git ls-remote --heads https://github.com/prosopo/workspaces.git ${{ github.head_ref }}) ]]; then
            echo "Workspaces branch exists"
            echo "WORKSPACES_BRANCH=${{ github.head_ref }}" >> $GITHUB_ENV
            else
            echo "Workspaces branch does not exist"
            echo "WORKSPACES_BRANCH=${{ github.base_ref }}" >> $GITHUB_ENV
          fi

      - name: Remove stopped containers
        run: docker rm $(docker ps -a -q) || true

      - name: Clone workspaces
        uses: actions/checkout@v3
        with:
          ref: ${{ env.WORKSPACES_BRANCH }}
          repository: prosopo/workspaces
          path: workspaces
          submodules: recursive
          #ssh-key: ${{ secrets.SSH_KEY }}
          #ssh-strict: false

      - name: Checkout correct workspaces branch
        run: |
          cd workspaces
          git fetch
          git checkout ${{ github.head_ref }} || git checkout ${{ github.base_ref }} || git checkout develop
          echo "On workspaces branch $(git rev-parse --abbrev-ref HEAD)"
          git submodule update --init --recursive --force --checkout
          git pull

      - name: Clone scripts repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.base_ref }}
          repository: prosopo/scripts
          path: scripts
          #ssh-key: ${{ secrets.SSH_KEY }}
          #ssh-strict: false

      - name: Checkout correct scripts branch
        run: |
          cd scripts
          git fetch
          git checkout ${{ github.head_ref }} || git checkout ${{ github.base_ref }} || git checkout develop
          git pull

      - run: mkdir -p ~/image-cache

      - id: image-cache
        uses: actions/cache@v3
        with:
          path: ~/image-cache
          key: image-cache-docker-${{ runner.os }}

      - if: steps.image-cache.outputs.cache-hit != 'true'
        run: |
          docker pull prosopo/substrate:dev-aura-bd39450fa8794ef385be198d239372a469a73b39
          docker save -o ~/image-cache/prosopo.tar prosopo/substrate:dev-aura-bd39450fa8794ef385be198d239372a469a73b39
          docker pull mongo:5.0.4
          docker save -o ~/image-cache/mongo.tar mongo:5.0.4

      - if: steps.image-cache.outputs.cache-hit == 'true'
        run: |
          ls ~/image-cache
          docker load -i ~/image-cache/prosopo.tar
          docker load -i ~/image-cache/mongo.tar

      - name: Start the docker images
        run: |
          cd scripts
          docker compose --file ./docker/docker-compose.development.yml up -d

      - name: Checkout correct submodule branches
        run: |
          cd workspaces
          git submodule foreach 'echo $(git remote -v)'
          git submodule foreach 'git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"'
          git submodule foreach 'git fetch origin'
          git submodule foreach 'git checkout ${{ github.head_ref }} || git checkout ${{ github.base_ref }} || git checkout develop'
          git submodule foreach 'echo "pulling..." && git pull'

      - id: node-cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: node-cache-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-cache-${{ runner.os }}-

      - if: ${{ steps.node-cache.outputs.cache-hit == 'true' }}
        run: |
          cd ~/.npm
          ls

      - name: Install dependencies
        run: |
          cd workspaces
          npm install

      - name: Build provider and dependencies
        run: |
          cd workspaces
          echo $(npx tsc --version)
          cd packages/common && echo $(pwd) && echo $(git rev-parse HEAD) && npm run build
          cd ../types && echo $(pwd) && echo $(git rev-parse HEAD) && npm run build
          cd ../datasets && echo $(pwd) && echo $(git rev-parse HEAD) && npm run build
          cd ../contract && echo $(pwd) && echo $(git rev-parse HEAD) && npm run build
          cd ../provider && echo $(pwd) && echo $(git rev-parse HEAD) && npm run build

      - name: Setup the environment and run the unit tests
        run: |
          cd workspaces
          git status | head -n 1
          cd packages/provider
          cp env.development .env.development
          git status | head -n 1
          docker container ls
          cat .env.development
          NODE_ENV=$ENVIRONMENT npm run test

      - name: Remove the docker containers
        run: |
          cd scripts
          docker compose --file ./docker/docker-compose.development.yml down

