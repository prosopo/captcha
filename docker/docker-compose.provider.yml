services:
    provider-dev:
        profiles:
            - development
        build:
            context: ..
            dockerfile: ./docker/images/provider.dockerfile
        env_file:
            - ../dev/scripts/.env.development
        ports:
            - '9229:9229'
        networks:
            - internal
            - external
        logging:
            driver: 'json-file'
            options:
                max-size: '100m'
                max-file: '1'
        healthcheck:
            test: ["CMD", "curl", "--fail", "localhost:9229/v1/prosopo/provider/status"]  # ping the status api
            interval: 30s
            retries: 3
            start_period: 30s
            timeout: 10s
    provider:
        profiles:
            - production
            - staging
        image: prosopo/provider:${COMPOSE_PROVIDER_IMAGE_VERSION}
        labels:
            - "com.centurylinklabs.watchtower.enable=true"  # only services with this tag will be updated by watchtower
            - "vector.provider=true" # enable logging as a provider
            - "vector.docker=true" # log docker events
        restart: unless-stopped  # unless the container has been stopped, it will be restarted, even on reboot
        pull_policy: always
        env_file:
            - ../.env.${NODE_ENV}
        ports:
            - '9229:9229'
        networks:
            - internal
            - external
        logging:
            driver: 'json-file'
            options:
                max-size: '100m'
                max-file: '1'
        healthcheck:
            test: ["CMD", "curl", "--fail", "localhost:9229/v1/prosopo/provider/details"]  # ping the details endpoint
            interval: 5m
            retries: 3
            start_period: 30s
            timeout: 10s
    database-dev:
        profiles:
            - development
        image: mongo:6.0.17
        # volumes:
        #   - ./db:/data/db
        ports:
            - '27017:27017'
        env_file:
            - ../dev/scripts/.env.development
        networks:
            - internal
        logging:
            driver: 'json-file'
            options:
                max-size: '100m'
                max-file: '1'
        healthcheck:
            test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')", "--quiet"]  # ping the mongo server
            interval: 5m
            retries: 3
            start_period: 30s
            timeout: 10s
    database:
        profiles:
            - production
            - staging
        image: mongo:6.0.17
        labels:
            - "com.centurylinklabs.watchtower.enable=true"  # only services with this tag will be updated by watchtower
            - "vector.mongo=true" # enable logging as a provider
            - "vector.docker=true" # log docker events
        restart: unless-stopped  # unless the container has been stopped, it will be restarted, even on reboot
        volumes:
            - /data/db:/data/db
        ports:
            - '27017:27017'
        env_file:
            - ../.env.${NODE_ENV}
        networks:
            - internal
        logging:
            driver: 'json-file'
            options:
                max-size: '100m'
                max-file: '1'
        healthcheck:
            test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')", "--quiet"]  # ping the mongo server
            interval: 5m
            retries: 3
            start_period: 30s
            timeout: 10s
    caddy:
        profiles:
            - production
            - staging
        image: caddy:2
        env_file:
            - ../.env.${NODE_ENV}
        labels:
            - "com.centurylinklabs.watchtower.enable=true"  # only services with this tag will be updated by watchtower
            - "vector.caddy=true" # enable logging as caddy
            - "vector.docker=true" # log docker events
        restart: unless-stopped  # unless the container has been stopped, it will be restarted, even on reboot
        ports:
            - '80:80'
            - '443:443'
            - '443:443/udp'
        volumes:
            - ./provider.Caddyfile:/etc/caddy/Caddyfile
            - caddy_data:/data
            - caddy_config:/config
        networks:
            - external
        logging:
            driver: 'json-file'
            options:
                max-size: '100m'
                max-file: '1'
        healthcheck:
            test: ["CMD", "curl", "--fail", "localhost:2019/metrics"]  # ping the caddy admin api
            interval: 5m
            retries: 3
            start_period: 30s
            timeout: 10s
    watchtower:
        profiles:
            - production
            - staging
        image: containrrr/watchtower
        command: ["watchtower", "--log-format", "JSON", "--remove-volumes", "--cleanup", "--warn-on-head-failure", "never", "--label-enable", "--interval", "30"]
        labels:
            - "com.centurylinklabs.watchtower.enable=true"  # only services with this tag will be updated by watchtower
            - "vector.watchtower=true" # enable logging as a watchtower
            - "vector.docker=true" # log docker events
        restart: unless-stopped  # unless the container has been stopped, it will be restarted, even on reboot
        env_file:
            - ../.env.${NODE_ENV}
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        logging:
            driver: 'json-file'
            options:
                max-size: '100m'
                max-file: '1'
    vector:
        profiles:
            - production
            - staging
        image: prosopo/vector:${COMPOSE_PROVIDER_IMAGE_VERSION}
        env_file:
            - ../.env.${NODE_ENV}
        labels:
            - "com.centurylinklabs.watchtower.enable=true" # only services with this tag will be updated by watchtower
            - "vector.docker=true" # log docker events
        restart: unless-stopped # unless the container has been stopped, it will be restarted, even on reboot
        volumes:
            - ./provider.vector.toml:/etc/vector/vector.toml
            - /var/run/docker.sock:/var/run/docker.sock # needed for monitoring docker container events, e.g. start/stop/etc
        networks:
            - internal
            - external
        logging:
            driver: 'json-file'
            options:
                max-size: '100m'
                max-file: '1'
        healthcheck:
            test: ["CMD", "curl", "--fail", "localhost:8686/health"]
            interval: 30s
            timeout: 10s
            retries: 1
            start_period: 10s
networks:
    internal:
        name: internal
        internal: true
    external:
        name: external
volumes:
    caddy_data:
    caddy_config:
