name: e2e

on:
    pull_request:
        branches: [main]
    workflow_dispatch:

env:
    CARGO_TERM_COLOR: always
    ENVIRONMENT: development
    GH_TOKEN: ${{ github.token }}

jobs:
    check:
        runs-on: ubuntu-latest
        steps:
            # Checkout the repo
            - uses: actions/checkout@v3

            - run: mkdir -p protocol/cargo-cache
            - run: mkdir -p protocol/target
            - run: mkdir -p node_modules
            - run: mkdir -p .cache/Cypress

            - name: Restore cache
              uses: actions/cache/restore@v3
              with:
                  path: |
                      protocol/cargo-cache
                      protocol/target
                      node_modules
                      .cache/Cypress
                  # note that restoring a cache in github is a pain. The trailing '-' matches any string after the '-', therefore 'abc-' would match a cache named 'abc-1234' or 'abc-5678', etc.
                  # the problem is 'abc-' will not match a cache named 'abc'! So if you're using wildcard cache name selectors like this, you need a field that changes as the suffix to become the wildcard
                  # here we're setting the key to an unused cache key so it falls back to the wildcard selector in `restore-keys`
                  key: some-unused-cache-key
                  restore-keys: |
                      project-cache-${{ runner.os }}-${{ runner.arch }}-

            - run: npm install -g npm@8.9
            - run: npm install

            # build contracts
            - run: npm run -w @prosopo/protocol cli -- build
            # run typechain
            - run: npm run -w @prosopo/scripts cli -- import_all_contracts
            # build all packages in workspace
            - run: npm run build:all

            - name: Start the docker images
              run: |
                  docker compose --file ./docker/docker-compose.test.yml up -d
                  docker container ls

            - name: Setup env
              run: |
                  cp demos/client-example-server/env.development demos/client-example-server/.env.test
                  cp demos/client-example/env.development demos/client-example/.env.test
                  cp dev/scripts/env.test dev/scripts/.env.test
                  cp dev/scripts/env.test packages/cli/.env.test
                  echo "NODE_ENV=test" >> $GITHUB_ENV
                  echo $NODE_ENV

            - run: npm run deploy_protocol
            - run: npm run deploy_dapp
            - run: npm run test:all
            
            - name: Reset the docker containers
              run: |
                  docker compose --file ./docker/docker-compose.test.yml down
                  docker compose --file ./docker/docker-compose.test.yml up -d
                  docker container ls
                  sleep 10s
              shell: bash

            - run: npm run setup:all

            - name: Run the cypress tests on client-example
              shell: bash
              run: |
                  npm run start:provider &
                  sleep 10s
                  npm run start:server &
                  sleep 10s
                  npm run start:demo &
                  sleep 10s
                  npm -w @prosopo/client-example run cypress:run