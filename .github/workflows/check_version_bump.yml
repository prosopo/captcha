# Check the version has been bumped before releasing

name: check_version_bump

on:
    pull_request:
        branches: [main]
    workflow_dispatch:

concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: true

jobs:
    check:
        runs-on: ubuntu-latest
        if: github.event.pull_request.draft == false
        steps:
            - name: Print contexts
              env:
                  GITHUB_CONTEXT: ${{ toJson(github) }}
                  ENV_CONTEXT: ${{ toJson(env) }}
                  VARS_CONTEXT: ${{ toJson(vars) }}
                  JOB_CONTEXT: ${{ toJson(job) }}
                  STEPS_CONTEXT: ${{ toJson(steps) }}
                  RUNNER_CONTEXT: ${{ toJson(runner) }}
                  SECRETS_CONTEXT: ${{ toJson(secrets) }}
                  STRATEGY_CONTEXT: ${{ toJson(strategy) }}
                  MATRIX_CONTEXT: ${{ toJson(matrix) }}
                  NEEDS_CONTEXT: ${{ toJson(needs) }}
                  INPUTS_CONTEXT: ${{ toJson(inputs) }}
              run: |
                  echo "******************************"
                  echo "github:" "$GITHUB_CONTEXT"
                  echo "******************************"
                  echo "env:" "$ENV_CONTEXT"
                  echo "******************************"
                  echo "vars:" "$VARS_CONTEXT"
                  echo "******************************"
                  echo "job:" "$JOB_CONTEXT"
                  echo "******************************"
                  echo "steps:" "$STEPS_CONTEXT"
                  echo "******************************"
                  echo "runner:" "$RUNNER_CONTEXT"
                  echo "******************************"
                  echo "secrets:" "$SECRETS_CONTEXT"
                  echo "******************************"
                  echo "strategy:" "$STRATEGY_CONTEXT"
                  echo "******************************"
                  echo "matrix:" "$MATRIX_CONTEXT"
                  echo "******************************"
                  echo "needs:" "$NEEDS_CONTEXT"
                  echo "******************************"
                  echo "inputs:" "$INPUTS_CONTEXT"
                  echo "******************************"

            - uses: actions/checkout@v3
              with:
                  # all history
                  fetch-depth: 0

            # fail-fast step to check if the version has been bumped
            # when running manually, there won't be a version line change, so we need to skip this step in that case
            - name: Detect version bump
              run: |

                  set -euxo pipefail # stop on errors, print commands, fail on pipe fails

                  # get the next version as the version currently set in the root package.json
                  NEXT=$(jq -r '.version' package.json)
                  echo "Next version: $NEXT"

                  # checkout the dest branch
                  git checkout ${{ github.event.pull_request.base.ref }}

                  # get the previous version as the version currently set in the root package.json in the before state
                  PREV=$(jq -r '.version' package.json)
                  echo "Previous version: $PREV"

                  # break next and previous versions into major, minor, patch
                  NEXT_MAJOR=$(echo "$NEXT" | cut -d. -f1)
                  NEXT_MINOR=$(echo "$NEXT" | cut -d. -f2)
                  NEXT_PATCH=$(echo "$NEXT" | cut -d. -f3)
                  PREV_MAJOR=$(echo "$PREV" | cut -d. -f1)
                  PREV_MINOR=$(echo "$PREV" | cut -d. -f2)
                  PREV_PATCH=$(echo "$PREV" | cut -d. -f3)

                  # compare the versions, checking for an *increasing* version

                  if [[ "$NEXT_MAJOR" -gt "$PREV_MAJOR" ]]; then
                      echo "Major version bump"
                  elif [[ "$NEXT_MAJOR" -eq "$PREV_MAJOR" && "$NEXT_MINOR" -gt "$PREV_MINOR" ]]; then
                      echo "Minor version bump"
                  elif [[ "$NEXT_MAJOR" -eq "$PREV_MAJOR" && "$NEXT_MINOR" -eq "$PREV_MINOR" && "$NEXT_PATCH" -gt "$PREV_PATCH" ]]; then
                      echo "Patch version bump"
                  else
                      echo "Version not bumped / not an increasing version"
                      exit 1
                  fi
