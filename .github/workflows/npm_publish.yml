name: npm_publish

on:
    push:
        branches:
            - 'main'
        paths:
            - 'package.json'
    workflow_dispatch:

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3

            - run: mkdir -p protocol/cargo-cache
            - run: mkdir -p protocol/target
            - run: mkdir -p node_modules
            - run: mkdir -p .cache/Cypress

            - name: Restore cache
              uses: actions/cache/restore@v3
              with:
                  path: |
                      protocol/cargo-cache
                      protocol/target
                      node_modules
                      .cache/Cypress
                  # note that restoring a cache in github is a pain. The trailing '-' matches any string after the '-', therefore 'abc-' would match a cache named 'abc-1234' or 'abc-5678', etc.
                  # the problem is 'abc-' will not match a cache named 'abc'! So if you're using wildcard cache name selectors like this, you need a field that changes as the suffix to become the wildcard
                  # here we're setting the key to an unused cache key so it falls back to the wildcard selector in `restore-keys`
                  key: some-unused-cache-key
                  restore-keys: |
                      project-cache-${{ runner.os }}-${{ runner.arch }}-

            - run: npm install

            - run: npm run build:all

            # Create the CommonJS build for each package
            - run: npm run build:all:cjs

            # Get the provider image version from the root package.json and the latest package version from npm
            - name: Check provider version bump
              id: bump_provider_version
              run: |
                  # get the next provider version number from the package.json
                  NEXT=$(cat package.json | jq -r '.version')
                  # get the current provider version number from npm
                  CURRENT=$(npm view @prosopo/provider version)
                  NEXT_MAJOR=$(echo $NEXT | cut -d '.' -f 1)
                  NEXT_MINOR=$(echo $NEXT | cut -d '.' -f 2)
                  NEXT_PATCH=$(echo $NEXT | cut -d '.' -f 3)
                  CURRENT_MAJOR=$(echo $CURRENT | cut -d '.' -f 1)
                  CURRENT_MINOR=$(echo $CURRENT | cut -d '.' -f 2)
                  CURRENT_PATCH=$(echo $CURRENT | cut -d '.' -f 3)
                  # compare major versions for bump
                  if [[ $NEXT_MAJOR -gt $CURRENT_MAJOR ]]; then
                    echo "major version bump detected"
                    echo "BUMP=true" >> $GITHUB_OUTPUT
                  elif [[ $NEXT_MINOR -gt $CURRENT_MINOR ]]; then
                    echo "minor version bump detected"
                    echo "BUMP=true" >> $GITHUB_OUTPUT
                  elif [[ $NEXT_PATCH -gt $CURRENT_PATCH ]]; then
                    echo "patch version bump detected"
                    echo "BUMP=true" >> $GITHUB_OUTPUT
                  else
                    echo "no version bump detected"
                    echo "BUMP=false" >> $GITHUB_OUTPUT
                  fi

            - name: Npm publish
              if: steps.bump_provider_version.outputs.BUMP == 'true'
              run: |
                  if [[ "${{ vars.HOST_GITHUB_ACTIONS }}" == true ]]; then
                    echo "Running on GitHub Actions"
                    # Write the npm token to ~/.npmrc
                    echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
                    echo "Publishing to npm dry-run..."
                    npm run publish:dry-run
                    echo "Publishing to npm..."
                    npm run publish
                  else
                    echo "Running locally via act, skipping npm publish."
                  fi
