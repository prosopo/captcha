# do version bump and publish pkgs

name: release

on:
    push:
        branches: # on push to these branches
            - main
            - build/*
    workflow_dispatch:

concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: false # queue the new runs until previous have finished. This avoids publishing multiple builds at the same time, which may cause issues with the registry

defaults:
    run:
        shell: bash

env:
    BRANCH_PROTECTION_DISABLE: true

jobs:
    release:
        name: release
        runs-on: ubuntu-latest
        environment: ${{ github.ref_name == 'main' && 'production' || 'staging' }}
        steps:
            - name: Print contexts
              uses: prosopo/captcha/.github/actions/print_contexts@gha
              with:
                    INPUTS_CONTEXT: ${{ toJson(inputs) }}
                    NEEDS_CONTEXT: ${{ toJson(needs) }}
                    VARS_CONTEXT: ${{ toJson(vars) }}
                    SECRETS_CONTEXT: ${{ toJson(secrets) }}

            - name: Get token for gh app token
              id: app_token
              uses: peter-murray/workflow-application-token-action@v3
              with:
                application_id: ${{ vars.PROSOPONATOR_APP_ID }}
                application_private_key: ${{ secrets.PROSOPONATOR_APP_PRIVATE_KEY }}
        
            - name: Export vars to env
              run: |
                echo '${{ toJson(vars) }}' | jq -r 'to_entries[] | "\(.key)=\(.value)"' >> $GITHUB_ENV

            - name: Authenticate GitHub CLI
              run: |
                set -x
                echo "${{ secrets.PROSOPONATOR_PAT }}" | gh auth login --with-token

            - uses: actions/checkout@v4
              with:
                  submodules: 'recursive'
                  token: ${{ secrets.PROSOPONATOR_PAT }}
                  fetch-depth: 0 # fetch all history so we can tag the commits

            - name: git config
              run: |
                set -x
                git config user.name "prosoponator[bot]"
                git config user.email "dev@prosopo.io"

            - uses: prosopo/captcha/.github/actions/npm@gha
              with:
                npm_ci_args: '--include=dev'

            - name: setup npm registry
              run: |
                set -x
                echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc
                echo "//npm.pkg.github.com/:_authToken=${{ secrets.PROSOPONATOR_PAT }}" >> ~/.npmrc

            - name: authenticate npm registry
              run: |
                set -x
                npm whoami --registry https://registry.npmjs.org/

            - name: authenticate gh registry
              run: |
                set -x
                npm whoami --registry https://npm.pkg.github.com/

            - name: copy changesets
              run: |
                # copy the changesets from the changesets folder to the version-plans folder
                # this is needed because the release plan command expects them in the version-plans folder
                # the old changesets command puts them in the .changeset folder, so migrate them over
                mkdir -p .nx/version-plans
                cp -r .changeset/*.md .nx/version-plans/ || true
                rm .changeset/*.md || true

            - name: Pre-release
              run: |
                # if we're on main branch
                if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
                  echo "On main branch, exiting prerelease mode"
                  onMain=true
                else
                  echo "Not on main branch, entering prerelease mode"
                  onMain=false
                fi
                find .nx/version-plans -type f -name '*.md' | while read -r file; do
                  if [[ "$onMain" == "true" ]]; then
                    # in all changeset files, migrate prerelease bumps to normal bumps
                    sed -i -E '/^---$/,/^---$/ s/pre(patch|minor|major)/\1/g; /^---$/,/^---$/ s/prerelease/major/g' "$file"
                  else
                    # in all changeset files, migrate normal bumps to prerelease bumps
                    sed -i -E '/^---$/,/^---$/ s/(patch|minor|major)/pre\1/g' "$file"
                  fi
                done

            - name: Apply version bumps
              env: 
                GITHUB_TOKEN: ${{ steps.app_token.outputs.token }}
              run: |
                # if there are changesets, apply them
                if find .nx/version-plans -type f -print -quit | grep -q .; then
                  echo "Found changeset files"
                  npx nx release
                  git status
                  git push
                  git push --tags
                else
                  echo "No changeset files found"
                fi

            - name: affected
              run: |
                affected=$(npx nx show projects --json --affected --base=${{ github.sha }} --head=HEAD)
                echo "affected: $affected"
                echo "affected=$affected" >> $GITHUB_ENV
              
            - name: build+bundle
              run: |
                echo "Building and bundling affected packages"
                npx nx run-many --target=bundle --projects=$(echo $affected | jq -r 'keys | join(",")')

            - name: publish to npm
              id: publish
              run: |
                # for each affected package
                output="[]"
                for pkg in $(echo $affected | jq -r '.[]'); do
                    echo "Publishing $pkg to npm"
                    set +e
                    npm publish -w "$pkg" --access public --registry https://registry.npmjs.org
                    result_npm=$?
                    set -e
                    echo ""

                    echo "Publishing $pkg to gh"
                    # make the package non-private so it can be published to gh
                    npm pkg --workspace $pkg delete private
                    set +e
                    npm publish -w "$pkg" --access public --registry https://npm.pkg.github.com
                    result_gh=$?
                    set -e
                    echo ""

                    output=$(echo "$output" | jq -c ". += [{\"package\": \"$pkg\", \"npm\": $result_npm, \"gh\": $result_gh}]")
                done

                echo "output: $output"
                echo "output=$output" >> $GITHUB_OUTPUT

                failed=$(echo "$output" | jq '[.[] | select((.npm!=0) or (.gh!=0))] | length')
                if [ "$failed" -gt 0 ]; then
                    echo "Some packages failed to publish to GitHub Packages"
                    exit 1
                fi

            - name: print output
              if: always()
              run: |
                echo "output: ${{ steps.publish.outputs.output }}"
                
                npm_success=$(echo "${{ steps.publish.outputs.output }}" | jq -r '.[] | select(.npm == 0) | .package')
                gh_success=$(echo "${{ steps.publish.outputs.output }}" | jq -r '.[] | select(.gh == 0) | .package')
                npm_failure=$(echo "${{ steps.publish.outputs.output }}" | jq -r '.[] | select(.npm != 0) | .package')
                gh_failure=$(echo "${{ steps.publish.outputs.output }}" | jq -r '.[] | select(.gh != 0) | .package')

                if [ -n "$npm_success" ]; then
                  echo "Successfully published to npm:"
                  echo "$npm_success"
                  echo ""
                  curl -X POST -H 'Content-type: application/json' --data "{\"text\": \":rocket: Successfully published to npm: \`\`\`$npm_success\`\`\`\"}" ${{ secrets.SLACKBOT_DEVOPS }}
                fi

                if [ -n "$gh_success" ]; then
                  echo "Successfully published to GitHub Packages:"
                  echo "$gh_success"
                  echo ""
                  curl -X POST -H 'Content-type: application/json' --data "{\"text\": \":rocket: Successfully published to gh: \`\`\`$gh_success\`\`\`\"}" ${{ secrets.SLACKBOT_DEVOPS }}
                fi
                
                if [ -n "$npm_failure" ]; then
                  echo "Failed to publish to npm:"
                  echo "$npm_failure"
                  echo ""
                  curl -X POST -H 'Content-type: application/json' --data "{\"text\": \":x: Failed to publish to npm: \`\`\`$npm_failure\`\`\`\"}" ${{ secrets.SLACKBOT_DEVOPS }}
                fi

                if [ -n "$gh_failure" ]; then
                  echo "Failed to publish to GitHub Packages:"
                  echo "$gh_failure"
                  echo ""
                  curl -X POST -H 'Content-type: application/json' --data "{\"text\": \":x: Failed to publish to gh: \`\`\`$gh_failure\`\`\`\"}" ${{ secrets.SLACKBOT_DEVOPS }}
                fi
