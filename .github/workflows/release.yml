name: release

on:
  # push:
    # branches: # on push to these branches
    #   - main
    #   - build/*
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: false # queue the new runs until previous have finished. This avoids version bumps overlapping with each other

defaults:
  run:
    shell: bash

env:
  affected: '[]' # default to empty array
  prerelease: 'false' # default to false, will be set to true if there are changesets and not on main branch
  BRANCH_PROTECTION_DISABLED: 'true' # bypass husky check
  NODE_ENV: "production"

jobs:
  release:
    name: release
    runs-on: ubuntu-latest
    steps:
      - name: Print contexts
        uses: prosopo/captcha/.github/actions/print_contexts@gha
        with:
          INPUTS_CONTEXT: ${{ toJson(inputs) }}
          NEEDS_CONTEXT: ${{ toJson(needs) }}
          VARS_CONTEXT: ${{ toJson(vars) }}
          SECRETS_CONTEXT: ${{ toJson(secrets) }}

      - name: Set NX_PARALLEL environment variable
        run: echo "NX_PARALLEL=$(nproc)" >> $GITHUB_ENV

      - name: Get token for gh app token
        id: app_token
        uses: peter-murray/workflow-application-token-action@v3
        with:
          application_id: ${{ vars.PROSOPONATOR_APP_ID }}
          application_private_key: ${{ secrets.PROSOPONATOR_APP_PRIVATE_KEY }}

      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          token: ${{ steps.app_token.outputs.token }}
          fetch-depth: 0 # fetch all history

      - name: setup npm registry
        run: |
          set -x
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc

      - name: authenticate npm registry
        run: |
          set -x
          npm whoami --registry https://registry.npmjs.org/

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Export vars to env
        run: |
          echo '${{ toJson(vars) }}' | jq -r 'to_entries[] | "\(.key)=\(.value)"' >> $GITHUB_ENV

      - name: git config
        run: |
          set -x
          git config user.name "prosoponator[bot]"
          git config user.email "dev@prosopo.io"

      - run: npm ci --ignore-scripts --include=dev

      - name: detect changesets
        run: |
          if find .changeset -name "*.md" | grep -q . ; then
            echo "Found changesets"
            echo "changesets=true" >> $GITHUB_ENV
          else
            echo "No changesets found"
            echo "changesets=false" >> $GITHUB_ENV
          fi

      - name: version
        run: |
          npm i -g @changesets/cli
          npx @changesets/cli version --verbose
          git status

          npm i --ignore-scripts --include=dev
          # Set the version of the root package.json and the docker/images/provider/package.json to the same as @prosopo/cli
          root_version=$(npm -w @prosopo/cli pkg get version | jq -r '.["@prosopo/cli"]')-dev
          echo "root_version=$root_version" >> $GITHUB_ENV
          echo "Setting root package.json version to $root_version"
          npm pkg set version="$root_version"
          cd docker/images/provider
          # Set the version of the docker/images/provider/package.json to the same as the root package.json
          npm pkg set version="$root_version"
          cd -
          git add -u .
          git commit -m "chore: version bump"
          git status

      - name: lint
        run: |
          npm run build:tsc -w @prosopo/config
          npm run build:tsc -w @prosopo/lint
          npm run lint-fix
          # Amend the previous commit with any lint fixes
          if [ -n "$(git status --porcelain)" ]; then
            git add -u .
            git commit --amend --no-edit
          fi

      - name: tag
        run: |
          # tag the repo with the root package version
          git tag "v${{ env.root_version }}"

      - name: build+bundle
        if: ${{ env.affected != '[]' }}
        run: |
          echo "Building and bundling affected packages"
          set -x
          npm run build:all
          npm run build:all:cjs
          npm run bundle:all

      - name: push
        env:
          GITHUB_TOKEN: ${{ steps.app_token.outputs.token }}
        run: |
          git push
          git push --tags

      - name: publish to npm
        run: |
          npm run publish:all

      - name: publish provider image to dockerhub
        run: |
          cd docker/images/provider
          npm run build
          npm run publish:docker 

      - name: handle result
        run: |
          echo "affected: ${{ env.affected }}"

          if [ "${{ job.status }}" == "failure" ]; then
            echo "Workflow failed, notifying Slack"
            curl -X POST -H 'Content-type: application/json' --data "{\"text\": \":rotating_light: Release workflow *failed* for branch \`${GITHUB_REF##*/}\` <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>\"}" ${{ secrets.SLACKBOT_DEVOPS }}
          fi

          tag = "v${{ env.root_version }}"
          echo "Successfully released ${tag}"
          echo ""
          curl -X POST -H 'Content-type: application/json' --data "{\"text\": \":rocket: Successfully released: $tag\"}" ${{ secrets.SLACKBOT_DEVOPS }}

