name: release

on:
    push:
        branches: # on push to these branches
            - main
            - build/*
    workflow_dispatch:

concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: false # queue the new runs until previous have finished. This avoids version bumps overlapping with each other

defaults:
    run:
        shell: bash

env:
  affected: '[]' # default to empty array
  prerelease: 'false' # default to false, will be set to true if there are changesets and not on main branch
  BRANCH_PROTECTION_DISABLED: 'true' # bypass husky check

jobs:
    release:
        name: release
        runs-on: ubuntu-latest
        steps:
            - name: Print contexts
              uses: prosopo/captcha/.github/actions/print_contexts@gha
              with:
                    INPUTS_CONTEXT: ${{ toJson(inputs) }}
                    NEEDS_CONTEXT: ${{ toJson(needs) }}
                    VARS_CONTEXT: ${{ toJson(vars) }}
                    SECRETS_CONTEXT: ${{ toJson(secrets) }}

            - name: Get token for gh app token
              id: app_token
              uses: peter-murray/workflow-application-token-action@v3
              with:
                application_id: ${{ vars.PROSOPONATOR_APP_ID }}
                application_private_key: ${{ secrets.PROSOPONATOR_APP_PRIVATE_KEY }}

            - uses: actions/checkout@v4
              with:
                  submodules: 'recursive'
                  token: ${{ steps.app_token.outputs.token }}
                  fetch-depth: 0 # fetch all history

            - name: setup npm registry
              run: |
                set -x
                echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc
                echo "//npm.pkg.github.com/:_authToken=${{ secrets.PROSOPONATOR_PAT }}" >> ~/.npmrc

            - name: authenticate npm registry
              run: |
                set -x
                npm whoami --registry https://registry.npmjs.org/

            - name: authenticate gh registry
              run: |
                set -x
                npm whoami --registry https://npm.pkg.github.com/

            - name: Export vars to env
              run: |
                echo '${{ toJson(vars) }}' | jq -r 'to_entries[] | "\(.key)=\(.value)"' >> $GITHUB_ENV

            - name: git config
              run: |
                set -x
                git config user.name "prosoponator[bot]"
                git config user.email "dev@prosopo.io"

            - run: npm ci

            - name: prerelease
              run: |
                # if there are changesets
                if find .changeset -name "*.md" | grep -q . ; then
                  echo "Found changesets"
                  if [ "${GITHUB_REF##*/}" = "main" ]; then
                    echo "On main branch, exiting prerelease mode"
                    # remove pre.json to exit prerelease mode
                    npx @changesets/cli pre exit || true
                  else
                    echo "Not on main branch, entering prerelease mode"
                    # pre.json puts changesets into prerelease mode
                    branch_name="${GITHUB_REF##*/}"
                    # sanitize branch name to be safe for changesets
                    # replace unsafe characters with '-'
                    # e.g. my/branch?is#unsafe -> my-branch-is-unsafe
                    safe_branch_name=$(echo "$branch_name" | tr '/\\:;*?"<>|@#%&=+,$' '-')
                    npx @changesets/cli pre enter "$safe_branch_name"
                    echo "prerelease=true" >> $GITHUB_ENV
                  fi
                else
                  echo "No changesets found"
                fi

            - name: version
              run: |
                npx @changesets/cli version --verbose
                git status
                if [ -z "$(git status --porcelain)" ]; then
                    echo "No changes to commit"
                    exit 0
                fi
                git add -u .
                git commit -m "chore: version bump"
                git status

                # Find all package.json files changed in the last commit (by changesets version bump)
                changed_pkg_jsons=$(git diff --name-only HEAD~1 HEAD | grep 'package.json$' || true)
                package_files=""
                for file in $changed_pkg_jsons; do
                  # Check if the version property changed in this package.json
                  if git diff HEAD~1 HEAD -- "$file" | grep -qE '\+[[:space:]]+"version":'; then
                    package_files="$package_files $file"
                  fi
                done
                affected='[]'
                if [ -n "$package_files" ]; then
                    affected='[]'
                    for file in $package_files; do
                        name=$(jq -r '.name' "$file")
                        affected=$(echo "$affected" | jq -c --arg name "$name" '. + [$name]')
                    done
                else 
                    echo "No package.json files changed, no affected packages"
                fi
                echo "affected: $affected"
                echo "affected=$affected" >> $GITHUB_ENV

            - name: tag
              if: ${{ env.affected != '[]' }}
              run: |
                # tag each affected package with the new version
                for pkg in $(echo '${{ env.affected }}' | jq -r '.[]'); do
                    if [ "$pkg" = "$(jq -r '.name' package.json)" ]; then
                      version=$(npm pkg get version | jq -r '.')
                    else  
                      version=$(npm pkg --workspace $pkg get version | jq -r ".[\"$pkg\"]")
                    fi
                    echo "Tagging $pkg with version $version"
                    git tag "$pkg@$version"
                    echo
                done
              
            - name: build+bundle
              if: ${{ env.affected != '[]' }}
              run: |
                echo "Building and bundling affected packages"
                set -x
                npx nx run-many --target=build,build:cjs,bundle --projects=$(echo $affected | jq -r 'join(",")')

            - name: push
              if: ${{ env.affected != '[]' }}
              env:
                GITHUB_TOKEN: ${{ steps.app_token.outputs.token }}
              run: |
                # allow the push to fail if there are no changes to push
                git push
                git push --tags

            - name: publish
              if: ${{ env.affected != '[]' }}
              id: publish
              run: |
                # for each affected package
                output="[]"
                for pkg in $(echo '${{ env.affected }}' | jq -r '.[]'); do
                    # skip the workspace root
                    if [ "$pkg" == "$(cat package.json | jq -r '.name')" ]; then
                        echo "Skipping workspace root package"
                        continue
                    fi

                    echo "Publishing $pkg to npm"
                    result_npm=0
                    if [ "${{ env.prerelease }}" = "false" ]; then
                      set +e
                      npm publish -w "$pkg" --access public --registry https://registry.npmjs.org/
                      result_npm=$?
                      set -e
                    else
                      echo "Skipping npm publish for prerelease"
                    fi
                    echo

                    echo "Publishing $pkg to gh"
                    result_gh=0
                    # make the package non-private so it can be published to gh
                    npm pkg --workspace $pkg delete private
                    set +e
                    npm publish -w "$pkg" --access public --registry https://npm.pkg.github.com
                    result_gh=$?
                    set -e
                    echo

                    output=$(echo "$output" | jq -c ". += [{\"package\": \"$pkg\", \"npm\": $result_npm, \"gh\": $result_gh}]")
                done

                echo "output: $output"
                echo "output=$output" >> $GITHUB_OUTPUT

                failed=$(echo "$output" | jq '[.[] | select((.npm!=0) or (.gh!=0))] | length')
                if [ "$failed" -gt 0 ]; then
                    echo "Some packages failed to publish to GitHub Packages"
                    exit 1
                fi

            - name: print output
              if: always()
              run: |
                echo "output: ${{ steps.publish.outputs.output }}"
                
                npm_success=$(echo "${{ steps.publish.outputs.output }}" | jq -r '.[] | select(.npm == 0) | .package')
                gh_success=$(echo "${{ steps.publish.outputs.output }}" | jq -r '.[] | select(.gh == 0) | .package')
                npm_failure=$(echo "${{ steps.publish.outputs.output }}" | jq -r '.[] | select(.npm != 0) | .package')
                gh_failure=$(echo "${{ steps.publish.outputs.output }}" | jq -r '.[] | select(.gh != 0) | .package')

                if [ -n "$npm_success" ]; then
                  echo "Successfully published to npm:"
                  echo "$npm_success"
                  echo ""
                  curl -X POST -H 'Content-type: application/json' --data "{\"text\": \":rocket: Successfully published to npm: \`\`\`$npm_success\`\`\`\"}" ${{ secrets.SLACKBOT_DEVOPS }}
                fi

                if [ -n "$gh_success" ]; then
                  echo "Successfully published to GitHub Packages:"
                  echo "$gh_success"
                  echo ""
                  curl -X POST -H 'Content-type: application/json' --data "{\"text\": \":rocket: Successfully published to gh: \`\`\`$gh_success\`\`\`\"}" ${{ secrets.SLACKBOT_DEVOPS }}
                fi
                
                if [ -n "$npm_failure" ]; then
                  echo "Failed to publish to npm:"
                  echo "$npm_failure"
                  echo ""
                  curl -X POST -H 'Content-type: application/json' --data "{\"text\": \":x: Failed to publish to npm: \`\`\`$npm_failure\`\`\`\"}" ${{ secrets.SLACKBOT_DEVOPS }}
                fi

                if [ -n "$gh_failure" ]; then
                  echo "Failed to publish to GitHub Packages:"
                  echo "$gh_failure"
                  echo ""
                  curl -X POST -H 'Content-type: application/json' --data "{\"text\": \":x: Failed to publish to gh: \`\`\`$gh_failure\`\`\`\"}" ${{ secrets.SLACKBOT_DEVOPS }}
                fi
