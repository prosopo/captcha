name: dockerhub_publish

on:
    push:
        branches:
            - 'main'
        paths:
            - 'package.json'
            - '.github/workflows/dockerhub_publish.yml'
    workflow_dispatch:

concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: true

jobs:
    check_version:
        uses: prosopo/captcha/.github/workflows/check_version.yml@main
    build:
        needs: check_version
        runs-on: ubuntu-latest
        steps:
            # Checkout the repo
            - uses: actions/checkout@v3
            - uses: actions/setup-node@v3
              with:
                  node-version: 18
            - name: Install npm
              run: npm i -g npm@$(cat package.json | jq -r .engines.npm)

            - run: mkdir -p protocol/cargo-cache
            - run: mkdir -p protocol/target
            - run: mkdir -p node_modules
            - run: mkdir -p ~/.cache/Cypress

            - name: Restore cache
              uses: actions/cache/restore@v3
              with:
                  path: |
                      protocol/cargo-cache
                      protocol/target
                      node_modules
                      ~/.cache/Cypress
                  # note that restoring a cache in github is a pain. The trailing '-' matches any string after the '-', therefore 'abc-' would match a cache named 'abc-1234' or 'abc-5678', etc.
                  # the problem is 'abc-' will not match a cache named 'abc'! So if you're using wildcard cache name selectors like this, you need a field that changes as the suffix to become the wildcard
                  # here we're setting the key to an unused cache key so it falls back to the wildcard selector in `restore-keys`
                  key: some-unused-cache-key
                  restore-keys: |
                      project-cache-${{ runner.os }}-${{ runner.arch }}-

            - name: Install dependencies and build packages
              # Install dependencies and build packages if either provider or JS bundle needs to be published
              if: >-
                  needs.check_version.outputs.bump == 'true'
              run: |
                  set -e  # Exit immediately if a command exits with a non-zero status.
                  echo "Installing dependencies..."
                  npm ci
                  echo "Building packages..."
                  npm run build:all
                  npm run build:all:cjs

            - name: Log in to Docker Hub
              # Only log in if either provider or JS bundle needs to be published
              if: >-
                  needs.check_version.outputs.bump == 'true'
              run: |
                  echo "Logging into Docker Hub."
                  echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin 2> /dev/null

            - name: Build JS Bundle and Publish to Docker Hub
              # Build JS bundle and publish to Docker Hub if publish_dockerhub_js_bundle is true
              if: needs.check_version.outputs.bump == 'true'
              run: |
                  # Create a temporary directory to store existing JS bundles
                  mkdir -p ./js_bundles_host_temp/

                  # Copy the rococo env file to production env file
                  echo "Copying the rococo env to production env file in procaptcha-bundle"
                  cp ./dev/scripts/env.rococo ./packages/procaptcha-bundle/.env.production

                  # Navigate to the JS bundle directory and build
                  echo "Navigating to 'packages/procaptcha-bundle' and building JS bundle..."
                  cd packages/procaptcha-bundle

                  NODE_ENV=production npm run build:prod

                  # Rename the bundle to include the version number
                  mv procaptcha.bundle.js procaptcha.bundle.${{ needs.check_version.outputs.next_version }}.js
                  NEW_BUNDLE_FILENAME="procaptcha.bundle.${{ needs.check_version.outputs.next_version }}.js"

                  # Navigate back to the project root
                  echo "Navigating back to project root..."
                  cd ../..

                  # Pull the latest Docker image
                  docker pull prosopo/js_server:${{needs.check_version.outputs.current_version}} || echo "No existing image found" && exit 1

                  # Create a temporary container from the latest image
                  CONTAINER_ID=$(docker create prosopo/js_server:${{needs.check_version.outputs.current_version}})

                  # Copy the entire bundle directory from the container to the host
                  docker cp $CONTAINER_ID:/usr/share/nginx/html/js/ ./js_bundles_host_temp/

                  # Remove the temporary container
                  docker rm $CONTAINER_ID

                  # Add the new bundle to the local js directory
                  cp ./packages/procaptcha-bundle/dist/bundle/$NEW_BUNDLE_FILENAME ./js_bundles_host_temp/

                  # Remove ./js_bundles_host_temp/procaptcha.bundle.js if one already exists
                  rm -f ./js_bundles_host_temp/procaptcha.bundle.js

                  # Create a symlink named 'procaptcha.bundle.js' pointing to the new versioned bundle
                  ln -s $NEW_BUNDLE_FILENAME ./js_bundles_host_temp/procaptcha.bundle.js

                  # Build a new Docker image with the updated js directory
                  docker build --file ./docker/images/js.server.dockerfile . -t prosopo/js_server:${{needs.check_version.outputs.next_version}}

                  echo "Pushing Docker image for JS bundle..."
                  docker push prosopo/js_server:${{needs.check_version.outputs.next_version}}

                  # Cleanup: Remove the temporary js directory
                  rm -rf ./js_bundles_host_temp/

            - name: Build and Push the Provider Bundle
              # Build and push the provider bundle to Docker Hub if bump is true
              if: needs.check_version.outputs.bump == 'true'
              run: |
                  # Copy the rococo env file to production env file
                  echo "Copying the rococo env to production env file in cli package"
                  cp ./dev/scripts/env.rococo ./packages/cli/.env.production

                  # Navigate to the provider CLI directory and build
                  echo "Navigating to 'packages/cli' and building..."
                  cd packages/cli
                  NODE_ENV=production npm run build:prod

                  # Navigate back to the project root
                  echo "Navigating back to project root..."
                  cd ../..

                  # Build and push the Docker image
                  echo "Building Docker image..."
                  docker build --file ./docker/images/provider.dockerfile . -t prosopo/provider:${{needs.check_version.outputs.next_version}}
                  echo "Pushing Docker image..."
                  docker push prosopo/provider:${{needs.check_version.outputs.next_version}}
