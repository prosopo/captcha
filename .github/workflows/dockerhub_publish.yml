name: dockerhub_publish

on:
    push:
        branches:
            - 'main'
        paths:
            - 'package.json'
    workflow_dispatch:

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            # Checkout the repo
            - uses: actions/checkout@v3

            - run: mkdir -p protocol/cargo-cache
            - run: mkdir -p protocol/target
            - run: mkdir -p node_modules
            - run: mkdir -p .cache/Cypress

            - name: Restore cache
              uses: actions/cache/restore@v3
              with:
                  path: |
                      protocol/cargo-cache
                      protocol/target
                      node_modules
                      .cache/Cypress
                  # note that restoring a cache in github is a pain. The trailing '-' matches any string after the '-', therefore 'abc-' would match a cache named 'abc-1234' or 'abc-5678', etc.
                  # the problem is 'abc-' will not match a cache named 'abc'! So if you're using wildcard cache name selectors like this, you need a field that changes as the suffix to become the wildcard
                  # here we're setting the key to an unused cache key so it falls back to the wildcard selector in `restore-keys`
                  key: some-unused-cache-key
                  restore-keys: |
                      project-cache-${{ runner.os }}-${{ runner.arch }}-

            # Get the provider image version from the root package.json and the latest package version from npm
            - name: Check provider version bump
              id: check_provider_image_version
              run: |
                  # get the next provider version number from the package.json
                  NEXT=$(cat package.json | jq -r '.version'
                  # get the current provider version number from npm
                  CURRENT=$(npm view @prosopo/provider version)
                  NEXT_MAJOR=$(echo $NEXT | cut -d '.' -f 1)
                  NEXT_MINOR=$(echo $NEXT | cut -d '.' -f 2)
                  NEXT_PATCH=$(echo $NEXT | cut -d '.' -f 3)
                  CURRENT_MAJOR=$(echo $CURRENT | cut -d '.' -f 1)
                  CURRENT_MINOR=$(echo $CURRENT | cut -d '.' -f 2)
                  CURRENT_PATCH=$(echo $CURRENT | cut -d '.' -f 3)
                  # compare major versions for bump
                  if [[ $NEXT_MAJOR -gt $CURRENT_MAJOR ]]; then
                    echo "major version bump detected"
                    echo "publish_dockerhub_provider=true" >> $GITHUB_OUTPUT
                    echo "publish_dockerhub_js_bundle=true" >> $GITHUB_OUTPUT
                  elif [[ $NEXT_MINOR -gt $CURRENT_MINOR ]]; then
                    echo "minor version bump detected"
                    echo "publish_dockerhub_provider=true" >> $GITHUB_OUTPUT
                    echo "publish_dockerhub_js_bundle=true" >> $GITHUB_OUTPUT
                  elif [[ $NEXT_PATCH -gt $CURRENT_PATCH ]]; then
                    echo "patch version bump detected"
                    echo "publish_dockerhub_provider=true" >> $GITHUB_OUTPUT
                    echo "publish_dockerhub_js_bundle=true" >> $GITHUB_OUTPUT
                  else
                    echo "no version bump detected"
                    echo "publish_dockerhub_provider=true" >> $GITHUB_OUTPUT
                    echo "publish_dockerhub_js_bundle=true" >> $GITHUB_OUTPUT
                  fi

            - name: Install dependencies and build packages
              # Install dependencies and build packages if either provider or JS bundle needs to be published
              if: >-
                  steps.check_provider_image_version.outputs.publish_dockerhub_provider == 'true' ||
                  steps.check_provider_image_version.outputs.publish_dockerhub_js_bundle == 'true'
              run: |
                  set -e  # Exit immediately if a command exits with a non-zero status.
                  echo "Installing dependencies..."
                  npm ci
                  echo "Building packages..."
                  npm run build:all

            - name: Log in to Docker Hub
              # Only log in if either provider or JS bundle needs to be published
              if: >-
                  steps.check_provider_image_version.outputs.publish_dockerhub_provider == 'true' ||
                  steps.check_provider_image_version.outputs.publish_dockerhub_js_bundle == 'true'
              run: |
                  echo "Logging into Docker Hub."
                  echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin 2> /dev/null

            - name: Build JS Bundle and Publish to Docker Hub
              # Build JS bundle and publish to Docker Hub if publish_dockerhub_js_bundle is true
              if: steps.check_provider_image_version.outputs.publish_dockerhub_js_bundle == 'true'
              run: |
                  # Navigate to the JS bundle directory and build
                  echo "Navigating to 'packages/procaptcha-bundle' and building JS bundle..."
                  cd packages/procaptcha-bundle
                  npm run build:prod

                  # Navigate back to the project root
                  echo "Navigating back to project root..."
                  cd ../..

                  # Build and push the JS Docker image
                  echo "Building Docker image for JS bundle..."
                  docker build --file ./docker/images/js.server.dockerfile . -t prosopo/js_server:${env.PROVIDER_IMAGE_VERSION}
                  echo "Pushing Docker image for JS bundle..."
                  docker push prosopo/js_server:${env.PROVIDER_IMAGE_VERSION}

            - name: Build and Push the Provider Bundle
              # Build and push the provider bundle to Docker Hub if publish_dockerhub_provider is true
              if: steps.check_provider_image_version.outputs.publish_dockerhub_provider == 'true'
              run: |
                  # Navigate to the provider CLI directory and build
                  echo "Navigating to 'packages/cli' and building..."
                  cd packages/cli
                  npm run build:prod

                  # Navigate back to the project root
                  echo "Navigating back to project root..."
                  cd ../..

                  # Build and push the Docker image
                  echo "Building Docker image..."
                  docker build --file ./docker/images/provider.dockerfile . -t prosopo/provider:${env.PROVIDER_IMAGE_VERSION}
                  echo "Pushing Docker image..."
                  docker push prosopo/provider:${env.PROVIDER_IMAGE_VERSION}
