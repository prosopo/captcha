name: contract_release_process

on:
    push:
        branches:
            - 'main'
        paths:
            - 'package.json'
    workflow_dispatch:

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            # Checkout the repo
            - uses: actions/checkout@v3

            # Get the provider image version from the root package.json and the latest package version from npm
            - name: Get provider image version
              run: |
                  echo "PROVIDER_IMAGE_VERSION=$(cat package.json | jq -r '.version')" >> $GITHUB_ENV
                  echo "LATEST_PROVIDER_VERSION=$(npm view @prosopo/provider version)" >> $GITHUB_ENV

            - run: mkdir -p protocol/cargo-cache
            - run: mkdir -p protocol/target
            - run: mkdir -p node_modules
            - run: mkdir -p .cache/Cypress

            - name: Set versions string
              run: echo "VERSIONS_TO_COMPARE=${{ env.PROVIDER_IMAGE_VERSION }}\\n${{ env.LATEST_PROVIDER_VERSION }}" >> $GITHUB_ENV

            - name: Restore cache
              uses: actions/cache/restore@v3
              with:
                  path: |
                      protocol/cargo-cache
                      protocol/target
                      node_modules
                      .cache/Cypress
                  # note that restoring a cache in github is a pain. The trailing '-' matches any string after the '-', therefore 'abc-' would match a cache named 'abc-1234' or 'abc-5678', etc.
                  # the problem is 'abc-' will not match a cache named 'abc'! So if you're using wildcard cache name selectors like this, you need a field that changes as the suffix to become the wildcard
                  # here we're setting the key to an unused cache key so it falls back to the wildcard selector in `restore-keys`
                  key: some-unused-cache-key
                  restore-keys: |
                      project-cache-${{ runner.os }}-${{ runner.arch }}-

            - name: Check Provider Image Version
              id: check_provider_image_version
              run: |
                  echo "Checking provider image version..."
                  echo "PROVIDER_IMAGE_VERSION=${{ env.PROVIDER_IMAGE_VERSION }}"
                  echo "LATEST_PROVIDER_VERSION=${{ env.LATEST_PROVIDER_VERSION }}"

                  # Initialize flags for publishing the release
                  contract_sources_release="true"

                  # Condition 1: If version is equal to the npm version, exit successfully
                  if [[ "${{ env.PROVIDER_IMAGE_VERSION }}" == "${{ env.LATEST_PROVIDER_VERSION }}" ]]; then
                    echo "Condition 1: Current npm version detected. No action needed."
                    contract_sources_release="false"
                    exit 0
                  fi

                  # Condition 2: If version is less than the npm version, exit with error
                  # Note: This is technically less than or equal, but equality is checked above
                  if [[ $(echo -e "${{ env.VERSIONS_TO_COMPARE }}" | sort -V | head -n 1) == "${{ env.PROVIDER_IMAGE_VERSION }}" ]]; then
                    echo "Condition 2: Version bump required. Exiting with error."
                    contract_sources_release="false"
                    exit 1
                  fi

                  # Condition 3: If greater than npm version, consider for new release
                  if [[ $(echo -e "${{ env.VERSIONS_TO_COMPARE }}" | sort -Vr | head -n 1) == "${{ env.PROVIDER_IMAGE_VERSION }}" ]]; then
                    echo "Condition 3: Version bump detected. Preparing for Docker Hub publish."

                    # Check if running on GitHub Actions
                    if [[ "${{ vars.HOST_GITHUB_ACTIONS }}" == true ]]; then
                      echo "Running on GitHub Actions. Continuing with Docker Hub publish."
                    else
                      echo "Running locally via act. Skipping Docker Hub publish."
                      contract_sources_release="false"
                    fi
                  fi

                  # Update GitHub environment variables
                  echo "Setting environment flags..."
                  echo "contract_sources_release=$contract_sources_release" >> $GITHUB_ENV

                  echo "::set-output name=contract_sources_release::$contract_sources_release"

            - name: Build the contract sources
              if: steps.check_provider_image_version.outputs.contract_sources_release == 'true'
              run: |
                  set -e  # Exit immediately if a command exits with a non-zero status.

                  npm ci

                  cd protocol/dev
                  npm run build
                  npm run cli -- clean --docker
                  npm run cli -- build --docker

                  cd ../..

            - name: Create Release
              if: steps.check_provider_image_version.outputs.contract_sources_release == 'true'
              id: create_release
              uses: actions/create-release@v1
              with:
                  tag_name: ${{ env.PROVIDER_IMAGE_VERSION }}
                  release_name: Release ${{ env.PROVIDER_IMAGE_VERSION }}
                  body: Automated release of contract sources for npm version ${{ env.PROVIDER_IMAGE_VERSION }}
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Upload Contract ABI
              if: steps.check_provider_image_version.outputs.contract_sources_release == 'true'
              id: upload-release-asset-abi
              uses: actions/upload-release-asset@v1
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./protocol/target/ink/captcha/captcha.json
                  asset_name: captcha.json
                  asset_content_type: application/json
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Upload Contract WASM
              if: steps.check_provider_image_version.outputs.contract_sources_release == 'true'
              id: upload-release-asset-wasm
              uses: actions/upload-release-asset@v1
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./protocol/target/ink/captcha/captcha.wasm
                  asset_name: captcha.wasm
                  asset_content_type: application/octet-stream
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Upload Contract
              if: steps.check_provider_image_version.outputs.contract_sources_release == 'true'
              id: upload-release-asset-contract
              uses: actions/upload-release-asset@v1
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./protocol/target/ink/captcha/captcha.contract
                  asset_name: captcha.contract
                  asset_content_type: application/octet-stream
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Upload Proxy ABI
              if: steps.check_provider_image_version.outputs.contract_sources_release == 'true'
              id: upload-release-asset-abi-proxy
              uses: actions/upload-release-asset@v1
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./protocol/target/ink/proxy/proxy.json
                  asset_name: proxy.json
                  asset_content_type: application/json
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Upload Proxy WASM
              if: steps.check_provider_image_version.outputs.contract_sources_release == 'true'
              id: upload-release-asset-wasm-proxy
              uses: actions/upload-release-asset@v1
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./protocol/target/ink/proxy/proxy.wasm
                  asset_name: proxy.wasm
                  asset_content_type: application/octet-stream
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Upload Proxy
              if: steps.check_provider_image_version.outputs.contract_sources_release == 'true'
              id: upload-release-asset-contract-proxy
              uses: actions/upload-release-asset@v1
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./protocol/target/ink/proxy/proxy.contract
                  asset_name: proxy.contract
                  asset_content_type: application/octet-stream
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
