# Workflow which bumps the version of all packages in the repo

name: bump_version

on:
    # run manually
    workflow_dispatch:
        inputs:
            version:
                type: string
                description: Version number (e.g. 1.2.3)
                required: true
            src:
                type: string
                description: Source branch name (e.g. staging)
                required: true
                default: staging
            interim:
                type: string
                description: Interim branch name (e.g. release/1.2.3). Leave empty to use 'release/<version_number>'.
                required: false
            dest:
                type: string
                description: Destination branch name (e.g. main)
                required: true
                default: main

concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: true
    
env:
    GITHUB_TOKEN: ${{ secrets.PROSOPONATOR_PAT }}

jobs:
    bump_version:
        runs-on: ubuntu-latest
        steps:
            - name: Print contexts
              env:
                  GITHUB_CONTEXT: ${{ toJson(github) }}
                  ENV_CONTEXT: ${{ toJson(env) }}
                  VARS_CONTEXT: ${{ toJson(vars) }}
                  JOB_CONTEXT: ${{ toJson(job) }}
                  STEPS_CONTEXT: ${{ toJson(steps) }}
                  RUNNER_CONTEXT: ${{ toJson(runner) }}
                  SECRETS_CONTEXT: ${{ toJson(secrets) }}
                  STRATEGY_CONTEXT: ${{ toJson(strategy) }}
                  MATRIX_CONTEXT: ${{ toJson(matrix) }}
                  NEEDS_CONTEXT: ${{ toJson(needs) }}
                  INPUTS_CONTEXT: ${{ toJson(inputs) }}
              run: |
                  echo "******************************"
                  echo "github:" "$GITHUB_CONTEXT"
                  echo "******************************"
                  echo "env:" "$ENV_CONTEXT"
                  echo "******************************"
                  echo "vars:" "$VARS_CONTEXT"
                  echo "******************************"
                  echo "job:" "$JOB_CONTEXT"
                  echo "******************************"
                  echo "steps:" "$STEPS_CONTEXT"
                  echo "******************************"
                  echo "runner:" "$RUNNER_CONTEXT"
                  echo "******************************"
                  echo "secrets:" "$SECRETS_CONTEXT"
                  echo "******************************"
                  echo "strategy:" "$STRATEGY_CONTEXT"
                  echo "******************************"
                  echo "matrix:" "$MATRIX_CONTEXT"
                  echo "******************************"
                  echo "needs:" "$NEEDS_CONTEXT"
                  echo "******************************"
                  echo "inputs:" "$INPUTS_CONTEXT"
                  echo "******************************"

            - uses: actions/checkout@v3

            - name: Bump version
              run: |
                set -euxo pipefail # stop on errors, print commands, fail on pipe fails

                # set the author in git
                git config user.name "prosoponator[bot]"
                git config user.email "dev@prosopo.io"

                # checkout the src branch
                git checkout ${{ github.event.inputs.src }}

                INTERIM="${{ github.event.inputs.interim}}"
                # set the interim branch name to release/<version_number> if not provided
                INTERIM="${INTERIM:-release/${{ github.event.inputs.version }}}"

                # make a new branch for the version changes
                git switch -c $INTERIM

                pkgJsons=$(npm run --silent ws:pkg)
                pkgNames=$(npm run --silent ws:ls)
                for pkgJson in $pkgJsons; do
                    # for each package in the workspace, set the version number
                    cat $pkgJson | jq ".version = \"${{ github.event.inputs.version }}\"" > $pkgJson
                    for pkgName in $pkgNames; do
                        # for each package in the workspace, check whether it is in the dependencies of the current package
                        # if so, bump the version number in the dependencies
                        cat $pkgJson | jq "if .dependencies[\"$pkgName\"] then .dependencies[\"$pkgName\"] = \"^${{ github.event.inputs.version }}\" else . end" > $pkgJson
                    done
                done

                # update pkg lock
                npm i

                # commit the version changes
                git add .
                git commit -m "Bump version to ${{ github.event.inputs.version }}"

                # push version changes
                git push --set-upstream origin $INTERIM
                
                # fetch the dest branch
                git fetch origin ${{ github.event.inputs.dest }}

                # create a PR for the release
                gh pr create --base ${{ github.event.inputs.dest }} --title "Release ${{ github.event.inputs.version }}" --fill
