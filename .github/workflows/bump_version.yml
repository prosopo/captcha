# Workflow which bumps the version of all packages in the repo

name: bump_version

on:
    # run manually
    workflow_dispatch:
        inputs:
            version:
                type: string
                description: Version number (e.g. 1.2.3)
                required: true
            src:
                type: string
                description: Source branch name (e.g. staging)
                required: true
                default: staging
            interim:
                type: string
                description: Interim branch name (e.g. release/1.2.3). Leave empty to use 'release/<version_number>'.
                required: false
            dest:
                type: string
                description: Destination branch name (e.g. main)
                required: true
                default: main

concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: true

env:
    GITHUB_TOKEN: ${{ secrets.PROSOPONATOR_PAT }}
    GH_TOKEN: ${{ secrets.PROSOPONATOR_PAT }}
    CARGO_TERM_COLOR: always
    NODE_OPTIONS: "--max-old-space-size=4096"

defaults:
    run:
        shell: bash

jobs:
    bump_version:
        runs-on: ubuntu-latest
        steps:
            - name: Print contexts
              uses: prosopo/captcha/.github/actions/print_contexts@main
              with:
                INPUTS_CONTEXT: ${{ toJson(inputs) }}
                NEEDS_CONTEXT: ${{ toJson(needs) }}
                VARS_CONTEXT: ${{ toJson(vars) }}
                SECRETS_CONTEXT: ${{ toJson(secrets) }}
                
            - uses: actions/checkout@v4
              with:
                  submodules: "recursive"
                  fetch-depth: 0  # Fetch all history for all branches

            - uses: actions/setup-node@v4
              with:
                  node-version-file: 'package.json'
            - run: npm i -g "npm@$(jq -r .engines.npm < package.json)"

            - name: Restore npm cache
              uses: prosopo/captcha/.github/actions/restore_npm_cache@gha

            - name: Bump version
              run: |
                set -euo pipefail # stop on errors, print commands, fail on pipe fails

                # set the author in git
                git config user.name "prosoponator[bot]"
                git config user.email "dev@prosopo.io"

                # check the source branch (e.g. staging) is up-to-date with the dest branch (e.g. main)
                if [ "$(git rev-list --count origin/${{ github.event.inputs.src }}..origin/${{ github.event.inputs.dest }})" -ne 0 ]; then
                    echo "Source branch ${{ github.event.inputs.src }} is not up-to-date with destination branch ${{ github.event.inputs.dest }}. PR destination branch into the source branch and try again."
                    exit 1
                else
                    echo "Source branch ${{ github.event.inputs.src }} is up-to-date with destination branch ${{ github.event.inputs.dest }}"
                fi

                # checkout the src branch
                git checkout ${{ github.event.inputs.src }}

                INTERIM="${{ github.event.inputs.interim}}"
                # set the interim branch name to release/<version_number> if not provided
                INTERIM="${INTERIM:-release/${{ github.event.inputs.version }}}"

                # make a new branch for the version changes
                git switch -c $INTERIM

                pkgJsons=$(find "${{ github.workspace }}" -type f -name "package.json" -not -path "**/node_modules/**" -not -path "**/.next/**" | xargs -I "{}"  echo {} | sed s/\"//g)
                echo $pkgJsons
                # get the package "name" out of each pkgJson
                pkgNames=$(xargs -I % sh -c "jq -r '.name' %" <<< "$pkgJsons")
                echo $pkgNames
                while IFS= read -r pkgJson; do
                    echo "Bumping version in $pkgJson"
                    # for each package in the workspace, set the version number
                    cat $pkgJson | jq ".version = \"${{ github.event.inputs.version }}\"" > tmp
                    mv tmp $pkgJson
                    while IFS= read -r pkgName; do
                        # for each package in the workspace, check whether it is in the dependencies of the current package
                        # if so, bump the version number in the dependencies
                        cat $pkgJson | jq "if .dependencies[\"$pkgName\"] then .dependencies[\"$pkgName\"] = \"${{ github.event.inputs.version }}\" else . end" > tmp
                        mv tmp $pkgJson
                        cat $pkgJson | jq "if .devDependencies[\"$pkgName\"] then .devDependencies[\"$pkgName\"] = \"${{ github.event.inputs.version }}\" else . end" > tmp
                        mv tmp $pkgJson 
                    done <<< "$pkgNames"
                done <<< "$pkgJsons"

                # need to bump the PROSOPO_PACKAGE_VERSION variable in env files
                envFiles=$(find . -iregex ".*\/\.?env\.\w+" -not -iname "*\.js" -not -iname "*\.ts" -not -path "./node_modules/**")
                echo "Bumping version in env files: $envFiles"
                for envFile in $envFiles; do
                    sed -i "s/PROSOPO_PACKAGE_VERSION=.*/PROSOPO_PACKAGE_VERSION=${{ github.event.inputs.version }}/g" $envFile
                done

                # the json may be poorly formatted now, so we need to fix it
                npm i
                npm run -w @prosopo/scripts build
                npm run -w @prosopo/lint build
                npm run lint-fix

                # commit the version changes
                git add .
                git commit -m "Bump version to ${{ github.event.inputs.version }}"

                # push version changes
                git push --set-upstream origin $INTERIM
                
                # fetch the dest branch
                git fetch origin ${{ github.event.inputs.dest }}

                # create a PR for the release
                gh pr create --base ${{ github.event.inputs.dest }} --title "Release ${{ github.event.inputs.version }}" --fill

