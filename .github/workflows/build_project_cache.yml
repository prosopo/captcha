name: build_project_cache

# on push to main, or manually triggered
# we do this because any branch can use caches built on main, whereas caches built on other branches are only available to that branch and its children
on:
    push:
        branches:
            - 'main'
    workflow_dispatch:

env:
    CARGO_TERM_COLOR: always
    GH_TOKEN: ${{ github.token }}

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3

            - run: mkdir -p protocol/cargo-cache
            - run: mkdir -p protocol/target
            - run: mkdir -p node_modules
            - run: mkdir -p .cache/Cypress

            - name: Restore cache
              uses: actions/cache/restore@v3
              with:
                  path: |
                      protocol/cargo-cache
                      protocol/target
                      node_modules
                      .cache/Cypress
                  # note that restoring a cache in github is a pain. The trailing '-' matches any string after the '-', therefore 'abc-' would match a cache named 'abc-1234' or 'abc-5678', etc.
                  # the problem is 'abc-' will not match a cache named 'abc'! So if you're using wildcard cache name selectors like this, you need a field that changes as the suffix to become the wildcard
                  # here we're setting the key to an unused cache key so it falls back to the wildcard selector in `restore-keys`
                  key: some-unused-cache-key
                  restore-keys: |
                      project-cache-${{ runner.os }}-${{ runner.arch }}-

            - name: ls
              run: |
                  set -x
                  ls -la
                  ls -la protocol/cargo-cache
                  ls -la protocol/target/* || true
                  ls -la node_modules

            - run: npm install

            - name: Build contracts
              run: |
                  cd protocol/dev
                  npm run cli -- build --docker

            # install cypress so we don't have to do that every time
            - run: npx cypress install

            - name: ls
              run: |
                  set -x
                  ls -la
                  ls -la protocol/cargo-cache
                  ls -la protocol/target/* || true
                  ls -la node_modules

            # remove all but the latest cache (this ensures there's at least one cache available for the next run, just in case this takes place while we're clearing up caches)
            # this means there will be the previous cache (the latest) and the current cache (the one we're building now) after this workflow finishes
            # github actions will prefer the latest cache, so the one output from this workflow will take precedence in future jobs
            - name: Cleanup caches
              if: always()
              run: |
                  set +e; gh extension install actions/gh-actions-cache; set -e
                  REPO=${{ github.repository }}
                  echo "Fetching list of cache key"
                  cacheKeys=$(gh actions-cache list --sort created-at --order desc --limit 100 -R $REPO --key project-cache-${{ runner.os }}-${{ runner.arch }}- | cut -f 1 | tail -n +3)
                  echo caches to be removed:
                  echo ${cacheKeys}
                  set +e
                  for cacheKey in $cacheKeys
                  do
                      gh actions-cache delete $cacheKey -R $REPO --confirm
                  done

            - name: Save cache
              uses: actions/cache/save@v3
              if: always()
              with:
                  path: |
                      protocol/cargo-cache
                      protocol/target
                      node_modules
                      .cache/Cypress
                  key: project-cache-${{ runner.os }}-${{ runner.arch }}-${{ github.run_id }}-${{ github.run_attempt }}
