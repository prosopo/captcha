name: tmp

on:
    pull_request:
        branches:
            - 'develop'
            - 'main'
        paths:
            - 'protocol/**'
            - '.github/workflows/**'

env:
    CARGO_TERM_COLOR: always
    GH_TOKEN: ${{ github.token }}

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            # Checkout the repo
            - uses: actions/checkout@v3

            # Restore the cargo build from cache, if available
            - name: Restore cached cargo build
              uses: actions/cache/restore@v3
              id: cache-restore
              with:
                  path: |
                      image-cache
                      cargo-cache
                      protocol/target
                      node_modules
                  # the cached build is based on the OS, architecture, a tag and the hash of the config files for this build, i.e. the Cargo configuration. The cargo configs may differ across workflows, so the files have to be the same to reuse the cached build image across workflows
                  # restore from a cache matching the key, e.g. "Linux-X64-cargo-env-abcdef123"
                  # "abcdef123" could be anything, it is a random string to differentiate cache usages
                  # e.g. "Linux-X64-cargo-a1" may be from 1/1/23, whereas "Linux-X64-cargo-b2" may be from 2/1/23.
                  # github will match the most recent cache ("b2") when searching for caches and finding multiple matches
                  # the "-" on the end of the key acts like "-*" where the "*" can be any number of characters, including none
                  key: protocol-${{ runner.os }}-${{ runner.arch }}-${{ github.run_id }}-${{ github.run_attempt }}
                  restore-keys: |
                      protocol-${{ runner.os }}-${{ runner.arch }}-


            # print cache state before build, etc
            - name: ls
              run: |
                  set -x
                  ls -la
                  ls -la cargo-cache
                  ls -la protocol/target/ink
                  ls -la image-cache

            
            - name: Cleanup cargo build caches
              run: |
                  set +e; gh extension install actions/gh-actions-cache; set -e
                  REPO=${{ github.repository }}
                  echo $REPO
                  echo "Fetching list of cache key"
                  # remove all except the most recent cached build
                  # we leave the latest cached build to be used by other workflows which may be running in parallel (i.e. there is always at least one cached build at any given time)
                  gh actions-cache list --sort created-at --order desc --limit 100 -R $REPO --key protocol-${{ runner.os }}-${{ runner.arch }}-