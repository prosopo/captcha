name: image_provider

on:
    pull_request:
        branches: [main]
        paths:
            - 'docker/**'
            - 'dev/**'
            - 'packages/**'
            - 'contracts/**'
            - '.github/workflows/provider_image.yml'

concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: true

env:
    CARGO_TERM_COLOR: always
    GH_TOKEN: ${{ github.token }}

jobs:
    check:
        runs-on: ubuntu-latest
        steps:
            # Checkout the repo
            - uses: actions/checkout@v3
            - uses: actions/setup-node@v3
              with:
                  node-version: 16
            - name: Install npm
              run: npm i -g npm@$(cat package.json | jq -r .engines.npm)

            - run: mkdir -p protocol/cargo-cache
            - run: mkdir -p protocol/target
            - run: mkdir -p node_modules
            - run: mkdir -p ~/.cache/Cypress

            - name: Restore cache
              uses: actions/cache/restore@v3
              with:
                  path: |
                      protocol/cargo-cache
                      protocol/target
                      node_modules
                      ~/.cache/Cypress
                  # note that restoring a cache in github is a pain. The trailing '-' matches any string after the '-', therefore 'abc-' would match a cache named 'abc-1234' or 'abc-5678', etc.
                  # the problem is 'abc-' will not match a cache named 'abc'! So if you're using wildcard cache name selectors like this, you need a field that changes as the suffix to become the wildcard
                  # here we're setting the key to an unused cache key so it falls back to the wildcard selector in `restore-keys`
                  key: some-unused-cache-key
                  restore-keys: |
                      project-cache-${{ runner.os }}-${{ runner.arch }}-

            - run: npm install

            # build the packages
            - name: Build packages
              run: |
                  cd dev/scripts
                  npm run build

            # build the cli production bundle
            - name: Build cli production bundle
              run: |
                  cp ./dev/scripts/env.rococo ./packages/cli/.env.production
                  NODE_ENV=production npm run -w @prosopo/cli build:prod

            # create the provider image
            - name: Build provider image
              run: |
                  docker build -f ./docker/images/provider.dockerfile . -t prosopo/provider:dev
