name: Provider Docker Image

on:
  push:
    branches:
      - 'main'
    paths:
      - 'packages/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'packages/**'
      - '.github/workflows/image_provider.yml'

env:
  CARGO_TERM_COLOR: always
  GH_TOKEN: ${{ github.token }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repo
      - name: Clone captcha
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          repository: prosopo/captcha
          path: captcha
          submodules: recursive

      # Get the provider image version from the root package.json and the latest package version from npm
      - name: Get provider image version
        run: |
          cd captcha
          echo "PROVIDER_IMAGE_VERSION=$(cat package.json | jq -r '.version')" >> $GITHUB_ENV
          echo "LATEST_PROVIDER_VERSION=$(npm view @prosopo/provider version)" >> $GITHUB_ENV

      # Check if the provider image version is greater than the latest version on the npm package @prosopo/provider
      # For example, if the provider image version is 0.1.7 and the latest npm version is 0.1.6, then the provider image
      # version is greater. If the provider image version is 0.1.6 and the latest npm version is 0.1.6, then the provider
      # image version is not greater, and the workflow will not continue unless the provider image version is updated in
      # the root package.json. Technically, this check doesn't cover the case where the provider image version is lower
      # than the latest npm version, but that should never happen.
      - name: Check provider image version
        id: check_provider_image_version
        run: |
          echo "PROVIDER_IMAGE_VERSION=${{ env.PROVIDER_IMAGE_VERSION }}"
          echo "LATEST_PROVIDER_VERSION=${{ env.LATEST_PROVIDER_VERSION }}"
          if [ "${{ env.PROVIDER_IMAGE_VERSION }}" == "${{ env.LATEST_PROVIDER_VERSION }}" ]; then
              echo "Provider image version is not greater than the latest npm version. Please update the provider image version in the root package.json"
              exit 1
          fi

      # npm install
      - name: Npm install
        run: |
          cd captcha
          npm install

      # build the packages
      - name: Build packages
        run: |
          cd captcha/dev
          npm run build
      

      # build the cli production bundle
      - name: Build cli production bundle
        run: |
          cd captcha
          cp ./dev/env.rococo ./packages/cli/.env.rococo
          NODE_ENV=rococo npm run -w @prosopo/cli build:webpack:prod

      # create the provider image
      - name: Build provider image
        run: |
          echo "Building Image Version ${{ env.PROVIDER_IMAGE_VERSION }}"
          cd captcha
          docker build -f ./docker/images/provider.dockerfile . -t prosopo/provider:${{ env.PROVIDER_IMAGE_VERSION }}

      # Push the provider image to docker hub, if the push target is `main`
      - name: Push provider image to docker hub
        run: |
          if [ "${{ github.ref }}" != "refs/heads/main" ]; then exit 0; fi
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push prosopo/provider:${{ env.PROVIDER_IMAGE_VERSION }}

      # Create the new procaptcha JS bundle if the push target is `main` and push the image to docker hub
      - name: Create new procaptcha JS bundle
        run: |
          if [ "${{ github.ref }}" != "refs/heads/main" ]; then exit 0; fi
          cd captcha
          cp ./dev/env.rococo ./packages/cli/.env.rococo
          NODE_ENV=rococo npm run -w @prosopo/procaptcha-bundle build:webpack:prod
          docker build -f ./docker/images/js.server.dockerfile .
          docker push prosopo/js_server:latest
          docker tag prosopo/js_server:latest prosopo/js_server:${{ env.PROVIDER_IMAGE_VERSION }}
          docker push prosopo/js_server:${{ env.PROVIDER_IMAGE_VERSION }}

          
