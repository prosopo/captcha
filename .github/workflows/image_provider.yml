name: image_provider

on:
    push:
        branches:
            - 'main'
        paths:
            - 'dev/**'
            - 'packages/**'
    pull_request:
        branches: [main]
        paths:
            - 'dev/**'
            - 'packages/**'
            - '.github/workflows/image_provider.yml'
    workflow_dispatch:

env:
    CARGO_TERM_COLOR: always
    GH_TOKEN: ${{ github.token }}

jobs:
    check:
        runs-on: ubuntu-latest
        steps:
            # Checkout the repo
            - uses: actions/checkout@v3

            # Get the provider image version from the root package.json and the latest package version from npm
            - name: Get provider image version
              run: |
                  echo "PROVIDER_IMAGE_VERSION=$(cat package.json | jq -r '.version')" >> $GITHUB_ENV
                  echo "LATEST_PROVIDER_VERSION=$(npm view @prosopo/provider version)" >> $GITHUB_ENV

            - run: mkdir -p protocol/cargo-cache
            - run: mkdir -p protocol/target
            - run: mkdir -p node_modules
            - run: mkdir -p .cache/Cypress

            - name: Restore cache
              uses: actions/cache/restore@v3
              with:
                  path: |
                      protocol/cargo-cache
                      protocol/target
                      node_modules
                      .cache/Cypress
                  # note that restoring a cache in github is a pain. The trailing '-' matches any string after the '-', therefore 'abc-' would match a cache named 'abc-1234' or 'abc-5678', etc.
                  # the problem is 'abc-' will not match a cache named 'abc'! So if you're using wildcard cache name selectors like this, you need a field that changes as the suffix to become the wildcard
                  # here we're setting the key to an unused cache key so it falls back to the wildcard selector in `restore-keys`
                  key: some-unused-cache-key
                  restore-keys: |
                      project-cache-${{ runner.os }}-${{ runner.arch }}-

            # Check if the provider image version is not less than the latest version on the npm package @prosopo/provider
            # For example, if the provider image version is 0.1.7 and the latest npm version is 0.1.7, then the provider image
            # version is equal. If the provider image version is 0.1.6 and the latest npm version is 0.1.7, then the provider
            # image version is not less, and the workflow will not continue unless the provider image version is updated in
            # the root package.json
            - name: Check provider image version
              id: check_provider_image_version
              run: |
                  echo "PROVIDER_IMAGE_VERSION=${{ env.PROVIDER_IMAGE_VERSION }}"
                  echo "LATEST_PROVIDER_VERSION=${{ env.LATEST_PROVIDER_VERSION }}"

                  # Condition 1: If version is equal to the npm version, exit successfully
                  if [[ "${{ env.PROVIDER_IMAGE_VERSION }}" == "${{ env.LATEST_PROVIDER_VERSION }}" ]]; then
                      echo "Current npm version detected, exiting successfully"
                      exit 0
                  fi

                  # Condition 2: If version is less than the npm version, exit with error
                  if [[ $(echo -e "${{ env.PROVIDER_IMAGE_VERSION }}\n${{ env.LATEST_PROVIDER_VERSION }}" | sort -V | head -n 1) == "${{ env.PROVIDER_IMAGE_VERSION }}" ]]; then
                      echo "Provider image version is less than the latest npm version. Please update the provider image version in the root package.json"
                      exit 1
                  fi

            - run: npm install

            # build the packages
            - name: Build packages
              run: |
                  cd dev/scripts
                  npm run build

            # build the cli production bundle
            - name: Build cli production bundle
              run: |
                  cp ./dev/scripts/env.rococo ./packages/cli/.env.production
                  NODE_ENV=production npm run -w @prosopo/cli build:prod

            # create the provider image
            - name: Build provider image
              run: |
                  echo "Building Image Version ${{ env.PROVIDER_IMAGE_VERSION }}"
                  docker build -f ./docker/images/provider.dockerfile . -t prosopo/provider:${{ env.PROVIDER_IMAGE_VERSION }}

            # Push the provider image to docker hub, if the push target is `main`
            - name: Push provider image to docker hub
              run: |
                  if [ "${{ github.ref }}" != "refs/heads/main" ]; then exit 0; fi
                  docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
                  docker push prosopo/provider:${{ env.PROVIDER_IMAGE_VERSION }}

            # Create the new procaptcha JS bundle if the push target is `main` and push the image to docker hub
            - name: Create new procaptcha JS bundle
              run: |
                  if [ "${{ github.ref }}" != "refs/heads/main" ]; then exit 0; fi
                  cp ./dev/scripts/env.rococo ./packages/cli/.env.production
                  NODE_ENV=production npm run -w @prosopo/procaptcha-bundle build:prod
                  docker build -f ./docker/images/js.server.dockerfile . -t prosopo/js_server:latest
                  docker push prosopo/js_server:latest
                  docker tag prosopo/js_server:latest prosopo/js_server:${{ env.PROVIDER_IMAGE_VERSION }}
                  docker push prosopo/js_server:${{ env.PROVIDER_IMAGE_VERSION }}
