name: publish_release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.2.3)'
        required: true
        type: string

defaults:
  run:
    shell: bash

env:
  NODE_ENV: "production"

jobs:
  publish:
    name: Publish Release
    runs-on: ubuntu-latest
    steps:
      - name: Get token for gh app
        id: app_token
        uses: peter-murray/workflow-application-token-action@v3
        with:
          application_id: ${{ vars.PROSOPONATOR_APP_ID }}
          application_private_key: ${{ secrets.PROSOPONATOR_APP_PRIVATE_KEY }}

      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          token: ${{ steps.app_token.outputs.token }}
          fetch-depth: 0
          ref: ${{ github.event_name == 'workflow_dispatch' && format('refs/tags/v{0}', inputs.version) || github.ref }}

      - name: Setup npm registry
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get version from tag or input
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            version="${{ inputs.version }}"
          else
            version=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Version: $version"

      - run: npm ci --ignore-scripts --include=dev

      - name: Build packages
        run: |
          echo "Building all packages"
          npm run build:all
          npm run build:all:cjs

      - name: Bundle staging procaptcha-bundle
        run: |
          echo "Bundling procaptcha-bundle"
          NODE_ENV="staging" npx nx run @prosopo/procaptcha-bundle:bundle --nxBail

      - name: Create staging procaptcha-bundle zip
        run: |
          cd packages/procaptcha-bundle/dist/bundle
          bundle_name="procaptcha.bundle.${{ steps.version.outputs.version }}-staging.zip"
          zip -r ../../../../${bundle_name} .
          cd -
          ls -lh ${bundle_name}

      - name: Bundle production procaptcha-bundle
        run: |
          echo "Bundling procaptcha-bundle"
          NODE_ENV="production" npx nx run @prosopo/procaptcha-bundle:bundle --nxBail

      - name: Create production procaptcha-bundle zip
        run: |
          cd packages/procaptcha-bundle/dist/bundle
          bundle_name="procaptcha.bundle.${{ steps.version.outputs.version }}.zip"
          zip -r ../../../../${bundle_name} .
          cd -
          ls -lh ${bundle_name}
          
      - name: Bundle the production provider CLI
        run: |
          echo "Bundling provider CLI"
          NODE_ENV="production" npm run -w @prosopo/cli bundle

      - name: Publish to npm
        run: |
          echo "Publishing all packages to npm"
          npm --workspaces publish --access=public || true

      - name: Publish production image to Docker Hub
        run: |
          echo "Publishing production provider image to Docker Hub"
          cd docker/images/provider
          NODE_ENV="production" npm run build
          NODE_ENV="production" npm run publish:docker
          cd -

      - name: Bundle the staging provider CLI
        run: |
          echo "Bundling provider CLI"
          NODE_ENV="staging" npm run -w @prosopo/cli bundle

      - name: Publish production image to Docker Hub
        run: |
          echo "Publishing staging provider image to Docker Hub"
          cd docker/images/provider
          NODE_ENV="staging" npm run build
          NODE_ENV="staging" npm run publish:docker
          cd -

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ steps.app_token.outputs.token }}
        run: |
          gh release create "v${{ steps.version.outputs.version }}" \
            --title "Release v${{ steps.version.outputs.version }}" \
            --generate-notes \
            procaptcha.bundle.${{ steps.version.outputs.version }}.zip \
            procaptcha.bundle.${{ steps.version.outputs.version }}-staging.zip

      - name: Send success notification
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\": \"✅ Release v${{ steps.version.outputs.version }} published successfully\"}" \
            "${{ secrets.SLACKBOT_DEVOPS }}"

      - name: Send failure notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\": \"❌ Release v${{ steps.version.outputs.version }} failed to publish\"}" \
            "${{ secrets.SLACKBOT_DEVOPS }}"
