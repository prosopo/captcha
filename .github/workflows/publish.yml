name: publish

on:
    push:
        # only on the main branch
        branches:
            - main
        paths:
            # only when the package.json file changes
            - 'package.json'
    # or run manually
    workflow_dispatch:

jobs:
    publish:
        runs-on: ubuntu-latest
        steps:
            - name: Print contexts
              env:
                  GITHUB_CONTEXT: ${{ toJson(github) }}
                  ENV_CONTEXT: ${{ toJson(env) }}
                  VARS_CONTEXT: ${{ toJson(vars) }}
                  JOB_CONTEXT: ${{ toJson(job) }}
                  STEPS_CONTEXT: ${{ toJson(steps) }}
                  RUNNER_CONTEXT: ${{ toJson(runner) }}
                  SECRETS_CONTEXT: ${{ toJson(secrets) }}
                  STRATEGY_CONTEXT: ${{ toJson(strategy) }}
                  MATRIX_CONTEXT: ${{ toJson(matrix) }}
                  NEEDS_CONTEXT: ${{ toJson(needs) }}
                  INPUTS_CONTEXT: ${{ toJson(inputs) }}
              run: |
                  echo "******************************"
                  echo "github:" "$GITHUB_CONTEXT"
                  echo "******************************"
                  echo "env:" "$ENV_CONTEXT"
                  echo "******************************"
                  echo "vars:" "$VARS_CONTEXT"
                  echo "******************************"
                  echo "job:" "$JOB_CONTEXT"
                  echo "******************************"
                  echo "steps:" "$STEPS_CONTEXT"
                  echo "******************************"
                  echo "runner:" "$RUNNER_CONTEXT"
                  echo "******************************"
                  echo "secrets:" "$SECRETS_CONTEXT"
                  echo "******************************"
                  echo "strategy:" "$STRATEGY_CONTEXT"
                  echo "******************************"
                  echo "matrix:" "$MATRIX_CONTEXT"
                  echo "******************************"
                  echo "needs:" "$NEEDS_CONTEXT"
                  echo "******************************"
                  echo "inputs:" "$INPUTS_CONTEXT"
                  echo "******************************"
            # checkout the repo
            - uses: actions/checkout@v3

            - name: Dockerhub login
              run: |
                  echo "Logging into Docker Hub."
                  echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin 2> /dev/null

            # fail-fast step to check if the version has been bumped
            # when running manually, there won't be a version line change, so we need to skip this step in that case
            - name: Detect version bump
              id: next_version
              run: |
                  PR_HEAD=$(git rev-parse HEAD)
                  # checkout the default branch
                  git fetch
                  git checkout ${{ github.base_ref }}

                  # get the version number currently on default branch
                  MAIN_VERSION=$(cat package.json | jq -r '.version' || echo "0.0.0")
                  echo "main version: $MAIN_VERSION"

                  # checkout the PR branch
                  git checkout $PR_HEAD

                  # get the version number on the PR branch
                  PR_VERSION=$(cat package.json | jq -r '.version' || echo "0.0.0")
                  echo "pr version: $PR_VERSION"

                  # split into major, minor, patch
                  MAIN_MAJOR=$(echo $MAIN_VERSION | cut -d. -f1)
                  MAIN_MINOR=$(echo $MAIN_VERSION | cut -d. -f2)
                  MAIN_PATCH=$(echo $MAIN_VERSION | cut -d. -f3)
                  PR_MAJOR=$(echo $PR_VERSION | cut -d. -f1)
                  PR_MINOR=$(echo $PR_VERSION | cut -d. -f2)
                  PR_PATCH=$(echo $PR_VERSION | cut -d. -f3)
                  echo "main major: $MAIN_MAJOR"
                  echo "main minor: $MAIN_MINOR"
                  echo "main patch: $MAIN_PATCH"
                  echo "pr major: $PR_MAJOR"
                  echo "pr minor: $PR_MINOR"
                  echo "pr patch: $PR_PATCH"

                  # export the next version numbers
                  echo "major=$PR_MAJOR" >> $GITHUB_OUTPUT
                  echo "minor=$PR_MINOR" >> $GITHUB_OUTPUT
                  echo "patch=$PR_PATCH" >> $GITHUB_OUTPUT

                  # compare the major, minor, patch versions
                  if [[ "$MAIN_MAJOR" -lt "$PR_MAJOR" ]]; then
                    echo "bump=true" >> $GITHUB_OUTPUT
                    echo "major version bump detected"
                  elif [[ "$MAIN_MINOR" -lt "$PR_MINOR" ]]; then
                    echo "bump=true" >> $GITHUB_OUTPUT
                    echo "minor version bump detected"
                  elif [[ "$MAIN_PATCH" -lt "$PR_PATCH" ]]; then
                    echo "bump=true" >> $GITHUB_OUTPUT
                    echo "patch version bump detected"
                  elif [[ "${{ github.event_name }}" == 'workflow_dispatch' ]]; then
                    # if run from workflow_dispatch, then skip this step
                    echo "Skipping version bump detection as this is a manual run."
                    # assume there has been a version bump, as this is a manual run
                    echo "bump=true" >> $GITHUB_OUTPUT
                  else
                    echo "bump=false" >> $GITHUB_OUTPUT
                    echo "no version bump detected"
                    # quit, as there is no version bump
                    exit 1
                  fi

            # check for version bump against github release
            - name: Check version github
              id: check_version_github

              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  # get the current version number from latest release on gh
                  VERSION=$(gh release list --limit 1 | awk '{print $1}' | tr -d v)

                  if [[ -z "$VERSION" ]]; then
                    echo "Failed to get current version"
                    exit 1
                  fi

                  MAJOR=$(echo $VERSION | cut -d. -f1)
                  MINOR=$(echo $VERSION | cut -d. -f2)
                  PATCH=$(echo $VERSION | cut -d. -f3)
                  echo "version=$VERSION" >> $GITHUB_OUTPUT
                  echo "major=$MAJOR" >> $GITHUB_OUTPUT
                  echo "minor=$MINOR" >> $GITHUB_OUTPUT
                  echo "patch=$PATCH" >> $GITHUB_OUTPUT
                  echo "version: $VERSION"

                  if [[ "${{ steps.next_version.outputs.major }}" -gt "$MAJOR" ]]; then
                    echo "major version bump detected"
                    echo "bump=true" >> $GITHUB_OUTPUT
                  elif [[ "${{ steps.next_version.outputs.minor }}" -gt "$MINOR" ]]; then
                    echo "minor version bump detected"
                    echo "bump=true" >> $GITHUB_OUTPUT
                  elif [[ "${{ steps.next_version.outputs.patch }}" -gt "$PATCH" ]]; then
                    echo "patch version bump detected"
                    echo "bump=true" >> $GITHUB_OUTPUT
                  else
                    echo "no version bump detected"
                    echo "bump=false" >> $GITHUB_OUTPUT
                  fi

            - name: Check version npm
              id: check_version_npm
              run: |
                  # get the current version number from latest release on npm (use procaptcha as the baseline, as workspace package is not published)
                  VERSION=$(npm view @prosopo/procaptcha version)

                  if [[ -z "$VERSION" ]]; then
                    echo "Failed to get current version"
                    exit 1
                  fi

                  MAJOR=$(echo $VERSION | cut -d. -f1)
                  MINOR=$(echo $VERSION | cut -d. -f2)
                  PATCH=$(echo $VERSION | cut -d. -f3)
                  echo "version=$VERSION" >> $GITHUB_OUTPUT
                  echo "major=$MAJOR" >> $GITHUB_OUTPUT
                  echo "minor=$MINOR" >> $GITHUB_OUTPUT
                  echo "patch=$PATCH" >> $GITHUB_OUTPUT
                  echo "version: $VERSION"

                  if [[ "${{ steps.next_version.outputs.major }}" -gt "$MAJOR" ]]; then
                    echo "major version bump detected"
                    echo "bump=true" >> $GITHUB_OUTPUT
                  elif [[ "${{ steps.next_version.outputs.minor }}" -gt "$MINOR" ]]; then
                    echo "minor version bump detected"
                    echo "bump=true" >> $GITHUB_OUTPUT
                  elif [[ "${{ steps.next_version.outputs.patch }}" -gt "$PATCH" ]]; then
                    echo "patch version bump detected"
                    echo "bump=true" >> $GITHUB_OUTPUT
                  else
                    echo "no version bump detected"
                    echo "bump=false" >> $GITHUB_OUTPUT
                  fi

            - name: Check version docker js_server
              id: check_version_docker_js_server
              run: |
                  # get the current version number from latest release on docker
                  VERSION=$(curl -L -s 'https://registry.hub.docker.com/v2/repositories/prosopo/js_server/tags/' | jq ".results[].name" | grep -E -o "[0-9]+\.[0-9]+\.[0-9]+" | head -n 1)

                  if [[ -z "$VERSION" ]]; then
                    echo "Failed to get current version"
                    exit 1
                  fi

                  MAJOR=$(echo $VERSION | cut -d. -f1)
                  MINOR=$(echo $VERSION | cut -d. -f2)
                  PATCH=$(echo $VERSION | cut -d. -f3)
                  echo "version=$VERSION" >> $GITHUB_OUTPUT
                  echo "major=$MAJOR" >> $GITHUB_OUTPUT
                  echo "minor=$MINOR" >> $GITHUB_OUTPUT
                  echo "patch=$PATCH" >> $GITHUB_OUTPUT
                  echo "version: $VERSION"

                  if [[ "${{ steps.next_version.outputs.major }}" -gt "$MAJOR" ]]; then
                    echo "major version bump detected"
                    echo "bump=true" >> $GITHUB_OUTPUT
                  elif [[ "${{ steps.next_version.outputs.minor }}" -gt "$MINOR" ]]; then
                    echo "minor version bump detected"
                    echo "bump=true" >> $GITHUB_OUTPUT
                  elif [[ "${{ steps.next_version.outputs.patch }}" -gt "$PATCH" ]]; then
                    echo "patch version bump detected"
                    echo "bump=true" >> $GITHUB_OUTPUT
                  else
                    echo "no version bump detected"
                    echo "bump=false" >> $GITHUB_OUTPUT
                  fi

            - name: Check version docker provider
              id: check_version_docker_provider
              run: |
                  # get the current version number from latest release on docker
                  VERSION=$(curl -L -s 'https://registry.hub.docker.com/v2/repositories/prosopo/provider/tags/' | jq ".results[].name" | grep -E -o "[0-9]+\.[0-9]+\.[0-9]+" | head -n 1)

                  if [[ -z "$VERSION" ]]; then
                    echo "Failed to get current version"
                    exit 1
                  fi

                  MAJOR=$(echo $VERSION | cut -d. -f1)
                  MINOR=$(echo $VERSION | cut -d. -f2)
                  PATCH=$(echo $VERSION | cut -d. -f3)
                  echo "version=$VERSION" >> $GITHUB_OUTPUT
                  echo "major=$MAJOR" >> $GITHUB_OUTPUT
                  echo "minor=$MINOR" >> $GITHUB_OUTPUT
                  echo "patch=$PATCH" >> $GITHUB_OUTPUT
                  echo "version: $VERSION"

                  if [[ "${{ steps.next_version.outputs.major }}" -gt "$MAJOR" ]]; then
                    echo "major version bump detected"
                    echo "bump=true" >> $GITHUB_OUTPUT
                  elif [[ "${{ steps.next_version.outputs.minor }}" -gt "$MINOR" ]]; then
                    echo "minor version bump detected"
                    echo "bump=true" >> $GITHUB_OUTPUT
                  elif [[ "${{ steps.next_version.outputs.patch }}" -gt "$PATCH" ]]; then
                    echo "patch version bump detected"
                    echo "bump=true" >> $GITHUB_OUTPUT
                  else
                    echo "no version bump detected"
                    echo "bump=false" >> $GITHUB_OUTPUT
                  fi

            - name: Should bump?
              id: check_version_any
              run: |
                  # only bump if any of the version checks have detected a bump
                  if [[ "${{ steps.check_version_github.outputs.bump }}" == 'true' ]]; then
                    echo "bump=true" >> $GITHUB_OUTPUT
                    echo "github bump required"
                  elif [[ "${{ steps.check_version_npm.outputs.bump }}" == 'true' ]]; then
                    echo "bump=true" >> $GITHUB_OUTPUT
                    echo "npm bump required"
                  elif [[ "${{ steps.check_version_docker_js_server.outputs.bump }}" == 'true' ]]; then
                    echo "bump=true" >> $GITHUB_OUTPUT
                    echo "docker js_server bump required"
                  elif [[ "${{ steps.check_version_docker_provider.outputs.bump }}" == 'true' ]]; then
                    echo "bump=true" >> $GITHUB_OUTPUT
                    echo "docker provider bump required"
                  else
                    echo "bump=false" >> $GITHUB_OUTPUT
                    echo "no bump required"
                  fi

            # setup node
            - uses: actions/setup-node@v3
              if: steps.check_version_any.outputs.bump == 'true'
              with:
                  node-version-file: '.nvmrc'
            - name: Install npm
              if: steps.check_version_any.outputs.bump == 'true'
              run: npm i -g npm@$(cat package.json | jq -r .engines.npm)

            # get the latest build from the cache produced in the post_pr workflow

            - run: mkdir -p protocol/cargo-cache
              if: steps.check_version_any.outputs.bump == 'true'
            - run: mkdir -p protocol/target
              if: steps.check_version_any.outputs.bump == 'true'
            - run: mkdir -p node_modules
              if: steps.check_version_any.outputs.bump == 'true'
            - run: mkdir -p ~/.cache/Cypress
              if: steps.check_version_any.outputs.bump == 'true'

            - name: Restore cache
              if: steps.check_version_any.outputs.bump == 'true'
              uses: actions/cache/restore@v3
              with:
                  path: |
                      protocol/cargo-cache
                      protocol/target
                      node_modules
                      ~/.cache/Cypress
                  # note that restoring a cache in github is a pain. The trailing '-' matches any string after the '-', therefore 'abc-' would match a cache named 'abc-1234' or 'abc-5678', etc.
                  # the problem is 'abc-' will not match a cache named 'abc'! So if you're using wildcard cache name selectors like this, you need a field that changes as the suffix to become the wildcard
                  # here we're setting the key to an unused cache key so it falls back to the wildcard selector in `restore-keys`
                  key: some-unused-cache-key
                  restore-keys: |
                      project-cache-${{ runner.os }}-${{ runner.arch }}-

            - run: ls -la ~/.cache/Cypress || true
              if: steps.check_version_any.outputs.bump == 'true'
            - run: ls -la protocol/cargo-cache || true
              if: steps.check_version_any.outputs.bump == 'true'
            - run: ls -la protocol/target/ink || true
              if: steps.check_version_any.outputs.bump == 'true'
            - run: ls -la node_modules || true
              if: steps.check_version_any.outputs.bump == 'true'

            - name: Install
              if: steps.check_version_any.outputs.bump == 'true'
              run: |
                  npm install
                  npm run removePolkadotJSWarnings

            # at this point there should be a build in the cache, so we can begin building artifacts for the release

            - name: Install dependencies and build packages
              if: steps.check_version_any.outputs.bump == 'true'
              run: |
                  echo "Installing dependencies..."
                  npm ci
                  echo "Building packages..."
                  npm run build:all
                  npm run build:all:cjs

            - name: Build the contract sources
              if: steps.check_version_any.outputs.bump == 'true'
              run: |
                  cd protocol/dev
                  npm run build
                  npm run cli -- clean --docker
                  npm run cli -- build --docker --release

            - name: Build JS bundle
              if: steps.check_version_any.outputs.bump == 'true'
              run: |
                  # Copy the rococo env file to production env file
                  echo "Copying the rococo env to production env file in procaptcha-bundle"
                  cp ./dev/scripts/env.production ./packages/procaptcha-bundle/.env.production

                  # Navigate to the JS bundle directory and build
                  echo "Navigating to 'packages/procaptcha-bundle' and building JS bundle..."
                  cd packages/procaptcha-bundle

                  NODE_ENV=production npm run bundle:prod

            - name: Github release
              continue-on-error: true
              id: publish_github
              if: steps.check_version_github.outputs.bump == 'true'
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  # do a gh release with the contract sources + bundle
                  gh release create --generate-notes "v${{ steps.next_version.outputs.version }}" "./protocol/target/ink/captcha/captcha.contract" "./protocol/target/ink/proxy/proxy.contract" "./protocol/target/ink/common/common.contract" "./packages/procaptcha-bundle/dist/bundle/procaptcha.bundle.js"

            - name: Github release notification
              if: always()
              run: |
                  if [[ "${{ steps.publish_github.outcome }}" == 'success' ]]; then
                    echo "Github release successful."
                    curl -X POST -H 'Content-type: application/json' --data "{\"text\":\":check-passed: Github release <https://github.com/prosopo/captcha/releases/tag/v${{ steps.next_version.outputs.version }}|v${{ steps.next_version.outputs.version }}> has been published.\"}"  ${{ secrets.SLACKBOT_DEVOPS }}
                  elif [[ "${{ steps.publish_github.outcome }}" == 'failure' ]]; then
                    echo "Github release failed."
                    curl -X POST -H 'Content-type: application/json' --data "{\"text\":\":check-failed: Github release <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|v${{ steps.next_version.outputs.version }}> failed.\"}"  ${{ secrets.SLACKBOT_DEVOPS }}
                  else
                    echo "Github release skipped / cancelled."
                  fi

            - name: Npm release
              continue-on-error: true
              id: publish_release
              if: steps.check_version_npm.outputs.bump == 'true'
              run: |
                  if [[ "${{ vars.HOST_GITHUB_ACTIONS }}" == true ]]; then
                    echo "Running on GitHub Actions"
                    # Write the npm token to ~/.npmrc
                    echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
                    echo "Publishing to npm dry-run..."
                    npm run publish:dry-run
                    echo "Publishing to npm..."
                    npm run publish
                  else
                    echo "Running locally via act, skipping npm publish."
                  fi

            - name: Npm release notification
              if: always()
              run: |
                  if [[ "${{ steps.publish_release.outcome }}" == 'success' ]]; then
                    echo "Npm release successful."
                    curl -X POST -H 'Content-type: application/json' --data "{\"text\":\":check-passed: Npm release <https://www.npmjs.com/package/@prosopo/procaptcha/v/${{ steps.next_version.outputs.version }}|v${{ steps.next_version.outputs.version }}> has been published.\"}"  ${{ secrets.SLACKBOT_DEVOPS }}
                  elif [[ "${{ steps.publish_release.outcome }}" == 'failure' ]]; then
                    echo "Npm release failed."
                    curl -X POST -H 'Content-type: application/json' --data "{\"text\":\":check-failed: Npm release <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|v${{ steps.next_version.outputs.version }}> failed.\"}"  ${{ secrets.SLACKBOT_DEVOPS }}
                  else 
                    echo "Npm release skipped / cancelled."
                  fi

            - name: Docker js_server release
              continue-on-error: true
              id: publish_docker_js_server
              if: steps.check_version_docker_js_server.outputs.bump == 'true'
              run: |
                  docker pull prosopo/js_server:${{ steps.check_version_docker_js_server.outputs.version }}

                  # Create a temporary container from the latest image
                  echo "Building Docker image..."
                  CONTAINER_ID=$(docker create prosopo/js_server:${{ steps.check_version_docker_js_server.outputs.version }})

                  # Copy the bundle to the container and rename it to include the version
                  docker cp packages/procaptcha-bundle/dist/bundle/procaptcha.bundle.js $CONTAINER_ID:/usr/share/nginx/html/js/procaptcha.bundle.${{ steps.next_version.outputs.version }}.js

                  # Copy the bundle to the container as the latest version, overwriting the existing bundle if one exists
                  docker cp packages/procaptcha-bundle/dist/bundle/procaptcha.bundle.js $CONTAINER_ID:/usr/share/nginx/html/js/procaptcha.bundle.js

                  # Commit the changes to the container
                  docker commit $CONTAINER_ID prosopo/js_server:${{ steps.next_version.outputs.version }}

                  # Push the new image to Docker Hub
                  echo "Pushing Docker image..."
                  docker push prosopo/js_server:${{ steps.next_version.outputs.version }}

                  # Push latest
                  docker tag prosopo/js_server:${{ steps.next_version.outputs.version }} prosopo/js_server:latest
                  docker push prosopo/js_server:latest

            - name: Docker js_server release notification
              if: always()
              run: |
                  if [[ "${{ steps.publish_docker_js_server.outcome }}" == 'success' ]]; then
                    echo "Docker js_server release successful."
                    curl -X POST -H 'Content-type: application/json' --data "{\"text\":\":check-passed: Docker js_server release <https://hub.docker.com/r/prosopo/js_server/tags|v${{ steps.next_version.outputs.version }}> has been published.\"}"  ${{ secrets.SLACKBOT_DEVOPS }}
                  elif [[ "${{ steps.publish_docker_js_server.outcome }}" == 'failure' ]]; then
                    echo "Docker js_server release failed."
                    curl -X POST -H 'Content-type: application/json' --data "{\"text\":\":check-failed: Docker js_server release <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|v${{ steps.next_version.outputs.version }}> failed.\"}"  ${{ secrets.SLACKBOT_DEVOPS }}
                  else
                    echo "Docker js_server release skipped / cancelled."
                  fi

            - name: Redeploy flux docker js_server
              id: redeploy_flux_docker_js_server
              if: always()
              env:
                  PROSOPO_ZELCORE_PRIVATE_KEY: ${{ secrets.PROSOPO_ZELCORE_PRIVATE_KEY }}
                  PROSOPO_ZELCORE_PUBLIC_KEY: ${{ secrets.PROSOPO_ZELCORE_PUBLIC_KEY }}
              run: |
                  if [[ "${{ steps.publish_docker_js_server.outcome }}" == 'success' ]]; then
                    echo "Redeploying flux docker js_server."
                    npx tsx ./dev/scripts/dist/scripts/fluxDeploy.js ProcaptchaJavascriptServer
                  else
                    echo "Skipping flux redeploy."
                  fi

            - name:
              if: always()
              env:
                  PROSOPO_ZELCORE_PRIVATE_KEY: ${{ secrets.PROSOPO_ZELCORE_PRIVATE_KEY }}
                  PROSOPO_ZELCORE_PUBLIC_KEY: ${{ secrets.PROSOPO_ZELCORE_PUBLIC_KEY }}
              run: |
                  if [[ "${{ steps.redeploy_flux_docker_js_server.outcome }}" == 'success' ]]; then
                    echo "Redeployed flux docker js_server."
                    curl -X POST -H 'Content-type: application/json' --data "{\"text\":\":check-passed: Flux docker js_server redeploy <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|v${{ steps.next_version.outputs.version }}> has been requested.\"}"  ${{ secrets.SLACKBOT_DEVOPS }}
                  elif [[ "${{ steps.redeploy_flux_docker_js_server.outcome }}" == 'failure' ]]; then
                    echo "Redeploying flux docker js_server failed."
                    curl -X POST -H 'Content-type: application/json' --data "{\"text\":\":check-failed: Flux docker js_server redeploy <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|v${{ steps.next_version.outputs.version }}> failed.\"}"  ${{ secrets.SLACKBOT_DEVOPS }}
                  else
                    echo "Redeploying flux docker js_server skipped / cancelled."
                  fi

            - name: Build and Push the Provider Bundle
              id: publish_docker_provider
              continue-on-error: true
              if: steps.check_version_docker_provider.outputs.bump == 'true'
              run: |
                  # Copy the rococo env file to production env file
                  echo "Copying the rococo env to production env file in cli package"
                  cp ./dev/scripts/env.production ./packages/cli/.env.production

                  # Navigate to the provider CLI directory and build
                  echo "Navigating to 'packages/cli' and bundling..."
                  cd packages/cli
                  NODE_ENV=production npm run bundle:prod

                  # Navigate back to the project root
                  echo "Navigating back to project root..."
                  cd ../..

                  # Build and push the Docker image
                  echo "Building Docker image..."
                  docker build --file ./docker/images/provider.dockerfile . -t prosopo/provider:${{ steps.next_version.outputs.version }}
                  echo "Pushing Docker image..."
                  docker push prosopo/provider:${{ steps.next_version.outputs.version }}

                  # Push latest
                  docker tag prosopo/provider:${{ steps.next_version.outputs.version }} prosopo/provider:latest
                  docker push prosopo/provider:latest

            - name: Docker provider release notification
              if: always()
              run: |
                  if [[ "${{ steps.publish_docker_provider.outcome }}" == 'success' ]]; then
                    echo "Docker provider release successful."
                    curl -X POST -H 'Content-type: application/json' --data "{\"text\":\":check-passed: Docker provider release <https://hub.docker.com/r/prosopo/provider/tags|v${{ steps.next_version.outputs.version }}> has been published.\"}"  ${{ secrets.SLACKBOT_DEVOPS }}
                  elif [[ "${{ steps.publish_docker_provider.outcome }}" == 'failure' ]]; then
                    echo "Docker provider release failed."
                    curl -X POST -H 'Content-type: application/json' --data "{\"text\":\":check-failed: Docker provider release <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|v${{ steps.next_version.outputs.version }}> failed.\"}"  ${{ secrets.SLACKBOT_DEVOPS }}
                  else
                    echo "Docker provider release skipped / cancelled."
                  fi
