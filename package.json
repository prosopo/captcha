{
  "name": "@prosopo/captcha",
  "version": "2.0.3",
  "author": "Prosopo",
  "type": "module",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/prosopo/captcha.git"
  },
  "scripts": {
    "hostid": "npm run cmd -- \"dig +short %s.prosopo.io | tail -n1 | tee /dev/tty | nslookup | cut -d = -f 2 | head -n1 | cut -d ' ' -f 2 | sed 's/\\.*$//g'\"",
    "cmd:about": "perform string substitution on the command and then execute it. Make sure to use --, e.g. npm run cmd -- my args here",
    "cmd": "f() { (cmd=$1; shift; printf \"$cmd\" $@ | bash -ex) ;}; f",
    "build": "npm run cmd -- \"npm run -w @prosopo/%s build\"",
    "build:all": "npm run ws -- build",
    "build:all:cjs": "npm run ws -- --if-present build:cjs",
    "bundle:all": "npm run ws -- --if-present bundle",
    "build:bundle": "npm run -w @prosopo/procaptcha-bundle bundle",
    "clean": "npm run cmd -- \"npm run -w @prosopo/%s clean\"",
    "clean-npm:node-modules": "rimraf --glob --verbose '**/node_modules'",
    "clean-npm:package-lock": "rimraf --glob --verbose '**/package-lock.json'",
    "clean:npm": "run-p clean-npm:*",
    "clean-ts:buildinfo": "rimraf --glob --verbose '**/*.tsbuildinfo'",
    "clean-ts:dist": "rimraf --glob --verbose '**/dist'",
    "clean:ts": "run-p clean-ts:*",
    "clean:all": "npm run ws -- clean",
    "i": "npm i",
    "nuke": "run-s clean:ts clean:npm i",
    "deploy_dapp": "npm run -w @prosopo/scripts cli deploy_dapp -- --logLevel=debug --update_env",
    "version": "f() { npm run -w @prosopo/scripts cli -- version -v $@; npm i; }; f",
    "publish:dry-run": "npm --workspaces publish --dry-run",
    "publish": "npm --workspaces publish --access=public",
    "ws:ls": "npm run --workspaces env | grep npm_package_name | cut -d '=' -f 2",
    "ws:about": "run a command for each workspace member, exiting immediately if any command fails. Don't forget the `--` !",
    "ws": "f() { (set -e; npm run --silent ws:ls | while read -r line; do npm run -w $line $@; done); }; f",
    "cli": "npm -w @prosopo/cli run cli",
    "setup": "npm -w @prosopo/scripts run setup",
    "setup:all": "npm run setup",
    "start:provider": "npm -w @prosopo/cli run start",
    "start:server": "npm -w @prosopo/client-example-server run start",
    "start:demo": "npm -w @prosopo/client-example run start",
    "start:demo:pow": "npm -w @prosopo/client-pow-example run start",
    "start:demo:frictionless": "npm -w @prosopo/client-frictionless-example run start",
    "start:bundle": "npm -w @prosopo/client-bundle-example run start",
    "start:all": "npx concurrently \"npm run start:server\" \"npm run start:provider\" \"npm run start:demo\" \"npm run start:bundle\" --kill-others",
    "start:all:pow": "npx concurrently \"npm run start:server\" \"npm run start:provider\" \"npm run start:demo:pow\" \"npm run start:bundle\" --kill-others",
    "populate-data": "npm -w @prosopo/provider run populate-data",
    "test": "npm run ws -- test",
    "lint:license": "npm run -w @prosopo/scripts license",
    "lint-fix:license": "npm run -w @prosopo/scripts license:fix",
    "lint:dockerfile": "find . \\( -name 'Dockerfile' -o -name '*.dockerfile' \\) ! -path '*/node_modules/*' | xargs -P 1 --verbose -I {} bash -c 'docker run --rm -i hadolint/hadolint < {} || exit 255'",
    "lint:caddyfile": "find . -name '*.Caddyfile' | xargs -P 1 --verbose -I {} bash -c \"caddy fmt --diff {} || exit 255\"",
    "lint-fix:caddyfile": "find . -name '*.Caddyfile' | xargs -P 1 --verbose -I {} bash -c \"caddy fmt --overwrite {} || exit 255\"",
    "lint:actions": "docker run --rm -v $(pwd):/repo --workdir /repo rhysd/actionlint:latest -color",
    "lint:shell": "find . -name '*.sh' ! -path '*/node_modules/*' | xargs -P 1 --verbose -I {} bash -c \"shellcheck {} || exit 255\"",
    "lint:yaml": "yamllint .",
    "lint-py:check": "ruff check .",
    "lint-py:format": "ruff format --check --diff .",
    "lint:py": "run-s lint-py:*",
    "lint-fix-py:check": "ruff check --fix --unsafe-fixes .",
    "lint-fix-py:format": "ruff format .",
    "lint-fix:py": "run-s lint-fix-py:*",
    "lint:js": "biome check .",
    "lint-fix:js": "npm run --silent lint:js -- --fix --unsafe",
    "lint:html": "htmlhint '**/*.{html,svg}' --config htmlhint.json",
    "lint:md": "markdownlint '**/*.md' --ignore-path .gitignore",
    "lint-fix:md": "npm run --silent lint:md -- --fix",
    "lint": "run-s lint:*",
    "lint-fix": "run-s lint-fix:*",
    "docker:rust": "f() { if [ \"$CI\" = \"true\" ]; then FLAGS=''; else FLAGS='-it'; fi ; mkdir -p node_modules/cargo-cache && docker run --rm $FLAGS -u $(id -u):$(id -g) --cpu-quota=-1 -v $PWD:/src -v $PWD/node_modules/cargo-cache:/usr/local/cargo/registry prosopo/cargo-contract:4.1.1 \"export RUST_BACKTRACE=1; $@\" ;}; f",
    "lint-rs:clippy": "npm run --silent docker:rust -- 'find . -name \"Cargo.toml\" ! -path '*/node_modules/*' | xargs -P 1 --verbose -I {} bash -c \"cargo clippy --manifest-path {} -- -D warnings -A clippy::too_many_arguments || exit 255\"'",
    "lint-rs:check": "npm run --silent docker:rust -- 'find . -name \"Cargo.toml\" ! -path '*/node_modules/*' | xargs -P 1 --verbose -I {} bash -c \"cargo check --manifest-path {} || exit 255\"'",
    "lint-rs:fmt": "npm run --silent docker:rust -- 'find . -name \"Cargo.toml\" ! -path '*/node_modules/*' | xargs -P 1 --verbose -I {} bash -c \"cargo fmt --check --manifest-path {} || exit 255\"'",
    "lint:rs": "run-s lint-rs:fmt lint-rs:clippy lint-rs:check",
    "lint-fix-rs:fmt": "npm run --silent docker:rust -- 'find . -name \"Cargo.toml\" ! -path '*/node_modules/*' | xargs -P 1 --verbose -I {} bash -c \"cargo fmt  --manifest-path {} || exit 255\"'",
    "lint-fix-rs:clippy": "npm run --silent docker:rust -- 'find . -name \"Cargo.toml\" ! -path '*/node_modules/*' | xargs -P 1 --verbose -I {} bash -c \"cargo clippy --manifest-path {} --fix --allow-dirty -- -D warnings -A clippy::too_many_arguments || exit 255\"'",
    "lint-fix:rs": "run-s lint-fix-rs:fmt lint-fix-rs:clippy",
    "lint-toml:lint": "npx taplo lint",
    "lint-toml:format": "npx taplo format --check",
    "lint:toml": "run-s lint-toml:*",
    "lint-fix:toml": "npx taplo format",
    "lint-changed:js": "npm run --silent lint:js -- --changed",
    "lint-changed-fix:js": "npm run --silent lint-fix:js -- --changed",
    "removePolkadotJSWarnings": "sed -i 's/console.warn\\(.*\\);//g' ./node_modules/@polkadot/util/versionDetect.js && sed -i 's/console.warn\\(.*\\);//g' ./node_modules/@polkadot/util/cjs/versionDetect.js || true",
    "postinstall": "npm run removePolkadotJSWarnings",
    "docs": "npx typedoc --plugin typedoc-plugin-missing-exports --plugin typedoc-plugin-mdn-links --plugin typedoc-plugin-zod 2>&1 | grep -v \"Serialized project contained a reflection\" && echo 'docs.prosopo.io' >> docs/CNAME"
  },
  "private": true,
  "engines": {
    "node": ">=20",
    "npm": ">=9"
  },
  "workspaces": [
    "dev/*",
    "packages/*",
    "demos/*"
  ],
  "dependencies": {
    "@prosopo/flux": "2.0.3"
  },
  "devDependencies": {
    "@biomejs/biome": "1.8.3",
    "@polkadot/x-textdecoder": "12.6.2",
    "@polkadot/x-textencoder": "12.6.2",
    "@taplo/cli": "^0.7.0",
    "@types/node": "^20.2.5",
    "@vitest/coverage-v8": "^1.3.1",
    "babel-plugin-import": "^1.13.6",
    "concurrently": "^8.2.2",
    "cypress": "^13.12.0",
    "depcheck": "^1.4.7",
    "htmlhint": "^1.1.4",
    "markdownlint-cli": "^0.41.0",
    "node-loader": "^2.0.0",
    "nodemon": "^3.0.1",
    "npm-check-updates": "^15.3.4",
    "npm-run-all": "^4.1.5",
    "tsc-alias": "^1.8.6",
    "tslib": "2.6.2",
    "typedoc": "^0.25.13",
    "typedoc-plugin-mdn-links": "^3.1.16",
    "typedoc-plugin-missing-exports": "^2.2.0",
    "typedoc-plugin-zod": "^1.1.2",
    "typescript": "5.1.6"
  },
  "description": "Prosopo Procaptcha is a privacy-focused, secure alternative to reCAPTCHA. This repository integrates prosopo packages for development purposes.",
  "bugs": {
    "url": "https://github.com/prosopo/captcha/issues"
  },
  "homepage": "https://github.com/prosopo/captcha#readme",
  "keywords": [
    "captcha",
    "prosopo",
    "privacy",
    "security",
    "reCAPTCHA",
    "anti-bot",
    "authentication",
    "verification",
    "user-verification",
    "privacy-focused",
    "bot-detection",
    "human-verification",
    "form-security",
    "web-security",
    "anti-spam",
    "frontend-security",
    "open-source",
    "free",
    "captcha-alternative",
    "hcaptcha",
    "google-recaptcha",
    "recaptcha-alternative",
    "recaptcha-v3",
    "recaptcha-v2",
    "cloudflare-turnstile-alternative",
    "hcaptcha-alternative",
    "prosopo-captcha",
    "procaptcha",
    "prosopo-procaptcha",
    "web3-captcha"
  ],
  "license": "Apache-2.0"
}
