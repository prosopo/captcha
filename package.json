{
    "name": "@prosopo/captcha",
    "version": "0.2.0",
    "stableVersion": "0.0.0",
    "author": "Prosopo",
    "type": "module",
    "repository": {
        "type": "git",
        "url": "git+https://github.com/prosopo/captcha.git"
    },
    "scripts": {
        "about:cmd": "perform string substitution on the command and then execute it. Make sure to use --, e.g. npm run cmd -- my args here",
        "cmd": "f() { cmd=$1; shift; cmd=$(printf \"$cmd\" $@); echo exec: $cmd; echo; eval $cmd; }; f",
        "build": "npm run cmd -- \"npm run -w @prosopo/%s build\"",
        "build:all": "npm run --workspaces --if-present build",
        "build:all:cjs": "npm run --workspaces --if-present build:cjs",
        "rebuild": "f() { npm run cmd -- \"npm run clean %s\" $@ ; npm run cmd -- \"npm run build %s\" $@ ;}; f",
        "rebuild:npm": "npm run clean:npm && npm i",
        "clean": "npm run cmd -- \"npm run -w @prosopo/%s clean\"",
        "clean:npm": "find . -name \"node_modules\" -type d -prune -exec rm -rf '{}' + && find . -name \"package-lock.json\" -type f -delete ",
        "clean:all": "npm run clean:npm && npm run clean:ts",
        "clean:reset": "npm run clean:all && npm run clean:npm",
        "deploy_protocol": "npm run -w @prosopo/scripts cli deploy_protocol -- --logLevel=debug --update_env",
        "deploy_dapp": "npm run -w @prosopo/scripts cli deploy_dapp -- --logLevel=debug --update_env",
        "clean:ts": "find . -name \"*.tsbuildinfo\" -type f -delete && find . -name \"dist\" -type d -prune -exec rm -rf '{}' + ",
        "version": "npm --no-git-tag-version --allow-same-version --workspaces --workspaces-update version",
        "publish:dry-run": "npm --workspaces publish --dry-run",
        "publish": "npm --workspaces publish --access=public",
        "ls:ws": "npm run --workspaces env | grep npm_package_name | cut -d '=' -f 2",
        "cli": "npm -w @prosopo/cli run cli",
        "setup": "npm -w @prosopo/scripts run setup",
        "setup:all": "npm run deploy_protocol && npm run deploy_dapp && npm run setup",
        "start:provider": "npm -w @prosopo/cli run start",
        "start:server": "npm -w @prosopo/client-example-server run start",
        "dev:server": "npm -w @prosopo/client-example-server run dev",
        "start:demo": "npm -w @prosopo/client-example run start",
        "start:bundle": "npm -w client-bundle-example run start",
        "populate-data": "npm -w @prosopo/provider run populate-data",
        "test": "npm -w @prosopo/scripts run test",
        "test:all": "npm run --workspaces --if-present test",
        "about:prettier": "echo run prettier on all top-level configs files, settings files, and workflow files, then each workspace",
        "prettier": "f() { npm run cmd -- \"npx prettier 'tsconfig*.json' '.*.{js,cjs,mjs,json}' '*.{js,cjs,mjs,json}' '.vscode/**/*.json' '.github/workflows/*.{yaml,yml}' --config $(pwd)/.prettierrc.js --ignore-path $(pwd)/.eslintignore --check %s\" $@ && npm run cmd -- \"npm --workspaces exec prettier -- '**/*.{js,jsx,cjs,mjs,ts,tsx,cts,mts,d.ts,json}' '**/.*.{js,jsx,cjs,mjs,ts,tsx,cts,mts,d.ts,json}'  --config $(pwd)/.prettierrc.js --ignore-path $(pwd)/.eslintignore --no-error-on-unmatched-pattern --check %s\" $@ ;}; f",
        "prettier:fix": "npm run prettier -- --write",
        "about:eslint": "echo run eslint on all top-level configs files, settings files, and workflow files, then each workspace",
        "eslint": "f() { npm run cmd -- \"npx eslint 'tsconfig*.json' '.*.{js,cjs,mjs,json}' '*.{js,cjs,mjs,json}' '.vscode/**/*.json' '.github/workflows/*.{yaml,yml}' --config $(pwd)/.eslintrc.cjs --ignore-path $(pwd)/.eslintignore %s\" $@ && npm run cmd -- \"npm --workspaces exec eslint -- '**/*.{js,jsx,cjs,mjs,ts,tsx,cts,mts,d.ts,json}' '**/.*.{js,jsx,cjs,mjs,ts,tsx,cts,mts,d.ts,json}'  --config $(pwd)/.eslintrc.cjs --ignore-path $(pwd)/.eslintignore --no-error-on-unmatched-pattern %s\" $@ ;}; f",
        "eslint:fix": "npm run eslint -- --fix",
        "lint": "npm run eslint && npm run prettier",
        "lint:fix": "npm run eslint:fix && npm run prettier:fix"
    },
    "private": true,
    "engines": {
        "node": ">=14.0.0"
    },
    "workspaces": [
        "packages/*",
        "demos/*",
        "dev/*",
        "protocol/dev"
    ],
    "devDependencies": {
        "@eslint/eslintrc": "^2.0.3",
        "@types/node": "^20.2.5",
        "@typescript-eslint/eslint-plugin": "^5.30.7",
        "@typescript-eslint/parser": "^5.30.7",
        "babel-plugin-import": "^1.13.6",
        "depcheck": "^1.4.3",
        "esbuild": "0.17.19",
        "eslint": "^8.48.0",
        "eslint-config-prettier": "^8.5.0",
        "eslint-plugin-absolute-imports-only": "^1.0.1",
        "eslint-plugin-json": "^3.1.0",
        "eslint-plugin-prettier": "^5.0.0",
        "eslint-plugin-sort-imports-es6-autofix": "^0.6.0",
        "eslint-plugin-unused-imports": "^2.0.0",
        "eslint-plugin-workspaces": "^0.9.0",
        "eslint-plugin-yaml": "^0.5.0",
        "node-loader": "^2.0.0",
        "npm-check-updates": "^15.3.4",
        "prettier": "^3.0.3",
        "tsc-alias": "^1.8.6",
        "tsconfig-paths-webpack-plugin": "^4.0.1",
        "tslib": "^2.5.2",
        "typescript": "5.1.6"
    },
    "description": "Prosopo Captcha is a privacy-focused, secure alternative to reCAPTCHA. This repository integrates prosopo packages for development purposes",
    "bugs": {
        "url": "https://github.com/prosopo/captcha/issues"
    },
    "homepage": "https://github.com/prosopo/captcha#readme",
    "keywords": [
        "captcha",
        "prosopo",
        "privacy",
        "security",
        "reCAPTCHA",
        "anti-bot",
        "authentication",
        "verification",
        "user-verification",
        "privacy-focused",
        "bot-detection",
        "human-verification",
        "form-security",
        "web-security",
        "anti-spam",
        "frontend-security",
        "open-source",
        "free",
        "captcha-alternative"
    ],
    "license": "Apache-2.0"
}
