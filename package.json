{
    "name": "@prosopo/captcha",
    "version": "1.0.2",
    "author": "Prosopo",
    "type": "module",
    "repository": {
        "type": "git",
        "url": "git+https://github.com/prosopo/captcha.git"
    },
    "scripts": {
        "hostid": "npm run cmd -- \"dig +short %s.prosopo.io | tail -n1 | tee /dev/tty | nslookup | cut -d = -f 2 | head -n1 | cut -d ' ' -f 2 | sed 's/\\.*$//g'\"",
        "cmd:about": "perform string substitution on the command and then execute it. Make sure to use --, e.g. npm run cmd -- my args here",
        "cmd": "f() { cmd=$1; shift; cmd=$(printf \"$cmd\" $@); echo exec: $cmd; echo; eval $cmd || exit $?; }; f",
        "build": "npm run cmd -- \"npm run -w @prosopo/%s build\"",
        "build:contracts": "npm run -w @prosopo/protocol build:all",
        "build:typechain": "npm run build:contracts && cd dev/scripts && npm run build && npm run cli -- import_all_contracts && cd ../.. && npm run lint-fix:contracts",
        "build:all": "npm run ws -- --if-present build",
        "build:all:cjs": "npm run ws -- --if-present build:cjs",
        "build:provider-gui": "npm run -w @prosopo/provider-gui build",
        "build:bundle": "npm run -w @prosopo/procaptcha-bundle bundle:dev",
        "rebuild": "f() { npm run cmd -- \"npm run clean %s\" $@ ; npm run cmd -- \"npm run build %s\" $@ ;}; f",
        "rebuild:npm": "npm run clean:npm && npm i",
        "clean": "npm run cmd -- \"npm run -w @prosopo/%s clean\"",
        "clean:npm": "find . -name \"node_modules\" -type d -prune -exec rm -rf '{}' + && find . -name \"package-lock.json\" -type f -delete ",
        "clean:all": "npm run clean:npm && npm run clean:ts",
        "clean:reset": "npm run clean:all && npm run clean:npm",
        "deploy_protocol": "npm run -w @prosopo/scripts cli deploy_protocol -- --logLevel=debug --update_env",
        "deploy_dapp": "npm run -w @prosopo/scripts cli deploy_dapp -- --logLevel=debug --update_env",
        "clean:ts": "find . -name \"*.tsbuildinfo\" -type f -delete && find . -name \"dist\" -type d -prune -exec rm -rf '{}' + ",
        "version": "f() { npm run -w @prosopo/scripts cli -- version -v $@; npm i; }; f",
        "publish:dry-run": "npm --workspaces publish --dry-run",
        "publish": "npm --workspaces publish --access=public",
        "ws:ls": "npm run --workspaces env | grep npm_package_name | cut -d '=' -f 2",
        "ws:about": "run a command for each workspace member, exiting immediately if any command fails. Don't forget the `--` !",
        "ws": "f() { set -e; npm run --silent ws:ls | while read -r line; do echo $line; npm run -w $line $@; done; }; f",
        "cli": "npm -w @prosopo/cli run cli",
        "setup": "npm -w @prosopo/scripts run setup",
        "setup:all": "npm run deploy_protocol && npm run setup",
        "start:provider": "npm -w @prosopo/cli run start",
        "start:provider-gui": "npm -w @prosopo/provider-gui run start",
        "start:server": "npm -w @prosopo/client-example-server run start",
        "start:demo": "npm -w @prosopo/client-example run start",
        "start:demo:pow": "npm -w @prosopo/client-pow-example run start",
        "start:demo:frictionless": "npm -w @prosopo/client-frictionless-example run start",
        "start:bundle": "npm -w @prosopo/client-bundle-example run start",
        "start:all": "npx concurrently \"npm run start:server\" \"npm run start:provider\" \"npm run start:demo\" \"npm run start:bundle\" --kill-others",
        "start:all:pow": "npx concurrently \"npm run start:server\" \"npm run start:provider\" \"npm run start:demo:pow\" \"npm run start:bundle\" --kill-others",
        "populate-data": "npm -w @prosopo/provider run populate-data",
        "test": "npm run ws -- test",
        "test:all": "npm run ws -- --if-present test",
        "lint:license": "npm run -w @prosopo/scripts license",
        "lint-fix:license": "npm run -w @prosopo/scripts license:fix",
        "lint:contracts": "biome lint contracts/*",
        "lint-fix:contracts": "npm run --silent lint:contracts --fix",
        "lint:dockerfile": "find . \\( -name 'Dockerfile' -o -name '*.dockerfile' -o -name 'docker-compose.*.yml' \\) ! -path '*/node_modules/*' | xargs -I {} echo 'cat {} | docker run --rm -i hadolint/hadolint' | awk '{printf \"%s%s\", sep, $0; sep=\" && \"} END{print \"\"}' | bash",
        "lint:caddyfile": "caddy fmt **/*.Caddyfile",
        "lint-fix:caddyfile": "caddy fmt --overwrite **/*.Caddyfile",
        "lint:actions": "docker run --rm -v $(pwd):/repo --workdir /repo rhysd/actionlint:latest -color",
        "lint:shell": "find . -name '*.sh' ! -path '*/node_modules/*' | xargs -I {} echo 'shellcheck {}' | awk '{printf \"%s%s\", sep, $0; sep=\" && \"} END{print \"\"}' | bash",
        "lint:yaml": "yamllint",
        "lint:py": "ruff check .",
        "lint-fix:py": "ruff format .",
        "lint:js": "biome lint .",
        "lint-fix:js": "npm run --silent lint:js --fix",
        "lint:html": "htmlhint '**/*.{html,svg}' --config htmlhint.json",
        "lint:md": "markdownlint '**/*.md' --ignore-path .gitignore",
        "lint-fix:md": "npm run --silent lint:md --fix",
        "lint": "run-s lint:*",
        "lint-fix": "run-s lint-fix:*",
        "docker:rust": "f() { if [ \"$CI\" = \"true\" ]; then FLAGS=''; else FLAGS='-it'; fi ; mkdir -p cargo-cache && docker run --rm $FLAGS -u $(id -u):$(id -g) --cpu-quota=-1 -v $PWD:/src -v $PWD/cargo-cache:/usr/local/cargo/registry prosopo/cargo-contract:4.1.1 \"export RUST_BACKTRACE=1; $@\" ;}; f",
        "lint:rs:clippy": "npm run --silent docker:rust -- cargo clippy -- -D warnings -A clippy::too_many_arguments --file /src/**/*.rs",
        "lint:rs:rustfmt": "npm run --silent docker:rust -- rustfmt --recursive --check /src",
        "lint:rs": "run-s lint:rs:rustfmt lint:rs:clippy",
        "lint-fix:rs:clippy": "npm run --silent docker:rust -- cargo clippy -- -D warnings -A clippy::too_many_arguments --file /src/**/*.rs",
        "lint-fix:rs:rustfmt": "npm run --silent docker:rust -- rustfmt --recursive /src",
        "lint-fix:rs": "run-s lint-fix:rs:rustfmt lint-fix:rs:clippy",
        "lint:toml": "npm run --silent docker:rust -- rustfmt --check /src/**/*.toml",
        "lint-fix:toml": "npm run --silent docker:rust -- rustfmt /src/**/*.toml",
        "lint-changed:js": "npm run --silent lint:js --changed",
        "lint-changed-fix:js": "npm run --silent lint-fix:js --changed",
        "removePolkadotJSWarnings": "sed -i 's/console.warn\\(.*\\);//g' ./node_modules/@polkadot/util/versionDetect.js && sed -i 's/console.warn\\(.*\\);//g' ./node_modules/@polkadot/util/cjs/versionDetect.js || true",
        "postinstall": "npm run removePolkadotJSWarnings",
        "docs": "npx typedoc --plugin typedoc-plugin-missing-exports --plugin typedoc-plugin-mdn-links --plugin typedoc-plugin-zod 2>&1 | grep -v \"Serialized project contained a reflection\" && echo 'docs.prosopo.io' >> docs/CNAME"
    },
    "private": true,
    "engines": {
        "node": ">=20",
        "npm": ">=9"
    },
    "workspaces": [
        "protocol",
        "contracts/*",
        "dev/*",
        "packages/*",
        "demos/*",
        "provider-gui"
    ],
    "dependencies": {
        "@prosopo/flux": "1.0.2"
    },
    "devDependencies": {
        "@biomejs/biome": "1.8.3",
        "@eslint/eslintrc": "^2.0.3",
        "@html-eslint/eslint-plugin": "^0.22.0",
        "@html-eslint/parser": "^0.22.0",
        "@polkadot/x-textdecoder": "12.6.2",
        "@polkadot/x-textencoder": "12.6.2",
        "@types/node": "^20.2.5",
        "@typescript-eslint/eslint-plugin": "^6.13.2",
        "@typescript-eslint/parser": "^6.0.0",
        "@vitest/coverage-v8": "^1.3.1",
        "babel-plugin-import": "^1.13.6",
        "concurrently": "^8.2.2",
        "cypress": "^13.12.0",
        "depcheck": "^1.4.7",
        "eslint": "^8.55.0",
        "eslint-config-prettier": "^8.5.0",
        "eslint-plugin-absolute-imports-only": "^1.0.1",
        "eslint-plugin-json": "^3.1.0",
        "eslint-plugin-regexp": "^1.15.0",
        "eslint-plugin-sort-imports-es6-autofix": "^0.6.0",
        "eslint-plugin-toml": "^0.5.0",
        "eslint-plugin-unused-imports": "^3.0.0",
        "eslint-plugin-workspaces": "^0.9.0",
        "eslint-plugin-yaml": "^0.5.0",
        "markdownlint-cli": "^0.41.0",
        "node-loader": "^2.0.0",
        "nodemon": "^3.0.1",
        "npm-check-updates": "^15.3.4",
        "npm-run-all": "^4.1.5",
        "prettier": "3.0.3",
        "tsc-alias": "^1.8.6",
        "tslib": "2.6.2",
        "typedoc": "^0.25.13",
        "typedoc-plugin-mdn-links": "^3.1.16",
        "typedoc-plugin-missing-exports": "^2.2.0",
        "typedoc-plugin-zod": "^1.1.2",
        "typescript": "5.1.6"
    },
    "description": "Prosopo Procaptcha is a privacy-focused, secure alternative to reCAPTCHA. This repository integrates prosopo packages for development purposes.",
    "bugs": {
        "url": "https://github.com/prosopo/captcha/issues"
    },
    "homepage": "https://github.com/prosopo/captcha#readme",
    "keywords": [
        "captcha",
        "prosopo",
        "privacy",
        "security",
        "reCAPTCHA",
        "anti-bot",
        "authentication",
        "verification",
        "user-verification",
        "privacy-focused",
        "bot-detection",
        "human-verification",
        "form-security",
        "web-security",
        "anti-spam",
        "frontend-security",
        "open-source",
        "free",
        "captcha-alternative",
        "hcaptcha",
        "google-recaptcha",
        "recaptcha-alternative",
        "recaptcha-v3",
        "recaptcha-v2",
        "cloudflare-turnstile-alternative",
        "hcaptcha-alternative",
        "prosopo-captcha",
        "procaptcha",
        "prosopo-procaptcha",
        "web3-captcha"
    ],
    "license": "Apache-2.0"
}
