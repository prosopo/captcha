var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
function _mergeNamespaces(n, m2) {
  for (var i = 0; i < m2.length; i++) {
    const e = m2[i];
    if (typeof e !== "string" && !Array.isArray(e)) {
      for (const k in e) {
        if (k !== "default" && !(k in n)) {
          const d = Object.getOwnPropertyDescriptor(e, k);
          if (d) {
            Object.defineProperty(n, k, d.get ? d : {
              enumerable: true,
              get: () => e[k]
            });
          }
        }
      }
    }
  }
  return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: "Module" }));
}
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
function getAugmentedNamespace(n) {
  if (n.__esModule)
    return n;
  var f = n.default;
  if (typeof f == "function") {
    var a = function a2() {
      if (this instanceof a2) {
        return Reflect.construct(f, arguments, this.constructor);
      }
      return f.apply(this, arguments);
    };
    a.prototype = f.prototype;
  } else
    a = {};
  Object.defineProperty(a, "__esModule", { value: true });
  Object.keys(n).forEach(function(k) {
    var d = Object.getOwnPropertyDescriptor(n, k);
    Object.defineProperty(a, k, d.get ? d : {
      enumerable: true,
      get: function() {
        return n[k];
      }
    });
  });
  return a;
}
var jsxRuntime = { exports: {} };
var reactJsxRuntime_development = {};
var react = { exports: {} };
var react_development = { exports: {} };
(function(module2, exports) {
  {
    (function() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      }
      var ReactVersion = "18.2.0";
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var ReactCurrentDispatcher = {
        /**
         * @internal
         * @type {ReactComponent}
         */
        current: null
      };
      var ReactCurrentBatchConfig = {
        transition: null
      };
      var ReactCurrentActQueue = {
        current: null,
        // Used to reproduce behavior of `batchedUpdates` in legacy mode.
        isBatchingLegacy: false,
        didScheduleLegacyUpdate: false
      };
      var ReactCurrentOwner = {
        /**
         * @internal
         * @type {ReactComponent}
         */
        current: null
      };
      var ReactDebugCurrentFrame = {};
      var currentExtraStackFrame = null;
      function setExtraStackFrame(stack) {
        {
          currentExtraStackFrame = stack;
        }
      }
      {
        ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
          {
            currentExtraStackFrame = stack;
          }
        };
        ReactDebugCurrentFrame.getCurrentStack = null;
        ReactDebugCurrentFrame.getStackAddendum = function() {
          var stack = "";
          if (currentExtraStackFrame) {
            stack += currentExtraStackFrame;
          }
          var impl = ReactDebugCurrentFrame.getCurrentStack;
          if (impl) {
            stack += impl() || "";
          }
          return stack;
        };
      }
      var enableScopeAPI = false;
      var enableCacheElement = false;
      var enableTransitionTracing = false;
      var enableLegacyHidden = false;
      var enableDebugTracing = false;
      var ReactSharedInternals = {
        ReactCurrentDispatcher,
        ReactCurrentBatchConfig,
        ReactCurrentOwner
      };
      {
        ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
        ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
      }
      function warn3(format) {
        {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
      }
      function error2(format) {
        {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var didWarnStateUpdateForUnmountedComponent = {};
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor;
          var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
          var warningKey = componentName + "." + callerName;
          if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
            return;
          }
          error2("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
          didWarnStateUpdateForUnmountedComponent[warningKey] = true;
        }
      }
      var ReactNoopUpdateQueue = {
        /**
         * Checks whether or not this composite component is mounted.
         * @param {ReactClass} publicInstance The instance we want to test.
         * @return {boolean} True if mounted, false otherwise.
         * @protected
         * @final
         */
        isMounted: function(publicInstance) {
          return false;
        },
        /**
         * Forces an update. This should only be invoked when it is known with
         * certainty that we are **not** in a DOM transaction.
         *
         * You may want to call this when you know that some deeper aspect of the
         * component's state has changed but `setState` was not called.
         *
         * This will not invoke `shouldComponentUpdate`, but it will invoke
         * `componentWillUpdate` and `componentDidUpdate`.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {?function} callback Called after component is updated.
         * @param {?string} callerName name of the calling function in the public API.
         * @internal
         */
        enqueueForceUpdate: function(publicInstance, callback, callerName) {
          warnNoop(publicInstance, "forceUpdate");
        },
        /**
         * Replaces all of the state. Always use this or `setState` to mutate state.
         * You should treat `this.state` as immutable.
         *
         * There is no guarantee that `this.state` will be immediately updated, so
         * accessing `this.state` after calling this method may return the old value.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {object} completeState Next state.
         * @param {?function} callback Called after component is updated.
         * @param {?string} callerName name of the calling function in the public API.
         * @internal
         */
        enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, "replaceState");
        },
        /**
         * Sets a subset of the state. This only exists because _pendingState is
         * internal. This provides a merging strategy that is not available to deep
         * properties which is confusing. TODO: Expose pendingState or don't use it
         * during the merge.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {object} partialState Next partial state to be merged with state.
         * @param {?function} callback Called after component is updated.
         * @param {?string} Name of the calling function in the public API.
         * @internal
         */
        enqueueSetState: function(publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, "setState");
        }
      };
      var assign2 = Object.assign;
      var emptyObject = {};
      {
        Object.freeze(emptyObject);
      }
      function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      Component.prototype.isReactComponent = {};
      Component.prototype.setState = function(partialState, callback) {
        if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
          throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        }
        this.updater.enqueueSetState(this, partialState, callback, "setState");
      };
      Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
      };
      {
        var deprecatedAPIs = {
          isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
          replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
        };
        var defineDeprecationWarning = function(methodName, info2) {
          Object.defineProperty(Component.prototype, methodName, {
            get: function() {
              warn3("%s(...) is deprecated in plain JavaScript React classes. %s", info2[0], info2[1]);
              return void 0;
            }
          });
        };
        for (var fnName in deprecatedAPIs) {
          if (deprecatedAPIs.hasOwnProperty(fnName)) {
            defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
          }
        }
      }
      function ComponentDummy() {
      }
      ComponentDummy.prototype = Component.prototype;
      function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
      pureComponentPrototype.constructor = PureComponent;
      assign2(pureComponentPrototype, Component.prototype);
      pureComponentPrototype.isPureReactComponent = true;
      function createRef() {
        var refObject = {
          current: null
        };
        {
          Object.seal(refObject);
        }
        return refObject;
      }
      var isArrayImpl = Array.isArray;
      function isArray2(a) {
        return isArrayImpl(a);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        {
          try {
            return false;
          } catch (e) {
            return true;
          }
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow()) {
            error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init3 = lazyComponent._init;
              try {
                return getComponentNameFromType(init3(payload));
              } catch (x) {
                return null;
              }
            }
          }
        }
        return null;
      }
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }
      function hasValidRef(config2) {
        {
          if (hasOwnProperty2.call(config2, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config2.ref !== void 0;
      }
      function hasValidKey(config2) {
        {
          if (hasOwnProperty2.call(config2, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config2.key !== void 0;
      }
      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
          {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }
      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
          {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, "ref", {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }
      function warnIfStringRefCannotBeAutoConverted(config2) {
        {
          if (typeof config2.ref === "string" && ReactCurrentOwner.current && config2.__self && ReactCurrentOwner.current.stateNode !== config2.__self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
              error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config2.ref);
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
      }
      var ReactElement = function(type, key, ref, self2, source, owner, props) {
        var element = {
          // This tag allows us to uniquely identify this as a React Element
          $$typeof: REACT_ELEMENT_TYPE,
          // Built-in properties that belong on the element
          type,
          key,
          ref,
          props,
          // Record the component responsible for creating this element.
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self2
          });
          Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };
      function createElement(type, config2, children) {
        var propName;
        var props = {};
        var key = null;
        var ref = null;
        var self2 = null;
        var source = null;
        if (config2 != null) {
          if (hasValidRef(config2)) {
            ref = config2.ref;
            {
              warnIfStringRefCannotBeAutoConverted(config2);
            }
          }
          if (hasValidKey(config2)) {
            {
              checkKeyStringCoercion(config2.key);
            }
            key = "" + config2.key;
          }
          self2 = config2.__self === void 0 ? null : config2.__self;
          source = config2.__source === void 0 ? null : config2.__source;
          for (propName in config2) {
            if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config2[propName];
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }
          {
            if (Object.freeze) {
              Object.freeze(childArray);
            }
          }
          props.children = childArray;
        }
        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;
          for (propName in defaultProps) {
            if (props[propName] === void 0) {
              props[propName] = defaultProps[propName];
            }
          }
        }
        {
          if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
        }
        return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
      }
      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }
      function cloneElement(element, config2, children) {
        if (element === null || element === void 0) {
          throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        }
        var propName;
        var props = assign2({}, element.props);
        var key = element.key;
        var ref = element.ref;
        var self2 = element._self;
        var source = element._source;
        var owner = element._owner;
        if (config2 != null) {
          if (hasValidRef(config2)) {
            ref = config2.ref;
            owner = ReactCurrentOwner.current;
          }
          if (hasValidKey(config2)) {
            {
              checkKeyStringCoercion(config2.key);
            }
            key = "" + config2.key;
          }
          var defaultProps;
          if (element.type && element.type.defaultProps) {
            defaultProps = element.type.defaultProps;
          }
          for (propName in config2) {
            if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              if (config2[propName] === void 0 && defaultProps !== void 0) {
                props[propName] = defaultProps[propName];
              } else {
                props[propName] = config2[propName];
              }
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }
          props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self2, source, owner, props);
      }
      function isValidElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      var SEPARATOR = ".";
      var SUBSEPARATOR = ":";
      function escape2(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
          "=": "=0",
          ":": "=2"
        };
        var escapedString = key.replace(escapeRegex, function(match2) {
          return escaperLookup[match2];
        });
        return "$" + escapedString;
      }
      var didWarnAboutMaps = false;
      var userProvidedKeyEscapeRegex = /\/+/g;
      function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, "$&/");
      }
      function getElementKey(element, index) {
        if (typeof element === "object" && element !== null && element.key != null) {
          {
            checkKeyStringCoercion(element.key);
          }
          return escape2("" + element.key);
        }
        return index.toString(36);
      }
      function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === "undefined" || type === "boolean") {
          children = null;
        }
        var invokeCallback = false;
        if (children === null) {
          invokeCallback = true;
        } else {
          switch (type) {
            case "string":
            case "number":
              invokeCallback = true;
              break;
            case "object":
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
              }
          }
        }
        if (invokeCallback) {
          var _child = children;
          var mappedChild = callback(_child);
          var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
          if (isArray2(mappedChild)) {
            var escapedChildKey = "";
            if (childKey != null) {
              escapedChildKey = escapeUserProvidedKey(childKey) + "/";
            }
            mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
              return c;
            });
          } else if (mappedChild != null) {
            if (isValidElement(mappedChild)) {
              {
                if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                  checkKeyStringCoercion(mappedChild.key);
                }
              }
              mappedChild = cloneAndReplaceKey(
                mappedChild,
                // Keep both the (mapped) and old keys if they differ, just as
                // traverseAllChildren used to do for objects as children
                escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                  // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                  // eslint-disable-next-line react-internal/safe-string-coercion
                  escapeUserProvidedKey("" + mappedChild.key) + "/"
                ) : "") + childKey
              );
            }
            array.push(mappedChild);
          }
          return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0;
        var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (isArray2(children)) {
          for (var i = 0; i < children.length; i++) {
            child = children[i];
            nextName = nextNamePrefix + getElementKey(child, i);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
          }
        } else {
          var iteratorFn = getIteratorFn(children);
          if (typeof iteratorFn === "function") {
            var iterableChildren = children;
            {
              if (iteratorFn === iterableChildren.entries) {
                if (!didWarnAboutMaps) {
                  warn3("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
            }
            var iterator2 = iteratorFn.call(iterableChildren);
            var step;
            var ii = 0;
            while (!(step = iterator2.next()).done) {
              child = step.value;
              nextName = nextNamePrefix + getElementKey(child, ii++);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else if (type === "object") {
            var childrenString = String(children);
            throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
          }
        }
        return subtreeCount;
      }
      function mapChildren(children, func, context) {
        if (children == null) {
          return children;
        }
        var result = [];
        var count = 0;
        mapIntoArray(children, result, "", "", function(child) {
          return func.call(context, child, count++);
        });
        return result;
      }
      function countChildren(children) {
        var n = 0;
        mapChildren(children, function() {
          n++;
        });
        return n;
      }
      function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
          forEachFunc.apply(this, arguments);
        }, forEachContext);
      }
      function toArray2(children) {
        return mapChildren(children, function(child) {
          return child;
        }) || [];
      }
      function onlyChild(children) {
        if (!isValidElement(children)) {
          throw new Error("React.Children.only expected to receive a single React element child.");
        }
        return children;
      }
      function createContext(defaultValue) {
        var context = {
          $$typeof: REACT_CONTEXT_TYPE,
          // As a workaround to support multiple concurrent renderers, we categorize
          // some renderers as primary and others as secondary. We only expect
          // there to be two concurrent renderers at most: React Native (primary) and
          // Fabric (secondary); React DOM (primary) and React ART (secondary).
          // Secondary renderers store their context values on separate fields.
          _currentValue: defaultValue,
          _currentValue2: defaultValue,
          // Used to track how many concurrent renderers this context currently
          // supports within in a single renderer. Such as parallel server rendering.
          _threadCount: 0,
          // These are circular
          Provider: null,
          Consumer: null,
          // Add these to use same hidden class in VM as ServerContext
          _defaultValue: null,
          _globalName: null
        };
        context.Provider = {
          $$typeof: REACT_PROVIDER_TYPE,
          _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        {
          var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context
          };
          Object.defineProperties(Consumer, {
            Provider: {
              get: function() {
                if (!hasWarnedAboutUsingConsumerProvider) {
                  hasWarnedAboutUsingConsumerProvider = true;
                  error2("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                }
                return context.Provider;
              },
              set: function(_Provider) {
                context.Provider = _Provider;
              }
            },
            _currentValue: {
              get: function() {
                return context._currentValue;
              },
              set: function(_currentValue) {
                context._currentValue = _currentValue;
              }
            },
            _currentValue2: {
              get: function() {
                return context._currentValue2;
              },
              set: function(_currentValue2) {
                context._currentValue2 = _currentValue2;
              }
            },
            _threadCount: {
              get: function() {
                return context._threadCount;
              },
              set: function(_threadCount) {
                context._threadCount = _threadCount;
              }
            },
            Consumer: {
              get: function() {
                if (!hasWarnedAboutUsingNestedContextConsumers) {
                  hasWarnedAboutUsingNestedContextConsumers = true;
                  error2("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
                return context.Consumer;
              }
            },
            displayName: {
              get: function() {
                return context.displayName;
              },
              set: function(displayName) {
                if (!hasWarnedAboutDisplayNameOnConsumer) {
                  warn3("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                  hasWarnedAboutDisplayNameOnConsumer = true;
                }
              }
            }
          });
          context.Consumer = Consumer;
        }
        {
          context._currentRenderer = null;
          context._currentRenderer2 = null;
        }
        return context;
      }
      var Uninitialized = -1;
      var Pending = 0;
      var Resolved = 1;
      var Rejected = 2;
      function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
          var ctor = payload._result;
          var thenable = ctor();
          thenable.then(function(moduleObject2) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var resolved2 = payload;
              resolved2._status = Resolved;
              resolved2._result = moduleObject2;
            }
          }, function(error3) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var rejected = payload;
              rejected._status = Rejected;
              rejected._result = error3;
            }
          });
          if (payload._status === Uninitialized) {
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
          }
        }
        if (payload._status === Resolved) {
          var moduleObject = payload._result;
          {
            if (moduleObject === void 0) {
              error2("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
            }
          }
          {
            if (!("default" in moduleObject)) {
              error2("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
            }
          }
          return moduleObject.default;
        } else {
          throw payload._result;
        }
      }
      function lazy(ctor) {
        var payload = {
          // We use these fields to store the result.
          _status: Uninitialized,
          _result: ctor
        };
        var lazyType2 = {
          $$typeof: REACT_LAZY_TYPE,
          _payload: payload,
          _init: lazyInitializer
        };
        {
          var defaultProps;
          var propTypes;
          Object.defineProperties(lazyType2, {
            defaultProps: {
              configurable: true,
              get: function() {
                return defaultProps;
              },
              set: function(newDefaultProps) {
                error2("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                defaultProps = newDefaultProps;
                Object.defineProperty(lazyType2, "defaultProps", {
                  enumerable: true
                });
              }
            },
            propTypes: {
              configurable: true,
              get: function() {
                return propTypes;
              },
              set: function(newPropTypes) {
                error2("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                propTypes = newPropTypes;
                Object.defineProperty(lazyType2, "propTypes", {
                  enumerable: true
                });
              }
            }
          });
        }
        return lazyType2;
      }
      function forwardRef(render2) {
        {
          if (render2 != null && render2.$$typeof === REACT_MEMO_TYPE) {
            error2("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
          } else if (typeof render2 !== "function") {
            error2("forwardRef requires a render function but was given %s.", render2 === null ? "null" : typeof render2);
          } else {
            if (render2.length !== 0 && render2.length !== 2) {
              error2("forwardRef render functions accept exactly two parameters: props and ref. %s", render2.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
            }
          }
          if (render2 != null) {
            if (render2.defaultProps != null || render2.propTypes != null) {
              error2("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
            }
          }
        }
        var elementType = {
          $$typeof: REACT_FORWARD_REF_TYPE,
          render: render2
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              if (!render2.name && !render2.displayName) {
                render2.displayName = name;
              }
            }
          });
        }
        return elementType;
      }
      var REACT_MODULE_REFERENCE;
      {
        REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      }
      function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") {
          return true;
        }
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
          return true;
        }
        if (typeof type === "object" && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
          // types supported by any Flight configuration anywhere since
          // we don't know which Flight build this will end up being used
          // with.
          type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
            return true;
          }
        }
        return false;
      }
      function memo2(type, compare) {
        {
          if (!isValidElementType(type)) {
            error2("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
          }
        }
        var elementType = {
          $$typeof: REACT_MEMO_TYPE,
          type,
          compare: compare === void 0 ? null : compare
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              if (!type.name && !type.displayName) {
                type.displayName = name;
              }
            }
          });
        }
        return elementType;
      }
      function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        {
          if (dispatcher === null) {
            error2("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
        }
        return dispatcher;
      }
      function useContext(Context) {
        var dispatcher = resolveDispatcher();
        {
          if (Context._context !== void 0) {
            var realContext = Context._context;
            if (realContext.Consumer === Context) {
              error2("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            } else if (realContext.Provider === Context) {
              error2("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
            }
          }
        }
        return dispatcher.useContext(Context);
      }
      function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
      }
      function useReducer(reducer, initialArg, init3) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init3);
      }
      function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
      }
      function useEffect(create2, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create2, deps);
      }
      function useInsertionEffect2(create2, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useInsertionEffect(create2, deps);
      }
      function useLayoutEffect(create2, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create2, deps);
      }
      function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
      }
      function useMemo(create2, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create2, deps);
      }
      function useImperativeHandle(ref, create2, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create2, deps);
      }
      function useDebugValue(value, formatterFn) {
        {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDebugValue(value, formatterFn);
        }
      }
      function useTransition() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useTransition();
      }
      function useDeferredValue(value) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDeferredValue(value);
      }
      function useId() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useId();
      }
      function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      }
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign2({}, props, {
                value: prevLog
              }),
              info: assign2({}, props, {
                value: prevInfo
              }),
              warn: assign2({}, props, {
                value: prevWarn
              }),
              error: assign2({}, props, {
                value: prevError
              }),
              group: assign2({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign2({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign2({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0) {
            try {
              throw Error();
            } catch (x) {
              var match2 = x.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match2 && match2[1] || "";
            }
          }
          return "\n" + prefix2 + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s = sampleLines.length - 1;
            var c = controlLines.length - 1;
            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
              c--;
            }
            for (; s >= 1 && c >= 0; s--, c--) {
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1) {
                  do {
                    s--;
                    c--;
                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                      if (fn.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn.displayName);
                      }
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s >= 1 && c >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component2) {
        var prototype = Component2.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init3 = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init3(payload));
              } catch (x) {
              }
            }
          }
        }
        return "";
      }
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var stack = describeUnknownElementTypeFrameInDEV(element.type);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty2);
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error2("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var stack = describeUnknownElementTypeFrameInDEV(element.type);
            setExtraStackFrame(stack);
          } else {
            setExtraStackFrame(null);
          }
        }
      }
      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }
      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentNameFromType(ReactCurrentOwner.current.type);
          if (name) {
            return "\n\nCheck the render method of `" + name + "`.";
          }
        }
        return "";
      }
      function getSourceInfoErrorAddendum(source) {
        if (source !== void 0) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, "");
          var lineNumber = source.lineNumber;
          return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
        }
        return "";
      }
      function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== void 0) {
          return getSourceInfoErrorAddendum(elementProps.__source);
        }
        return "";
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        var info2 = getDeclarationErrorAddendum();
        if (!info2) {
          var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
          if (parentName) {
            info2 = "\n\nCheck the top-level render call using <" + parentName + ">.";
          }
        }
        return info2;
      }
      function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = "";
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
          childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        }
        {
          setCurrentlyValidatingElement$1(element);
          error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node2, parentType) {
        if (typeof node2 !== "object") {
          return;
        }
        if (isArray2(node2)) {
          for (var i = 0; i < node2.length; i++) {
            var child = node2[i];
            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node2)) {
          if (node2._store) {
            node2._store.validated = true;
          }
        } else if (node2) {
          var iteratorFn = getIteratorFn(node2);
          if (typeof iteratorFn === "function") {
            if (iteratorFn !== node2.entries) {
              var iterator2 = iteratorFn.call(node2);
              var step;
              while (!(step = iterator2.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type === null || type === void 0 || typeof type === "string") {
            return;
          }
          var propTypes;
          if (typeof type === "function") {
            propTypes = type.propTypes;
          } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
          // Inner props are checked in the reconciler.
          type.$$typeof === REACT_MEMO_TYPE)) {
            propTypes = type.propTypes;
          } else {
            return;
          }
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentNameFromType(type);
            error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
            error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
          }
        }
      }
      function validateFragmentProps(fragment) {
        {
          var keys = Object.keys(fragment.props);
          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment);
              error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
              setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error2("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
          }
        }
      }
      function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);
        if (!validType) {
          var info2 = "";
          if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
            info2 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
          }
          var sourceInfo = getSourceInfoErrorAddendumForProps(props);
          if (sourceInfo) {
            info2 += sourceInfo;
          } else {
            info2 += getDeclarationErrorAddendum();
          }
          var typeString;
          if (type === null) {
            typeString = "null";
          } else if (isArray2(type)) {
            typeString = "array";
          } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
            typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
            info2 = " Did you accidentally export a JSX literal instead of a component?";
          } else {
            typeString = typeof type;
          }
          {
            error2("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info2);
          }
        }
        var element = createElement.apply(this, arguments);
        if (element == null) {
          return element;
        }
        if (validType) {
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], type);
          }
        }
        if (type === REACT_FRAGMENT_TYPE) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }
        return element;
      }
      var didWarnAboutDeprecatedCreateFactory = false;
      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        {
          if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn3("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
          }
          Object.defineProperty(validatedFactory, "type", {
            enumerable: false,
            get: function() {
              warn3("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
              Object.defineProperty(this, "type", {
                value: type
              });
              return type;
            }
          });
        }
        return validatedFactory;
      }
      function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], newElement.type);
        }
        validatePropTypes(newElement);
        return newElement;
      }
      function startTransition(scope, options) {
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = {};
        var currentTransition = ReactCurrentBatchConfig.transition;
        {
          ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
        }
        try {
          scope();
        } finally {
          ReactCurrentBatchConfig.transition = prevTransition;
          {
            if (prevTransition === null && currentTransition._updatedFibers) {
              var updatedFibersCount = currentTransition._updatedFibers.size;
              if (updatedFibersCount > 10) {
                warn3("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
              }
              currentTransition._updatedFibers.clear();
            }
          }
        }
      }
      var didWarnAboutMessageChannel = false;
      var enqueueTaskImpl = null;
      function enqueueTask(task) {
        if (enqueueTaskImpl === null) {
          try {
            var requireString = ("require" + Math.random()).slice(0, 7);
            var nodeRequire = module2 && module2[requireString];
            enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
          } catch (_err) {
            enqueueTaskImpl = function(callback) {
              {
                if (didWarnAboutMessageChannel === false) {
                  didWarnAboutMessageChannel = true;
                  if (typeof MessageChannel === "undefined") {
                    error2("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                  }
                }
              }
              var channel = new MessageChannel();
              channel.port1.onmessage = callback;
              channel.port2.postMessage(void 0);
            };
          }
        }
        return enqueueTaskImpl(task);
      }
      var actScopeDepth = 0;
      var didWarnNoAwaitAct = false;
      function act(callback) {
        {
          var prevActScopeDepth = actScopeDepth;
          actScopeDepth++;
          if (ReactCurrentActQueue.current === null) {
            ReactCurrentActQueue.current = [];
          }
          var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
          var result;
          try {
            ReactCurrentActQueue.isBatchingLegacy = true;
            result = callback();
            if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
              var queue2 = ReactCurrentActQueue.current;
              if (queue2 !== null) {
                ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                flushActQueue(queue2);
              }
            }
          } catch (error3) {
            popActScope(prevActScopeDepth);
            throw error3;
          } finally {
            ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
          }
          if (result !== null && typeof result === "object" && typeof result.then === "function") {
            var thenableResult = result;
            var wasAwaited = false;
            var thenable = {
              then: function(resolve, reject) {
                wasAwaited = true;
                thenableResult.then(function(returnValue2) {
                  popActScope(prevActScopeDepth);
                  if (actScopeDepth === 0) {
                    recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                  } else {
                    resolve(returnValue2);
                  }
                }, function(error3) {
                  popActScope(prevActScopeDepth);
                  reject(error3);
                });
              }
            };
            {
              if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                Promise.resolve().then(function() {
                }).then(function() {
                  if (!wasAwaited) {
                    didWarnNoAwaitAct = true;
                    error2("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                  }
                });
              }
            }
            return thenable;
          } else {
            var returnValue = result;
            popActScope(prevActScopeDepth);
            if (actScopeDepth === 0) {
              var _queue = ReactCurrentActQueue.current;
              if (_queue !== null) {
                flushActQueue(_queue);
                ReactCurrentActQueue.current = null;
              }
              var _thenable = {
                then: function(resolve, reject) {
                  if (ReactCurrentActQueue.current === null) {
                    ReactCurrentActQueue.current = [];
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  } else {
                    resolve(returnValue);
                  }
                }
              };
              return _thenable;
            } else {
              var _thenable2 = {
                then: function(resolve, reject) {
                  resolve(returnValue);
                }
              };
              return _thenable2;
            }
          }
        }
      }
      function popActScope(prevActScopeDepth) {
        {
          if (prevActScopeDepth !== actScopeDepth - 1) {
            error2("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
          }
          actScopeDepth = prevActScopeDepth;
        }
      }
      function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        {
          var queue2 = ReactCurrentActQueue.current;
          if (queue2 !== null) {
            try {
              flushActQueue(queue2);
              enqueueTask(function() {
                if (queue2.length === 0) {
                  ReactCurrentActQueue.current = null;
                  resolve(returnValue);
                } else {
                  recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                }
              });
            } catch (error3) {
              reject(error3);
            }
          } else {
            resolve(returnValue);
          }
        }
      }
      var isFlushing = false;
      function flushActQueue(queue2) {
        {
          if (!isFlushing) {
            isFlushing = true;
            var i = 0;
            try {
              for (; i < queue2.length; i++) {
                var callback = queue2[i];
                do {
                  callback = callback(true);
                } while (callback !== null);
              }
              queue2.length = 0;
            } catch (error3) {
              queue2 = queue2.slice(i + 1);
              throw error3;
            } finally {
              isFlushing = false;
            }
          }
        }
      }
      var createElement$1 = createElementWithValidation;
      var cloneElement$1 = cloneElementWithValidation;
      var createFactory = createFactoryWithValidation;
      var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray2,
        only: onlyChild
      };
      exports.Children = Children;
      exports.Component = Component;
      exports.Fragment = REACT_FRAGMENT_TYPE;
      exports.Profiler = REACT_PROFILER_TYPE;
      exports.PureComponent = PureComponent;
      exports.StrictMode = REACT_STRICT_MODE_TYPE;
      exports.Suspense = REACT_SUSPENSE_TYPE;
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
      exports.cloneElement = cloneElement$1;
      exports.createContext = createContext;
      exports.createElement = createElement$1;
      exports.createFactory = createFactory;
      exports.createRef = createRef;
      exports.forwardRef = forwardRef;
      exports.isValidElement = isValidElement;
      exports.lazy = lazy;
      exports.memo = memo2;
      exports.startTransition = startTransition;
      exports.unstable_act = act;
      exports.useCallback = useCallback;
      exports.useContext = useContext;
      exports.useDebugValue = useDebugValue;
      exports.useDeferredValue = useDeferredValue;
      exports.useEffect = useEffect;
      exports.useId = useId;
      exports.useImperativeHandle = useImperativeHandle;
      exports.useInsertionEffect = useInsertionEffect2;
      exports.useLayoutEffect = useLayoutEffect;
      exports.useMemo = useMemo;
      exports.useReducer = useReducer;
      exports.useRef = useRef;
      exports.useState = useState;
      exports.useSyncExternalStore = useSyncExternalStore;
      exports.useTransition = useTransition;
      exports.version = ReactVersion;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
      }
    })();
  }
})(react_development, react_development.exports);
var react_developmentExports = react_development.exports;
/* @__PURE__ */ getDefaultExportFromCjs(react_developmentExports);
{
  react.exports = react_developmentExports;
}
var reactExports = react.exports;
const React = /* @__PURE__ */ getDefaultExportFromCjs(reactExports);
const React$1 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: React
}, [reactExports]);
{
  (function() {
    var React2 = reactExports;
    var REACT_ELEMENT_TYPE = Symbol.for("react.element");
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
    var REACT_MEMO_TYPE = Symbol.for("react.memo");
    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== "object") {
        return null;
      }
      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
      if (typeof maybeIterator === "function") {
        return maybeIterator;
      }
      return null;
    }
    var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function error2(format) {
      {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          printWarning("error", format, args);
        }
      }
    }
    function printWarning(level, format, args) {
      {
        var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame2.getStackAddendum();
        if (stack !== "") {
          format += "%s";
          args = args.concat([stack]);
        }
        var argsWithFormat = args.map(function(item) {
          return String(item);
        });
        argsWithFormat.unshift("Warning: " + format);
        Function.prototype.apply.call(console[level], console, argsWithFormat);
      }
    }
    var enableScopeAPI = false;
    var enableCacheElement = false;
    var enableTransitionTracing = false;
    var enableLegacyHidden = false;
    var enableDebugTracing = false;
    var REACT_MODULE_REFERENCE;
    {
      REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
    }
    function isValidElementType(type) {
      if (typeof type === "string" || typeof type === "function") {
        return true;
      }
      if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
        return true;
      }
      if (typeof type === "object" && type !== null) {
        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
        // types supported by any Flight configuration anywhere since
        // we don't know which Flight build this will end up being used
        // with.
        type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
          return true;
        }
      }
      return false;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
      var displayName = outerType.displayName;
      if (displayName) {
        return displayName;
      }
      var functionName = innerType.displayName || innerType.name || "";
      return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
    }
    function getContextName(type) {
      return type.displayName || "Context";
    }
    function getComponentNameFromType(type) {
      if (type == null) {
        return null;
      }
      {
        if (typeof type.tag === "number") {
          error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        }
      }
      if (typeof type === "function") {
        return type.displayName || type.name || null;
      }
      if (typeof type === "string") {
        return type;
      }
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PORTAL_TYPE:
          return "Portal";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
      }
      if (typeof type === "object") {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            var context = type;
            return getContextName(context) + ".Consumer";
          case REACT_PROVIDER_TYPE:
            var provider = type;
            return getContextName(provider._context) + ".Provider";
          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, "ForwardRef");
          case REACT_MEMO_TYPE:
            var outerName = type.displayName || null;
            if (outerName !== null) {
              return outerName;
            }
            return getComponentNameFromType(type.type) || "Memo";
          case REACT_LAZY_TYPE: {
            var lazyComponent = type;
            var payload = lazyComponent._payload;
            var init3 = lazyComponent._init;
            try {
              return getComponentNameFromType(init3(payload));
            } catch (x) {
              return null;
            }
          }
        }
      }
      return null;
    }
    var assign2 = Object.assign;
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
      {
        if (disabledDepth === 0) {
          prevLog = console.log;
          prevInfo = console.info;
          prevWarn = console.warn;
          prevError = console.error;
          prevGroup = console.group;
          prevGroupCollapsed = console.groupCollapsed;
          prevGroupEnd = console.groupEnd;
          var props = {
            configurable: true,
            enumerable: true,
            value: disabledLog,
            writable: true
          };
          Object.defineProperties(console, {
            info: props,
            log: props,
            warn: props,
            error: props,
            group: props,
            groupCollapsed: props,
            groupEnd: props
          });
        }
        disabledDepth++;
      }
    }
    function reenableLogs() {
      {
        disabledDepth--;
        if (disabledDepth === 0) {
          var props = {
            configurable: true,
            enumerable: true,
            writable: true
          };
          Object.defineProperties(console, {
            log: assign2({}, props, {
              value: prevLog
            }),
            info: assign2({}, props, {
              value: prevInfo
            }),
            warn: assign2({}, props, {
              value: prevWarn
            }),
            error: assign2({}, props, {
              value: prevError
            }),
            group: assign2({}, props, {
              value: prevGroup
            }),
            groupCollapsed: assign2({}, props, {
              value: prevGroupCollapsed
            }),
            groupEnd: assign2({}, props, {
              value: prevGroupEnd
            })
          });
        }
        if (disabledDepth < 0) {
          error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix2;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
      {
        if (prefix2 === void 0) {
          try {
            throw Error();
          } catch (x) {
            var match2 = x.stack.trim().match(/\n( *(at )?)/);
            prefix2 = match2 && match2[1] || "";
          }
        }
        return "\n" + prefix2 + name;
      }
    }
    var reentry = false;
    var componentFrameCache;
    {
      var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
      componentFrameCache = new PossiblyWeakMap();
    }
    function describeNativeComponentFrame(fn, construct) {
      if (!fn || reentry) {
        return "";
      }
      {
        var frame = componentFrameCache.get(fn);
        if (frame !== void 0) {
          return frame;
        }
      }
      var control;
      reentry = true;
      var previousPrepareStackTrace = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var previousDispatcher;
      {
        previousDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = null;
        disableLogs();
      }
      try {
        if (construct) {
          var Fake = function() {
            throw Error();
          };
          Object.defineProperty(Fake.prototype, "props", {
            set: function() {
              throw Error();
            }
          });
          if (typeof Reflect === "object" && Reflect.construct) {
            try {
              Reflect.construct(Fake, []);
            } catch (x) {
              control = x;
            }
            Reflect.construct(fn, [], Fake);
          } else {
            try {
              Fake.call();
            } catch (x) {
              control = x;
            }
            fn.call(Fake.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (x) {
            control = x;
          }
          fn();
        }
      } catch (sample) {
        if (sample && control && typeof sample.stack === "string") {
          var sampleLines = sample.stack.split("\n");
          var controlLines = control.stack.split("\n");
          var s = sampleLines.length - 1;
          var c = controlLines.length - 1;
          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
            c--;
          }
          for (; s >= 1 && c >= 0; s--, c--) {
            if (sampleLines[s] !== controlLines[c]) {
              if (s !== 1 || c !== 1) {
                do {
                  s--;
                  c--;
                  if (c < 0 || sampleLines[s] !== controlLines[c]) {
                    var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                    if (fn.displayName && _frame.includes("<anonymous>")) {
                      _frame = _frame.replace("<anonymous>", fn.displayName);
                    }
                    {
                      if (typeof fn === "function") {
                        componentFrameCache.set(fn, _frame);
                      }
                    }
                    return _frame;
                  }
                } while (s >= 1 && c >= 0);
              }
              break;
            }
          }
        }
      } finally {
        reentry = false;
        {
          ReactCurrentDispatcher.current = previousDispatcher;
          reenableLogs();
        }
        Error.prepareStackTrace = previousPrepareStackTrace;
      }
      var name = fn ? fn.displayName || fn.name : "";
      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
      {
        if (typeof fn === "function") {
          componentFrameCache.set(fn, syntheticFrame);
        }
      }
      return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
      {
        return describeNativeComponentFrame(fn, false);
      }
    }
    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
      if (type == null) {
        return "";
      }
      if (typeof type === "function") {
        {
          return describeNativeComponentFrame(type, shouldConstruct(type));
        }
      }
      if (typeof type === "string") {
        return describeBuiltInComponentFrame(type);
      }
      switch (type) {
        case REACT_SUSPENSE_TYPE:
          return describeBuiltInComponentFrame("Suspense");
        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame("SuspenseList");
      }
      if (typeof type === "object") {
        switch (type.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return describeFunctionComponentFrame(type.render);
          case REACT_MEMO_TYPE:
            return describeUnknownElementTypeFrameInDEV(type.type);
          case REACT_LAZY_TYPE: {
            var lazyComponent = type;
            var payload = lazyComponent._payload;
            var init3 = lazyComponent._init;
            try {
              return describeUnknownElementTypeFrameInDEV(init3(payload));
            } catch (x) {
            }
          }
        }
      }
      return "";
    }
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
      {
        if (element) {
          var stack = describeUnknownElementTypeFrameInDEV(element.type);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame.setExtraStackFrame(null);
        }
      }
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
      {
        var has = Function.call.bind(hasOwnProperty2);
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (ex) {
              error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
              setCurrentlyValidatingElement(element);
              error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
              setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
              loggedTypeFailures[error$1.message] = true;
              setCurrentlyValidatingElement(element);
              error2("Failed %s type: %s", location, error$1.message);
              setCurrentlyValidatingElement(null);
            }
          }
        }
      }
    }
    var isArrayImpl = Array.isArray;
    function isArray2(a) {
      return isArrayImpl(a);
    }
    function typeName(value) {
      {
        var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        return type;
      }
    }
    function willCoercionThrow(value) {
      {
        try {
          return false;
        } catch (e) {
          return true;
        }
      }
    }
    function testStringCoercion(value) {
      return "" + value;
    }
    function checkKeyStringCoercion(value) {
      {
        if (willCoercionThrow()) {
          error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
          return testStringCoercion(value);
        }
      }
    }
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var RESERVED_PROPS = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };
    var specialPropKeyWarningShown;
    var specialPropRefWarningShown;
    var didWarnAboutStringRefs;
    {
      didWarnAboutStringRefs = {};
    }
    function hasValidRef(config2) {
      {
        if (hasOwnProperty2.call(config2, "ref")) {
          var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config2.ref !== void 0;
    }
    function hasValidKey(config2) {
      {
        if (hasOwnProperty2.call(config2, "key")) {
          var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config2.key !== void 0;
    }
    function warnIfStringRefCannotBeAutoConverted(config2, self2) {
      {
        if (typeof config2.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
          if (!didWarnAboutStringRefs[componentName]) {
            error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config2.ref);
            didWarnAboutStringRefs[componentName] = true;
          }
        }
      }
    }
    function defineKeyPropWarningGetter(props, displayName) {
      {
        var warnAboutAccessingKey = function() {
          if (!specialPropKeyWarningShown) {
            specialPropKeyWarningShown = true;
            error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
          }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }
    }
    function defineRefPropWarningGetter(props, displayName) {
      {
        var warnAboutAccessingRef = function() {
          if (!specialPropRefWarningShown) {
            specialPropRefWarningShown = true;
            error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
          }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, "ref", {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }
    }
    var ReactElement = function(type, key, ref, self2, source, owner, props) {
      var element = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: REACT_ELEMENT_TYPE,
        // Built-in properties that belong on the element
        type,
        key,
        ref,
        props,
        // Record the component responsible for creating this element.
        _owner: owner
      };
      {
        element._store = {};
        Object.defineProperty(element._store, "validated", {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        });
        Object.defineProperty(element, "_self", {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self2
        });
        Object.defineProperty(element, "_source", {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });
        if (Object.freeze) {
          Object.freeze(element.props);
          Object.freeze(element);
        }
      }
      return element;
    };
    function jsxDEV(type, config2, maybeKey, source, self2) {
      {
        var propName;
        var props = {};
        var key = null;
        var ref = null;
        if (maybeKey !== void 0) {
          {
            checkKeyStringCoercion(maybeKey);
          }
          key = "" + maybeKey;
        }
        if (hasValidKey(config2)) {
          {
            checkKeyStringCoercion(config2.key);
          }
          key = "" + config2.key;
        }
        if (hasValidRef(config2)) {
          ref = config2.ref;
          warnIfStringRefCannotBeAutoConverted(config2, self2);
        }
        for (propName in config2) {
          if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            props[propName] = config2[propName];
          }
        }
        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;
          for (propName in defaultProps) {
            if (props[propName] === void 0) {
              props[propName] = defaultProps[propName];
            }
          }
        }
        if (key || ref) {
          var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
          if (key) {
            defineKeyPropWarningGetter(props, displayName);
          }
          if (ref) {
            defineRefPropWarningGetter(props, displayName);
          }
        }
        return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
      }
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement$1(element) {
      {
        if (element) {
          var stack = describeUnknownElementTypeFrameInDEV(element.type);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
        }
      }
    }
    var propTypesMisspellWarningShown;
    {
      propTypesMisspellWarningShown = false;
    }
    function isValidElement(object) {
      {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
    }
    function getDeclarationErrorAddendum() {
      {
        if (ReactCurrentOwner$1.current) {
          var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
          if (name) {
            return "\n\nCheck the render method of `" + name + "`.";
          }
        }
        return "";
      }
    }
    function getSourceInfoErrorAddendum(source) {
      {
        if (source !== void 0) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, "");
          var lineNumber = source.lineNumber;
          return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
        }
        return "";
      }
    }
    var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
      {
        var info2 = getDeclarationErrorAddendum();
        if (!info2) {
          var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
          if (parentName) {
            info2 = "\n\nCheck the top-level render call using <" + parentName + ">.";
          }
        }
        return info2;
      }
    }
    function validateExplicitKey(element, parentType) {
      {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = "";
        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
          childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        }
        setCurrentlyValidatingElement$1(element);
        error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
      }
    }
    function validateChildKeys(node2, parentType) {
      {
        if (typeof node2 !== "object") {
          return;
        }
        if (isArray2(node2)) {
          for (var i = 0; i < node2.length; i++) {
            var child = node2[i];
            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node2)) {
          if (node2._store) {
            node2._store.validated = true;
          }
        } else if (node2) {
          var iteratorFn = getIteratorFn(node2);
          if (typeof iteratorFn === "function") {
            if (iteratorFn !== node2.entries) {
              var iterator2 = iteratorFn.call(node2);
              var step;
              while (!(step = iterator2.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }
    }
    function validatePropTypes(element) {
      {
        var type = element.type;
        if (type === null || type === void 0 || typeof type === "string") {
          return;
        }
        var propTypes;
        if (typeof type === "function") {
          propTypes = type.propTypes;
        } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) {
          propTypes = type.propTypes;
        } else {
          return;
        }
        if (propTypes) {
          var name = getComponentNameFromType(type);
          checkPropTypes(propTypes, element.props, "prop", name, element);
        } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
          propTypesMisspellWarningShown = true;
          var _name = getComponentNameFromType(type);
          error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
        }
        if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
          error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
    }
    function validateFragmentProps(fragment) {
      {
        var keys = Object.keys(fragment.props);
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          if (key !== "children" && key !== "key") {
            setCurrentlyValidatingElement$1(fragment);
            error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
            setCurrentlyValidatingElement$1(null);
            break;
          }
        }
        if (fragment.ref !== null) {
          setCurrentlyValidatingElement$1(fragment);
          error2("Invalid attribute `ref` supplied to `React.Fragment`.");
          setCurrentlyValidatingElement$1(null);
        }
      }
    }
    function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
      {
        var validType = isValidElementType(type);
        if (!validType) {
          var info2 = "";
          if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
            info2 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
          }
          var sourceInfo = getSourceInfoErrorAddendum(source);
          if (sourceInfo) {
            info2 += sourceInfo;
          } else {
            info2 += getDeclarationErrorAddendum();
          }
          var typeString;
          if (type === null) {
            typeString = "null";
          } else if (isArray2(type)) {
            typeString = "array";
          } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
            typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
            info2 = " Did you accidentally export a JSX literal instead of a component?";
          } else {
            typeString = typeof type;
          }
          error2("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info2);
        }
        var element = jsxDEV(type, props, key, source, self2);
        if (element == null) {
          return element;
        }
        if (validType) {
          var children = props.children;
          if (children !== void 0) {
            if (isStaticChildren) {
              if (isArray2(children)) {
                for (var i = 0; i < children.length; i++) {
                  validateChildKeys(children[i], type);
                }
                if (Object.freeze) {
                  Object.freeze(children);
                }
              } else {
                error2("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
              }
            } else {
              validateChildKeys(children, type);
            }
          }
        }
        if (type === REACT_FRAGMENT_TYPE) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }
        return element;
      }
    }
    function jsxWithValidationStatic(type, props, key) {
      {
        return jsxWithValidation(type, props, key, true);
      }
    }
    function jsxWithValidationDynamic(type, props, key) {
      {
        return jsxWithValidation(type, props, key, false);
      }
    }
    var jsx2 = jsxWithValidationDynamic;
    var jsxs2 = jsxWithValidationStatic;
    reactJsxRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
    reactJsxRuntime_development.jsx = jsx2;
    reactJsxRuntime_development.jsxs = jsxs2;
  })();
}
{
  jsxRuntime.exports = reactJsxRuntime_development;
}
var jsxRuntimeExports = jsxRuntime.exports;
/* @__PURE__ */ getDefaultExportFromCjs(jsxRuntimeExports);
var util$2;
(function(util2) {
  util2.assertEqual = (val) => val;
  function assertIs(_arg) {
  }
  util2.assertIs = assertIs;
  function assertNever(_x) {
    throw new Error();
  }
  util2.assertNever = assertNever;
  util2.arrayToEnum = (items) => {
    const obj = {};
    for (const item of items) {
      obj[item] = item;
    }
    return obj;
  };
  util2.getValidEnumValues = (obj) => {
    const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
    const filtered = {};
    for (const k of validKeys) {
      filtered[k] = obj[k];
    }
    return util2.objectValues(filtered);
  };
  util2.objectValues = (obj) => {
    return util2.objectKeys(obj).map(function(e) {
      return obj[e];
    });
  };
  util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
    const keys = [];
    for (const key in object) {
      if (Object.prototype.hasOwnProperty.call(object, key)) {
        keys.push(key);
      }
    }
    return keys;
  };
  util2.find = (arr2, checker) => {
    for (const item of arr2) {
      if (checker(item))
        return item;
    }
    return void 0;
  };
  util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
  function joinValues(array, separator = " | ") {
    return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
  }
  util2.joinValues = joinValues;
  util2.jsonStringifyReplacer = (_23, value) => {
    if (typeof value === "bigint") {
      return value.toString();
    }
    return value;
  };
})(util$2 || (util$2 = {}));
var objectUtil;
(function(objectUtil2) {
  objectUtil2.mergeShapes = (first2, second) => {
    return {
      ...first2,
      ...second
      // second overwrites first
    };
  };
})(objectUtil || (objectUtil = {}));
const ZodParsedType = util$2.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]);
const getParsedType = (data) => {
  const t = typeof data;
  switch (t) {
    case "undefined":
      return ZodParsedType.undefined;
    case "string":
      return ZodParsedType.string;
    case "number":
      return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
    case "boolean":
      return ZodParsedType.boolean;
    case "function":
      return ZodParsedType.function;
    case "bigint":
      return ZodParsedType.bigint;
    case "symbol":
      return ZodParsedType.symbol;
    case "object":
      if (Array.isArray(data)) {
        return ZodParsedType.array;
      }
      if (data === null) {
        return ZodParsedType.null;
      }
      if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
        return ZodParsedType.promise;
      }
      if (typeof Map !== "undefined" && data instanceof Map) {
        return ZodParsedType.map;
      }
      if (typeof Set !== "undefined" && data instanceof Set) {
        return ZodParsedType.set;
      }
      if (typeof Date !== "undefined" && data instanceof Date) {
        return ZodParsedType.date;
      }
      return ZodParsedType.object;
    default:
      return ZodParsedType.unknown;
  }
};
const ZodIssueCode = util$2.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
const quotelessJson = (obj) => {
  const json = JSON.stringify(obj, null, 2);
  return json.replace(/"([^"]+)":/g, "$1:");
};
class ZodError extends Error {
  constructor(issues) {
    super();
    this.issues = [];
    this.addIssue = (sub) => {
      this.issues = [...this.issues, sub];
    };
    this.addIssues = (subs = []) => {
      this.issues = [...this.issues, ...subs];
    };
    const actualProto = new.target.prototype;
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(this, actualProto);
    } else {
      this.__proto__ = actualProto;
    }
    this.name = "ZodError";
    this.issues = issues;
  }
  get errors() {
    return this.issues;
  }
  format(_mapper) {
    const mapper = _mapper || function(issue) {
      return issue.message;
    };
    const fieldErrors = { _errors: [] };
    const processError = (error2) => {
      for (const issue of error2.issues) {
        if (issue.code === "invalid_union") {
          issue.unionErrors.map(processError);
        } else if (issue.code === "invalid_return_type") {
          processError(issue.returnTypeError);
        } else if (issue.code === "invalid_arguments") {
          processError(issue.argumentsError);
        } else if (issue.path.length === 0) {
          fieldErrors._errors.push(mapper(issue));
        } else {
          let curr = fieldErrors;
          let i = 0;
          while (i < issue.path.length) {
            const el = issue.path[i];
            const terminal = i === issue.path.length - 1;
            if (!terminal) {
              curr[el] = curr[el] || { _errors: [] };
            } else {
              curr[el] = curr[el] || { _errors: [] };
              curr[el]._errors.push(mapper(issue));
            }
            curr = curr[el];
            i++;
          }
        }
      }
    };
    processError(this);
    return fieldErrors;
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, util$2.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(mapper = (issue) => issue.message) {
    const fieldErrors = {};
    const formErrors = [];
    for (const sub of this.issues) {
      if (sub.path.length > 0) {
        fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
        fieldErrors[sub.path[0]].push(mapper(sub));
      } else {
        formErrors.push(mapper(sub));
      }
    }
    return { formErrors, fieldErrors };
  }
  get formErrors() {
    return this.flatten();
  }
}
ZodError.create = (issues) => {
  const error2 = new ZodError(issues);
  return error2;
};
const errorMap = (issue, _ctx) => {
  let message;
  switch (issue.code) {
    case ZodIssueCode.invalid_type:
      if (issue.received === ZodParsedType.undefined) {
        message = "Required";
      } else {
        message = `Expected ${issue.expected}, received ${issue.received}`;
      }
      break;
    case ZodIssueCode.invalid_literal:
      message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util$2.jsonStringifyReplacer)}`;
      break;
    case ZodIssueCode.unrecognized_keys:
      message = `Unrecognized key(s) in object: ${util$2.joinValues(issue.keys, ", ")}`;
      break;
    case ZodIssueCode.invalid_union:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_union_discriminator:
      message = `Invalid discriminator value. Expected ${util$2.joinValues(issue.options)}`;
      break;
    case ZodIssueCode.invalid_enum_value:
      message = `Invalid enum value. Expected ${util$2.joinValues(issue.options)}, received '${issue.received}'`;
      break;
    case ZodIssueCode.invalid_arguments:
      message = `Invalid function arguments`;
      break;
    case ZodIssueCode.invalid_return_type:
      message = `Invalid function return type`;
      break;
    case ZodIssueCode.invalid_date:
      message = `Invalid date`;
      break;
    case ZodIssueCode.invalid_string:
      if (typeof issue.validation === "object") {
        if ("includes" in issue.validation) {
          message = `Invalid input: must include "${issue.validation.includes}"`;
          if (typeof issue.validation.position === "number") {
            message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
          }
        } else if ("startsWith" in issue.validation) {
          message = `Invalid input: must start with "${issue.validation.startsWith}"`;
        } else if ("endsWith" in issue.validation) {
          message = `Invalid input: must end with "${issue.validation.endsWith}"`;
        } else {
          util$2.assertNever(issue.validation);
        }
      } else if (issue.validation !== "regex") {
        message = `Invalid ${issue.validation}`;
      } else {
        message = "Invalid";
      }
      break;
    case ZodIssueCode.too_small:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.too_big:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "bigint")
        message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.custom:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_intersection_types:
      message = `Intersection results could not be merged`;
      break;
    case ZodIssueCode.not_multiple_of:
      message = `Number must be a multiple of ${issue.multipleOf}`;
      break;
    case ZodIssueCode.not_finite:
      message = "Number must be finite";
      break;
    default:
      message = _ctx.defaultError;
      util$2.assertNever(issue);
  }
  return { message };
};
let overrideErrorMap = errorMap;
function setErrorMap(map2) {
  overrideErrorMap = map2;
}
function getErrorMap() {
  return overrideErrorMap;
}
const makeIssue = (params) => {
  const { data, path: path2, errorMaps, issueData } = params;
  const fullPath = [...path2, ...issueData.path || []];
  const fullIssue = {
    ...issueData,
    path: fullPath
  };
  let errorMessage = "";
  const maps = errorMaps.filter((m2) => !!m2).slice().reverse();
  for (const map2 of maps) {
    errorMessage = map2(fullIssue, { data, defaultError: errorMessage }).message;
  }
  return {
    ...issueData,
    path: fullPath,
    message: issueData.message || errorMessage
  };
};
const EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
  const issue = makeIssue({
    issueData,
    data: ctx.data,
    path: ctx.path,
    errorMaps: [
      ctx.common.contextualErrorMap,
      ctx.schemaErrorMap,
      getErrorMap(),
      errorMap
      // then global default map
    ].filter((x) => !!x)
  });
  ctx.common.issues.push(issue);
}
class ParseStatus {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    if (this.value === "valid")
      this.value = "dirty";
  }
  abort() {
    if (this.value !== "aborted")
      this.value = "aborted";
  }
  static mergeArray(status, results) {
    const arrayValue = [];
    for (const s of results) {
      if (s.status === "aborted")
        return INVALID;
      if (s.status === "dirty")
        status.dirty();
      arrayValue.push(s.value);
    }
    return { status: status.value, value: arrayValue };
  }
  static async mergeObjectAsync(status, pairs) {
    const syncPairs = [];
    for (const pair of pairs) {
      syncPairs.push({
        key: await pair.key,
        value: await pair.value
      });
    }
    return ParseStatus.mergeObjectSync(status, syncPairs);
  }
  static mergeObjectSync(status, pairs) {
    const finalObject = {};
    for (const pair of pairs) {
      const { key, value } = pair;
      if (key.status === "aborted")
        return INVALID;
      if (value.status === "aborted")
        return INVALID;
      if (key.status === "dirty")
        status.dirty();
      if (value.status === "dirty")
        status.dirty();
      if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
        finalObject[key.value] = value.value;
      }
    }
    return { status: status.value, value: finalObject };
  }
}
const INVALID = Object.freeze({
  status: "aborted"
});
const DIRTY = (value) => ({ status: "dirty", value });
const OK = (value) => ({ status: "valid", value });
const isAborted = (x) => x.status === "aborted";
const isDirty = (x) => x.status === "dirty";
const isValid = (x) => x.status === "valid";
const isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;
var errorUtil;
(function(errorUtil2) {
  errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
  errorUtil2.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
})(errorUtil || (errorUtil = {}));
class ParseInputLazyPath {
  constructor(parent, value, path2, key) {
    this._cachedPath = [];
    this.parent = parent;
    this.data = value;
    this._path = path2;
    this._key = key;
  }
  get path() {
    if (!this._cachedPath.length) {
      if (this._key instanceof Array) {
        this._cachedPath.push(...this._path, ...this._key);
      } else {
        this._cachedPath.push(...this._path, this._key);
      }
    }
    return this._cachedPath;
  }
}
const handleResult = (ctx, result) => {
  if (isValid(result)) {
    return { success: true, data: result.value };
  } else {
    if (!ctx.common.issues.length) {
      throw new Error("Validation failed but no issues detected.");
    }
    return {
      success: false,
      get error() {
        if (this._error)
          return this._error;
        const error2 = new ZodError(ctx.common.issues);
        this._error = error2;
        return this._error;
      }
    };
  }
};
function processCreateParams(params) {
  if (!params)
    return {};
  const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
  if (errorMap2 && (invalid_type_error || required_error)) {
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  }
  if (errorMap2)
    return { errorMap: errorMap2, description };
  const customMap = (iss, ctx) => {
    if (iss.code !== "invalid_type")
      return { message: ctx.defaultError };
    if (typeof ctx.data === "undefined") {
      return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };
    }
    return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };
  };
  return { errorMap: customMap, description };
}
class ZodType {
  constructor(def) {
    this.spa = this.safeParseAsync;
    this._def = def;
    this.parse = this.parse.bind(this);
    this.safeParse = this.safeParse.bind(this);
    this.parseAsync = this.parseAsync.bind(this);
    this.safeParseAsync = this.safeParseAsync.bind(this);
    this.spa = this.spa.bind(this);
    this.refine = this.refine.bind(this);
    this.refinement = this.refinement.bind(this);
    this.superRefine = this.superRefine.bind(this);
    this.optional = this.optional.bind(this);
    this.nullable = this.nullable.bind(this);
    this.nullish = this.nullish.bind(this);
    this.array = this.array.bind(this);
    this.promise = this.promise.bind(this);
    this.or = this.or.bind(this);
    this.and = this.and.bind(this);
    this.transform = this.transform.bind(this);
    this.brand = this.brand.bind(this);
    this.default = this.default.bind(this);
    this.catch = this.catch.bind(this);
    this.describe = this.describe.bind(this);
    this.pipe = this.pipe.bind(this);
    this.readonly = this.readonly.bind(this);
    this.isNullable = this.isNullable.bind(this);
    this.isOptional = this.isOptional.bind(this);
  }
  get description() {
    return this._def.description;
  }
  _getType(input) {
    return getParsedType(input.data);
  }
  _getOrReturnCtx(input, ctx) {
    return ctx || {
      common: input.parent.common,
      data: input.data,
      parsedType: getParsedType(input.data),
      schemaErrorMap: this._def.errorMap,
      path: input.path,
      parent: input.parent
    };
  }
  _processInputParams(input) {
    return {
      status: new ParseStatus(),
      ctx: {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      }
    };
  }
  _parseSync(input) {
    const result = this._parse(input);
    if (isAsync(result)) {
      throw new Error("Synchronous parse encountered promise.");
    }
    return result;
  }
  _parseAsync(input) {
    const result = this._parse(input);
    return Promise.resolve(result);
  }
  parse(data, params) {
    const result = this.safeParse(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  safeParse(data, params) {
    var _a2;
    const ctx = {
      common: {
        issues: [],
        async: (_a2 = params === null || params === void 0 ? void 0 : params.async) !== null && _a2 !== void 0 ? _a2 : false,
        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
      },
      path: (params === null || params === void 0 ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const result = this._parseSync({ data, path: ctx.path, parent: ctx });
    return handleResult(ctx, result);
  }
  async parseAsync(data, params) {
    const result = await this.safeParseAsync(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  async safeParseAsync(data, params) {
    const ctx = {
      common: {
        issues: [],
        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
        async: true
      },
      path: (params === null || params === void 0 ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
    const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
    return handleResult(ctx, result);
  }
  refine(check, message) {
    const getIssueProperties = (val) => {
      if (typeof message === "string" || typeof message === "undefined") {
        return { message };
      } else if (typeof message === "function") {
        return message(val);
      } else {
        return message;
      }
    };
    return this._refinement((val, ctx) => {
      const result = check(val);
      const setError = () => ctx.addIssue({
        code: ZodIssueCode.custom,
        ...getIssueProperties(val)
      });
      if (typeof Promise !== "undefined" && result instanceof Promise) {
        return result.then((data) => {
          if (!data) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      if (!result) {
        setError();
        return false;
      } else {
        return true;
      }
    });
  }
  refinement(check, refinementData) {
    return this._refinement((val, ctx) => {
      if (!check(val)) {
        ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
        return false;
      } else {
        return true;
      }
    });
  }
  _refinement(refinement) {
    return new ZodEffects({
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "refinement", refinement }
    });
  }
  superRefine(refinement) {
    return this._refinement(refinement);
  }
  optional() {
    return ZodOptional.create(this, this._def);
  }
  nullable() {
    return ZodNullable.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return ZodArray.create(this, this._def);
  }
  promise() {
    return ZodPromise.create(this, this._def);
  }
  or(option) {
    return ZodUnion.create([this, option], this._def);
  }
  and(incoming) {
    return ZodIntersection.create(this, incoming, this._def);
  }
  transform(transform) {
    return new ZodEffects({
      ...processCreateParams(this._def),
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "transform", transform }
    });
  }
  default(def) {
    const defaultValueFunc = typeof def === "function" ? def : () => def;
    return new ZodDefault({
      ...processCreateParams(this._def),
      innerType: this,
      defaultValue: defaultValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodDefault
    });
  }
  brand() {
    return new ZodBranded({
      typeName: ZodFirstPartyTypeKind.ZodBranded,
      type: this,
      ...processCreateParams(this._def)
    });
  }
  catch(def) {
    const catchValueFunc = typeof def === "function" ? def : () => def;
    return new ZodCatch({
      ...processCreateParams(this._def),
      innerType: this,
      catchValue: catchValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodCatch
    });
  }
  describe(description) {
    const This = this.constructor;
    return new This({
      ...this._def,
      description
    });
  }
  pipe(target) {
    return ZodPipeline.create(this, target);
  }
  readonly() {
    return ZodReadonly.create(this);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
}
const cuidRegex = /^c[^\s-]{8,}$/i;
const cuid2Regex = /^[a-z][a-z0-9]*$/;
const ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/;
const uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
const emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_+-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
const _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
let emojiRegex;
const ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;
const ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
const datetimeRegex = (args) => {
  if (args.precision) {
    if (args.offset) {
      return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
    } else {
      return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}Z$`);
    }
  } else if (args.precision === 0) {
    if (args.offset) {
      return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
    } else {
      return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$`);
    }
  } else {
    if (args.offset) {
      return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
    } else {
      return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$`);
    }
  }
};
function isValidIP(ip, version2) {
  if ((version2 === "v4" || !version2) && ipv4Regex.test(ip)) {
    return true;
  }
  if ((version2 === "v6" || !version2) && ipv6Regex.test(ip)) {
    return true;
  }
  return false;
}
class ZodString extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = String(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.string) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(
        ctx2,
        {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.string,
          received: ctx2.parsedType
        }
        //
      );
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.length < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.length > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "length") {
        const tooBig = input.data.length > check.value;
        const tooSmall = input.data.length < check.value;
        if (tooBig || tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          if (tooBig) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          } else if (tooSmall) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          }
          status.dirty();
        }
      } else if (check.kind === "email") {
        if (!emailRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "email",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "emoji") {
        if (!emojiRegex) {
          emojiRegex = new RegExp(_emojiRegex, "u");
        }
        if (!emojiRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "emoji",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "uuid") {
        if (!uuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "uuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid") {
        if (!cuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid2") {
        if (!cuid2Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid2",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ulid") {
        if (!ulidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ulid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "url") {
        try {
          new URL(input.data);
        } catch (_a2) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "url",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "regex") {
        check.regex.lastIndex = 0;
        const testResult = check.regex.test(input.data);
        if (!testResult) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "regex",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "trim") {
        input.data = input.data.trim();
      } else if (check.kind === "includes") {
        if (!input.data.includes(check.value, check.position)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { includes: check.value, position: check.position },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "toLowerCase") {
        input.data = input.data.toLowerCase();
      } else if (check.kind === "toUpperCase") {
        input.data = input.data.toUpperCase();
      } else if (check.kind === "startsWith") {
        if (!input.data.startsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { startsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "endsWith") {
        if (!input.data.endsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { endsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "datetime") {
        const regex = datetimeRegex(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "datetime",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ip") {
        if (!isValidIP(input.data, check.version)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ip",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util$2.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  _regex(regex, validation, message) {
    return this.refinement((data) => regex.test(data), {
      validation,
      code: ZodIssueCode.invalid_string,
      ...errorUtil.errToObj(message)
    });
  }
  _addCheck(check) {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  email(message) {
    return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
  }
  url(message) {
    return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
  }
  emoji(message) {
    return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
  }
  uuid(message) {
    return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
  }
  cuid(message) {
    return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
  }
  cuid2(message) {
    return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
  }
  ulid(message) {
    return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
  }
  ip(options) {
    return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
  }
  datetime(options) {
    var _a2;
    if (typeof options === "string") {
      return this._addCheck({
        kind: "datetime",
        precision: null,
        offset: false,
        message: options
      });
    }
    return this._addCheck({
      kind: "datetime",
      precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
      offset: (_a2 = options === null || options === void 0 ? void 0 : options.offset) !== null && _a2 !== void 0 ? _a2 : false,
      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
    });
  }
  regex(regex, message) {
    return this._addCheck({
      kind: "regex",
      regex,
      ...errorUtil.errToObj(message)
    });
  }
  includes(value, options) {
    return this._addCheck({
      kind: "includes",
      value,
      position: options === null || options === void 0 ? void 0 : options.position,
      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
    });
  }
  startsWith(value, message) {
    return this._addCheck({
      kind: "startsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  endsWith(value, message) {
    return this._addCheck({
      kind: "endsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  min(minLength, message) {
    return this._addCheck({
      kind: "min",
      value: minLength,
      ...errorUtil.errToObj(message)
    });
  }
  max(maxLength, message) {
    return this._addCheck({
      kind: "max",
      value: maxLength,
      ...errorUtil.errToObj(message)
    });
  }
  length(len, message) {
    return this._addCheck({
      kind: "length",
      value: len,
      ...errorUtil.errToObj(message)
    });
  }
  /**
   * @deprecated Use z.string().min(1) instead.
   * @see {@link ZodString.min}
   */
  nonempty(message) {
    return this.min(1, errorUtil.errToObj(message));
  }
  trim() {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
  }
  toLowerCase() {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    });
  }
  toUpperCase() {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((ch) => ch.kind === "datetime");
  }
  get isEmail() {
    return !!this._def.checks.find((ch) => ch.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((ch) => ch.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((ch) => ch.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((ch) => ch.kind === "uuid");
  }
  get isCUID() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((ch) => ch.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((ch) => ch.kind === "ip");
  }
  get minLength() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxLength() {
    let max2 = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max2 === null || ch.value < max2)
          max2 = ch.value;
      }
    }
    return max2;
  }
}
ZodString.create = (params) => {
  var _a2;
  return new ZodString({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodString,
    coerce: (_a2 = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a2 !== void 0 ? _a2 : false,
    ...processCreateParams(params)
  });
};
function floatSafeRemainder(val, step) {
  const valDecCount = (val.toString().split(".")[1] || "").length;
  const stepDecCount = (step.toString().split(".")[1] || "").length;
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
  const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / Math.pow(10, decCount);
}
class ZodNumber extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
    this.step = this.multipleOf;
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = Number(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.number) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.number,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === "int") {
        if (!util$2.isInteger(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: "integer",
            received: "float",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (floatSafeRemainder(input.data, check.value) !== 0) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "finite") {
        if (!Number.isFinite(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_finite,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util$2.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new ZodNumber({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new ZodNumber({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  int(message) {
    return this._addCheck({
      kind: "int",
      message: errorUtil.toString(message)
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  finite(message) {
    return this._addCheck({
      kind: "finite",
      message: errorUtil.toString(message)
    });
  }
  safe(message) {
    return this._addCheck({
      kind: "min",
      inclusive: true,
      value: Number.MIN_SAFE_INTEGER,
      message: errorUtil.toString(message)
    })._addCheck({
      kind: "max",
      inclusive: true,
      value: Number.MAX_SAFE_INTEGER,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max2 = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max2 === null || ch.value < max2)
          max2 = ch.value;
      }
    }
    return max2;
  }
  get isInt() {
    return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util$2.isInteger(ch.value));
  }
  get isFinite() {
    let max2 = null, min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
        return true;
      } else if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      } else if (ch.kind === "max") {
        if (max2 === null || ch.value < max2)
          max2 = ch.value;
      }
    }
    return Number.isFinite(min) && Number.isFinite(max2);
  }
}
ZodNumber.create = (params) => {
  return new ZodNumber({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodNumber,
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    ...processCreateParams(params)
  });
};
class ZodBigInt extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = BigInt(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.bigint) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.bigint,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            type: "bigint",
            minimum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            type: "bigint",
            maximum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (input.data % check.value !== BigInt(0)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util$2.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new ZodBigInt({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new ZodBigInt({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max2 = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max2 === null || ch.value < max2)
          max2 = ch.value;
      }
    }
    return max2;
  }
}
ZodBigInt.create = (params) => {
  var _a2;
  return new ZodBigInt({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodBigInt,
    coerce: (_a2 = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a2 !== void 0 ? _a2 : false,
    ...processCreateParams(params)
  });
};
class ZodBoolean extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = Boolean(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.boolean) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.boolean,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodBoolean.create = (params) => {
  return new ZodBoolean({
    typeName: ZodFirstPartyTypeKind.ZodBoolean,
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    ...processCreateParams(params)
  });
};
class ZodDate extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = new Date(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.date) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.date,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    if (isNaN(input.data.getTime())) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_date
      });
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.getTime() < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            message: check.message,
            inclusive: true,
            exact: false,
            minimum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.getTime() > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            message: check.message,
            inclusive: true,
            exact: false,
            maximum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else {
        util$2.assertNever(check);
      }
    }
    return {
      status: status.value,
      value: new Date(input.data.getTime())
    };
  }
  _addCheck(check) {
    return new ZodDate({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  min(minDate, message) {
    return this._addCheck({
      kind: "min",
      value: minDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  max(maxDate, message) {
    return this._addCheck({
      kind: "max",
      value: maxDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  get minDate() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min != null ? new Date(min) : null;
  }
  get maxDate() {
    let max2 = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max2 === null || ch.value < max2)
          max2 = ch.value;
      }
    }
    return max2 != null ? new Date(max2) : null;
  }
}
ZodDate.create = (params) => {
  return new ZodDate({
    checks: [],
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    typeName: ZodFirstPartyTypeKind.ZodDate,
    ...processCreateParams(params)
  });
};
class ZodSymbol extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.symbol) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.symbol,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodSymbol.create = (params) => {
  return new ZodSymbol({
    typeName: ZodFirstPartyTypeKind.ZodSymbol,
    ...processCreateParams(params)
  });
};
class ZodUndefined extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.undefined,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodUndefined.create = (params) => {
  return new ZodUndefined({
    typeName: ZodFirstPartyTypeKind.ZodUndefined,
    ...processCreateParams(params)
  });
};
class ZodNull extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.null) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.null,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodNull.create = (params) => {
  return new ZodNull({
    typeName: ZodFirstPartyTypeKind.ZodNull,
    ...processCreateParams(params)
  });
};
class ZodAny extends ZodType {
  constructor() {
    super(...arguments);
    this._any = true;
  }
  _parse(input) {
    return OK(input.data);
  }
}
ZodAny.create = (params) => {
  return new ZodAny({
    typeName: ZodFirstPartyTypeKind.ZodAny,
    ...processCreateParams(params)
  });
};
class ZodUnknown extends ZodType {
  constructor() {
    super(...arguments);
    this._unknown = true;
  }
  _parse(input) {
    return OK(input.data);
  }
}
ZodUnknown.create = (params) => {
  return new ZodUnknown({
    typeName: ZodFirstPartyTypeKind.ZodUnknown,
    ...processCreateParams(params)
  });
};
class ZodNever extends ZodType {
  _parse(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.never,
      received: ctx.parsedType
    });
    return INVALID;
  }
}
ZodNever.create = (params) => {
  return new ZodNever({
    typeName: ZodFirstPartyTypeKind.ZodNever,
    ...processCreateParams(params)
  });
};
class ZodVoid extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.void,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodVoid.create = (params) => {
  return new ZodVoid({
    typeName: ZodFirstPartyTypeKind.ZodVoid,
    ...processCreateParams(params)
  });
};
class ZodArray extends ZodType {
  _parse(input) {
    const { ctx, status } = this._processInputParams(input);
    const def = this._def;
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (def.exactLength !== null) {
      const tooBig = ctx.data.length > def.exactLength.value;
      const tooSmall = ctx.data.length < def.exactLength.value;
      if (tooBig || tooSmall) {
        addIssueToContext(ctx, {
          code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
          minimum: tooSmall ? def.exactLength.value : void 0,
          maximum: tooBig ? def.exactLength.value : void 0,
          type: "array",
          inclusive: true,
          exact: true,
          message: def.exactLength.message
        });
        status.dirty();
      }
    }
    if (def.minLength !== null) {
      if (ctx.data.length < def.minLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.minLength.message
        });
        status.dirty();
      }
    }
    if (def.maxLength !== null) {
      if (ctx.data.length > def.maxLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.maxLength.message
        });
        status.dirty();
      }
    }
    if (ctx.common.async) {
      return Promise.all([...ctx.data].map((item, i) => {
        return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
      })).then((result2) => {
        return ParseStatus.mergeArray(status, result2);
      });
    }
    const result = [...ctx.data].map((item, i) => {
      return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
    });
    return ParseStatus.mergeArray(status, result);
  }
  get element() {
    return this._def.type;
  }
  min(minLength, message) {
    return new ZodArray({
      ...this._def,
      minLength: { value: minLength, message: errorUtil.toString(message) }
    });
  }
  max(maxLength, message) {
    return new ZodArray({
      ...this._def,
      maxLength: { value: maxLength, message: errorUtil.toString(message) }
    });
  }
  length(len, message) {
    return new ZodArray({
      ...this._def,
      exactLength: { value: len, message: errorUtil.toString(message) }
    });
  }
  nonempty(message) {
    return this.min(1, message);
  }
}
ZodArray.create = (schema, params) => {
  return new ZodArray({
    type: schema,
    minLength: null,
    maxLength: null,
    exactLength: null,
    typeName: ZodFirstPartyTypeKind.ZodArray,
    ...processCreateParams(params)
  });
};
function deepPartialify(schema) {
  if (schema instanceof ZodObject) {
    const newShape = {};
    for (const key in schema.shape) {
      const fieldSchema = schema.shape[key];
      newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
    }
    return new ZodObject({
      ...schema._def,
      shape: () => newShape
    });
  } else if (schema instanceof ZodArray) {
    return new ZodArray({
      ...schema._def,
      type: deepPartialify(schema.element)
    });
  } else if (schema instanceof ZodOptional) {
    return ZodOptional.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodNullable) {
    return ZodNullable.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodTuple) {
    return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
  } else {
    return schema;
  }
}
class ZodObject extends ZodType {
  constructor() {
    super(...arguments);
    this._cached = null;
    this.nonstrict = this.passthrough;
    this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const shape = this._def.shape();
    const keys = util$2.objectKeys(shape);
    return this._cached = { shape, keys };
  }
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.object) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const { status, ctx } = this._processInputParams(input);
    const { shape, keys: shapeKeys } = this._getCached();
    const extraKeys = [];
    if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
      for (const key in ctx.data) {
        if (!shapeKeys.includes(key)) {
          extraKeys.push(key);
        }
      }
    }
    const pairs = [];
    for (const key of shapeKeys) {
      const keyValidator = shape[key];
      const value = ctx.data[key];
      pairs.push({
        key: { status: "valid", value: key },
        value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (this._def.catchall instanceof ZodNever) {
      const unknownKeys = this._def.unknownKeys;
      if (unknownKeys === "passthrough") {
        for (const key of extraKeys) {
          pairs.push({
            key: { status: "valid", value: key },
            value: { status: "valid", value: ctx.data[key] }
          });
        }
      } else if (unknownKeys === "strict") {
        if (extraKeys.length > 0) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.unrecognized_keys,
            keys: extraKeys
          });
          status.dirty();
        }
      } else if (unknownKeys === "strip")
        ;
      else {
        throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
      }
    } else {
      const catchall = this._def.catchall;
      for (const key of extraKeys) {
        const value = ctx.data[key];
        pairs.push({
          key: { status: "valid", value: key },
          value: catchall._parse(
            new ParseInputLazyPath(ctx, value, ctx.path, key)
            //, ctx.child(key), value, getParsedType(value)
          ),
          alwaysSet: key in ctx.data
        });
      }
    }
    if (ctx.common.async) {
      return Promise.resolve().then(async () => {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          syncPairs.push({
            key,
            value: await pair.value,
            alwaysSet: pair.alwaysSet
          });
        }
        return syncPairs;
      }).then((syncPairs) => {
        return ParseStatus.mergeObjectSync(status, syncPairs);
      });
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get shape() {
    return this._def.shape();
  }
  strict(message) {
    return new ZodObject({
      ...this._def,
      unknownKeys: "strict",
      ...message !== void 0 ? {
        errorMap: (issue, ctx) => {
          var _a2, _b, _c, _d;
          const defaultError = (_c = (_b = (_a2 = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a2, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
          if (issue.code === "unrecognized_keys")
            return {
              message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
            };
          return {
            message: defaultError
          };
        }
      } : {}
    });
  }
  strip() {
    return new ZodObject({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new ZodObject({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  // const AugmentFactory =
  //   <Def extends ZodObjectDef>(def: Def) =>
  //   <Augmentation extends ZodRawShape>(
  //     augmentation: Augmentation
  //   ): ZodObject<
  //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
  //     Def["unknownKeys"],
  //     Def["catchall"]
  //   > => {
  //     return new ZodObject({
  //       ...def,
  //       shape: () => ({
  //         ...def.shape(),
  //         ...augmentation,
  //       }),
  //     }) as any;
  //   };
  extend(augmentation) {
    return new ZodObject({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...augmentation
      })
    });
  }
  /**
   * Prior to zod@1.0.12 there was a bug in the
   * inferred type of merged objects. Please
   * upgrade if you are experiencing issues.
   */
  merge(merging) {
    const merged = new ZodObject({
      unknownKeys: merging._def.unknownKeys,
      catchall: merging._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...merging._def.shape()
      }),
      typeName: ZodFirstPartyTypeKind.ZodObject
    });
    return merged;
  }
  // merge<
  //   Incoming extends AnyZodObject,
  //   Augmentation extends Incoming["shape"],
  //   NewOutput extends {
  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
  //       ? Augmentation[k]["_output"]
  //       : k extends keyof Output
  //       ? Output[k]
  //       : never;
  //   },
  //   NewInput extends {
  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
  //       ? Augmentation[k]["_input"]
  //       : k extends keyof Input
  //       ? Input[k]
  //       : never;
  //   }
  // >(
  //   merging: Incoming
  // ): ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"],
  //   NewOutput,
  //   NewInput
  // > {
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  setKey(key, schema) {
    return this.augment({ [key]: schema });
  }
  // merge<Incoming extends AnyZodObject>(
  //   merging: Incoming
  // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
  // ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"]
  // > {
  //   // const mergedShape = objectUtil.mergeShapes(
  //   //   this._def.shape(),
  //   //   merging._def.shape()
  //   // );
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  catchall(index) {
    return new ZodObject({
      ...this._def,
      catchall: index
    });
  }
  pick(mask) {
    const shape = {};
    util$2.objectKeys(mask).forEach((key) => {
      if (mask[key] && this.shape[key]) {
        shape[key] = this.shape[key];
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  omit(mask) {
    const shape = {};
    util$2.objectKeys(this.shape).forEach((key) => {
      if (!mask[key]) {
        shape[key] = this.shape[key];
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  /**
   * @deprecated
   */
  deepPartial() {
    return deepPartialify(this);
  }
  partial(mask) {
    const newShape = {};
    util$2.objectKeys(this.shape).forEach((key) => {
      const fieldSchema = this.shape[key];
      if (mask && !mask[key]) {
        newShape[key] = fieldSchema;
      } else {
        newShape[key] = fieldSchema.optional();
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  required(mask) {
    const newShape = {};
    util$2.objectKeys(this.shape).forEach((key) => {
      if (mask && !mask[key]) {
        newShape[key] = this.shape[key];
      } else {
        const fieldSchema = this.shape[key];
        let newField = fieldSchema;
        while (newField instanceof ZodOptional) {
          newField = newField._def.innerType;
        }
        newShape[key] = newField;
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  keyof() {
    return createZodEnum(util$2.objectKeys(this.shape));
  }
}
ZodObject.create = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.strictCreate = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strict",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.lazycreate = (shape, params) => {
  return new ZodObject({
    shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
class ZodUnion extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const options = this._def.options;
    function handleResults(results) {
      for (const result of results) {
        if (result.result.status === "valid") {
          return result.result;
        }
      }
      for (const result of results) {
        if (result.result.status === "dirty") {
          ctx.common.issues.push(...result.ctx.common.issues);
          return result.result;
        }
      }
      const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return Promise.all(options.map(async (option) => {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          }),
          ctx: childCtx
        };
      })).then(handleResults);
    } else {
      let dirty = void 0;
      const issues = [];
      for (const option of options) {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        const result = option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: childCtx
        });
        if (result.status === "valid") {
          return result;
        } else if (result.status === "dirty" && !dirty) {
          dirty = { result, ctx: childCtx };
        }
        if (childCtx.common.issues.length) {
          issues.push(childCtx.common.issues);
        }
      }
      if (dirty) {
        ctx.common.issues.push(...dirty.ctx.common.issues);
        return dirty.result;
      }
      const unionErrors = issues.map((issues2) => new ZodError(issues2));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
  }
  get options() {
    return this._def.options;
  }
}
ZodUnion.create = (types2, params) => {
  return new ZodUnion({
    options: types2,
    typeName: ZodFirstPartyTypeKind.ZodUnion,
    ...processCreateParams(params)
  });
};
const getDiscriminator = (type) => {
  if (type instanceof ZodLazy) {
    return getDiscriminator(type.schema);
  } else if (type instanceof ZodEffects) {
    return getDiscriminator(type.innerType());
  } else if (type instanceof ZodLiteral) {
    return [type.value];
  } else if (type instanceof ZodEnum) {
    return type.options;
  } else if (type instanceof ZodNativeEnum) {
    return Object.keys(type.enum);
  } else if (type instanceof ZodDefault) {
    return getDiscriminator(type._def.innerType);
  } else if (type instanceof ZodUndefined) {
    return [void 0];
  } else if (type instanceof ZodNull) {
    return [null];
  } else {
    return null;
  }
};
class ZodDiscriminatedUnion extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const discriminator = this.discriminator;
    const discriminatorValue = ctx.data[discriminator];
    const option = this.optionsMap.get(discriminatorValue);
    if (!option) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union_discriminator,
        options: Array.from(this.optionsMap.keys()),
        path: [discriminator]
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return option._parseAsync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    } else {
      return option._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    }
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  /**
   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
   * have a different value for each object in the union.
   * @param discriminator the name of the discriminator property
   * @param types an array of object schemas
   * @param params
   */
  static create(discriminator, options, params) {
    const optionsMap = /* @__PURE__ */ new Map();
    for (const type of options) {
      const discriminatorValues = getDiscriminator(type.shape[discriminator]);
      if (!discriminatorValues) {
        throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
      }
      for (const value of discriminatorValues) {
        if (optionsMap.has(value)) {
          throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
        }
        optionsMap.set(value, type);
      }
    }
    return new ZodDiscriminatedUnion({
      typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
      discriminator,
      options,
      optionsMap,
      ...processCreateParams(params)
    });
  }
}
function mergeValues(a, b) {
  const aType = getParsedType(a);
  const bType = getParsedType(b);
  if (a === b) {
    return { valid: true, data: a };
  } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
    const bKeys = util$2.objectKeys(b);
    const sharedKeys = util$2.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
    const newObj = { ...a, ...b };
    for (const key of sharedKeys) {
      const sharedValue = mergeValues(a[key], b[key]);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newObj[key] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
    if (a.length !== b.length) {
      return { valid: false };
    }
    const newArray = [];
    for (let index = 0; index < a.length; index++) {
      const itemA = a[index];
      const itemB = b[index];
      const sharedValue = mergeValues(itemA, itemB);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {
    return { valid: true, data: a };
  } else {
    return { valid: false };
  }
}
class ZodIntersection extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const handleParsed = (parsedLeft, parsedRight) => {
      if (isAborted(parsedLeft) || isAborted(parsedRight)) {
        return INVALID;
      }
      const merged = mergeValues(parsedLeft.value, parsedRight.value);
      if (!merged.valid) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_intersection_types
        });
        return INVALID;
      }
      if (isDirty(parsedLeft) || isDirty(parsedRight)) {
        status.dirty();
      }
      return { status: status.value, value: merged.data };
    };
    if (ctx.common.async) {
      return Promise.all([
        this._def.left._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }),
        this._def.right._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        })
      ]).then(([left, right]) => handleParsed(left, right));
    } else {
      return handleParsed(this._def.left._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }), this._def.right._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }));
    }
  }
}
ZodIntersection.create = (left, right, params) => {
  return new ZodIntersection({
    left,
    right,
    typeName: ZodFirstPartyTypeKind.ZodIntersection,
    ...processCreateParams(params)
  });
};
class ZodTuple extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (ctx.data.length < this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_small,
        minimum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      return INVALID;
    }
    const rest = this._def.rest;
    if (!rest && ctx.data.length > this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_big,
        maximum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      status.dirty();
    }
    const items = [...ctx.data].map((item, itemIndex) => {
      const schema = this._def.items[itemIndex] || this._def.rest;
      if (!schema)
        return null;
      return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
    }).filter((x) => !!x);
    if (ctx.common.async) {
      return Promise.all(items).then((results) => {
        return ParseStatus.mergeArray(status, results);
      });
    } else {
      return ParseStatus.mergeArray(status, items);
    }
  }
  get items() {
    return this._def.items;
  }
  rest(rest) {
    return new ZodTuple({
      ...this._def,
      rest
    });
  }
}
ZodTuple.create = (schemas, params) => {
  if (!Array.isArray(schemas)) {
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  }
  return new ZodTuple({
    items: schemas,
    typeName: ZodFirstPartyTypeKind.ZodTuple,
    rest: null,
    ...processCreateParams(params)
  });
};
class ZodRecord extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const pairs = [];
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    for (const key in ctx.data) {
      pairs.push({
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
        value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key))
      });
    }
    if (ctx.common.async) {
      return ParseStatus.mergeObjectAsync(status, pairs);
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get element() {
    return this._def.valueType;
  }
  static create(first2, second, third) {
    if (second instanceof ZodType) {
      return new ZodRecord({
        keyType: first2,
        valueType: second,
        typeName: ZodFirstPartyTypeKind.ZodRecord,
        ...processCreateParams(third)
      });
    }
    return new ZodRecord({
      keyType: ZodString.create(),
      valueType: first2,
      typeName: ZodFirstPartyTypeKind.ZodRecord,
      ...processCreateParams(second)
    });
  }
}
class ZodMap extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.map) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.map,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    const pairs = [...ctx.data.entries()].map(([key, value], index) => {
      return {
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
        value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
      };
    });
    if (ctx.common.async) {
      const finalMap = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          if (key.status === "aborted" || value.status === "aborted") {
            return INVALID;
          }
          if (key.status === "dirty" || value.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      });
    } else {
      const finalMap = /* @__PURE__ */ new Map();
      for (const pair of pairs) {
        const key = pair.key;
        const value = pair.value;
        if (key.status === "aborted" || value.status === "aborted") {
          return INVALID;
        }
        if (key.status === "dirty" || value.status === "dirty") {
          status.dirty();
        }
        finalMap.set(key.value, value.value);
      }
      return { status: status.value, value: finalMap };
    }
  }
}
ZodMap.create = (keyType, valueType, params) => {
  return new ZodMap({
    valueType,
    keyType,
    typeName: ZodFirstPartyTypeKind.ZodMap,
    ...processCreateParams(params)
  });
};
class ZodSet extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.set) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.set,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const def = this._def;
    if (def.minSize !== null) {
      if (ctx.data.size < def.minSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.minSize.message
        });
        status.dirty();
      }
    }
    if (def.maxSize !== null) {
      if (ctx.data.size > def.maxSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.maxSize.message
        });
        status.dirty();
      }
    }
    const valueType = this._def.valueType;
    function finalizeSet(elements2) {
      const parsedSet = /* @__PURE__ */ new Set();
      for (const element of elements2) {
        if (element.status === "aborted")
          return INVALID;
        if (element.status === "dirty")
          status.dirty();
        parsedSet.add(element.value);
      }
      return { status: status.value, value: parsedSet };
    }
    const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
    if (ctx.common.async) {
      return Promise.all(elements).then((elements2) => finalizeSet(elements2));
    } else {
      return finalizeSet(elements);
    }
  }
  min(minSize, message) {
    return new ZodSet({
      ...this._def,
      minSize: { value: minSize, message: errorUtil.toString(message) }
    });
  }
  max(maxSize, message) {
    return new ZodSet({
      ...this._def,
      maxSize: { value: maxSize, message: errorUtil.toString(message) }
    });
  }
  size(size, message) {
    return this.min(size, message).max(size, message);
  }
  nonempty(message) {
    return this.min(1, message);
  }
}
ZodSet.create = (valueType, params) => {
  return new ZodSet({
    valueType,
    minSize: null,
    maxSize: null,
    typeName: ZodFirstPartyTypeKind.ZodSet,
    ...processCreateParams(params)
  });
};
class ZodFunction extends ZodType {
  constructor() {
    super(...arguments);
    this.validate = this.implement;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.function) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.function,
        received: ctx.parsedType
      });
      return INVALID;
    }
    function makeArgsIssue(args, error2) {
      return makeIssue({
        data: args,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          getErrorMap(),
          errorMap
        ].filter((x) => !!x),
        issueData: {
          code: ZodIssueCode.invalid_arguments,
          argumentsError: error2
        }
      });
    }
    function makeReturnsIssue(returns, error2) {
      return makeIssue({
        data: returns,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          getErrorMap(),
          errorMap
        ].filter((x) => !!x),
        issueData: {
          code: ZodIssueCode.invalid_return_type,
          returnTypeError: error2
        }
      });
    }
    const params = { errorMap: ctx.common.contextualErrorMap };
    const fn = ctx.data;
    if (this._def.returns instanceof ZodPromise) {
      const me = this;
      return OK(async function(...args) {
        const error2 = new ZodError([]);
        const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {
          error2.addIssue(makeArgsIssue(args, e));
          throw error2;
        });
        const result = await Reflect.apply(fn, this, parsedArgs);
        const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e) => {
          error2.addIssue(makeReturnsIssue(result, e));
          throw error2;
        });
        return parsedReturns;
      });
    } else {
      const me = this;
      return OK(function(...args) {
        const parsedArgs = me._def.args.safeParse(args, params);
        if (!parsedArgs.success) {
          throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
        }
        const result = Reflect.apply(fn, this, parsedArgs.data);
        const parsedReturns = me._def.returns.safeParse(result, params);
        if (!parsedReturns.success) {
          throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
        }
        return parsedReturns.data;
      });
    }
  }
  parameters() {
    return this._def.args;
  }
  returnType() {
    return this._def.returns;
  }
  args(...items) {
    return new ZodFunction({
      ...this._def,
      args: ZodTuple.create(items).rest(ZodUnknown.create())
    });
  }
  returns(returnType) {
    return new ZodFunction({
      ...this._def,
      returns: returnType
    });
  }
  implement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  strictImplement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  static create(args, returns, params) {
    return new ZodFunction({
      args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
      returns: returns || ZodUnknown.create(),
      typeName: ZodFirstPartyTypeKind.ZodFunction,
      ...processCreateParams(params)
    });
  }
}
class ZodLazy extends ZodType {
  get schema() {
    return this._def.getter();
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const lazySchema = this._def.getter();
    return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
  }
}
ZodLazy.create = (getter, params) => {
  return new ZodLazy({
    getter,
    typeName: ZodFirstPartyTypeKind.ZodLazy,
    ...processCreateParams(params)
  });
};
class ZodLiteral extends ZodType {
  _parse(input) {
    if (input.data !== this._def.value) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_literal,
        expected: this._def.value
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
  get value() {
    return this._def.value;
  }
}
ZodLiteral.create = (value, params) => {
  return new ZodLiteral({
    value,
    typeName: ZodFirstPartyTypeKind.ZodLiteral,
    ...processCreateParams(params)
  });
};
function createZodEnum(values, params) {
  return new ZodEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodEnum,
    ...processCreateParams(params)
  });
}
class ZodEnum extends ZodType {
  _parse(input) {
    if (typeof input.data !== "string") {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        expected: util$2.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (this._def.values.indexOf(input.data) === -1) {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Values() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  extract(values) {
    return ZodEnum.create(values);
  }
  exclude(values) {
    return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)));
  }
}
ZodEnum.create = createZodEnum;
class ZodNativeEnum extends ZodType {
  _parse(input) {
    const nativeEnumValues = util$2.getValidEnumValues(this._def.values);
    const ctx = this._getOrReturnCtx(input);
    if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
      const expectedValues = util$2.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        expected: util$2.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (nativeEnumValues.indexOf(input.data) === -1) {
      const expectedValues = util$2.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get enum() {
    return this._def.values;
  }
}
ZodNativeEnum.create = (values, params) => {
  return new ZodNativeEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
    ...processCreateParams(params)
  });
};
class ZodPromise extends ZodType {
  unwrap() {
    return this._def.type;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.promise,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
    return OK(promisified.then((data) => {
      return this._def.type.parseAsync(data, {
        path: ctx.path,
        errorMap: ctx.common.contextualErrorMap
      });
    }));
  }
}
ZodPromise.create = (schema, params) => {
  return new ZodPromise({
    type: schema,
    typeName: ZodFirstPartyTypeKind.ZodPromise,
    ...processCreateParams(params)
  });
};
class ZodEffects extends ZodType {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const effect = this._def.effect || null;
    const checkCtx = {
      addIssue: (arg) => {
        addIssueToContext(ctx, arg);
        if (arg.fatal) {
          status.abort();
        } else {
          status.dirty();
        }
      },
      get path() {
        return ctx.path;
      }
    };
    checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
    if (effect.type === "preprocess") {
      const processed = effect.transform(ctx.data, checkCtx);
      if (ctx.common.issues.length) {
        return {
          status: "dirty",
          value: ctx.data
        };
      }
      if (ctx.common.async) {
        return Promise.resolve(processed).then((processed2) => {
          return this._def.schema._parseAsync({
            data: processed2,
            path: ctx.path,
            parent: ctx
          });
        });
      } else {
        return this._def.schema._parseSync({
          data: processed,
          path: ctx.path,
          parent: ctx
        });
      }
    }
    if (effect.type === "refinement") {
      const executeRefinement = (acc) => {
        const result = effect.refinement(acc, checkCtx);
        if (ctx.common.async) {
          return Promise.resolve(result);
        }
        if (result instanceof Promise) {
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        }
        return acc;
      };
      if (ctx.common.async === false) {
        const inner = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inner.status === "aborted")
          return INVALID;
        if (inner.status === "dirty")
          status.dirty();
        executeRefinement(inner.value);
        return { status: status.value, value: inner.value };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
          if (inner.status === "aborted")
            return INVALID;
          if (inner.status === "dirty")
            status.dirty();
          return executeRefinement(inner.value).then(() => {
            return { status: status.value, value: inner.value };
          });
        });
      }
    }
    if (effect.type === "transform") {
      if (ctx.common.async === false) {
        const base = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (!isValid(base))
          return base;
        const result = effect.transform(base.value, checkCtx);
        if (result instanceof Promise) {
          throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
        }
        return { status: status.value, value: result };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
          if (!isValid(base))
            return base;
          return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
        });
      }
    }
    util$2.assertNever(effect);
  }
}
ZodEffects.create = (schema, effect, params) => {
  return new ZodEffects({
    schema,
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    effect,
    ...processCreateParams(params)
  });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
  return new ZodEffects({
    schema,
    effect: { type: "preprocess", transform: preprocess },
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    ...processCreateParams(params)
  });
};
class ZodOptional extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.undefined) {
      return OK(void 0);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
}
ZodOptional.create = (type, params) => {
  return new ZodOptional({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodOptional,
    ...processCreateParams(params)
  });
};
class ZodNullable extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.null) {
      return OK(null);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
}
ZodNullable.create = (type, params) => {
  return new ZodNullable({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodNullable,
    ...processCreateParams(params)
  });
};
class ZodDefault extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    let data = ctx.data;
    if (ctx.parsedType === ZodParsedType.undefined) {
      data = this._def.defaultValue();
    }
    return this._def.innerType._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
}
ZodDefault.create = (type, params) => {
  return new ZodDefault({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodDefault,
    defaultValue: typeof params.default === "function" ? params.default : () => params.default,
    ...processCreateParams(params)
  });
};
class ZodCatch extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const newCtx = {
      ...ctx,
      common: {
        ...ctx.common,
        issues: []
      }
    };
    const result = this._def.innerType._parse({
      data: newCtx.data,
      path: newCtx.path,
      parent: {
        ...newCtx
      }
    });
    if (isAsync(result)) {
      return result.then((result2) => {
        return {
          status: "valid",
          value: result2.status === "valid" ? result2.value : this._def.catchValue({
            get error() {
              return new ZodError(newCtx.common.issues);
            },
            input: newCtx.data
          })
        };
      });
    } else {
      return {
        status: "valid",
        value: result.status === "valid" ? result.value : this._def.catchValue({
          get error() {
            return new ZodError(newCtx.common.issues);
          },
          input: newCtx.data
        })
      };
    }
  }
  removeCatch() {
    return this._def.innerType;
  }
}
ZodCatch.create = (type, params) => {
  return new ZodCatch({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodCatch,
    catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
    ...processCreateParams(params)
  });
};
class ZodNaN extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.nan) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.nan,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
}
ZodNaN.create = (params) => {
  return new ZodNaN({
    typeName: ZodFirstPartyTypeKind.ZodNaN,
    ...processCreateParams(params)
  });
};
const BRAND = Symbol("zod_brand");
class ZodBranded extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const data = ctx.data;
    return this._def.type._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  unwrap() {
    return this._def.type;
  }
}
class ZodPipeline extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.common.async) {
      const handleAsync = async () => {
        const inResult = await this._def.in._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inResult.status === "aborted")
          return INVALID;
        if (inResult.status === "dirty") {
          status.dirty();
          return DIRTY(inResult.value);
        } else {
          return this._def.out._parseAsync({
            data: inResult.value,
            path: ctx.path,
            parent: ctx
          });
        }
      };
      return handleAsync();
    } else {
      const inResult = this._def.in._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
      if (inResult.status === "aborted")
        return INVALID;
      if (inResult.status === "dirty") {
        status.dirty();
        return {
          status: "dirty",
          value: inResult.value
        };
      } else {
        return this._def.out._parseSync({
          data: inResult.value,
          path: ctx.path,
          parent: ctx
        });
      }
    }
  }
  static create(a, b) {
    return new ZodPipeline({
      in: a,
      out: b,
      typeName: ZodFirstPartyTypeKind.ZodPipeline
    });
  }
}
class ZodReadonly extends ZodType {
  _parse(input) {
    const result = this._def.innerType._parse(input);
    if (isValid(result)) {
      result.value = Object.freeze(result.value);
    }
    return result;
  }
}
ZodReadonly.create = (type, params) => {
  return new ZodReadonly({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodReadonly,
    ...processCreateParams(params)
  });
};
const custom = (check, params = {}, fatal) => {
  if (check)
    return ZodAny.create().superRefine((data, ctx) => {
      var _a2, _b;
      if (!check(data)) {
        const p = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
        const _fatal = (_b = (_a2 = p.fatal) !== null && _a2 !== void 0 ? _a2 : fatal) !== null && _b !== void 0 ? _b : true;
        const p2 = typeof p === "string" ? { message: p } : p;
        ctx.addIssue({ code: "custom", ...p2, fatal: _fatal });
      }
    });
  return ZodAny.create();
};
const late = {
  object: ZodObject.lazycreate
};
var ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind2) {
  ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
  ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
  ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
  ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
  ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
  ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
  ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
  ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
  ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
  ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
  ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
  ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
  ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
  ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
  ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
  ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
  ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
  ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
  ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
  ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
  ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
  ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
  ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
  ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
  ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
  ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
  ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
  ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
  ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
  ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
  ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
  ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
  ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
  ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
  ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
  ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
const instanceOfType = (cls, params = {
  message: `Input not instance of ${cls.name}`
}) => custom((data) => data instanceof cls, params);
const stringType = ZodString.create;
const numberType = ZodNumber.create;
const nanType = ZodNaN.create;
const bigIntType = ZodBigInt.create;
const booleanType = ZodBoolean.create;
const dateType = ZodDate.create;
const symbolType = ZodSymbol.create;
const undefinedType = ZodUndefined.create;
const nullType = ZodNull.create;
const anyType = ZodAny.create;
const unknownType = ZodUnknown.create;
const neverType = ZodNever.create;
const voidType = ZodVoid.create;
const arrayType = ZodArray.create;
const objectType = ZodObject.create;
const strictObjectType = ZodObject.strictCreate;
const unionType = ZodUnion.create;
const discriminatedUnionType = ZodDiscriminatedUnion.create;
const intersectionType = ZodIntersection.create;
const tupleType = ZodTuple.create;
const recordType = ZodRecord.create;
const mapType = ZodMap.create;
const setType = ZodSet.create;
const functionType = ZodFunction.create;
const lazyType = ZodLazy.create;
const literalType = ZodLiteral.create;
const enumType = ZodEnum.create;
const nativeEnumType = ZodNativeEnum.create;
const promiseType = ZodPromise.create;
const effectsType = ZodEffects.create;
const optionalType = ZodOptional.create;
const nullableType = ZodNullable.create;
const preprocessType = ZodEffects.createWithPreprocess;
const pipelineType = ZodPipeline.create;
const ostring = () => stringType().optional();
const onumber = () => numberType().optional();
const oboolean = () => booleanType().optional();
const coerce = {
  string: (arg) => ZodString.create({ ...arg, coerce: true }),
  number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
  boolean: (arg) => ZodBoolean.create({
    ...arg,
    coerce: true
  }),
  bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
  date: (arg) => ZodDate.create({ ...arg, coerce: true })
};
const NEVER = INVALID;
var z = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  defaultErrorMap: errorMap,
  setErrorMap,
  getErrorMap,
  makeIssue,
  EMPTY_PATH,
  addIssueToContext,
  ParseStatus,
  INVALID,
  DIRTY,
  OK,
  isAborted,
  isDirty,
  isValid,
  isAsync,
  get util() {
    return util$2;
  },
  get objectUtil() {
    return objectUtil;
  },
  ZodParsedType,
  getParsedType,
  ZodType,
  ZodString,
  ZodNumber,
  ZodBigInt,
  ZodBoolean,
  ZodDate,
  ZodSymbol,
  ZodUndefined,
  ZodNull,
  ZodAny,
  ZodUnknown,
  ZodNever,
  ZodVoid,
  ZodArray,
  ZodObject,
  ZodUnion,
  ZodDiscriminatedUnion,
  ZodIntersection,
  ZodTuple,
  ZodRecord,
  ZodMap,
  ZodSet,
  ZodFunction,
  ZodLazy,
  ZodLiteral,
  ZodEnum,
  ZodNativeEnum,
  ZodPromise,
  ZodEffects,
  ZodTransformer: ZodEffects,
  ZodOptional,
  ZodNullable,
  ZodDefault,
  ZodCatch,
  ZodNaN,
  BRAND,
  ZodBranded,
  ZodPipeline,
  ZodReadonly,
  custom,
  Schema: ZodType,
  ZodSchema: ZodType,
  late,
  get ZodFirstPartyTypeKind() {
    return ZodFirstPartyTypeKind;
  },
  coerce,
  any: anyType,
  array: arrayType,
  bigint: bigIntType,
  boolean: booleanType,
  date: dateType,
  discriminatedUnion: discriminatedUnionType,
  effect: effectsType,
  "enum": enumType,
  "function": functionType,
  "instanceof": instanceOfType,
  intersection: intersectionType,
  lazy: lazyType,
  literal: literalType,
  map: mapType,
  nan: nanType,
  nativeEnum: nativeEnumType,
  never: neverType,
  "null": nullType,
  nullable: nullableType,
  number: numberType,
  object: objectType,
  oboolean,
  onumber,
  optional: optionalType,
  ostring,
  pipeline: pipelineType,
  preprocess: preprocessType,
  promise: promiseType,
  record: recordType,
  set: setType,
  strictObject: strictObjectType,
  string: stringType,
  symbol: symbolType,
  transformer: effectsType,
  tuple: tupleType,
  "undefined": undefinedType,
  union: unionType,
  unknown: unknownType,
  "void": voidType,
  NEVER,
  ZodIssueCode,
  quotelessJson,
  ZodError
});
const enumMap = (enumeration, obj) => {
  const validateKeysInEnum = (record) => Object.keys(record).every((key) => enumeration.safeParse(key).success);
  return recordType(obj).refine(validateKeysInEnum);
};
const NetworkNamesSchema = enumType(["development", "rococo", "shiden"]);
const NetworkPairTypeSchema = unionType([
  literalType("sr25519"),
  literalType("ed25519"),
  literalType("ecdsa"),
  literalType("ethereum")
]);
const NetworkConfigSchema = objectType({
  endpoint: stringType().url(),
  contract: objectType({
    address: stringType(),
    name: stringType()
  }),
  pairType: NetworkPairTypeSchema,
  ss58Format: numberType().positive().default(42)
});
const ProsopoNetworksSchema = enumMap(NetworkNamesSchema, NetworkConfigSchema.required({
  endpoint: true,
  pairType: true,
  ss58Format: true
}));
const pairTypeSr25519 = NetworkPairTypeSchema.parse("sr25519");
const getContractAddress = (defaultAddress) => {
  return "5H2S3U7x1i2fbrTBEfDkdLtHdwUDCv2GvpVokYiP7hpBqKQT";
};
const networks = () => {
  return {
    [NetworkNamesSchema.Values.development]: {
      endpoint: "ws://localhost:9944",
      contract: {
        name: "captcha",
        address: getContractAddress()
      },
      pairType: pairTypeSr25519,
      ss58Format: 42
    },
    [NetworkNamesSchema.Values.rococo]: {
      endpoint: "ws://localhost:9944",
      contract: {
        name: "captcha",
        address: getContractAddress()
      },
      pairType: pairTypeSr25519,
      ss58Format: 42
    },
    [NetworkNamesSchema.Values.shiden]: {
      endpoint: "ws://localhost:9944",
      contract: {
        address: getContractAddress(),
        name: "captcha"
      },
      pairType: pairTypeSr25519,
      ss58Format: 5
    }
  };
};
const LogLevel$1 = enumType(["trace", "debug", "info", "warn", "error", "fatal", "log"]);
enumType(["mongo", "mongoMemory"]);
const EnvironmentTypesSchema = enumType(["development", "staging", "production"]);
const DatabaseConfigSchema = recordType(EnvironmentTypesSchema, objectType({
  type: stringType(),
  endpoint: stringType(),
  dbname: stringType(),
  authSource: stringType()
}));
const BatchCommitConfigSchema = objectType({
  interval: numberType().positive().optional().default(300),
  maxBatchExtrinsicPercentage: numberType().positive().optional().default(59)
});
const ProsopoBaseConfigSchema = objectType({
  logLevel: LogLevel$1.optional().default(LogLevel$1.enum.info),
  defaultEnvironment: EnvironmentTypesSchema.default(EnvironmentTypesSchema.Values.production),
  defaultNetwork: NetworkNamesSchema.default(NetworkNamesSchema.Values.rococo),
  account: objectType({
    address: stringType().optional(),
    secret: stringType().optional(),
    password: stringType().optional()
  })
});
const ProsopoBasicConfigSchema = ProsopoBaseConfigSchema.merge(objectType({
  networks: ProsopoNetworksSchema.default(networks),
  database: DatabaseConfigSchema.optional()
}));
const ProsopoCaptchaCountConfigSchema = objectType({
  solved: objectType({
    count: numberType().positive()
  }).optional().default({ count: 1 }),
  unsolved: objectType({
    count: numberType().nonnegative()
  }).optional().default({ count: 1 })
});
const ProsopoImageServerConfigSchema = objectType({
  baseURL: stringType().url(),
  port: numberType().optional().default(9229)
});
const ProsopoCaptchaSolutionConfigSchema = objectType({
  requiredNumberOfSolutions: numberType().positive().min(2),
  solutionWinningPercentage: numberType().positive().max(100),
  captchaBlockRecency: numberType().positive().min(2)
});
const ProsopoClientConfigSchema = ProsopoBasicConfigSchema.merge(objectType({
  userAccountAddress: stringType().optional(),
  web2: booleanType().optional().default(true),
  solutionThreshold: numberType().positive().max(100).optional().default(80),
  dappName: stringType().optional().default("ProsopoClientDapp"),
  serverUrl: stringType().optional()
}));
ProsopoClientConfigSchema.merge(objectType({
  serverUrl: stringType().url()
}));
const AccountCreatorConfigSchema = objectType({
  area: objectType({
    width: numberType().positive(),
    height: numberType().positive()
  }),
  offsetParameter: numberType().positive(),
  multiplier: numberType().positive(),
  fontSizeFactor: numberType().positive(),
  maxShadowBlur: numberType().positive(),
  numberOfRounds: numberType().positive(),
  seed: numberType().positive()
});
const ThemeType = unionType([literalType("light"), literalType("dark")]);
const ProcaptchaConfigSchema = ProsopoClientConfigSchema.and(objectType({
  accountCreator: AccountCreatorConfigSchema.optional(),
  theme: ThemeType.optional(),
  challengeValidLength: numberType().positive().optional(),
  devOnlyWatchEvents: booleanType().optional()
}));
ProsopoBasicConfigSchema.merge(objectType({
  captchas: ProsopoCaptchaCountConfigSchema.optional().default({
    solved: { count: 1 },
    unsolved: { count: 0 }
  }),
  captchaSolutions: ProsopoCaptchaSolutionConfigSchema.optional().default({
    requiredNumberOfSolutions: 3,
    solutionWinningPercentage: 80,
    captchaBlockRecency: 10
  }),
  batchCommit: BatchCommitConfigSchema.optional().default({
    interval: 300,
    maxBatchExtrinsicPercentage: 59
  }),
  server: ProsopoImageServerConfigSchema,
  mongoAtlasUri: stringType().optional()
}));
function evaluateThis$5(fn) {
  return fn("return this");
}
const xglobal$5 = typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : evaluateThis$5(Function);
function extractGlobal$3(name, fallback) {
  return typeof xglobal$5[name] === "undefined" ? fallback : xglobal$5[name];
}
let TextDecoder$1 = class TextDecoder {
  constructor(encoding) {
    __publicField(this, "__encoding");
    this.__encoding = encoding;
  }
  decode(value) {
    let result = "";
    for (let i = 0, count = value.length; i < count; i++) {
      result += String.fromCharCode(value[i]);
    }
    return result;
  }
};
const packageInfo$3 = { name: "@polkadot/x-textdecoder", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };
const TextDecoder2 = /* @__PURE__ */ extractGlobal$3("TextDecoder", TextDecoder$1);
function evaluateThis$4(fn) {
  return fn("return this");
}
const xglobal$4 = typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : evaluateThis$4(Function);
function extractGlobal$2(name, fallback) {
  return typeof xglobal$4[name] === "undefined" ? fallback : xglobal$4[name];
}
let TextEncoder$2 = class TextEncoder2 {
  encode(value) {
    const count = value.length;
    const u8a = new Uint8Array(count);
    for (let i = 0; i < count; i++) {
      u8a[i] = value.charCodeAt(i);
    }
    return u8a;
  }
};
const packageInfo$2 = { name: "@polkadot/x-textencoder", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };
const TextEncoder$1 = /* @__PURE__ */ extractGlobal$2("TextEncoder", TextEncoder$2);
const others = [packageInfo$3, packageInfo$2];
const packageInfo$1 = { name: "@polkadot/util", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.1" };
function evaluateThis$3(fn) {
  return fn("return this");
}
const xglobal$3 = typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : evaluateThis$3(Function);
function extractGlobal$1(name, fallback) {
  return typeof xglobal$3[name] === "undefined" ? fallback : xglobal$3[name];
}
function isFunction$1(value) {
  return typeof value === "function";
}
const POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG = "POLKADOTJS_DISABLE_ESM_CJS_WARNING";
function getEntry(name) {
  const _global = xglobal$3;
  if (!_global.__polkadotjs) {
    _global.__polkadotjs = {};
  }
  if (!_global.__polkadotjs[name]) {
    _global.__polkadotjs[name] = [];
  }
  return _global.__polkadotjs[name];
}
function getPath$2(infoPath, pathOrFn) {
  if (infoPath) {
    return infoPath;
  } else if (isFunction$1(pathOrFn)) {
    try {
      return pathOrFn() || "";
    } catch {
      return "";
    }
  }
  return pathOrFn || "";
}
function detectPackage({ name, path: path2, type, version: version2 }, pathOrFn, deps = []) {
  var _a2, _b;
  if (!name.startsWith("@polkadot")) {
    throw new Error(`Invalid package descriptor ${name}`);
  }
  const entry = getEntry(name);
  entry.push({ path: getPath$2(path2, pathOrFn), type, version: version2 });
  const entriesSameVersion = entry.every((e) => e.version === version2);
  const esmCjsWarningDisabled = ((_b = (_a2 = xglobal$3.process) == null ? void 0 : _a2.env) == null ? void 0 : _b[POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG]) === "1";
  const multipleEntries = entry.length !== 1;
  const disableWarnings = esmCjsWarningDisabled && entriesSameVersion;
  if (multipleEntries && !disableWarnings)
    ;
  else {
    deps.filter((d) => d && d.version !== version2);
  }
}
detectPackage(packageInfo$1, null, others);
function arrayChunk(array, chunkSize) {
  const outputSize = Math.ceil(array.length / chunkSize);
  if (outputSize === 1) {
    return [array];
  }
  const output3 = Array(outputSize);
  for (let i = 0; i < outputSize; i++) {
    const offset = i * chunkSize;
    output3[i] = array.slice(offset, offset + chunkSize);
  }
  return output3;
}
function arrayFilter(array, allowNulls = true) {
  return array.filter((v) => v !== void 0 && (allowNulls || v !== null));
}
function arrayFlatten(arrays) {
  const num = arrays.length;
  if (num === 0) {
    return [];
  } else if (num === 1) {
    return arrays[0];
  }
  let size = 0;
  for (let i2 = 0; i2 < num; i2++) {
    size += arrays[i2].length;
  }
  const output3 = new Array(size);
  let i = -1;
  for (let j = 0; j < num; j++) {
    const a = arrays[j];
    for (let e = 0, count = a.length; e < count; e++) {
      output3[++i] = a[e];
    }
  }
  return output3;
}
function arrayRange(size, startAt = 0) {
  if (size <= 0) {
    throw new Error("Expected non-zero, positive number as a range size");
  }
  const result = new Array(size);
  for (let i = 0; i < size; i++) {
    result[i] = i + startAt;
  }
  return result;
}
function arrayShuffle(input) {
  const result = input.slice();
  let curr = result.length;
  if (curr === 1) {
    return result;
  }
  while (curr !== 0) {
    const rand = ~~(Math.random() * curr);
    curr--;
    [result[curr], result[rand]] = [result[rand], result[curr]];
  }
  return result;
}
function arrayUnzip(entries) {
  const count = entries.length;
  const keys = new Array(count);
  const values = new Array(count);
  for (let i = 0; i < count; i++) {
    [keys[i], values[i]] = entries[i];
  }
  return [keys, values];
}
function arrayZip(keys, values) {
  const count = keys.length;
  const result = new Array(count);
  for (let i = 0; i < count; i++) {
    result[i] = [keys[i], values[i]];
  }
  return result;
}
function assert(condition, message) {
  if (!condition) {
    throw new Error(isFunction$1(message) ? message() : message);
  }
}
function assertReturn(value, message) {
  assert(value !== void 0 && value !== null, message);
  return value;
}
function assertUnreachable(x) {
  throw new Error(`This codepath should be unreachable. Unhandled input: ${x}`);
}
function createCmp(cmp) {
  return (...items) => {
    const count = items.length;
    if (count === 0) {
      throw new Error("Must provide one or more arguments");
    }
    let result = items[0];
    for (let i = 1; i < count; i++) {
      if (cmp(items[i], result)) {
        result = items[i];
      }
    }
    return result;
  };
}
const nMax = /* @__PURE__ */ createCmp((a, b) => a > b);
const nMin = /* @__PURE__ */ createCmp((a, b) => a < b);
function invalidFallback$1() {
  return Number.NaN;
}
const BigInt$2 = /* @__PURE__ */ extractGlobal$1("BigInt", invalidFallback$1);
const _0n$7 = /* @__PURE__ */ BigInt$2(0);
const _1n$9 = /* @__PURE__ */ BigInt$2(1);
const _2n$7 = /* @__PURE__ */ BigInt$2(2);
const _3n$2 = /* @__PURE__ */ BigInt$2(3);
const _4n$2 = /* @__PURE__ */ BigInt$2(4);
const _5n$2 = /* @__PURE__ */ BigInt$2(5);
const _6n = /* @__PURE__ */ BigInt$2(6);
const _7n$2 = /* @__PURE__ */ BigInt$2(7);
const _8n$2 = /* @__PURE__ */ BigInt$2(8);
const _9n = /* @__PURE__ */ BigInt$2(9);
const _10n$1 = /* @__PURE__ */ BigInt$2(10);
const _100n = /* @__PURE__ */ BigInt$2(100);
const _1000n = /* @__PURE__ */ BigInt$2(1e3);
const _1Mn = /* @__PURE__ */ BigInt$2(1e6);
const _1Bn = /* @__PURE__ */ BigInt$2(1e9);
const _1Qn = _1Bn * _1Bn;
const _2pow53n = /* @__PURE__ */ BigInt$2(Number.MAX_SAFE_INTEGER);
const _sqrt2pow53n = /* @__PURE__ */ BigInt$2(94906265);
const U8_MAX = BigInt$2(256);
const U16_MAX = BigInt$2(256 * 256);
const U64_MAX = BigInt$2("0x10000000000000000");
function u8aToBigInt(value, { isLe = true, isNegative = false } = {}) {
  if (!isLe) {
    value = value.slice().reverse();
  }
  const count = value.length;
  if (isNegative && count && value[count - 1] & 128) {
    switch (count) {
      case 0:
        return BigInt$2(0);
      case 1:
        return BigInt$2((value[0] ^ 255) * -1 - 1);
      case 2:
        return BigInt$2((value[0] + (value[1] << 8) ^ 65535) * -1 - 1);
      case 4:
        return BigInt$2((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) * -1 - 1);
    }
    const dvI2 = new DataView(value.buffer, value.byteOffset);
    if (count === 8) {
      return dvI2.getBigInt64(0, true);
    }
    let result = BigInt$2(0);
    const mod2 = count % 2;
    for (let i = count - 2; i >= mod2; i -= 2) {
      result = result * U16_MAX + BigInt$2(dvI2.getUint16(i, true) ^ 65535);
    }
    if (mod2) {
      result = result * U8_MAX + BigInt$2(value[0] ^ 255);
    }
    return result * -_1n$9 - _1n$9;
  }
  switch (count) {
    case 0:
      return BigInt$2(0);
    case 1:
      return BigInt$2(value[0]);
    case 2:
      return BigInt$2(value[0] + (value[1] << 8));
    case 4:
      return BigInt$2(value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216);
  }
  const dvI = new DataView(value.buffer, value.byteOffset);
  switch (count) {
    case 8:
      return dvI.getBigUint64(0, true);
    case 16:
      return dvI.getBigUint64(8, true) * U64_MAX + dvI.getBigUint64(0, true);
    default: {
      let result = BigInt$2(0);
      const mod2 = count % 2;
      for (let i = count - 2; i >= mod2; i -= 2) {
        result = result * U16_MAX + BigInt$2(dvI.getUint16(i, true));
      }
      if (mod2) {
        result = result * U8_MAX + BigInt$2(value[0]);
      }
      return result;
    }
  }
}
const CHR$1 = "0123456789abcdef";
const U8$1 = new Uint8Array(256);
const U16$1 = new Uint8Array(256 * 256);
for (let i = 0, count = CHR$1.length; i < count; i++) {
  U8$1[CHR$1[i].charCodeAt(0) | 0] = i | 0;
  if (i > 9) {
    U8$1[CHR$1[i].toUpperCase().charCodeAt(0) | 0] = i | 0;
  }
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U16$1[s | j] = U8$1[i] << 4 | U8$1[j];
  }
}
function hexToU8a(value, bitLength = -1) {
  if (!value) {
    return new Uint8Array();
  }
  let s = value.startsWith("0x") ? 2 : 0;
  const decLength = Math.ceil((value.length - s) / 2);
  const endLength = Math.ceil(bitLength === -1 ? decLength : bitLength / 8);
  const result = new Uint8Array(endLength);
  const offset = endLength > decLength ? endLength - decLength : 0;
  for (let i = offset; i < endLength; i++, s += 2) {
    result[i] = U16$1[value.charCodeAt(s) << 8 | value.charCodeAt(s + 1)];
  }
  return result;
}
function hexToBigInt(value, { isLe = false, isNegative = false } = {}) {
  return !value || value === "0x" ? BigInt$2(0) : u8aToBigInt(hexToU8a(value), { isLe, isNegative });
}
var bn = { exports: {} };
(function(module2) {
  (function(module3, exports) {
    function assert2(val, msg) {
      if (!val)
        throw new Error(msg || "Assertion failed");
    }
    function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function() {
      };
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
    function BN2(number2, base, endian) {
      if (BN2.isBN(number2)) {
        return number2;
      }
      this.negative = 0;
      this.words = null;
      this.length = 0;
      this.red = null;
      if (number2 !== null) {
        if (base === "le" || base === "be") {
          endian = base;
          base = 10;
        }
        this._init(number2 || 0, base || 10, endian || "be");
      }
    }
    if (typeof module3 === "object") {
      module3.exports = BN2;
    } else {
      exports.BN = BN2;
    }
    BN2.BN = BN2;
    BN2.wordSize = 26;
    var Buffer2;
    try {
      if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
        Buffer2 = window.Buffer;
      } else {
        Buffer2 = require("buffer").Buffer;
      }
    } catch (e) {
    }
    BN2.isBN = function isBN(num) {
      if (num instanceof BN2) {
        return true;
      }
      return num !== null && typeof num === "object" && num.constructor.wordSize === BN2.wordSize && Array.isArray(num.words);
    };
    BN2.max = function max2(left, right) {
      if (left.cmp(right) > 0)
        return left;
      return right;
    };
    BN2.min = function min(left, right) {
      if (left.cmp(right) < 0)
        return left;
      return right;
    };
    BN2.prototype._init = function init3(number2, base, endian) {
      if (typeof number2 === "number") {
        return this._initNumber(number2, base, endian);
      }
      if (typeof number2 === "object") {
        return this._initArray(number2, base, endian);
      }
      if (base === "hex") {
        base = 16;
      }
      assert2(base === (base | 0) && base >= 2 && base <= 36);
      number2 = number2.toString().replace(/\s+/g, "");
      var start = 0;
      if (number2[0] === "-") {
        start++;
        this.negative = 1;
      }
      if (start < number2.length) {
        if (base === 16) {
          this._parseHex(number2, start, endian);
        } else {
          this._parseBase(number2, base, start);
          if (endian === "le") {
            this._initArray(this.toArray(), base, endian);
          }
        }
      }
    };
    BN2.prototype._initNumber = function _initNumber(number2, base, endian) {
      if (number2 < 0) {
        this.negative = 1;
        number2 = -number2;
      }
      if (number2 < 67108864) {
        this.words = [number2 & 67108863];
        this.length = 1;
      } else if (number2 < 4503599627370496) {
        this.words = [
          number2 & 67108863,
          number2 / 67108864 & 67108863
        ];
        this.length = 2;
      } else {
        assert2(number2 < 9007199254740992);
        this.words = [
          number2 & 67108863,
          number2 / 67108864 & 67108863,
          1
        ];
        this.length = 3;
      }
      if (endian !== "le")
        return;
      this._initArray(this.toArray(), base, endian);
    };
    BN2.prototype._initArray = function _initArray(number2, base, endian) {
      assert2(typeof number2.length === "number");
      if (number2.length <= 0) {
        this.words = [0];
        this.length = 1;
        return this;
      }
      this.length = Math.ceil(number2.length / 3);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }
      var j, w;
      var off = 0;
      if (endian === "be") {
        for (i = number2.length - 1, j = 0; i >= 0; i -= 3) {
          w = number2[i] | number2[i - 1] << 8 | number2[i - 2] << 16;
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] = w >>> 26 - off & 67108863;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === "le") {
        for (i = 0, j = 0; i < number2.length; i += 3) {
          w = number2[i] | number2[i + 1] << 8 | number2[i + 2] << 16;
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] = w >>> 26 - off & 67108863;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }
      return this._strip();
    };
    function parseHex4Bits(string, index) {
      var c = string.charCodeAt(index);
      if (c >= 48 && c <= 57) {
        return c - 48;
      } else if (c >= 65 && c <= 70) {
        return c - 55;
      } else if (c >= 97 && c <= 102) {
        return c - 87;
      } else {
        assert2(false, "Invalid character in " + string);
      }
    }
    function parseHexByte(string, lowerBound, index) {
      var r = parseHex4Bits(string, index);
      if (index - 1 >= lowerBound) {
        r |= parseHex4Bits(string, index - 1) << 4;
      }
      return r;
    }
    BN2.prototype._parseHex = function _parseHex(number2, start, endian) {
      this.length = Math.ceil((number2.length - start) / 6);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }
      var off = 0;
      var j = 0;
      var w;
      if (endian === "be") {
        for (i = number2.length - 1; i >= start; i -= 2) {
          w = parseHexByte(number2, start, i) << off;
          this.words[j] |= w & 67108863;
          if (off >= 18) {
            off -= 18;
            j += 1;
            this.words[j] |= w >>> 26;
          } else {
            off += 8;
          }
        }
      } else {
        var parseLength = number2.length - start;
        for (i = parseLength % 2 === 0 ? start + 1 : start; i < number2.length; i += 2) {
          w = parseHexByte(number2, start, i) << off;
          this.words[j] |= w & 67108863;
          if (off >= 18) {
            off -= 18;
            j += 1;
            this.words[j] |= w >>> 26;
          } else {
            off += 8;
          }
        }
      }
      this._strip();
    };
    function parseBase(str, start, end, mul) {
      var r = 0;
      var b = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;
        r *= mul;
        if (c >= 49) {
          b = c - 49 + 10;
        } else if (c >= 17) {
          b = c - 17 + 10;
        } else {
          b = c;
        }
        assert2(c >= 0 && b < mul, "Invalid character");
        r += b;
      }
      return r;
    }
    BN2.prototype._parseBase = function _parseBase(number2, base, start) {
      this.words = [0];
      this.length = 1;
      for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = limbPow / base | 0;
      var total = number2.length - start;
      var mod2 = total % limbLen;
      var end = Math.min(total, total - mod2) + start;
      var word = 0;
      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number2, i, i + limbLen, base);
        this.imuln(limbPow);
        if (this.words[0] + word < 67108864) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      if (mod2 !== 0) {
        var pow3 = 1;
        word = parseBase(number2, i, number2.length, base);
        for (i = 0; i < mod2; i++) {
          pow3 *= base;
        }
        this.imuln(pow3);
        if (this.words[0] + word < 67108864) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      this._strip();
    };
    BN2.prototype.copy = function copy2(dest) {
      dest.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        dest.words[i] = this.words[i];
      }
      dest.length = this.length;
      dest.negative = this.negative;
      dest.red = this.red;
    };
    function move(dest, src2) {
      dest.words = src2.words;
      dest.length = src2.length;
      dest.negative = src2.negative;
      dest.red = src2.red;
    }
    BN2.prototype._move = function _move(dest) {
      move(dest, this);
    };
    BN2.prototype.clone = function clone() {
      var r = new BN2(null);
      this.copy(r);
      return r;
    };
    BN2.prototype._expand = function _expand(size) {
      while (this.length < size) {
        this.words[this.length++] = 0;
      }
      return this;
    };
    BN2.prototype._strip = function strip() {
      while (this.length > 1 && this.words[this.length - 1] === 0) {
        this.length--;
      }
      return this._normSign();
    };
    BN2.prototype._normSign = function _normSign() {
      if (this.length === 1 && this.words[0] === 0) {
        this.negative = 0;
      }
      return this;
    };
    if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
      try {
        BN2.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
      } catch (e) {
        BN2.prototype.inspect = inspect;
      }
    } else {
      BN2.prototype.inspect = inspect;
    }
    function inspect() {
      return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    }
    var zeros = [
      "",
      "0",
      "00",
      "000",
      "0000",
      "00000",
      "000000",
      "0000000",
      "00000000",
      "000000000",
      "0000000000",
      "00000000000",
      "000000000000",
      "0000000000000",
      "00000000000000",
      "000000000000000",
      "0000000000000000",
      "00000000000000000",
      "000000000000000000",
      "0000000000000000000",
      "00000000000000000000",
      "000000000000000000000",
      "0000000000000000000000",
      "00000000000000000000000",
      "000000000000000000000000",
      "0000000000000000000000000"
    ];
    var groupSizes = [
      0,
      0,
      25,
      16,
      12,
      11,
      10,
      9,
      8,
      8,
      7,
      7,
      7,
      7,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5
    ];
    var groupBases = [
      0,
      0,
      33554432,
      43046721,
      16777216,
      48828125,
      60466176,
      40353607,
      16777216,
      43046721,
      1e7,
      19487171,
      35831808,
      62748517,
      7529536,
      11390625,
      16777216,
      24137569,
      34012224,
      47045881,
      64e6,
      4084101,
      5153632,
      6436343,
      7962624,
      9765625,
      11881376,
      14348907,
      17210368,
      20511149,
      243e5,
      28629151,
      33554432,
      39135393,
      45435424,
      52521875,
      60466176
    ];
    BN2.prototype.toString = function toString(base, padding2) {
      base = base || 10;
      padding2 = padding2 | 0 || 1;
      var out;
      if (base === 16 || base === "hex") {
        out = "";
        var off = 0;
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = ((w << off | carry) & 16777215).toString(16);
          carry = w >>> 24 - off & 16777215;
          off += 2;
          if (off >= 26) {
            off -= 26;
            i--;
          }
          if (carry !== 0 || i !== this.length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding2 !== 0) {
          out = "0" + out;
        }
        if (this.negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      if (base === (base | 0) && base >= 2 && base <= 36) {
        var groupSize = groupSizes[base];
        var groupBase = groupBases[base];
        out = "";
        var c = this.clone();
        c.negative = 0;
        while (!c.isZero()) {
          var r = c.modrn(groupBase).toString(base);
          c = c.idivn(groupBase);
          if (!c.isZero()) {
            out = zeros[groupSize - r.length] + r + out;
          } else {
            out = r + out;
          }
        }
        if (this.isZero()) {
          out = "0" + out;
        }
        while (out.length % padding2 !== 0) {
          out = "0" + out;
        }
        if (this.negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      assert2(false, "Base should be between 2 and 36");
    };
    BN2.prototype.toNumber = function toNumber() {
      var ret = this.words[0];
      if (this.length === 2) {
        ret += this.words[1] * 67108864;
      } else if (this.length === 3 && this.words[2] === 1) {
        ret += 4503599627370496 + this.words[1] * 67108864;
      } else if (this.length > 2) {
        assert2(false, "Number can only safely store up to 53 bits");
      }
      return this.negative !== 0 ? -ret : ret;
    };
    BN2.prototype.toJSON = function toJSON() {
      return this.toString(16, 2);
    };
    if (Buffer2) {
      BN2.prototype.toBuffer = function toBuffer(endian, length2) {
        return this.toArrayLike(Buffer2, endian, length2);
      };
    }
    BN2.prototype.toArray = function toArray2(endian, length2) {
      return this.toArrayLike(Array, endian, length2);
    };
    var allocate = function allocate2(ArrayType, size) {
      if (ArrayType.allocUnsafe) {
        return ArrayType.allocUnsafe(size);
      }
      return new ArrayType(size);
    };
    BN2.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length2) {
      this._strip();
      var byteLength = this.byteLength();
      var reqLength = length2 || Math.max(1, byteLength);
      assert2(byteLength <= reqLength, "byte array longer than desired length");
      assert2(reqLength > 0, "Requested array length <= 0");
      var res = allocate(ArrayType, reqLength);
      var postfix = endian === "le" ? "LE" : "BE";
      this["_toArrayLike" + postfix](res, byteLength);
      return res;
    };
    BN2.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
      var position2 = 0;
      var carry = 0;
      for (var i = 0, shift = 0; i < this.length; i++) {
        var word = this.words[i] << shift | carry;
        res[position2++] = word & 255;
        if (position2 < res.length) {
          res[position2++] = word >> 8 & 255;
        }
        if (position2 < res.length) {
          res[position2++] = word >> 16 & 255;
        }
        if (shift === 6) {
          if (position2 < res.length) {
            res[position2++] = word >> 24 & 255;
          }
          carry = 0;
          shift = 0;
        } else {
          carry = word >>> 24;
          shift += 2;
        }
      }
      if (position2 < res.length) {
        res[position2++] = carry;
        while (position2 < res.length) {
          res[position2++] = 0;
        }
      }
    };
    BN2.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
      var position2 = res.length - 1;
      var carry = 0;
      for (var i = 0, shift = 0; i < this.length; i++) {
        var word = this.words[i] << shift | carry;
        res[position2--] = word & 255;
        if (position2 >= 0) {
          res[position2--] = word >> 8 & 255;
        }
        if (position2 >= 0) {
          res[position2--] = word >> 16 & 255;
        }
        if (shift === 6) {
          if (position2 >= 0) {
            res[position2--] = word >> 24 & 255;
          }
          carry = 0;
          shift = 0;
        } else {
          carry = word >>> 24;
          shift += 2;
        }
      }
      if (position2 >= 0) {
        res[position2--] = carry;
        while (position2 >= 0) {
          res[position2--] = 0;
        }
      }
    };
    if (Math.clz32) {
      BN2.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN2.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 4096) {
          r += 13;
          t >>>= 13;
        }
        if (t >= 64) {
          r += 7;
          t >>>= 7;
        }
        if (t >= 8) {
          r += 4;
          t >>>= 4;
        }
        if (t >= 2) {
          r += 2;
          t >>>= 2;
        }
        return r + t;
      };
    }
    BN2.prototype._zeroBits = function _zeroBits(w) {
      if (w === 0)
        return 26;
      var t = w;
      var r = 0;
      if ((t & 8191) === 0) {
        r += 13;
        t >>>= 13;
      }
      if ((t & 127) === 0) {
        r += 7;
        t >>>= 7;
      }
      if ((t & 15) === 0) {
        r += 4;
        t >>>= 4;
      }
      if ((t & 3) === 0) {
        r += 2;
        t >>>= 2;
      }
      if ((t & 1) === 0) {
        r++;
      }
      return r;
    };
    BN2.prototype.bitLength = function bitLength() {
      var w = this.words[this.length - 1];
      var hi = this._countBits(w);
      return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
      var w = new Array(num.bitLength());
      for (var bit = 0; bit < w.length; bit++) {
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        w[bit] = num.words[off] >>> wbit & 1;
      }
      return w;
    }
    BN2.prototype.zeroBits = function zeroBits() {
      if (this.isZero())
        return 0;
      var r = 0;
      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);
        r += b;
        if (b !== 26)
          break;
      }
      return r;
    };
    BN2.prototype.byteLength = function byteLength() {
      return Math.ceil(this.bitLength() / 8);
    };
    BN2.prototype.toTwos = function toTwos(width) {
      if (this.negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };
    BN2.prototype.fromTwos = function fromTwos(width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };
    BN2.prototype.isNeg = function isNeg() {
      return this.negative !== 0;
    };
    BN2.prototype.neg = function neg() {
      return this.clone().ineg();
    };
    BN2.prototype.ineg = function ineg() {
      if (!this.isZero()) {
        this.negative ^= 1;
      }
      return this;
    };
    BN2.prototype.iuor = function iuor(num) {
      while (this.length < num.length) {
        this.words[this.length++] = 0;
      }
      for (var i = 0; i < num.length; i++) {
        this.words[i] = this.words[i] | num.words[i];
      }
      return this._strip();
    };
    BN2.prototype.ior = function ior(num) {
      assert2((this.negative | num.negative) === 0);
      return this.iuor(num);
    };
    BN2.prototype.or = function or(num) {
      if (this.length > num.length)
        return this.clone().ior(num);
      return num.clone().ior(this);
    };
    BN2.prototype.uor = function uor(num) {
      if (this.length > num.length)
        return this.clone().iuor(num);
      return num.clone().iuor(this);
    };
    BN2.prototype.iuand = function iuand(num) {
      var b;
      if (this.length > num.length) {
        b = num;
      } else {
        b = this;
      }
      for (var i = 0; i < b.length; i++) {
        this.words[i] = this.words[i] & num.words[i];
      }
      this.length = b.length;
      return this._strip();
    };
    BN2.prototype.iand = function iand(num) {
      assert2((this.negative | num.negative) === 0);
      return this.iuand(num);
    };
    BN2.prototype.and = function and(num) {
      if (this.length > num.length)
        return this.clone().iand(num);
      return num.clone().iand(this);
    };
    BN2.prototype.uand = function uand(num) {
      if (this.length > num.length)
        return this.clone().iuand(num);
      return num.clone().iuand(this);
    };
    BN2.prototype.iuxor = function iuxor(num) {
      var a;
      var b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }
      for (var i = 0; i < b.length; i++) {
        this.words[i] = a.words[i] ^ b.words[i];
      }
      if (this !== a) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }
      this.length = a.length;
      return this._strip();
    };
    BN2.prototype.ixor = function ixor(num) {
      assert2((this.negative | num.negative) === 0);
      return this.iuxor(num);
    };
    BN2.prototype.xor = function xor(num) {
      if (this.length > num.length)
        return this.clone().ixor(num);
      return num.clone().ixor(this);
    };
    BN2.prototype.uxor = function uxor(num) {
      if (this.length > num.length)
        return this.clone().iuxor(num);
      return num.clone().iuxor(this);
    };
    BN2.prototype.inotn = function inotn(width) {
      assert2(typeof width === "number" && width >= 0);
      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;
      this._expand(bytesNeeded);
      if (bitsLeft > 0) {
        bytesNeeded--;
      }
      for (var i = 0; i < bytesNeeded; i++) {
        this.words[i] = ~this.words[i] & 67108863;
      }
      if (bitsLeft > 0) {
        this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
      }
      return this._strip();
    };
    BN2.prototype.notn = function notn(width) {
      return this.clone().inotn(width);
    };
    BN2.prototype.setn = function setn(bit, val) {
      assert2(typeof bit === "number" && bit >= 0);
      var off = bit / 26 | 0;
      var wbit = bit % 26;
      this._expand(off + 1);
      if (val) {
        this.words[off] = this.words[off] | 1 << wbit;
      } else {
        this.words[off] = this.words[off] & ~(1 << wbit);
      }
      return this._strip();
    };
    BN2.prototype.iadd = function iadd(num) {
      var r;
      if (this.negative !== 0 && num.negative === 0) {
        this.negative = 0;
        r = this.isub(num);
        this.negative ^= 1;
        return this._normSign();
      } else if (this.negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r = this.isub(num);
        num.negative = 1;
        return r._normSign();
      }
      var a, b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }
      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
        this.words[i] = r & 67108863;
        carry = r >>> 26;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        this.words[i] = r & 67108863;
        carry = r >>> 26;
      }
      this.length = a.length;
      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++;
      } else if (a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }
      return this;
    };
    BN2.prototype.add = function add2(num) {
      var res;
      if (num.negative !== 0 && this.negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && this.negative !== 0) {
        this.negative = 0;
        res = num.sub(this);
        this.negative = 1;
        return res;
      }
      if (this.length > num.length)
        return this.clone().iadd(num);
      return num.clone().iadd(this);
    };
    BN2.prototype.isub = function isub(num) {
      if (num.negative !== 0) {
        num.negative = 0;
        var r = this.iadd(num);
        num.negative = 1;
        return r._normSign();
      } else if (this.negative !== 0) {
        this.negative = 0;
        this.iadd(num);
        this.negative = 1;
        return this._normSign();
      }
      var cmp = this.cmp(num);
      if (cmp === 0) {
        this.negative = 0;
        this.length = 1;
        this.words[0] = 0;
        return this;
      }
      var a, b;
      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }
      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 67108863;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 67108863;
      }
      if (carry === 0 && i < a.length && a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }
      this.length = Math.max(this.length, i);
      if (a !== this) {
        this.negative = 1;
      }
      return this._strip();
    };
    BN2.prototype.sub = function sub(num) {
      return this.clone().isub(num);
    };
    function smallMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      var len = self2.length + num.length | 0;
      out.length = len;
      len = len - 1 | 0;
      var a = self2.words[0] | 0;
      var b = num.words[0] | 0;
      var r = a * b;
      var lo = r & 67108863;
      var carry = r / 67108864 | 0;
      out.words[0] = lo;
      for (var k = 1; k < len; k++) {
        var ncarry = carry >>> 26;
        var rword = carry & 67108863;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
          var i = k - j | 0;
          a = self2.words[i] | 0;
          b = num.words[j] | 0;
          r = a * b + rword;
          ncarry += r / 67108864 | 0;
          rword = r & 67108863;
        }
        out.words[k] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k] = carry | 0;
      } else {
        out.length--;
      }
      return out._strip();
    }
    var comb10MulTo = function comb10MulTo2(self2, num, out) {
      var a = self2.words;
      var b = num.words;
      var o = out.words;
      var c = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a[0] | 0;
      var al0 = a0 & 8191;
      var ah0 = a0 >>> 13;
      var a1 = a[1] | 0;
      var al1 = a1 & 8191;
      var ah1 = a1 >>> 13;
      var a2 = a[2] | 0;
      var al2 = a2 & 8191;
      var ah2 = a2 >>> 13;
      var a3 = a[3] | 0;
      var al3 = a3 & 8191;
      var ah3 = a3 >>> 13;
      var a4 = a[4] | 0;
      var al4 = a4 & 8191;
      var ah4 = a4 >>> 13;
      var a5 = a[5] | 0;
      var al5 = a5 & 8191;
      var ah5 = a5 >>> 13;
      var a6 = a[6] | 0;
      var al6 = a6 & 8191;
      var ah6 = a6 >>> 13;
      var a7 = a[7] | 0;
      var al7 = a7 & 8191;
      var ah7 = a7 >>> 13;
      var a8 = a[8] | 0;
      var al8 = a8 & 8191;
      var ah8 = a8 >>> 13;
      var a9 = a[9] | 0;
      var al9 = a9 & 8191;
      var ah9 = a9 >>> 13;
      var b0 = b[0] | 0;
      var bl0 = b0 & 8191;
      var bh0 = b0 >>> 13;
      var b1 = b[1] | 0;
      var bl1 = b1 & 8191;
      var bh1 = b1 >>> 13;
      var b2 = b[2] | 0;
      var bl2 = b2 & 8191;
      var bh2 = b2 >>> 13;
      var b3 = b[3] | 0;
      var bl3 = b3 & 8191;
      var bh3 = b3 >>> 13;
      var b4 = b[4] | 0;
      var bl4 = b4 & 8191;
      var bh4 = b4 >>> 13;
      var b5 = b[5] | 0;
      var bl5 = b5 & 8191;
      var bh5 = b5 >>> 13;
      var b6 = b[6] | 0;
      var bl6 = b6 & 8191;
      var bh6 = b6 >>> 13;
      var b7 = b[7] | 0;
      var bl7 = b7 & 8191;
      var bh7 = b7 >>> 13;
      var b8 = b[8] | 0;
      var bl8 = b8 & 8191;
      var bh8 = b8 >>> 13;
      var b9 = b[9] | 0;
      var bl9 = b9 & 8191;
      var bh9 = b9 >>> 13;
      out.negative = self2.negative ^ num.negative;
      out.length = 19;
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = mid + Math.imul(ah0, bl0) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
      w0 &= 67108863;
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = mid + Math.imul(ah1, bl0) | 0;
      hi = Math.imul(ah1, bh0);
      lo = lo + Math.imul(al0, bl1) | 0;
      mid = mid + Math.imul(al0, bh1) | 0;
      mid = mid + Math.imul(ah0, bl1) | 0;
      hi = hi + Math.imul(ah0, bh1) | 0;
      var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
      w1 &= 67108863;
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = mid + Math.imul(ah2, bl0) | 0;
      hi = Math.imul(ah2, bh0);
      lo = lo + Math.imul(al1, bl1) | 0;
      mid = mid + Math.imul(al1, bh1) | 0;
      mid = mid + Math.imul(ah1, bl1) | 0;
      hi = hi + Math.imul(ah1, bh1) | 0;
      lo = lo + Math.imul(al0, bl2) | 0;
      mid = mid + Math.imul(al0, bh2) | 0;
      mid = mid + Math.imul(ah0, bl2) | 0;
      hi = hi + Math.imul(ah0, bh2) | 0;
      var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
      w2 &= 67108863;
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = mid + Math.imul(ah3, bl0) | 0;
      hi = Math.imul(ah3, bh0);
      lo = lo + Math.imul(al2, bl1) | 0;
      mid = mid + Math.imul(al2, bh1) | 0;
      mid = mid + Math.imul(ah2, bl1) | 0;
      hi = hi + Math.imul(ah2, bh1) | 0;
      lo = lo + Math.imul(al1, bl2) | 0;
      mid = mid + Math.imul(al1, bh2) | 0;
      mid = mid + Math.imul(ah1, bl2) | 0;
      hi = hi + Math.imul(ah1, bh2) | 0;
      lo = lo + Math.imul(al0, bl3) | 0;
      mid = mid + Math.imul(al0, bh3) | 0;
      mid = mid + Math.imul(ah0, bl3) | 0;
      hi = hi + Math.imul(ah0, bh3) | 0;
      var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
      w3 &= 67108863;
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = mid + Math.imul(ah4, bl0) | 0;
      hi = Math.imul(ah4, bh0);
      lo = lo + Math.imul(al3, bl1) | 0;
      mid = mid + Math.imul(al3, bh1) | 0;
      mid = mid + Math.imul(ah3, bl1) | 0;
      hi = hi + Math.imul(ah3, bh1) | 0;
      lo = lo + Math.imul(al2, bl2) | 0;
      mid = mid + Math.imul(al2, bh2) | 0;
      mid = mid + Math.imul(ah2, bl2) | 0;
      hi = hi + Math.imul(ah2, bh2) | 0;
      lo = lo + Math.imul(al1, bl3) | 0;
      mid = mid + Math.imul(al1, bh3) | 0;
      mid = mid + Math.imul(ah1, bl3) | 0;
      hi = hi + Math.imul(ah1, bh3) | 0;
      lo = lo + Math.imul(al0, bl4) | 0;
      mid = mid + Math.imul(al0, bh4) | 0;
      mid = mid + Math.imul(ah0, bl4) | 0;
      hi = hi + Math.imul(ah0, bh4) | 0;
      var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
      w4 &= 67108863;
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = mid + Math.imul(ah5, bl0) | 0;
      hi = Math.imul(ah5, bh0);
      lo = lo + Math.imul(al4, bl1) | 0;
      mid = mid + Math.imul(al4, bh1) | 0;
      mid = mid + Math.imul(ah4, bl1) | 0;
      hi = hi + Math.imul(ah4, bh1) | 0;
      lo = lo + Math.imul(al3, bl2) | 0;
      mid = mid + Math.imul(al3, bh2) | 0;
      mid = mid + Math.imul(ah3, bl2) | 0;
      hi = hi + Math.imul(ah3, bh2) | 0;
      lo = lo + Math.imul(al2, bl3) | 0;
      mid = mid + Math.imul(al2, bh3) | 0;
      mid = mid + Math.imul(ah2, bl3) | 0;
      hi = hi + Math.imul(ah2, bh3) | 0;
      lo = lo + Math.imul(al1, bl4) | 0;
      mid = mid + Math.imul(al1, bh4) | 0;
      mid = mid + Math.imul(ah1, bl4) | 0;
      hi = hi + Math.imul(ah1, bh4) | 0;
      lo = lo + Math.imul(al0, bl5) | 0;
      mid = mid + Math.imul(al0, bh5) | 0;
      mid = mid + Math.imul(ah0, bl5) | 0;
      hi = hi + Math.imul(ah0, bh5) | 0;
      var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
      w5 &= 67108863;
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = mid + Math.imul(ah6, bl0) | 0;
      hi = Math.imul(ah6, bh0);
      lo = lo + Math.imul(al5, bl1) | 0;
      mid = mid + Math.imul(al5, bh1) | 0;
      mid = mid + Math.imul(ah5, bl1) | 0;
      hi = hi + Math.imul(ah5, bh1) | 0;
      lo = lo + Math.imul(al4, bl2) | 0;
      mid = mid + Math.imul(al4, bh2) | 0;
      mid = mid + Math.imul(ah4, bl2) | 0;
      hi = hi + Math.imul(ah4, bh2) | 0;
      lo = lo + Math.imul(al3, bl3) | 0;
      mid = mid + Math.imul(al3, bh3) | 0;
      mid = mid + Math.imul(ah3, bl3) | 0;
      hi = hi + Math.imul(ah3, bh3) | 0;
      lo = lo + Math.imul(al2, bl4) | 0;
      mid = mid + Math.imul(al2, bh4) | 0;
      mid = mid + Math.imul(ah2, bl4) | 0;
      hi = hi + Math.imul(ah2, bh4) | 0;
      lo = lo + Math.imul(al1, bl5) | 0;
      mid = mid + Math.imul(al1, bh5) | 0;
      mid = mid + Math.imul(ah1, bl5) | 0;
      hi = hi + Math.imul(ah1, bh5) | 0;
      lo = lo + Math.imul(al0, bl6) | 0;
      mid = mid + Math.imul(al0, bh6) | 0;
      mid = mid + Math.imul(ah0, bl6) | 0;
      hi = hi + Math.imul(ah0, bh6) | 0;
      var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
      w6 &= 67108863;
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = mid + Math.imul(ah7, bl0) | 0;
      hi = Math.imul(ah7, bh0);
      lo = lo + Math.imul(al6, bl1) | 0;
      mid = mid + Math.imul(al6, bh1) | 0;
      mid = mid + Math.imul(ah6, bl1) | 0;
      hi = hi + Math.imul(ah6, bh1) | 0;
      lo = lo + Math.imul(al5, bl2) | 0;
      mid = mid + Math.imul(al5, bh2) | 0;
      mid = mid + Math.imul(ah5, bl2) | 0;
      hi = hi + Math.imul(ah5, bh2) | 0;
      lo = lo + Math.imul(al4, bl3) | 0;
      mid = mid + Math.imul(al4, bh3) | 0;
      mid = mid + Math.imul(ah4, bl3) | 0;
      hi = hi + Math.imul(ah4, bh3) | 0;
      lo = lo + Math.imul(al3, bl4) | 0;
      mid = mid + Math.imul(al3, bh4) | 0;
      mid = mid + Math.imul(ah3, bl4) | 0;
      hi = hi + Math.imul(ah3, bh4) | 0;
      lo = lo + Math.imul(al2, bl5) | 0;
      mid = mid + Math.imul(al2, bh5) | 0;
      mid = mid + Math.imul(ah2, bl5) | 0;
      hi = hi + Math.imul(ah2, bh5) | 0;
      lo = lo + Math.imul(al1, bl6) | 0;
      mid = mid + Math.imul(al1, bh6) | 0;
      mid = mid + Math.imul(ah1, bl6) | 0;
      hi = hi + Math.imul(ah1, bh6) | 0;
      lo = lo + Math.imul(al0, bl7) | 0;
      mid = mid + Math.imul(al0, bh7) | 0;
      mid = mid + Math.imul(ah0, bl7) | 0;
      hi = hi + Math.imul(ah0, bh7) | 0;
      var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
      w7 &= 67108863;
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = mid + Math.imul(ah8, bl0) | 0;
      hi = Math.imul(ah8, bh0);
      lo = lo + Math.imul(al7, bl1) | 0;
      mid = mid + Math.imul(al7, bh1) | 0;
      mid = mid + Math.imul(ah7, bl1) | 0;
      hi = hi + Math.imul(ah7, bh1) | 0;
      lo = lo + Math.imul(al6, bl2) | 0;
      mid = mid + Math.imul(al6, bh2) | 0;
      mid = mid + Math.imul(ah6, bl2) | 0;
      hi = hi + Math.imul(ah6, bh2) | 0;
      lo = lo + Math.imul(al5, bl3) | 0;
      mid = mid + Math.imul(al5, bh3) | 0;
      mid = mid + Math.imul(ah5, bl3) | 0;
      hi = hi + Math.imul(ah5, bh3) | 0;
      lo = lo + Math.imul(al4, bl4) | 0;
      mid = mid + Math.imul(al4, bh4) | 0;
      mid = mid + Math.imul(ah4, bl4) | 0;
      hi = hi + Math.imul(ah4, bh4) | 0;
      lo = lo + Math.imul(al3, bl5) | 0;
      mid = mid + Math.imul(al3, bh5) | 0;
      mid = mid + Math.imul(ah3, bl5) | 0;
      hi = hi + Math.imul(ah3, bh5) | 0;
      lo = lo + Math.imul(al2, bl6) | 0;
      mid = mid + Math.imul(al2, bh6) | 0;
      mid = mid + Math.imul(ah2, bl6) | 0;
      hi = hi + Math.imul(ah2, bh6) | 0;
      lo = lo + Math.imul(al1, bl7) | 0;
      mid = mid + Math.imul(al1, bh7) | 0;
      mid = mid + Math.imul(ah1, bl7) | 0;
      hi = hi + Math.imul(ah1, bh7) | 0;
      lo = lo + Math.imul(al0, bl8) | 0;
      mid = mid + Math.imul(al0, bh8) | 0;
      mid = mid + Math.imul(ah0, bl8) | 0;
      hi = hi + Math.imul(ah0, bh8) | 0;
      var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
      w8 &= 67108863;
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = mid + Math.imul(ah9, bl0) | 0;
      hi = Math.imul(ah9, bh0);
      lo = lo + Math.imul(al8, bl1) | 0;
      mid = mid + Math.imul(al8, bh1) | 0;
      mid = mid + Math.imul(ah8, bl1) | 0;
      hi = hi + Math.imul(ah8, bh1) | 0;
      lo = lo + Math.imul(al7, bl2) | 0;
      mid = mid + Math.imul(al7, bh2) | 0;
      mid = mid + Math.imul(ah7, bl2) | 0;
      hi = hi + Math.imul(ah7, bh2) | 0;
      lo = lo + Math.imul(al6, bl3) | 0;
      mid = mid + Math.imul(al6, bh3) | 0;
      mid = mid + Math.imul(ah6, bl3) | 0;
      hi = hi + Math.imul(ah6, bh3) | 0;
      lo = lo + Math.imul(al5, bl4) | 0;
      mid = mid + Math.imul(al5, bh4) | 0;
      mid = mid + Math.imul(ah5, bl4) | 0;
      hi = hi + Math.imul(ah5, bh4) | 0;
      lo = lo + Math.imul(al4, bl5) | 0;
      mid = mid + Math.imul(al4, bh5) | 0;
      mid = mid + Math.imul(ah4, bl5) | 0;
      hi = hi + Math.imul(ah4, bh5) | 0;
      lo = lo + Math.imul(al3, bl6) | 0;
      mid = mid + Math.imul(al3, bh6) | 0;
      mid = mid + Math.imul(ah3, bl6) | 0;
      hi = hi + Math.imul(ah3, bh6) | 0;
      lo = lo + Math.imul(al2, bl7) | 0;
      mid = mid + Math.imul(al2, bh7) | 0;
      mid = mid + Math.imul(ah2, bl7) | 0;
      hi = hi + Math.imul(ah2, bh7) | 0;
      lo = lo + Math.imul(al1, bl8) | 0;
      mid = mid + Math.imul(al1, bh8) | 0;
      mid = mid + Math.imul(ah1, bl8) | 0;
      hi = hi + Math.imul(ah1, bh8) | 0;
      lo = lo + Math.imul(al0, bl9) | 0;
      mid = mid + Math.imul(al0, bh9) | 0;
      mid = mid + Math.imul(ah0, bl9) | 0;
      hi = hi + Math.imul(ah0, bh9) | 0;
      var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
      w9 &= 67108863;
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = mid + Math.imul(ah9, bl1) | 0;
      hi = Math.imul(ah9, bh1);
      lo = lo + Math.imul(al8, bl2) | 0;
      mid = mid + Math.imul(al8, bh2) | 0;
      mid = mid + Math.imul(ah8, bl2) | 0;
      hi = hi + Math.imul(ah8, bh2) | 0;
      lo = lo + Math.imul(al7, bl3) | 0;
      mid = mid + Math.imul(al7, bh3) | 0;
      mid = mid + Math.imul(ah7, bl3) | 0;
      hi = hi + Math.imul(ah7, bh3) | 0;
      lo = lo + Math.imul(al6, bl4) | 0;
      mid = mid + Math.imul(al6, bh4) | 0;
      mid = mid + Math.imul(ah6, bl4) | 0;
      hi = hi + Math.imul(ah6, bh4) | 0;
      lo = lo + Math.imul(al5, bl5) | 0;
      mid = mid + Math.imul(al5, bh5) | 0;
      mid = mid + Math.imul(ah5, bl5) | 0;
      hi = hi + Math.imul(ah5, bh5) | 0;
      lo = lo + Math.imul(al4, bl6) | 0;
      mid = mid + Math.imul(al4, bh6) | 0;
      mid = mid + Math.imul(ah4, bl6) | 0;
      hi = hi + Math.imul(ah4, bh6) | 0;
      lo = lo + Math.imul(al3, bl7) | 0;
      mid = mid + Math.imul(al3, bh7) | 0;
      mid = mid + Math.imul(ah3, bl7) | 0;
      hi = hi + Math.imul(ah3, bh7) | 0;
      lo = lo + Math.imul(al2, bl8) | 0;
      mid = mid + Math.imul(al2, bh8) | 0;
      mid = mid + Math.imul(ah2, bl8) | 0;
      hi = hi + Math.imul(ah2, bh8) | 0;
      lo = lo + Math.imul(al1, bl9) | 0;
      mid = mid + Math.imul(al1, bh9) | 0;
      mid = mid + Math.imul(ah1, bl9) | 0;
      hi = hi + Math.imul(ah1, bh9) | 0;
      var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
      w10 &= 67108863;
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = mid + Math.imul(ah9, bl2) | 0;
      hi = Math.imul(ah9, bh2);
      lo = lo + Math.imul(al8, bl3) | 0;
      mid = mid + Math.imul(al8, bh3) | 0;
      mid = mid + Math.imul(ah8, bl3) | 0;
      hi = hi + Math.imul(ah8, bh3) | 0;
      lo = lo + Math.imul(al7, bl4) | 0;
      mid = mid + Math.imul(al7, bh4) | 0;
      mid = mid + Math.imul(ah7, bl4) | 0;
      hi = hi + Math.imul(ah7, bh4) | 0;
      lo = lo + Math.imul(al6, bl5) | 0;
      mid = mid + Math.imul(al6, bh5) | 0;
      mid = mid + Math.imul(ah6, bl5) | 0;
      hi = hi + Math.imul(ah6, bh5) | 0;
      lo = lo + Math.imul(al5, bl6) | 0;
      mid = mid + Math.imul(al5, bh6) | 0;
      mid = mid + Math.imul(ah5, bl6) | 0;
      hi = hi + Math.imul(ah5, bh6) | 0;
      lo = lo + Math.imul(al4, bl7) | 0;
      mid = mid + Math.imul(al4, bh7) | 0;
      mid = mid + Math.imul(ah4, bl7) | 0;
      hi = hi + Math.imul(ah4, bh7) | 0;
      lo = lo + Math.imul(al3, bl8) | 0;
      mid = mid + Math.imul(al3, bh8) | 0;
      mid = mid + Math.imul(ah3, bl8) | 0;
      hi = hi + Math.imul(ah3, bh8) | 0;
      lo = lo + Math.imul(al2, bl9) | 0;
      mid = mid + Math.imul(al2, bh9) | 0;
      mid = mid + Math.imul(ah2, bl9) | 0;
      hi = hi + Math.imul(ah2, bh9) | 0;
      var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
      w11 &= 67108863;
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = mid + Math.imul(ah9, bl3) | 0;
      hi = Math.imul(ah9, bh3);
      lo = lo + Math.imul(al8, bl4) | 0;
      mid = mid + Math.imul(al8, bh4) | 0;
      mid = mid + Math.imul(ah8, bl4) | 0;
      hi = hi + Math.imul(ah8, bh4) | 0;
      lo = lo + Math.imul(al7, bl5) | 0;
      mid = mid + Math.imul(al7, bh5) | 0;
      mid = mid + Math.imul(ah7, bl5) | 0;
      hi = hi + Math.imul(ah7, bh5) | 0;
      lo = lo + Math.imul(al6, bl6) | 0;
      mid = mid + Math.imul(al6, bh6) | 0;
      mid = mid + Math.imul(ah6, bl6) | 0;
      hi = hi + Math.imul(ah6, bh6) | 0;
      lo = lo + Math.imul(al5, bl7) | 0;
      mid = mid + Math.imul(al5, bh7) | 0;
      mid = mid + Math.imul(ah5, bl7) | 0;
      hi = hi + Math.imul(ah5, bh7) | 0;
      lo = lo + Math.imul(al4, bl8) | 0;
      mid = mid + Math.imul(al4, bh8) | 0;
      mid = mid + Math.imul(ah4, bl8) | 0;
      hi = hi + Math.imul(ah4, bh8) | 0;
      lo = lo + Math.imul(al3, bl9) | 0;
      mid = mid + Math.imul(al3, bh9) | 0;
      mid = mid + Math.imul(ah3, bl9) | 0;
      hi = hi + Math.imul(ah3, bh9) | 0;
      var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
      w12 &= 67108863;
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = mid + Math.imul(ah9, bl4) | 0;
      hi = Math.imul(ah9, bh4);
      lo = lo + Math.imul(al8, bl5) | 0;
      mid = mid + Math.imul(al8, bh5) | 0;
      mid = mid + Math.imul(ah8, bl5) | 0;
      hi = hi + Math.imul(ah8, bh5) | 0;
      lo = lo + Math.imul(al7, bl6) | 0;
      mid = mid + Math.imul(al7, bh6) | 0;
      mid = mid + Math.imul(ah7, bl6) | 0;
      hi = hi + Math.imul(ah7, bh6) | 0;
      lo = lo + Math.imul(al6, bl7) | 0;
      mid = mid + Math.imul(al6, bh7) | 0;
      mid = mid + Math.imul(ah6, bl7) | 0;
      hi = hi + Math.imul(ah6, bh7) | 0;
      lo = lo + Math.imul(al5, bl8) | 0;
      mid = mid + Math.imul(al5, bh8) | 0;
      mid = mid + Math.imul(ah5, bl8) | 0;
      hi = hi + Math.imul(ah5, bh8) | 0;
      lo = lo + Math.imul(al4, bl9) | 0;
      mid = mid + Math.imul(al4, bh9) | 0;
      mid = mid + Math.imul(ah4, bl9) | 0;
      hi = hi + Math.imul(ah4, bh9) | 0;
      var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
      w13 &= 67108863;
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = mid + Math.imul(ah9, bl5) | 0;
      hi = Math.imul(ah9, bh5);
      lo = lo + Math.imul(al8, bl6) | 0;
      mid = mid + Math.imul(al8, bh6) | 0;
      mid = mid + Math.imul(ah8, bl6) | 0;
      hi = hi + Math.imul(ah8, bh6) | 0;
      lo = lo + Math.imul(al7, bl7) | 0;
      mid = mid + Math.imul(al7, bh7) | 0;
      mid = mid + Math.imul(ah7, bl7) | 0;
      hi = hi + Math.imul(ah7, bh7) | 0;
      lo = lo + Math.imul(al6, bl8) | 0;
      mid = mid + Math.imul(al6, bh8) | 0;
      mid = mid + Math.imul(ah6, bl8) | 0;
      hi = hi + Math.imul(ah6, bh8) | 0;
      lo = lo + Math.imul(al5, bl9) | 0;
      mid = mid + Math.imul(al5, bh9) | 0;
      mid = mid + Math.imul(ah5, bl9) | 0;
      hi = hi + Math.imul(ah5, bh9) | 0;
      var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
      w14 &= 67108863;
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = mid + Math.imul(ah9, bl6) | 0;
      hi = Math.imul(ah9, bh6);
      lo = lo + Math.imul(al8, bl7) | 0;
      mid = mid + Math.imul(al8, bh7) | 0;
      mid = mid + Math.imul(ah8, bl7) | 0;
      hi = hi + Math.imul(ah8, bh7) | 0;
      lo = lo + Math.imul(al7, bl8) | 0;
      mid = mid + Math.imul(al7, bh8) | 0;
      mid = mid + Math.imul(ah7, bl8) | 0;
      hi = hi + Math.imul(ah7, bh8) | 0;
      lo = lo + Math.imul(al6, bl9) | 0;
      mid = mid + Math.imul(al6, bh9) | 0;
      mid = mid + Math.imul(ah6, bl9) | 0;
      hi = hi + Math.imul(ah6, bh9) | 0;
      var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
      w15 &= 67108863;
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = mid + Math.imul(ah9, bl7) | 0;
      hi = Math.imul(ah9, bh7);
      lo = lo + Math.imul(al8, bl8) | 0;
      mid = mid + Math.imul(al8, bh8) | 0;
      mid = mid + Math.imul(ah8, bl8) | 0;
      hi = hi + Math.imul(ah8, bh8) | 0;
      lo = lo + Math.imul(al7, bl9) | 0;
      mid = mid + Math.imul(al7, bh9) | 0;
      mid = mid + Math.imul(ah7, bl9) | 0;
      hi = hi + Math.imul(ah7, bh9) | 0;
      var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
      w16 &= 67108863;
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = mid + Math.imul(ah9, bl8) | 0;
      hi = Math.imul(ah9, bh8);
      lo = lo + Math.imul(al8, bl9) | 0;
      mid = mid + Math.imul(al8, bh9) | 0;
      mid = mid + Math.imul(ah8, bl9) | 0;
      hi = hi + Math.imul(ah8, bh9) | 0;
      var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
      w17 &= 67108863;
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = mid + Math.imul(ah9, bl9) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
      w18 &= 67108863;
      o[0] = w0;
      o[1] = w1;
      o[2] = w2;
      o[3] = w3;
      o[4] = w4;
      o[5] = w5;
      o[6] = w6;
      o[7] = w7;
      o[8] = w8;
      o[9] = w9;
      o[10] = w10;
      o[11] = w11;
      o[12] = w12;
      o[13] = w13;
      o[14] = w14;
      o[15] = w15;
      o[16] = w16;
      o[17] = w17;
      o[18] = w18;
      if (c !== 0) {
        o[19] = c;
        out.length++;
      }
      return out;
    };
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }
    function bigMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      out.length = self2.length + num.length;
      var carry = 0;
      var hncarry = 0;
      for (var k = 0; k < out.length - 1; k++) {
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 67108863;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = self2.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;
          var lo = r & 67108863;
          ncarry = ncarry + (r / 67108864 | 0) | 0;
          lo = lo + rword | 0;
          rword = lo & 67108863;
          ncarry = ncarry + (lo >>> 26) | 0;
          hncarry += ncarry >>> 26;
          ncarry &= 67108863;
        }
        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }
      return out._strip();
    }
    function jumboMulTo(self2, num, out) {
      return bigMulTo(self2, num, out);
    }
    BN2.prototype.mulTo = function mulTo(num, out) {
      var res;
      var len = this.length + num.length;
      if (this.length === 10 && num.length === 10) {
        res = comb10MulTo(this, num, out);
      } else if (len < 63) {
        res = smallMulTo(this, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this, num, out);
      } else {
        res = jumboMulTo(this, num, out);
      }
      return res;
    };
    BN2.prototype.mul = function mul(num) {
      var out = new BN2(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    };
    BN2.prototype.mulf = function mulf(num) {
      var out = new BN2(null);
      out.words = new Array(this.length + num.length);
      return jumboMulTo(this, num, out);
    };
    BN2.prototype.imul = function imul(num) {
      return this.clone().mulTo(num, this);
    };
    BN2.prototype.imuln = function imuln(num) {
      var isNegNum = num < 0;
      if (isNegNum)
        num = -num;
      assert2(typeof num === "number");
      assert2(num < 67108864);
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = (this.words[i] | 0) * num;
        var lo = (w & 67108863) + (carry & 67108863);
        carry >>= 26;
        carry += w / 67108864 | 0;
        carry += lo >>> 26;
        this.words[i] = lo & 67108863;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return isNegNum ? this.ineg() : this;
    };
    BN2.prototype.muln = function muln(num) {
      return this.clone().imuln(num);
    };
    BN2.prototype.sqr = function sqr() {
      return this.mul(this);
    };
    BN2.prototype.isqr = function isqr() {
      return this.imul(this.clone());
    };
    BN2.prototype.pow = function pow3(num) {
      var w = toBitArray(num);
      if (w.length === 0)
        return new BN2(1);
      var res = this;
      for (var i = 0; i < w.length; i++, res = res.sqr()) {
        if (w[i] !== 0)
          break;
      }
      if (++i < w.length) {
        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (w[i] === 0)
            continue;
          res = res.mul(q);
        }
      }
      return res;
    };
    BN2.prototype.iushln = function iushln(bits2) {
      assert2(typeof bits2 === "number" && bits2 >= 0);
      var r = bits2 % 26;
      var s = (bits2 - r) / 26;
      var carryMask = 67108863 >>> 26 - r << 26 - r;
      var i;
      if (r !== 0) {
        var carry = 0;
        for (i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = (this.words[i] | 0) - newCarry << r;
          this.words[i] = c | carry;
          carry = newCarry >>> 26 - r;
        }
        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }
      if (s !== 0) {
        for (i = this.length - 1; i >= 0; i--) {
          this.words[i + s] = this.words[i];
        }
        for (i = 0; i < s; i++) {
          this.words[i] = 0;
        }
        this.length += s;
      }
      return this._strip();
    };
    BN2.prototype.ishln = function ishln(bits2) {
      assert2(this.negative === 0);
      return this.iushln(bits2);
    };
    BN2.prototype.iushrn = function iushrn(bits2, hint, extended) {
      assert2(typeof bits2 === "number" && bits2 >= 0);
      var h;
      if (hint) {
        h = (hint - hint % 26) / 26;
      } else {
        h = 0;
      }
      var r = bits2 % 26;
      var s = Math.min((bits2 - r) / 26, this.length);
      var mask = 67108863 ^ 67108863 >>> r << r;
      var maskedWords = extended;
      h -= s;
      h = Math.max(0, h);
      if (maskedWords) {
        for (var i = 0; i < s; i++) {
          maskedWords.words[i] = this.words[i];
        }
        maskedWords.length = s;
      }
      if (s === 0)
        ;
      else if (this.length > s) {
        this.length -= s;
        for (i = 0; i < this.length; i++) {
          this.words[i] = this.words[i + s];
        }
      } else {
        this.words[0] = 0;
        this.length = 1;
      }
      var carry = 0;
      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i] | 0;
        this.words[i] = carry << 26 - r | word >>> r;
        carry = word & mask;
      }
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }
      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }
      return this._strip();
    };
    BN2.prototype.ishrn = function ishrn(bits2, hint, extended) {
      assert2(this.negative === 0);
      return this.iushrn(bits2, hint, extended);
    };
    BN2.prototype.shln = function shln(bits2) {
      return this.clone().ishln(bits2);
    };
    BN2.prototype.ushln = function ushln(bits2) {
      return this.clone().iushln(bits2);
    };
    BN2.prototype.shrn = function shrn(bits2) {
      return this.clone().ishrn(bits2);
    };
    BN2.prototype.ushrn = function ushrn(bits2) {
      return this.clone().iushrn(bits2);
    };
    BN2.prototype.testn = function testn(bit) {
      assert2(typeof bit === "number" && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;
      if (this.length <= s)
        return false;
      var w = this.words[s];
      return !!(w & q);
    };
    BN2.prototype.imaskn = function imaskn(bits2) {
      assert2(typeof bits2 === "number" && bits2 >= 0);
      var r = bits2 % 26;
      var s = (bits2 - r) / 26;
      assert2(this.negative === 0, "imaskn works only with positive numbers");
      if (this.length <= s) {
        return this;
      }
      if (r !== 0) {
        s++;
      }
      this.length = Math.min(s, this.length);
      if (r !== 0) {
        var mask = 67108863 ^ 67108863 >>> r << r;
        this.words[this.length - 1] &= mask;
      }
      return this._strip();
    };
    BN2.prototype.maskn = function maskn(bits2) {
      return this.clone().imaskn(bits2);
    };
    BN2.prototype.iaddn = function iaddn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.isubn(-num);
      if (this.negative !== 0) {
        if (this.length === 1 && (this.words[0] | 0) <= num) {
          this.words[0] = num - (this.words[0] | 0);
          this.negative = 0;
          return this;
        }
        this.negative = 0;
        this.isubn(num);
        this.negative = 1;
        return this;
      }
      return this._iaddn(num);
    };
    BN2.prototype._iaddn = function _iaddn(num) {
      this.words[0] += num;
      for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
        this.words[i] -= 67108864;
        if (i === this.length - 1) {
          this.words[i + 1] = 1;
        } else {
          this.words[i + 1]++;
        }
      }
      this.length = Math.max(this.length, i + 1);
      return this;
    };
    BN2.prototype.isubn = function isubn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.iaddn(-num);
      if (this.negative !== 0) {
        this.negative = 0;
        this.iaddn(num);
        this.negative = 1;
        return this;
      }
      this.words[0] -= num;
      if (this.length === 1 && this.words[0] < 0) {
        this.words[0] = -this.words[0];
        this.negative = 1;
      } else {
        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 67108864;
          this.words[i + 1] -= 1;
        }
      }
      return this._strip();
    };
    BN2.prototype.addn = function addn(num) {
      return this.clone().iaddn(num);
    };
    BN2.prototype.subn = function subn(num) {
      return this.clone().isubn(num);
    };
    BN2.prototype.iabs = function iabs() {
      this.negative = 0;
      return this;
    };
    BN2.prototype.abs = function abs2() {
      return this.clone().iabs();
    };
    BN2.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
      var len = num.length + shift;
      var i;
      this._expand(len);
      var w;
      var carry = 0;
      for (i = 0; i < num.length; i++) {
        w = (this.words[i + shift] | 0) + carry;
        var right = (num.words[i] | 0) * mul;
        w -= right & 67108863;
        carry = (w >> 26) - (right / 67108864 | 0);
        this.words[i + shift] = w & 67108863;
      }
      for (; i < this.length - shift; i++) {
        w = (this.words[i + shift] | 0) + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 67108863;
      }
      if (carry === 0)
        return this._strip();
      assert2(carry === -1);
      carry = 0;
      for (i = 0; i < this.length; i++) {
        w = -(this.words[i] | 0) + carry;
        carry = w >> 26;
        this.words[i] = w & 67108863;
      }
      this.negative = 1;
      return this._strip();
    };
    BN2.prototype._wordDiv = function _wordDiv(num, mode) {
      var shift = this.length - num.length;
      var a = this.clone();
      var b = num;
      var bhi = b.words[b.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b = b.ushln(shift);
        a.iushln(shift);
        bhi = b.words[b.length - 1] | 0;
      }
      var m2 = a.length - b.length;
      var q;
      if (mode !== "mod") {
        q = new BN2(null);
        q.length = m2 + 1;
        q.words = new Array(q.length);
        for (var i = 0; i < q.length; i++) {
          q.words[i] = 0;
        }
      }
      var diff = a.clone()._ishlnsubmul(b, 1, m2);
      if (diff.negative === 0) {
        a = diff;
        if (q) {
          q.words[m2] = 1;
        }
      }
      for (var j = m2 - 1; j >= 0; j--) {
        var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
        qj = Math.min(qj / bhi | 0, 67108863);
        a._ishlnsubmul(b, qj, j);
        while (a.negative !== 0) {
          qj--;
          a.negative = 0;
          a._ishlnsubmul(b, 1, j);
          if (!a.isZero()) {
            a.negative ^= 1;
          }
        }
        if (q) {
          q.words[j] = qj;
        }
      }
      if (q) {
        q._strip();
      }
      a._strip();
      if (mode !== "div" && shift !== 0) {
        a.iushrn(shift);
      }
      return {
        div: q || null,
        mod: a
      };
    };
    BN2.prototype.divmod = function divmod(num, mode, positive) {
      assert2(!num.isZero());
      if (this.isZero()) {
        return {
          div: new BN2(0),
          mod: new BN2(0)
        };
      }
      var div, mod2, res;
      if (this.negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        if (mode !== "div") {
          mod2 = res.mod.neg();
          if (positive && mod2.negative !== 0) {
            mod2.iadd(num);
          }
        }
        return {
          div,
          mod: mod2
        };
      }
      if (this.negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        return {
          div,
          mod: res.mod
        };
      }
      if ((this.negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);
        if (mode !== "div") {
          mod2 = res.mod.neg();
          if (positive && mod2.negative !== 0) {
            mod2.isub(num);
          }
        }
        return {
          div: res.div,
          mod: mod2
        };
      }
      if (num.length > this.length || this.cmp(num) < 0) {
        return {
          div: new BN2(0),
          mod: this
        };
      }
      if (num.length === 1) {
        if (mode === "div") {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }
        if (mode === "mod") {
          return {
            div: null,
            mod: new BN2(this.modrn(num.words[0]))
          };
        }
        return {
          div: this.divn(num.words[0]),
          mod: new BN2(this.modrn(num.words[0]))
        };
      }
      return this._wordDiv(num, mode);
    };
    BN2.prototype.div = function div(num) {
      return this.divmod(num, "div", false).div;
    };
    BN2.prototype.mod = function mod2(num) {
      return this.divmod(num, "mod", false).mod;
    };
    BN2.prototype.umod = function umod(num) {
      return this.divmod(num, "mod", true).mod;
    };
    BN2.prototype.divRound = function divRound(num) {
      var dm = this.divmod(num);
      if (dm.mod.isZero())
        return dm.div;
      var mod2 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
      var half = num.ushrn(1);
      var r2 = num.andln(1);
      var cmp = mod2.cmp(half);
      if (cmp < 0 || r2 === 1 && cmp === 0)
        return dm.div;
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN2.prototype.modrn = function modrn(num) {
      var isNegNum = num < 0;
      if (isNegNum)
        num = -num;
      assert2(num <= 67108863);
      var p = (1 << 26) % num;
      var acc = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        acc = (p * acc + (this.words[i] | 0)) % num;
      }
      return isNegNum ? -acc : acc;
    };
    BN2.prototype.modn = function modn(num) {
      return this.modrn(num);
    };
    BN2.prototype.idivn = function idivn(num) {
      var isNegNum = num < 0;
      if (isNegNum)
        num = -num;
      assert2(num <= 67108863);
      var carry = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var w = (this.words[i] | 0) + carry * 67108864;
        this.words[i] = w / num | 0;
        carry = w % num;
      }
      this._strip();
      return isNegNum ? this.ineg() : this;
    };
    BN2.prototype.divn = function divn(num) {
      return this.clone().idivn(num);
    };
    BN2.prototype.egcd = function egcd(p) {
      assert2(p.negative === 0);
      assert2(!p.isZero());
      var x = this;
      var y = p.clone();
      if (x.negative !== 0) {
        x = x.umod(p);
      } else {
        x = x.clone();
      }
      var A = new BN2(1);
      var B = new BN2(0);
      var C = new BN2(0);
      var D = new BN2(1);
      var g = 0;
      while (x.isEven() && y.isEven()) {
        x.iushrn(1);
        y.iushrn(1);
        ++g;
      }
      var yp = y.clone();
      var xp = x.clone();
      while (!x.isZero()) {
        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
          ;
        if (i > 0) {
          x.iushrn(i);
          while (i-- > 0) {
            if (A.isOdd() || B.isOdd()) {
              A.iadd(yp);
              B.isub(xp);
            }
            A.iushrn(1);
            B.iushrn(1);
          }
        }
        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
          ;
        if (j > 0) {
          y.iushrn(j);
          while (j-- > 0) {
            if (C.isOdd() || D.isOdd()) {
              C.iadd(yp);
              D.isub(xp);
            }
            C.iushrn(1);
            D.iushrn(1);
          }
        }
        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }
      return {
        a: C,
        b: D,
        gcd: y.iushln(g)
      };
    };
    BN2.prototype._invmp = function _invmp(p) {
      assert2(p.negative === 0);
      assert2(!p.isZero());
      var a = this;
      var b = p.clone();
      if (a.negative !== 0) {
        a = a.umod(p);
      } else {
        a = a.clone();
      }
      var x1 = new BN2(1);
      var x2 = new BN2(0);
      var delta = b.clone();
      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
          ;
        if (i > 0) {
          a.iushrn(i);
          while (i-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }
            x1.iushrn(1);
          }
        }
        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
          ;
        if (j > 0) {
          b.iushrn(j);
          while (j-- > 0) {
            if (x2.isOdd()) {
              x2.iadd(delta);
            }
            x2.iushrn(1);
          }
        }
        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }
      var res;
      if (a.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x2;
      }
      if (res.cmpn(0) < 0) {
        res.iadd(p);
      }
      return res;
    };
    BN2.prototype.gcd = function gcd2(num) {
      if (this.isZero())
        return num.abs();
      if (num.isZero())
        return this.abs();
      var a = this.clone();
      var b = num.clone();
      a.negative = 0;
      b.negative = 0;
      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.iushrn(1);
        b.iushrn(1);
      }
      do {
        while (a.isEven()) {
          a.iushrn(1);
        }
        while (b.isEven()) {
          b.iushrn(1);
        }
        var r = a.cmp(b);
        if (r < 0) {
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }
        a.isub(b);
      } while (true);
      return b.iushln(shift);
    };
    BN2.prototype.invm = function invm(num) {
      return this.egcd(num).a.umod(num);
    };
    BN2.prototype.isEven = function isEven() {
      return (this.words[0] & 1) === 0;
    };
    BN2.prototype.isOdd = function isOdd() {
      return (this.words[0] & 1) === 1;
    };
    BN2.prototype.andln = function andln(num) {
      return this.words[0] & num;
    };
    BN2.prototype.bincn = function bincn(bit) {
      assert2(typeof bit === "number");
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;
      if (this.length <= s) {
        this._expand(s + 1);
        this.words[s] |= q;
        return this;
      }
      var carry = q;
      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i] | 0;
        w += carry;
        carry = w >>> 26;
        w &= 67108863;
        this.words[i] = w;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };
    BN2.prototype.isZero = function isZero() {
      return this.length === 1 && this.words[0] === 0;
    };
    BN2.prototype.cmpn = function cmpn(num) {
      var negative = num < 0;
      if (this.negative !== 0 && !negative)
        return -1;
      if (this.negative === 0 && negative)
        return 1;
      this._strip();
      var res;
      if (this.length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }
        assert2(num <= 67108863, "Number is too big");
        var w = this.words[0] | 0;
        res = w === num ? 0 : w < num ? -1 : 1;
      }
      if (this.negative !== 0)
        return -res | 0;
      return res;
    };
    BN2.prototype.cmp = function cmp(num) {
      if (this.negative !== 0 && num.negative === 0)
        return -1;
      if (this.negative === 0 && num.negative !== 0)
        return 1;
      var res = this.ucmp(num);
      if (this.negative !== 0)
        return -res | 0;
      return res;
    };
    BN2.prototype.ucmp = function ucmp(num) {
      if (this.length > num.length)
        return 1;
      if (this.length < num.length)
        return -1;
      var res = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i] | 0;
        var b = num.words[i] | 0;
        if (a === b)
          continue;
        if (a < b) {
          res = -1;
        } else if (a > b) {
          res = 1;
        }
        break;
      }
      return res;
    };
    BN2.prototype.gtn = function gtn(num) {
      return this.cmpn(num) === 1;
    };
    BN2.prototype.gt = function gt(num) {
      return this.cmp(num) === 1;
    };
    BN2.prototype.gten = function gten(num) {
      return this.cmpn(num) >= 0;
    };
    BN2.prototype.gte = function gte(num) {
      return this.cmp(num) >= 0;
    };
    BN2.prototype.ltn = function ltn(num) {
      return this.cmpn(num) === -1;
    };
    BN2.prototype.lt = function lt(num) {
      return this.cmp(num) === -1;
    };
    BN2.prototype.lten = function lten(num) {
      return this.cmpn(num) <= 0;
    };
    BN2.prototype.lte = function lte(num) {
      return this.cmp(num) <= 0;
    };
    BN2.prototype.eqn = function eqn(num) {
      return this.cmpn(num) === 0;
    };
    BN2.prototype.eq = function eq(num) {
      return this.cmp(num) === 0;
    };
    BN2.red = function red(num) {
      return new Red(num);
    };
    BN2.prototype.toRed = function toRed(ctx) {
      assert2(!this.red, "Already a number in reduction context");
      assert2(this.negative === 0, "red works only with positives");
      return ctx.convertTo(this)._forceRed(ctx);
    };
    BN2.prototype.fromRed = function fromRed() {
      assert2(this.red, "fromRed works only with numbers in reduction context");
      return this.red.convertFrom(this);
    };
    BN2.prototype._forceRed = function _forceRed(ctx) {
      this.red = ctx;
      return this;
    };
    BN2.prototype.forceRed = function forceRed(ctx) {
      assert2(!this.red, "Already a number in reduction context");
      return this._forceRed(ctx);
    };
    BN2.prototype.redAdd = function redAdd(num) {
      assert2(this.red, "redAdd works only with red numbers");
      return this.red.add(this, num);
    };
    BN2.prototype.redIAdd = function redIAdd(num) {
      assert2(this.red, "redIAdd works only with red numbers");
      return this.red.iadd(this, num);
    };
    BN2.prototype.redSub = function redSub(num) {
      assert2(this.red, "redSub works only with red numbers");
      return this.red.sub(this, num);
    };
    BN2.prototype.redISub = function redISub(num) {
      assert2(this.red, "redISub works only with red numbers");
      return this.red.isub(this, num);
    };
    BN2.prototype.redShl = function redShl(num) {
      assert2(this.red, "redShl works only with red numbers");
      return this.red.shl(this, num);
    };
    BN2.prototype.redMul = function redMul(num) {
      assert2(this.red, "redMul works only with red numbers");
      this.red._verify2(this, num);
      return this.red.mul(this, num);
    };
    BN2.prototype.redIMul = function redIMul(num) {
      assert2(this.red, "redMul works only with red numbers");
      this.red._verify2(this, num);
      return this.red.imul(this, num);
    };
    BN2.prototype.redSqr = function redSqr() {
      assert2(this.red, "redSqr works only with red numbers");
      this.red._verify1(this);
      return this.red.sqr(this);
    };
    BN2.prototype.redISqr = function redISqr() {
      assert2(this.red, "redISqr works only with red numbers");
      this.red._verify1(this);
      return this.red.isqr(this);
    };
    BN2.prototype.redSqrt = function redSqrt() {
      assert2(this.red, "redSqrt works only with red numbers");
      this.red._verify1(this);
      return this.red.sqrt(this);
    };
    BN2.prototype.redInvm = function redInvm() {
      assert2(this.red, "redInvm works only with red numbers");
      this.red._verify1(this);
      return this.red.invm(this);
    };
    BN2.prototype.redNeg = function redNeg() {
      assert2(this.red, "redNeg works only with red numbers");
      this.red._verify1(this);
      return this.red.neg(this);
    };
    BN2.prototype.redPow = function redPow(num) {
      assert2(this.red && !num.red, "redPow(normalNum)");
      this.red._verify1(this);
      return this.red.pow(this, num);
    };
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
    function MPrime(name, p) {
      this.name = name;
      this.p = new BN2(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN2(1).iushln(this.n).isub(this.p);
      this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
      var tmp = new BN2(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
      var r = num;
      var rlen;
      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);
      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        if (r.strip !== void 0) {
          r.strip();
        } else {
          r._strip();
        }
      }
      return r;
    };
    MPrime.prototype.split = function split2(input, out) {
      input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
      return num.imul(this.k);
    };
    function K256() {
      MPrime.call(
        this,
        "k256",
        "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
      );
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split2(input, output3) {
      var mask = 4194303;
      var outLen = Math.min(input.length, 9);
      for (var i = 0; i < outLen; i++) {
        output3.words[i] = input.words[i];
      }
      output3.length = outLen;
      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }
      var prev2 = input.words[9];
      output3.words[output3.length++] = prev2 & mask;
      for (i = 10; i < input.length; i++) {
        var next2 = input.words[i] | 0;
        input.words[i - 10] = (next2 & mask) << 4 | prev2 >>> 22;
        prev2 = next2;
      }
      prev2 >>>= 22;
      input.words[i - 10] = prev2;
      if (prev2 === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };
    K256.prototype.imulK = function imulK(num) {
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;
      var lo = 0;
      for (var i = 0; i < num.length; i++) {
        var w = num.words[i] | 0;
        lo += w * 977;
        num.words[i] = lo & 67108863;
        lo = w * 64 + (lo / 67108864 | 0);
      }
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };
    function P224() {
      MPrime.call(
        this,
        "p224",
        "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
      );
    }
    inherits(P224, MPrime);
    function P192() {
      MPrime.call(
        this,
        "p192",
        "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
      );
    }
    inherits(P192, MPrime);
    function P25519() {
      MPrime.call(
        this,
        "25519",
        "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
      );
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
      var carry = 0;
      for (var i = 0; i < num.length; i++) {
        var hi = (num.words[i] | 0) * 19 + carry;
        var lo = hi & 67108863;
        hi >>>= 26;
        num.words[i] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };
    BN2._prime = function prime(name) {
      if (primes[name])
        return primes[name];
      var prime2;
      if (name === "k256") {
        prime2 = new K256();
      } else if (name === "p224") {
        prime2 = new P224();
      } else if (name === "p192") {
        prime2 = new P192();
      } else if (name === "p25519") {
        prime2 = new P25519();
      } else {
        throw new Error("Unknown prime " + name);
      }
      primes[name] = prime2;
      return prime2;
    };
    function Red(m2) {
      if (typeof m2 === "string") {
        var prime = BN2._prime(m2);
        this.m = prime.p;
        this.prime = prime;
      } else {
        assert2(m2.gtn(1), "modulus must be greater than 1");
        this.m = m2;
        this.prime = null;
      }
    }
    Red.prototype._verify1 = function _verify1(a) {
      assert2(a.negative === 0, "red works only with positives");
      assert2(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
      assert2((a.negative | b.negative) === 0, "red works only with positives");
      assert2(
        a.red && a.red === b.red,
        "red works only with red numbers"
      );
    };
    Red.prototype.imod = function imod(a) {
      if (this.prime)
        return this.prime.ireduce(a)._forceRed(this);
      move(a, a.umod(this.m)._forceRed(this));
      return a;
    };
    Red.prototype.neg = function neg(a) {
      if (a.isZero()) {
        return a.clone();
      }
      return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add2(a, b) {
      this._verify2(a, b);
      var res = a.add(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
      this._verify2(a, b);
      var res = a.iadd(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res;
    };
    Red.prototype.sub = function sub(a, b) {
      this._verify2(a, b);
      var res = a.sub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
      this._verify2(a, b);
      var res = a.isub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res;
    };
    Red.prototype.shl = function shl(a, num) {
      this._verify1(a);
      return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
      this._verify2(a, b);
      return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
      this._verify2(a, b);
      return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
      return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
      return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
      if (a.isZero())
        return a.clone();
      var mod3 = this.m.andln(3);
      assert2(mod3 % 2 === 1);
      if (mod3 === 3) {
        var pow3 = this.m.add(new BN2(1)).iushrn(2);
        return this.pow(a, pow3);
      }
      var q = this.m.subn(1);
      var s = 0;
      while (!q.isZero() && q.andln(1) === 0) {
        s++;
        q.iushrn(1);
      }
      assert2(!q.isZero());
      var one = new BN2(1).toRed(this);
      var nOne = one.redNeg();
      var lpow = this.m.subn(1).iushrn(1);
      var z2 = this.m.bitLength();
      z2 = new BN2(2 * z2 * z2).toRed(this);
      while (this.pow(z2, lpow).cmp(nOne) !== 0) {
        z2.redIAdd(nOne);
      }
      var c = this.pow(z2, q);
      var r = this.pow(a, q.addn(1).iushrn(1));
      var t = this.pow(a, q);
      var m2 = s;
      while (t.cmp(one) !== 0) {
        var tmp = t;
        for (var i = 0; tmp.cmp(one) !== 0; i++) {
          tmp = tmp.redSqr();
        }
        assert2(i < m2);
        var b = this.pow(c, new BN2(1).iushln(m2 - i - 1));
        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m2 = i;
      }
      return r;
    };
    Red.prototype.invm = function invm(a) {
      var inv = a._invmp(this.m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };
    Red.prototype.pow = function pow3(a, num) {
      if (num.isZero())
        return new BN2(1).toRed(this);
      if (num.cmpn(1) === 0)
        return a.clone();
      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN2(1).toRed(this);
      wnd[1] = a;
      for (var i = 2; i < wnd.length; i++) {
        wnd[i] = this.mul(wnd[i - 1], a);
      }
      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }
      for (i = num.length - 1; i >= 0; i--) {
        var word = num.words[i];
        for (var j = start - 1; j >= 0; j--) {
          var bit = word >> j & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }
          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }
          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i !== 0 || j !== 0))
            continue;
          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }
      return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
      var r = num.umod(this.m);
      return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
      var res = num.clone();
      res.red = null;
      return res;
    };
    BN2.mont = function mont(num) {
      return new Mont(num);
    };
    function Mont(m2) {
      Red.call(this, m2);
      this.shift = this.m.bitLength();
      if (this.shift % 26 !== 0) {
        this.shift += 26 - this.shift % 26;
      }
      this.r = new BN2(1).iushln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);
      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv = this.minv.umod(this.r);
      this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
      return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };
    Mont.prototype.imul = function imul(a, b) {
      if (a.isZero() || b.isZero()) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }
      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }
      return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
      if (a.isZero() || b.isZero())
        return new BN2(0)._forceRed(this);
      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }
      return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })(module2, commonjsGlobal);
})(bn);
var bnExports = bn.exports;
const BN = /* @__PURE__ */ getDefaultExportFromCjs(bnExports);
function isBn(value) {
  return BN.isBN(value);
}
const REGEX_HEX_PREFIXED = /^0x[\da-fA-F]+$/;
const REGEX_HEX_NOPREFIX = /^[\da-fA-F]+$/;
function isHex(value, bitLength = -1, ignoreLength) {
  return typeof value === "string" && (value === "0x" || REGEX_HEX_PREFIXED.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));
}
function isObject$1(value) {
  return !!value && typeof value === "object";
}
function isOn(...fns) {
  return (value) => (isObject$1(value) || isFunction$1(value)) && fns.every((f) => isFunction$1(value[f]));
}
function isOnFunction(...fns) {
  return (value) => isFunction$1(value) && fns.every((f) => isFunction$1(value[f]));
}
function isOnObject(...fns) {
  return (value) => isObject$1(value) && fns.every((f) => isFunction$1(value[f]));
}
const isToBigInt = /* @__PURE__ */ isOn("toBigInt");
const isToBn$1 = /* @__PURE__ */ isOn("toBn");
function nToBigInt(value) {
  return typeof value === "bigint" ? value : !value ? BigInt$2(0) : isHex(value) ? hexToBigInt(value.toString()) : isBn(value) ? BigInt$2(value.toString()) : isToBigInt(value) ? value.toBigInt() : isToBn$1(value) ? BigInt$2(value.toBn().toString()) : BigInt$2(value);
}
function nSqrt(value) {
  const n = nToBigInt(value);
  if (n < _0n$7) {
    throw new Error("square root of negative numbers is not supported");
  }
  if (n <= _2pow53n) {
    return BigInt$2(~~Math.sqrt(Number(n)));
  }
  let x0 = _sqrt2pow53n;
  while (true) {
    const x1 = n / x0 + x0 >> _1n$9;
    if (x0 === x1 || x0 === x1 - _1n$9) {
      return x0;
    }
    x0 = x1;
  }
}
function commonjsRequire(path2) {
  throw new Error('Could not dynamically require "' + path2 + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
const hasBigInt = typeof BigInt$2 === "function" && typeof BigInt$2.asIntN === "function";
const hasCjs = typeof commonjsRequire === "function" && typeof module !== "undefined";
const hasDirname = typeof __dirname !== "undefined";
const hasEsm = !hasCjs;
const hasWasm = typeof WebAssembly !== "undefined";
const hasBuffer = typeof xglobal$3.Buffer === "function" && typeof xglobal$3.Buffer.isBuffer === "function";
const hasProcess = typeof xglobal$3.process === "object";
function isBuffer(value) {
  return hasBuffer && !!value && isFunction$1(value.readDoubleLE) && xglobal$3.Buffer.isBuffer(value);
}
function isU8a(value) {
  return (value && value.constructor) === Uint8Array || value instanceof Uint8Array;
}
const encoder = new TextEncoder$1();
function stringToU8a(value) {
  return value ? encoder.encode(value.toString()) : new Uint8Array();
}
function u8aToU8a(value) {
  return isU8a(value) ? isBuffer(value) ? new Uint8Array(value) : value : isHex(value) ? hexToU8a(value) : Array.isArray(value) ? new Uint8Array(value) : stringToU8a(value);
}
function u8aCmp(a, b) {
  const u8aa = u8aToU8a(a);
  const u8ab = u8aToU8a(b);
  let i = 0;
  while (true) {
    const overA = i >= u8aa.length;
    const overB = i >= u8ab.length;
    if (overA && overB) {
      return 0;
    } else if (overA) {
      return -1;
    } else if (overB) {
      return 1;
    } else if (u8aa[i] !== u8ab[i]) {
      return u8aa[i] > u8ab[i] ? 1 : -1;
    }
    i++;
  }
}
function u8aConcat(...list) {
  const count = list.length;
  const u8as = new Array(count);
  let length2 = 0;
  for (let i = 0; i < count; i++) {
    u8as[i] = u8aToU8a(list[i]);
    length2 += u8as[i].length;
  }
  return u8aConcatStrict(u8as, length2);
}
function u8aConcatStrict(u8as, length2 = 0) {
  const count = u8as.length;
  let offset = 0;
  if (!length2) {
    for (let i = 0; i < count; i++) {
      length2 += u8as[i].length;
    }
  }
  const result = new Uint8Array(length2);
  for (let i = 0; i < count; i++) {
    result.set(u8as[i], offset);
    offset += u8as[i].length;
  }
  return result;
}
function u8aEmpty(value) {
  const len = value.length | 0;
  for (let i = 0; i < len; i++) {
    if (value[i] | 0) {
      return false;
    }
  }
  return true;
}
function u8aEq(a, b) {
  const u8aa = u8aToU8a(a);
  const u8ab = u8aToU8a(b);
  if (u8aa.length === u8ab.length) {
    const dvA = new DataView(u8aa.buffer, u8aa.byteOffset);
    const dvB = new DataView(u8ab.buffer, u8ab.byteOffset);
    const mod2 = u8aa.length % 4 | 0;
    const length2 = u8aa.length - mod2 | 0;
    for (let i = 0; i < length2; i += 4) {
      if (dvA.getUint32(i) !== dvB.getUint32(i)) {
        return false;
      }
    }
    for (let i = length2, count = u8aa.length; i < count; i++) {
      if (u8aa[i] !== u8ab[i]) {
        return false;
      }
    }
    return true;
  }
  return false;
}
function u8aFixLength(value, bitLength = -1, atStart = false) {
  const byteLength = Math.ceil(bitLength / 8);
  if (bitLength === -1 || value.length === byteLength) {
    return value;
  } else if (value.length > byteLength) {
    return value.subarray(0, byteLength);
  }
  const result = new Uint8Array(byteLength);
  result.set(value, atStart ? 0 : byteLength - value.length);
  return result;
}
function u8aSorted(u8as) {
  return u8as.sort(u8aCmp);
}
function u8aToBn(value, { isLe = true, isNegative = false } = {}) {
  if (!isLe) {
    value = value.slice().reverse();
  }
  const count = value.length;
  if (isNegative && count && value[count - 1] & 128) {
    switch (count) {
      case 0:
        return new BN(0);
      case 1:
        return new BN((value[0] ^ 255) * -1 - 1);
      case 2:
        return new BN((value[0] + (value[1] << 8) ^ 65535) * -1 - 1);
      case 3:
        return new BN((value[0] + (value[1] << 8) + (value[2] << 16) ^ 16777215) * -1 - 1);
      case 4:
        return new BN((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) * -1 - 1);
      case 5:
        return new BN(((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] ^ 255) * 4294967296) * -1 - 1);
      case 6:
        return new BN(((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] + (value[5] << 8) ^ 65535) * 4294967296) * -1 - 1);
      default:
        return new BN(value, "le").fromTwos(count * 8);
    }
  }
  switch (count) {
    case 0:
      return new BN(0);
    case 1:
      return new BN(value[0]);
    case 2:
      return new BN(value[0] + (value[1] << 8));
    case 3:
      return new BN(value[0] + (value[1] << 8) + (value[2] << 16));
    case 4:
      return new BN(value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216);
    case 5:
      return new BN(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8)) * 16777216);
    case 6:
      return new BN(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8) + (value[5] << 16)) * 16777216);
    default:
      return new BN(value, "le");
  }
}
function u8aToBuffer(value) {
  return hasBuffer ? xglobal$3.Buffer.from(value || []) : new Uint8Array(value || []);
}
function u8aToFloat(value, { bitLength = 32, isLe = true } = {}) {
  if (bitLength !== 32 && bitLength !== 64) {
    throw new Error("Invalid bitLength provided, expected 32 or 64");
  } else if (value.length < bitLength / 8) {
    throw new Error(`Invalid input buffer provided, expected at least ${bitLength / 8} bytes, found ${value.length}`);
  }
  const dv = new DataView(value.buffer, value.byteOffset);
  return bitLength === 32 ? dv.getFloat32(0, isLe) : dv.getFloat64(0, isLe);
}
const U8 = new Array(256);
const U16 = new Array(256 * 256);
for (let n = 0; n < 256; n++) {
  U8[n] = n.toString(16).padStart(2, "0");
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U16[s | j] = U8[i] + U8[j];
  }
}
function hex(value, result) {
  const mod2 = value.length % 2 | 0;
  const length2 = value.length - mod2 | 0;
  for (let i = 0; i < length2; i += 2) {
    result += U16[value[i] << 8 | value[i + 1]];
  }
  if (mod2) {
    result += U8[value[length2] | 0];
  }
  return result;
}
function u8aToHex(value, bitLength = -1, isPrefixed = true) {
  const empty = isPrefixed ? "0x" : "";
  if (!(value == null ? void 0 : value.length)) {
    return empty;
  } else if (bitLength > 0) {
    const length2 = Math.ceil(bitLength / 8);
    if (value.length > length2) {
      return `${hex(value.subarray(0, length2 / 2), empty)}…${hex(value.subarray(value.length - length2 / 2), "")}`;
    }
  }
  return hex(value, empty);
}
function u8aToNumber(value, { isLe = true, isNegative = false } = {}) {
  if (!isLe) {
    value = value.slice().reverse();
  }
  const count = value.length;
  if (isNegative && count && value[count - 1] & 128) {
    switch (count) {
      case 0:
        return 0;
      case 1:
        return (value[0] ^ 255) * -1 - 1;
      case 2:
        return (value[0] + (value[1] << 8) ^ 65535) * -1 - 1;
      case 3:
        return (value[0] + (value[1] << 8) + (value[2] << 16) ^ 16777215) * -1 - 1;
      case 4:
        return (value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) * -1 - 1;
      case 5:
        return ((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] ^ 255) * 4294967296) * -1 - 1;
      case 6:
        return ((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] + (value[5] << 8) ^ 65535) * 4294967296) * -1 - 1;
      default:
        throw new Error("Value more than 48-bits cannot be reliably converted");
    }
  }
  switch (count) {
    case 0:
      return 0;
    case 1:
      return value[0];
    case 2:
      return value[0] + (value[1] << 8);
    case 3:
      return value[0] + (value[1] << 8) + (value[2] << 16);
    case 4:
      return value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216;
    case 5:
      return value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8)) * 16777216;
    case 6:
      return value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8) + (value[5] << 16)) * 16777216;
    default:
      throw new Error("Value more than 48-bits cannot be reliably converted");
  }
}
const decoder = new TextDecoder2("utf-8");
function u8aToString(value) {
  return value ? decoder.decode(value) : "";
}
const U8A_WRAP_ETHEREUM = /* @__PURE__ */ u8aToU8a("Ethereum Signed Message:\n");
const U8A_WRAP_PREFIX = /* @__PURE__ */ u8aToU8a("<Bytes>");
const U8A_WRAP_POSTFIX = /* @__PURE__ */ u8aToU8a("</Bytes>");
const WRAP_LEN = U8A_WRAP_PREFIX.length + U8A_WRAP_POSTFIX.length;
function u8aIsWrapped(u8a, withEthereum) {
  return u8a.length >= WRAP_LEN && u8aEq(u8a.subarray(0, U8A_WRAP_PREFIX.length), U8A_WRAP_PREFIX) && u8aEq(u8a.slice(-U8A_WRAP_POSTFIX.length), U8A_WRAP_POSTFIX) || withEthereum && u8a.length >= U8A_WRAP_ETHEREUM.length && u8aEq(u8a.subarray(0, U8A_WRAP_ETHEREUM.length), U8A_WRAP_ETHEREUM);
}
function u8aUnwrapBytes(bytes2) {
  const u8a = u8aToU8a(bytes2);
  return u8aIsWrapped(u8a, false) ? u8a.subarray(U8A_WRAP_PREFIX.length, u8a.length - U8A_WRAP_POSTFIX.length) : u8a;
}
function u8aWrapBytes(bytes2) {
  const u8a = u8aToU8a(bytes2);
  return u8aIsWrapped(u8a, true) ? u8a : u8aConcatStrict([U8A_WRAP_PREFIX, u8a, U8A_WRAP_POSTFIX]);
}
const DIV = BigInt$2(256);
const NEG_MASK = BigInt$2(255);
function toU8a(value, isLe, isNegative) {
  const arr2 = [];
  const withSigned = isNegative && value < _0n$7;
  if (withSigned) {
    value = (value + _1n$9) * -_1n$9;
  }
  while (value !== _0n$7) {
    const mod2 = value % DIV;
    const val = Number(withSigned ? mod2 ^ NEG_MASK : mod2);
    if (isLe) {
      arr2.push(val);
    } else {
      arr2.unshift(val);
    }
    value = (value - mod2) / DIV;
  }
  return Uint8Array.from(arr2);
}
function nToU8a(value, { bitLength = -1, isLe = true, isNegative = false } = {}) {
  const valueBi = nToBigInt(value);
  if (valueBi === _0n$7) {
    return bitLength === -1 ? new Uint8Array(1) : new Uint8Array(Math.ceil((bitLength || 0) / 8));
  }
  const u8a = toU8a(valueBi, isLe, isNegative);
  if (bitLength === -1) {
    return u8a;
  }
  const byteLength = Math.ceil((bitLength || 0) / 8);
  const output3 = new Uint8Array(byteLength);
  if (isNegative) {
    output3.fill(255);
  }
  output3.set(u8a, isLe ? 0 : byteLength - u8a.length);
  return output3;
}
function nToHex(value, { bitLength = -1, isLe = false, isNegative = false } = {}) {
  return u8aToHex(nToU8a(value || 0, { bitLength, isLe, isNegative }));
}
function hexStripPrefix(value) {
  if (!value || value === "0x") {
    return "";
  } else if (REGEX_HEX_PREFIXED.test(value)) {
    return value.substring(2);
  } else if (REGEX_HEX_NOPREFIX.test(value)) {
    return value;
  }
  throw new Error(`Expected hex value to convert, found '${value}'`);
}
function hexToBn(value, { isLe = false, isNegative = false } = {}) {
  if (!value || value === "0x") {
    return new BN(0);
  }
  const stripped = hexStripPrefix(value);
  const bn2 = new BN(stripped, 16, isLe ? "le" : "be");
  return isNegative ? bn2.fromTwos(stripped.length * 4) : bn2;
}
const bnMax = /* @__PURE__ */ createCmp((a, b) => a.gt(b));
const bnMin = /* @__PURE__ */ createCmp((a, b) => a.lt(b));
const BN_ZERO = /* @__PURE__ */ new BN(0);
const BN_ONE = /* @__PURE__ */ new BN(1);
const BN_TWO = /* @__PURE__ */ new BN(2);
const BN_THREE = /* @__PURE__ */ new BN(3);
const BN_FOUR = /* @__PURE__ */ new BN(4);
const BN_FIVE = /* @__PURE__ */ new BN(5);
const BN_SIX = /* @__PURE__ */ new BN(6);
const BN_SEVEN = /* @__PURE__ */ new BN(7);
const BN_EIGHT = /* @__PURE__ */ new BN(8);
const BN_NINE = /* @__PURE__ */ new BN(9);
const BN_TEN = /* @__PURE__ */ new BN(10);
const BN_HUNDRED = /* @__PURE__ */ new BN(100);
const BN_THOUSAND = /* @__PURE__ */ new BN(1e3);
const BN_MILLION = /* @__PURE__ */ new BN(1e6);
const BN_BILLION = /* @__PURE__ */ new BN(1e9);
const BN_QUINTILL = BN_BILLION.mul(BN_BILLION);
const BN_MAX_INTEGER = /* @__PURE__ */ new BN(Number.MAX_SAFE_INTEGER);
const BN_SQRT_MAX_INTEGER = /* @__PURE__ */ new BN(94906265);
function isBigInt(value) {
  return typeof value === "bigint";
}
function bnToBn(value) {
  return value ? BN.isBN(value) ? value : isHex(value) ? hexToBn(value.toString()) : isBigInt(value) ? new BN(value.toString()) : isToBn$1(value) ? value.toBn() : isToBigInt(value) ? new BN(value.toBigInt().toString()) : new BN(value) : new BN(0);
}
function bnSqrt(value) {
  const n = bnToBn(value);
  if (n.isNeg()) {
    throw new Error("square root of negative numbers is not supported");
  }
  if (n.lte(BN_MAX_INTEGER)) {
    return new BN(~~Math.sqrt(n.toNumber()));
  }
  let x0 = BN_SQRT_MAX_INTEGER.clone();
  while (true) {
    const x1 = n.div(x0).iadd(x0).ishrn(1);
    if (x0.eq(x1) || x0.eq(x1.sub(BN_ONE))) {
      return x0;
    }
    x0 = x1;
  }
}
const DEFAULT_OPTS = { bitLength: -1, isLe: true, isNegative: false };
function bnToU8a(value, { bitLength = -1, isLe = true, isNegative = false } = DEFAULT_OPTS) {
  const valueBn = bnToBn(value);
  const byteLength = bitLength === -1 ? Math.ceil(valueBn.bitLength() / 8) : Math.ceil((bitLength || 0) / 8);
  if (!value) {
    return bitLength === -1 ? new Uint8Array(1) : new Uint8Array(byteLength);
  }
  const output3 = new Uint8Array(byteLength);
  const bn2 = isNegative ? valueBn.toTwos(byteLength * 8) : valueBn;
  output3.set(bn2.toArray(isLe ? "le" : "be", byteLength), 0);
  return output3;
}
function bnToHex(value, { bitLength = -1, isLe = false, isNegative = false } = {}) {
  return u8aToHex(bnToU8a(value, { bitLength, isLe, isNegative }));
}
function bufferToU8a(buffer) {
  return new Uint8Array(buffer || []);
}
const MAX_U8 = BN_TWO.pow(new BN(8 - 2)).isub(BN_ONE);
const MAX_U16 = BN_TWO.pow(new BN(16 - 2)).isub(BN_ONE);
const MAX_U32 = BN_TWO.pow(new BN(32 - 2)).isub(BN_ONE);
const BL_16 = { bitLength: 16 };
const BL_32 = { bitLength: 32 };
function compactToU8a(value) {
  const bn2 = bnToBn(value);
  if (bn2.lte(MAX_U8)) {
    return new Uint8Array([bn2.toNumber() << 2]);
  } else if (bn2.lte(MAX_U16)) {
    return bnToU8a(bn2.shln(2).iadd(BN_ONE), BL_16);
  } else if (bn2.lte(MAX_U32)) {
    return bnToU8a(bn2.shln(2).iadd(BN_TWO), BL_32);
  }
  const u8a = bnToU8a(bn2);
  let length2 = u8a.length;
  while (u8a[length2 - 1] === 0) {
    length2--;
  }
  if (length2 < 4) {
    throw new Error("Invalid length, previous checks match anything less than 2^30");
  }
  return u8aConcatStrict([
    // subtract 4 as minimum (also catered for in decoding)
    new Uint8Array([(length2 - 4 << 2) + 3]),
    u8a.subarray(0, length2)
  ]);
}
function compactAddLength(input) {
  return u8aConcatStrict([
    compactToU8a(input.length),
    input
  ]);
}
function compactFromU8a(input) {
  const u8a = u8aToU8a(input);
  switch (u8a[0] & 3) {
    case 0:
      return [1, new BN(u8a[0] >>> 2)];
    case 1:
      return [2, new BN(u8a[0] + (u8a[1] << 8) >>> 2)];
    case 2:
      return [4, new BN(u8a[0] + (u8a[1] << 8) + (u8a[2] << 16) + u8a[3] * 16777216 >>> 2)];
    default: {
      const offset = (u8a[0] >>> 2) + 5;
      switch (offset) {
        case 5:
          return [5, new BN(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + u8a[4] * 16777216)];
        case 6:
          return [6, new BN(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8)) * 16777216)];
        case 7:
          return [7, new BN(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8) + (u8a[6] << 16)) * 16777216)];
        default:
          return [offset, u8aToBn(u8a.subarray(1, offset))];
      }
    }
  }
}
function compactFromU8aLim(u8a) {
  switch (u8a[0] & 3) {
    case 0:
      return [1, u8a[0] >>> 2];
    case 1:
      return [2, u8a[0] + (u8a[1] << 8) >>> 2];
    case 2:
      return [4, u8a[0] + (u8a[1] << 8) + (u8a[2] << 16) + u8a[3] * 16777216 >>> 2];
    default: {
      switch ((u8a[0] >>> 2) + 5) {
        case 5:
          return [5, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + u8a[4] * 16777216];
        case 6:
          return [6, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8)) * 16777216];
        case 7:
          return [7, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8) + (u8a[6] << 16)) * 16777216];
        default:
          throw new Error("Compact input is > Number.MAX_SAFE_INTEGER");
      }
    }
  }
}
function compactStripLength(input) {
  const [offset, length2] = compactFromU8a(input);
  const total = offset + length2.toNumber();
  return [
    total,
    input.subarray(offset, total)
  ];
}
const MIN_MS = 60 * 1e3;
const HR_MS = MIN_MS * 60;
const DAY_MS = HR_MS * 24;
const ZERO = { days: 0, hours: 0, milliseconds: 0, minutes: 0, seconds: 0 };
function add$1(a, b) {
  return {
    days: (a.days || 0) + b.days,
    hours: (a.hours || 0) + b.hours,
    milliseconds: (a.milliseconds || 0) + b.milliseconds,
    minutes: (a.minutes || 0) + b.minutes,
    seconds: (a.seconds || 0) + b.seconds
  };
}
function extractSecs(ms) {
  const s = ms / 1e3;
  if (s < 60) {
    const seconds = ~~s;
    return add$1({ seconds }, extractTime(ms - seconds * 1e3));
  }
  const m2 = s / 60;
  if (m2 < 60) {
    const minutes = ~~m2;
    return add$1({ minutes }, extractTime(ms - minutes * MIN_MS));
  }
  const h = m2 / 60;
  if (h < 24) {
    const hours = ~~h;
    return add$1({ hours }, extractTime(ms - hours * HR_MS));
  }
  const days = ~~(h / 24);
  return add$1({ days }, extractTime(ms - days * DAY_MS));
}
function extractTime(milliseconds) {
  return !milliseconds ? ZERO : milliseconds < 1e3 ? add$1({ milliseconds }, ZERO) : extractSecs(milliseconds);
}
function floatToU8a(value = 0, { bitLength = 32, isLe = true } = {}) {
  if (bitLength !== 32 && bitLength !== 64) {
    throw new Error("Invalid bitLength provided, expected 32 or 64");
  }
  const result = new Uint8Array(bitLength / 8);
  const dv = new DataView(result.buffer, result.byteOffset);
  if (bitLength === 32) {
    dv.setFloat32(0, Number(value), isLe);
  } else {
    dv.setFloat64(0, Number(value), isLe);
  }
  return result;
}
function isBoolean(value) {
  return typeof value === "boolean";
}
const NUMBER_REGEX = new RegExp("(\\d+?)(?=(\\d{3})+(?!\\d)|$)", "g");
function formatDecimal(value, separator = ",") {
  const isNegative = value[0].startsWith("-");
  const matched = isNegative ? value.substring(1).match(NUMBER_REGEX) : value.match(NUMBER_REGEX);
  return matched ? `${isNegative ? "-" : ""}${matched.join(separator)}` : value;
}
function getSeparator(locale) {
  return {
    decimal: 0.1.toLocaleString(locale).substring(1, 2),
    thousand: 1e3.toLocaleString(locale).substring(1, 2)
  };
}
const SI_MID = 8;
const SI = [
  { power: -24, text: "yocto", value: "y" },
  { power: -21, text: "zepto", value: "z" },
  { power: -18, text: "atto", value: "a" },
  { power: -15, text: "femto", value: "f" },
  { power: -12, text: "pico", value: "p" },
  { power: -9, text: "nano", value: "n" },
  { power: -6, text: "micro", value: "µ" },
  { power: -3, text: "milli", value: "m" },
  { power: 0, text: "Unit", value: "-" },
  { power: 3, text: "Kilo", value: "k" },
  { power: 6, text: "Mill", value: "M" },
  { power: 9, text: "Bill", value: "B" },
  { power: 12, text: "Tril", value: "T" },
  { power: 15, text: "Peta", value: "P" },
  { power: 18, text: "Exa", value: "E" },
  { power: 21, text: "Zeta", value: "Z" },
  { power: 24, text: "Yotta", value: "Y" }
];
function findSi(type) {
  for (let i = 0, count = SI.length; i < count; i++) {
    if (SI[i].value === type) {
      return SI[i];
    }
  }
  return SI[SI_MID];
}
function calcSi(text, decimals, forceUnit) {
  if (forceUnit) {
    return findSi(forceUnit);
  }
  const siDefIndex = SI_MID - 1 + Math.ceil((text.length - decimals) / 3);
  return SI[siDefIndex] || SI[siDefIndex < 0 ? 0 : SI.length - 1];
}
const DEFAULT_DECIMALS = 0;
const DEFAULT_UNIT = SI[SI_MID].text;
let defaultDecimals = DEFAULT_DECIMALS;
let defaultUnit = DEFAULT_UNIT;
function _formatBalance(input, { decimals = defaultDecimals, forceUnit, locale = "en", withAll = false, withSi = true, withSiFull = false, withUnit = true, withZero = true } = {}) {
  let text = bnToBn(input).toString();
  if (text.length === 0 || text === "0") {
    return "0";
  }
  let sign2 = "";
  if (text[0].startsWith("-")) {
    sign2 = "-";
    text = text.substring(1);
  }
  const si = calcSi(text, decimals, forceUnit);
  const mid = text.length - (decimals + si.power);
  const pre = mid <= 0 ? "0" : text.substring(0, mid);
  let post = text.padStart(mid < 0 ? decimals : 1, "0").substring(mid < 0 ? 0 : mid).padEnd(withAll ? Math.max(decimals, 4) : 4, "0").substring(0, withAll ? Math.max(4, decimals + si.power) : 4);
  if (!withZero) {
    let end = post.length - 1;
    do {
      if (post[end] === "0") {
        end--;
      }
    } while (post[end] === "0");
    post = post.substring(0, end + 1);
  }
  const unit = isBoolean(withUnit) ? SI[SI_MID].text : withUnit;
  const units = withSi || withSiFull ? si.value === "-" ? withUnit ? ` ${unit}` : "" : ` ${withSiFull ? `${si.text}${withUnit ? " " : ""}` : si.value}${withUnit ? unit : ""}` : "";
  const { decimal, thousand } = getSeparator(locale);
  return `${sign2}${formatDecimal(pre, thousand)}${post && `${decimal}${post}`}${units}`;
}
const formatBalance = _formatBalance;
formatBalance.calcSi = (text, decimals = defaultDecimals) => calcSi(text, decimals);
formatBalance.findSi = findSi;
formatBalance.getDefaults = () => {
  return {
    decimals: defaultDecimals,
    unit: defaultUnit
  };
};
formatBalance.getOptions = (decimals = defaultDecimals) => {
  return SI.filter(({ power }) => power < 0 ? decimals + power >= 0 : true);
};
formatBalance.setDefaults = ({ decimals, unit }) => {
  defaultDecimals = (Array.isArray(decimals) ? decimals[0] : decimals) ?? defaultDecimals;
  defaultUnit = (Array.isArray(unit) ? unit[0] : unit) ?? defaultUnit;
  SI[SI_MID].text = defaultUnit;
};
function zeroPad(value) {
  return value.toString().padStart(2, "0");
}
function formatDate(date) {
  const year = date.getFullYear().toString();
  const month = zeroPad(date.getMonth() + 1);
  const day = zeroPad(date.getDate());
  const hour = zeroPad(date.getHours());
  const minute = zeroPad(date.getMinutes());
  const second = zeroPad(date.getSeconds());
  return `${year}-${month}-${day} ${hour}:${minute}:${second}`;
}
function formatValue(elapsed) {
  if (elapsed < 15) {
    return `${elapsed.toFixed(1)}s`;
  } else if (elapsed < 60) {
    return `${elapsed | 0}s`;
  } else if (elapsed < 3600) {
    return `${elapsed / 60 | 0}m`;
  }
  return `${elapsed / 3600 | 0}h`;
}
function formatElapsed(now, value) {
  const tsNow = (now == null ? void 0 : now.getTime()) || 0;
  const tsValue = value instanceof Date ? value.getTime() : bnToBn(value).toNumber();
  return tsNow && tsValue ? formatValue(Math.max(Math.abs(tsNow - tsValue), 0) / 1e3) : "0.0s";
}
function formatNumber(value, { locale = "en" } = {}) {
  const { thousand } = getSeparator(locale);
  return formatDecimal(bnToBn(value).toString(), thousand);
}
function hexHasPrefix(value) {
  return !!value && isHex(value, -1);
}
function hexAddPrefix(value) {
  return value && hexHasPrefix(value) ? value : `0x${value && value.length % 2 === 1 ? "0" : ""}${value || ""}`;
}
function hexFixLength(value, bitLength = -1, withPadding = false) {
  const strLength = Math.ceil(bitLength / 4);
  const hexLength = strLength + 2;
  return hexAddPrefix(bitLength === -1 || value.length === hexLength || !withPadding && value.length < hexLength ? hexStripPrefix(value) : value.length > hexLength ? hexStripPrefix(value).slice(-1 * strLength) : `${"0".repeat(strLength)}${hexStripPrefix(value)}`.slice(-1 * strLength));
}
function hexToNumber$1(value) {
  return value ? hexToBn(value).toNumber() : NaN;
}
function hexToString(_value) {
  return u8aToString(hexToU8a(_value));
}
function isArray$2(value) {
  return Array.isArray(value);
}
function isString(value) {
  return typeof value === "string" || value instanceof String;
}
function isAsciiStr(str) {
  for (let i = 0, count = str.length; i < count; i++) {
    const b = str.charCodeAt(i);
    if (b < 32 || b > 126) {
      return false;
    }
  }
  return true;
}
function isAsciiBytes(u8a) {
  for (let i = 0, count = u8a.length; i < count; i++) {
    const b = u8a[i] | 0;
    if (b < 32 || b > 126) {
      return false;
    }
  }
  return true;
}
function isAscii(value) {
  return isString(value) ? isHex(value) ? isAsciiBytes(u8aToU8a(value)) : isAsciiStr(value) : value ? isAsciiBytes(value) : false;
}
const isClass = /* @__PURE__ */ isOnFunction("isPrototypeOf", "hasOwnProperty");
function isChildClass(Parent, Child) {
  return isClass(Child) && isClass(Parent) ? Parent === Child || Parent.isPrototypeOf(Child) : false;
}
const checkCodec = /* @__PURE__ */ isOnObject("toHex", "toHuman", "toU8a");
const checkRegistry = /* @__PURE__ */ isOnObject("get");
function isCodec(value) {
  return checkCodec(value) && checkRegistry(value.registry);
}
const isCompact = /* @__PURE__ */ isOnObject("toBigInt", "toBn", "toNumber", "unwrap");
function isError(value) {
  return (value && value.constructor) === Error || value instanceof Error;
}
function isInstanceOf(value, Clazz) {
  return (value && value.constructor) === Clazz || value instanceof Clazz;
}
const v4 = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
const v6s = "[a-fA-F\\d]{1,4}";
const v6 = `
(?:
(?:${v6s}:){7}(?:${v6s}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:${v6s}:){6}(?:${v4}|:${v6s}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:${v6s}:){5}(?::${v4}|(?::${v6s}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:${v6s}:){4}(?:(?::${v6s}){0,1}:${v4}|(?::${v6s}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:${v6s}:){3}(?:(?::${v6s}){0,2}:${v4}|(?::${v6s}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:${v6s}:){2}(?:(?::${v6s}){0,3}:${v4}|(?::${v6s}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:${v6s}:){1}(?:(?::${v6s}){0,4}:${v4}|(?::${v6s}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::(?:(?::${v6s}){0,5}:${v4}|(?::${v6s}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1
`.replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
const v46Exact = new RegExp(`(?:^${v4}$)|(?:^${v6}$)`);
const v4exact = new RegExp(`^${v4}$`);
const v6exact = new RegExp(`^${v6}$`);
function isIp(value, type) {
  switch (type) {
    case "v4":
      return v4exact.test(value);
    case "v6":
      return v6exact.test(value);
    default:
      return v46Exact.test(value);
  }
}
function replacer(_23, v) {
  return isBigInt(v) ? v.toString() : v;
}
function stringify$1(value, space) {
  return JSON.stringify(value, replacer, space);
}
function isJsonObject(value) {
  const str = typeof value !== "string" ? stringify$1(value) : value;
  try {
    const obj = JSON.parse(str);
    return typeof obj === "object" && obj !== null;
  } catch {
    return false;
  }
}
function isNull(value) {
  return value === null;
}
function isNumber(value) {
  return typeof value === "number";
}
const isObservable = /* @__PURE__ */ isOn("next");
const isPromise$3 = /* @__PURE__ */ isOnObject("catch", "then");
const ELF_MAGIC = new Uint8Array([127, 69, 76, 70]);
const PVM_MAGIC = new Uint8Array([80, 86, 77, 0]);
function isRiscV(bytes2) {
  if (isU8a(bytes2)) {
    const start = bytes2.subarray(0, 4);
    return u8aEq(start, PVM_MAGIC) || u8aEq(start, ELF_MAGIC);
  }
  return false;
}
const REGEX_DEV = /(Development|Local Testnet)$/;
function isTestChain(chain2) {
  if (!chain2) {
    return false;
  }
  return !!REGEX_DEV.test(chain2.toString());
}
function isUndefined(value) {
  return value === void 0;
}
function isUtf8(value) {
  if (!value) {
    return isString(value);
  }
  const u8a = u8aToU8a(value);
  const len = u8a.length;
  let i = 0;
  while (i < len) {
    if (u8a[i] <= 127) {
      i += 1;
    } else if (u8a[i] >= 194 && u8a[i] <= 223) {
      if (i + 1 < len) {
        if (u8a[i + 1] < 128 || u8a[i + 1] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 2;
    } else if (u8a[i] === 224) {
      if (i + 2 < len) {
        if (u8a[i + 1] < 160 || u8a[i + 1] > 191) {
          return false;
        }
        if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 3;
    } else if (u8a[i] >= 225 && u8a[i] <= 236) {
      if (i + 2 < len) {
        if (u8a[i + 1] < 128 || u8a[i + 1] > 191) {
          return false;
        }
        if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 3;
    } else if (u8a[i] === 237) {
      if (i + 2 < len) {
        if (u8a[i + 1] < 128 || u8a[i + 1] > 159) {
          return false;
        }
        if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 3;
    } else if (u8a[i] >= 238 && u8a[i] <= 239) {
      if (i + 2 < len) {
        if (u8a[i + 1] < 128 || u8a[i + 1] > 191) {
          return false;
        }
        if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 3;
    } else if (u8a[i] === 240) {
      if (i + 3 < len) {
        if (u8a[i + 1] < 144 || u8a[i + 1] > 191) {
          return false;
        }
        if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
          return false;
        }
        if (u8a[i + 3] < 128 || u8a[i + 3] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 4;
    } else if (u8a[i] >= 241 && u8a[i] <= 243) {
      if (i + 3 < len) {
        if (u8a[i + 1] < 128 || u8a[i + 1] > 191) {
          return false;
        }
        if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
          return false;
        }
        if (u8a[i + 3] < 128 || u8a[i + 3] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 4;
    } else if (u8a[i] === 244) {
      if (i + 3 < len) {
        if (u8a[i + 1] < 128 || u8a[i + 1] > 143) {
          return false;
        }
        if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
          return false;
        }
        if (u8a[i + 3] < 128 || u8a[i + 3] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 4;
    } else {
      return false;
    }
  }
  return true;
}
const WASM_MAGIC = new Uint8Array([0, 97, 115, 109]);
function isWasm(value) {
  return isU8a(value) && u8aEq(value.subarray(0, 4), WASM_MAGIC);
}
function lazyMethod(result, item, creator, getName, index = 0) {
  const name = getName ? getName(item, index) : item.toString();
  let value;
  Object.defineProperty(result, name, {
    // This allows for re-configuration with the embedded defineProperty below
    // and ensures that on tested browsers and Node, it _will_ be redefined
    // and thus short-circuited for future access
    configurable: true,
    enumerable: true,
    // Use a function here, we don't want to capture the outer this, i.e.
    // don't use arrow functions in this context since we have a this inside
    get: function() {
      if (value === void 0) {
        value = creator(item, index, this);
        try {
          Object.defineProperty(this, name, { value });
        } catch {
        }
      }
      return value;
    }
  });
}
function lazyMethods(result, items, creator, getName) {
  for (let i = 0, count = items.length; i < count; i++) {
    lazyMethod(result, items[i], creator, getName, i);
  }
  return result;
}
function identity$2(value) {
  return value;
}
function noop$2() {
}
const logTo = {
  debug: "log",
  error: "error",
  log: "log",
  warn: "warn"
};
function formatOther(value) {
  if (value && isObject$1(value) && value.constructor === Object) {
    const result = {};
    for (const [k, v] of Object.entries(value)) {
      result[k] = loggerFormat(v);
    }
    return result;
  }
  return value;
}
function loggerFormat(value) {
  if (Array.isArray(value)) {
    return value.map(loggerFormat);
  } else if (isBn(value)) {
    return value.toString();
  } else if (isU8a(value) || isBuffer(value)) {
    return u8aToHex(u8aToU8a(value));
  }
  return formatOther(value);
}
function formatWithLength(maxLength) {
  return (v) => {
    if (maxLength <= 0) {
      return v;
    }
    const r = `${v}`;
    return r.length < maxLength ? v : `${r.substring(0, maxLength)} ...`;
  };
}
function apply(log2, type, values, maxSize = -1) {
  if (values.length === 1 && isFunction$1(values[0])) {
    const fnResult = values[0]();
    return apply(log2, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);
  }
  console[logTo[log2]](formatDate(/* @__PURE__ */ new Date()), type, ...values.map(loggerFormat).map(formatWithLength(maxSize)));
}
function isDebugOn(e, type) {
  return !!e && (e === "*" || type === e || e.endsWith("*") && type.startsWith(e.slice(0, -1)));
}
function isDebugOff(e, type) {
  return !!e && (e.startsWith("-") && (type === e.slice(1) || e.endsWith("*") && type.startsWith(e.slice(1, -1))));
}
function getDebugFlag(env, type) {
  let flag = false;
  for (const e of env) {
    if (isDebugOn(e, type)) {
      flag = true;
    } else if (isDebugOff(e, type)) {
      flag = false;
    }
  }
  return flag;
}
function parseEnv(type) {
  var _a2, _b, _c, _d;
  const maxSize = parseInt(((_b = (_a2 = xglobal$3.process) == null ? void 0 : _a2.env) == null ? void 0 : _b["DEBUG_MAX"]) || "-1", 10);
  return [
    getDebugFlag((((_d = (_c = xglobal$3.process) == null ? void 0 : _c.env) == null ? void 0 : _d["DEBUG"]) || "").toLowerCase().split(","), type),
    isNaN(maxSize) ? -1 : maxSize
  ];
}
function logger(origin) {
  const type = `${origin.toUpperCase()}:`.padStart(16);
  const [isDebug, maxSize] = parseEnv(origin.toLowerCase());
  return {
    debug: isDebug ? (...values) => apply("debug", type, values, maxSize) : noop$2,
    error: (...values) => apply("error", type, values),
    log: (...values) => apply("log", type, values),
    noop: noop$2,
    warn: (...values) => apply("warn", type, values)
  };
}
function defaultGetId() {
  return "none";
}
function memoize$1(fn, { getInstanceId = defaultGetId } = {}) {
  const cache = {};
  const memoized = (...args) => {
    const stringParams = stringify$1(args);
    const instanceId = getInstanceId();
    if (!cache[instanceId]) {
      cache[instanceId] = {};
    }
    if (cache[instanceId][stringParams] === void 0) {
      cache[instanceId][stringParams] = fn(...args);
    }
    return cache[instanceId][stringParams];
  };
  memoized.unmemoize = (...args) => {
    var _a2;
    const stringParams = stringify$1(args);
    const instanceId = getInstanceId();
    if (((_a2 = cache[instanceId]) == null ? void 0 : _a2[stringParams]) !== void 0) {
      delete cache[instanceId][stringParams];
    }
  };
  return memoized;
}
function nextTick(onExec, onError) {
  setTimeout(() => {
    Promise.resolve().then(() => {
      onExec();
    }).catch((error2) => {
      if (onError) {
        onError(error2);
      } else {
        console.error(error2);
      }
    });
  }, 0);
}
function numberToHex(value, bitLength = -1) {
  const hex2 = (!value || Number.isNaN(value) ? 0 : value).toString(16);
  return hexFixLength(hex2.length % 2 ? `0${hex2}` : hex2, bitLength, true);
}
function numberToU8a(value, bitLength = -1) {
  return hexToU8a(numberToHex(value, bitLength));
}
function objectClear(value) {
  const keys = Object.keys(value);
  for (let i = 0, count = keys.length; i < count; i++) {
    delete value[keys[i]];
  }
  return value;
}
function objectSpread(dest, ...sources2) {
  for (let i = 0, count = sources2.length; i < count; i++) {
    const src2 = sources2[i];
    if (src2) {
      if (typeof src2.entries === "function") {
        for (const [key, value] of src2.entries()) {
          dest[key] = value;
        }
      } else {
        Object.assign(dest, src2);
      }
    }
  }
  return dest;
}
function objectCopy(source) {
  return objectSpread({}, source);
}
function objectEntries(obj) {
  return Object.entries(obj);
}
function objectKeys(value) {
  return Object.keys(value);
}
function objectProperty(that, key, getter, getName, index = 0) {
  const name = getName ? getName(key, index) : key;
  if (!(name in that)) {
    Object.defineProperty(that, name, {
      enumerable: true,
      // Unlike in lazy, we always call into the upper function, i.e. this method
      // does not cache old values (it is expected to be used for dynamic values)
      get: function() {
        return getter(key, index, this);
      }
    });
  }
}
function objectProperties(that, keys, getter, getName) {
  for (let i = 0, count = keys.length; i < count; i++) {
    objectProperty(that, keys[i], getter, getName, i);
  }
}
function objectValues(obj) {
  return Object.values(obj);
}
function promisify(self2, fn, ...params) {
  return new Promise((resolve, reject) => {
    fn.apply(self2, params.concat((error2, result) => {
      if (error2) {
        reject(error2);
      } else {
        resolve(result);
      }
    }));
  });
}
const CC_TO_UP = new Array(256);
const CC_TO_LO = new Array(256);
for (let i = 0, count = CC_TO_UP.length; i < count; i++) {
  CC_TO_LO[i] = String.fromCharCode(i).toLowerCase();
  CC_TO_UP[i] = String.fromCharCode(i).toUpperCase();
}
function formatAllCaps(w) {
  return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP[w.charCodeAt(w.length - 1)];
}
function converter$1(format) {
  return (value) => {
    const parts = value.replace(/[-_., ]+/g, " ").trim().split(" ");
    let result = "";
    for (let i = 0, count = parts.length; i < count; i++) {
      const w = parts[i];
      result += format(/^[\dA-Z]+$/.test(w) ? w.toLowerCase() : w.replace(/^[\dA-Z]{2,}[^a-z]/, formatAllCaps), i);
    }
    return result;
  };
}
const stringCamelCase = /* @__PURE__ */ converter$1((w, i) => (i ? CC_TO_UP[w.charCodeAt(0)] : CC_TO_LO[w.charCodeAt(0)]) + w.slice(1));
const stringPascalCase = /* @__PURE__ */ converter$1((w) => CC_TO_UP[w.charCodeAt(0)] + w.slice(1));
function converter(map2) {
  return (value) => value ? map2[value.charCodeAt(0)] + value.slice(1) : "";
}
const stringLowerFirst = /* @__PURE__ */ converter(CC_TO_LO);
const stringUpperFirst = /* @__PURE__ */ converter(CC_TO_UP);
function stringShorten(value, prefixLength = 6) {
  return value.length <= 2 + 2 * prefixLength ? value.toString() : `${value.substring(0, prefixLength)}…${value.slice(-prefixLength)}`;
}
function stringToHex(value) {
  return u8aToHex(stringToU8a(value));
}
const util$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  BN,
  BN_BILLION,
  BN_EIGHT,
  BN_FIVE,
  BN_FOUR,
  BN_HUNDRED,
  BN_MAX_INTEGER,
  BN_MILLION,
  BN_NINE,
  BN_ONE,
  BN_QUINTILL,
  BN_SEVEN,
  BN_SIX,
  BN_SQRT_MAX_INTEGER,
  BN_TEN,
  BN_THOUSAND,
  BN_THREE,
  BN_TWO,
  BN_ZERO,
  POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG,
  U8A_WRAP_ETHEREUM,
  U8A_WRAP_POSTFIX,
  U8A_WRAP_PREFIX,
  _0n: _0n$7,
  _1000n,
  _100n,
  _10n: _10n$1,
  _1Bn,
  _1Mn,
  _1Qn,
  _1n: _1n$9,
  _2n: _2n$7,
  _2pow53n,
  _3n: _3n$2,
  _4n: _4n$2,
  _5n: _5n$2,
  _6n,
  _7n: _7n$2,
  _8n: _8n$2,
  _9n,
  _sqrt2pow53n,
  arrayChunk,
  arrayFilter,
  arrayFlatten,
  arrayRange,
  arrayShuffle,
  arrayUnzip,
  arrayZip,
  assert,
  assertReturn,
  assertUnreachable,
  bnFromHex: hexToBn,
  bnMax,
  bnMin,
  bnSqrt,
  bnToBn,
  bnToHex,
  bnToU8a,
  bufferToU8a,
  calcSi,
  compactAddLength,
  compactFromU8a,
  compactFromU8aLim,
  compactStripLength,
  compactToU8a,
  detectPackage,
  extractTime,
  findSi,
  floatToU8a,
  formatBalance,
  formatDate,
  formatDecimal,
  formatElapsed,
  formatNumber,
  hasBigInt,
  hasBuffer,
  hasCjs,
  hasDirname,
  hasEsm,
  hasProcess,
  hasWasm,
  hexAddPrefix,
  hexFixLength,
  hexHasPrefix,
  hexStripPrefix,
  hexToBigInt,
  hexToBn,
  hexToNumber: hexToNumber$1,
  hexToString,
  hexToU8a,
  identity: identity$2,
  isArray: isArray$2,
  isAscii,
  isBigInt,
  isBn,
  isBoolean,
  isBuffer,
  isChildClass,
  isClass,
  isCodec,
  isCompact,
  isError,
  isFunction: isFunction$1,
  isHex,
  isInstanceOf,
  isIp,
  isJsonObject,
  isNull,
  isNumber,
  isObject: isObject$1,
  isObservable,
  isPromise: isPromise$3,
  isRiscV,
  isString,
  isTestChain,
  isToBigInt,
  isToBn: isToBn$1,
  isU8a,
  isUndefined,
  isUtf8,
  isWasm,
  lazyMethod,
  lazyMethods,
  logger,
  loggerFormat,
  memoize: memoize$1,
  nMax,
  nMin,
  nSqrt,
  nToBigInt,
  nToHex,
  nToU8a,
  nextTick,
  noop: noop$2,
  numberToHex,
  numberToU8a,
  objectClear,
  objectCopy,
  objectEntries,
  objectKeys,
  objectProperties,
  objectProperty,
  objectSpread,
  objectValues,
  packageInfo: packageInfo$1,
  promisify,
  stringCamelCase,
  stringLowerFirst,
  stringPascalCase,
  stringShorten,
  stringToHex,
  stringToU8a,
  stringUpperFirst,
  stringify: stringify$1,
  u8aCmp,
  u8aConcat,
  u8aConcatStrict,
  u8aEmpty,
  u8aEq,
  u8aFixLength,
  u8aIsWrapped,
  u8aSorted,
  u8aToBigInt,
  u8aToBn,
  u8aToBuffer,
  u8aToFloat,
  u8aToHex,
  u8aToNumber,
  u8aToString,
  u8aToU8a,
  u8aUnwrapBytes,
  u8aWrapBytes
}, Symbol.toStringTag, { value: "Module" }));
class bool extends Boolean {
  constructor(registry, value = false) {
    super(isU8a(value) ? value[0] === 1 : value instanceof Boolean ? value.valueOf() : !!value);
    __publicField(this, "registry");
    __publicField(this, "createdAtHash");
    __publicField(this, "initialU8aLength", 1);
    __publicField(this, "isStorageFallback");
    this.registry = registry;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return 1 | 0;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value (true when it wraps false/default)
   */
  get isEmpty() {
    return this.isFalse;
  }
  /**
   * @description Checks if the value is an empty value (always false)
   */
  get isFalse() {
    return !this.isTrue;
  }
  /**
   * @description Checks if the value is an empty value (always false)
   */
  get isTrue() {
    return this.valueOf();
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return this.valueOf() === (other instanceof Boolean ? other.valueOf() : other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      outer: [this.toU8a()]
    };
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.valueOf();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.toJSON();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "bool";
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.toJSON().toString();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */
  toU8a(_isBare) {
    return new Uint8Array([this.valueOf() ? 1 : 0]);
  }
}
class Float extends Number {
  constructor(registry, value, { bitLength = 32 } = {}) {
    super(isU8a(value) || isHex(value) ? value.length === 0 ? 0 : u8aToFloat(u8aToU8a(value), { bitLength }) : value || 0);
    __publicField(this, "encodedLength");
    __publicField(this, "registry");
    __publicField(this, "createdAtHash");
    __publicField(this, "initialU8aLength");
    __publicField(this, "isStorageFallback");
    __publicField(this, "__internal__bitLength");
    this.__internal__bitLength = bitLength;
    this.encodedLength = bitLength / 8;
    this.initialU8aLength = this.encodedLength;
    this.registry = registry;
  }
  static with(bitLength) {
    return class extends Float {
      constructor(registry, value) {
        super(registry, value, { bitLength });
      }
    };
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Returns true if the type wraps an empty/default all-0 value
   */
  get isEmpty() {
    return this.valueOf() === 0;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return this.valueOf() === Number(other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      outer: [this.toU8a()]
    };
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toString();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.toHex();
  }
  /**
   * @description Returns the number representation (Same as valueOf)
   */
  toNumber() {
    return this.valueOf();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.toNumber();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `f${this.__internal__bitLength}`;
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */
  toU8a(_isBare) {
    return floatToU8a(this, {
      bitLength: this.__internal__bitLength
    });
  }
}
function hasEq(o) {
  return isFunction$1(o.eq);
}
function compareArray(a, b) {
  if (Array.isArray(b)) {
    return a.length === b.length && isUndefined(a.find((v, index) => hasEq(v) ? !v.eq(b[index]) : v !== b[index]));
  }
  return false;
}
function hasMismatch(a, b) {
  return isUndefined(a) || (hasEq(a) ? !a.eq(b) : a !== b);
}
function notEntry(value) {
  return !Array.isArray(value) || value.length !== 2;
}
function compareMapArray(a, b) {
  return a.size === b.length && !b.some((e) => notEntry(e) || hasMismatch(a.get(e[0]), e[1]));
}
function compareMap(a, b) {
  if (Array.isArray(b)) {
    return compareMapArray(a, b);
  } else if (b instanceof Map) {
    return compareMapArray(a, [...b.entries()]);
  } else if (isObject$1(b)) {
    return compareMapArray(a, Object.entries(b));
  }
  return false;
}
function compareSetArray(a, b) {
  return a.size === b.length && !b.some((e) => !a.has(e));
}
function compareSet(a, b) {
  if (Array.isArray(b)) {
    return compareSetArray(a, b);
  } else if (b instanceof Set) {
    return compareSetArray(a, [...b.values()]);
  } else if (isObject$1(b)) {
    return compareSetArray(a, Object.values(b));
  }
  return false;
}
function formatFailure(registry, fn, _result, { message }, u8a, i, count, Type2, key) {
  let type = "";
  try {
    type = `: ${new Type2(registry).toRawType()}`;
  } catch {
  }
  return `${fn}: failed at ${u8aToHex(u8a.subarray(0, 16))}…${key ? ` on ${key}` : ""} (index ${i + 1}/${count})${type}:: ${message}`;
}
function decodeU8a$6(registry, result, u8a, [Types, keys]) {
  const count = result.length;
  let offset = 0;
  let i = 0;
  try {
    while (i < count) {
      const value = new Types[i](registry, u8a.subarray(offset));
      offset += value.initialU8aLength || value.encodedLength;
      result[i] = value;
      i++;
    }
  } catch (error2) {
    throw new Error(formatFailure(registry, "decodeU8a", result, error2, u8a.subarray(offset), i, count, Types[i], keys[i]));
  }
  return [result, offset];
}
function decodeU8aStruct(registry, result, u8a, [Types, keys]) {
  const count = result.length;
  let offset = 0;
  let i = 0;
  try {
    while (i < count) {
      const value = new Types[i](registry, u8a.subarray(offset));
      offset += value.initialU8aLength || value.encodedLength;
      result[i] = [keys[i], value];
      i++;
    }
  } catch (error2) {
    throw new Error(formatFailure(registry, "decodeU8aStruct", result, error2, u8a.subarray(offset), i, count, Types[i], keys[i]));
  }
  return [result, offset];
}
function decodeU8aVec(registry, result, u8a, startAt, Type2) {
  const count = result.length;
  let offset = startAt;
  let i = 0;
  try {
    while (i < count) {
      const value = new Type2(registry, u8a.subarray(offset));
      offset += value.initialU8aLength || value.encodedLength;
      result[i] = value;
      i++;
    }
  } catch (error2) {
    throw new Error(formatFailure(registry, "decodeU8aVec", result, error2, u8a.subarray(offset), i, count, Type2));
  }
  return [offset, offset - startAt];
}
const BOUNDED = ["BTreeMap", "BTreeSet", "HashMap", "Vec"];
const ALLOWED_BOXES = BOUNDED.concat(["Compact", "DoNotConstruct", "Int", "Linkage", "Range", "RangeInclusive", "Result", "Opaque", "Option", "UInt", "WrapperKeepOpaque", "WrapperOpaque"]);
const BOX_PRECEDING = ["<", "(", "[", '"', ",", " "];
const mappings = [
  // alias <T::InherentOfflineReport as InherentOfflineReport>::Inherent -> InherentOfflineReport
  alias("<T::InherentOfflineReport as InherentOfflineReport>::Inherent", "InherentOfflineReport", false),
  alias("VecDeque<", "Vec<", false),
  // <T::Balance as HasCompact>
  cleanupCompact(),
  // Change BoundedVec<Type, Size> to Vec<Type>
  removeExtensions("Bounded", true),
  // Change WeakVec<Type> to Vec<Type>
  removeExtensions("Weak", false),
  // Remove all the trait prefixes
  removeTraits(),
  // remove PairOf<T> -> (T, T)
  removePairOf(),
  // remove boxing, `Box<Proposal>` -> `Proposal`
  removeWrap("Box<"),
  // remove generics, `MisbehaviorReport<Hash, BlockNumber>` -> `MisbehaviorReport`
  removeGenerics(),
  // alias String -> Text (compat with jsonrpc methods)
  alias("String", "Text"),
  // alias Vec<u8> -> Bytes
  alias("Vec<u8>", "Bytes"),
  alias("&\\[u8\\]", "Bytes"),
  alias("&'static\\[u8\\]", "Bytes"),
  // alias RawAddress -> Address
  alias("RawAddress", "Address"),
  // lookups, mapped to Address/AccountId as appropriate in runtime
  alias("Lookup::Source", "LookupSource"),
  alias("Lookup::Target", "LookupTarget"),
  // HACK duplication between contracts & primitives, however contracts prefixed with exec
  alias("exec::StorageKey", "ContractStorageKey"),
  // flattens tuples with one value, `(AccountId)` -> `AccountId`
  flattenSingleTuple(),
  // converts ::Type to Type, <T as Trait<I>>::Proposal -> Proposal
  removeColons(),
  // remove all trailing spaces - this should always be the last
  trim$1()
];
function trim$1() {
  return (value) => value.trim();
}
function findClosing(value, start) {
  let depth = 0;
  for (let i = start, count = value.length; i < count; i++) {
    if (value[i] === ">") {
      if (!depth) {
        return i;
      }
      depth--;
    } else if (value[i] === "<") {
      depth++;
    }
  }
  throw new Error(`Unable to find closing matching <> on '${value}' (start ${start})`);
}
function alias(src2, dest, withChecks = true) {
  const from2 = new RegExp(`(^${src2}|${BOX_PRECEDING.map((box) => `\\${box}${src2}`).join("|")})`, "g");
  const to = (src3) => {
    from2.lastIndex = 0;
    return withChecks && BOX_PRECEDING.includes(src3[0]) ? `${src3[0]}${dest}` : dest;
  };
  return (value) => value.replace(from2, to);
}
function cleanupCompact() {
  return (value) => {
    if (value.includes(" as HasCompact")) {
      for (let i = 0, count = value.length; i < count; i++) {
        if (value[i] === "<") {
          const end = findClosing(value, i + 1) - 14;
          if (value.substring(end, end + 14) === " as HasCompact") {
            value = `Compact<${value.substring(i + 1, end)}>`;
          }
        }
      }
    }
    return value;
  };
}
function flattenSingleTuple() {
  const from1 = /,\)/g;
  const from2 = /\(([^,]+)\)/;
  return (value) => {
    from1.lastIndex = 0;
    return value.replace(from1, ")").replace(from2, "$1");
  };
}
function replaceTagWith(value, matcher, replacer2) {
  let index = -1;
  while (true) {
    index = value.indexOf(matcher, index + 1);
    if (index === -1) {
      return value;
    }
    const start = index + matcher.length;
    const end = findClosing(value, start);
    value = `${value.substring(0, index)}${replacer2(value.substring(start, end))}${value.substring(end + 1)}`;
  }
}
function removeExtensions(type, isSized) {
  return (value) => {
    for (let i = 0, count = BOUNDED.length; i < count; i++) {
      const tag = BOUNDED[i];
      value = replaceTagWith(value, `${type}${tag}<`, (v) => {
        const parts = v.split(",").map((s) => s.trim()).filter((s) => s);
        if (isSized) {
          parts.pop();
        }
        return `${tag}<${parts.join(",")}>`;
      });
    }
    return value;
  };
}
function removeColons() {
  return (value) => {
    let index = 0;
    while (index !== -1) {
      index = value.indexOf("::");
      if (index === 0) {
        value = value.substring(2);
      } else if (index !== -1) {
        let start = index;
        while (start !== -1 && !BOX_PRECEDING.includes(value[start])) {
          start--;
        }
        value = `${value.substring(0, start + 1)}${value.substring(index + 2)}`;
      }
    }
    return value;
  };
}
function removeGenerics() {
  return (value) => {
    for (let i = 0, count = value.length; i < count; i++) {
      if (value[i] === "<") {
        const box = ALLOWED_BOXES.find((box2) => {
          const start = i - box2.length;
          return start >= 0 && value.substring(start, i) === box2 && // make sure it is stand-alone, i.e. don't catch ElectionResult<...> as Result<...>
          (start === 0 || BOX_PRECEDING.includes(value[start - 1]));
        });
        if (!box) {
          const end = findClosing(value, i + 1);
          value = `${value.substring(0, i)}${value.substring(end + 1)}`;
        }
      }
    }
    return value;
  };
}
function removePairOf() {
  const replacer2 = (v) => `(${v},${v})`;
  return (value) => replaceTagWith(value, "PairOf<", replacer2);
}
function removeTraits() {
  const from1 = /\s/g;
  const from2 = /(T|Self)::/g;
  const from3 = /<(T|Self)asTrait>::/g;
  const from4 = /<Tas[a-z]+::Trait>::/g;
  const from5 = /<LookupasStaticLookup>/g;
  const from6 = /::Type/g;
  return (value) => {
    from1.lastIndex = 0;
    from2.lastIndex = 0;
    from3.lastIndex = 0;
    from4.lastIndex = 0;
    from5.lastIndex = 0;
    from6.lastIndex = 0;
    return value.replace(from1, "").replace(from2, "").replace(from3, "").replace(from4, "").replace(from5, "Lookup").replace(from6, "");
  };
}
function removeWrap(check) {
  const replacer2 = (v) => v;
  return (value) => replaceTagWith(value, check, replacer2);
}
const sanitizeMap = /* @__PURE__ */ new Map();
function sanitize(value) {
  const startValue = value.toString();
  const memoized = sanitizeMap.get(startValue);
  if (memoized) {
    return memoized;
  }
  let result = startValue;
  for (let i = 0, count = mappings.length; i < count; i++) {
    result = mappings[i](result);
  }
  sanitizeMap.set(startValue, result);
  return result;
}
function isArrayLike$1(arg) {
  return arg instanceof Uint8Array || Array.isArray(arg);
}
function isEnum(arg) {
  return isCodec(arg) && isNumber(arg.index) && isCodec(arg.value);
}
function isNumberLike(arg) {
  return isNumber(arg) || isBn(arg) || isBigInt(arg);
}
function sortArray(a, b) {
  let sortRes = 0;
  const minLen = Math.min(a.length, b.length);
  for (let i = 0; i < minLen; ++i) {
    sortRes = sortAsc(a[i], b[i]);
    if (sortRes !== 0) {
      return sortRes;
    }
  }
  return a.length - b.length;
}
function sortAsc(a, b) {
  if (isNumberLike(a) && isNumberLike(b)) {
    return bnToBn(a).cmp(bnToBn(b));
  } else if (a instanceof Map && b instanceof Map) {
    return sortAsc(Array.from(a.values()), Array.from(b.values()));
  } else if (isEnum(a) && isEnum(b)) {
    return sortAsc(a.index, b.index) || sortAsc(a.value, b.value);
  } else if (isArrayLike$1(a) && isArrayLike$1(b)) {
    return sortArray(a, b);
  } else if (isCodec(a) && isCodec(b)) {
    return sortAsc(a.toU8a(true), b.toU8a(true));
  }
  throw new Error(`Attempting to sort unrecognized values: ${stringify$1(a)} (typeof ${typeof a}) <-> ${stringify$1(b)} (typeof ${typeof b})`);
}
function sortSet(set) {
  return new Set(Array.from(set).sort(sortAsc));
}
function sortMap(map2) {
  return new Map(Array.from(map2.entries()).sort(([keyA], [keyB]) => sortAsc(keyA, keyB)));
}
function typeToConstructor(registry, type) {
  return typeof type === "function" ? type : registry.createClassUnsafe(type);
}
function typesToConstructors(registry, types2) {
  const count = types2.length;
  const result = new Array(count);
  for (let i = 0; i < count; i++) {
    result[i] = typeToConstructor(registry, types2[i]);
  }
  return result;
}
function mapToTypeMap(registry, input) {
  const entries = Object.entries(input);
  const count = entries.length;
  const output3 = [new Array(count), new Array(count)];
  for (let i = 0; i < count; i++) {
    output3[1][i] = entries[i][0];
    output3[0][i] = typeToConstructor(registry, entries[i][1]);
  }
  return output3;
}
function typesToMap(registry, [Types, keys]) {
  const result = {};
  for (let i = 0, count = keys.length; i < count; i++) {
    result[keys[i]] = registry.getClassName(Types[i]) || new Types[i](registry).toRawType();
  }
  return result;
}
function decodeJson(value) {
  return Object.entries(value || {});
}
class Json extends Map {
  constructor(registry, value) {
    const decoded = decodeJson(value);
    super(decoded);
    __publicField(this, "registry");
    __publicField(this, "createdAtHash");
    __publicField(this, "initialU8aLength");
    __publicField(this, "isStorageFallback");
    this.registry = registry;
    objectProperties(this, decoded.map(([k]) => k), (k) => this.get(k));
  }
  /**
   * @description Always 0, never encodes as a Uint8Array
   */
  get encodedLength() {
    return 0 | 0;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    return [...this.keys()].length === 0;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return compareMap(this, other);
  }
  /**
   * @description Returns a typed value from the internal map
   */
  getT(key) {
    return this.get(key);
  }
  /**
   * @description Unimplemented, will throw
   */
  inspect() {
    throw new Error("Unimplemented");
  }
  /**
   * @description Unimplemented, will throw
   */
  toHex() {
    throw new Error("Unimplemented");
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return [...this.entries()].reduce((json, [key, value]) => {
      json[key] = isFunction$1(value.toHuman) ? value.toHuman() : value;
      return json;
    }, {});
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return [...this.entries()].reduce((json, [key, value]) => {
      json[key] = value;
      return json;
    }, {});
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return [...this.entries()].reduce((json, [key, value]) => {
      json[key] = isFunction$1(value.toPrimitive) ? value.toPrimitive() : value;
      return json;
    }, {});
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Json";
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return stringify$1(this.toJSON());
  }
  /**
   * @description Unimplemented, will throw
   */
  toU8a(_isBare) {
    throw new Error("Unimplemented");
  }
}
class Raw extends Uint8Array {
  constructor(registry, value, initialU8aLength) {
    super(u8aToU8a(value));
    __publicField(this, "registry");
    __publicField(this, "createdAtHash");
    __publicField(this, "initialU8aLength");
    __publicField(this, "isStorageFallback");
    this.registry = registry;
    this.initialU8aLength = initialU8aLength;
  }
  /**
   * @description This ensures that operators such as clice, filter, map, etc. return
   * new Array instances (without this we need to apply overrides)
   */
  static get [Symbol.species]() {
    return Uint8Array;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.length;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Returns true if the wrapped value contains only ASCII printable characters
   */
  get isAscii() {
    return isAscii(this);
  }
  /**
   * @description Returns true if the type wraps an empty/default all-0 value
   */
  get isEmpty() {
    return !this.length || isUndefined(this.find((b) => !!b));
  }
  /**
   * @description Returns true if the wrapped value contains only utf8 characters
   */
  get isUtf8() {
    return isUtf8(this);
  }
  /**
   * @description Returns the number of bits in the value
   */
  bitLength() {
    return this.length * 8;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    if (other instanceof Uint8Array) {
      return this.length === other.length && !this.some((b, index) => b !== other[index]);
    }
    return this.eq(u8aToU8a(other));
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      outer: [this.toU8a()]
    };
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex(this);
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toPrimitive();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.toHex();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    if (this.isAscii) {
      const text = this.toUtf8();
      if (isAscii(text)) {
        return text;
      }
    }
    return this.toJSON();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Raw";
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.toHex();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */
  toU8a(_isBare) {
    return Uint8Array.from(this);
  }
  /**
   * @description Returns the wrapped data as a UTF-8 string
   */
  toUtf8() {
    if (!this.isUtf8) {
      throw new Error("The character sequence is not a valid Utf8 string");
    }
    return u8aToString(this);
  }
}
function encodeSet(setValues, values) {
  const encoded = new BN(0);
  for (let i = 0, count = values.length; i < count; i++) {
    encoded.ior(bnToBn(setValues[values[i]] || 0));
  }
  return encoded;
}
function decodeSetArray(setValues, values) {
  const count = values.length;
  const result = new Array(count);
  for (let i = 0; i < count; i++) {
    const key = values[i];
    if (isUndefined(setValues[key])) {
      throw new Error(`Set: Invalid key '${key}' passed to Set, allowed ${Object.keys(setValues).join(", ")}`);
    }
    result[i] = key;
  }
  return result;
}
function decodeSetNumber(setValues, _value) {
  const bn2 = bnToBn(_value);
  const keys = Object.keys(setValues);
  const result = [];
  for (let i = 0, count = keys.length; i < count; i++) {
    const key = keys[i];
    if (bn2.and(bnToBn(setValues[key])).eq(bnToBn(setValues[key]))) {
      result.push(key);
    }
  }
  const computed = encodeSet(setValues, result);
  if (!bn2.eq(computed)) {
    throw new Error(`Set: Mismatch decoding '${bn2.toString()}', computed as '${computed.toString()}' with ${result.join(", ")}`);
  }
  return result;
}
function decodeSet$1(setValues, value = 0, bitLength) {
  if (bitLength % 8 !== 0) {
    throw new Error(`Expected valid bitLength, power of 8, found ${bitLength}`);
  }
  const byteLength = bitLength / 8;
  if (isU8a(value)) {
    return value.length === 0 ? [] : decodeSetNumber(setValues, u8aToBn(value.subarray(0, byteLength), { isLe: true }));
  } else if (isString(value)) {
    return decodeSet$1(setValues, u8aToU8a(value), byteLength);
  } else if (value instanceof Set || Array.isArray(value)) {
    const input = Array.isArray(value) ? value : [...value.values()];
    return decodeSetArray(setValues, input);
  }
  return decodeSetNumber(setValues, value);
}
class CodecSet extends Set {
  constructor(registry, setValues, value, bitLength = 8) {
    super(decodeSet$1(setValues, value, bitLength));
    __publicField(this, "registry");
    __publicField(this, "createdAtHash");
    __publicField(this, "initialU8aLength");
    __publicField(this, "isStorageFallback");
    __publicField(this, "__internal__allowed");
    __publicField(this, "__internal__byteLength");
    /**
     * @description adds a value to the Set (extended to allow for validity checking)
     */
    __publicField(this, "add", (key) => {
      if (this.__internal__allowed && isUndefined(this.__internal__allowed[key])) {
        throw new Error(`Set: Invalid key '${key}' on add`);
      }
      super.add(key);
      return this;
    });
    this.registry = registry;
    this.__internal__allowed = setValues;
    this.__internal__byteLength = bitLength / 8;
  }
  static with(values, bitLength) {
    var _a2;
    return _a2 = class extends CodecSet {
      constructor(registry, value) {
        super(registry, values, value, bitLength);
      }
    }, (() => {
      const keys = Object.keys(values);
      const count = keys.length;
      const isKeys = new Array(count);
      for (let i = 0; i < count; i++) {
        isKeys[i] = `is${stringPascalCase(keys[i])}`;
      }
      objectProperties(_a2.prototype, isKeys, (_23, i, self2) => self2.strings.includes(keys[i]));
    })(), _a2;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.__internal__byteLength;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description true is the Set contains no values
   */
  get isEmpty() {
    return this.size === 0;
  }
  /**
   * @description The actual set values as a string[]
   */
  get strings() {
    return [...super.values()];
  }
  /**
   * @description The encoded value for the set members
   */
  get valueEncoded() {
    return encodeSet(this.__internal__allowed, this.strings);
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    if (Array.isArray(other)) {
      return compareArray(this.strings.sort(), other.sort());
    } else if (other instanceof Set) {
      return this.eq([...other.values()]);
    } else if (isNumber(other) || isBn(other)) {
      return this.valueEncoded.eq(bnToBn(other));
    }
    return false;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      outer: [this.toU8a()]
    };
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.strings;
  }
  /**
   * @description The encoded value for the set members
   */
  toNumber() {
    return this.valueEncoded.toNumber();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.toJSON();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return stringify$1({ _set: this.__internal__allowed });
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return `[${this.strings.join(", ")}]`;
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */
  toU8a(_isBare) {
    return bnToU8a(this.valueEncoded, {
      bitLength: this.__internal__byteLength * 8,
      isLe: true
    });
  }
}
function noopSetDefinition(d) {
  return d;
}
function decodeStructFromObject(registry, [Types, keys], value, jsonMap) {
  let jsonObj;
  const typeofArray = Array.isArray(value);
  const typeofMap = value instanceof Map;
  const count = keys.length;
  if (!typeofArray && !typeofMap && !isObject$1(value)) {
    throw new Error(`Struct: Cannot decode value ${stringify$1(value)} (typeof ${typeof value}), expected an input object, map or array`);
  } else if (typeofArray && value.length !== count) {
    throw new Error(`Struct: Unable to map ${stringify$1(value)} array to object with known keys ${keys.join(", ")}`);
  }
  const raw = new Array(count);
  for (let i = 0; i < count; i++) {
    const key = keys[i];
    const jsonKey = jsonMap.get(key) || key;
    const Type2 = Types[i];
    let assign2;
    try {
      if (typeofArray) {
        assign2 = value[i];
      } else if (typeofMap) {
        assign2 = jsonKey && value.get(jsonKey);
      } else {
        assign2 = jsonKey && value[jsonKey];
        if (isUndefined(assign2)) {
          if (isUndefined(jsonObj)) {
            const entries = Object.entries(value);
            jsonObj = {};
            for (let e = 0, ecount = entries.length; e < ecount; e++) {
              jsonObj[stringCamelCase(entries[e][0])] = entries[e][1];
            }
          }
          assign2 = jsonKey && jsonObj[jsonKey];
        }
      }
      raw[i] = [
        key,
        assign2 instanceof Type2 ? assign2 : new Type2(registry, assign2)
      ];
    } catch (error2) {
      let type = Type2.name;
      try {
        type = new Type2(registry).toRawType();
      } catch {
      }
      throw new Error(`Struct: failed on ${jsonKey}: ${type}:: ${error2.message}`);
    }
  }
  return [raw, 0];
}
class Struct extends Map {
  constructor(registry, Types, value, jsonMap = /* @__PURE__ */ new Map(), { definition, setDefinition = noopSetDefinition } = {}) {
    const typeMap = definition || setDefinition(mapToTypeMap(registry, Types));
    const [decoded, decodedLength] = isU8a(value) || isHex(value) ? decodeU8aStruct(registry, new Array(typeMap[0].length), u8aToU8a(value), typeMap) : value instanceof Struct ? [value, 0] : decodeStructFromObject(registry, typeMap, value || {}, jsonMap);
    super(decoded);
    __publicField(this, "registry");
    __publicField(this, "createdAtHash");
    __publicField(this, "initialU8aLength");
    __publicField(this, "isStorageFallback");
    __publicField(this, "__internal__jsonMap");
    __publicField(this, "__internal__Types");
    this.initialU8aLength = decodedLength;
    this.registry = registry;
    this.__internal__jsonMap = jsonMap;
    this.__internal__Types = typeMap;
  }
  static with(Types, jsonMap) {
    var _a2;
    let definition;
    const setDefinition = (d) => definition = d;
    return _a2 = class extends Struct {
      constructor(registry, value) {
        super(registry, Types, value, jsonMap, { definition, setDefinition });
      }
    }, (() => {
      const keys = Object.keys(Types);
      objectProperties(_a2.prototype, keys, (k, _23, self2) => self2.get(k));
    })(), _a2;
  }
  /**
   * @description The available keys for this struct
   */
  get defKeys() {
    return this.__internal__Types[1];
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    for (const v of this.values()) {
      if (!v.isEmpty) {
        return false;
      }
    }
    return true;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    let total = 0;
    for (const v of this.values()) {
      total += v.encodedLength;
    }
    return total;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Returns the Type description of the structure
   */
  get Type() {
    const result = {};
    const [Types, keys] = this.__internal__Types;
    for (let i = 0, count = keys.length; i < count; i++) {
      result[keys[i]] = new Types[i](this.registry).toRawType();
    }
    return result;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return compareMap(this, other);
  }
  /**
   * @description Returns a specific names entry in the structure
   * @param key The name of the entry to retrieve
   */
  get(key) {
    return super.get(key);
  }
  /**
   * @description Returns the values of a member at a specific index (Rather use get(name) for performance)
   */
  getAtIndex(index) {
    return this.toArray()[index];
  }
  /**
   * @description Returns the a types value by name
   */
  getT(key) {
    return super.get(key);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect(isBare) {
    const inner = [];
    for (const [k, v] of this.entries()) {
      inner.push({
        ...v.inspect(!isBare || isBoolean(isBare) ? isBare : isBare[k]),
        name: stringCamelCase(k)
      });
    }
    return {
      inner
    };
  }
  /**
   * @description Converts the Object to an standard JavaScript Array
   */
  toArray() {
    return [...this.values()];
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended) {
    const json = {};
    for (const [k, v] of this.entries()) {
      json[k] = v.toHuman(isExtended);
    }
    return json;
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    const json = {};
    for (const [k, v] of this.entries()) {
      json[this.__internal__jsonMap.get(k) || k] = v.toJSON();
    }
    return json;
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    const json = {};
    for (const [k, v] of this.entries()) {
      json[k] = v.toPrimitive();
    }
    return json;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return stringify$1(typesToMap(this.registry, this.__internal__Types));
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return stringify$1(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    const encoded = [];
    for (const [k, v] of this.entries()) {
      encoded.push(v.toU8a(!isBare || isBoolean(isBare) ? isBare : isBare[k]));
    }
    return u8aConcatStrict(encoded);
  }
}
const MAX_LENGTH$2 = 128 * 1024;
function decodeText(value) {
  if (isU8a(value)) {
    if (!value.length) {
      return ["", 0];
    }
    if (value instanceof Raw) {
      return [u8aToString(value), 0];
    }
    const [offset, length2] = compactFromU8aLim(value);
    const total = offset + length2;
    if (length2 > MAX_LENGTH$2) {
      throw new Error(`Text: length ${length2.toString()} exceeds ${MAX_LENGTH$2}`);
    } else if (total > value.length) {
      throw new Error(`Text: required length less than remainder, expected at least ${total}, found ${value.length}`);
    }
    return [u8aToString(value.subarray(offset, total)), total];
  } else if (isHex(value)) {
    return [u8aToString(hexToU8a(value)), 0];
  }
  return [value ? value.toString() : "", 0];
}
class Text extends String {
  constructor(registry, value) {
    const [str, decodedLength] = decodeText(value);
    super(str);
    __publicField(this, "registry");
    __publicField(this, "createdAtHash");
    __publicField(this, "initialU8aLength");
    __publicField(this, "isStorageFallback");
    __publicField(this, "__internal__override", null);
    this.registry = registry;
    this.initialU8aLength = decodedLength;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    return this.length === 0;
  }
  /**
   * @description The length of the value
   */
  get length() {
    return super.length;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return isString(other) ? this.toString() === other.toString() : false;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    const value = stringToU8a(super.toString());
    return {
      outer: value.length ? [compactToU8a(value.length), value] : [compactToU8a(value.length)]
    };
  }
  /**
   * @description Set an override value for this
   */
  setOverride(override) {
    this.__internal__override = override;
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex(this.toU8a(true));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.toString();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.toJSON();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Text";
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.__internal__override || super.toString();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    const encoded = stringToU8a(super.toString());
    return isBare ? encoded : compactAddLength(encoded);
  }
}
const AbiParamSpec = z.object({
  name: z.string(),
  type: z.union([z.number(), z.string()])
});
const AbiFieldSpec = z.object({
  name: z.string().optional(),
  type: z.number(),
  typeName: z.string().optional()
});
const AbiVariantSpec = z.object({
  index: z.number(),
  name: z.string()
});
const AbiStorageEnumFieldSpec = z.object({
  name: z.string(),
  fields: z.array(z.any())
});
const AbiStorageEnumSpec = z.record(z.number().min(0), AbiStorageEnumFieldSpec);
const AbiTypeSpec = z.object({
  id: z.number(),
  type: z.object({
    def: z.object({
      composite: z.object({
        fields: z.array(AbiFieldSpec)
      }).optional(),
      variant: z.object({
        variants: z.union([z.array(AbiVariantSpec).optional(), AbiStorageEnumSpec])
      }).optional(),
      sequence: z.object({
        type: z.number()
      }).optional(),
      array: z.object({
        len: z.number(),
        type: z.number()
      }).optional(),
      primitive: z.string().optional(),
      tuple: z.any().optional()
    }),
    params: z.array(AbiParamSpec).optional(),
    path: z.array(z.string()).optional()
  })
});
const AbiEnumSpec = z.object({
  dispatchKey: z.string(),
  variants: z.any()
});
const AbiText = z.union([z.instanceof(Text), z.string()]);
const AbiCellSpec = z.object({
  key: AbiText,
  ty: z.union([z.number(), z.string()])
});
const AbiTypesSpec = z.array(AbiTypeSpec);
const AbiStorageFieldSpec = z.lazy(() => z.object({
  name: AbiText.optional(),
  layout: z.object({
    leaf: AbiCellSpec.optional(),
    enum: AbiEnumSpec.optional(),
    root: AbiStorageFieldSpec.optional(),
    struct: AbiStorageStructSpec.optional()
  }),
  root_key: AbiText.optional()
}));
const AbiStorageStructSpec = z.object({
  fields: z.array(AbiStorageFieldSpec),
  name: z.string()
});
const AbiStorageSpec = z.object({
  root: z.object({
    layout: z.object({
      struct: AbiStorageStructSpec.optional()
    })
  })
});
const AbiSpecDef = z.object({
  constructors: z.array(z.any()),
  docs: z.array(z.any()),
  events: z.array(z.any()),
  messages: z.array(z.object({
    label: z.string(),
    selector: z.string()
  }))
});
var metadataVersion;
(function(metadataVersion2) {
  metadataVersion2["V1"] = "V1";
  metadataVersion2["V2"] = "V2";
  metadataVersion2["V3"] = "V3";
})(metadataVersion || (metadataVersion = {}));
const AbiDetailsSpec = z.object({
  spec: AbiSpecDef,
  types: AbiTypesSpec,
  storage: AbiStorageSpec
});
const AbiMetaDataSpec = z.object({
  metadataVersion: z.string().optional(),
  source: z.object({
    hash: z.string(),
    language: z.string(),
    compiler: z.string(),
    wasm: z.string().optional()
  }),
  contract: z.object({
    name: z.string(),
    version: z.string(),
    authors: z.array(z.string())
  }),
  [metadataVersion.V1]: AbiDetailsSpec.optional(),
  [metadataVersion.V2]: AbiDetailsSpec.optional(),
  [metadataVersion.V3]: AbiDetailsSpec.optional(),
  spec: AbiSpecDef,
  types: AbiTypesSpec,
  storage: AbiStorageSpec
});
var CaptchaTypes;
(function(CaptchaTypes2) {
  CaptchaTypes2["SelectAll"] = "SelectAll";
})(CaptchaTypes || (CaptchaTypes = {}));
var CaptchaItemTypes;
(function(CaptchaItemTypes2) {
  CaptchaItemTypes2["Text"] = "text";
  CaptchaItemTypes2["Image"] = "image";
})(CaptchaItemTypes || (CaptchaItemTypes = {}));
var CaptchaStates;
(function(CaptchaStates2) {
  CaptchaStates2["Solved"] = "solved";
  CaptchaStates2["Unsolved"] = "unsolved";
})(CaptchaStates || (CaptchaStates = {}));
const CaptchaSchema = objectType({
  captchaId: unionType([stringType(), undefinedType()]),
  captchaContentId: unionType([stringType(), undefinedType()]),
  salt: stringType().min(34),
  solution: numberType().array().optional(),
  unlabelled: numberType().array().optional(),
  timeLimit: numberType().optional()
});
const CaptchaItemSchema = objectType({
  hash: stringType(),
  data: stringType(),
  type: nativeEnumType(CaptchaItemTypes)
});
const HashedCaptchaItemSchema = CaptchaItemSchema.extend({
  hash: stringType()
});
const LabelledItemSchema = HashedCaptchaItemSchema.extend({
  label: stringType()
});
const MaybeLabelledHashedItemSchema = HashedCaptchaItemSchema.extend({
  label: stringType().optional()
});
const SelectAllCaptchaSchemaRaw = CaptchaSchema.extend({
  items: arrayType(CaptchaItemSchema),
  target: stringType()
});
const SelectAllCaptchaSchema = SelectAllCaptchaSchemaRaw.extend({
  solution: stringType().array().optional(),
  unlabelled: stringType().array().optional()
});
const SelectAllCaptchaSchemaWithNumericSolution = SelectAllCaptchaSchema.extend({
  solution: numberType().array().optional(),
  unlabelled: numberType().array().optional()
});
const CaptchasSchema = arrayType(SelectAllCaptchaSchemaRaw);
arrayType(SelectAllCaptchaSchemaWithNumericSolution);
const CaptchaSolutionSchema = objectType({
  captchaId: stringType(),
  captchaContentId: stringType(),
  solution: stringType().array(),
  salt: stringType().min(34)
});
arrayType(CaptchaSolutionSchema);
objectType({
  items: arrayType(MaybeLabelledHashedItemSchema)
});
objectType({
  items: arrayType(LabelledItemSchema)
});
objectType({
  captchas: CaptchasSchema,
  format: nativeEnumType(CaptchaTypes)
});
objectType({
  labels: arrayType(stringType())
});
var ApiPaths;
(function(ApiPaths2) {
  ApiPaths2["GetCaptchaChallenge"] = "/v1/prosopo/provider/captcha";
  ApiPaths2["GetPowCaptchaChallenge"] = "/v1/prosopo/provider/captcha/pow";
  ApiPaths2["SubmitCaptchaSolution"] = "/v1/prosopo/provider/solution";
  ApiPaths2["SubmitPowCaptchaSolution"] = "/v1/prosopo/provider/pow/solution";
  ApiPaths2["VerifyCaptchaSolution"] = "/v1/prosopo/provider/verify";
  ApiPaths2["GetProviderStatus"] = "/v1/prosopo/provider/status";
  ApiPaths2["GetProviderDetails"] = "/v1/prosopo/provider/details";
  ApiPaths2["SubmitUserEvents"] = "/v1/prosopo/provider/events";
})(ApiPaths || (ApiPaths = {}));
var AdminApiPaths;
(function(AdminApiPaths2) {
  AdminApiPaths2["BatchCommit"] = "/v1/prosopo/provider/admin/batch";
  AdminApiPaths2["UpdateDataset"] = "/v1/prosopo/provider/admin/dataset";
  AdminApiPaths2["ProviderDeregister"] = "/v1/prosopo/provider/admin/deregister";
  AdminApiPaths2["ProviderUpdate"] = "/v1/prosopo/provider/admin/update";
})(AdminApiPaths || (AdminApiPaths = {}));
var ApiParams;
(function(ApiParams2) {
  ApiParams2["datasetId"] = "datasetId";
  ApiParams2["user"] = "user";
  ApiParams2["dapp"] = "dapp";
  ApiParams2["blockNumber"] = "blockNumber";
  ApiParams2["signature"] = "signature";
  ApiParams2["requestHash"] = "requestHash";
  ApiParams2["captchas"] = "captchas";
  ApiParams2["commitmentId"] = "commitmentId";
  ApiParams2["proof"] = "proof";
  ApiParams2["providerUrl"] = "providerUrl";
  ApiParams2["procaptchaResponse"] = "procaptcha-response";
  ApiParams2["maxVerifiedTime"] = "maxVerifiedTime";
})(ApiParams || (ApiParams = {}));
objectType({
  [ApiParams.user]: stringType(),
  [ApiParams.dapp]: stringType(),
  [ApiParams.datasetId]: stringType(),
  [ApiParams.blockNumber]: stringType()
});
const CaptchaSolutionBody = objectType({
  [ApiParams.user]: stringType(),
  [ApiParams.dapp]: stringType(),
  [ApiParams.captchas]: arrayType(CaptchaSolutionSchema),
  [ApiParams.requestHash]: stringType(),
  [ApiParams.signature]: stringType()
});
objectType({
  [ApiParams.dapp]: stringType(),
  [ApiParams.user]: stringType(),
  [ApiParams.commitmentId]: stringType().optional(),
  [ApiParams.maxVerifiedTime]: numberType().optional()
});
function sheetForTag(tag) {
  if (tag.sheet) {
    return tag.sheet;
  }
  for (var i = 0; i < document.styleSheets.length; i++) {
    if (document.styleSheets[i].ownerNode === tag) {
      return document.styleSheets[i];
    }
  }
}
function createStyleElement(options) {
  var tag = document.createElement("style");
  tag.setAttribute("data-emotion", options.key);
  if (options.nonce !== void 0) {
    tag.setAttribute("nonce", options.nonce);
  }
  tag.appendChild(document.createTextNode(""));
  tag.setAttribute("data-s", "");
  return tag;
}
var StyleSheet = /* @__PURE__ */ function() {
  function StyleSheet2(options) {
    var _this = this;
    this._insertTag = function(tag) {
      var before;
      if (_this.tags.length === 0) {
        if (_this.insertionPoint) {
          before = _this.insertionPoint.nextSibling;
        } else if (_this.prepend) {
          before = _this.container.firstChild;
        } else {
          before = _this.before;
        }
      } else {
        before = _this.tags[_this.tags.length - 1].nextSibling;
      }
      _this.container.insertBefore(tag, before);
      _this.tags.push(tag);
    };
    this.isSpeedy = options.speedy === void 0 ? false : options.speedy;
    this.tags = [];
    this.ctr = 0;
    this.nonce = options.nonce;
    this.key = options.key;
    this.container = options.container;
    this.prepend = options.prepend;
    this.insertionPoint = options.insertionPoint;
    this.before = null;
  }
  var _proto = StyleSheet2.prototype;
  _proto.hydrate = function hydrate(nodes) {
    nodes.forEach(this._insertTag);
  };
  _proto.insert = function insert(rule) {
    if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
      this._insertTag(createStyleElement(this));
    }
    var tag = this.tags[this.tags.length - 1];
    {
      var isImportRule3 = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
      if (isImportRule3 && this._alreadyInsertedOrderInsensitiveRule) {
        console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
      }
      this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule3;
    }
    if (this.isSpeedy) {
      var sheet = sheetForTag(tag);
      try {
        sheet.insertRule(rule, sheet.cssRules.length);
      } catch (e) {
        if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule)) {
          console.error('There was a problem inserting the following rule: "' + rule + '"', e);
        }
      }
    } else {
      tag.appendChild(document.createTextNode(rule));
    }
    this.ctr++;
  };
  _proto.flush = function flush() {
    this.tags.forEach(function(tag) {
      return tag.parentNode && tag.parentNode.removeChild(tag);
    });
    this.tags = [];
    this.ctr = 0;
    {
      this._alreadyInsertedOrderInsensitiveRule = false;
    }
  };
  return StyleSheet2;
}();
var MS = "-ms-";
var MOZ = "-moz-";
var WEBKIT = "-webkit-";
var COMMENT = "comm";
var RULESET = "rule";
var DECLARATION = "decl";
var IMPORT = "@import";
var KEYFRAMES = "@keyframes";
var LAYER = "@layer";
var abs = Math.abs;
var from$1 = String.fromCharCode;
var assign = Object.assign;
function hash$1(value, length2) {
  return charat(value, 0) ^ 45 ? (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
}
function trim(value) {
  return value.trim();
}
function match(value, pattern) {
  return (value = pattern.exec(value)) ? value[0] : value;
}
function replace(value, pattern, replacement) {
  return value.replace(pattern, replacement);
}
function indexof(value, search) {
  return value.indexOf(search);
}
function charat(value, index) {
  return value.charCodeAt(index) | 0;
}
function substr(value, begin, end) {
  return value.slice(begin, end);
}
function strlen(value) {
  return value.length;
}
function sizeof(value) {
  return value.length;
}
function append(value, array) {
  return array.push(value), value;
}
function combine(array, callback) {
  return array.map(callback).join("");
}
var line = 1;
var column = 1;
var length = 0;
var position = 0;
var character = 0;
var characters = "";
function node(value, root, parent, type, props, children, length2) {
  return { value, root, parent, type, props, children, line, column, length: length2, return: "" };
}
function copy$1(root, props) {
  return assign(node("", null, null, "", null, null, 0), root, { length: -root.length }, props);
}
function char() {
  return character;
}
function prev() {
  character = position > 0 ? charat(characters, --position) : 0;
  if (column--, character === 10)
    column = 1, line--;
  return character;
}
function next() {
  character = position < length ? charat(characters, position++) : 0;
  if (column++, character === 10)
    column = 1, line++;
  return character;
}
function peek() {
  return charat(characters, position);
}
function caret() {
  return position;
}
function slice$3(begin, end) {
  return substr(characters, begin, end);
}
function token(type) {
  switch (type) {
    case 0:
    case 9:
    case 10:
    case 13:
    case 32:
      return 5;
    case 33:
    case 43:
    case 44:
    case 47:
    case 62:
    case 64:
    case 126:
    case 59:
    case 123:
    case 125:
      return 4;
    case 58:
      return 3;
    case 34:
    case 39:
    case 40:
    case 91:
      return 2;
    case 41:
    case 93:
      return 1;
  }
  return 0;
}
function alloc(value) {
  return line = column = 1, length = strlen(characters = value), position = 0, [];
}
function dealloc(value) {
  return characters = "", value;
}
function delimit(type) {
  return trim(slice$3(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
}
function whitespace(type) {
  while (character = peek())
    if (character < 33)
      next();
    else
      break;
  return token(type) > 2 || token(character) > 3 ? "" : " ";
}
function escaping(index, count) {
  while (--count && next())
    if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
      break;
  return slice$3(index, caret() + (count < 6 && peek() == 32 && next() == 32));
}
function delimiter(type) {
  while (next())
    switch (character) {
      case type:
        return position;
      case 34:
      case 39:
        if (type !== 34 && type !== 39)
          delimiter(character);
        break;
      case 40:
        if (type === 41)
          delimiter(type);
        break;
      case 92:
        next();
        break;
    }
  return position;
}
function commenter(type, index) {
  while (next())
    if (type + character === 47 + 10)
      break;
    else if (type + character === 42 + 42 && peek() === 47)
      break;
  return "/*" + slice$3(index, position - 1) + "*" + from$1(type === 47 ? type : next());
}
function identifier(index) {
  while (!token(peek()))
    next();
  return slice$3(index, position);
}
function compile(value) {
  return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
}
function parse(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
  var index = 0;
  var offset = 0;
  var length2 = pseudo;
  var atrule = 0;
  var property = 0;
  var previous = 0;
  var variable = 1;
  var scanning = 1;
  var ampersand = 1;
  var character2 = 0;
  var type = "";
  var props = rules;
  var children = rulesets;
  var reference = rule;
  var characters2 = type;
  while (scanning)
    switch (previous = character2, character2 = next()) {
      case 40:
        if (previous != 108 && charat(characters2, length2 - 1) == 58) {
          if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
            ampersand = -1;
          break;
        }
      case 34:
      case 39:
      case 91:
        characters2 += delimit(character2);
        break;
      case 9:
      case 10:
      case 13:
      case 32:
        characters2 += whitespace(previous);
        break;
      case 92:
        characters2 += escaping(caret() - 1, 7);
        continue;
      case 47:
        switch (peek()) {
          case 42:
          case 47:
            append(comment(commenter(next(), caret()), root, parent), declarations);
            break;
          default:
            characters2 += "/";
        }
        break;
      case 123 * variable:
        points[index++] = strlen(characters2) * ampersand;
      case 125 * variable:
      case 59:
      case 0:
        switch (character2) {
          case 0:
          case 125:
            scanning = 0;
          case 59 + offset:
            if (ampersand == -1)
              characters2 = replace(characters2, /\f/g, "");
            if (property > 0 && strlen(characters2) - length2)
              append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2), declarations);
            break;
          case 59:
            characters2 += ";";
          default:
            append(reference = ruleset(characters2, root, parent, index, offset, rules, points, type, props = [], children = [], length2), rulesets);
            if (character2 === 123)
              if (offset === 0)
                parse(characters2, root, reference, reference, props, rulesets, length2, points, children);
              else
                switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                  case 100:
                  case 108:
                  case 109:
                  case 115:
                    parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length2), children), rules, children, length2, points, rule ? props : children);
                    break;
                  default:
                    parse(characters2, reference, reference, reference, [""], children, 0, points, children);
                }
        }
        index = offset = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
        break;
      case 58:
        length2 = 1 + strlen(characters2), property = previous;
      default:
        if (variable < 1) {
          if (character2 == 123)
            --variable;
          else if (character2 == 125 && variable++ == 0 && prev() == 125)
            continue;
        }
        switch (characters2 += from$1(character2), character2 * variable) {
          case 38:
            ampersand = offset > 0 ? 1 : (characters2 += "\f", -1);
            break;
          case 44:
            points[index++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
            break;
          case 64:
            if (peek() === 45)
              characters2 += delimit(next());
            atrule = peek(), offset = length2 = strlen(type = characters2 += identifier(caret())), character2++;
            break;
          case 45:
            if (previous === 45 && strlen(characters2) == 2)
              variable = 0;
        }
    }
  return rulesets;
}
function ruleset(value, root, parent, index, offset, rules, points, type, props, children, length2) {
  var post = offset - 1;
  var rule = offset === 0 ? rules : [""];
  var size = sizeof(rule);
  for (var i = 0, j = 0, k = 0; i < index; ++i)
    for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z2 = value; x < size; ++x)
      if (z2 = trim(j > 0 ? rule[x] + " " + y : replace(y, /&\f/g, rule[x])))
        props[k++] = z2;
  return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length2);
}
function comment(value, root, parent) {
  return node(value, root, parent, COMMENT, from$1(char()), substr(value, 2, -2), 0);
}
function declaration(value, root, parent, length2) {
  return node(value, root, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
}
function serialize(children, callback) {
  var output3 = "";
  var length2 = sizeof(children);
  for (var i = 0; i < length2; i++)
    output3 += callback(children[i], i, children, callback) || "";
  return output3;
}
function stringify(element, index, children, callback) {
  switch (element.type) {
    case LAYER:
      if (element.children.length)
        break;
    case IMPORT:
    case DECLARATION:
      return element.return = element.return || element.value;
    case COMMENT:
      return "";
    case KEYFRAMES:
      return element.return = element.value + "{" + serialize(element.children, callback) + "}";
    case RULESET:
      element.value = element.props.join(",");
  }
  return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
}
function middleware(collection) {
  var length2 = sizeof(collection);
  return function(element, index, children, callback) {
    var output3 = "";
    for (var i = 0; i < length2; i++)
      output3 += collection[i](element, index, children, callback) || "";
    return output3;
  };
}
function memoize(fn) {
  var cache = /* @__PURE__ */ Object.create(null);
  return function(arg) {
    if (cache[arg] === void 0)
      cache[arg] = fn(arg);
    return cache[arg];
  };
}
var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index) {
  var previous = 0;
  var character2 = 0;
  while (true) {
    previous = character2;
    character2 = peek();
    if (previous === 38 && character2 === 12) {
      points[index] = 1;
    }
    if (token(character2)) {
      break;
    }
    next();
  }
  return slice$3(begin, position);
};
var toRules = function toRules2(parsed, points) {
  var index = -1;
  var character2 = 44;
  do {
    switch (token(character2)) {
      case 0:
        if (character2 === 38 && peek() === 12) {
          points[index] = 1;
        }
        parsed[index] += identifierWithPointTracking(position - 1, points, index);
        break;
      case 2:
        parsed[index] += delimit(character2);
        break;
      case 4:
        if (character2 === 44) {
          parsed[++index] = peek() === 58 ? "&\f" : "";
          points[index] = parsed[index].length;
          break;
        }
      default:
        parsed[index] += from$1(character2);
    }
  } while (character2 = next());
  return parsed;
};
var getRules = function getRules2(value, points) {
  return dealloc(toRules(alloc(value), points));
};
var fixedElements = /* @__PURE__ */ new WeakMap();
var compat = function compat2(element) {
  if (element.type !== "rule" || !element.parent || // positive .length indicates that this rule contains pseudo
  // negative .length indicates that this rule has been already prefixed
  element.length < 1) {
    return;
  }
  var value = element.value, parent = element.parent;
  var isImplicitRule = element.column === parent.column && element.line === parent.line;
  while (parent.type !== "rule") {
    parent = parent.parent;
    if (!parent)
      return;
  }
  if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
    return;
  }
  if (isImplicitRule) {
    return;
  }
  fixedElements.set(element, true);
  var points = [];
  var rules = getRules(value, points);
  var parentRules = parent.props;
  for (var i = 0, k = 0; i < rules.length; i++) {
    for (var j = 0; j < parentRules.length; j++, k++) {
      element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
    }
  }
};
var removeLabel = function removeLabel2(element) {
  if (element.type === "decl") {
    var value = element.value;
    if (
      // charcode for l
      value.charCodeAt(0) === 108 && // charcode for b
      value.charCodeAt(2) === 98
    ) {
      element["return"] = "";
      element.value = "";
    }
  }
};
var ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
var isIgnoringComment = function isIgnoringComment2(element) {
  return element.type === "comm" && element.children.indexOf(ignoreFlag) > -1;
};
var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache) {
  return function(element, index, children) {
    if (element.type !== "rule" || cache.compat)
      return;
    var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
    if (unsafePseudoClasses) {
      var isNested = !!element.parent;
      var commentContainer = isNested ? element.parent.children : (
        // global rule at the root level
        children
      );
      for (var i = commentContainer.length - 1; i >= 0; i--) {
        var node2 = commentContainer[i];
        if (node2.line < element.line) {
          break;
        }
        if (node2.column < element.column) {
          if (isIgnoringComment(node2)) {
            return;
          }
          break;
        }
      }
      unsafePseudoClasses.forEach(function(unsafePseudoClass) {
        console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
      });
    }
  };
};
var isImportRule = function isImportRule2(element) {
  return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
};
var isPrependedWithRegularRules = function isPrependedWithRegularRules2(index, children) {
  for (var i = index - 1; i >= 0; i--) {
    if (!isImportRule(children[i])) {
      return true;
    }
  }
  return false;
};
var nullifyElement = function nullifyElement2(element) {
  element.type = "";
  element.value = "";
  element["return"] = "";
  element.children = "";
  element.props = "";
};
var incorrectImportAlarm = function incorrectImportAlarm2(element, index, children) {
  if (!isImportRule(element)) {
    return;
  }
  if (element.parent) {
    console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
    nullifyElement(element);
  } else if (isPrependedWithRegularRules(index, children)) {
    console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
    nullifyElement(element);
  }
};
function prefix$1(value, length2) {
  switch (hash$1(value, length2)) {
    case 5103:
      return WEBKIT + "print-" + value + value;
    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921:
    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005:
    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855:
    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return WEBKIT + value + value;
    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return WEBKIT + value + MOZ + value + MS + value + value;
    case 6828:
    case 4268:
      return WEBKIT + value + MS + value + value;
    case 6165:
      return WEBKIT + value + MS + "flex-" + value + value;
    case 5187:
      return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
    case 5443:
      return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/, "") + value;
    case 4675:
      return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/, "") + value;
    case 5548:
      return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
    case 5292:
      return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
    case 6060:
      return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
    case 4554:
      return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
    case 6187:
      return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
    case 5495:
    case 3959:
      return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
    case 4968:
      return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      if (strlen(value) - 1 - length2 > 6)
        switch (charat(value, length2 + 1)) {
          case 109:
            if (charat(value, length2 + 4) !== 45)
              break;
          case 102:
            return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
          case 115:
            return ~indexof(value, "stretch") ? prefix$1(replace(value, "stretch", "fill-available"), length2) + value : value;
        }
      break;
    case 4949:
      if (charat(value, length2 + 1) !== 115)
        break;
    case 6444:
      switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
        case 107:
          return replace(value, ":", ":" + WEBKIT) + value;
        case 101:
          return replace(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
      }
      break;
    case 5936:
      switch (charat(value, length2 + 11)) {
        case 114:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
        case 108:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
        case 45:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
      }
      return WEBKIT + value + MS + value + value;
  }
  return value;
}
var prefixer = function prefixer2(element, index, children, callback) {
  if (element.length > -1) {
    if (!element["return"])
      switch (element.type) {
        case DECLARATION:
          element["return"] = prefix$1(element.value, element.length);
          break;
        case KEYFRAMES:
          return serialize([copy$1(element, {
            value: replace(element.value, "@", "@" + WEBKIT)
          })], callback);
        case RULESET:
          if (element.length)
            return combine(element.props, function(value) {
              switch (match(value, /(::plac\w+|:read-\w+)/)) {
                case ":read-only":
                case ":read-write":
                  return serialize([copy$1(element, {
                    props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")]
                  })], callback);
                case "::placeholder":
                  return serialize([copy$1(element, {
                    props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
                  }), copy$1(element, {
                    props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")]
                  }), copy$1(element, {
                    props: [replace(value, /:(plac\w+)/, MS + "input-$1")]
                  })], callback);
              }
              return "";
            });
      }
  }
};
var defaultStylisPlugins = [prefixer];
var createCache = function createCache2(options) {
  var key = options.key;
  if (!key) {
    throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
  }
  if (key === "css") {
    var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
    Array.prototype.forEach.call(ssrStyles, function(node2) {
      var dataEmotionAttribute = node2.getAttribute("data-emotion");
      if (dataEmotionAttribute.indexOf(" ") === -1) {
        return;
      }
      document.head.appendChild(node2);
      node2.setAttribute("data-s", "");
    });
  }
  var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
  {
    if (/[^a-z-]/.test(key)) {
      throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
    }
  }
  var inserted = {};
  var container;
  var nodesToHydrate = [];
  {
    container = options.container || document.head;
    Array.prototype.forEach.call(
      // this means we will ignore elements which don't have a space in them which
      // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
      document.querySelectorAll('style[data-emotion^="' + key + ' "]'),
      function(node2) {
        var attrib = node2.getAttribute("data-emotion").split(" ");
        for (var i = 1; i < attrib.length; i++) {
          inserted[attrib[i]] = true;
        }
        nodesToHydrate.push(node2);
      }
    );
  }
  var _insert;
  var omnipresentPlugins = [compat, removeLabel];
  {
    omnipresentPlugins.push(createUnsafeSelectorsAlarm({
      get compat() {
        return cache.compat;
      }
    }), incorrectImportAlarm);
  }
  {
    var currentSheet;
    var finalizingPlugins = [stringify, function(element) {
      if (!element.root) {
        if (element["return"]) {
          currentSheet.insert(element["return"]);
        } else if (element.value && element.type !== COMMENT) {
          currentSheet.insert(element.value + "{}");
        }
      }
    }];
    var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
    var stylis = function stylis2(styles) {
      return serialize(compile(styles), serializer);
    };
    _insert = function insert(selector, serialized, sheet, shouldCache) {
      currentSheet = sheet;
      if (serialized.map !== void 0) {
        currentSheet = {
          insert: function insert2(rule) {
            sheet.insert(rule + serialized.map);
          }
        };
      }
      stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
      if (shouldCache) {
        cache.inserted[serialized.name] = true;
      }
    };
  }
  var cache = {
    key,
    sheet: new StyleSheet({
      key,
      container,
      nonce: options.nonce,
      speedy: options.speedy,
      prepend: options.prepend,
      insertionPoint: options.insertionPoint
    }),
    nonce: options.nonce,
    inserted,
    registered: {},
    insert: _insert
  };
  cache.sheet.hydrate(nodesToHydrate);
  return cache;
};
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var reactIs$1 = { exports: {} };
var reactIs_development = {};
{
  (function() {
    var hasSymbol = typeof Symbol === "function" && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
    function isValidElementType(type) {
      return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    }
    function typeOf(object) {
      if (typeof object === "object" && object !== null) {
        var $$typeof = object.$$typeof;
        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type = object.type;
            switch (type) {
              case REACT_ASYNC_MODE_TYPE:
              case REACT_CONCURRENT_MODE_TYPE:
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
                return type;
              default:
                var $$typeofType = type && type.$$typeof;
                switch ($$typeofType) {
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_LAZY_TYPE:
                  case REACT_MEMO_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;
                  default:
                    return $$typeof;
                }
            }
          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }
      return void 0;
    }
    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element2 = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false;
    function isAsyncMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
          hasWarnedAboutDeprecatedIsAsyncMode = true;
          console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
        }
      }
      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
      return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    reactIs_development.AsyncMode = AsyncMode;
    reactIs_development.ConcurrentMode = ConcurrentMode;
    reactIs_development.ContextConsumer = ContextConsumer;
    reactIs_development.ContextProvider = ContextProvider;
    reactIs_development.Element = Element2;
    reactIs_development.ForwardRef = ForwardRef;
    reactIs_development.Fragment = Fragment;
    reactIs_development.Lazy = Lazy;
    reactIs_development.Memo = Memo;
    reactIs_development.Portal = Portal;
    reactIs_development.Profiler = Profiler;
    reactIs_development.StrictMode = StrictMode;
    reactIs_development.Suspense = Suspense;
    reactIs_development.isAsyncMode = isAsyncMode;
    reactIs_development.isConcurrentMode = isConcurrentMode;
    reactIs_development.isContextConsumer = isContextConsumer;
    reactIs_development.isContextProvider = isContextProvider;
    reactIs_development.isElement = isElement;
    reactIs_development.isForwardRef = isForwardRef;
    reactIs_development.isFragment = isFragment;
    reactIs_development.isLazy = isLazy;
    reactIs_development.isMemo = isMemo;
    reactIs_development.isPortal = isPortal;
    reactIs_development.isProfiler = isProfiler;
    reactIs_development.isStrictMode = isStrictMode;
    reactIs_development.isSuspense = isSuspense;
    reactIs_development.isValidElementType = isValidElementType;
    reactIs_development.typeOf = typeOf;
  })();
}
{
  reactIs$1.exports = reactIs_development;
}
var reactIsExports = reactIs$1.exports;
/* @__PURE__ */ getDefaultExportFromCjs(reactIsExports);
var reactIs = reactIsExports;
var REACT_STATICS = {
  childContextTypes: true,
  contextType: true,
  contextTypes: true,
  defaultProps: true,
  displayName: true,
  getDefaultProps: true,
  getDerivedStateFromError: true,
  getDerivedStateFromProps: true,
  mixins: true,
  propTypes: true,
  type: true
};
var KNOWN_STATICS = {
  name: true,
  length: true,
  prototype: true,
  caller: true,
  callee: true,
  arguments: true,
  arity: true
};
var FORWARD_REF_STATICS = {
  "$$typeof": true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  "$$typeof": true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
function getStatics(component) {
  if (reactIs.isMemo(component)) {
    return MEMO_STATICS;
  }
  return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
}
var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf$1 = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
  if (typeof sourceComponent !== "string") {
    if (objectPrototype) {
      var inheritedComponent = getPrototypeOf$1(sourceComponent);
      if (inheritedComponent && inheritedComponent !== objectPrototype) {
        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
      }
    }
    var keys = getOwnPropertyNames(sourceComponent);
    if (getOwnPropertySymbols) {
      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
    }
    var targetStatics = getStatics(targetComponent);
    var sourceStatics = getStatics(sourceComponent);
    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];
      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
        try {
          defineProperty(targetComponent, key, descriptor);
        } catch (e) {
        }
      }
    }
  }
  return targetComponent;
}
var hoistNonReactStatics_cjs = hoistNonReactStatics;
/* @__PURE__ */ getDefaultExportFromCjs(hoistNonReactStatics_cjs);
var isBrowser$1 = true;
function getRegisteredStyles(registered, registeredStyles, classNames) {
  var rawClassName = "";
  classNames.split(" ").forEach(function(className) {
    if (registered[className] !== void 0) {
      registeredStyles.push(registered[className] + ";");
    } else {
      rawClassName += className + " ";
    }
  });
  return rawClassName;
}
var registerStyles = function registerStyles2(cache, serialized, isStringTag) {
  var className = cache.key + "-" + serialized.name;
  if (
    // we only need to add the styles to the registered cache if the
    // class name could be used further down
    // the tree but if it's a string tag, we know it won't
    // so we don't have to add it to registered cache.
    // this improves memory usage since we can avoid storing the whole style string
    (isStringTag === false || // we need to always store it if we're in compat mode and
    // in node since emotion-server relies on whether a style is in
    // the registered cache to know whether a style is global or not
    // also, note that this check will be dead code eliminated in the browser
    isBrowser$1 === false) && cache.registered[className] === void 0
  ) {
    cache.registered[className] = serialized.styles;
  }
};
var insertStyles = function insertStyles2(cache, serialized, isStringTag) {
  registerStyles(cache, serialized, isStringTag);
  var className = cache.key + "-" + serialized.name;
  if (cache.inserted[serialized.name] === void 0) {
    var current = serialized;
    do {
      cache.insert(serialized === current ? "." + className : "", current, cache.sheet, true);
      current = current.next;
    } while (current !== void 0);
  }
};
function murmur2(str) {
  var h = 0;
  var k, i = 0, len = str.length;
  for (; len >= 4; ++i, len -= 4) {
    k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
    k = /* Math.imul(k, m): */
    (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
    k ^= /* k >>> r: */
    k >>> 24;
    h = /* Math.imul(k, m): */
    (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
    (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
  }
  switch (len) {
    case 3:
      h ^= (str.charCodeAt(i + 2) & 255) << 16;
    case 2:
      h ^= (str.charCodeAt(i + 1) & 255) << 8;
    case 1:
      h ^= str.charCodeAt(i) & 255;
      h = /* Math.imul(h, m): */
      (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
  }
  h ^= h >>> 13;
  h = /* Math.imul(h, m): */
  (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
  return ((h ^ h >>> 15) >>> 0).toString(36);
}
var unitlessKeys = {
  animationIterationCount: 1,
  aspectRatio: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};
var ILLEGAL_ESCAPE_SEQUENCE_ERROR$1 = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
var isCustomProperty = function isCustomProperty2(property) {
  return property.charCodeAt(1) === 45;
};
var isProcessableValue = function isProcessableValue2(value) {
  return value != null && typeof value !== "boolean";
};
var processStyleName = /* @__PURE__ */ memoize(function(styleName) {
  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
});
var processStyleValue = function processStyleValue2(key, value) {
  switch (key) {
    case "animation":
    case "animationName": {
      if (typeof value === "string") {
        return value.replace(animationRegex, function(match2, p1, p2) {
          cursor = {
            name: p1,
            styles: p2,
            next: cursor
          };
          return p1;
        });
      }
    }
  }
  if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
    return value + "px";
  }
  return value;
};
{
  var contentValuePattern = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
  var contentValues = ["normal", "none", "initial", "inherit", "unset"];
  var oldProcessStyleValue = processStyleValue;
  var msPattern = /^-ms-/;
  var hyphenPattern = /-(.)/g;
  var hyphenatedCache = {};
  processStyleValue = function processStyleValue3(key, value) {
    if (key === "content") {
      if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
        throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
      }
    }
    var processed = oldProcessStyleValue(key, value);
    if (processed !== "" && !isCustomProperty(key) && key.indexOf("-") !== -1 && hyphenatedCache[key] === void 0) {
      hyphenatedCache[key] = true;
      console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, "ms-").replace(hyphenPattern, function(str, _char) {
        return _char.toUpperCase();
      }) + "?");
    }
    return processed;
  };
}
var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
function handleInterpolation(mergedProps, registered, interpolation) {
  if (interpolation == null) {
    return "";
  }
  if (interpolation.__emotion_styles !== void 0) {
    if (interpolation.toString() === "NO_COMPONENT_SELECTOR") {
      throw new Error(noComponentSelectorMessage);
    }
    return interpolation;
  }
  switch (typeof interpolation) {
    case "boolean": {
      return "";
    }
    case "object": {
      if (interpolation.anim === 1) {
        cursor = {
          name: interpolation.name,
          styles: interpolation.styles,
          next: cursor
        };
        return interpolation.name;
      }
      if (interpolation.styles !== void 0) {
        var next2 = interpolation.next;
        if (next2 !== void 0) {
          while (next2 !== void 0) {
            cursor = {
              name: next2.name,
              styles: next2.styles,
              next: cursor
            };
            next2 = next2.next;
          }
        }
        var styles = interpolation.styles + ";";
        if (interpolation.map !== void 0) {
          styles += interpolation.map;
        }
        return styles;
      }
      return createStringFromObject(mergedProps, registered, interpolation);
    }
    case "function": {
      if (mergedProps !== void 0) {
        var previousCursor = cursor;
        var result = interpolation(mergedProps);
        cursor = previousCursor;
        return handleInterpolation(mergedProps, registered, result);
      } else {
        console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
      }
      break;
    }
    case "string":
      {
        var matched = [];
        var replaced = interpolation.replace(animationRegex, function(match2, p1, p2) {
          var fakeVarName = "animation" + matched.length;
          matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, "") + "`");
          return "${" + fakeVarName + "}";
        });
        if (matched.length) {
          console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
        }
      }
      break;
  }
  if (registered == null) {
    return interpolation;
  }
  var cached = registered[interpolation];
  return cached !== void 0 ? cached : interpolation;
}
function createStringFromObject(mergedProps, registered, obj) {
  var string = "";
  if (Array.isArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
    }
  } else {
    for (var _key in obj) {
      var value = obj[_key];
      if (typeof value !== "object") {
        if (registered != null && registered[value] !== void 0) {
          string += _key + "{" + registered[value] + "}";
        } else if (isProcessableValue(value)) {
          string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
        }
      } else {
        if (_key === "NO_COMPONENT_SELECTOR" && true) {
          throw new Error(noComponentSelectorMessage);
        }
        if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
          for (var _i = 0; _i < value.length; _i++) {
            if (isProcessableValue(value[_i])) {
              string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
            }
          }
        } else {
          var interpolated = handleInterpolation(mergedProps, registered, value);
          switch (_key) {
            case "animation":
            case "animationName": {
              string += processStyleName(_key) + ":" + interpolated + ";";
              break;
            }
            default: {
              if (_key === "undefined") {
                console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
              }
              string += _key + "{" + interpolated + "}";
            }
          }
        }
      }
    }
  }
  return string;
}
var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
var sourceMapPattern;
{
  sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
}
var cursor;
var serializeStyles = function serializeStyles2(args, registered, mergedProps) {
  if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
    return args[0];
  }
  var stringMode = true;
  var styles = "";
  cursor = void 0;
  var strings = args[0];
  if (strings == null || strings.raw === void 0) {
    stringMode = false;
    styles += handleInterpolation(mergedProps, registered, strings);
  } else {
    if (strings[0] === void 0) {
      console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR$1);
    }
    styles += strings[0];
  }
  for (var i = 1; i < args.length; i++) {
    styles += handleInterpolation(mergedProps, registered, args[i]);
    if (stringMode) {
      if (strings[i] === void 0) {
        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR$1);
      }
      styles += strings[i];
    }
  }
  var sourceMap;
  {
    styles = styles.replace(sourceMapPattern, function(match3) {
      sourceMap = match3;
      return "";
    });
  }
  labelPattern.lastIndex = 0;
  var identifierName = "";
  var match2;
  while ((match2 = labelPattern.exec(styles)) !== null) {
    identifierName += "-" + // $FlowFixMe we know it's not null
    match2[1];
  }
  var name = murmur2(styles) + identifierName;
  {
    return {
      name,
      styles,
      map: sourceMap,
      next: cursor,
      toString: function toString() {
        return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
      }
    };
  }
};
var syncFallback = function syncFallback2(create2) {
  return create2();
};
var useInsertionEffect = React$1["useInsertionEffect"] ? React$1["useInsertionEffect"] : false;
var useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect || syncFallback;
var useInsertionEffectWithLayoutFallback = useInsertionEffect || reactExports.useLayoutEffect;
var hasOwnProperty = {}.hasOwnProperty;
var EmotionCacheContext = /* @__PURE__ */ reactExports.createContext(
  // we're doing this to avoid preconstruct's dead code elimination in this one case
  // because this module is primarily intended for the browser and node
  // but it's also required in react native and similar environments sometimes
  // and we could have a special build just for that
  // but this is much easier and the native packages
  // might use a different theme context in the future anyway
  typeof HTMLElement !== "undefined" ? /* @__PURE__ */ createCache({
    key: "css"
  }) : null
);
{
  EmotionCacheContext.displayName = "EmotionCacheContext";
}
var withEmotionCache = function withEmotionCache2(func) {
  return /* @__PURE__ */ reactExports.forwardRef(function(props, ref) {
    var cache = reactExports.useContext(EmotionCacheContext);
    return func(props, cache, ref);
  });
};
var ThemeContext = /* @__PURE__ */ reactExports.createContext({});
{
  ThemeContext.displayName = "EmotionThemeContext";
}
var getLastPart = function getLastPart2(functionName) {
  var parts = functionName.split(".");
  return parts[parts.length - 1];
};
var getFunctionNameFromStackTraceLine = function getFunctionNameFromStackTraceLine2(line2) {
  var match2 = /^\s+at\s+([A-Za-z0-9$.]+)\s/.exec(line2);
  if (match2)
    return getLastPart(match2[1]);
  match2 = /^([A-Za-z0-9$.]+)@/.exec(line2);
  if (match2)
    return getLastPart(match2[1]);
  return void 0;
};
var internalReactFunctionNames = /* @__PURE__ */ new Set(["renderWithHooks", "processChild", "finishClassComponent", "renderToString"]);
var sanitizeIdentifier = function sanitizeIdentifier2(identifier2) {
  return identifier2.replace(/\$/g, "-");
};
var getLabelFromStackTrace = function getLabelFromStackTrace2(stackTrace) {
  if (!stackTrace)
    return void 0;
  var lines = stackTrace.split("\n");
  for (var i = 0; i < lines.length; i++) {
    var functionName = getFunctionNameFromStackTraceLine(lines[i]);
    if (!functionName)
      continue;
    if (internalReactFunctionNames.has(functionName))
      break;
    if (/^[A-Z]/.test(functionName))
      return sanitizeIdentifier(functionName);
  }
  return void 0;
};
var typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
var labelPropName = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
var createEmotionProps = function createEmotionProps2(type, props) {
  if (typeof props.css === "string" && // check if there is a css declaration
  props.css.indexOf(":") !== -1) {
    throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`" + props.css + "`");
  }
  var newProps = {};
  for (var key in props) {
    if (hasOwnProperty.call(props, key)) {
      newProps[key] = props[key];
    }
  }
  newProps[typePropName] = type;
  if (!!props.css && (typeof props.css !== "object" || typeof props.css.name !== "string" || props.css.name.indexOf("-") === -1)) {
    var label = getLabelFromStackTrace(new Error().stack);
    if (label)
      newProps[labelPropName] = label;
  }
  return newProps;
};
var Insertion$2 = function Insertion(_ref) {
  var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
  registerStyles(cache, serialized, isStringTag);
  useInsertionEffectAlwaysWithSyncFallback(function() {
    return insertStyles(cache, serialized, isStringTag);
  });
  return null;
};
var Emotion = /* @__PURE__ */ withEmotionCache(function(props, cache, ref) {
  var cssProp = props.css;
  if (typeof cssProp === "string" && cache.registered[cssProp] !== void 0) {
    cssProp = cache.registered[cssProp];
  }
  var WrappedComponent = props[typePropName];
  var registeredStyles = [cssProp];
  var className = "";
  if (typeof props.className === "string") {
    className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
  } else if (props.className != null) {
    className = props.className + " ";
  }
  var serialized = serializeStyles(registeredStyles, void 0, reactExports.useContext(ThemeContext));
  if (serialized.name.indexOf("-") === -1) {
    var labelFromStack = props[labelPropName];
    if (labelFromStack) {
      serialized = serializeStyles([serialized, "label:" + labelFromStack + ";"]);
    }
  }
  className += cache.key + "-" + serialized.name;
  var newProps = {};
  for (var key in props) {
    if (hasOwnProperty.call(props, key) && key !== "css" && key !== typePropName && key !== labelPropName) {
      newProps[key] = props[key];
    }
  }
  newProps.ref = ref;
  newProps.className = className;
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement(Insertion$2, {
    cache,
    serialized,
    isStringTag: typeof WrappedComponent === "string"
  }), /* @__PURE__ */ reactExports.createElement(WrappedComponent, newProps));
});
{
  Emotion.displayName = "EmotionCssPropInternal";
}
var Emotion$1 = Emotion;
function jsx(type, props, key) {
  if (!hasOwnProperty.call(props, "css")) {
    return jsxRuntimeExports.jsx(type, props, key);
  }
  return jsxRuntimeExports.jsx(Emotion$1, createEmotionProps(type, props), key);
}
function jsxs(type, props, key) {
  if (!hasOwnProperty.call(props, "css")) {
    return jsxRuntimeExports.jsxs(type, props, key);
  }
  return jsxRuntimeExports.jsxs(Emotion$1, createEmotionProps(type, props), key);
}
const grey$1 = {
  0: "#fff",
  100: "#f5f5f5",
  200: "#eeeeee",
  300: "#e0e0e0",
  400: "#bdbdbd",
  500: "#9e9e9e",
  600: "#757575",
  700: "#616161",
  800: "#424242",
  900: "#212121"
};
const lightTheme$1 = {
  palette: {
    mode: "light",
    primary: {
      main: "#487DFA",
      contrastText: "#fff"
    },
    background: {
      default: "#fff",
      contrastText: "#000"
    },
    grey: grey$1
  }
};
const darkTheme$1 = {
  palette: {
    mode: "dark",
    primary: {
      main: "#487DFA",
      contrastText: "#fff"
    },
    background: {
      default: "#303030",
      contrastText: "#fff"
    },
    grey: grey$1
  }
};
var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
var isPropValid = /* @__PURE__ */ memoize(
  function(prop) {
    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
  }
  /* Z+1 */
);
var pkg = {
  name: "@emotion/react",
  version: "11.11.3",
  main: "dist/emotion-react.cjs.js",
  module: "dist/emotion-react.esm.js",
  browser: {
    "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
  },
  exports: {
    ".": {
      module: {
        worker: "./dist/emotion-react.worker.esm.js",
        browser: "./dist/emotion-react.browser.esm.js",
        "default": "./dist/emotion-react.esm.js"
      },
      "import": "./dist/emotion-react.cjs.mjs",
      "default": "./dist/emotion-react.cjs.js"
    },
    "./jsx-runtime": {
      module: {
        worker: "./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js",
        browser: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",
        "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js"
      },
      "import": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.mjs",
      "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
    },
    "./_isolated-hnrs": {
      module: {
        worker: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js",
        browser: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",
        "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"
      },
      "import": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.mjs",
      "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
    },
    "./jsx-dev-runtime": {
      module: {
        worker: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js",
        browser: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",
        "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js"
      },
      "import": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.mjs",
      "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
    },
    "./package.json": "./package.json",
    "./types/css-prop": "./types/css-prop.d.ts",
    "./macro": {
      types: {
        "import": "./macro.d.mts",
        "default": "./macro.d.ts"
      },
      "default": "./macro.js"
    }
  },
  types: "types/index.d.ts",
  files: [
    "src",
    "dist",
    "jsx-runtime",
    "jsx-dev-runtime",
    "_isolated-hnrs",
    "types/*.d.ts",
    "macro.*"
  ],
  sideEffects: false,
  author: "Emotion Contributors",
  license: "MIT",
  scripts: {
    "test:typescript": "dtslint types"
  },
  dependencies: {
    "@babel/runtime": "^7.18.3",
    "@emotion/babel-plugin": "^11.11.0",
    "@emotion/cache": "^11.11.0",
    "@emotion/serialize": "^1.1.3",
    "@emotion/use-insertion-effect-with-fallbacks": "^1.0.1",
    "@emotion/utils": "^1.2.1",
    "@emotion/weak-memoize": "^0.3.1",
    "hoist-non-react-statics": "^3.3.1"
  },
  peerDependencies: {
    react: ">=16.8.0"
  },
  peerDependenciesMeta: {
    "@types/react": {
      optional: true
    }
  },
  devDependencies: {
    "@definitelytyped/dtslint": "0.0.112",
    "@emotion/css": "11.11.2",
    "@emotion/css-prettifier": "1.1.3",
    "@emotion/server": "11.11.0",
    "@emotion/styled": "11.11.0",
    "html-tag-names": "^1.1.2",
    react: "16.14.0",
    "svg-tag-names": "^1.1.1",
    typescript: "^4.5.5"
  },
  repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
  publishConfig: {
    access: "public"
  },
  "umd:main": "dist/emotion-react.umd.min.js",
  preconstruct: {
    entrypoints: [
      "./index.js",
      "./jsx-runtime.js",
      "./jsx-dev-runtime.js",
      "./_isolated-hnrs.js"
    ],
    umdName: "emotionReact",
    exports: {
      envConditions: [
        "browser",
        "worker"
      ],
      extra: {
        "./types/css-prop": "./types/css-prop.d.ts",
        "./macro": {
          types: {
            "import": "./macro.d.mts",
            "default": "./macro.d.ts"
          },
          "default": "./macro.js"
        }
      }
    }
  }
};
var warnedAboutCssPropForGlobal = false;
var Global = /* @__PURE__ */ withEmotionCache(function(props, cache) {
  if (!warnedAboutCssPropForGlobal && // check for className as well since the user is
  // probably using the custom createElement which
  // means it will be turned into a className prop
  // $FlowFixMe I don't really want to add it to the type since it shouldn't be used
  (props.className || props.css)) {
    console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
    warnedAboutCssPropForGlobal = true;
  }
  var styles = props.styles;
  var serialized = serializeStyles([styles], void 0, reactExports.useContext(ThemeContext));
  var sheetRef = reactExports.useRef();
  useInsertionEffectWithLayoutFallback(function() {
    var key = cache.key + "-global";
    var sheet = new cache.sheet.constructor({
      key,
      nonce: cache.sheet.nonce,
      container: cache.sheet.container,
      speedy: cache.sheet.isSpeedy
    });
    var rehydrating = false;
    var node2 = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
    if (cache.sheet.tags.length) {
      sheet.before = cache.sheet.tags[0];
    }
    if (node2 !== null) {
      rehydrating = true;
      node2.setAttribute("data-emotion", key);
      sheet.hydrate([node2]);
    }
    sheetRef.current = [sheet, rehydrating];
    return function() {
      sheet.flush();
    };
  }, [cache]);
  useInsertionEffectWithLayoutFallback(function() {
    var sheetRefCurrent = sheetRef.current;
    var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
    if (rehydrating) {
      sheetRefCurrent[1] = false;
      return;
    }
    if (serialized.next !== void 0) {
      insertStyles(cache, serialized.next, true);
    }
    if (sheet.tags.length) {
      var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
      sheet.before = element;
      sheet.flush();
    }
    cache.insert("", serialized, sheet, false);
  }, [cache, serialized.name]);
  return null;
});
{
  Global.displayName = "EmotionGlobal";
}
function css() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return serializeStyles(args);
}
var classnames = function classnames2(args) {
  var len = args.length;
  var i = 0;
  var cls = "";
  for (; i < len; i++) {
    var arg = args[i];
    if (arg == null)
      continue;
    var toAdd = void 0;
    switch (typeof arg) {
      case "boolean":
        break;
      case "object": {
        if (Array.isArray(arg)) {
          toAdd = classnames2(arg);
        } else {
          if (arg.styles !== void 0 && arg.name !== void 0) {
            console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
          }
          toAdd = "";
          for (var k in arg) {
            if (arg[k] && k) {
              toAdd && (toAdd += " ");
              toAdd += k;
            }
          }
        }
        break;
      }
      default: {
        toAdd = arg;
      }
    }
    if (toAdd) {
      cls && (cls += " ");
      cls += toAdd;
    }
  }
  return cls;
};
function merge(registered, css2, className) {
  var registeredStyles = [];
  var rawClassName = getRegisteredStyles(registered, registeredStyles, className);
  if (registeredStyles.length < 2) {
    return className;
  }
  return rawClassName + css2(registeredStyles);
}
var Insertion$1 = function Insertion2(_ref) {
  var cache = _ref.cache, serializedArr = _ref.serializedArr;
  useInsertionEffectAlwaysWithSyncFallback(function() {
    for (var i = 0; i < serializedArr.length; i++) {
      insertStyles(cache, serializedArr[i], false);
    }
  });
  return null;
};
var ClassNames = /* @__PURE__ */ withEmotionCache(function(props, cache) {
  var hasRendered = false;
  var serializedArr = [];
  var css2 = function css3() {
    if (hasRendered && true) {
      throw new Error("css can only be used during render");
    }
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var serialized = serializeStyles(args, cache.registered);
    serializedArr.push(serialized);
    registerStyles(cache, serialized, false);
    return cache.key + "-" + serialized.name;
  };
  var cx = function cx2() {
    if (hasRendered && true) {
      throw new Error("cx can only be used during render");
    }
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return merge(cache.registered, css2, classnames(args));
  };
  var content = {
    css: css2,
    cx,
    theme: reactExports.useContext(ThemeContext)
  };
  var ele = props.children(content);
  hasRendered = true;
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement(Insertion$1, {
    cache,
    serializedArr
  }), ele);
});
{
  ClassNames.displayName = "EmotionClassNames";
}
{
  var isBrowser = true;
  var isTestEnv = typeof jest !== "undefined" || typeof vi !== "undefined";
  if (isBrowser && !isTestEnv) {
    var globalContext = (
      // $FlowIgnore
      typeof globalThis !== "undefined" ? globalThis : isBrowser ? window : global
    );
    var globalKey = "__EMOTION_REACT_" + pkg.version.split(".")[0] + "__";
    if (globalContext[globalKey]) {
      console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
    }
    globalContext[globalKey] = true;
  }
}
var testOmitPropsOnStringTag = isPropValid;
var testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
  return key !== "theme";
};
var getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag) {
  return typeof tag === "string" && // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
};
var composeShouldForwardProps = function composeShouldForwardProps2(tag, options, isReal) {
  var shouldForwardProp;
  if (options) {
    var optionsShouldForwardProp = options.shouldForwardProp;
    shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
      return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
    } : optionsShouldForwardProp;
  }
  if (typeof shouldForwardProp !== "function" && isReal) {
    shouldForwardProp = tag.__emotion_forwardProp;
  }
  return shouldForwardProp;
};
var ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
var Insertion3 = function Insertion4(_ref) {
  var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
  registerStyles(cache, serialized, isStringTag);
  useInsertionEffectAlwaysWithSyncFallback(function() {
    return insertStyles(cache, serialized, isStringTag);
  });
  return null;
};
var createStyled = function createStyled2(tag, options) {
  {
    if (tag === void 0) {
      throw new Error("You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.");
    }
  }
  var isReal = tag.__emotion_real === tag;
  var baseTag = isReal && tag.__emotion_base || tag;
  var identifierName;
  var targetClassName;
  if (options !== void 0) {
    identifierName = options.label;
    targetClassName = options.target;
  }
  var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
  var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
  var shouldUseAs = !defaultShouldForwardProp("as");
  return function() {
    var args = arguments;
    var styles = isReal && tag.__emotion_styles !== void 0 ? tag.__emotion_styles.slice(0) : [];
    if (identifierName !== void 0) {
      styles.push("label:" + identifierName + ";");
    }
    if (args[0] == null || args[0].raw === void 0) {
      styles.push.apply(styles, args);
    } else {
      if (args[0][0] === void 0) {
        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
      }
      styles.push(args[0][0]);
      var len = args.length;
      var i = 1;
      for (; i < len; i++) {
        if (args[0][i] === void 0) {
          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
        }
        styles.push(args[i], args[0][i]);
      }
    }
    var Styled = withEmotionCache(function(props, cache, ref) {
      var FinalTag = shouldUseAs && props.as || baseTag;
      var className = "";
      var classInterpolations = [];
      var mergedProps = props;
      if (props.theme == null) {
        mergedProps = {};
        for (var key in props) {
          mergedProps[key] = props[key];
        }
        mergedProps.theme = reactExports.useContext(ThemeContext);
      }
      if (typeof props.className === "string") {
        className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
      } else if (props.className != null) {
        className = props.className + " ";
      }
      var serialized = serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);
      className += cache.key + "-" + serialized.name;
      if (targetClassName !== void 0) {
        className += " " + targetClassName;
      }
      var finalShouldForwardProp = shouldUseAs && shouldForwardProp === void 0 ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
      var newProps = {};
      for (var _key in props) {
        if (shouldUseAs && _key === "as")
          continue;
        if (
          // $FlowFixMe
          finalShouldForwardProp(_key)
        ) {
          newProps[_key] = props[_key];
        }
      }
      newProps.className = className;
      newProps.ref = ref;
      return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement(Insertion3, {
        cache,
        serialized,
        isStringTag: typeof FinalTag === "string"
      }), /* @__PURE__ */ reactExports.createElement(FinalTag, newProps));
    });
    Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
    Styled.defaultProps = tag.defaultProps;
    Styled.__emotion_real = Styled;
    Styled.__emotion_base = baseTag;
    Styled.__emotion_styles = styles;
    Styled.__emotion_forwardProp = shouldForwardProp;
    Object.defineProperty(Styled, "toString", {
      value: function value() {
        if (targetClassName === void 0 && true) {
          return "NO_COMPONENT_SELECTOR";
        }
        return "." + targetClassName;
      }
    });
    Styled.withComponent = function(nextTag, nextOptions) {
      return createStyled2(nextTag, _extends({}, options, nextOptions, {
        shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
      })).apply(void 0, styles);
    };
    return Styled;
  };
};
var tags = [
  "a",
  "abbr",
  "address",
  "area",
  "article",
  "aside",
  "audio",
  "b",
  "base",
  "bdi",
  "bdo",
  "big",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "data",
  "datalist",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "embed",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hgroup",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "keygen",
  "label",
  "legend",
  "li",
  "link",
  "main",
  "map",
  "mark",
  "marquee",
  "menu",
  "menuitem",
  "meta",
  "meter",
  "nav",
  "noscript",
  "object",
  "ol",
  "optgroup",
  "option",
  "output",
  "p",
  "param",
  "picture",
  "pre",
  "progress",
  "q",
  "rp",
  "rt",
  "ruby",
  "s",
  "samp",
  "script",
  "section",
  "select",
  "small",
  "source",
  "span",
  "strong",
  "style",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "title",
  "tr",
  "track",
  "u",
  "ul",
  "var",
  "video",
  "wbr",
  // SVG
  "circle",
  "clipPath",
  "defs",
  "ellipse",
  "foreignObject",
  "g",
  "image",
  "line",
  "linearGradient",
  "mask",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "radialGradient",
  "rect",
  "stop",
  "svg",
  "text",
  "tspan"
];
var newStyled = createStyled.bind();
tags.forEach(function(tagName) {
  newStyled[tagName] = newStyled(tagName);
});
const LoadingSpinner$1 = ({ themeColor }) => {
  const theme = reactExports.useMemo(() => themeColor === "light" ? lightTheme$1 : darkTheme$1, [themeColor]);
  const StyledDiv = newStyled.div`
        width: 2em;
        height: 2em;
        border: 4px solid ${theme.palette.background.contrastText};
        border-bottom-color: transparent;
        border-radius: 50%;
        display: inherit;
        box-sizing: border-box;
        animation: rotation 1s linear infinite;
        @keyframes rotation {
            0% {
                transform: rotate(0deg);
            }
            100% {
                transform: rotate(360deg);
            }
        }
    `;
  return jsx(StyledDiv, {});
};
const packageInfo = { name: "@polkadot/api", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "10.11.1" };
function findCall(registry, callIndex) {
  return registry.findMetaCall(u8aToU8a(callIndex));
}
function findError(registry, errorIndex) {
  return registry.findMetaError(u8aToU8a(errorIndex));
}
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __awaiter$2(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator$2(thisArg, body) {
  var _23 = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_23 = 0)), _23)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _23.label++;
            return { value: op[1], done: false };
          case 5:
            _23.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _23.ops.pop();
            _23.trys.pop();
            continue;
          default:
            if (!(t = _23.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _23 = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _23.label = op[1];
              break;
            }
            if (op[0] === 6 && _23.label < t[1]) {
              _23.label = t[1];
              t = op;
              break;
            }
            if (t && _23.label < t[2]) {
              _23.label = t[2];
              _23.ops.push(op);
              break;
            }
            if (t[2])
              _23.ops.pop();
            _23.trys.pop();
            continue;
        }
        op = body.call(thisArg, _23);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m2 = s && o[s], i = 0;
  if (m2)
    return m2.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m2 = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m2)
    return o;
  var i = m2.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error2) {
    e = { error: error2 };
  } finally {
    try {
      if (r && !r.done && (m2 = i["return"]))
        m2.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spreadArray$2(to, from2, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l2 = from2.length, ar; i < l2; i++) {
      if (ar || !(i in from2)) {
        if (!ar)
          ar = Array.prototype.slice.call(from2, 0, i);
        ar[i] = from2[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from2));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m2 = o[Symbol.asyncIterator], i;
  return m2 ? m2.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function isFunction(value) {
  return typeof value === "function";
}
function createErrorClass(createImpl) {
  var _super = function(instance2) {
    Error.call(instance2);
    instance2.stack = new Error().stack;
  };
  var ctorFunc = createImpl(_super);
  ctorFunc.prototype = Object.create(Error.prototype);
  ctorFunc.prototype.constructor = ctorFunc;
  return ctorFunc;
}
var UnsubscriptionError = createErrorClass(function(_super) {
  return function UnsubscriptionErrorImpl(errors) {
    _super(this);
    this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i) {
      return i + 1 + ") " + err.toString();
    }).join("\n  ") : "";
    this.name = "UnsubscriptionError";
    this.errors = errors;
  };
});
function arrRemove(arr2, item) {
  if (arr2) {
    var index = arr2.indexOf(item);
    0 <= index && arr2.splice(index, 1);
  }
}
var Subscription = function() {
  function Subscription2(initialTeardown) {
    this.initialTeardown = initialTeardown;
    this.closed = false;
    this._parentage = null;
    this._finalizers = null;
  }
  Subscription2.prototype.unsubscribe = function() {
    var e_1, _a2, e_2, _b;
    var errors;
    if (!this.closed) {
      this.closed = true;
      var _parentage = this._parentage;
      if (_parentage) {
        this._parentage = null;
        if (Array.isArray(_parentage)) {
          try {
            for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
              var parent_1 = _parentage_1_1.value;
              parent_1.remove(this);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_parentage_1_1 && !_parentage_1_1.done && (_a2 = _parentage_1.return))
                _a2.call(_parentage_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        } else {
          _parentage.remove(this);
        }
      }
      var initialFinalizer = this.initialTeardown;
      if (isFunction(initialFinalizer)) {
        try {
          initialFinalizer();
        } catch (e) {
          errors = e instanceof UnsubscriptionError ? e.errors : [e];
        }
      }
      var _finalizers = this._finalizers;
      if (_finalizers) {
        this._finalizers = null;
        try {
          for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
            var finalizer = _finalizers_1_1.value;
            try {
              execFinalizer(finalizer);
            } catch (err) {
              errors = errors !== null && errors !== void 0 ? errors : [];
              if (err instanceof UnsubscriptionError) {
                errors = __spreadArray$2(__spreadArray$2([], __read(errors)), __read(err.errors));
              } else {
                errors.push(err);
              }
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return))
              _b.call(_finalizers_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
      }
      if (errors) {
        throw new UnsubscriptionError(errors);
      }
    }
  };
  Subscription2.prototype.add = function(teardown) {
    var _a2;
    if (teardown && teardown !== this) {
      if (this.closed) {
        execFinalizer(teardown);
      } else {
        if (teardown instanceof Subscription2) {
          if (teardown.closed || teardown._hasParent(this)) {
            return;
          }
          teardown._addParent(this);
        }
        (this._finalizers = (_a2 = this._finalizers) !== null && _a2 !== void 0 ? _a2 : []).push(teardown);
      }
    }
  };
  Subscription2.prototype._hasParent = function(parent) {
    var _parentage = this._parentage;
    return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
  };
  Subscription2.prototype._addParent = function(parent) {
    var _parentage = this._parentage;
    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
  };
  Subscription2.prototype._removeParent = function(parent) {
    var _parentage = this._parentage;
    if (_parentage === parent) {
      this._parentage = null;
    } else if (Array.isArray(_parentage)) {
      arrRemove(_parentage, parent);
    }
  };
  Subscription2.prototype.remove = function(teardown) {
    var _finalizers = this._finalizers;
    _finalizers && arrRemove(_finalizers, teardown);
    if (teardown instanceof Subscription2) {
      teardown._removeParent(this);
    }
  };
  Subscription2.EMPTY = function() {
    var empty = new Subscription2();
    empty.closed = true;
    return empty;
  }();
  return Subscription2;
}();
var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
function isSubscription(value) {
  return value instanceof Subscription || value && "closed" in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);
}
function execFinalizer(finalizer) {
  if (isFunction(finalizer)) {
    finalizer();
  } else {
    finalizer.unsubscribe();
  }
}
var config$2 = {
  onUnhandledError: null,
  onStoppedNotification: null,
  Promise: void 0,
  useDeprecatedSynchronousErrorHandling: false,
  useDeprecatedNextContext: false
};
var timeoutProvider = {
  setTimeout: function(handler, timeout) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    var delegate = timeoutProvider.delegate;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
      return delegate.setTimeout.apply(delegate, __spreadArray$2([handler, timeout], __read(args)));
    }
    return setTimeout.apply(void 0, __spreadArray$2([handler, timeout], __read(args)));
  },
  clearTimeout: function(handle2) {
    var delegate = timeoutProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle2);
  },
  delegate: void 0
};
function reportUnhandledError(err) {
  timeoutProvider.setTimeout(function() {
    {
      throw err;
    }
  });
}
function noop$1() {
}
function errorContext(cb) {
  {
    cb();
  }
}
var Subscriber = function(_super) {
  __extends(Subscriber2, _super);
  function Subscriber2(destination) {
    var _this = _super.call(this) || this;
    _this.isStopped = false;
    if (destination) {
      _this.destination = destination;
      if (isSubscription(destination)) {
        destination.add(_this);
      }
    } else {
      _this.destination = EMPTY_OBSERVER;
    }
    return _this;
  }
  Subscriber2.create = function(next2, error2, complete) {
    return new SafeSubscriber(next2, error2, complete);
  };
  Subscriber2.prototype.next = function(value) {
    if (this.isStopped)
      ;
    else {
      this._next(value);
    }
  };
  Subscriber2.prototype.error = function(err) {
    if (this.isStopped)
      ;
    else {
      this.isStopped = true;
      this._error(err);
    }
  };
  Subscriber2.prototype.complete = function() {
    if (this.isStopped)
      ;
    else {
      this.isStopped = true;
      this._complete();
    }
  };
  Subscriber2.prototype.unsubscribe = function() {
    if (!this.closed) {
      this.isStopped = true;
      _super.prototype.unsubscribe.call(this);
      this.destination = null;
    }
  };
  Subscriber2.prototype._next = function(value) {
    this.destination.next(value);
  };
  Subscriber2.prototype._error = function(err) {
    try {
      this.destination.error(err);
    } finally {
      this.unsubscribe();
    }
  };
  Subscriber2.prototype._complete = function() {
    try {
      this.destination.complete();
    } finally {
      this.unsubscribe();
    }
  };
  return Subscriber2;
}(Subscription);
var _bind = Function.prototype.bind;
function bind(fn, thisArg) {
  return _bind.call(fn, thisArg);
}
var ConsumerObserver = function() {
  function ConsumerObserver2(partialObserver) {
    this.partialObserver = partialObserver;
  }
  ConsumerObserver2.prototype.next = function(value) {
    var partialObserver = this.partialObserver;
    if (partialObserver.next) {
      try {
        partialObserver.next(value);
      } catch (error2) {
        handleUnhandledError(error2);
      }
    }
  };
  ConsumerObserver2.prototype.error = function(err) {
    var partialObserver = this.partialObserver;
    if (partialObserver.error) {
      try {
        partialObserver.error(err);
      } catch (error2) {
        handleUnhandledError(error2);
      }
    } else {
      handleUnhandledError(err);
    }
  };
  ConsumerObserver2.prototype.complete = function() {
    var partialObserver = this.partialObserver;
    if (partialObserver.complete) {
      try {
        partialObserver.complete();
      } catch (error2) {
        handleUnhandledError(error2);
      }
    }
  };
  return ConsumerObserver2;
}();
var SafeSubscriber = function(_super) {
  __extends(SafeSubscriber2, _super);
  function SafeSubscriber2(observerOrNext, error2, complete) {
    var _this = _super.call(this) || this;
    var partialObserver;
    if (isFunction(observerOrNext) || !observerOrNext) {
      partialObserver = {
        next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
        error: error2 !== null && error2 !== void 0 ? error2 : void 0,
        complete: complete !== null && complete !== void 0 ? complete : void 0
      };
    } else {
      var context_1;
      if (_this && config$2.useDeprecatedNextContext) {
        context_1 = Object.create(observerOrNext);
        context_1.unsubscribe = function() {
          return _this.unsubscribe();
        };
        partialObserver = {
          next: observerOrNext.next && bind(observerOrNext.next, context_1),
          error: observerOrNext.error && bind(observerOrNext.error, context_1),
          complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)
        };
      } else {
        partialObserver = observerOrNext;
      }
    }
    _this.destination = new ConsumerObserver(partialObserver);
    return _this;
  }
  return SafeSubscriber2;
}(Subscriber);
function handleUnhandledError(error2) {
  {
    reportUnhandledError(error2);
  }
}
function defaultErrorHandler(err) {
  throw err;
}
var EMPTY_OBSERVER = {
  closed: true,
  next: noop$1,
  error: defaultErrorHandler,
  complete: noop$1
};
var observable = function() {
  return typeof Symbol === "function" && Symbol.observable || "@@observable";
}();
function identity$1(x) {
  return x;
}
function pipeFromArray(fns) {
  if (fns.length === 0) {
    return identity$1;
  }
  if (fns.length === 1) {
    return fns[0];
  }
  return function piped(input) {
    return fns.reduce(function(prev2, fn) {
      return fn(prev2);
    }, input);
  };
}
var Observable = function() {
  function Observable2(subscribe) {
    if (subscribe) {
      this._subscribe = subscribe;
    }
  }
  Observable2.prototype.lift = function(operator) {
    var observable2 = new Observable2();
    observable2.source = this;
    observable2.operator = operator;
    return observable2;
  };
  Observable2.prototype.subscribe = function(observerOrNext, error2, complete) {
    var _this = this;
    var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error2, complete);
    errorContext(function() {
      var _a2 = _this, operator = _a2.operator, source = _a2.source;
      subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
    });
    return subscriber;
  };
  Observable2.prototype._trySubscribe = function(sink) {
    try {
      return this._subscribe(sink);
    } catch (err) {
      sink.error(err);
    }
  };
  Observable2.prototype.forEach = function(next2, promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function(resolve, reject) {
      var subscriber = new SafeSubscriber({
        next: function(value) {
          try {
            next2(value);
          } catch (err) {
            reject(err);
            subscriber.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
      _this.subscribe(subscriber);
    });
  };
  Observable2.prototype._subscribe = function(subscriber) {
    var _a2;
    return (_a2 = this.source) === null || _a2 === void 0 ? void 0 : _a2.subscribe(subscriber);
  };
  Observable2.prototype[observable] = function() {
    return this;
  };
  Observable2.prototype.pipe = function() {
    var operations = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      operations[_i] = arguments[_i];
    }
    return pipeFromArray(operations)(this);
  };
  Observable2.prototype.toPromise = function(promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function(resolve, reject) {
      var value;
      _this.subscribe(function(x) {
        return value = x;
      }, function(err) {
        return reject(err);
      }, function() {
        return resolve(value);
      });
    });
  };
  Observable2.create = function(subscribe) {
    return new Observable2(subscribe);
  };
  return Observable2;
}();
function getPromiseCtor(promiseCtor) {
  var _a2;
  return (_a2 = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config$2.Promise) !== null && _a2 !== void 0 ? _a2 : Promise;
}
function isObserver(value) {
  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
}
function isSubscriber(value) {
  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
}
function hasLift(source) {
  return isFunction(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init3) {
  return function(source) {
    if (hasLift(source)) {
      return source.lift(function(liftedSource) {
        try {
          return init3(liftedSource, this);
        } catch (err) {
          this.error(err);
        }
      });
    }
    throw new TypeError("Unable to lift unknown Observable type");
  };
}
function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber = function(_super) {
  __extends(OperatorSubscriber2, _super);
  function OperatorSubscriber2(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
    var _this = _super.call(this, destination) || this;
    _this.onFinalize = onFinalize;
    _this.shouldUnsubscribe = shouldUnsubscribe;
    _this._next = onNext ? function(value) {
      try {
        onNext(value);
      } catch (err) {
        destination.error(err);
      }
    } : _super.prototype._next;
    _this._error = onError ? function(err) {
      try {
        onError(err);
      } catch (err2) {
        destination.error(err2);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._error;
    _this._complete = onComplete ? function() {
      try {
        onComplete();
      } catch (err) {
        destination.error(err);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._complete;
    return _this;
  }
  OperatorSubscriber2.prototype.unsubscribe = function() {
    var _a2;
    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
      var closed_1 = this.closed;
      _super.prototype.unsubscribe.call(this);
      !closed_1 && ((_a2 = this.onFinalize) === null || _a2 === void 0 ? void 0 : _a2.call(this));
    }
  };
  return OperatorSubscriber2;
}(Subscriber);
function refCount() {
  return operate(function(source, subscriber) {
    var connection = null;
    source._refCount++;
    var refCounter = createOperatorSubscriber(subscriber, void 0, void 0, void 0, function() {
      if (!source || source._refCount <= 0 || 0 < --source._refCount) {
        connection = null;
        return;
      }
      var sharedConnection = source._connection;
      var conn = connection;
      connection = null;
      if (sharedConnection && (!conn || sharedConnection === conn)) {
        sharedConnection.unsubscribe();
      }
      subscriber.unsubscribe();
    });
    source.subscribe(refCounter);
    if (!refCounter.closed) {
      connection = source.connect();
    }
  });
}
var ConnectableObservable = function(_super) {
  __extends(ConnectableObservable2, _super);
  function ConnectableObservable2(source, subjectFactory) {
    var _this = _super.call(this) || this;
    _this.source = source;
    _this.subjectFactory = subjectFactory;
    _this._subject = null;
    _this._refCount = 0;
    _this._connection = null;
    if (hasLift(source)) {
      _this.lift = source.lift;
    }
    return _this;
  }
  ConnectableObservable2.prototype._subscribe = function(subscriber) {
    return this.getSubject().subscribe(subscriber);
  };
  ConnectableObservable2.prototype.getSubject = function() {
    var subject = this._subject;
    if (!subject || subject.isStopped) {
      this._subject = this.subjectFactory();
    }
    return this._subject;
  };
  ConnectableObservable2.prototype._teardown = function() {
    this._refCount = 0;
    var _connection = this._connection;
    this._subject = this._connection = null;
    _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
  };
  ConnectableObservable2.prototype.connect = function() {
    var _this = this;
    var connection = this._connection;
    if (!connection) {
      connection = this._connection = new Subscription();
      var subject_1 = this.getSubject();
      connection.add(this.source.subscribe(createOperatorSubscriber(subject_1, void 0, function() {
        _this._teardown();
        subject_1.complete();
      }, function(err) {
        _this._teardown();
        subject_1.error(err);
      }, function() {
        return _this._teardown();
      })));
      if (connection.closed) {
        this._connection = null;
        connection = Subscription.EMPTY;
      }
    }
    return connection;
  };
  ConnectableObservable2.prototype.refCount = function() {
    return refCount()(this);
  };
  return ConnectableObservable2;
}(Observable);
var ObjectUnsubscribedError = createErrorClass(function(_super) {
  return function ObjectUnsubscribedErrorImpl() {
    _super(this);
    this.name = "ObjectUnsubscribedError";
    this.message = "object unsubscribed";
  };
});
var Subject = function(_super) {
  __extends(Subject2, _super);
  function Subject2() {
    var _this = _super.call(this) || this;
    _this.closed = false;
    _this.currentObservers = null;
    _this.observers = [];
    _this.isStopped = false;
    _this.hasError = false;
    _this.thrownError = null;
    return _this;
  }
  Subject2.prototype.lift = function(operator) {
    var subject = new AnonymousSubject(this, this);
    subject.operator = operator;
    return subject;
  };
  Subject2.prototype._throwIfClosed = function() {
    if (this.closed) {
      throw new ObjectUnsubscribedError();
    }
  };
  Subject2.prototype.next = function(value) {
    var _this = this;
    errorContext(function() {
      var e_1, _a2;
      _this._throwIfClosed();
      if (!_this.isStopped) {
        if (!_this.currentObservers) {
          _this.currentObservers = Array.from(_this.observers);
        }
        try {
          for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
            var observer = _c.value;
            observer.next(value);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a2 = _b.return))
              _a2.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      }
    });
  };
  Subject2.prototype.error = function(err) {
    var _this = this;
    errorContext(function() {
      _this._throwIfClosed();
      if (!_this.isStopped) {
        _this.hasError = _this.isStopped = true;
        _this.thrownError = err;
        var observers = _this.observers;
        while (observers.length) {
          observers.shift().error(err);
        }
      }
    });
  };
  Subject2.prototype.complete = function() {
    var _this = this;
    errorContext(function() {
      _this._throwIfClosed();
      if (!_this.isStopped) {
        _this.isStopped = true;
        var observers = _this.observers;
        while (observers.length) {
          observers.shift().complete();
        }
      }
    });
  };
  Subject2.prototype.unsubscribe = function() {
    this.isStopped = this.closed = true;
    this.observers = this.currentObservers = null;
  };
  Object.defineProperty(Subject2.prototype, "observed", {
    get: function() {
      var _a2;
      return ((_a2 = this.observers) === null || _a2 === void 0 ? void 0 : _a2.length) > 0;
    },
    enumerable: false,
    configurable: true
  });
  Subject2.prototype._trySubscribe = function(subscriber) {
    this._throwIfClosed();
    return _super.prototype._trySubscribe.call(this, subscriber);
  };
  Subject2.prototype._subscribe = function(subscriber) {
    this._throwIfClosed();
    this._checkFinalizedStatuses(subscriber);
    return this._innerSubscribe(subscriber);
  };
  Subject2.prototype._innerSubscribe = function(subscriber) {
    var _this = this;
    var _a2 = this, hasError = _a2.hasError, isStopped = _a2.isStopped, observers = _a2.observers;
    if (hasError || isStopped) {
      return EMPTY_SUBSCRIPTION;
    }
    this.currentObservers = null;
    observers.push(subscriber);
    return new Subscription(function() {
      _this.currentObservers = null;
      arrRemove(observers, subscriber);
    });
  };
  Subject2.prototype._checkFinalizedStatuses = function(subscriber) {
    var _a2 = this, hasError = _a2.hasError, thrownError = _a2.thrownError, isStopped = _a2.isStopped;
    if (hasError) {
      subscriber.error(thrownError);
    } else if (isStopped) {
      subscriber.complete();
    }
  };
  Subject2.prototype.asObservable = function() {
    var observable2 = new Observable();
    observable2.source = this;
    return observable2;
  };
  Subject2.create = function(destination, source) {
    return new AnonymousSubject(destination, source);
  };
  return Subject2;
}(Observable);
var AnonymousSubject = function(_super) {
  __extends(AnonymousSubject2, _super);
  function AnonymousSubject2(destination, source) {
    var _this = _super.call(this) || this;
    _this.destination = destination;
    _this.source = source;
    return _this;
  }
  AnonymousSubject2.prototype.next = function(value) {
    var _a2, _b;
    (_b = (_a2 = this.destination) === null || _a2 === void 0 ? void 0 : _a2.next) === null || _b === void 0 ? void 0 : _b.call(_a2, value);
  };
  AnonymousSubject2.prototype.error = function(err) {
    var _a2, _b;
    (_b = (_a2 = this.destination) === null || _a2 === void 0 ? void 0 : _a2.error) === null || _b === void 0 ? void 0 : _b.call(_a2, err);
  };
  AnonymousSubject2.prototype.complete = function() {
    var _a2, _b;
    (_b = (_a2 = this.destination) === null || _a2 === void 0 ? void 0 : _a2.complete) === null || _b === void 0 ? void 0 : _b.call(_a2);
  };
  AnonymousSubject2.prototype._subscribe = function(subscriber) {
    var _a2, _b;
    return (_b = (_a2 = this.source) === null || _a2 === void 0 ? void 0 : _a2.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
  };
  return AnonymousSubject2;
}(Subject);
var BehaviorSubject = function(_super) {
  __extends(BehaviorSubject2, _super);
  function BehaviorSubject2(_value) {
    var _this = _super.call(this) || this;
    _this._value = _value;
    return _this;
  }
  Object.defineProperty(BehaviorSubject2.prototype, "value", {
    get: function() {
      return this.getValue();
    },
    enumerable: false,
    configurable: true
  });
  BehaviorSubject2.prototype._subscribe = function(subscriber) {
    var subscription = _super.prototype._subscribe.call(this, subscriber);
    !subscription.closed && subscriber.next(this._value);
    return subscription;
  };
  BehaviorSubject2.prototype.getValue = function() {
    var _a2 = this, hasError = _a2.hasError, thrownError = _a2.thrownError, _value = _a2._value;
    if (hasError) {
      throw thrownError;
    }
    this._throwIfClosed();
    return _value;
  };
  BehaviorSubject2.prototype.next = function(value) {
    _super.prototype.next.call(this, this._value = value);
  };
  return BehaviorSubject2;
}(Subject);
var dateTimestampProvider = {
  now: function() {
    return (dateTimestampProvider.delegate || Date).now();
  },
  delegate: void 0
};
var ReplaySubject = function(_super) {
  __extends(ReplaySubject2, _super);
  function ReplaySubject2(_bufferSize, _windowTime, _timestampProvider) {
    if (_bufferSize === void 0) {
      _bufferSize = Infinity;
    }
    if (_windowTime === void 0) {
      _windowTime = Infinity;
    }
    if (_timestampProvider === void 0) {
      _timestampProvider = dateTimestampProvider;
    }
    var _this = _super.call(this) || this;
    _this._bufferSize = _bufferSize;
    _this._windowTime = _windowTime;
    _this._timestampProvider = _timestampProvider;
    _this._buffer = [];
    _this._infiniteTimeWindow = true;
    _this._infiniteTimeWindow = _windowTime === Infinity;
    _this._bufferSize = Math.max(1, _bufferSize);
    _this._windowTime = Math.max(1, _windowTime);
    return _this;
  }
  ReplaySubject2.prototype.next = function(value) {
    var _a2 = this, isStopped = _a2.isStopped, _buffer = _a2._buffer, _infiniteTimeWindow = _a2._infiniteTimeWindow, _timestampProvider = _a2._timestampProvider, _windowTime = _a2._windowTime;
    if (!isStopped) {
      _buffer.push(value);
      !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
    }
    this._trimBuffer();
    _super.prototype.next.call(this, value);
  };
  ReplaySubject2.prototype._subscribe = function(subscriber) {
    this._throwIfClosed();
    this._trimBuffer();
    var subscription = this._innerSubscribe(subscriber);
    var _a2 = this, _infiniteTimeWindow = _a2._infiniteTimeWindow, _buffer = _a2._buffer;
    var copy2 = _buffer.slice();
    for (var i = 0; i < copy2.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
      subscriber.next(copy2[i]);
    }
    this._checkFinalizedStatuses(subscriber);
    return subscription;
  };
  ReplaySubject2.prototype._trimBuffer = function() {
    var _a2 = this, _bufferSize = _a2._bufferSize, _timestampProvider = _a2._timestampProvider, _buffer = _a2._buffer, _infiniteTimeWindow = _a2._infiniteTimeWindow;
    var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
    _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
    if (!_infiniteTimeWindow) {
      var now = _timestampProvider.now();
      var last2 = 0;
      for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
        last2 = i;
      }
      last2 && _buffer.splice(0, last2 + 1);
    }
  };
  return ReplaySubject2;
}(Subject);
var Action = function(_super) {
  __extends(Action2, _super);
  function Action2(scheduler2, work) {
    return _super.call(this) || this;
  }
  Action2.prototype.schedule = function(state, delay) {
    return this;
  };
  return Action2;
}(Subscription);
var intervalProvider = {
  setInterval: function(handler, timeout) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    var delegate = intervalProvider.delegate;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
      return delegate.setInterval.apply(delegate, __spreadArray$2([handler, timeout], __read(args)));
    }
    return setInterval.apply(void 0, __spreadArray$2([handler, timeout], __read(args)));
  },
  clearInterval: function(handle2) {
    var delegate = intervalProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle2);
  },
  delegate: void 0
};
var AsyncAction = function(_super) {
  __extends(AsyncAction2, _super);
  function AsyncAction2(scheduler2, work) {
    var _this = _super.call(this, scheduler2, work) || this;
    _this.scheduler = scheduler2;
    _this.work = work;
    _this.pending = false;
    return _this;
  }
  AsyncAction2.prototype.schedule = function(state, delay) {
    var _a2;
    if (delay === void 0) {
      delay = 0;
    }
    if (this.closed) {
      return this;
    }
    this.state = state;
    var id = this.id;
    var scheduler2 = this.scheduler;
    if (id != null) {
      this.id = this.recycleAsyncId(scheduler2, id, delay);
    }
    this.pending = true;
    this.delay = delay;
    this.id = (_a2 = this.id) !== null && _a2 !== void 0 ? _a2 : this.requestAsyncId(scheduler2, this.id, delay);
    return this;
  };
  AsyncAction2.prototype.requestAsyncId = function(scheduler2, _id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    return intervalProvider.setInterval(scheduler2.flush.bind(scheduler2, this), delay);
  };
  AsyncAction2.prototype.recycleAsyncId = function(_scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (delay != null && this.delay === delay && this.pending === false) {
      return id;
    }
    if (id != null) {
      intervalProvider.clearInterval(id);
    }
    return void 0;
  };
  AsyncAction2.prototype.execute = function(state, delay) {
    if (this.closed) {
      return new Error("executing a cancelled action");
    }
    this.pending = false;
    var error2 = this._execute(state, delay);
    if (error2) {
      return error2;
    } else if (this.pending === false && this.id != null) {
      this.id = this.recycleAsyncId(this.scheduler, this.id, null);
    }
  };
  AsyncAction2.prototype._execute = function(state, _delay) {
    var errored = false;
    var errorValue;
    try {
      this.work(state);
    } catch (e) {
      errored = true;
      errorValue = e ? e : new Error("Scheduled action threw falsy error");
    }
    if (errored) {
      this.unsubscribe();
      return errorValue;
    }
  };
  AsyncAction2.prototype.unsubscribe = function() {
    if (!this.closed) {
      var _a2 = this, id = _a2.id, scheduler2 = _a2.scheduler;
      var actions = scheduler2.actions;
      this.work = this.state = this.scheduler = null;
      this.pending = false;
      arrRemove(actions, this);
      if (id != null) {
        this.id = this.recycleAsyncId(scheduler2, id, null);
      }
      this.delay = null;
      _super.prototype.unsubscribe.call(this);
    }
  };
  return AsyncAction2;
}(Action);
var nextHandle = 1;
var resolved;
var activeHandles = {};
function findAndClearHandle(handle2) {
  if (handle2 in activeHandles) {
    delete activeHandles[handle2];
    return true;
  }
  return false;
}
var Immediate = {
  setImmediate: function(cb) {
    var handle2 = nextHandle++;
    activeHandles[handle2] = true;
    if (!resolved) {
      resolved = Promise.resolve();
    }
    resolved.then(function() {
      return findAndClearHandle(handle2) && cb();
    });
    return handle2;
  },
  clearImmediate: function(handle2) {
    findAndClearHandle(handle2);
  }
};
var setImmediate$1 = Immediate.setImmediate, clearImmediate = Immediate.clearImmediate;
var immediateProvider = {
  setImmediate: function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var delegate = immediateProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate$1).apply(void 0, __spreadArray$2([], __read(args)));
  },
  clearImmediate: function(handle2) {
    var delegate = immediateProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle2);
  },
  delegate: void 0
};
var AsapAction = function(_super) {
  __extends(AsapAction2, _super);
  function AsapAction2(scheduler2, work) {
    var _this = _super.call(this, scheduler2, work) || this;
    _this.scheduler = scheduler2;
    _this.work = work;
    return _this;
  }
  AsapAction2.prototype.requestAsyncId = function(scheduler2, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (delay !== null && delay > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler2, id, delay);
    }
    scheduler2.actions.push(this);
    return scheduler2._scheduled || (scheduler2._scheduled = immediateProvider.setImmediate(scheduler2.flush.bind(scheduler2, void 0)));
  };
  AsapAction2.prototype.recycleAsyncId = function(scheduler2, id, delay) {
    var _a2;
    if (delay === void 0) {
      delay = 0;
    }
    if (delay != null ? delay > 0 : this.delay > 0) {
      return _super.prototype.recycleAsyncId.call(this, scheduler2, id, delay);
    }
    var actions = scheduler2.actions;
    if (id != null && ((_a2 = actions[actions.length - 1]) === null || _a2 === void 0 ? void 0 : _a2.id) !== id) {
      immediateProvider.clearImmediate(id);
      if (scheduler2._scheduled === id) {
        scheduler2._scheduled = void 0;
      }
    }
    return void 0;
  };
  return AsapAction2;
}(AsyncAction);
var Scheduler = function() {
  function Scheduler2(schedulerActionCtor, now) {
    if (now === void 0) {
      now = Scheduler2.now;
    }
    this.schedulerActionCtor = schedulerActionCtor;
    this.now = now;
  }
  Scheduler2.prototype.schedule = function(work, delay, state) {
    if (delay === void 0) {
      delay = 0;
    }
    return new this.schedulerActionCtor(this, work).schedule(state, delay);
  };
  Scheduler2.now = dateTimestampProvider.now;
  return Scheduler2;
}();
var AsyncScheduler = function(_super) {
  __extends(AsyncScheduler2, _super);
  function AsyncScheduler2(SchedulerAction, now) {
    if (now === void 0) {
      now = Scheduler.now;
    }
    var _this = _super.call(this, SchedulerAction, now) || this;
    _this.actions = [];
    _this._active = false;
    return _this;
  }
  AsyncScheduler2.prototype.flush = function(action) {
    var actions = this.actions;
    if (this._active) {
      actions.push(action);
      return;
    }
    var error2;
    this._active = true;
    do {
      if (error2 = action.execute(action.state, action.delay)) {
        break;
      }
    } while (action = actions.shift());
    this._active = false;
    if (error2) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }
      throw error2;
    }
  };
  return AsyncScheduler2;
}(Scheduler);
var AsapScheduler = function(_super) {
  __extends(AsapScheduler2, _super);
  function AsapScheduler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AsapScheduler2.prototype.flush = function(action) {
    this._active = true;
    var flushId = this._scheduled;
    this._scheduled = void 0;
    var actions = this.actions;
    var error2;
    action = action || actions.shift();
    do {
      if (error2 = action.execute(action.state, action.delay)) {
        break;
      }
    } while ((action = actions[0]) && action.id === flushId && actions.shift());
    this._active = false;
    if (error2) {
      while ((action = actions[0]) && action.id === flushId && actions.shift()) {
        action.unsubscribe();
      }
      throw error2;
    }
  };
  return AsapScheduler2;
}(AsyncScheduler);
var asapScheduler = new AsapScheduler(AsapAction);
var EMPTY = new Observable(function(subscriber) {
  return subscriber.complete();
});
function isScheduler(value) {
  return value && isFunction(value.schedule);
}
function last(arr2) {
  return arr2[arr2.length - 1];
}
function popResultSelector(args) {
  return isFunction(last(args)) ? args.pop() : void 0;
}
function popScheduler(args) {
  return isScheduler(last(args)) ? args.pop() : void 0;
}
var isArrayLike = function(x) {
  return x && typeof x.length === "number" && typeof x !== "function";
};
function isPromise$2(value) {
  return isFunction(value === null || value === void 0 ? void 0 : value.then);
}
function isInteropObservable(input) {
  return isFunction(input[observable]);
}
function isAsyncIterable(obj) {
  return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}
function createInvalidObservableTypeError(input) {
  return new TypeError("You provided " + (input !== null && typeof input === "object" ? "an invalid object" : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
}
function getSymbolIterator() {
  if (typeof Symbol !== "function" || !Symbol.iterator) {
    return "@@iterator";
  }
  return Symbol.iterator;
}
var iterator = getSymbolIterator();
function isIterable(input) {
  return isFunction(input === null || input === void 0 ? void 0 : input[iterator]);
}
function readableStreamLikeToAsyncGenerator(readableStream) {
  return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
    var reader, _a2, value, done;
    return __generator$2(this, function(_b) {
      switch (_b.label) {
        case 0:
          reader = readableStream.getReader();
          _b.label = 1;
        case 1:
          _b.trys.push([1, , 9, 10]);
          _b.label = 2;
        case 2:
          return [4, __await(reader.read())];
        case 3:
          _a2 = _b.sent(), value = _a2.value, done = _a2.done;
          if (!done)
            return [3, 5];
          return [4, __await(void 0)];
        case 4:
          return [2, _b.sent()];
        case 5:
          return [4, __await(value)];
        case 6:
          return [4, _b.sent()];
        case 7:
          _b.sent();
          return [3, 2];
        case 8:
          return [3, 10];
        case 9:
          reader.releaseLock();
          return [7];
        case 10:
          return [2];
      }
    });
  });
}
function isReadableStreamLike(obj) {
  return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
}
function innerFrom(input) {
  if (input instanceof Observable) {
    return input;
  }
  if (input != null) {
    if (isInteropObservable(input)) {
      return fromInteropObservable(input);
    }
    if (isArrayLike(input)) {
      return fromArrayLike(input);
    }
    if (isPromise$2(input)) {
      return fromPromise(input);
    }
    if (isAsyncIterable(input)) {
      return fromAsyncIterable(input);
    }
    if (isIterable(input)) {
      return fromIterable(input);
    }
    if (isReadableStreamLike(input)) {
      return fromReadableStreamLike(input);
    }
  }
  throw createInvalidObservableTypeError(input);
}
function fromInteropObservable(obj) {
  return new Observable(function(subscriber) {
    var obs = obj[observable]();
    if (isFunction(obs.subscribe)) {
      return obs.subscribe(subscriber);
    }
    throw new TypeError("Provided object does not correctly implement Symbol.observable");
  });
}
function fromArrayLike(array) {
  return new Observable(function(subscriber) {
    for (var i = 0; i < array.length && !subscriber.closed; i++) {
      subscriber.next(array[i]);
    }
    subscriber.complete();
  });
}
function fromPromise(promise) {
  return new Observable(function(subscriber) {
    promise.then(function(value) {
      if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
      }
    }, function(err) {
      return subscriber.error(err);
    }).then(null, reportUnhandledError);
  });
}
function fromIterable(iterable) {
  return new Observable(function(subscriber) {
    var e_1, _a2;
    try {
      for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
        var value = iterable_1_1.value;
        subscriber.next(value);
        if (subscriber.closed) {
          return;
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (iterable_1_1 && !iterable_1_1.done && (_a2 = iterable_1.return))
          _a2.call(iterable_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    subscriber.complete();
  });
}
function fromAsyncIterable(asyncIterable) {
  return new Observable(function(subscriber) {
    process$1(asyncIterable, subscriber).catch(function(err) {
      return subscriber.error(err);
    });
  });
}
function fromReadableStreamLike(readableStream) {
  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
}
function process$1(asyncIterable, subscriber) {
  var asyncIterable_1, asyncIterable_1_1;
  var e_2, _a2;
  return __awaiter$2(this, void 0, void 0, function() {
    var value, e_2_1;
    return __generator$2(this, function(_b) {
      switch (_b.label) {
        case 0:
          _b.trys.push([0, 5, 6, 11]);
          asyncIterable_1 = __asyncValues(asyncIterable);
          _b.label = 1;
        case 1:
          return [4, asyncIterable_1.next()];
        case 2:
          if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done))
            return [3, 4];
          value = asyncIterable_1_1.value;
          subscriber.next(value);
          if (subscriber.closed) {
            return [2];
          }
          _b.label = 3;
        case 3:
          return [3, 1];
        case 4:
          return [3, 11];
        case 5:
          e_2_1 = _b.sent();
          e_2 = { error: e_2_1 };
          return [3, 11];
        case 6:
          _b.trys.push([6, , 9, 10]);
          if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a2 = asyncIterable_1.return)))
            return [3, 8];
          return [4, _a2.call(asyncIterable_1)];
        case 7:
          _b.sent();
          _b.label = 8;
        case 8:
          return [3, 10];
        case 9:
          if (e_2)
            throw e_2.error;
          return [7];
        case 10:
          return [7];
        case 11:
          subscriber.complete();
          return [2];
      }
    });
  });
}
function executeSchedule(parentSubscription, scheduler2, work, delay, repeat) {
  if (delay === void 0) {
    delay = 0;
  }
  if (repeat === void 0) {
    repeat = false;
  }
  var scheduleSubscription = scheduler2.schedule(function() {
    work();
    if (repeat) {
      parentSubscription.add(this.schedule(null, delay));
    } else {
      this.unsubscribe();
    }
  }, delay);
  parentSubscription.add(scheduleSubscription);
  if (!repeat) {
    return scheduleSubscription;
  }
}
function observeOn(scheduler2, delay) {
  if (delay === void 0) {
    delay = 0;
  }
  return operate(function(source, subscriber) {
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      return executeSchedule(subscriber, scheduler2, function() {
        return subscriber.next(value);
      }, delay);
    }, function() {
      return executeSchedule(subscriber, scheduler2, function() {
        return subscriber.complete();
      }, delay);
    }, function(err) {
      return executeSchedule(subscriber, scheduler2, function() {
        return subscriber.error(err);
      }, delay);
    }));
  });
}
function subscribeOn(scheduler2, delay) {
  if (delay === void 0) {
    delay = 0;
  }
  return operate(function(source, subscriber) {
    subscriber.add(scheduler2.schedule(function() {
      return source.subscribe(subscriber);
    }, delay));
  });
}
function scheduleObservable(input, scheduler2) {
  return innerFrom(input).pipe(subscribeOn(scheduler2), observeOn(scheduler2));
}
function schedulePromise(input, scheduler2) {
  return innerFrom(input).pipe(subscribeOn(scheduler2), observeOn(scheduler2));
}
function scheduleArray(input, scheduler2) {
  return new Observable(function(subscriber) {
    var i = 0;
    return scheduler2.schedule(function() {
      if (i === input.length) {
        subscriber.complete();
      } else {
        subscriber.next(input[i++]);
        if (!subscriber.closed) {
          this.schedule();
        }
      }
    });
  });
}
function scheduleIterable(input, scheduler2) {
  return new Observable(function(subscriber) {
    var iterator$1;
    executeSchedule(subscriber, scheduler2, function() {
      iterator$1 = input[iterator]();
      executeSchedule(subscriber, scheduler2, function() {
        var _a2;
        var value;
        var done;
        try {
          _a2 = iterator$1.next(), value = _a2.value, done = _a2.done;
        } catch (err) {
          subscriber.error(err);
          return;
        }
        if (done) {
          subscriber.complete();
        } else {
          subscriber.next(value);
        }
      }, 0, true);
    });
    return function() {
      return isFunction(iterator$1 === null || iterator$1 === void 0 ? void 0 : iterator$1.return) && iterator$1.return();
    };
  });
}
function scheduleAsyncIterable(input, scheduler2) {
  if (!input) {
    throw new Error("Iterable cannot be null");
  }
  return new Observable(function(subscriber) {
    executeSchedule(subscriber, scheduler2, function() {
      var iterator2 = input[Symbol.asyncIterator]();
      executeSchedule(subscriber, scheduler2, function() {
        iterator2.next().then(function(result) {
          if (result.done) {
            subscriber.complete();
          } else {
            subscriber.next(result.value);
          }
        });
      }, 0, true);
    });
  });
}
function scheduleReadableStreamLike(input, scheduler2) {
  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler2);
}
function scheduled(input, scheduler2) {
  if (input != null) {
    if (isInteropObservable(input)) {
      return scheduleObservable(input, scheduler2);
    }
    if (isArrayLike(input)) {
      return scheduleArray(input, scheduler2);
    }
    if (isPromise$2(input)) {
      return schedulePromise(input, scheduler2);
    }
    if (isAsyncIterable(input)) {
      return scheduleAsyncIterable(input, scheduler2);
    }
    if (isIterable(input)) {
      return scheduleIterable(input, scheduler2);
    }
    if (isReadableStreamLike(input)) {
      return scheduleReadableStreamLike(input, scheduler2);
    }
  }
  throw createInvalidObservableTypeError(input);
}
function from(input, scheduler2) {
  return scheduler2 ? scheduled(input, scheduler2) : innerFrom(input);
}
function of() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  var scheduler2 = popScheduler(args);
  return from(args, scheduler2);
}
var EmptyError = createErrorClass(function(_super) {
  return function EmptyErrorImpl() {
    _super(this);
    this.name = "EmptyError";
    this.message = "no elements in sequence";
  };
});
function firstValueFrom(source, config2) {
  var hasConfig = typeof config2 === "object";
  return new Promise(function(resolve, reject) {
    var subscriber = new SafeSubscriber({
      next: function(value) {
        resolve(value);
        subscriber.unsubscribe();
      },
      error: reject,
      complete: function() {
        if (hasConfig) {
          resolve(config2.defaultValue);
        } else {
          reject(new EmptyError());
        }
      }
    });
    source.subscribe(subscriber);
  });
}
function map$1(project, thisArg) {
  return operate(function(source, subscriber) {
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      subscriber.next(project.call(thisArg, value, index++));
    }));
  });
}
var isArray$1 = Array.isArray;
function callOrApply(fn, args) {
  return isArray$1(args) ? fn.apply(void 0, __spreadArray$2([], __read(args))) : fn(args);
}
function mapOneOrManyArgs(fn) {
  return map$1(function(args) {
    return callOrApply(fn, args);
  });
}
var isArray = Array.isArray;
var getPrototypeOf = Object.getPrototypeOf, objectProto = Object.prototype, getKeys = Object.keys;
function argsArgArrayOrObject(args) {
  if (args.length === 1) {
    var first_1 = args[0];
    if (isArray(first_1)) {
      return { args: first_1, keys: null };
    }
    if (isPOJO(first_1)) {
      var keys = getKeys(first_1);
      return {
        args: keys.map(function(key) {
          return first_1[key];
        }),
        keys
      };
    }
  }
  return { args, keys: null };
}
function isPOJO(obj) {
  return obj && typeof obj === "object" && getPrototypeOf(obj) === objectProto;
}
function createObject(keys, values) {
  return keys.reduce(function(result, key, i) {
    return result[key] = values[i], result;
  }, {});
}
function combineLatest() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  var scheduler2 = popScheduler(args);
  var resultSelector = popResultSelector(args);
  var _a2 = argsArgArrayOrObject(args), observables = _a2.args, keys = _a2.keys;
  if (observables.length === 0) {
    return from([], scheduler2);
  }
  var result = new Observable(combineLatestInit(observables, scheduler2, keys ? function(values) {
    return createObject(keys, values);
  } : identity$1));
  return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
}
function combineLatestInit(observables, scheduler2, valueTransform) {
  if (valueTransform === void 0) {
    valueTransform = identity$1;
  }
  return function(subscriber) {
    maybeSchedule(scheduler2, function() {
      var length2 = observables.length;
      var values = new Array(length2);
      var active = length2;
      var remainingFirstValues = length2;
      var _loop_1 = function(i2) {
        maybeSchedule(scheduler2, function() {
          var source = from(observables[i2], scheduler2);
          var hasFirstValue = false;
          source.subscribe(createOperatorSubscriber(subscriber, function(value) {
            values[i2] = value;
            if (!hasFirstValue) {
              hasFirstValue = true;
              remainingFirstValues--;
            }
            if (!remainingFirstValues) {
              subscriber.next(valueTransform(values.slice()));
            }
          }, function() {
            if (!--active) {
              subscriber.complete();
            }
          }));
        }, subscriber);
      };
      for (var i = 0; i < length2; i++) {
        _loop_1(i);
      }
    }, subscriber);
  };
}
function maybeSchedule(scheduler2, execute, subscription) {
  if (scheduler2) {
    executeSchedule(subscription, scheduler2, execute);
  } else {
    execute();
  }
}
function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {
  var buffer = [];
  var active = 0;
  var index = 0;
  var isComplete = false;
  var checkComplete = function() {
    if (isComplete && !buffer.length && !active) {
      subscriber.complete();
    }
  };
  var outerNext = function(value) {
    return active < concurrent ? doInnerSub(value) : buffer.push(value);
  };
  var doInnerSub = function(value) {
    expand && subscriber.next(value);
    active++;
    var innerComplete = false;
    innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, function(innerValue) {
      onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
      if (expand) {
        outerNext(innerValue);
      } else {
        subscriber.next(innerValue);
      }
    }, function() {
      innerComplete = true;
    }, void 0, function() {
      if (innerComplete) {
        try {
          active--;
          var _loop_1 = function() {
            var bufferedValue = buffer.shift();
            if (innerSubScheduler) {
              executeSchedule(subscriber, innerSubScheduler, function() {
                return doInnerSub(bufferedValue);
              });
            } else {
              doInnerSub(bufferedValue);
            }
          };
          while (buffer.length && active < concurrent) {
            _loop_1();
          }
          checkComplete();
        } catch (err) {
          subscriber.error(err);
        }
      }
    }));
  };
  source.subscribe(createOperatorSubscriber(subscriber, outerNext, function() {
    isComplete = true;
    checkComplete();
  }));
  return function() {
    additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
  };
}
function mergeMap(project, resultSelector, concurrent) {
  if (concurrent === void 0) {
    concurrent = Infinity;
  }
  if (isFunction(resultSelector)) {
    return mergeMap(function(a, i) {
      return map$1(function(b, ii) {
        return resultSelector(a, b, i, ii);
      })(innerFrom(project(a, i)));
    }, concurrent);
  } else if (typeof resultSelector === "number") {
    concurrent = resultSelector;
  }
  return operate(function(source, subscriber) {
    return mergeInternals(source, subscriber, project, concurrent);
  });
}
function mergeAll(concurrent) {
  if (concurrent === void 0) {
    concurrent = Infinity;
  }
  return mergeMap(identity$1, concurrent);
}
function concatAll() {
  return mergeAll(1);
}
function concat() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return concatAll()(from(args, popScheduler(args)));
}
function filter(predicate, thisArg) {
  return operate(function(source, subscriber) {
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      return predicate.call(thisArg, value, index++) && subscriber.next(value);
    }));
  });
}
function catchError(selector) {
  return operate(function(source, subscriber) {
    var innerSub = null;
    var syncUnsub = false;
    var handledResult;
    innerSub = source.subscribe(createOperatorSubscriber(subscriber, void 0, void 0, function(err) {
      handledResult = innerFrom(selector(err, catchError(selector)(source)));
      if (innerSub) {
        innerSub.unsubscribe();
        innerSub = null;
        handledResult.subscribe(subscriber);
      } else {
        syncUnsub = true;
      }
    }));
    if (syncUnsub) {
      innerSub.unsubscribe();
      innerSub = null;
      handledResult.subscribe(subscriber);
    }
  });
}
function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
  return function(source, subscriber) {
    var hasState = hasSeed;
    var state = seed;
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      var i = index++;
      state = hasState ? accumulator(state, value, i) : (hasState = true, value);
      emitOnNext && subscriber.next(state);
    }, emitBeforeComplete && function() {
      hasState && subscriber.next(state);
      subscriber.complete();
    }));
  };
}
function reduce(accumulator, seed) {
  return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));
}
var arrReducer = function(arr2, value) {
  return arr2.push(value), arr2;
};
function toArray() {
  return operate(function(source, subscriber) {
    reduce(arrReducer, [])(source).subscribe(subscriber);
  });
}
function fromSubscribable(subscribable) {
  return new Observable(function(subscriber) {
    return subscribable.subscribe(subscriber);
  });
}
var DEFAULT_CONFIG = {
  connector: function() {
    return new Subject();
  }
};
function connect(selector, config2) {
  if (config2 === void 0) {
    config2 = DEFAULT_CONFIG;
  }
  var connector = config2.connector;
  return operate(function(source, subscriber) {
    var subject = connector();
    innerFrom(selector(fromSubscribable(subject))).subscribe(subscriber);
    subscriber.add(source.subscribe(subject));
  });
}
function defaultIfEmpty(defaultValue) {
  return operate(function(source, subscriber) {
    var hasValue = false;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      hasValue = true;
      subscriber.next(value);
    }, function() {
      if (!hasValue) {
        subscriber.next(defaultValue);
      }
      subscriber.complete();
    }));
  });
}
function take(count) {
  return count <= 0 ? function() {
    return EMPTY;
  } : operate(function(source, subscriber) {
    var seen = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      if (++seen <= count) {
        subscriber.next(value);
        if (count <= seen) {
          subscriber.complete();
        }
      }
    }));
  });
}
function distinctUntilChanged(comparator, keySelector) {
  if (keySelector === void 0) {
    keySelector = identity$1;
  }
  comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
  return operate(function(source, subscriber) {
    var previousKey;
    var first2 = true;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      var currentKey = keySelector(value);
      if (first2 || !comparator(previousKey, currentKey)) {
        first2 = false;
        previousKey = currentKey;
        subscriber.next(value);
      }
    }));
  });
}
function defaultCompare(a, b) {
  return a === b;
}
function throwIfEmpty(errorFactory) {
  if (errorFactory === void 0) {
    errorFactory = defaultErrorFactory;
  }
  return operate(function(source, subscriber) {
    var hasValue = false;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      hasValue = true;
      subscriber.next(value);
    }, function() {
      return hasValue ? subscriber.complete() : subscriber.error(errorFactory());
    }));
  });
}
function defaultErrorFactory() {
  return new EmptyError();
}
function first(predicate, defaultValue) {
  var hasDefaultValue = arguments.length >= 2;
  return function(source) {
    return source.pipe(predicate ? filter(function(v, i) {
      return predicate(v, i, source);
    }) : identity$1, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function() {
      return new EmptyError();
    }));
  };
}
function multicast(subjectOrSubjectFactory, selector) {
  var subjectFactory = isFunction(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function() {
    return subjectOrSubjectFactory;
  };
  if (isFunction(selector)) {
    return connect(selector, {
      connector: subjectFactory
    });
  }
  return function(source) {
    return new ConnectableObservable(source, subjectFactory);
  };
}
function publishReplay(bufferSize, windowTime, selectorOrScheduler, timestampProvider) {
  if (selectorOrScheduler && !isFunction(selectorOrScheduler)) {
    timestampProvider = selectorOrScheduler;
  }
  var selector = isFunction(selectorOrScheduler) ? selectorOrScheduler : void 0;
  return function(source) {
    return multicast(new ReplaySubject(bufferSize, windowTime, timestampProvider), selector)(source);
  };
}
function startWith() {
  var values = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    values[_i] = arguments[_i];
  }
  var scheduler2 = popScheduler(values);
  return operate(function(source, subscriber) {
    (scheduler2 ? concat(values, source, scheduler2) : concat(values, source)).subscribe(subscriber);
  });
}
function switchMap(project, resultSelector) {
  return operate(function(source, subscriber) {
    var innerSubscriber = null;
    var index = 0;
    var isComplete = false;
    var checkComplete = function() {
      return isComplete && !innerSubscriber && subscriber.complete();
    };
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
      var innerIndex = 0;
      var outerIndex = index++;
      innerFrom(project(value, outerIndex)).subscribe(innerSubscriber = createOperatorSubscriber(subscriber, function(innerValue) {
        return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue);
      }, function() {
        innerSubscriber = null;
        checkComplete();
      }));
    }, function() {
      isComplete = true;
      checkComplete();
    }));
  });
}
function tap(observerOrNext, error2, complete) {
  var tapObserver = isFunction(observerOrNext) || error2 || complete ? { next: observerOrNext, error: error2, complete } : observerOrNext;
  return tapObserver ? operate(function(source, subscriber) {
    var _a2;
    (_a2 = tapObserver.subscribe) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
    var isUnsub = true;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      var _a3;
      (_a3 = tapObserver.next) === null || _a3 === void 0 ? void 0 : _a3.call(tapObserver, value);
      subscriber.next(value);
    }, function() {
      var _a3;
      isUnsub = false;
      (_a3 = tapObserver.complete) === null || _a3 === void 0 ? void 0 : _a3.call(tapObserver);
      subscriber.complete();
    }, function(err) {
      var _a3;
      isUnsub = false;
      (_a3 = tapObserver.error) === null || _a3 === void 0 ? void 0 : _a3.call(tapObserver, err);
      subscriber.error(err);
    }, function() {
      var _a3, _b;
      if (isUnsub) {
        (_a3 = tapObserver.unsubscribe) === null || _a3 === void 0 ? void 0 : _a3.call(tapObserver);
      }
      (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
    }));
  }) : identity$1;
}
const AllHashers = {
  Blake2_128: null,
  Blake2_256: null,
  Blake2_128Concat: null,
  Twox128: null,
  Twox256: null,
  Twox64Concat: null,
  // new in v11
  Identity: null
};
const META_V1_TO_V2 = {
  metadata: {
    description: "Returns the metadata of a runtime",
    params: [],
    type: "OpaqueMetadata"
  }
};
const runtime$3 = {
  Metadata: [
    {
      methods: {
        metadata_at_version: {
          description: "Returns the metadata at a given version.",
          params: [
            {
              name: "version",
              type: "u32"
            }
          ],
          type: "Option<OpaqueMetadata>"
        },
        metadata_versions: {
          description: "Returns the supported metadata versions.",
          params: [],
          type: "Vec<u32>"
        },
        ...META_V1_TO_V2
      },
      version: 2
    },
    {
      methods: {
        ...META_V1_TO_V2
      },
      version: 1
    }
  ]
};
const v9 = {
  // v9
  ErrorMetadataV9: {
    name: "Text",
    docs: "Vec<Text>"
  },
  EventMetadataV9: {
    name: "Text",
    args: "Vec<Type>",
    docs: "Vec<Text>"
  },
  FunctionArgumentMetadataV9: {
    name: "Text",
    type: "Type"
  },
  FunctionMetadataV9: {
    name: "Text",
    args: "Vec<FunctionArgumentMetadataV9>",
    docs: "Vec<Text>"
  },
  MetadataV9: {
    modules: "Vec<ModuleMetadataV9>"
  },
  ModuleConstantMetadataV9: {
    name: "Text",
    type: "Type",
    value: "Bytes",
    docs: "Vec<Text>"
  },
  ModuleMetadataV9: {
    name: "Text",
    storage: "Option<StorageMetadataV9>",
    calls: "Option<Vec<FunctionMetadataV9>>",
    events: "Option<Vec<EventMetadataV9>>",
    constants: "Vec<ModuleConstantMetadataV9>",
    errors: "Vec<ErrorMetadataV9>"
  },
  StorageEntryMetadataV9: {
    name: "Text",
    modifier: "StorageEntryModifierV9",
    type: "StorageEntryTypeV9",
    fallback: "Bytes",
    docs: "Vec<Text>"
  },
  StorageEntryModifierV9: {
    _enum: ["Optional", "Default", "Required"]
  },
  StorageEntryTypeV9: {
    _enum: {
      Plain: "Type",
      Map: {
        hasher: "StorageHasherV9",
        key: "Type",
        value: "Type",
        linked: "bool"
      },
      DoubleMap: {
        hasher: "StorageHasherV9",
        key1: "Type",
        key2: "Type",
        value: "Type",
        key2Hasher: "StorageHasherV9"
      }
    }
  },
  StorageHasherV9: {
    _enum: {
      Blake2_128: null,
      Blake2_256: null,
      Twox128: null,
      Twox256: null,
      Twox64Concat: null
    }
  },
  StorageMetadataV9: {
    prefix: "Text",
    items: "Vec<StorageEntryMetadataV9>"
  }
};
const v10 = {
  // v10
  ErrorMetadataV10: "ErrorMetadataV9",
  EventMetadataV10: "EventMetadataV9",
  FunctionArgumentMetadataV10: "FunctionArgumentMetadataV9",
  FunctionMetadataV10: "FunctionMetadataV9",
  MetadataV10: {
    modules: "Vec<ModuleMetadataV10>"
  },
  ModuleConstantMetadataV10: "ModuleConstantMetadataV9",
  ModuleMetadataV10: {
    name: "Text",
    storage: "Option<StorageMetadataV10>",
    calls: "Option<Vec<FunctionMetadataV10>>",
    events: "Option<Vec<EventMetadataV10>>",
    constants: "Vec<ModuleConstantMetadataV10>",
    errors: "Vec<ErrorMetadataV10>"
  },
  StorageEntryModifierV10: "StorageEntryModifierV9",
  StorageEntryMetadataV10: {
    name: "Text",
    modifier: "StorageEntryModifierV10",
    type: "StorageEntryTypeV10",
    fallback: "Bytes",
    docs: "Vec<Text>"
  },
  StorageEntryTypeV10: {
    _enum: {
      Plain: "Type",
      Map: {
        hasher: "StorageHasherV10",
        key: "Type",
        value: "Type",
        linked: "bool"
      },
      DoubleMap: {
        hasher: "StorageHasherV10",
        key1: "Type",
        key2: "Type",
        value: "Type",
        key2Hasher: "StorageHasherV10"
      }
    }
  },
  StorageMetadataV10: {
    prefix: "Text",
    items: "Vec<StorageEntryMetadataV10>"
  },
  StorageHasherV10: {
    _enum: {
      Blake2_128: null,
      Blake2_256: null,
      Blake2_128Concat: null,
      Twox128: null,
      Twox256: null,
      Twox64Concat: null
    }
  }
};
const v11 = {
  // v11
  ErrorMetadataV11: "ErrorMetadataV10",
  EventMetadataV11: "EventMetadataV10",
  ExtrinsicMetadataV11: {
    version: "u8",
    signedExtensions: "Vec<Text>"
  },
  FunctionArgumentMetadataV11: "FunctionArgumentMetadataV10",
  FunctionMetadataV11: "FunctionMetadataV10",
  MetadataV11: {
    modules: "Vec<ModuleMetadataV11>",
    extrinsic: "ExtrinsicMetadataV11"
  },
  ModuleConstantMetadataV11: "ModuleConstantMetadataV10",
  ModuleMetadataV11: {
    name: "Text",
    storage: "Option<StorageMetadataV11>",
    calls: "Option<Vec<FunctionMetadataV11>>",
    events: "Option<Vec<EventMetadataV11>>",
    constants: "Vec<ModuleConstantMetadataV11>",
    errors: "Vec<ErrorMetadataV11>"
  },
  StorageEntryModifierV11: "StorageEntryModifierV10",
  StorageEntryMetadataV11: {
    name: "Text",
    modifier: "StorageEntryModifierV11",
    type: "StorageEntryTypeV11",
    fallback: "Bytes",
    docs: "Vec<Text>"
  },
  StorageEntryTypeV11: {
    _enum: {
      Plain: "Type",
      Map: {
        hasher: "StorageHasherV11",
        key: "Type",
        value: "Type",
        linked: "bool"
      },
      DoubleMap: {
        hasher: "StorageHasherV11",
        key1: "Type",
        key2: "Type",
        value: "Type",
        key2Hasher: "StorageHasherV11"
      }
    }
  },
  StorageMetadataV11: {
    prefix: "Text",
    items: "Vec<StorageEntryMetadataV11>"
  },
  StorageHasherV11: {
    _enum: AllHashers
  }
};
const v12 = {
  // v12
  ErrorMetadataV12: "ErrorMetadataV11",
  EventMetadataV12: "EventMetadataV11",
  ExtrinsicMetadataV12: "ExtrinsicMetadataV11",
  FunctionArgumentMetadataV12: "FunctionArgumentMetadataV11",
  FunctionMetadataV12: "FunctionMetadataV11",
  MetadataV12: {
    modules: "Vec<ModuleMetadataV12>",
    extrinsic: "ExtrinsicMetadataV12"
  },
  ModuleConstantMetadataV12: "ModuleConstantMetadataV11",
  ModuleMetadataV12: {
    name: "Text",
    storage: "Option<StorageMetadataV12>",
    calls: "Option<Vec<FunctionMetadataV12>>",
    events: "Option<Vec<EventMetadataV12>>",
    constants: "Vec<ModuleConstantMetadataV12>",
    errors: "Vec<ErrorMetadataV12>",
    index: "u8"
  },
  StorageEntryModifierV12: "StorageEntryModifierV11",
  StorageEntryMetadataV12: "StorageEntryMetadataV11",
  StorageEntryTypeV12: "StorageEntryTypeV11",
  StorageMetadataV12: "StorageMetadataV11",
  StorageHasherV12: "StorageHasherV11"
};
const v13 = {
  // v13
  ErrorMetadataV13: "ErrorMetadataV12",
  EventMetadataV13: "EventMetadataV12",
  ExtrinsicMetadataV13: "ExtrinsicMetadataV12",
  FunctionArgumentMetadataV13: "FunctionArgumentMetadataV12",
  FunctionMetadataV13: "FunctionMetadataV12",
  MetadataV13: {
    modules: "Vec<ModuleMetadataV13>",
    extrinsic: "ExtrinsicMetadataV13"
  },
  ModuleConstantMetadataV13: "ModuleConstantMetadataV12",
  ModuleMetadataV13: {
    name: "Text",
    storage: "Option<StorageMetadataV13>",
    calls: "Option<Vec<FunctionMetadataV13>>",
    events: "Option<Vec<EventMetadataV13>>",
    constants: "Vec<ModuleConstantMetadataV13>",
    errors: "Vec<ErrorMetadataV13>",
    index: "u8"
  },
  StorageEntryModifierV13: "StorageEntryModifierV12",
  StorageEntryMetadataV13: {
    name: "Text",
    modifier: "StorageEntryModifierV13",
    type: "StorageEntryTypeV13",
    fallback: "Bytes",
    docs: "Vec<Text>"
  },
  StorageEntryTypeV13: {
    _enum: {
      Plain: "Type",
      Map: {
        hasher: "StorageHasherV13",
        key: "Type",
        value: "Type",
        linked: "bool"
      },
      DoubleMap: {
        hasher: "StorageHasherV13",
        key1: "Type",
        key2: "Type",
        value: "Type",
        key2Hasher: "StorageHasherV13"
      },
      NMap: {
        keyVec: "Vec<Type>",
        hashers: "Vec<StorageHasherV13>",
        value: "Type"
      }
    }
  },
  StorageMetadataV13: {
    prefix: "Text",
    items: "Vec<StorageEntryMetadataV13>"
  },
  StorageHasherV13: "StorageHasherV12"
};
const Si1Variant = {
  name: "Text",
  fields: "Vec<Si1Field>",
  index: "u8",
  docs: "Vec<Text>"
};
const v1 = {
  Si1Field: {
    name: "Option<Text>",
    type: "Si1LookupTypeId",
    typeName: "Option<Text>",
    docs: "Vec<Text>"
  },
  Si1LookupTypeId: "Compact<u32>",
  Si1Path: "Si0Path",
  Si1Type: {
    path: "Si1Path",
    params: "Vec<Si1TypeParameter>",
    def: "Si1TypeDef",
    docs: "Vec<Text>"
  },
  Si1TypeDef: {
    _enum: {
      Composite: "Si1TypeDefComposite",
      Variant: "Si1TypeDefVariant",
      Sequence: "Si1TypeDefSequence",
      Array: "Si1TypeDefArray",
      Tuple: "Si1TypeDefTuple",
      Primitive: "Si1TypeDefPrimitive",
      Compact: "Si1TypeDefCompact",
      BitSequence: "Si1TypeDefBitSequence",
      // NOTE: This is specific to the implementation for pre-v14 metadata
      // compatibility (always keep this as the last entry in the enum)
      HistoricMetaCompat: "Type"
    }
  },
  Si1TypeDefArray: {
    len: "u32",
    type: "Si1LookupTypeId"
  },
  Si1TypeDefBitSequence: {
    bitStoreType: "Si1LookupTypeId",
    bitOrderType: "Si1LookupTypeId"
  },
  Si1TypeDefCompact: {
    type: "Si1LookupTypeId"
  },
  Si1TypeDefComposite: {
    fields: "Vec<Si1Field>"
  },
  Si1TypeDefPrimitive: "Si0TypeDefPrimitive",
  Si1TypeDefSequence: {
    type: "Si1LookupTypeId"
  },
  Si1TypeDefTuple: "Vec<Si1LookupTypeId>",
  Si1TypeParameter: {
    name: "Text",
    type: "Option<Si1LookupTypeId>"
  },
  Si1TypeDefVariant: {
    variants: "Vec<Si1Variant>"
  },
  Si1Variant
};
const v14 = {
  // registry
  PortableTypeV14: {
    id: "Si1LookupTypeId",
    type: "Si1Type"
  },
  // compatibility with earlier layouts, i.e. don't break previous users
  ErrorMetadataV14: {
    ...Si1Variant,
    args: "Vec<Type>"
  },
  EventMetadataV14: {
    ...Si1Variant,
    args: "Vec<Type>"
  },
  FunctionArgumentMetadataV14: {
    name: "Text",
    type: "Type",
    typeName: "Option<Type>"
  },
  FunctionMetadataV14: {
    ...Si1Variant,
    args: "Vec<FunctionArgumentMetadataV14>"
  },
  // V14
  ExtrinsicMetadataV14: {
    type: "SiLookupTypeId",
    version: "u8",
    signedExtensions: "Vec<SignedExtensionMetadataV14>"
  },
  MetadataV14: {
    lookup: "PortableRegistry",
    pallets: "Vec<PalletMetadataV14>",
    extrinsic: "ExtrinsicMetadataV14",
    type: "SiLookupTypeId"
  },
  PalletCallMetadataV14: {
    type: "SiLookupTypeId"
  },
  PalletConstantMetadataV14: {
    name: "Text",
    type: "SiLookupTypeId",
    value: "Bytes",
    docs: "Vec<Text>"
  },
  PalletErrorMetadataV14: {
    type: "SiLookupTypeId"
  },
  PalletEventMetadataV14: {
    type: "SiLookupTypeId"
  },
  PalletMetadataV14: {
    name: "Text",
    storage: "Option<PalletStorageMetadataV14>",
    calls: "Option<PalletCallMetadataV14>",
    events: "Option<PalletEventMetadataV14>",
    constants: "Vec<PalletConstantMetadataV14>",
    errors: "Option<PalletErrorMetadataV14>",
    index: "u8"
  },
  PalletStorageMetadataV14: {
    prefix: "Text",
    // NOTE: Renamed from entries
    items: "Vec<StorageEntryMetadataV14>"
  },
  SignedExtensionMetadataV14: {
    identifier: "Text",
    type: "SiLookupTypeId",
    additionalSigned: "SiLookupTypeId"
  },
  StorageEntryMetadataV14: {
    name: "Text",
    modifier: "StorageEntryModifierV14",
    type: "StorageEntryTypeV14",
    fallback: "Bytes",
    docs: "Vec<Text>"
  },
  StorageEntryModifierV14: "StorageEntryModifierV13",
  StorageEntryTypeV14: {
    _enum: {
      Plain: "SiLookupTypeId",
      Map: {
        hashers: "Vec<StorageHasherV14>",
        key: "SiLookupTypeId",
        value: "SiLookupTypeId"
      }
    }
  },
  StorageHasherV14: "StorageHasherV13"
};
const v15 = {
  // new/adjusted in v15
  CustomMetadata15: {
    map: "BTreeMap<Text, CustomValueMetadata15>"
  },
  CustomValueMetadata15: {
    type: "SiLookupTypeId",
    value: "Bytes"
  },
  ExtrinsicMetadataV15: {
    version: "u8",
    addressType: "SiLookupTypeId",
    callType: "SiLookupTypeId",
    signatureType: "SiLookupTypeId",
    extraType: "SiLookupTypeId",
    signedExtensions: "Vec<SignedExtensionMetadataV14>"
  },
  OuterEnums15: {
    callType: "SiLookupTypeId",
    eventType: "SiLookupTypeId",
    errorType: "SiLookupTypeId"
  },
  PalletMetadataV15: {
    name: "Text",
    storage: "Option<PalletStorageMetadataV14>",
    calls: "Option<PalletCallMetadataV14>",
    events: "Option<PalletEventMetadataV14>",
    constants: "Vec<PalletConstantMetadataV14>",
    errors: "Option<PalletErrorMetadataV14>",
    index: "u8",
    docs: "Vec<Text>"
  },
  RuntimeApiMetadataV15: {
    name: "Text",
    methods: "Vec<RuntimeApiMethodMetadataV15>",
    docs: "Vec<Text>"
  },
  RuntimeApiMethodMetadataV15: {
    name: "Text",
    inputs: "Vec<RuntimeApiMethodParamMetadataV15>",
    output: "SiLookupTypeId",
    docs: "Vec<Text>"
  },
  RuntimeApiMethodParamMetadataV15: {
    name: "Text",
    type: "SiLookupTypeId"
  },
  // actual v15 definition
  MetadataV15: {
    lookup: "PortableRegistry",
    pallets: "Vec<PalletMetadataV15>",
    extrinsic: "ExtrinsicMetadataV15",
    type: "SiLookupTypeId",
    apis: "Vec<RuntimeApiMetadataV15>",
    outerEnums: "OuterEnums15",
    custom: "CustomMetadata15"
  }
};
const definitions$b = {
  rpc: {},
  runtime: runtime$3,
  types: {
    // all known
    ...v9,
    ...v10,
    ...v11,
    ...v12,
    ...v13,
    ...v14,
    ...v15,
    // latest mappings
    // NOTE: For v15, we only added the runtime defintions,
    // hence latest for most pointing to the previous V14
    ErrorMetadataLatest: "ErrorMetadataV14",
    EventMetadataLatest: "EventMetadataV14",
    ExtrinsicMetadataLatest: "ExtrinsicMetadataV15",
    FunctionArgumentMetadataLatest: "FunctionArgumentMetadataV14",
    FunctionMetadataLatest: "FunctionMetadataV14",
    MetadataLatest: "MetadataV15",
    PalletCallMetadataLatest: "PalletCallMetadataV14",
    PalletConstantMetadataLatest: "PalletConstantMetadataV14",
    PalletErrorMetadataLatest: "PalletErrorMetadataV14",
    PalletEventMetadataLatest: "PalletEventMetadataV14",
    PalletMetadataLatest: "PalletMetadataV15",
    PalletStorageMetadataLatest: "PalletStorageMetadataV14",
    PortableType: "PortableTypeV14",
    RuntimeApiMetadataLatest: "RuntimeApiMetadataV15",
    SignedExtensionMetadataLatest: "SignedExtensionMetadataV14",
    StorageEntryMetadataLatest: "StorageEntryMetadataV14",
    StorageEntryModifierLatest: "StorageEntryModifierV14",
    StorageEntryTypeLatest: "StorageEntryTypeV14",
    StorageHasher: "StorageHasherV14",
    // additional types
    OpaqueMetadata: "Opaque<Bytes>",
    // the enum containing all the mappings
    MetadataAll: {
      _enum: {
        V0: "DoNotConstruct<MetadataV0>",
        V1: "DoNotConstruct<MetadataV1>",
        V2: "DoNotConstruct<MetadataV2>",
        V3: "DoNotConstruct<MetadataV3>",
        V4: "DoNotConstruct<MetadataV4>",
        V5: "DoNotConstruct<MetadataV5>",
        V6: "DoNotConstruct<MetadataV6>",
        V7: "DoNotConstruct<MetadataV7>",
        V8: "DoNotConstruct<MetadataV8>",
        // First version on Kusama in V9, dropping will be problematic
        V9: "MetadataV9",
        V10: "MetadataV10",
        V11: "MetadataV11",
        V12: "MetadataV12",
        V13: "MetadataV13",
        V14: "MetadataV14",
        V15: "MetadataV15"
      }
    }
  }
};
const CORE_V1_TO_V4 = {
  execute_block: {
    description: "Execute the given block.",
    params: [
      {
        name: "block",
        type: "Block"
      }
    ],
    type: "Null"
  }
};
const CORE_V1_TO_V2 = {
  version: {
    description: "Returns the version of the runtime.",
    params: [],
    type: "RuntimeVersionPre3"
  }
};
const CORE_V2_TO_V4 = {
  initialize_block: {
    description: "Initialize a block with the given header.",
    params: [
      {
        name: "header",
        type: "Header"
      }
    ],
    type: "Null"
  }
};
const runtime$2 = {
  Core: [
    {
      methods: {
        version: {
          description: "Returns the version of the runtime.",
          params: [],
          type: "RuntimeVersion"
        },
        ...CORE_V1_TO_V4,
        ...CORE_V2_TO_V4
      },
      version: 4
    },
    {
      methods: {
        version: {
          description: "Returns the version of the runtime.",
          params: [],
          type: "RuntimeVersionPre4"
        },
        ...CORE_V1_TO_V4,
        ...CORE_V2_TO_V4
      },
      version: 3
    },
    {
      methods: {
        ...CORE_V1_TO_V2,
        ...CORE_V1_TO_V4,
        ...CORE_V2_TO_V4
      },
      version: 2
    },
    {
      methods: {
        initialise_block: {
          description: "Initialize a block with the given header.",
          params: [
            {
              name: "header",
              type: "Header"
            }
          ],
          type: "Null"
        },
        ...CORE_V1_TO_V2,
        ...CORE_V1_TO_V4
      },
      version: 1
    }
  ]
};
const numberTypes = {
  Fixed64: "Int<64, Fixed64>",
  FixedI64: "Int<64, FixedI64>",
  FixedU64: "UInt<64, FixedU64>",
  Fixed128: "Int<128, Fixed128>",
  FixedI128: "Int<128, FixedI128>",
  FixedU128: "UInt<128, FixedU128>",
  I32F32: "Int<64, I32F32>",
  U32F32: "UInt<64, U32F32>",
  PerU16: "UInt<16, PerU16>",
  Perbill: "UInt<32, Perbill>",
  Percent: "UInt<8, Percent>",
  Permill: "UInt<32, Permill>",
  Perquintill: "UInt<64, Perquintill>"
};
const knownOrigins = {
  //
  // (1) Defaults from Substrate
  //
  Council: "CollectiveOrigin",
  System: "SystemOrigin",
  TechnicalCommittee: "CollectiveOrigin",
  //
  // (2) Defaults from Polkadot
  //
  Xcm: "XcmOrigin",
  XcmPallet: "XcmOrigin",
  //
  // (3) Defaults from Acala
  //
  Authority: "AuthorityOrigin",
  GeneralCouncil: "CollectiveOrigin"
};
const definitions$a = {
  rpc: {},
  runtime: runtime$2,
  types: {
    ...numberTypes,
    AccountId: "AccountId32",
    AccountId20: "GenericEthereumAccountId",
    AccountId32: "GenericAccountId32",
    AccountId33: "GenericAccountId33",
    AccountIdOf: "AccountId",
    AccountIndex: "GenericAccountIndex",
    Address: "MultiAddress",
    AssetId: "u32",
    Balance: "UInt<128, Balance>",
    BalanceOf: "Balance",
    Block: "GenericBlock",
    BlockNumber: "u32",
    BlockNumberFor: "BlockNumber",
    BlockNumberOf: "BlockNumber",
    Call: "GenericCall",
    CallHash: "Hash",
    CallHashOf: "CallHash",
    ChangesTrieConfiguration: {
      digestInterval: "u32",
      digestLevels: "u32"
    },
    ChangesTrieSignal: {
      _enum: {
        NewConfiguration: "Option<ChangesTrieConfiguration>"
      }
    },
    ConsensusEngineId: "GenericConsensusEngineId",
    CodecHash: "Hash",
    CrateVersion: {
      major: "u16",
      minor: "u8",
      patch: "u8"
    },
    Digest: {
      logs: "Vec<DigestItem>"
    },
    DigestItem: {
      _enum: {
        Other: "Bytes",
        AuthoritiesChange: "Vec<AuthorityId>",
        ChangesTrieRoot: "Hash",
        SealV0: "SealV0",
        Consensus: "Consensus",
        Seal: "Seal",
        PreRuntime: "PreRuntime",
        ChangesTrieSignal: "ChangesTrieSignal",
        RuntimeEnvironmentUpdated: "Null"
        // 8
      }
    },
    ExtrinsicsWeight: {
      normal: "Weight",
      operational: "Weight"
    },
    H32: "[u8; 4; H32]",
    H64: "[u8; 8; H64]",
    H128: "[u8; 16; H128]",
    H160: "[u8; 20; H160]",
    H256: "[u8; 32; H256]",
    H512: "[u8; 64; H512]",
    H1024: "[u8; 128; H1024]",
    H2048: "[u8; 256; H2048]",
    Hash: "H256",
    Header: {
      parentHash: "Hash",
      number: "Compact<BlockNumber>",
      stateRoot: "Hash",
      extrinsicsRoot: "Hash",
      digest: "Digest"
    },
    HeaderPartial: {
      parentHash: "Hash",
      // since we only parse JSON with this, having non-compact works
      number: "BlockNumber"
    },
    IndicesLookupSource: "GenericLookupSource",
    Index: "u32",
    Justification: "(ConsensusEngineId, EncodedJustification)",
    EncodedJustification: "Bytes",
    Justifications: "Vec<Justification>",
    KeyValue: "(StorageKey, StorageData)",
    KeyTypeId: "u32",
    LockIdentifier: "[u8; 8]",
    LookupSource: "MultiAddress",
    LookupTarget: "AccountId",
    ModuleId: "LockIdentifier",
    MultiAddress: "GenericMultiAddress",
    MultiSigner: {
      _enum: {
        Ed25519: "[u8; 32]",
        Sr25519: "[u8; 32]",
        Ecdsa: "[u8; 33]"
      }
    },
    Moment: "UInt<64, Moment>",
    OpaqueCall: "Bytes",
    Origin: "DoNotConstruct<Origin>",
    OriginCaller: {
      _enum: {
        // this should be dynamically built from the actual modules, based on index
        System: "SystemOrigin"
      }
    },
    PalletId: "LockIdentifier",
    PalletsOrigin: "OriginCaller",
    PalletVersion: {
      major: "u16",
      minor: "u8",
      patch: "u8"
    },
    Pays: {
      _enum: ["Yes", "No"]
    },
    Phantom: "Null",
    PhantomData: "Null",
    Releases: {
      _enum: ["V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9", "V10"]
    },
    RuntimeCall: "Call",
    RuntimeEvent: "Event",
    RuntimeDbWeight: {
      read: "Weight",
      write: "Weight"
    },
    SignedBlock: "SignedBlockWithJustifications",
    SignedBlockWithJustification: {
      block: "Block",
      justification: "Option<EncodedJustification>"
    },
    SignedBlockWithJustifications: {
      block: "Block",
      justifications: "Option<Justifications>"
    },
    Slot: "u64",
    SlotDuration: "u64",
    StorageData: "Bytes",
    StorageInfo: {
      palletName: "Bytes",
      storage_name: "Bytes",
      prefix: "Bytes",
      maxValues: "Option<u32>",
      maxSize: "Option<u32>"
    },
    StorageProof: {
      trieNodes: "Vec<Bytes>"
    },
    TransactionPriority: "u64",
    TransactionLongevity: "u64",
    TransactionTag: "Bytes",
    TransactionInfo: {
      _alias: {
        dataSize: "size"
      },
      chunkRoot: "H256",
      contentHash: "H256",
      dataSize: "u32",
      blockChunks: "u32"
    },
    TransactionStorageProof: {
      chunk: "Vec<u8>",
      proof: "Vec<Vec<u8>>"
    },
    ValidatorId: "AccountId",
    ValidatorIdOf: "ValidatorId",
    WeightV0: "u32",
    WeightV1: "u64",
    WeightV2: {
      refTime: "Compact<u64>",
      proofSize: "Compact<u64>"
    },
    Weight: "WeightV2",
    WeightMultiplier: "Fixed64",
    // digest
    PreRuntime: "(ConsensusEngineId, Bytes)",
    SealV0: "(u64, Signature)",
    Seal: "(ConsensusEngineId, Bytes)",
    Consensus: "(ConsensusEngineId, Bytes)"
  }
};
const v0 = {
  Si0Field: {
    name: "Option<Text>",
    type: "Si0LookupTypeId",
    typeName: "Option<Text>",
    docs: "Vec<Text>"
  },
  Si0LookupTypeId: "u32",
  Si0Path: "Vec<Text>",
  Si0Type: {
    path: "Si0Path",
    params: "Vec<Si0LookupTypeId>",
    def: "Si0TypeDef"
  },
  Si0TypeDef: {
    _enum: {
      Composite: "Si0TypeDefComposite",
      Variant: "Si0TypeDefVariant",
      Sequence: "Si0TypeDefSequence",
      Array: "Si0TypeDefArray",
      Tuple: "Si0TypeDefTuple",
      Primitive: "Si0TypeDefPrimitive",
      Compact: "Si0TypeDefCompact",
      Phantom: "Si0TypeDefPhantom",
      BitSequence: "Si0TypeDefBitSequence"
    }
  },
  Si0TypeDefArray: {
    len: "u32",
    type: "Si0LookupTypeId"
  },
  Si0TypeDefBitSequence: {
    bitStoreType: "Si0LookupTypeId",
    bitOrderType: "Si0LookupTypeId"
  },
  Si0TypeDefCompact: {
    type: "Si0LookupTypeId"
  },
  Si0TypeDefComposite: {
    fields: "Vec<Si0Field>"
  },
  Si0TypeDefPhantom: "Null",
  Si0TypeDefVariant: {
    variants: "Vec<Si0Variant>"
  },
  Si0TypeDefPrimitive: {
    _enum: ["Bool", "Char", "Str", "U8", "U16", "U32", "U64", "U128", "U256", "I8", "I16", "I32", "I64", "I128", "I256"]
  },
  Si0TypeDefSequence: {
    type: "Si0LookupTypeId"
  },
  Si0TypeDefTuple: "Vec<Si0LookupTypeId>",
  Si0TypeParameter: {
    name: "Text",
    type: "Option<Si0LookupTypeId>"
  },
  Si0Variant: {
    name: "Text",
    fields: "Vec<Si0Field>",
    index: "Option<u8>",
    discriminant: "Option<u64>",
    docs: "Vec<Text>"
  }
};
const definitions$9 = {
  rpc: {},
  types: {
    ...v0,
    ...v1,
    // latest mappings
    SiField: "Si1Field",
    SiLookupTypeId: "Si1LookupTypeId",
    SiPath: "Si1Path",
    SiType: "Si1Type",
    SiTypeDef: "Si1TypeDef",
    SiTypeDefArray: "Si1TypeDefArray",
    SiTypeDefBitSequence: "Si1TypeDefBitSequence",
    SiTypeDefCompact: "Si1TypeDefCompact",
    SiTypeDefComposite: "Si1TypeDefComposite",
    SiTypeDefPrimitive: "Si1TypeDefPrimitive",
    SiTypeDefSequence: "Si1TypeDefSequence",
    SiTypeDefTuple: "Si1TypeDefTuple",
    SiTypeParameter: "Si1TypeParameter",
    SiTypeDefVariant: "Si1TypeDefVariant",
    SiVariant: "Si1Variant"
  }
};
const mockInterface = { types: {} };
const definitions$8 = {
  rpc: {},
  types: {
    AccountData: {
      free: "Balance",
      reserved: "Balance",
      miscFrozen: "Balance",
      feeFrozen: "Balance"
    },
    BalanceLockTo212: {
      id: "LockIdentifier",
      amount: "Balance",
      until: "BlockNumber",
      reasons: "WithdrawReasons"
    },
    BalanceLock: {
      id: "LockIdentifier",
      amount: "Balance",
      reasons: "Reasons"
    },
    BalanceStatus: {
      _enum: ["Free", "Reserved"]
    },
    Reasons: {
      _enum: ["Fee", "Misc", "All"]
    },
    ReserveData: {
      id: "ReserveIdentifier",
      amount: "Balance"
    },
    ReserveIdentifier: "[u8; 8]",
    VestingSchedule: {
      offset: "Balance",
      perBlock: "Balance",
      startingBlock: "BlockNumber"
    },
    WithdrawReasons: {
      _set: {
        TransactionPayment: 1,
        Transfer: 2,
        Reserve: 4,
        Fee: 8,
        Tip: 16
      }
    }
  }
};
const rpc$4 = {
  call: {
    deprecated: "Use the runtime interface `api.call.contractsApi.call` instead",
    description: "Executes a call to a contract",
    params: [
      {
        name: "callRequest",
        type: "ContractCallRequest"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "ContractExecResult"
  },
  getStorage: {
    deprecated: "Use the runtime interface `api.call.contractsApi.getStorage` instead",
    description: "Returns the value under a specified storage key in a contract",
    params: [
      {
        name: "address",
        type: "AccountId"
      },
      {
        name: "key",
        type: "H256"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Option<Bytes>"
  },
  instantiate: {
    deprecated: "Use the runtime interface `api.call.contractsApi.instantiate` instead",
    description: "Instantiate a new contract",
    params: [
      {
        name: "request",
        type: "InstantiateRequestV1"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "ContractInstantiateResult"
  },
  rentProjection: {
    deprecated: "Not available in newer versions of the contracts interfaces",
    description: "Returns the projected time a given contract will be able to sustain paying its rent",
    params: [
      {
        name: "address",
        type: "AccountId"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Option<BlockNumber>"
  },
  uploadCode: {
    deprecated: "Use the runtime interface `api.call.contractsApi.uploadCode` instead",
    description: "Upload new code without instantiating a contract from it",
    // The RPC here is terribly misnamed - somebody forgot how the RPCs
    // are actually done, ie. <module>_<camelCasedMethod>
    endpoint: "contracts_upload_code",
    params: [
      {
        name: "uploadRequest",
        type: "CodeUploadRequest"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "CodeUploadResult"
  }
};
const SHARED_V1_V2 = {
  get_storage: {
    description: "Query a given storage key in a given contract.",
    params: [
      {
        name: "address",
        type: "AccountId"
      },
      {
        name: "key",
        type: "Bytes"
      }
    ],
    type: "Option<Bytes>"
  },
  upload_code: {
    description: "Upload new code without instantiating a contract from it.",
    params: [
      {
        name: "origin",
        type: "AccountId"
      },
      {
        name: "code",
        type: "Bytes"
      },
      {
        name: "storageDepositLimit",
        type: "Option<Balance>"
      }
    ],
    type: "CodeUploadResult"
  }
};
const runtime$1 = {
  ContractsApi: [
    {
      methods: {
        call: {
          description: "Perform a call from a specified account to a given contract.",
          params: [
            {
              name: "origin",
              type: "AccountId"
            },
            {
              name: "dest",
              type: "AccountId"
            },
            {
              name: "value",
              type: "Balance"
            },
            {
              name: "gasLimit",
              type: "Option<WeightV2>"
            },
            {
              name: "storageDepositLimit",
              type: "Option<Balance>"
            },
            {
              name: "inputData",
              type: "Vec<u8>"
            }
          ],
          type: "ContractExecResult"
        },
        instantiate: {
          description: "Instantiate a new contract.",
          params: [
            {
              name: "origin",
              type: "AccountId"
            },
            {
              name: "value",
              type: "Balance"
            },
            {
              name: "gasLimit",
              type: "Option<WeightV2>"
            },
            {
              name: "storageDepositLimit",
              type: "Option<Balance>"
            },
            {
              name: "code",
              type: "CodeSource"
            },
            {
              name: "data",
              type: "Bytes"
            },
            {
              name: "salt",
              type: "Bytes"
            }
          ],
          type: "ContractInstantiateResult"
        },
        ...SHARED_V1_V2
      },
      version: 2
    },
    {
      methods: {
        call: {
          description: "Perform a call from a specified account to a given contract.",
          params: [
            {
              name: "origin",
              type: "AccountId"
            },
            {
              name: "dest",
              type: "AccountId"
            },
            {
              name: "value",
              type: "Balance"
            },
            {
              name: "gasLimit",
              type: "u64"
            },
            {
              name: "storageDepositLimit",
              type: "Option<Balance>"
            },
            {
              name: "inputData",
              type: "Vec<u8>"
            }
          ],
          type: "ContractExecResultU64"
        },
        instantiate: {
          description: "Instantiate a new contract.",
          params: [
            {
              name: "origin",
              type: "AccountId"
            },
            {
              name: "value",
              type: "Balance"
            },
            {
              name: "gasLimit",
              type: "u64"
            },
            {
              name: "storageDepositLimit",
              type: "Option<Balance>"
            },
            {
              name: "code",
              type: "CodeSource"
            },
            {
              name: "data",
              type: "Bytes"
            },
            {
              name: "salt",
              type: "Bytes"
            }
          ],
          type: "ContractInstantiateResultU64"
        },
        ...SHARED_V1_V2
      },
      version: 1
    }
  ]
};
const definitions$7 = {
  rpc: rpc$4,
  runtime: runtime$1,
  types: {
    AliveContractInfo: {
      trieId: "TrieId",
      storageSize: "u32",
      pairCount: "u32",
      codeHash: "CodeHash",
      rentAllowance: "Balance",
      rentPaid: "Balance",
      deductBlock: "BlockNumber",
      lastWrite: "Option<BlockNumber>",
      _reserved: "Option<Null>"
    },
    CodeHash: "Hash",
    CodeSource: {
      _enum: {
        Upload: "Bytes",
        Existing: "Hash"
      }
    },
    CodeUploadRequest: {
      origin: "AccountId",
      code: "Bytes",
      storageDepositLimit: "Option<Balance>"
    },
    CodeUploadResult: "Result<CodeUploadResultValue, DispatchError>",
    CodeUploadResultValue: {
      codeHash: "CodeHash",
      deposit: "Balance"
    },
    ContractCallRequest: {
      origin: "AccountId",
      dest: "AccountId",
      value: "Balance",
      gasLimit: "u64",
      storageDepositLimit: "Option<Balance>",
      inputData: "Bytes"
    },
    ContractExecResultSuccessTo255: {
      status: "u8",
      data: "Raw"
    },
    ContractExecResultTo255: {
      _enum: {
        Success: "ContractExecResultSuccessTo255",
        Error: "Null"
      }
    },
    ContractExecResultSuccessTo260: {
      flags: "ContractReturnFlags",
      data: "Bytes",
      gasConsumed: "u64"
    },
    ContractExecResultTo260: {
      _enum: {
        Success: "ContractExecResultSuccessTo260",
        Error: "Null"
      }
    },
    ContractExecResultOk: {
      flags: "ContractReturnFlags",
      data: "Bytes"
    },
    ContractExecResultResult: "Result<ContractExecResultOk, DispatchError>",
    ContractExecResultTo267: {
      gasConsumed: "u64",
      debugMessage: "Text",
      result: "ContractExecResultResult"
    },
    ContractExecResult: {
      gasConsumed: "Weight",
      gasRequired: "Weight",
      storageDeposit: "StorageDeposit",
      debugMessage: "Text",
      result: "ContractExecResultResult"
    },
    ContractExecResultU64: {
      gasConsumed: "u64",
      gasRequired: "u64",
      storageDeposit: "StorageDeposit",
      debugMessage: "Text",
      result: "ContractExecResultResult"
    },
    ContractInfo: {
      _enum: {
        Alive: "AliveContractInfo",
        Tombstone: "TombstoneContractInfo"
      }
    },
    ContractCallFlags: {
      _set: {
        _bitLength: 32,
        ForwardInput: 1,
        CloneInput: 2,
        TailCall: 4,
        AllowReentry: 8
      }
    },
    ContractReturnFlags: {
      _set: {
        _bitLength: 32,
        Revert: 1
      }
    },
    ContractStorageKey: "[u8; 32]",
    DeletedContract: {
      pairCount: "u32",
      trieId: "TrieId"
    },
    ExecReturnValue: {
      flags: "ContractReturnFlags",
      data: "Bytes"
    },
    Gas: "u64",
    HostFnWeightsTo264: {
      caller: "Weight",
      address: "Weight",
      gasLeft: "Weight",
      balance: "Weight",
      valueTransferred: "Weight",
      minimumBalance: "Weight",
      tombstoneDeposit: "Weight",
      rentAllowance: "Weight",
      blockNumber: "Weight",
      now: "Weight",
      weightToFee: "Weight",
      gas: "Weight",
      input: "Weight",
      inputPerByte: "Weight",
      return: "Weight",
      returnPerByte: "Weight",
      terminate: "Weight",
      restoreTo: "Weight",
      restoreToPerDelta: "Weight",
      random: "Weight",
      depositEvent: "Weight",
      depositEventPerTopic: "Weight",
      depositEventPerByte: "Weight",
      setRentAllowance: "Weight",
      setStorage: "Weight",
      setStoragePerByte: "Weight",
      clearStorage: "Weight",
      getStorage: "Weight",
      getStoragePerByte: "Weight",
      transfer: "Weight",
      call: "Weight",
      callTransferSurcharge: "Weight",
      callPerInputByte: "Weight",
      callPerOutputByte: "Weight",
      instantiate: "Weight",
      instantiatePerInputByte: "Weight",
      instantiatePerOutputByte: "Weight",
      hashSha2256: "Weight",
      hashSha2256PerByte: "Weight",
      hashKeccak256: "Weight",
      hashKeccak256PerByte: "Weight",
      hashBlake2256: "Weight",
      hashBlake2256PerByte: "Weight",
      hashBlake2128: "Weight",
      hashBlake2128PerByte: "Weight"
    },
    HostFnWeights: {
      caller: "Weight",
      address: "Weight",
      gasLeft: "Weight",
      balance: "Weight",
      valueTransferred: "Weight",
      minimumBalance: "Weight",
      tombstoneDeposit: "Weight",
      rentAllowance: "Weight",
      blockNumber: "Weight",
      now: "Weight",
      weightToFee: "Weight",
      gas: "Weight",
      input: "Weight",
      inputPerByte: "Weight",
      return: "Weight",
      returnPerByte: "Weight",
      terminate: "Weight",
      terminatePerCodeByte: "Weight",
      restoreTo: "Weight",
      restoreToPerCallerCodeByte: "Weight",
      restoreToPerTombstoneCodeByte: "Weight",
      restoreToPerDelta: "Weight",
      random: "Weight",
      depositEvent: "Weight",
      depositEventPerTopic: "Weight",
      depositEventPerByte: "Weight",
      setRentAllowance: "Weight",
      setStorage: "Weight",
      setStoragePerByte: "Weight",
      clearStorage: "Weight",
      getStorage: "Weight",
      getStoragePerByte: "Weight",
      transfer: "Weight",
      call: "Weight",
      callPerCodeByte: "Weight",
      callTransferSurcharge: "Weight",
      callPerInputByte: "Weight",
      callPerOutputByte: "Weight",
      instantiate: "Weight",
      instantiatePerCodeByte: "Weight",
      instantiatePerInputByte: "Weight",
      instantiatePerOutputByte: "Weight",
      instantiatePerSaltByte: "Weight",
      hashSha2256: "Weight",
      hashSha2256PerByte: "Weight",
      hashKeccak256: "Weight",
      hashKeccak256PerByte: "Weight",
      hashBlake2256: "Weight",
      hashBlake2256PerByte: "Weight",
      hashBlake2128: "Weight",
      hashBlake2128PerByte: "Weight",
      rentParams: "Weight"
    },
    InstantiateRequestV1: {
      origin: "AccountId",
      value: "Balance",
      gasLimit: "Gas",
      code: "Bytes",
      data: "Bytes",
      salt: "Bytes"
    },
    InstantiateRequestV2: {
      _fallback: "InstantiateRequestV1",
      origin: "AccountId",
      value: "Balance",
      gasLimit: "Gas",
      storageDepositLimit: "Option<Balance>",
      code: "Bytes",
      data: "Bytes",
      salt: "Bytes"
    },
    InstantiateRequest: {
      _fallback: "InstantiateRequestV2",
      origin: "AccountId",
      value: "Balance",
      gasLimit: "Gas",
      storageDepositLimit: "Option<Balance>",
      code: "CodeSource",
      data: "Bytes",
      salt: "Bytes"
    },
    ContractInstantiateResultTo267: "Result<InstantiateReturnValueTo267, Null>",
    ContractInstantiateResultTo299: "Result<InstantiateReturnValueOk, Null>",
    ContractInstantiateResult: {
      gasConsumed: "WeightV2",
      gasRequired: "WeightV2",
      storageDeposit: "StorageDeposit",
      debugMessage: "Text",
      result: "InstantiateReturnValue"
    },
    ContractInstantiateResultU64: {
      // only this one can fail, the current version (above) _should_ be correctly
      // versioned now, aka no more deprecated RPCs involved, only runtime calls
      _fallback: "ContractInstantiateResultTo299",
      gasConsumed: "u64",
      gasRequired: "u64",
      storageDeposit: "StorageDeposit",
      debugMessage: "Text",
      result: "InstantiateReturnValue"
    },
    InstantiateReturnValueTo267: {
      result: "ExecReturnValue",
      accountId: "AccountId",
      rentProjection: "Option<RentProjection>"
    },
    InstantiateReturnValueOk: {
      result: "ExecReturnValue",
      accountId: "AccountId"
    },
    InstantiateReturnValue: "Result<InstantiateReturnValueOk, DispatchError>",
    InstructionWeights: {
      i64const: "u32",
      i64load: "u32",
      i64store: "u32",
      select: "u32",
      rIf: "u32",
      br: "u32",
      brIf: "u32",
      brIable: "u32",
      brIablePerEntry: "u32",
      call: "u32",
      callIndirect: "u32",
      callIndirectPerParam: "u32",
      localGet: "u32",
      localSet: "u32",
      local_tee: "u32",
      globalGet: "u32",
      globalSet: "u32",
      memoryCurrent: "u32",
      memoryGrow: "u32",
      i64clz: "u32",
      i64ctz: "u32",
      i64popcnt: "u32",
      i64eqz: "u32",
      i64extendsi32: "u32",
      i64extendui32: "u32",
      i32wrapi64: "u32",
      i64eq: "u32",
      i64ne: "u32",
      i64lts: "u32",
      i64ltu: "u32",
      i64gts: "u32",
      i64gtu: "u32",
      i64les: "u32",
      i64leu: "u32",
      i64ges: "u32",
      i64geu: "u32",
      i64add: "u32",
      i64sub: "u32",
      i64mul: "u32",
      i64divs: "u32",
      i64divu: "u32",
      i64rems: "u32",
      i64remu: "u32",
      i64and: "u32",
      i64or: "u32",
      i64xor: "u32",
      i64shl: "u32",
      i64shrs: "u32",
      i64shru: "u32",
      i64rotl: "u32",
      i64rotr: "u32"
    },
    LimitsTo264: {
      eventTopics: "u32",
      stackHeight: "u32",
      globals: "u32",
      parameters: "u32",
      memoryPages: "u32",
      tableSize: "u32",
      brTableSize: "u32",
      subjectLen: "u32",
      codeSize: "u32"
    },
    Limits: {
      eventTopics: "u32",
      stackHeight: "u32",
      globals: "u32",
      parameters: "u32",
      memoryPages: "u32",
      tableSize: "u32",
      brTableSize: "u32",
      subjectLen: "u32"
    },
    PrefabWasmModule: {
      scheduleVersion: "Compact<u32>",
      initial: "Compact<u32>",
      maximum: "Compact<u32>",
      refcount: "Compact<u64>",
      _reserved: "Option<Null>",
      code: "Bytes",
      originalCodeLen: "u32"
    },
    RentProjection: {
      _enum: {
        EvictionAt: "BlockNumber",
        NoEviction: "Null"
      }
    },
    ScheduleTo212: {
      version: "u32",
      putCodePerByteCost: "Gas",
      growMemCost: "Gas",
      regularOpCost: "Gas",
      returnDataPerByteCost: "Gas",
      eventDataPerByteCost: "Gas",
      eventPerTopicCost: "Gas",
      eventBaseCost: "Gas",
      sandboxDataReadCost: "Gas",
      sandboxDataWriteCost: "Gas",
      maxEventTopics: "u32",
      maxStackHeight: "u32",
      maxMemoryPages: "u32",
      enablePrintln: "bool",
      maxSubjectLen: "u32"
    },
    ScheduleTo258: {
      version: "u32",
      putCodePerByteCost: "Gas",
      growMemCost: "Gas",
      regularOpCost: "Gas",
      returnDataPerByteCost: "Gas",
      eventDataPerByteCost: "Gas",
      eventPerTopicCost: "Gas",
      eventBaseCost: "Gas",
      sandboxDataReadCost: "Gas",
      sandboxDataWriteCost: "Gas",
      transferCost: "Gas",
      maxEventTopics: "u32",
      maxStackHeight: "u32",
      maxMemoryPages: "u32",
      enablePrintln: "bool",
      maxSubjectLen: "u32"
    },
    ScheduleTo264: {
      version: "u32",
      enablePrintln: "bool",
      limits: "LimitsTo264",
      instructionWeights: "InstructionWeights",
      hostFnWeights: "HostFnWeightsTo264"
    },
    Schedule: {
      version: "u32",
      enablePrintln: "bool",
      limits: "Limits",
      instructionWeights: "InstructionWeights",
      hostFnWeights: "HostFnWeights"
    },
    SeedOf: "Hash",
    StorageDeposit: {
      _enum: {
        Refund: "Balance",
        Charge: "Balance"
      }
    },
    TombstoneContractInfo: "Hash",
    TrieId: "Bytes"
  }
};
const definitions$6 = {
  rpc: {},
  types: {
    Extrinsic: "GenericExtrinsic",
    ExtrinsicEra: "GenericExtrinsicEra",
    ExtrinsicPayload: "GenericExtrinsicPayload",
    ExtrinsicSignature: "MultiSignature",
    ExtrinsicV4: "GenericExtrinsicV4",
    ExtrinsicPayloadV4: "GenericExtrinsicPayloadV4",
    ExtrinsicSignatureV4: "GenericExtrinsicSignatureV4",
    ExtrinsicUnknown: "GenericExtrinsicUnknown",
    ExtrinsicPayloadUnknown: "GenericExtrinsicPayloadUnknown",
    // eras
    Era: "ExtrinsicEra",
    ImmortalEra: "GenericImmortalEra",
    MortalEra: "GenericMortalEra",
    // signatures & signer
    AnySignature: "H512",
    MultiSignature: {
      _enum: {
        Ed25519: "Ed25519Signature",
        Sr25519: "Sr25519Signature",
        Ecdsa: "EcdsaSignature"
      }
    },
    Signature: "H512",
    SignerPayload: "GenericSignerPayload",
    EcdsaSignature: "[u8; 65]",
    Ed25519Signature: "H512",
    Sr25519Signature: "H512"
  }
};
const rpc$3 = {
  accountNextIndex: {
    alias: ["account_nextIndex"],
    description: "Retrieves the next accountIndex as available on the node",
    params: [
      {
        name: "accountId",
        type: "AccountId"
      }
    ],
    type: "Index"
  },
  addLogFilter: {
    description: "Adds the supplied directives to the current log filter",
    isUnsafe: true,
    params: [
      {
        name: "directives",
        type: "Text"
      }
    ],
    type: "Null"
  },
  addReservedPeer: {
    description: "Adds a reserved peer",
    isUnsafe: true,
    params: [
      {
        name: "peer",
        type: "Text"
      }
    ],
    type: "Text"
  },
  chain: {
    description: "Retrieves the chain",
    params: [],
    type: "Text"
  },
  chainType: {
    description: "Retrieves the chain type",
    params: [],
    type: "ChainType"
  },
  dryRun: {
    alias: ["system_dryRunAt"],
    description: "Dry run an extrinsic at a given block",
    isUnsafe: true,
    params: [
      {
        name: "extrinsic",
        type: "Bytes"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "ApplyExtrinsicResult"
  },
  health: {
    description: "Return health status of the node",
    noErrorLog: true,
    params: [],
    type: "Health"
  },
  localListenAddresses: {
    description: "The addresses include a trailing /p2p/ with the local PeerId, and are thus suitable to be passed to addReservedPeer or as a bootnode address for example",
    params: [],
    type: "Vec<Text>"
  },
  localPeerId: {
    description: "Returns the base58-encoded PeerId of the node",
    params: [],
    type: "Text"
  },
  name: {
    description: "Retrieves the node name",
    params: [],
    type: "Text"
  },
  networkState: {
    alias: ["system_unstable_networkState"],
    description: "Returns current state of the network",
    isUnsafe: true,
    params: [],
    type: "NetworkState"
  },
  nodeRoles: {
    description: "Returns the roles the node is running as",
    params: [],
    type: "Vec<NodeRole>"
  },
  peers: {
    description: "Returns the currently connected peers",
    isUnsafe: true,
    params: [],
    type: "Vec<PeerInfo>"
  },
  properties: {
    description: "Get a custom set of properties as a JSON object, defined in the chain spec",
    params: [],
    type: "ChainProperties"
  },
  removeReservedPeer: {
    description: "Remove a reserved peer",
    isUnsafe: true,
    params: [
      {
        name: "peerId",
        type: "Text"
      }
    ],
    type: "Text"
  },
  reservedPeers: {
    description: "Returns the list of reserved peers",
    params: [],
    type: "Vec<Text>"
  },
  resetLogFilter: {
    description: "Resets the log filter to Substrate defaults",
    isUnsafe: true,
    params: [],
    type: "Null"
  },
  syncState: {
    description: "Returns the state of the syncing of the node",
    params: [],
    type: "SyncState"
  },
  version: {
    description: "Retrieves the version of the node",
    params: [],
    type: "Text"
  }
};
const runtime = {
  AccountNonceApi: [
    {
      methods: {
        account_nonce: {
          description: "The API to query account nonce (aka transaction index)",
          params: [
            {
              name: "accountId",
              type: "AccountId"
            }
          ],
          type: "Index"
        }
      },
      version: 1
    }
  ]
};
const definitions$5 = {
  rpc: rpc$3,
  runtime,
  types: {
    AccountInfo: "AccountInfoWithTripleRefCount",
    AccountInfoWithRefCountU8: {
      nonce: "Index",
      refcount: "u8",
      data: "AccountData"
    },
    AccountInfoWithRefCount: {
      _fallback: "AccountInfoWithRefCountU8",
      nonce: "Index",
      refcount: "RefCount",
      data: "AccountData"
    },
    AccountInfoWithDualRefCount: {
      _fallback: "AccountInfoWithRefCount",
      nonce: "Index",
      consumers: "RefCount",
      providers: "RefCount",
      data: "AccountData"
    },
    // original naming
    AccountInfoWithProviders: "AccountInfoWithDualRefCount",
    AccountInfoWithTripleRefCount: {
      _fallback: "AccountInfoWithDualRefCount",
      nonce: "Index",
      consumers: "RefCount",
      providers: "RefCount",
      sufficients: "RefCount",
      data: "AccountData"
    },
    ApplyExtrinsicResult: "Result<DispatchOutcome, TransactionValidityError>",
    ApplyExtrinsicResultPre6: "Result<DispatchOutcomePre6, TransactionValidityError>",
    ArithmeticError: {
      _enum: [
        "Underflow",
        "Overflow",
        "DivisionByZero"
      ]
    },
    BlockLength: {
      max: "PerDispatchClassU32"
    },
    BlockWeights: {
      baseBlock: "Weight",
      maxBlock: "Weight",
      perClass: "PerDispatchClassWeightsPerClass"
    },
    ChainProperties: "GenericChainProperties",
    ChainType: {
      _enum: {
        Development: "Null",
        Local: "Null",
        Live: "Null",
        Custom: "Text"
      }
    },
    ConsumedWeight: "PerDispatchClassWeight",
    DigestOf: "Digest",
    DispatchClass: {
      _enum: ["Normal", "Operational", "Mandatory"]
    },
    DispatchError: {
      _enum: {
        Other: "Null",
        CannotLookup: "Null",
        BadOrigin: "Null",
        Module: "DispatchErrorModule",
        ConsumerRemaining: "Null",
        NoProviders: "Null",
        TooManyConsumers: "Null",
        Token: "TokenError",
        Arithmetic: "ArithmeticError",
        Transactional: "TransactionalError",
        Exhausted: "Null",
        Corruption: "Null",
        Unavailable: "Null"
      }
    },
    DispatchErrorPre6: {
      _enum: {
        Other: "Null",
        CannotLookup: "Null",
        BadOrigin: "Null",
        Module: "DispatchErrorModulePre6",
        ConsumerRemaining: "Null",
        NoProviders: "Null",
        TooManyConsumers: "Null",
        Token: "TokenError",
        Arithmetic: "ArithmeticError",
        Transactional: "TransactionalError"
      }
    },
    DispatchErrorPre6First: {
      // The enum was modified mid-flight, affecting asset chains -
      // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
      _enum: {
        Other: "Null",
        CannotLookup: "Null",
        BadOrigin: "Null",
        Module: "DispatchErrorModulePre6",
        ConsumerRemaining: "Null",
        NoProviders: "Null",
        Token: "TokenError",
        Arithmetic: "ArithmeticError",
        Transactional: "TransactionalError"
      }
    },
    DispatchErrorModuleU8: {
      index: "u8",
      error: "u8"
    },
    DispatchErrorModuleU8a: {
      index: "u8",
      error: "[u8; 4]"
    },
    DispatchErrorModule: "DispatchErrorModuleU8a",
    DispatchErrorModulePre6: "DispatchErrorModuleU8",
    DispatchErrorTo198: {
      module: "Option<u8>",
      error: "u8"
    },
    DispatchInfo: {
      weight: "Weight",
      class: "DispatchClass",
      paysFee: "Pays"
    },
    DispatchInfoTo190: {
      weight: "Weight",
      class: "DispatchClass"
    },
    DispatchInfoTo244: {
      weight: "Weight",
      class: "DispatchClass",
      paysFee: "bool"
    },
    DispatchOutcome: "Result<(), DispatchError>",
    DispatchOutcomePre6: "Result<(), DispatchErrorPre6>",
    DispatchResult: "Result<(), DispatchError>",
    DispatchResultOf: "DispatchResult",
    DispatchResultTo198: "Result<(), Text>",
    Event: "GenericEvent",
    EventId: "[u8; 2]",
    EventIndex: "u32",
    EventRecord: {
      phase: "Phase",
      event: "Event",
      topics: "Vec<Hash>"
    },
    Health: {
      peers: "u64",
      isSyncing: "bool",
      shouldHavePeers: "bool"
    },
    InvalidTransaction: {
      _enum: {
        Call: "Null",
        Payment: "Null",
        Future: "Null",
        Stale: "Null",
        BadProof: "Null",
        AncientBirthBlock: "Null",
        ExhaustsResources: "Null",
        Custom: "u8",
        BadMandatory: "Null",
        MandatoryDispatch: "Null",
        BadSigner: "Null"
      }
    },
    Key: "Bytes",
    LastRuntimeUpgradeInfo: {
      specVersion: "Compact<u32>",
      specName: "Text"
    },
    NetworkState: {
      peerId: "Text",
      listenedAddresses: "Vec<Text>",
      externalAddresses: "Vec<Text>",
      connectedPeers: "HashMap<Text, Peer>",
      notConnectedPeers: "HashMap<Text, NotConnectedPeer>",
      averageDownloadPerSec: "u64",
      averageUploadPerSec: "u64",
      peerset: "NetworkStatePeerset"
    },
    NetworkStatePeerset: {
      messageQueue: "u64",
      nodes: "HashMap<Text, NetworkStatePeersetInfo>"
    },
    NetworkStatePeersetInfo: {
      connected: "bool",
      reputation: "i32"
    },
    NodeRole: {
      _enum: {
        Full: "Null",
        LightClient: "Null",
        Authority: "Null",
        UnknownRole: "u8"
      }
    },
    NotConnectedPeer: {
      knownAddresses: "Vec<Text>",
      latestPingTime: "Option<PeerPing>",
      versionString: "Option<Text>"
    },
    Peer: {
      enabled: "bool",
      endpoint: "PeerEndpoint",
      knownAddresses: "Vec<Text>",
      latestPingTime: "PeerPing",
      open: "bool",
      versionString: "Text"
    },
    PeerEndpoint: {
      listening: "PeerEndpointAddr"
    },
    PeerEndpointAddr: {
      _alias: {
        localAddr: "local_addr",
        sendBackAddr: "send_back_addr"
      },
      localAddr: "Text",
      sendBackAddr: "Text"
    },
    PeerPing: {
      nanos: "u64",
      secs: "u64"
    },
    PeerInfo: {
      peerId: "Text",
      roles: "Text",
      protocolVersion: "u32",
      bestHash: "Hash",
      bestNumber: "BlockNumber"
    },
    PerDispatchClassU32: {
      normal: "u32",
      operational: "u32",
      mandatory: "u32"
    },
    PerDispatchClassWeight: {
      normal: "Weight",
      operational: "Weight",
      mandatory: "Weight"
    },
    PerDispatchClassWeightsPerClass: {
      normal: "WeightPerClass",
      operational: "WeightPerClass",
      mandatory: "WeightPerClass"
    },
    Phase: {
      _enum: {
        ApplyExtrinsic: "u32",
        Finalization: "Null",
        Initialization: "Null"
      }
    },
    RawOrigin: {
      _enum: {
        Root: "Null",
        Signed: "AccountId",
        None: "Null"
      }
    },
    RefCount: "u32",
    RefCountTo259: "u8",
    SyncState: {
      startingBlock: "BlockNumber",
      currentBlock: "BlockNumber",
      highestBlock: "Option<BlockNumber>"
    },
    SystemOrigin: "RawOrigin",
    TokenError: {
      _enum: [
        "NoFunds",
        "WouldDie",
        "BelowMinimum",
        "CannotCreate",
        "UnknownAsset",
        "Frozen",
        "Unsupported",
        // these are dropped, but still in older versions
        // (if this adjusts, will need to take a re-look)
        "Underflow",
        "Overflow"
      ]
    },
    TransactionValidityError: {
      _enum: {
        Invalid: "InvalidTransaction",
        Unknown: "UnknownTransaction"
      }
    },
    TransactionalError: {
      _enum: [
        "LimitReached",
        "NoLayer"
      ]
    },
    UnknownTransaction: {
      _enum: {
        CannotLookup: "Null",
        NoUnsignedValidator: "Null",
        Custom: "u8"
      }
    },
    WeightPerClass: {
      baseExtrinsic: "Weight",
      maxExtrinsic: "Option<Weight>",
      maxTotal: "Option<Weight>",
      reserved: "Option<Weight>"
    }
  }
};
const definitions$4 = {
  rpc: {},
  types: {
    Multisig: {
      when: "Timepoint",
      deposit: "Balance",
      depositor: "AccountId",
      approvals: "Vec<AccountId>"
    },
    Timepoint: {
      height: "BlockNumber",
      index: "u32"
    }
  }
};
const layout = {
  ContractCryptoHasher: {
    _enum: ["Blake2x256", "Sha2x256", "Keccak256"]
  },
  ContractDiscriminant: "u32",
  ContractLayoutArray: {
    offset: "ContractLayoutKey",
    len: "u32",
    cellsPerElem: "u64",
    layout: "ContractStorageLayout"
  },
  ContractLayoutCell: {
    key: "ContractLayoutKey",
    ty: "SiLookupTypeId"
  },
  ContractLayoutEnum: {
    dispatchKey: "ContractLayoutKey",
    variants: "BTreeMap<ContractDiscriminant, ContractLayoutStruct>"
  },
  ContractLayoutHash: {
    offset: "ContractLayoutKey",
    strategy: "ContractLayoutHashingStrategy",
    layout: "ContractStorageLayout"
  },
  ContractLayoutHashingStrategy: {
    hasher: "ContractCryptoHasher",
    postfix: "Vec<u8>",
    prefix: "Vec<u8>"
  },
  ContractLayoutKey: "[u8; 32]",
  ContractLayoutStruct: {
    fields: "Vec<ContractLayoutStructField>"
  },
  ContractLayoutStructField: {
    layout: "ContractStorageLayout",
    name: "Text"
  },
  ContractStorageLayout: {
    _enum: {
      Cell: "ContractLayoutCell",
      Hash: "ContractLayoutHash",
      Array: "ContractLayoutArray",
      Struct: "ContractLayoutStruct",
      Enum: "ContractLayoutEnum"
    }
  }
};
const spec = {
  ContractConstructorSpecV0: {
    name: "Text",
    selector: "ContractSelector",
    args: "Vec<ContractMessageParamSpecV0>",
    docs: "Vec<Text>"
  },
  ContractConstructorSpecV1: {
    name: "Vec<Text>",
    selector: "ContractSelector",
    args: "Vec<ContractMessageParamSpecV0>",
    docs: "Vec<Text>"
  },
  ContractConstructorSpecV2: {
    label: "Text",
    selector: "ContractSelector",
    args: "Vec<ContractMessageParamSpecV2>",
    docs: "Vec<Text>"
  },
  ContractConstructorSpecV3: {
    label: "Text",
    selector: "ContractSelector",
    payable: "bool",
    args: "Vec<ContractMessageParamSpecV2>",
    docs: "Vec<Text>"
  },
  ContractConstructorSpecV4: {
    label: "Text",
    selector: "ContractSelector",
    payable: "bool",
    args: "Vec<ContractMessageParamSpecV2>",
    docs: "Vec<Text>",
    default: "bool",
    returnType: "Option<ContractTypeSpec>"
  },
  ContractContractSpecV0: {
    constructors: "Vec<ContractConstructorSpecV0>",
    messages: "Vec<ContractMessageSpecV0>",
    events: "Vec<ContractEventSpecV0>",
    docs: "Vec<Text>"
  },
  ContractContractSpecV1: {
    constructors: "Vec<ContractConstructorSpecV1>",
    messages: "Vec<ContractMessageSpecV1>",
    events: "Vec<ContractEventSpecV1>",
    docs: "Vec<Text>"
  },
  ContractContractSpecV2: {
    constructors: "Vec<ContractConstructorSpecV2>",
    messages: "Vec<ContractMessageSpecV2>",
    events: "Vec<ContractEventSpecV2>",
    docs: "Vec<Text>"
  },
  ContractContractSpecV3: {
    constructors: "Vec<ContractConstructorSpecV3>",
    messages: "Vec<ContractMessageSpecV2>",
    events: "Vec<ContractEventSpecV2>",
    docs: "Vec<Text>"
  },
  ContractContractSpecV4: {
    constructors: "Vec<ContractConstructorSpecV4>",
    messages: "Vec<ContractMessageSpecV3>",
    events: "Vec<ContractEventSpecV2>",
    docs: "Vec<Text>",
    environment: "ContractEnvironmentV4"
  },
  ContractDisplayName: "SiPath",
  ContractEventParamSpecV0: {
    name: "Text",
    indexed: "bool",
    type: "ContractTypeSpec",
    docs: "Vec<Text>"
  },
  ContractEventParamSpecV2: {
    label: "Text",
    indexed: "bool",
    type: "ContractTypeSpec",
    docs: "Vec<Text>"
  },
  ContractEventSpecV0: {
    name: "Text",
    args: "Vec<ContractEventParamSpecV0>",
    docs: "Vec<Text>"
  },
  ContractEventSpecV1: {
    name: "Text",
    args: "Vec<ContractEventParamSpecV0>",
    docs: "Vec<Text>"
  },
  ContractEventSpecV2: {
    label: "Text",
    args: "Vec<ContractEventParamSpecV2>",
    docs: "Vec<Text>"
  },
  ContractMessageParamSpecV0: {
    name: "Text",
    type: "ContractTypeSpec"
  },
  ContractMessageParamSpecV2: {
    label: "Text",
    type: "ContractTypeSpec"
  },
  ContractMessageSpecV0: {
    name: "Text",
    selector: "ContractSelector",
    mutates: "bool",
    payable: "bool",
    args: "Vec<ContractMessageParamSpecV0>",
    returnType: "Option<ContractTypeSpec>",
    docs: "Vec<Text>"
  },
  ContractMessageSpecV1: {
    name: "Vec<Text>",
    selector: "ContractSelector",
    mutates: "bool",
    payable: "bool",
    args: "Vec<ContractMessageParamSpecV0>",
    returnType: "Option<ContractTypeSpec>",
    docs: "Vec<Text>"
  },
  ContractMessageSpecV2: {
    label: "Text",
    selector: "ContractSelector",
    mutates: "bool",
    payable: "bool",
    args: "Vec<ContractMessageParamSpecV2>",
    returnType: "Option<ContractTypeSpec>",
    docs: "Vec<Text>"
  },
  ContractMessageSpecV3: {
    label: "Text",
    selector: "ContractSelector",
    mutates: "bool",
    payable: "bool",
    args: "Vec<ContractMessageParamSpecV2>",
    returnType: "Option<ContractTypeSpec>",
    docs: "Vec<Text>",
    default: "bool"
  },
  ContractSelector: "[u8; 4]",
  ContractTypeSpec: {
    type: "SiLookupTypeId",
    displayName: "ContractDisplayName"
  }
};
const latest = {
  ContractConstructorSpecLatest: "ContractConstructorSpecV4",
  ContractEventSpecLatest: "ContractEventSpecV2",
  ContractEventParamSpecLatest: "ContractEventParamSpecV2",
  ContractMessageParamSpecLatest: "ContractMessageParamSpecV2",
  ContractMessageSpecLatest: "ContractMessageSpecV3",
  ContractMetadataLatest: "ContractMetadataV4"
};
const definitions$3 = {
  rpc: {},
  types: {
    ...layout,
    ...spec,
    ...latest,
    ContractProjectInfo: {
      source: "ContractProjectSource",
      contract: "ContractProjectContract"
    },
    ContractMetadataV0: {
      metadataVersion: "Text",
      types: "Vec<Si0Type>",
      spec: "ContractContractSpecV0"
    },
    ContractMetadataV1: {
      types: "Vec<PortableType>",
      spec: "ContractContractSpecV1"
    },
    ContractMetadataV2: {
      types: "Vec<PortableType>",
      spec: "ContractContractSpecV2"
    },
    ContractMetadataV3: {
      types: "Vec<PortableType>",
      spec: "ContractContractSpecV3"
    },
    ContractMetadataV4: {
      types: "Vec<PortableType>",
      spec: "ContractContractSpecV4"
    },
    ContractMetadata: {
      _enum: {
        V0: "ContractMetadataV0",
        V1: "ContractMetadataV1",
        V2: "ContractMetadataV2",
        V3: "ContractMetadataV3",
        V4: "ContractMetadataV4"
      }
    },
    ContractProjectV0: {
      metadataVersion: "Text",
      source: "ContractProjectSource",
      contract: "ContractProjectContract",
      types: "Vec<Si0Type>",
      spec: "ContractContractSpecV0"
    },
    ContractProject: "(ContractProjectInfo, ContractMetadata)",
    ContractProjectContract: {
      _alias: {
        docs: "documentation"
      },
      name: "Text",
      version: "Text",
      authors: "Vec<Text>",
      description: "Option<Text>",
      docs: "Option<Text>",
      repository: "Option<Text>",
      homepage: "Option<Text>",
      license: "Option<Text>"
    },
    ContractProjectSource: {
      _alias: {
        wasmHash: "hash"
      },
      wasmHash: "[u8; 32]",
      language: "Text",
      compiler: "Text",
      wasm: "Raw"
    },
    ContractEnvironmentV4: {
      _alias: {
        hashType: "hash"
      },
      // NOTE These are not marked optional in the Rust code, however since we
      // convert from older versions to newer, we may not have these fields.
      // The Option<...> works since our inputs are always JSON, so it will
      // be None when not specified.
      //
      // Additionally we don't mark the full structure as Option, rather we
      // do it on a per-field basis since fields may be added as the versions
      // progress.
      accountId: "Option<ContractTypeSpec>",
      balance: "Option<ContractTypeSpec>",
      blockNumber: "Option<ContractTypeSpec>",
      hashType: "Option<ContractTypeSpec>",
      timestamp: "Option<ContractTypeSpec>",
      maxEventTopics: "Option<u32>"
    }
  }
};
const rpc$2 = {
  methods: {
    description: "Retrieves the list of RPC methods that are exposed by the node",
    params: [],
    type: "RpcMethods"
  }
};
const definitions$2 = {
  rpc: rpc$2,
  types: {
    RpcMethods: {
      version: "u32",
      methods: "Vec<Text>"
    }
  }
};
const rpc$1 = {
  getBlock: {
    description: "Get header and body of a relay chain block",
    params: [
      {
        isHistoric: true,
        isOptional: true,
        name: "hash",
        type: "BlockHash"
      }
    ],
    type: "SignedBlock"
  },
  getBlockHash: {
    description: "Get the block hash for a specific block",
    params: [
      {
        isOptional: true,
        name: "blockNumber",
        type: "BlockNumber"
      }
    ],
    type: "BlockHash"
  },
  getFinalizedHead: {
    alias: ["chain_getFinalisedHead"],
    description: "Get hash of the last finalized block in the canon chain",
    params: [],
    type: "BlockHash"
  },
  getHeader: {
    alias: ["chain_getHead"],
    description: "Retrieves the header for a specific block",
    params: [
      {
        isHistoric: true,
        isOptional: true,
        name: "hash",
        type: "BlockHash"
      }
    ],
    type: "Header"
  },
  subscribeAllHeads: {
    description: "Retrieves the newest header via subscription",
    params: [],
    pubsub: [
      "allHead",
      "subscribeAllHeads",
      "unsubscribeAllHeads"
    ],
    type: "Header"
  },
  subscribeFinalizedHeads: {
    alias: ["chain_subscribeFinalisedHeads", "chain_unsubscribeFinalisedHeads"],
    description: "Retrieves the best finalized header via subscription",
    params: [],
    pubsub: [
      "finalizedHead",
      "subscribeFinalizedHeads",
      "unsubscribeFinalizedHeads"
    ],
    type: "Header"
  },
  subscribeNewHeads: {
    alias: ["chain_unsubscribeNewHeads", "subscribe_newHead", "unsubscribe_newHead"],
    description: "Retrieves the best header via subscription",
    params: [],
    // NOTE These still has the aliassed version, compatible with 1.x
    pubsub: [
      "newHead",
      "subscribeNewHead",
      "unsubscribeNewHead"
    ],
    type: "Header"
  }
};
const definitions$1 = {
  rpc: rpc$1,
  types: {
    BlockHash: "Hash"
  }
};
const rpc = {
  call: {
    alias: ["state_callAt"],
    description: "Perform a call to a builtin on the chain",
    params: [
      {
        name: "method",
        type: "Text"
      },
      {
        name: "data",
        type: "Bytes"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Bytes"
  },
  getChildKeys: {
    description: "Retrieves the keys with prefix of a specific child storage",
    params: [
      {
        name: "childStorageKey",
        type: "StorageKey"
      },
      {
        name: "childDefinition",
        type: "StorageKey"
      },
      {
        name: "childType",
        type: "u32"
      },
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Vec<StorageKey>"
  },
  getChildReadProof: {
    description: "Returns proof of storage for child key entries at a specific block state.",
    params: [
      {
        name: "childStorageKey",
        type: "PrefixedStorageKey"
      },
      {
        name: "keys",
        type: "Vec<StorageKey>"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "ReadProof"
  },
  getChildStorage: {
    description: "Retrieves the child storage for a key",
    params: [
      {
        name: "childStorageKey",
        type: "StorageKey"
      },
      {
        name: "childDefinition",
        type: "StorageKey"
      },
      {
        name: "childType",
        type: "u32"
      },
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "StorageData"
  },
  getChildStorageHash: {
    description: "Retrieves the child storage hash",
    params: [
      {
        name: "childStorageKey",
        type: "StorageKey"
      },
      {
        name: "childDefinition",
        type: "StorageKey"
      },
      {
        name: "childType",
        type: "u32"
      },
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Hash"
  },
  getChildStorageSize: {
    description: "Retrieves the child storage size",
    params: [
      {
        name: "childStorageKey",
        type: "StorageKey"
      },
      {
        name: "childDefinition",
        type: "StorageKey"
      },
      {
        name: "childType",
        type: "u32"
      },
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "u64"
  },
  getKeys: {
    deprecated: "Use `api.rpc.state.getKeysPaged` to retrieve keys",
    description: "Retrieves the keys with a certain prefix",
    params: [
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Vec<StorageKey>"
  },
  getKeysPaged: {
    alias: ["state_getKeysPagedAt"],
    description: "Returns the keys with prefix with pagination support.",
    params: [
      {
        name: "key",
        type: "StorageKey"
      },
      {
        name: "count",
        type: "u32"
      },
      {
        isOptional: true,
        name: "startKey",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Vec<StorageKey>"
  },
  getMetadata: {
    description: "Returns the runtime metadata",
    params: [
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Metadata"
  },
  getPairs: {
    deprecated: "Use `api.rpc.state.getKeysPaged` to retrieve keys",
    description: "Returns the keys with prefix, leave empty to get all the keys (deprecated: Use getKeysPaged)",
    isUnsafe: true,
    params: [
      {
        name: "prefix",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Vec<KeyValue>"
  },
  getReadProof: {
    description: "Returns proof of storage entries at a specific block state",
    params: [
      {
        name: "keys",
        type: "Vec<StorageKey>"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "ReadProof"
  },
  getRuntimeVersion: {
    alias: ["chain_getRuntimeVersion"],
    description: "Get the runtime version",
    params: [
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "RuntimeVersion"
  },
  getStorage: {
    alias: ["state_getStorageAt"],
    description: "Retrieves the storage for a key",
    params: [
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "StorageData"
  },
  getStorageHash: {
    alias: ["state_getStorageHashAt"],
    description: "Retrieves the storage hash",
    params: [
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Hash"
  },
  getStorageSize: {
    alias: ["state_getStorageSizeAt"],
    description: "Retrieves the storage size",
    params: [
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "u64"
  },
  queryStorage: {
    description: "Query historical storage entries (by key) starting from a start block",
    isUnsafe: true,
    params: [
      {
        name: "keys",
        type: "Vec<StorageKey>"
      },
      {
        name: "fromBlock",
        type: "Hash"
      },
      {
        isOptional: true,
        name: "toBlock",
        type: "BlockHash"
      }
    ],
    type: "Vec<StorageChangeSet>"
  },
  queryStorageAt: {
    description: "Query storage entries (by key) starting at block hash given as the second parameter",
    params: [
      {
        name: "keys",
        type: "Vec<StorageKey>"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Vec<StorageChangeSet>"
  },
  subscribeRuntimeVersion: {
    alias: ["chain_subscribeRuntimeVersion", "chain_unsubscribeRuntimeVersion"],
    description: "Retrieves the runtime version via subscription",
    params: [],
    pubsub: [
      "runtimeVersion",
      "subscribeRuntimeVersion",
      "unsubscribeRuntimeVersion"
    ],
    type: "RuntimeVersion"
  },
  subscribeStorage: {
    description: "Subscribes to storage changes for the provided keys",
    // NOTE Just marking it here to follow the logic - this is unsafe when no
    // keys are provided (i.e. subscribing to all), generally this is used
    // extensively with normal subscriptions
    // isUnsafe: true,
    params: [
      {
        isOptional: true,
        name: "keys",
        type: "Vec<StorageKey>"
      }
    ],
    pubsub: [
      "storage",
      "subscribeStorage",
      "unsubscribeStorage"
    ],
    type: "StorageChangeSet"
  },
  traceBlock: {
    description: "Provides a way to trace the re-execution of a single block",
    isUnsafe: true,
    params: [
      {
        name: "block",
        type: "Hash"
      },
      {
        name: "targets",
        type: "Option<Text>"
      },
      {
        name: "storageKeys",
        type: "Option<Text>"
      },
      {
        name: "methods",
        type: "Option<Text>"
      }
    ],
    type: "TraceBlockResponse"
  },
  trieMigrationStatus: {
    description: "Check current migration state",
    isUnsafe: true,
    params: [
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "MigrationStatusResult"
  }
};
const definitions = {
  rpc,
  types: {
    ApiId: "[u8; 8]",
    BlockTrace: {
      blockHash: "Text",
      parentHash: "Text",
      tracingTargets: "Text",
      storageKeys: "Text",
      spans: "Vec<BlockTraceSpan>",
      events: "Vec<BlockTraceEvent>"
    },
    BlockTraceEvent: {
      target: "Text",
      data: "BlockTraceEventData",
      parentId: "Option<u64>"
    },
    BlockTraceEventData: {
      stringValues: "HashMap<Text, Text>"
    },
    BlockTraceSpan: {
      id: "u64",
      parentId: "Option<u64>",
      name: "Text",
      target: "Text",
      wasm: "bool"
    },
    KeyValueOption: "(StorageKey, Option<StorageData>)",
    MigrationStatusResult: {
      topRemainingToMigrate: "u64",
      childRemainingToMigrate: "u64"
    },
    ReadProof: {
      at: "Hash",
      proof: "Vec<Bytes>"
    },
    RuntimeVersionApi: "(ApiId, u32)",
    RuntimeVersion: {
      specName: "Text",
      implName: "Text",
      authoringVersion: "u32",
      specVersion: "u32",
      implVersion: "u32",
      apis: "Vec<RuntimeVersionApi>",
      transactionVersion: "u32",
      stateVersion: "u8"
    },
    RuntimeVersionPre4: {
      specName: "Text",
      implName: "Text",
      authoringVersion: "u32",
      specVersion: "u32",
      implVersion: "u32",
      apis: "Vec<RuntimeVersionApi>",
      transactionVersion: "u32"
    },
    RuntimeVersionPre3: {
      specName: "Text",
      implName: "Text",
      authoringVersion: "u32",
      specVersion: "u32",
      implVersion: "u32",
      apis: "Vec<RuntimeVersionApi>"
    },
    RuntimeVersionPartial: {
      specName: "Text",
      specVersion: "u32",
      apis: "Vec<RuntimeVersionApi>"
    },
    SpecVersion: "u32",
    StorageChangeSet: {
      block: "Hash",
      changes: "Vec<KeyValueOption>"
    },
    TraceBlockResponse: {
      _enum: {
        TraceError: "TraceError",
        BlockTrace: "BlockTrace"
      }
    },
    TraceError: {
      error: "Text"
    }
  }
};
const typeDefinitions = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  assetConversion: mockInterface,
  assets: mockInterface,
  attestations: mockInterface,
  aura: mockInterface,
  author: mockInterface,
  authorship: mockInterface,
  babe: mockInterface,
  balances: definitions$8,
  beefy: mockInterface,
  benchmark: mockInterface,
  blockbuilder: mockInterface,
  bridges: mockInterface,
  chain: definitions$1,
  childstate: mockInterface,
  claims: mockInterface,
  collective: mockInterface,
  consensus: mockInterface,
  contracts: definitions$7,
  contractsAbi: definitions$3,
  crowdloan: mockInterface,
  cumulus: mockInterface,
  democracy: mockInterface,
  dev: mockInterface,
  discovery: mockInterface,
  elections: mockInterface,
  engine: mockInterface,
  eth: mockInterface,
  evm: mockInterface,
  extrinsics: definitions$6,
  finality: mockInterface,
  fungibles: mockInterface,
  genericAsset: mockInterface,
  gilt: mockInterface,
  grandpa: mockInterface,
  identity: mockInterface,
  imOnline: mockInterface,
  lottery: mockInterface,
  metadata: definitions$b,
  mmr: mockInterface,
  nfts: mockInterface,
  nimbus: mockInterface,
  nompools: mockInterface,
  offchain: mockInterface,
  offences: mockInterface,
  ormlOracle: mockInterface,
  ormlTokens: mockInterface,
  parachains: mockInterface,
  payment: mockInterface,
  poll: mockInterface,
  pow: mockInterface,
  proxy: mockInterface,
  purchase: mockInterface,
  recovery: mockInterface,
  rpc: definitions$2,
  runtime: definitions$a,
  scaleInfo: definitions$9,
  scheduler: mockInterface,
  session: mockInterface,
  society: mockInterface,
  staking: mockInterface,
  state: definitions,
  support: mockInterface,
  syncstate: mockInterface,
  system: definitions$5,
  treasury: mockInterface,
  txpayment: mockInterface,
  txqueue: mockInterface,
  uniques: mockInterface,
  utility: definitions$4,
  vesting: mockInterface,
  xcm: mockInterface
}, Symbol.toStringTag, { value: "Module" }));
const jsonrpc = {};
Object.keys(typeDefinitions).forEach((s) => Object.entries(typeDefinitions[s].rpc || {}).forEach(([method, def]) => {
  const section2 = def.aliasSection || s;
  if (!jsonrpc[section2]) {
    jsonrpc[section2] = {};
  }
  jsonrpc[section2][method] = objectSpread({}, def, {
    isSubscription: !!def.pubsub,
    jsonrpc: `${section2}_${method}`,
    method,
    section: section2
  });
}));
const rpcDefinitions = jsonrpc;
var TypeDefInfo;
(function(TypeDefInfo2) {
  TypeDefInfo2[TypeDefInfo2["BTreeMap"] = 0] = "BTreeMap";
  TypeDefInfo2[TypeDefInfo2["BTreeSet"] = 1] = "BTreeSet";
  TypeDefInfo2[TypeDefInfo2["Compact"] = 2] = "Compact";
  TypeDefInfo2[TypeDefInfo2["DoNotConstruct"] = 3] = "DoNotConstruct";
  TypeDefInfo2[TypeDefInfo2["Enum"] = 4] = "Enum";
  TypeDefInfo2[TypeDefInfo2["HashMap"] = 5] = "HashMap";
  TypeDefInfo2[TypeDefInfo2["Int"] = 6] = "Int";
  TypeDefInfo2[TypeDefInfo2["Linkage"] = 7] = "Linkage";
  TypeDefInfo2[TypeDefInfo2["Null"] = 8] = "Null";
  TypeDefInfo2[TypeDefInfo2["Option"] = 9] = "Option";
  TypeDefInfo2[TypeDefInfo2["Plain"] = 10] = "Plain";
  TypeDefInfo2[TypeDefInfo2["Range"] = 11] = "Range";
  TypeDefInfo2[TypeDefInfo2["RangeInclusive"] = 12] = "RangeInclusive";
  TypeDefInfo2[TypeDefInfo2["Result"] = 13] = "Result";
  TypeDefInfo2[TypeDefInfo2["Set"] = 14] = "Set";
  TypeDefInfo2[TypeDefInfo2["Si"] = 15] = "Si";
  TypeDefInfo2[TypeDefInfo2["Struct"] = 16] = "Struct";
  TypeDefInfo2[TypeDefInfo2["Tuple"] = 17] = "Tuple";
  TypeDefInfo2[TypeDefInfo2["UInt"] = 18] = "UInt";
  TypeDefInfo2[TypeDefInfo2["Vec"] = 19] = "Vec";
  TypeDefInfo2[TypeDefInfo2["VecFixed"] = 20] = "VecFixed";
  TypeDefInfo2[TypeDefInfo2["WrapperKeepOpaque"] = 21] = "WrapperKeepOpaque";
  TypeDefInfo2[TypeDefInfo2["WrapperOpaque"] = 22] = "WrapperOpaque";
})(TypeDefInfo || (TypeDefInfo = {}));
class AbstractArray extends Array {
  constructor(registry, length2) {
    super(length2);
    __publicField(this, "registry");
    __publicField(this, "createdAtHash");
    __publicField(this, "initialU8aLength");
    __publicField(this, "isStorageFallback");
    this.registry = registry;
  }
  /**
   * @description This ensures that operators such as clice, filter, map, etc. return
   * new Array instances (without this we need to apply overrides)
   */
  static get [Symbol.species]() {
    return Array;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    const count = this.length;
    let total = compactToU8a(count).length;
    for (let i = 0; i < count; i++) {
      total += this[i].encodedLength;
    }
    return total;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    return this.length === 0;
  }
  /**
   * @description The length of the value
   */
  get length() {
    return super.length;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return compareArray(this, other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      inner: this.inspectInner(),
      outer: [compactToU8a(this.length)]
    };
  }
  /**
   * @internal
   * @description Internal per-item inspection of internal values
   */
  inspectInner() {
    const count = this.length;
    const inner = new Array(count);
    for (let i = 0; i < count; i++) {
      inner[i] = this[i].inspect();
    }
    return inner;
  }
  /**
   * @description Converts the Object to an standard JavaScript Array
   */
  toArray() {
    return Array.from(this);
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended) {
    const count = this.length;
    const result = new Array(count);
    for (let i = 0; i < count; i++) {
      result[i] = this[i] && this[i].toHuman(isExtended);
    }
    return result;
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    const count = this.length;
    const result = new Array(count);
    for (let i = 0; i < count; i++) {
      result[i] = this[i] && this[i].toJSON();
    }
    return result;
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    const count = this.length;
    const result = new Array(count);
    for (let i = 0; i < count; i++) {
      result[i] = this[i] && this[i].toPrimitive();
    }
    return result;
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    const count = this.length;
    const result = new Array(count);
    for (let i = 0; i < count; i++) {
      result[i] = this[i].toString();
    }
    return `[${result.join(", ")}]`;
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    const encoded = this.toU8aInner();
    return isBare ? u8aConcatStrict(encoded) : u8aConcatStrict([compactToU8a(this.length), ...encoded]);
  }
  /**
   * @internal
   * @description Internal per-item SCALE encoding of contained values
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8aInner(isBare) {
    const count = this.length;
    const encoded = new Array(count);
    for (let i = 0; i < count; i++) {
      encoded[i] = this[i].toU8a(isBare);
    }
    return encoded;
  }
}
class AbstractBase {
  constructor(registry, value, initialU8aLength) {
    __publicField(this, "registry");
    __publicField(this, "createdAtHash");
    __publicField(this, "initialU8aLength");
    __publicField(this, "isStorageFallback");
    __publicField(this, "__internal__raw");
    this.initialU8aLength = initialU8aLength;
    this.__internal__raw = value;
    this.registry = registry;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description returns the inner (wrapped value)
   */
  get inner() {
    return this.__internal__raw;
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    return this.__internal__raw.isEmpty;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return this.__internal__raw.eq(other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return this.__internal__raw.inspect();
  }
  /**
   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
   */
  toHex(isLe) {
    return this.__internal__raw.toHex(isLe);
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended) {
    return this.__internal__raw.toHuman(isExtended);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.__internal__raw.toJSON();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.__internal__raw.toPrimitive();
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.__internal__raw.toString();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    return this.__internal__raw.toU8a(isBare);
  }
  /**
   * @description Returns the inner wrapped value (equivalent to valueOf)
   */
  unwrap() {
    return this.__internal__raw;
  }
  /**
   * @description Returns the inner wrapped value
   */
  valueOf() {
    return this.__internal__raw;
  }
}
const DEFAULT_UINT_BITS = 64;
const MAX_NUMBER_BITS = 52;
const MUL_P = new BN(1e4);
const FORMATTERS = [
  ["Perquintill", BN_QUINTILL],
  ["Perbill", BN_BILLION],
  ["Permill", BN_MILLION],
  ["Percent", BN_HUNDRED]
];
function isToBn(value) {
  return isFunction$1(value.toBn);
}
function toPercentage(value, divisor) {
  return `${(value.mul(MUL_P).div(divisor).toNumber() / 100).toFixed(2)}%`;
}
function decodeAbstractInt(value, isNegative) {
  if (isNumber(value)) {
    if (!Number.isInteger(value) || value > Number.MAX_SAFE_INTEGER || value < Number.MIN_SAFE_INTEGER) {
      throw new Error("Number needs to be an integer <= Number.MAX_SAFE_INTEGER, i.e. 2 ^ 53 - 1");
    }
    return value;
  } else if (isString(value)) {
    if (isHex(value, -1, true)) {
      return hexToBn(value, { isLe: false, isNegative }).toString();
    }
    if (value.includes(".") || value.includes(",") || value.includes("e")) {
      throw new Error("String should not contain decimal points or scientific notation");
    }
    return value;
  } else if (isBn(value) || isBigInt(value)) {
    return value.toString();
  } else if (isObject$1(value)) {
    if (isToBn(value)) {
      return value.toBn().toString();
    }
    const keys = Object.keys(value);
    if (keys.length !== 1) {
      throw new Error("Unable to construct number from multi-key object");
    }
    return decodeAbstractInt(value[keys[0]], isNegative);
  } else if (!value) {
    return 0;
  }
  throw new Error(`Unable to create BN from unknown type ${typeof value}`);
}
class AbstractInt extends BN {
  constructor(registry, value = 0, bitLength = DEFAULT_UINT_BITS, isSigned = false) {
    super(
      // shortcut isU8a as used in SCALE decoding
      isU8a(value) ? bitLength <= 48 ? u8aToNumber(value.subarray(0, bitLength / 8), { isNegative: isSigned }) : u8aToBn(value.subarray(0, bitLength / 8), { isLe: true, isNegative: isSigned }).toString() : decodeAbstractInt(value, isSigned)
    );
    __publicField(this, "registry");
    __publicField(this, "encodedLength");
    __publicField(this, "isUnsigned");
    __publicField(this, "createdAtHash");
    __publicField(this, "initialU8aLength");
    __publicField(this, "isStorageFallback");
    __publicField(this, "__internal__bitLength");
    this.registry = registry;
    this.__internal__bitLength = bitLength;
    this.encodedLength = this.__internal__bitLength / 8;
    this.initialU8aLength = this.__internal__bitLength / 8;
    this.isUnsigned = !isSigned;
    const isNegative = this.isNeg();
    const maxBits = bitLength - (isSigned && !isNegative ? 1 : 0);
    if (isNegative && !isSigned) {
      throw new Error(`${this.toRawType()}: Negative number passed to unsigned type`);
    } else if (super.bitLength() > maxBits) {
      throw new Error(`${this.toRawType()}: Input too large. Found input with ${super.bitLength()} bits, expected ${maxBits}`);
    }
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is a zero value (align elsewhere)
   */
  get isEmpty() {
    return this.isZero();
  }
  /**
   * @description Returns the number of bits in the value
   */
  bitLength() {
    return this.__internal__bitLength;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  eq(other) {
    return super.eq(isHex(other) ? hexToBn(other.toString(), { isLe: false, isNegative: !this.isUnsigned }) : bnToBn(other));
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      outer: [this.toU8a()]
    };
  }
  /**
   * @description True if this value is the max of the type
   */
  isMax() {
    const u8a = this.toU8a().filter((b) => b === 255);
    return u8a.length === this.__internal__bitLength / 8;
  }
  /**
   * @description Returns a BigInt representation of the number
   */
  toBigInt() {
    return BigInt(this.toString());
  }
  /**
   * @description Returns the BN representation of the number. (Compatibility)
   */
  toBn() {
    return this;
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex(isLe = false) {
    return bnToHex(this, {
      bitLength: this.bitLength(),
      isLe,
      isNegative: !this.isUnsigned
    });
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(_isExpanded) {
    const rawType = this.toRawType();
    if (rawType === "Balance") {
      return this.isMax() ? "everything" : formatBalance(this, { decimals: this.registry.chainDecimals[0], withSi: true, withUnit: this.registry.chainTokens[0] });
    }
    const [, divisor] = FORMATTERS.find(([type]) => type === rawType) || [];
    return divisor ? toPercentage(this, divisor) : formatNumber(this);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON(onlyHex = false) {
    return onlyHex || this.__internal__bitLength > 128 || super.bitLength() > MAX_NUMBER_BITS ? this.toHex() : this.toNumber();
  }
  /**
   * @description Returns the value in a primitive form, either number when <= 52 bits, or string otherwise
   */
  toPrimitive() {
    return super.bitLength() > MAX_NUMBER_BITS ? this.toString() : this.toNumber();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return this instanceof this.registry.createClassUnsafe("Balance") ? "Balance" : `${this.isUnsigned ? "u" : "i"}${this.bitLength()}`;
  }
  /**
   * @description Returns the string representation of the value
   * @param base The base to use for the conversion
   */
  toString(base) {
    return super.toString(base);
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */
  toU8a(_isBare) {
    return bnToU8a(this, {
      bitLength: this.bitLength(),
      isLe: true,
      isNegative: !this.isUnsigned
    });
  }
}
function decodeCompact(registry, Type2, value) {
  if (isU8a(value)) {
    const [decodedLength, bn2] = (value[0] & 3) < 3 ? compactFromU8aLim(value) : compactFromU8a(value);
    return [new Type2(registry, bn2), decodedLength];
  } else if (value instanceof Compact) {
    const raw = value.unwrap();
    return raw instanceof Type2 ? [raw, 0] : [new Type2(registry, raw), 0];
  } else if (value instanceof Type2) {
    return [value, 0];
  }
  return [new Type2(registry, value), 0];
}
class Compact {
  constructor(registry, Type2, value = 0, { definition, setDefinition = identity$2 } = {}) {
    __publicField(this, "registry");
    __publicField(this, "createdAtHash");
    __publicField(this, "initialU8aLength");
    __publicField(this, "isStorageFallback");
    __publicField(this, "__internal__Type");
    __publicField(this, "__internal__raw");
    this.registry = registry;
    this.__internal__Type = definition || setDefinition(typeToConstructor(registry, Type2));
    const [raw, decodedLength] = decodeCompact(registry, this.__internal__Type, value);
    this.initialU8aLength = decodedLength;
    this.__internal__raw = raw;
  }
  static with(Type2) {
    let definition;
    const setDefinition = (d) => definition = d;
    return class extends Compact {
      constructor(registry, value) {
        super(registry, Type2, value, { definition, setDefinition });
      }
    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    return this.__internal__raw.isEmpty;
  }
  /**
   * @description Returns the number of bits in the value
   */
  bitLength() {
    return this.__internal__raw.bitLength();
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return this.__internal__raw.eq(other instanceof Compact ? other.__internal__raw : other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      outer: [this.toU8a()]
    };
  }
  /**
   * @description Returns a BigInt representation of the number
   */
  toBigInt() {
    return this.__internal__raw.toBigInt();
  }
  /**
   * @description Returns the BN representation of the number
   */
  toBn() {
    return this.__internal__raw.toBn();
  }
  /**
   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
   */
  toHex(isLe) {
    return this.__internal__raw.toHex(isLe);
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended) {
    return this.__internal__raw.toHuman(isExtended);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.__internal__raw.toJSON();
  }
  /**
   * @description Returns the number representation for the value
   */
  toNumber() {
    return this.__internal__raw.toNumber();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.__internal__raw.toPrimitive();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `Compact<${this.registry.getClassName(this.__internal__Type) || this.__internal__raw.toRawType()}>`;
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.__internal__raw.toString();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */
  toU8a(_isBare) {
    return compactToU8a(this.__internal__raw.toBn());
  }
  /**
   * @description Returns the embedded [[UInt]] or [[Moment]] value
   */
  unwrap() {
    return this.__internal__raw;
  }
}
class DoNotConstruct {
  constructor(registry, typeName = "DoNotConstruct") {
    __publicField(this, "registry");
    __publicField(this, "createdAtHash");
    __publicField(this, "isStorageFallback");
    __publicField(this, "__internal__neverError");
    this.registry = registry;
    this.__internal__neverError = new Error(`DoNotConstruct: Cannot construct unknown type ${typeName}`);
    throw this.__internal__neverError;
  }
  static with(typeName) {
    return class extends DoNotConstruct {
      constructor(registry) {
        super(registry, typeName);
      }
    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    throw this.__internal__neverError;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    throw this.__internal__neverError;
  }
  /**
   * @description Checks if the value is an empty value (always true)
   */
  get isEmpty() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  eq() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  inspect() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  toHex() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  toHuman() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  toJSON() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  toPrimitive() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  toRawType() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  toString() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  toU8a() {
    throw this.__internal__neverError;
  }
}
class Null {
  constructor(registry) {
    __publicField(this, "encodedLength", 0);
    __publicField(this, "isEmpty", true);
    __publicField(this, "registry");
    __publicField(this, "createdAtHash");
    __publicField(this, "initialU8aLength", 0);
    __publicField(this, "isStorageFallback");
    this.registry = registry;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    throw new Error(".hash is not implemented on Null");
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return other instanceof Null || isNull(other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {};
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return "0x";
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return null;
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return null;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Null";
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return "";
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */
  toU8a(_isBare) {
    return new Uint8Array();
  }
}
function isRustEnum$1(def) {
  const defValues = Object.values(def);
  if (defValues.some((v) => isNumber(v))) {
    if (!defValues.every((v) => isNumber(v) && v >= 0 && v <= 255)) {
      throw new Error("Invalid number-indexed enum definition");
    }
    return false;
  }
  return true;
}
function extractDef(registry, _def) {
  const def = {};
  let isBasic;
  let isIndexed;
  if (Array.isArray(_def)) {
    for (let i = 0, count = _def.length; i < count; i++) {
      def[_def[i]] = { Type: Null, index: i };
    }
    isBasic = true;
    isIndexed = false;
  } else if (isRustEnum$1(_def)) {
    const [Types, keys] = mapToTypeMap(registry, _def);
    for (let i = 0, count = keys.length; i < count; i++) {
      def[keys[i]] = { Type: Types[i], index: i };
    }
    isBasic = !Object.values(def).some(({ Type: Type2 }) => Type2 !== Null);
    isIndexed = false;
  } else {
    const entries = Object.entries(_def);
    for (let i = 0, count = entries.length; i < count; i++) {
      const [key, index] = entries[i];
      def[key] = { Type: Null, index };
    }
    isBasic = true;
    isIndexed = true;
  }
  return {
    def,
    isBasic,
    isIndexed
  };
}
function getEntryType(def, checkIdx) {
  const values = Object.values(def);
  for (let i = 0, count = values.length; i < count; i++) {
    const { Type: Type2, index } = values[i];
    if (index === checkIdx) {
      return Type2;
    }
  }
  throw new Error(`Unable to create Enum via index ${checkIdx}, in ${Object.keys(def).join(", ")}`);
}
function createFromU8a(registry, def, index, value) {
  const Type2 = getEntryType(def, index);
  return {
    index,
    value: new Type2(registry, value)
  };
}
function createFromValue(registry, def, index = 0, value) {
  const Type2 = getEntryType(def, index);
  return {
    index,
    value: value instanceof Type2 ? value : new Type2(registry, value)
  };
}
function decodeFromJSON(registry, def, key, value) {
  const keys = Object.keys(def).map((k) => k.toLowerCase());
  const keyLower = key.toLowerCase();
  const index = keys.indexOf(keyLower);
  if (index === -1) {
    throw new Error(`Cannot map Enum JSON, unable to find '${key}' in ${keys.join(", ")}`);
  }
  try {
    return createFromValue(registry, def, Object.values(def)[index].index, value);
  } catch (error2) {
    throw new Error(`Enum(${key}):: ${error2.message}`);
  }
}
function decodeEnum(registry, def, value, index) {
  if (isNumber(index)) {
    return createFromValue(registry, def, index, value);
  } else if (isU8a(value) || isHex(value)) {
    const u8a = u8aToU8a(value);
    if (u8a.length) {
      return createFromU8a(registry, def, u8a[0], u8a.subarray(1));
    }
  } else if (value instanceof Enum) {
    return createFromValue(registry, def, value.index, value.value);
  } else if (isNumber(value)) {
    return createFromValue(registry, def, value);
  } else if (isString(value)) {
    return decodeFromJSON(registry, def, value.toString());
  } else if (isObject$1(value)) {
    const key = Object.keys(value)[0];
    return decodeFromJSON(registry, def, key, value[key]);
  }
  return createFromValue(registry, def, Object.values(def)[0].index);
}
class Enum {
  constructor(registry, Types, value, index, { definition, setDefinition = identity$2 } = {}) {
    __publicField(this, "registry");
    __publicField(this, "createdAtHash");
    __publicField(this, "initialU8aLength");
    __publicField(this, "isStorageFallback");
    __publicField(this, "__internal__def");
    __publicField(this, "__internal__entryIndex");
    __publicField(this, "__internal__indexes");
    __publicField(this, "__internal__isBasic");
    __publicField(this, "__internal__isIndexed");
    __publicField(this, "__internal__raw");
    const { def, isBasic, isIndexed } = definition || setDefinition(extractDef(registry, Types));
    const decoded = isU8a(value) && value.length && !isNumber(index) ? createFromU8a(registry, def, value[0], value.subarray(1)) : decodeEnum(registry, def, value, index);
    this.registry = registry;
    this.__internal__def = def;
    this.__internal__isBasic = isBasic;
    this.__internal__isIndexed = isIndexed;
    this.__internal__indexes = Object.values(def).map(({ index: index2 }) => index2);
    this.__internal__entryIndex = this.__internal__indexes.indexOf(decoded.index);
    this.__internal__raw = decoded.value;
    if (this.__internal__raw.initialU8aLength) {
      this.initialU8aLength = 1 + this.__internal__raw.initialU8aLength;
    }
  }
  static with(Types) {
    var _a2;
    let definition;
    const setDefinition = (d) => definition = d;
    return _a2 = class extends Enum {
      constructor(registry, value, index) {
        super(registry, Types, value, index, { definition, setDefinition });
      }
    }, (() => {
      const keys = Array.isArray(Types) ? Types : Object.keys(Types);
      const count = keys.length;
      const asKeys = new Array(count);
      const isKeys = new Array(count);
      for (let i = 0; i < count; i++) {
        const name = stringPascalCase(keys[i]);
        asKeys[i] = `as${name}`;
        isKeys[i] = `is${name}`;
      }
      objectProperties(_a2.prototype, isKeys, (_23, i, self2) => self2.type === keys[i]);
      objectProperties(_a2.prototype, asKeys, (k, i, self2) => {
        if (self2.type !== keys[i]) {
          throw new Error(`Cannot convert '${self2.type}' via ${k}`);
        }
        return self2.value;
      });
    })(), _a2;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return 1 + this.__internal__raw.encodedLength;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description The index of the enum value
   */
  get index() {
    return this.__internal__indexes[this.__internal__entryIndex];
  }
  /**
   * @description The value of the enum
   */
  get inner() {
    return this.__internal__raw;
  }
  /**
   * @description true if this is a basic enum (no values)
   */
  get isBasic() {
    return this.__internal__isBasic;
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    return this.__internal__raw.isEmpty;
  }
  /**
   * @description Checks if the Enum points to a [[Null]] type
   */
  get isNone() {
    return this.__internal__raw instanceof Null;
  }
  /**
   * @description The available keys for this enum
   */
  get defIndexes() {
    return this.__internal__indexes;
  }
  /**
   * @description The available keys for this enum
   */
  get defKeys() {
    return Object.keys(this.__internal__def);
  }
  /**
   * @description The name of the type this enum value represents
   */
  get type() {
    return this.defKeys[this.__internal__entryIndex];
  }
  /**
   * @description The value of the enum
   */
  get value() {
    return this.__internal__raw;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    if (isU8a(other)) {
      return !this.toU8a().some((entry, index) => entry !== other[index]);
    } else if (isNumber(other)) {
      return this.toNumber() === other;
    } else if (this.__internal__isBasic && isString(other)) {
      return this.type === other;
    } else if (isHex(other)) {
      return this.toHex() === other;
    } else if (other instanceof Enum) {
      return this.index === other.index && this.value.eq(other.value);
    } else if (isObject$1(other)) {
      return this.value.eq(other[this.type]);
    }
    return this.value.eq(other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    if (this.__internal__isBasic) {
      return { outer: [new Uint8Array([this.index])] };
    }
    const { inner, outer = [] } = this.__internal__raw.inspect();
    return {
      inner,
      outer: [new Uint8Array([this.index]), ...outer]
    };
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended) {
    return this.__internal__isBasic || this.isNone ? this.type : { [this.type]: this.__internal__raw.toHuman(isExtended) };
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.__internal__isBasic ? this.type : { [stringCamelCase(this.type)]: this.__internal__raw.toJSON() };
  }
  /**
   * @description Returns the number representation for the value
   */
  toNumber() {
    return this.index;
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.__internal__isBasic ? this.type : { [stringCamelCase(this.type)]: this.__internal__raw.toPrimitive() };
  }
  /**
   * @description Returns a raw struct representation of the enum types
   */
  _toRawStruct() {
    if (this.__internal__isBasic) {
      return this.__internal__isIndexed ? this.defKeys.reduce((out, key, index) => {
        out[key] = this.__internal__indexes[index];
        return out;
      }, {}) : this.defKeys;
    }
    const entries = Object.entries(this.__internal__def);
    return typesToMap(this.registry, entries.reduce((out, [key, { Type: Type2 }], i) => {
      out[0][i] = Type2;
      out[1][i] = key;
      return out;
    }, [new Array(entries.length), new Array(entries.length)]));
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return stringify$1({ _enum: this._toRawStruct() });
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.isNone ? this.type : stringify$1(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    return isBare ? this.__internal__raw.toU8a(isBare) : u8aConcatStrict([
      new Uint8Array([this.index]),
      this.__internal__raw.toU8a(isBare)
    ]);
  }
}
class Int extends AbstractInt {
  constructor(registry, value = 0, bitLength) {
    super(registry, value, bitLength, true);
  }
  static with(bitLength, typeName) {
    return class extends Int {
      constructor(registry, value) {
        super(registry, value, bitLength);
      }
      toRawType() {
        return typeName || super.toRawType();
      }
    };
  }
}
class None extends Null {
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "None";
  }
}
function decodeOption(registry, Type2, value) {
  if (value instanceof Type2) {
    return value;
  } else if (value instanceof Option) {
    if (value.value instanceof Type2) {
      return value.value;
    } else if (value.isNone) {
      return new None(registry);
    }
    return new Type2(registry, value.value);
  } else if (isNull(value) || isUndefined(value) || value === "0x" || value instanceof None) {
    return new None(registry);
  } else if (isU8a(value)) {
    return !value.length || value[0] === 0 ? new None(registry) : new Type2(registry, value.subarray(1));
  }
  return new Type2(registry, value);
}
class Option {
  constructor(registry, typeName, value, { definition, setDefinition = identity$2 } = {}) {
    __publicField(this, "registry");
    __publicField(this, "createdAtHash");
    __publicField(this, "initialU8aLength");
    __publicField(this, "isStorageFallback");
    __publicField(this, "__internal__Type");
    __publicField(this, "__internal__raw");
    const Type2 = definition || setDefinition(typeToConstructor(registry, typeName));
    const decoded = isU8a(value) && value.length && !isCodec(value) ? value[0] === 0 ? new None(registry) : new Type2(registry, value.subarray(1)) : decodeOption(registry, Type2, value);
    this.registry = registry;
    this.__internal__Type = Type2;
    this.__internal__raw = decoded;
    if (decoded == null ? void 0 : decoded.initialU8aLength) {
      this.initialU8aLength = 1 + decoded.initialU8aLength;
    }
  }
  static with(Type2) {
    let definition;
    const setDefinition = (d) => {
      definition = d;
      return d;
    };
    return class extends Option {
      constructor(registry, value) {
        super(registry, Type2, value, { definition, setDefinition });
      }
    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return 1 + this.__internal__raw.encodedLength;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the Option has no value
   */
  get isEmpty() {
    return this.isNone;
  }
  /**
   * @description Checks if the Option has no value
   */
  get isNone() {
    return this.__internal__raw instanceof None;
  }
  /**
   * @description Checks if the Option has a value
   */
  get isSome() {
    return !this.isNone;
  }
  /**
   * @description The actual value for the Option
   */
  get value() {
    return this.__internal__raw;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    if (other instanceof Option) {
      return this.isSome === other.isSome && this.value.eq(other.value);
    }
    return this.value.eq(other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    if (this.isNone) {
      return { outer: [new Uint8Array([0])] };
    }
    const { inner, outer = [] } = this.__internal__raw.inspect();
    return {
      inner,
      outer: [new Uint8Array([1]), ...outer]
    };
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return this.isNone ? "0x" : u8aToHex(this.toU8a().subarray(1));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended) {
    return this.__internal__raw.toHuman(isExtended);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.isNone ? null : this.__internal__raw.toJSON();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.isNone ? null : this.__internal__raw.toPrimitive();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType(isBare) {
    const wrapped = this.registry.getClassName(this.__internal__Type) || new this.__internal__Type(this.registry).toRawType();
    return isBare ? wrapped : `Option<${wrapped}>`;
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.__internal__raw.toString();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    if (isBare) {
      return this.__internal__raw.toU8a(true);
    }
    const u8a = new Uint8Array(this.encodedLength);
    if (this.isSome) {
      u8a.set([1]);
      u8a.set(this.__internal__raw.toU8a(), 1);
    }
    return u8a;
  }
  /**
   * @description Returns the value that the Option represents (if available), throws if null
   */
  unwrap() {
    if (this.isNone) {
      throw new Error("Option: unwrapping a None value");
    }
    return this.__internal__raw;
  }
  /**
   * @description Returns the value that the Option represents (if available) or defaultValue if none
   * @param defaultValue The value to return if the option isNone
   */
  unwrapOr(defaultValue) {
    return this.isSome ? this.unwrap() : defaultValue;
  }
  /**
   * @description Returns the value that the Option represents (if available) or defaultValue if none
   * @param defaultValue The value to return if the option isNone
   */
  unwrapOrDefault() {
    return this.isSome ? this.unwrap() : new this.__internal__Type(this.registry);
  }
}
let Result$1 = class Result extends Enum {
  constructor(registry, Ok, Err, value) {
    super(registry, { Ok, Err }, value);
  }
  static with(Types) {
    return class extends Result {
      constructor(registry, value) {
        super(registry, Types.Ok, Types.Err, value);
      }
    };
  }
  /**
   * @description Returns the wrapper Err value (if isErr)
   */
  get asErr() {
    if (!this.isErr) {
      throw new Error("Cannot extract Err value from Ok result, check isErr first");
    }
    return this.value;
  }
  /**
   * @description Returns the wrapper Ok value (if isOk)
   */
  get asOk() {
    if (!this.isOk) {
      throw new Error("Cannot extract Ok value from Err result, check isOk first");
    }
    return this.value;
  }
  /**
   * @description Checks if the Result has no value
   */
  get isEmpty() {
    return this.isOk && this.value.isEmpty;
  }
  /**
   * @description Checks if the Result wraps an Err value
   */
  get isErr() {
    return !this.isOk;
  }
  /**
   * @description Checks if the Result wraps an Ok value
   */
  get isOk() {
    return this.index === 0;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    const Types = this._toRawStruct();
    return `Result<${Types.Ok},${Types.Err}>`;
  }
};
function decodeTuple(registry, result, value, Classes) {
  if (Array.isArray(value)) {
    const Types = Classes[0];
    for (let i = 0, count = Types.length; i < count; i++) {
      try {
        const entry = value == null ? void 0 : value[i];
        result[i] = entry instanceof Types[i] ? entry : new Types[i](registry, entry);
      } catch (error2) {
        throw new Error(`Tuple: failed on ${i}:: ${error2.message}`);
      }
    }
    return [result, 0];
  } else if (isHex(value)) {
    return decodeU8a$6(registry, result, u8aToU8a(value), Classes);
  } else if (!value || !result.length) {
    const Types = Classes[0];
    for (let i = 0, count = Types.length; i < count; i++) {
      result[i] = new Types[i](registry);
    }
    return [result, 0];
  }
  throw new Error(`Expected array input to Tuple decoding, found ${typeof value}: ${stringify$1(value)}`);
}
class Tuple extends AbstractArray {
  constructor(registry, Types, value, { definition, setDefinition = identity$2 } = {}) {
    const Classes = definition || setDefinition(Array.isArray(Types) ? [typesToConstructors(registry, Types), []] : isFunction$1(Types) || isString(Types) ? [[typeToConstructor(registry, Types)], []] : mapToTypeMap(registry, Types));
    super(registry, Classes[0].length);
    __publicField(this, "__internal__Types");
    this.initialU8aLength = (isU8a(value) ? decodeU8a$6(registry, this, value, Classes) : decodeTuple(registry, this, value, Classes))[1];
    this.__internal__Types = Classes;
  }
  static with(Types) {
    let definition;
    const setDefinition = (d) => definition = d;
    return class extends Tuple {
      constructor(registry, value) {
        super(registry, Types, value, { definition, setDefinition });
      }
    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    let total = 0;
    for (let i = 0, count = this.length; i < count; i++) {
      total += this[i].encodedLength;
    }
    return total;
  }
  /**
   * @description The types definition of the tuple
   */
  get Types() {
    return this.__internal__Types[1].length ? this.__internal__Types[1] : this.__internal__Types[0].map((T) => new T(this.registry).toRawType());
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      inner: this.inspectInner()
    };
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    const types2 = this.__internal__Types[0].map((T) => this.registry.getClassName(T) || new T(this.registry).toRawType());
    return `(${types2.join(",")})`;
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return stringify$1(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    return u8aConcatStrict(this.toU8aInner(isBare));
  }
}
class UInt extends AbstractInt {
  static with(bitLength, typeName) {
    return class extends UInt {
      constructor(registry, value) {
        super(registry, value, bitLength);
      }
      toRawType() {
        return typeName || super.toRawType();
      }
    };
  }
}
const MAX_LENGTH$1 = 64 * 1024;
const l$d = logger("Vec");
function decodeVecLength(value) {
  if (Array.isArray(value)) {
    return [value, value.length, 0];
  } else if (isU8a(value) || isHex(value)) {
    const u8a = u8aToU8a(value);
    const [startAt, length2] = compactFromU8aLim(u8a);
    if (length2 > MAX_LENGTH$1) {
      throw new Error(`Vec length ${length2.toString()} exceeds ${MAX_LENGTH$1}`);
    }
    return [u8a, length2, startAt];
  } else if (!value) {
    return [null, 0, 0];
  }
  throw new Error(`Expected array/hex input to Vec<*> decoding, found ${typeof value}: ${stringify$1(value)}`);
}
function decodeVec(registry, result, value, startAt, Type2) {
  if (Array.isArray(value)) {
    const count = result.length;
    for (let i = 0; i < count; i++) {
      const entry = value[i];
      try {
        result[i] = entry instanceof Type2 ? entry : new Type2(registry, entry);
      } catch (error2) {
        l$d.error(`Unable to decode on index ${i}`, error2.message);
        throw error2;
      }
    }
    return [0, 0];
  } else if (!value) {
    return [0, 0];
  }
  return decodeU8aVec(registry, result, u8aToU8a(value), startAt, Type2);
}
class Vec extends AbstractArray {
  constructor(registry, Type2, value = [], { definition, setDefinition = identity$2 } = {}) {
    const [decodeFrom, length2, startAt] = decodeVecLength(value);
    super(registry, length2);
    __publicField(this, "__internal__Type");
    this.__internal__Type = definition || setDefinition(typeToConstructor(registry, Type2));
    this.initialU8aLength = (isU8a(decodeFrom) ? decodeU8aVec(registry, this, decodeFrom, startAt, this.__internal__Type) : decodeVec(registry, this, decodeFrom, startAt, this.__internal__Type))[0];
  }
  static with(Type2) {
    let definition;
    const setDefinition = (d) => definition = d;
    return class extends Vec {
      constructor(registry, value) {
        super(registry, Type2, value, { definition, setDefinition });
      }
    };
  }
  /**
   * @description The type for the items
   */
  get Type() {
    return this.__internal__Type.name;
  }
  /**
   * @description Finds the index of the value in the array
   */
  indexOf(other) {
    const check = other instanceof this.__internal__Type ? other : new this.__internal__Type(this.registry, other);
    for (let i = 0, count = this.length; i < count; i++) {
      if (check.eq(this[i])) {
        return i;
      }
    }
    return -1;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `Vec<${this.registry.getClassName(this.__internal__Type) || new this.__internal__Type(this.registry).toRawType()}>`;
  }
}
class VecFixed extends AbstractArray {
  constructor(registry, Type2, length2, value = [], { definition, setDefinition = identity$2 } = {}) {
    super(registry, length2);
    __publicField(this, "__internal__Type");
    this.__internal__Type = definition || setDefinition(typeToConstructor(registry, Type2));
    this.initialU8aLength = (isU8a(value) ? decodeU8aVec(registry, this, value, 0, this.__internal__Type) : decodeVec(registry, this, value, 0, this.__internal__Type))[1];
  }
  static with(Type2, length2) {
    let definition;
    const setDefinition = (d) => definition = d;
    return class extends VecFixed {
      constructor(registry, value) {
        super(registry, Type2, length2, value, { definition, setDefinition });
      }
    };
  }
  /**
   * @description The type for the items
   */
  get Type() {
    return new this.__internal__Type(this.registry).toRawType();
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    let total = 0;
    for (let i = 0, count = this.length; i < count; i++) {
      total += this[i].encodedLength;
    }
    return total;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      inner: this.inspectInner()
    };
  }
  toU8a() {
    const encoded = this.toU8aInner();
    return encoded.length ? u8aConcatStrict(encoded) : new Uint8Array([]);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `[${this.Type};${this.length}]`;
  }
}
function decodeBitVecU8a(value) {
  if (!(value == null ? void 0 : value.length)) {
    return [0, new Uint8Array()];
  }
  const [offset, length2] = compactFromU8aLim(value);
  const total = offset + Math.ceil(length2 / 8);
  if (total > value.length) {
    throw new Error(`BitVec: required length less than remainder, expected at least ${total}, found ${value.length}`);
  }
  return [length2, value.subarray(offset, total)];
}
function decodeBitVec(value) {
  if (Array.isArray(value) || isString(value)) {
    const u8a = u8aToU8a(value);
    return [u8a.length / 8, u8a];
  }
  return decodeBitVecU8a(value);
}
class BitVec extends Raw {
  // In lieu of having the Msb/Lsb identifiers passed through, we default to assuming
  // we are dealing with Lsb, which is the default (as of writing) BitVec format used
  // in the Polkadot code (this only affects the toHuman displays)
  constructor(registry, value, isMsb = false) {
    const [decodedLength, u8a] = decodeBitVec(value);
    super(registry, u8a);
    __publicField(this, "__internal__decodedLength");
    __publicField(this, "__internal__isMsb");
    this.__internal__decodedLength = decodedLength;
    this.__internal__isMsb = isMsb;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.length + compactToU8a(this.__internal__decodedLength).length;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      outer: [compactToU8a(this.__internal__decodedLength), super.toU8a()]
    };
  }
  /**
   * @description Creates a boolean array of the bit values
   */
  toBoolArray() {
    const map2 = [...this.toU8a(true)].map((v) => [
      !!(v & 128),
      !!(v & 64),
      !!(v & 32),
      !!(v & 16),
      !!(v & 8),
      !!(v & 4),
      !!(v & 2),
      !!(v & 1)
    ]);
    const count = map2.length;
    const result = new Array(8 * count);
    for (let i = 0; i < count; i++) {
      const off = i * 8;
      const v = map2[i];
      for (let j = 0; j < 8; j++) {
        result[off + j] = this.__internal__isMsb ? v[j] : v[7 - j];
      }
    }
    return result;
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return `0b${[...this.toU8a(true)].map((d) => `00000000${d.toString(2)}`.slice(-8)).map((s) => this.__internal__isMsb ? s : s.split("").reverse().join("")).join("_")}`;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "BitVec";
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    const bitVec = super.toU8a(isBare);
    return isBare ? bitVec : u8aConcatStrict([compactToU8a(this.__internal__decodedLength), bitVec]);
  }
}
const l$c = logger("Map");
function decodeMapFromU8a(registry, KeyClass, ValClass, u8a) {
  const output3 = /* @__PURE__ */ new Map();
  const [offset, count] = compactFromU8aLim(u8a);
  const types2 = [];
  for (let i = 0; i < count; i++) {
    types2.push(KeyClass, ValClass);
  }
  const [values, decodedLength] = decodeU8a$6(registry, new Array(types2.length), u8a.subarray(offset), [types2, []]);
  for (let i = 0, count2 = values.length; i < count2; i += 2) {
    output3.set(values[i], values[i + 1]);
  }
  return [KeyClass, ValClass, output3, offset + decodedLength];
}
function decodeMapFromMap(registry, KeyClass, ValClass, value) {
  const output3 = /* @__PURE__ */ new Map();
  for (const [key, val] of value.entries()) {
    const isComplex = KeyClass.prototype instanceof AbstractArray || KeyClass.prototype instanceof Struct || KeyClass.prototype instanceof Enum;
    try {
      output3.set(key instanceof KeyClass ? key : new KeyClass(registry, isComplex && typeof key === "string" ? JSON.parse(key) : key), val instanceof ValClass ? val : new ValClass(registry, val));
    } catch (error2) {
      l$c.error("Failed to decode key or value:", error2.message);
      throw error2;
    }
  }
  return [KeyClass, ValClass, output3, 0];
}
function decodeMap(registry, keyType, valType, value) {
  const KeyClass = typeToConstructor(registry, keyType);
  const ValClass = typeToConstructor(registry, valType);
  if (!value) {
    return [KeyClass, ValClass, /* @__PURE__ */ new Map(), 0];
  } else if (isU8a(value) || isHex(value)) {
    return decodeMapFromU8a(registry, KeyClass, ValClass, u8aToU8a(value));
  } else if (value instanceof Map) {
    return decodeMapFromMap(registry, KeyClass, ValClass, value);
  } else if (isObject$1(value)) {
    return decodeMapFromMap(registry, KeyClass, ValClass, new Map(Object.entries(value)));
  }
  throw new Error("Map: cannot decode type");
}
class CodecMap extends Map {
  constructor(registry, keyType, valType, rawValue, type = "HashMap") {
    const [KeyClass, ValClass, decoded, decodedLength] = decodeMap(registry, keyType, valType, rawValue);
    super(type === "BTreeMap" ? sortMap(decoded) : decoded);
    __publicField(this, "registry");
    __publicField(this, "createdAtHash");
    __publicField(this, "initialU8aLength");
    __publicField(this, "isStorageFallback");
    __publicField(this, "__internal__KeyClass");
    __publicField(this, "__internal__ValClass");
    __publicField(this, "__internal__type");
    this.registry = registry;
    this.initialU8aLength = decodedLength;
    this.__internal__KeyClass = KeyClass;
    this.__internal__ValClass = ValClass;
    this.__internal__type = type;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    let len = compactToU8a(this.size).length;
    for (const [k, v] of this.entries()) {
      len += k.encodedLength + v.encodedLength;
    }
    return len;
  }
  /**
   * @description Returns a hash of the value
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    return this.size === 0;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return compareMap(this, other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    const inner = [];
    for (const [k, v] of this.entries()) {
      inner.push(k.inspect());
      inner.push(v.inspect());
    }
    return {
      inner,
      outer: [compactToU8a(this.size)]
    };
  }
  /**
   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
   */
  toHex() {
    return u8aToHex(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended) {
    const json = {};
    for (const [k, v] of this.entries()) {
      json[k instanceof Raw && k.isAscii ? k.toUtf8() : k.toString()] = v.toHuman(isExtended);
    }
    return json;
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    const json = {};
    for (const [k, v] of this.entries()) {
      json[k.toString()] = v.toJSON();
    }
    return json;
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    const json = {};
    for (const [k, v] of this.entries()) {
      json[k instanceof Raw && k.isAscii ? k.toUtf8() : k.toString()] = v.toPrimitive();
    }
    return json;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `${this.__internal__type}<${this.registry.getClassName(this.__internal__KeyClass) || new this.__internal__KeyClass(this.registry).toRawType()},${this.registry.getClassName(this.__internal__ValClass) || new this.__internal__ValClass(this.registry).toRawType()}>`;
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return stringify$1(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    const encoded = [];
    if (!isBare) {
      encoded.push(compactToU8a(this.size));
    }
    for (const [k, v] of this.entries()) {
      encoded.push(k.toU8a(isBare), v.toU8a(isBare));
    }
    return u8aConcatStrict(encoded);
  }
}
class BTreeMap extends CodecMap {
  static with(keyType, valType) {
    return class extends BTreeMap {
      constructor(registry, value) {
        super(registry, keyType, valType, value, "BTreeMap");
      }
    };
  }
}
const l$b = logger("BTreeSet");
function decodeSetFromU8a(registry, ValClass, u8a) {
  const output3 = /* @__PURE__ */ new Set();
  const [offset, count] = compactFromU8aLim(u8a);
  const result = new Array(count);
  const [decodedLength] = decodeU8aVec(registry, result, u8a, offset, ValClass);
  for (let i = 0; i < count; i++) {
    output3.add(result[i]);
  }
  return [ValClass, output3, decodedLength];
}
function decodeSetFromSet(registry, ValClass, value) {
  const output3 = /* @__PURE__ */ new Set();
  value.forEach((val) => {
    try {
      output3.add(val instanceof ValClass ? val : new ValClass(registry, val));
    } catch (error2) {
      l$b.error("Failed to decode key or value:", error2.message);
      throw error2;
    }
  });
  return [ValClass, output3, 0];
}
function decodeSet(registry, valType, value) {
  const ValClass = typeToConstructor(registry, valType);
  if (!value) {
    return [ValClass, /* @__PURE__ */ new Set(), 0];
  } else if (isU8a(value) || isHex(value)) {
    return decodeSetFromU8a(registry, ValClass, u8aToU8a(value));
  } else if (Array.isArray(value) || value instanceof Set) {
    return decodeSetFromSet(registry, ValClass, value);
  }
  throw new Error("BTreeSet: cannot decode type");
}
class BTreeSet extends Set {
  constructor(registry, valType, rawValue) {
    const [ValClass, values, decodedLength] = decodeSet(registry, valType, rawValue);
    super(sortSet(values));
    __publicField(this, "registry");
    __publicField(this, "createdAtHash");
    __publicField(this, "initialU8aLength");
    __publicField(this, "isStorageFallback");
    __publicField(this, "__internal__ValClass");
    this.registry = registry;
    this.initialU8aLength = decodedLength;
    this.__internal__ValClass = ValClass;
  }
  static with(valType) {
    return class extends BTreeSet {
      constructor(registry, value) {
        super(registry, valType, value);
      }
    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    let len = compactToU8a(this.size).length;
    for (const v of this.values()) {
      len += v.encodedLength;
    }
    return len;
  }
  /**
   * @description Returns a hash of the value
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    return this.size === 0;
  }
  /**
   * @description The actual set values as a string[]
   */
  get strings() {
    return [...super.values()].map((v) => v.toString());
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return compareSet(this, other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    const inner = [];
    for (const v of this.values()) {
      inner.push(v.inspect());
    }
    return {
      inner,
      outer: [compactToU8a(this.size)]
    };
  }
  /**
   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
   */
  toHex() {
    return u8aToHex(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended) {
    const json = [];
    for (const v of this.values()) {
      json.push(v.toHuman(isExtended));
    }
    return json;
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    const json = [];
    for (const v of this.values()) {
      json.push(v.toJSON());
    }
    return json;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `BTreeSet<${this.registry.getClassName(this.__internal__ValClass) || new this.__internal__ValClass(this.registry).toRawType()}>`;
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    const json = [];
    for (const v of this.values()) {
      json.push(v.toPrimitive());
    }
    return json;
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return stringify$1(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    const encoded = [];
    if (!isBare) {
      encoded.push(compactToU8a(this.size));
    }
    for (const v of this.values()) {
      encoded.push(v.toU8a(isBare));
    }
    return u8aConcatStrict(encoded);
  }
}
const MAX_LENGTH = 10 * 1024 * 1024;
function decodeBytesU8a(value) {
  if (!value.length) {
    return [new Uint8Array(), 0];
  }
  const [offset, length2] = compactFromU8aLim(value);
  const total = offset + length2;
  if (length2 > MAX_LENGTH) {
    throw new Error(`Bytes length ${length2.toString()} exceeds ${MAX_LENGTH}`);
  } else if (total > value.length) {
    throw new Error(`Bytes: required length less than remainder, expected at least ${total}, found ${value.length}`);
  }
  return [value.subarray(offset, total), total];
}
class Bytes extends Raw {
  constructor(registry, value) {
    const [u8a, decodedLength] = isU8a(value) && !(value instanceof Raw) ? decodeBytesU8a(value) : Array.isArray(value) || isString(value) ? [u8aToU8a(value), 0] : [value, 0];
    super(registry, u8a, decodedLength);
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.length + compactToU8a(this.length).length;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect(isBare) {
    const clength = compactToU8a(this.length);
    return {
      outer: isBare ? [super.toU8a()] : this.length ? [clength, super.toU8a()] : [clength]
    };
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Bytes";
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    return isBare ? super.toU8a(isBare) : compactAddLength(this);
  }
}
class HashMap extends CodecMap {
  static with(keyType, valType) {
    return class extends HashMap {
      constructor(registry, value) {
        super(registry, keyType, valType, value);
      }
    };
  }
}
function decodeU8a$5(registry, value) {
  return value[0] === 0 ? null : new bool(registry, value[0] === 1);
}
class OptionBool extends Option {
  constructor(registry, value) {
    super(registry, bool, isU8a(value) || isHex(value) ? decodeU8a$5(registry, u8aToU8a(value)) : value);
    this.initialU8aLength = 1;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return 1 | 0;
  }
  /**
   * @description Checks if the value is an empty value (always false)
   */
  get isFalse() {
    return this.isSome ? !this.value.valueOf() : false;
  }
  /**
   * @description Checks if the value is an empty value (always false)
   */
  get isTrue() {
    return this.isSome ? this.value.valueOf() : false;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return { outer: [this.toU8a()] };
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType(isBare) {
    return isBare ? "bool" : "Option<bool>";
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    if (isBare) {
      return super.toU8a(true);
    }
    return this.isSome ? new Uint8Array([this.isTrue ? 1 : 2]) : new Uint8Array([0]);
  }
}
class Range extends Tuple {
  constructor(registry, Type2, value, { rangeName = "Range" } = {}) {
    super(registry, [Type2, Type2], value);
    __publicField(this, "__internal__rangeName");
    this.__internal__rangeName = rangeName;
  }
  static with(Type2) {
    return class extends Range {
      constructor(registry, value) {
        super(registry, Type2, value);
      }
    };
  }
  /**
   * @description Returns the starting range value
   */
  get start() {
    return this[0];
  }
  /**
   * @description Returns the ending range value
   */
  get end() {
    return this[1];
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `${this.__internal__rangeName}<${this.start.toRawType()}>`;
  }
}
class RangeInclusive extends Range {
  constructor(registry, Type2, value) {
    super(registry, Type2, value, { rangeName: "RangeInclusive" });
  }
  static with(Type2) {
    return class extends RangeInclusive {
      constructor(registry, value) {
        super(registry, Type2, value);
      }
    };
  }
}
class Type extends Text {
  constructor(registry, value = "") {
    super(registry, value);
    this.setOverride(sanitize(this.toString()));
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Type";
  }
}
function decodeU8aFixed(value, bitLength) {
  const u8a = u8aToU8a(value);
  const byteLength = bitLength / 8;
  if (!u8a.length) {
    return [new Uint8Array(byteLength), 0];
  }
  if (isU8a(value) ? u8a.length < byteLength : u8a.length !== byteLength) {
    throw new Error(`Expected input with ${byteLength} bytes (${bitLength} bits), found ${u8a.length} bytes`);
  }
  return [u8a.subarray(0, byteLength), byteLength];
}
class U8aFixed extends Raw {
  constructor(registry, value = new Uint8Array(), bitLength = 256) {
    const [u8a, decodedLength] = decodeU8aFixed(value, bitLength);
    super(registry, u8a, decodedLength);
  }
  static with(bitLength, typeName) {
    return class extends U8aFixed {
      constructor(registry, value) {
        super(registry, value, bitLength);
      }
      toRawType() {
        return typeName || super.toRawType();
      }
    };
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `[u8;${this.length}]`;
  }
}
function decodeRaw(registry, typeName, value) {
  const Type2 = typeToConstructor(registry, typeName);
  if (isU8a(value) || isHex(value)) {
    try {
      const [, u8a] = isHex(value) ? [0, u8aToU8a(value)] : value instanceof Raw ? [0, value.subarray()] : compactStripLength(value);
      return [Type2, new Type2(registry, u8a), value];
    } catch {
      return [Type2, null, value];
    }
  }
  const instance2 = new Type2(registry, value);
  return [Type2, instance2, compactAddLength(instance2.toU8a())];
}
class WrapperKeepOpaque extends Bytes {
  constructor(registry, typeName, value, { opaqueName = "WrapperKeepOpaque" } = {}) {
    const [Type2, decoded, u8a] = decodeRaw(registry, typeName, value);
    super(registry, u8a);
    __publicField(this, "__internal__Type");
    __publicField(this, "__internal__decoded");
    __publicField(this, "__internal__opaqueName");
    this.__internal__Type = Type2;
    this.__internal__decoded = decoded;
    this.__internal__opaqueName = opaqueName;
  }
  static with(Type2) {
    return class extends WrapperKeepOpaque {
      constructor(registry, value) {
        super(registry, Type2, value);
      }
    };
  }
  /**
   * @description Checks if the wrapper is decodable
   */
  get isDecoded() {
    return !!this.__internal__decoded;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return this.__internal__decoded ? {
      inner: [this.__internal__decoded.inspect()],
      outer: [compactToU8a(this.length)]
    } : {
      outer: [compactToU8a(this.length), this.toU8a(true)]
    };
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended) {
    return this.__internal__decoded ? this.__internal__decoded.toHuman(isExtended) : super.toHuman();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.__internal__decoded ? this.__internal__decoded.toPrimitive() : super.toPrimitive();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `${this.__internal__opaqueName}<${this.registry.getClassName(this.__internal__Type) || (this.__internal__decoded ? this.__internal__decoded.toRawType() : new this.__internal__Type(this.registry).toRawType())}>`;
  }
  /**
   * @description Converts the Object to to a string (either decoded or bytes)
   */
  toString() {
    return this.__internal__decoded ? this.__internal__decoded.toString() : super.toString();
  }
  /**
   * @description Returns the decoded that the WrapperKeepOpaque represents (if available), throws if non-decodable
   */
  unwrap() {
    if (!this.__internal__decoded) {
      throw new Error(`${this.__internal__opaqueName}: unwrapping an undecodable value`);
    }
    return this.__internal__decoded;
  }
}
class WrapperOpaque extends WrapperKeepOpaque {
  constructor(registry, typeName, value) {
    super(registry, typeName, value, { opaqueName: "WrapperOpaque" });
  }
  static with(Type2) {
    return class extends WrapperOpaque {
      constructor(registry, value) {
        super(registry, Type2, value);
      }
    };
  }
  /**
   * @description The inner value for this wrapper, in all cases it _should_ be decodable (unlike KeepOpaque)
   */
  get inner() {
    return this.unwrap();
  }
}
class f32 extends Float.with(32) {
  constructor() {
    super(...arguments);
    // NOTE without this, we cannot properly determine extensions
    __publicField(this, "__FloatType", "f32");
  }
}
class f64 extends Float.with(64) {
  constructor() {
    super(...arguments);
    // NOTE without this, we cannot properly determine extensions
    __publicField(this, "__FloatType", "f64");
  }
}
class i8 extends Int.with(8) {
  constructor() {
    super(...arguments);
    // NOTE without this, we cannot properly determine extensions
    __publicField(this, "__IntType", "i8");
  }
}
class i16 extends Int.with(16) {
  constructor() {
    super(...arguments);
    // NOTE without this, we cannot properly determine extensions
    __publicField(this, "__IntType", "i16");
  }
}
class i32 extends Int.with(32) {
  constructor() {
    super(...arguments);
    // NOTE without this, we cannot properly determine extensions
    __publicField(this, "__IntType", "i32");
  }
}
class i64 extends Int.with(64) {
  constructor() {
    super(...arguments);
    // NOTE without this, we cannot properly determine extensions
    __publicField(this, "__IntType", "i64");
  }
}
class i128 extends Int.with(128) {
  constructor() {
    super(...arguments);
    // NOTE without this, we cannot properly determine extensions
    __publicField(this, "__IntType", "i128");
  }
}
class i256 extends Int.with(256) {
  constructor() {
    super(...arguments);
    // NOTE without this, we cannot properly determine extensions
    __publicField(this, "__IntType", "i256");
  }
}
class isize extends i32 {
  constructor(registry, value) {
    super(registry, value);
    throw new Error("The `isize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally i64) and WASM (always i32) code. Use one of the `i32` or `i64` types explicitly.");
  }
}
let u8$1 = class u8 extends UInt.with(8) {
  constructor() {
    super(...arguments);
    // NOTE without this, we cannot properly determine extensions
    __publicField(this, "__UIntType", "u8");
  }
};
let u16$1 = class u16 extends UInt.with(16) {
  constructor() {
    super(...arguments);
    // NOTE without this, we cannot properly determine extensions
    __publicField(this, "__UIntType", "u16");
  }
};
let u32$2 = class u32 extends UInt.with(32) {
  constructor() {
    super(...arguments);
    // NOTE without this, we cannot properly determine extensions
    __publicField(this, "__UIntType", "u32");
  }
};
let u64$2 = class u64 extends UInt.with(64) {
  constructor() {
    super(...arguments);
    // NOTE without this, we cannot properly determine extensions
    __publicField(this, "__UIntType", "u64");
  }
};
class u128 extends UInt.with(128) {
  constructor() {
    super(...arguments);
    // NOTE without this, we cannot properly determine extensions
    __publicField(this, "__UIntType", "u128");
  }
}
class u256 extends UInt.with(256) {
  constructor() {
    super(...arguments);
    // NOTE without this, we cannot properly determine extensions
    __publicField(this, "__UIntType", "u256");
  }
}
class usize extends u32$2 {
  constructor(registry, value) {
    super(registry, value);
    throw new Error("The `usize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally u64) and WASM (always u32) code. Use one of the `u32` or `u64` types explicitly.");
  }
}
function typeSplit(type) {
  const result = [];
  let c = 0;
  let f = 0;
  let s = 0;
  let t = 0;
  let start = 0;
  for (let i = 0, count = type.length; i < count; i++) {
    switch (type[i]) {
      case ",": {
        if (!(c || f || s || t)) {
          result.push(type.substring(start, i).trim());
          start = i + 1;
        }
        break;
      }
      case "<":
        c++;
        break;
      case ">":
        c--;
        break;
      case "[":
        f++;
        break;
      case "]":
        f--;
        break;
      case "{":
        s++;
        break;
      case "}":
        s--;
        break;
      case "(":
        t++;
        break;
      case ")":
        t--;
        break;
    }
  }
  if (c || f || s || t) {
    throw new Error(`Invalid definition (missing terminators) found in ${type}`);
  }
  result.push(type.substring(start, type.length).trim());
  return result;
}
const KNOWN_INTERNALS = ["_alias", "_fallback"];
function getTypeString(typeOrObj) {
  return isString(typeOrObj) ? typeOrObj.toString() : stringify$1(typeOrObj);
}
function isRustEnum(details) {
  const values = Object.values(details);
  if (values.some((v) => isNumber(v))) {
    if (!values.every((v) => isNumber(v) && v >= 0 && v <= 255)) {
      throw new Error("Invalid number-indexed enum definition");
    }
    return false;
  }
  return true;
}
function _decodeEnum(value, details, count, fallbackType) {
  value.info = TypeDefInfo.Enum;
  value.fallbackType = fallbackType;
  if (Array.isArray(details)) {
    value.sub = details.map((name, index) => ({
      index,
      info: TypeDefInfo.Plain,
      name,
      type: "Null"
    }));
  } else if (isRustEnum(details)) {
    value.sub = Object.entries(details).map(([name, typeOrObj], index) => objectSpread({}, getTypeDef(getTypeString(typeOrObj || "Null"), { name }, count), { index }));
  } else {
    value.sub = Object.entries(details).map(([name, index]) => ({
      index,
      info: TypeDefInfo.Plain,
      name,
      type: "Null"
    }));
  }
  return value;
}
function _decodeSet(value, details, fallbackType) {
  value.info = TypeDefInfo.Set;
  value.fallbackType = fallbackType;
  value.length = details._bitLength;
  value.sub = Object.entries(details).filter(([name]) => !name.startsWith("_")).map(([name, index]) => ({
    index,
    info: TypeDefInfo.Plain,
    name,
    type: "Null"
  }));
  return value;
}
function _decodeStruct(value, type, _23, count) {
  const parsed = JSON.parse(type);
  const keys = Object.keys(parsed);
  if (parsed._enum) {
    return _decodeEnum(value, parsed._enum, count, parsed._fallback);
  } else if (parsed._set) {
    return _decodeSet(value, parsed._set, parsed._fallback);
  }
  value.alias = parsed._alias ? new Map(Object.entries(parsed._alias)) : void 0;
  value.fallbackType = parsed._fallback;
  value.sub = keys.filter((name) => !KNOWN_INTERNALS.includes(name)).map((name) => getTypeDef(getTypeString(parsed[name]), { name }, count));
  return value;
}
function _decodeFixedVec(value, type, _23, count) {
  const max2 = type.length - 1;
  let index = -1;
  let inner = 0;
  for (let i = 1; i < max2 && index === -1; i++) {
    switch (type[i]) {
      case ";": {
        if (inner === 0) {
          index = i;
        }
        break;
      }
      case "[":
      case "(":
      case "<":
        inner++;
        break;
      case "]":
      case ")":
      case ">":
        inner--;
        break;
    }
  }
  if (index === -1) {
    throw new Error(`${type}: Unable to extract location of ';'`);
  }
  const vecType = type.substring(1, index);
  const [strLength, displayName] = type.substring(index + 1, max2).split(";");
  const length2 = parseInt(strLength.trim(), 10);
  if (length2 > 2048) {
    throw new Error(`${type}: Only support for [Type; <length>], where length <= 2048`);
  }
  value.displayName = displayName;
  value.length = length2;
  value.sub = getTypeDef(vecType, {}, count);
  return value;
}
function _decodeTuple(value, _23, subType, count) {
  value.sub = subType.length === 0 ? [] : typeSplit(subType).map((inner) => getTypeDef(inner, {}, count));
  return value;
}
function _decodeAnyInt(value, type, _23, clazz) {
  const [strLength, displayName] = type.substring(clazz.length + 1, type.length - 1).split(",");
  const length2 = parseInt(strLength.trim(), 10);
  if (length2 > 8192 || length2 % 8) {
    throw new Error(`${type}: Only support for ${clazz}<bitLength>, where length <= 8192 and a power of 8, found ${length2}`);
  }
  value.displayName = displayName;
  value.length = length2;
  return value;
}
function _decodeInt(value, type, subType) {
  return _decodeAnyInt(value, type, subType, "Int");
}
function _decodeUInt(value, type, subType) {
  return _decodeAnyInt(value, type, subType, "UInt");
}
function _decodeDoNotConstruct(value, type, _23) {
  const NAME_LENGTH = "DoNotConstruct".length;
  value.displayName = type.substring(NAME_LENGTH + 1, type.length - 1);
  return value;
}
function hasWrapper(type, [start, end]) {
  return type.startsWith(start) && type.slice(-1 * end.length) === end;
}
const nestedExtraction = [
  ["[", "]", TypeDefInfo.VecFixed, _decodeFixedVec],
  ["{", "}", TypeDefInfo.Struct, _decodeStruct],
  ["(", ")", TypeDefInfo.Tuple, _decodeTuple],
  // the inner for these are the same as tuple, multiple values
  ["BTreeMap<", ">", TypeDefInfo.BTreeMap, _decodeTuple],
  ["HashMap<", ">", TypeDefInfo.HashMap, _decodeTuple],
  ["Int<", ">", TypeDefInfo.Int, _decodeInt],
  ["Result<", ">", TypeDefInfo.Result, _decodeTuple],
  ["UInt<", ">", TypeDefInfo.UInt, _decodeUInt],
  ["DoNotConstruct<", ">", TypeDefInfo.DoNotConstruct, _decodeDoNotConstruct]
];
const wrappedExtraction = [
  ["BTreeSet<", ">", TypeDefInfo.BTreeSet],
  ["Compact<", ">", TypeDefInfo.Compact],
  ["Linkage<", ">", TypeDefInfo.Linkage],
  ["Opaque<", ">", TypeDefInfo.WrapperOpaque],
  ["Option<", ">", TypeDefInfo.Option],
  ["Range<", ">", TypeDefInfo.Range],
  ["RangeInclusive<", ">", TypeDefInfo.RangeInclusive],
  ["Vec<", ">", TypeDefInfo.Vec],
  ["WrapperKeepOpaque<", ">", TypeDefInfo.WrapperKeepOpaque],
  ["WrapperOpaque<", ">", TypeDefInfo.WrapperOpaque]
];
function extractSubType(type, [start, end]) {
  return type.substring(start.length, type.length - end.length);
}
function getTypeDef(_type, { displayName, name } = {}, count = 0) {
  const type = sanitize(_type);
  const value = { displayName, info: TypeDefInfo.Plain, name, type };
  if (++count > 64) {
    throw new Error("getTypeDef: Maximum nested limit reached");
  }
  const nested = nestedExtraction.find((nested2) => hasWrapper(type, nested2));
  if (nested) {
    value.info = nested[2];
    return nested[3](value, type, extractSubType(type, nested), count);
  }
  const wrapped = wrappedExtraction.find((wrapped2) => hasWrapper(type, wrapped2));
  if (wrapped) {
    value.info = wrapped[2];
    value.sub = getTypeDef(extractSubType(type, wrapped), {}, count);
  }
  return value;
}
function getTypeDefType({ lookupName, type }) {
  return lookupName || type;
}
function getSubDefArray(value) {
  if (!Array.isArray(value.sub)) {
    throw new Error(`Expected subtype as TypeDef[] in ${stringify$1(value)}`);
  }
  return value.sub;
}
function getSubDef(value) {
  if (!value.sub || Array.isArray(value.sub)) {
    throw new Error(`Expected subtype as TypeDef in ${stringify$1(value)}`);
  }
  return value.sub;
}
function getSubType(value) {
  return getTypeDefType(getSubDef(value));
}
function getTypeClassMap(value) {
  const subs = getSubDefArray(value);
  const map2 = {};
  for (let i = 0, count = subs.length; i < count; i++) {
    const sub = subs[i];
    if (!sub.name) {
      throw new Error(`No name found in definition ${stringify$1(sub)}`);
    }
    map2[sub.name] = getTypeDefType(sub);
  }
  return map2;
}
function getTypeClassArray(value) {
  return getSubDefArray(value).map(getTypeDefType);
}
function createInt(Clazz, { displayName, length: length2 }) {
  if (!isNumber(length2)) {
    throw new Error(`Expected bitLength information for ${displayName || Clazz.constructor.name}<bitLength>`);
  }
  return Clazz.with(length2, displayName);
}
function createHashMap(Clazz, value) {
  const [keyType, valueType] = getTypeClassArray(value);
  return Clazz.with(keyType, valueType);
}
function createWithSub(Clazz, value) {
  return Clazz.with(getSubType(value));
}
const infoMapping = {
  [TypeDefInfo.BTreeMap]: (_registry, value) => createHashMap(BTreeMap, value),
  [TypeDefInfo.BTreeSet]: (_registry, value) => createWithSub(BTreeSet, value),
  [TypeDefInfo.Compact]: (_registry, value) => createWithSub(Compact, value),
  [TypeDefInfo.DoNotConstruct]: (_registry, value) => DoNotConstruct.with(value.displayName || value.type),
  [TypeDefInfo.Enum]: (_registry, value) => {
    const subs = getSubDefArray(value);
    return Enum.with(subs.every(({ type }) => type === "Null") ? subs.reduce((out, { index, name }, count) => {
      if (!name) {
        throw new Error("No name found in sub definition");
      }
      out[name] = index || count;
      return out;
    }, {}) : getTypeClassMap(value));
  },
  [TypeDefInfo.HashMap]: (_registry, value) => createHashMap(HashMap, value),
  [TypeDefInfo.Int]: (_registry, value) => createInt(Int, value),
  // We have circular deps between Linkage & Struct
  [TypeDefInfo.Linkage]: (_registry, value) => {
    const type = `Option<${getSubType(value)}>`;
    const Clazz = Struct.with({ previous: type, next: type });
    Clazz.prototype.toRawType = function() {
      return `Linkage<${this.next.toRawType(true)}>`;
    };
    return Clazz;
  },
  [TypeDefInfo.Null]: (_registry, _value) => Null,
  [TypeDefInfo.Option]: (_registry, value) => {
    if (!value.sub || Array.isArray(value.sub)) {
      throw new Error("Expected type information for Option");
    }
    return createWithSub(Option, value);
  },
  [TypeDefInfo.Plain]: (registry, value) => registry.getOrUnknown(value.type),
  [TypeDefInfo.Range]: (_registry, value) => createWithSub(Range, value),
  [TypeDefInfo.RangeInclusive]: (_registry, value) => createWithSub(RangeInclusive, value),
  [TypeDefInfo.Result]: (_registry, value) => {
    const [Ok, Err] = getTypeClassArray(value);
    return Result$1.with({ Err, Ok });
  },
  [TypeDefInfo.Set]: (_registry, value) => CodecSet.with(getSubDefArray(value).reduce((result, { index, name }) => {
    if (!name || !isNumber(index)) {
      throw new Error("No name found in sub definition");
    }
    result[name] = index;
    return result;
  }, {}), value.length),
  [TypeDefInfo.Si]: (registry, value) => getTypeClass(registry, registry.lookup.getTypeDef(value.type)),
  [TypeDefInfo.Struct]: (_registry, value) => Struct.with(getTypeClassMap(value), value.alias),
  [TypeDefInfo.Tuple]: (_registry, value) => Tuple.with(getTypeClassArray(value)),
  [TypeDefInfo.UInt]: (_registry, value) => createInt(UInt, value),
  [TypeDefInfo.Vec]: (_registry, { sub }) => {
    if (!sub || Array.isArray(sub)) {
      throw new Error("Expected type information for vector");
    }
    return sub.type === "u8" ? Bytes : Vec.with(getTypeDefType(sub));
  },
  [TypeDefInfo.VecFixed]: (_registry, { displayName, length: length2, sub }) => {
    if (!isNumber(length2) || !sub || Array.isArray(sub)) {
      throw new Error("Expected length & type information for fixed vector");
    }
    return sub.type === "u8" ? U8aFixed.with(length2 * 8, displayName) : VecFixed.with(getTypeDefType(sub), length2);
  },
  [TypeDefInfo.WrapperKeepOpaque]: (_registry, value) => createWithSub(WrapperKeepOpaque, value),
  [TypeDefInfo.WrapperOpaque]: (_registry, value) => createWithSub(WrapperOpaque, value)
};
function constructTypeClass(registry, typeDef) {
  try {
    const Type2 = infoMapping[typeDef.info](registry, typeDef);
    if (!Type2) {
      throw new Error("No class created");
    }
    if (!Type2.__fallbackType && typeDef.fallbackType) {
      Type2.__fallbackType = typeDef.fallbackType;
    }
    return Type2;
  } catch (error2) {
    throw new Error(`Unable to construct class from ${stringify$1(typeDef)}: ${error2.message}`);
  }
}
function getTypeClass(registry, typeDef) {
  return registry.getUnsafe(typeDef.type, false, typeDef);
}
function createClassUnsafe(registry, type) {
  return (
    // just retrieve via name, no creation via typeDef
    registry.getUnsafe(type) || // we don't have an existing type, create the class via typeDef
    getTypeClass(registry, registry.isLookupType(type) ? registry.lookup.getTypeDef(type) : getTypeDef(type))
  );
}
function checkInstance(created, matcher) {
  const u8a = created.toU8a();
  const rawType = created.toRawType();
  const isOk = (
    // full match, all ok
    u8aEq(u8a, matcher) || // on a length-prefixed type, just check the actual length
    ["Bytes", "Text", "Type"].includes(rawType) && matcher.length === created.length || // when the created is empty and matcher is also empty, let it slide...
    created.isEmpty && matcher.every((v) => !v)
  );
  if (!isOk) {
    throw new Error(`${rawType}:: Decoded input doesn't match input, received ${u8aToHex(matcher, 512)} (${matcher.length} bytes), created ${u8aToHex(u8a, 512)} (${u8a.length} bytes)`);
  }
}
function checkPedantic(created, [value]) {
  if (isU8a(value)) {
    checkInstance(created, value);
  } else if (isHex(value)) {
    checkInstance(created, u8aToU8a(value));
  }
}
function initType(registry, Type2, params = [], { blockHash, isFallback, isOptional, isPedantic } = {}) {
  const created = new (isOptional ? Option.with(Type2) : Type2)(registry, ...params);
  isPedantic && checkPedantic(created, params);
  if (blockHash) {
    created.createdAtHash = createTypeUnsafe(registry, "BlockHash", [blockHash]);
  }
  if (isFallback) {
    created.isStorageFallback = true;
  }
  return created;
}
function createTypeUnsafe(registry, type, params = [], options = {}) {
  let Clazz = null;
  let firstError = null;
  try {
    Clazz = createClassUnsafe(registry, type);
    return initType(registry, Clazz, params, options);
  } catch (error2) {
    firstError = new Error(`createType(${type}):: ${error2.message}`);
  }
  if (Clazz == null ? void 0 : Clazz.__fallbackType) {
    try {
      Clazz = createClassUnsafe(registry, Clazz.__fallbackType);
      return initType(registry, Clazz, params, options);
    } catch {
    }
  }
  throw firstError;
}
const stringIdentity = (value) => value.toString();
const INFO_WRAP = ["BTreeMap", "BTreeSet", "Compact", "HashMap", "Option", "Result", "Vec"];
function paramsNotation(outer, inner, transform = stringIdentity) {
  return `${outer}${inner ? `<${(Array.isArray(inner) ? inner : [inner]).map(transform).join(", ")}>` : ""}`;
}
function encodeWithParams(registry, typeDef, outer) {
  const { info: info2, sub } = typeDef;
  switch (info2) {
    case TypeDefInfo.BTreeMap:
    case TypeDefInfo.BTreeSet:
    case TypeDefInfo.Compact:
    case TypeDefInfo.HashMap:
    case TypeDefInfo.Linkage:
    case TypeDefInfo.Option:
    case TypeDefInfo.Range:
    case TypeDefInfo.RangeInclusive:
    case TypeDefInfo.Result:
    case TypeDefInfo.Vec:
    case TypeDefInfo.WrapperKeepOpaque:
    case TypeDefInfo.WrapperOpaque:
      return paramsNotation(outer, sub, (p) => encodeTypeDef(registry, p));
  }
  throw new Error(`Unable to encode ${stringify$1(typeDef)} with params`);
}
function encodeSubTypes(registry, sub, asEnum, extra) {
  const names = sub.map(({ name }) => name);
  if (!names.every((n) => !!n)) {
    throw new Error(`Subtypes does not have consistent names, ${names.join(", ")}`);
  }
  const inner = objectSpread({}, extra);
  for (let i = 0, count = sub.length; i < count; i++) {
    const def = sub[i];
    if (!def.name) {
      throw new Error(`No name found in ${stringify$1(def)}`);
    }
    inner[def.name] = encodeTypeDef(registry, def);
  }
  return stringify$1(asEnum ? { _enum: inner } : inner);
}
const encoders = {
  [TypeDefInfo.BTreeMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, "BTreeMap"),
  [TypeDefInfo.BTreeSet]: (registry, typeDef) => encodeWithParams(registry, typeDef, "BTreeSet"),
  [TypeDefInfo.Compact]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Compact"),
  [TypeDefInfo.DoNotConstruct]: (registry, { displayName, lookupIndex, lookupName }) => `DoNotConstruct<${lookupName || displayName || (isUndefined(lookupIndex) ? "Unknown" : registry.createLookupType(lookupIndex))}>`,
  [TypeDefInfo.Enum]: (registry, { sub }) => {
    if (!Array.isArray(sub)) {
      throw new Error("Unable to encode Enum type");
    }
    return sub.every(({ type }) => type === "Null") ? stringify$1({ _enum: sub.map(({ name }, index) => `${name || `Empty${index}`}`) }) : encodeSubTypes(registry, sub, true);
  },
  [TypeDefInfo.HashMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, "HashMap"),
  [TypeDefInfo.Int]: (_registry, { length: length2 = 32 }) => `Int<${length2}>`,
  [TypeDefInfo.Linkage]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Linkage"),
  [TypeDefInfo.Null]: (_registry, _typeDef) => "Null",
  [TypeDefInfo.Option]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Option"),
  [TypeDefInfo.Plain]: (_registry, { displayName, type }) => displayName || type,
  [TypeDefInfo.Range]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Range"),
  [TypeDefInfo.RangeInclusive]: (registry, typeDef) => encodeWithParams(registry, typeDef, "RangeInclusive"),
  [TypeDefInfo.Result]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Result"),
  [TypeDefInfo.Set]: (_registry, { length: length2 = 8, sub }) => {
    if (!Array.isArray(sub)) {
      throw new Error("Unable to encode Set type");
    }
    return stringify$1({
      _set: sub.reduce((all2, { index, name }, count) => objectSpread(all2, { [`${name || `Unknown${index || count}`}`]: index || count }), { _bitLength: length2 || 8 })
    });
  },
  [TypeDefInfo.Si]: (_registry, { lookupName, type }) => lookupName || type,
  [TypeDefInfo.Struct]: (registry, { alias: alias2, sub }) => {
    if (!Array.isArray(sub)) {
      throw new Error("Unable to encode Struct type");
    }
    return encodeSubTypes(registry, sub, false, alias2 ? {
      _alias: [...alias2.entries()].reduce((all2, [k, v]) => objectSpread(all2, { [k]: v }), {})
    } : {});
  },
  [TypeDefInfo.Tuple]: (registry, { sub }) => {
    if (!Array.isArray(sub)) {
      throw new Error("Unable to encode Tuple type");
    }
    return `(${sub.map((type) => encodeTypeDef(registry, type)).join(",")})`;
  },
  [TypeDefInfo.UInt]: (_registry, { length: length2 = 32 }) => `UInt<${length2}>`,
  [TypeDefInfo.Vec]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Vec"),
  [TypeDefInfo.VecFixed]: (_registry, { length: length2, sub }) => {
    if (!isNumber(length2) || !sub || Array.isArray(sub)) {
      throw new Error("Unable to encode VecFixed type");
    }
    return `[${sub.type};${length2}]`;
  },
  [TypeDefInfo.WrapperKeepOpaque]: (registry, typeDef) => encodeWithParams(registry, typeDef, "WrapperKeepOpaque"),
  [TypeDefInfo.WrapperOpaque]: (registry, typeDef) => encodeWithParams(registry, typeDef, "WrapperOpaque")
};
function encodeType(registry, typeDef, withLookup = true) {
  return withLookup && typeDef.lookupName ? typeDef.lookupName : encoders[typeDef.info](registry, typeDef);
}
function encodeTypeDef(registry, typeDef) {
  return typeDef.displayName && !INFO_WRAP.some((i) => typeDef.displayName === i) ? typeDef.displayName : encodeType(registry, typeDef);
}
function withTypeString(registry, typeDef) {
  return objectSpread({}, typeDef, {
    type: encodeType(registry, typeDef, false)
  });
}
const XCM_MAPPINGS = ["AssetInstance", "Fungibility", "Junction", "Junctions", "MultiAsset", "MultiAssetFilter", "MultiLocation", "Response", "WildFungibility", "WildMultiAsset", "Xcm", "XcmError", "XcmOrder"];
function mapXcmTypes(version2) {
  return XCM_MAPPINGS.reduce((all2, key) => objectSpread(all2, { [key]: `${key}${version2}` }), {});
}
const l$a = logger("PortableRegistry");
const TYPE_UNWRAP = { toNumber: () => -1 };
const PRIMITIVE_ALIAS = {
  Char: "u32",
  Str: "Text"
};
const PATHS_ALIAS = splitNamespace([
  // full matching on exact names...
  // these are well-known types with additional encoding
  "sp_core::crypto::AccountId32",
  "sp_runtime::generic::era::Era",
  "sp_runtime::multiaddress::MultiAddress",
  // ethereum overrides (Frontier, Moonbeam, Polkadot claims)
  "fp_account::AccountId20",
  "account::AccountId20",
  "polkadot_runtime_common::claims::EthereumAddress",
  // weights 2 is a structure, however for 1.5. with a single field it
  // should be flatenned (can appear in Compact<Weight> extrinsics)
  "frame_support::weights::weight_v2::Weight",
  "sp_weights::weight_v2::Weight",
  // wildcard matching in place...
  // these have a specific encoding or logic, use a wildcard for {pallet, darwinia}_democracy
  "*_democracy::vote::Vote",
  "*_conviction_voting::vote::Vote",
  "*_identity::types::Data",
  // these are opaque Vec<u8> wrappers
  "sp_core::OpaqueMetadata",
  "sp_core::OpaquePeerId",
  "sp_core::offchain::OpaqueMultiaddr",
  // shorten some well-known types
  "primitive_types::*",
  "sp_arithmetic::per_things::*",
  // runtime
  "*_runtime::RuntimeCall",
  "*_runtime::RuntimeEvent",
  // ink!
  "ink::env::types::*",
  "ink::primitives::types::*",
  "ink_env::types::*",
  "ink_primitives::types::*",
  // noir
  "np_runtime::accountname::AccountName",
  "np_runtime::universaladdress::UniversalAddress"
]);
const PATHS_SET = splitNamespace([
  "pallet_identity::types::BitFlags"
]);
const BITVEC_NS_LSB = ["bitvec::order::Lsb0", "BitOrderLsb0"];
const BITVEC_NS_MSB = ["bitvec::order::Msb0", "BitOrderMsb0"];
const BITVEC_NS = [...BITVEC_NS_LSB, ...BITVEC_NS_MSB];
const WRAPPERS = ["BoundedBTreeMap", "BoundedBTreeSet", "BoundedVec", "Box", "BTreeMap", "BTreeSet", "Cow", "Option", "Range", "RangeInclusive", "Result", "WeakBoundedVec", "WrapperKeepOpaque", "WrapperOpaque"];
const RESERVED = [
  // JS reserved words
  "entries",
  "keys",
  "new",
  "size",
  // exposed by all Codec objects
  "hash",
  "registry"
];
const PATH_RM_INDEX_1 = ["generic", "misc", "pallet", "traits", "types"];
function sanitizeDocs(docs) {
  const count = docs.length;
  const result = new Array(count);
  for (let i = 0; i < count; i++) {
    result[i] = docs[i].toString();
  }
  return result;
}
function splitNamespace(values) {
  const count = values.length;
  const result = new Array(count);
  for (let i = 0; i < count; i++) {
    result[i] = values[i].split("::");
  }
  return result;
}
function matchParts(first2, second) {
  return first2.length === second.length && first2.every((a, index) => {
    const b = second[index].toString();
    if (a === "*" || a === b) {
      return true;
    }
    if (a.includes("*") && a.includes("_") && b.includes("_")) {
      let suba = a.split("_");
      let subb = b.split("_");
      if (suba[0] === "*") {
        const indexOf = subb.indexOf(suba[1]);
        if (indexOf !== -1) {
          suba = suba.slice(1);
          subb = subb.slice(indexOf);
        }
      }
      if (suba.length === 2 && suba[1] === "*" && suba[0] === subb[0]) {
        return true;
      }
      return matchParts(suba, subb);
    }
    return false;
  });
}
function getAliasPath({ def, path: path2 }) {
  if (["frame_support::weights::weight_v2::Weight", "sp_weights::weight_v2::Weight"].includes(path2.join("::"))) {
    return !def.isComposite || def.asComposite.fields.length === 1 ? "WeightV1" : null;
  }
  return path2.length && PATHS_ALIAS.some((a) => matchParts(a, path2)) ? path2[path2.length - 1].toString() : null;
}
function extractNameFlat(portable, lookupIndex, params, path2, isInternal = false) {
  const count = path2.length;
  if (count === 0 || WRAPPERS.includes(path2[count - 1].toString())) {
    return null;
  }
  const camels = new Array(count);
  const lowers = new Array(count);
  for (let i = 0; i < count; i++) {
    const c = stringPascalCase(isInternal ? path2[i].replace("pallet_", "") : path2[i]);
    const l2 = c.toLowerCase();
    camels[i] = c;
    lowers[i] = l2;
  }
  let name = "";
  for (let i = 0; i < count; i++) {
    const l2 = lowers[i];
    if (i !== 1 || !PATH_RM_INDEX_1.includes(l2)) {
      if (l2 !== lowers[i + 1]) {
        name += camels[i];
      }
    }
  }
  if (camels[1] === "RawOrigin" && count === 2 && params.length === 2 && params[1].type.isSome) {
    const instanceType = portable[params[1].type.unwrap().toNumber()];
    if (instanceType.type.path.length === 2) {
      name = `${name}${instanceType.type.path[1].toString()}`;
    }
  }
  return { lookupIndex, name, params };
}
function extractName(portable, lookupIndex, { type: { params, path: path2 } }) {
  return extractNameFlat(portable, lookupIndex, params, path2);
}
function nextDupeMatches(name, startAt, names) {
  const result = [names[startAt]];
  for (let i = startAt + 1, count = names.length; i < count; i++) {
    const v = names[i];
    if (v.name === name) {
      result.push(v);
    }
  }
  return result;
}
function rewriteDupes(input, rewrite) {
  const count = input.length;
  for (let i = 0; i < count; i++) {
    const a = input[i];
    for (let j = i + 1; j < count; j++) {
      const b = input[j];
      if (a.lookupIndex !== b.lookupIndex && a.name === b.name) {
        return false;
      }
    }
  }
  for (let i = 0; i < count; i++) {
    const p = input[i];
    rewrite[p.lookupIndex] = p.name;
  }
  return true;
}
function removeDupeNames(lookup14, portable, names) {
  const rewrite = {};
  return names.map((original, startAt) => {
    const { lookupIndex, name, params } = original;
    if (!name) {
      return null;
    } else if (rewrite[lookupIndex]) {
      return original;
    }
    const allSame = nextDupeMatches(name, startAt, names);
    if (allSame.length === 1) {
      return original;
    }
    const anyDiff = allSame.some((o) => params.length !== o.params.length || params.some((p, index) => !p.name.eq(o.params[index].name) || p.type.unwrapOr(TYPE_UNWRAP).toNumber() !== o.params[index].type.unwrapOr(TYPE_UNWRAP).toNumber()));
    if (!anyDiff) {
      return original;
    }
    const paramIdx = params.findIndex(({ type }, index) => allSame.every(({ params: params2 }, aIndex) => params2[index].type.isSome && (aIndex === 0 || !params2[index].type.eq(type))));
    if (paramIdx === -1) {
      return original;
    }
    const sameCount = allSame.length;
    const adjusted = new Array(sameCount);
    for (let i = 0; i < sameCount; i++) {
      const { lookupIndex: lookupIndex2, name: name2, params: params2 } = allSame[i];
      const { def, path: path2 } = lookup14.getSiType(params2[paramIdx].type.unwrap());
      if (!def.isPrimitive && !path2.length) {
        return null;
      }
      adjusted[i] = {
        lookupIndex: lookupIndex2,
        name: def.isPrimitive ? `${name2}${def.asPrimitive.toString()}` : `${name2}${path2[path2.length - 1].toString()}`
      };
    }
    if (rewriteDupes(adjusted, rewrite)) {
      return original;
    }
    for (let i = 0; i < sameCount; i++) {
      const { lookupIndex: lookupIndex2, name: name2, params: params2 } = allSame[i];
      const { def, path: path2 } = lookup14.getSiType(params2[paramIdx].type.unwrap());
      const flat = extractNameFlat(portable, lookupIndex2, params2, path2, true);
      if (def.isPrimitive || !flat) {
        return null;
      }
      adjusted[i] = {
        lookupIndex: lookupIndex2,
        name: `${name2}${flat.name}`
      };
    }
    if (rewriteDupes(adjusted, rewrite)) {
      return original;
    }
    return null;
  }).filter((n) => !!n).map(({ lookupIndex, name, params }) => ({
    lookupIndex,
    name: rewrite[lookupIndex] || name,
    params
  }));
}
function registerTypes(lookup14, lookups, names, params) {
  lookup14.registry.register(lookups);
  if (params.SpRuntimeUncheckedExtrinsic) {
    const [addrParam, , sigParam] = params.SpRuntimeUncheckedExtrinsic;
    const siAddress = lookup14.getSiType(addrParam.type.unwrap());
    const siSignature = lookup14.getSiType(sigParam.type.unwrap());
    const nsSignature = siSignature.path.join("::");
    let nsAccountId = siAddress.path.join("::");
    const isMultiAddress = nsAccountId === "sp_runtime::multiaddress::MultiAddress";
    if (isMultiAddress) {
      const [idParam] = siAddress.params;
      nsAccountId = lookup14.getSiType(idParam.type.unwrap()).path.join("::");
    }
    lookup14.registry.register({
      // known: account::AccountId20, fp_account::AccountId20, primitive_types::H160
      AccountId: nsAccountId.endsWith("::AccountId20") || nsAccountId.endsWith("::H160") ? "AccountId20" : "AccountId32",
      Address: isMultiAddress ? "MultiAddress" : "AccountId",
      ExtrinsicSignature: ["sp_runtime::MultiSignature"].includes(nsSignature) ? "MultiSignature" : names[sigParam.type.unwrap().toNumber()] || "MultiSignature"
    });
  }
}
function extractAliases(params, isContract) {
  const hasParams = Object.keys(params).some((k) => !k.startsWith("Pallet"));
  const alias2 = {};
  if (params.SpRuntimeUncheckedExtrinsic) {
    const [, { type }] = params.SpRuntimeUncheckedExtrinsic;
    alias2[type.unwrap().toNumber()] = "Call";
  } else if (hasParams && !isContract) {
    l$a.warn("Unable to determine runtime Call type, cannot inspect sp_runtime::generic::unchecked_extrinsic::UncheckedExtrinsic");
  }
  if (params.FrameSystemEventRecord) {
    const [{ type }] = params.FrameSystemEventRecord;
    alias2[type.unwrap().toNumber()] = "Event";
  } else if (hasParams && !isContract) {
    l$a.warn("Unable to determine runtime Event type, cannot inspect frame_system::EventRecord");
  }
  return alias2;
}
function extractTypeInfo(lookup14, portable) {
  const nameInfo = [];
  const types2 = {};
  for (let i = 0, count = portable.length; i < count; i++) {
    const type = portable[i];
    const lookupIndex = type.id.toNumber();
    const extracted = extractName(portable, lookupIndex, portable[i]);
    if (extracted) {
      nameInfo.push(extracted);
    }
    types2[lookupIndex] = type;
  }
  const lookups = {};
  const names = {};
  const params = {};
  const dedup = removeDupeNames(lookup14, portable, nameInfo);
  for (let i = 0, count = dedup.length; i < count; i++) {
    const { lookupIndex, name, params: p } = dedup[i];
    names[lookupIndex] = name;
    lookups[name] = lookup14.registry.createLookupType(lookupIndex);
    params[name] = p;
  }
  return { lookups, names, params, types: types2 };
}
class PortableRegistry extends Struct {
  constructor(registry, value, isContract) {
    super(registry, {
      types: "Vec<PortableType>"
    }, value);
    __publicField(this, "__internal__alias");
    __publicField(this, "__internal__lookups");
    __publicField(this, "__internal__names");
    __publicField(this, "__internal__params");
    __publicField(this, "__internal__typeDefs", {});
    __publicField(this, "__internal__types");
    const { lookups, names, params, types: types2 } = extractTypeInfo(this, this.types);
    this.__internal__alias = extractAliases(params, isContract);
    this.__internal__lookups = lookups;
    this.__internal__names = names;
    this.__internal__params = params;
    this.__internal__types = types2;
  }
  /**
   * @description Returns all the available type names for this chain
   **/
  get names() {
    return Object.values(this.__internal__names).sort();
  }
  /**
   * @description Returns all the available parameterized types for this chain
   **/
  get paramTypes() {
    return this.__internal__params;
  }
  /**
   * @description The types of the registry
   */
  get types() {
    return this.getT("types");
  }
  /**
   * @description Register all available types into the registry (generally for internal usage)
   */
  register() {
    registerTypes(this, this.__internal__lookups, this.__internal__names, this.__internal__params);
  }
  /**
   * @description Returns the name for a specific lookup
   */
  getName(lookupId) {
    return this.__internal__names[this.__internal__getLookupId(lookupId)];
  }
  /**
   * @description Finds a specific type in the registry
   */
  getSiType(lookupId) {
    const found = (this.__internal__types || this.types)[this.__internal__getLookupId(lookupId)];
    if (!found) {
      throw new Error(`PortableRegistry: Unable to find type with lookupId ${lookupId.toString()}`);
    }
    return found.type;
  }
  /**
   * @description Lookup the type definition for the index
   */
  getTypeDef(lookupId) {
    const lookupIndex = this.__internal__getLookupId(lookupId);
    if (!this.__internal__typeDefs[lookupIndex]) {
      const lookupName = this.__internal__names[lookupIndex];
      const empty = {
        info: TypeDefInfo.DoNotConstruct,
        lookupIndex,
        lookupName,
        type: this.registry.createLookupType(lookupIndex)
      };
      if (lookupName) {
        this.__internal__typeDefs[lookupIndex] = empty;
      }
      const extracted = this.__internal__extract(this.getSiType(lookupId), lookupIndex);
      if (!lookupName) {
        this.__internal__typeDefs[lookupIndex] = empty;
      }
      Object.keys(extracted).forEach((k) => {
        if (k !== "lookupName" || extracted[k]) {
          this.__internal__typeDefs[lookupIndex][k] = extracted[k];
        }
      });
      if (extracted.info === TypeDefInfo.Plain) {
        this.__internal__typeDefs[lookupIndex].lookupNameRoot = this.__internal__typeDefs[lookupIndex].lookupName;
        delete this.__internal__typeDefs[lookupIndex].lookupName;
      }
    }
    return this.__internal__typeDefs[lookupIndex];
  }
  /**
   * @description For a specific field, perform adjustments to not have built-in conflicts
   */
  sanitizeField(name) {
    let nameField = null;
    let nameOrig = null;
    if (name.isSome) {
      nameField = stringCamelCase(name.unwrap());
      if (nameField.includes("#")) {
        nameOrig = nameField;
        nameField = nameOrig.replace(/#/g, "_");
      } else if (RESERVED.includes(nameField)) {
        nameOrig = nameField;
        nameField = `${nameField}_`;
      }
    }
    return [nameField, nameOrig];
  }
  /** @internal Creates a TypeDef based on an internal lookupId */
  __internal__createSiDef(lookupId) {
    const typeDef = this.getTypeDef(lookupId);
    const lookupIndex = lookupId.toNumber();
    return [TypeDefInfo.DoNotConstruct, TypeDefInfo.Enum, TypeDefInfo.Struct].includes(typeDef.info) && typeDef.lookupName ? {
      docs: typeDef.docs,
      info: TypeDefInfo.Si,
      lookupIndex,
      lookupName: this.__internal__names[lookupIndex],
      type: this.registry.createLookupType(lookupId)
    } : typeDef;
  }
  /** @internal Converts a lookupId input to the actual lookup index */
  __internal__getLookupId(lookupId) {
    if (isString(lookupId)) {
      if (!this.registry.isLookupType(lookupId)) {
        throw new Error(`PortableRegistry: Expected a lookup string type, found ${lookupId}`);
      }
      return parseInt(lookupId.replace("Lookup", ""), 10);
    } else if (isNumber(lookupId)) {
      return lookupId;
    }
    return lookupId.toNumber();
  }
  /** @internal Converts a type into a TypeDef for Codec usage */
  __internal__extract(type, lookupIndex) {
    const namespace = type.path.join("::");
    let typeDef;
    const aliasType = this.__internal__alias[lookupIndex] || getAliasPath(type);
    try {
      if (aliasType) {
        typeDef = this.__internal__extractAliasPath(lookupIndex, aliasType);
      } else {
        switch (type.def.type) {
          case "Array":
            typeDef = this.__internal__extractArray(lookupIndex, type.def.asArray);
            break;
          case "BitSequence":
            typeDef = this.__internal__extractBitSequence(lookupIndex, type.def.asBitSequence);
            break;
          case "Compact":
            typeDef = this.__internal__extractCompact(lookupIndex, type.def.asCompact);
            break;
          case "Composite":
            typeDef = this.__internal__extractComposite(lookupIndex, type, type.def.asComposite);
            break;
          case "HistoricMetaCompat":
            typeDef = this.__internal__extractHistoric(lookupIndex, type.def.asHistoricMetaCompat);
            break;
          case "Primitive":
            typeDef = this.__internal__extractPrimitive(lookupIndex, type);
            break;
          case "Sequence":
            typeDef = this.__internal__extractSequence(lookupIndex, type.def.asSequence);
            break;
          case "Tuple":
            typeDef = this.__internal__extractTuple(lookupIndex, type.def.asTuple);
            break;
          case "Variant":
            typeDef = this.__internal__extractVariant(lookupIndex, type, type.def.asVariant);
            break;
          default:
            assertUnreachable(type.def.type);
        }
      }
    } catch (error2) {
      throw new Error(`PortableRegistry: ${lookupIndex}${namespace ? ` (${namespace})` : ""}: Error extracting ${stringify$1(type)}: ${error2.message}`);
    }
    return objectSpread({
      docs: sanitizeDocs(type.docs),
      namespace
    }, typeDef);
  }
  /** @internal Extracts a ScaleInfo Array into TypeDef.VecFixed */
  __internal__extractArray(_23, { len, type }) {
    const length2 = len.toNumber();
    if (length2 > 2048) {
      throw new Error("Only support for [Type; <length>], where length <= 2048");
    }
    return withTypeString(this.registry, {
      info: TypeDefInfo.VecFixed,
      length: length2,
      sub: this.__internal__createSiDef(type)
    });
  }
  /** @internal Extracts a ScaleInfo BitSequence into TypeDef.Plain */
  __internal__extractBitSequence(_23, { bitOrderType, bitStoreType }) {
    const a = this.__internal__createSiDef(bitOrderType);
    const b = this.__internal__createSiDef(bitStoreType);
    const [bitOrder, bitStore] = BITVEC_NS.includes(a.namespace || "") ? [a, b] : [b, a];
    if (!bitOrder.namespace || !BITVEC_NS.includes(bitOrder.namespace)) {
      throw new Error(`Unexpected bitOrder found as ${bitOrder.namespace || "<unknown>"}`);
    } else if (bitStore.info !== TypeDefInfo.Plain || bitStore.type !== "u8") {
      throw new Error(`Only u8 bitStore is currently supported, found ${bitStore.type}`);
    }
    return {
      info: TypeDefInfo.Plain,
      type: "BitVec"
    };
  }
  /** @internal Extracts a ScaleInfo Compact into TypeDef.Compact */
  __internal__extractCompact(_23, { type }) {
    return withTypeString(this.registry, {
      info: TypeDefInfo.Compact,
      sub: this.__internal__createSiDef(type)
    });
  }
  /** @internal Extracts a ScaleInfo Composite into TypeDef.{BTree*, Range*, Wrapper*} */
  __internal__extractComposite(lookupIndex, { params, path: path2 }, { fields }) {
    if (path2.length) {
      const pathFirst = path2[0].toString();
      const pathLast = path2[path2.length - 1].toString();
      if (path2.length === 1 && pathFirst === "BTreeMap") {
        if (params.length !== 2) {
          throw new Error(`BTreeMap requires 2 parameters, found ${params.length}`);
        }
        return withTypeString(this.registry, {
          info: TypeDefInfo.BTreeMap,
          sub: params.map(({ type }) => this.__internal__createSiDef(type.unwrap()))
        });
      } else if (path2.length === 1 && pathFirst === "BTreeSet") {
        if (params.length !== 1) {
          throw new Error(`BTreeSet requires 1 parameter, found ${params.length}`);
        }
        return withTypeString(this.registry, {
          info: TypeDefInfo.BTreeSet,
          sub: this.__internal__createSiDef(params[0].type.unwrap())
        });
      } else if (["Range", "RangeInclusive"].includes(pathFirst)) {
        if (params.length !== 1) {
          throw new Error(`Range requires 1 parameter, found ${params.length}`);
        }
        return withTypeString(this.registry, {
          info: pathFirst === "Range" ? TypeDefInfo.Range : TypeDefInfo.RangeInclusive,
          sub: this.__internal__createSiDef(params[0].type.unwrap()),
          type: pathFirst
        });
      } else if (["WrapperKeepOpaque", "WrapperOpaque"].includes(pathLast)) {
        if (params.length !== 1) {
          throw new Error(`WrapperOpaque requires 1 parameter, found ${params.length}`);
        }
        return withTypeString(this.registry, {
          info: pathLast === "WrapperKeepOpaque" ? TypeDefInfo.WrapperKeepOpaque : TypeDefInfo.WrapperOpaque,
          sub: this.__internal__createSiDef(params[0].type.unwrap()),
          type: pathLast
        });
      }
    }
    return PATHS_SET.some((p) => matchParts(p, path2)) ? this.__internal__extractCompositeSet(lookupIndex, params, fields) : this.__internal__extractFields(lookupIndex, fields);
  }
  /** @internal Extracts a ScaleInfo CompositeSet into TypeDef.Set */
  __internal__extractCompositeSet(_23, params, fields) {
    if (params.length !== 1 || fields.length !== 1) {
      throw new Error("Set handling expects param/field as single entries");
    }
    return withTypeString(this.registry, {
      info: TypeDefInfo.Set,
      length: this.registry.createTypeUnsafe(this.registry.createLookupType(fields[0].type), []).bitLength(),
      sub: this.getSiType(params[0].type.unwrap()).def.asVariant.variants.map(({ index, name }) => ({
        // This will be an issue > 2^53 - 1 ... don't have those (yet)
        index: index.toNumber(),
        info: TypeDefInfo.Plain,
        name: name.toString(),
        type: "Null"
      }))
    });
  }
  /** @internal Extracts ScaleInfo enum/struct fields into TypeDef.{Struct, Tuple} */
  __internal__extractFields(lookupIndex, fields) {
    let isStruct = true;
    let isTuple = true;
    const count = fields.length;
    for (let f = 0; f < count; f++) {
      const { name } = fields[f];
      isStruct = isStruct && name.isSome;
      isTuple = isTuple && name.isNone;
    }
    if (!isTuple && !isStruct) {
      throw new Error("Invalid fields type detected, expected either Tuple (all unnamed) or Struct (all named)");
    }
    if (count === 0) {
      return {
        info: TypeDefInfo.Null,
        type: "Null"
      };
    } else if (isTuple && count === 1) {
      const typeDef = this.__internal__createSiDef(fields[0].type);
      return objectSpread({}, typeDef, lookupIndex === -1 ? null : {
        lookupIndex,
        lookupName: this.__internal__names[lookupIndex],
        lookupNameRoot: typeDef.lookupName
      }, fields[0].typeName.isSome ? { typeName: sanitize(fields[0].typeName.unwrap()) } : null);
    }
    const [sub, alias2] = this.__internal__extractFieldsAlias(fields);
    return withTypeString(this.registry, objectSpread({
      info: isTuple ? TypeDefInfo.Tuple : TypeDefInfo.Struct,
      sub
    }, alias2.size ? { alias: alias2 } : null, lookupIndex === -1 ? null : {
      lookupIndex,
      lookupName: this.__internal__names[lookupIndex]
    }));
  }
  /** @internal Apply field aliassed (with no JS conflicts) */
  __internal__extractFieldsAlias(fields) {
    const alias2 = /* @__PURE__ */ new Map();
    const count = fields.length;
    const sub = new Array(count);
    for (let i = 0; i < count; i++) {
      const { docs, name, type, typeName } = fields[i];
      const typeDef = this.__internal__createSiDef(type);
      if (name.isNone) {
        sub[i] = typeDef;
      } else {
        const [nameField, nameOrig] = this.sanitizeField(name);
        if (nameField && nameOrig) {
          alias2.set(nameField, nameOrig);
        }
        sub[i] = objectSpread({
          docs: sanitizeDocs(docs),
          name: nameField
        }, typeDef, typeName.isSome ? { typeName: sanitize(typeName.unwrap()) } : null);
      }
    }
    return [sub, alias2];
  }
  /** @internal Extracts an internal Historic (pre V14) type  */
  __internal__extractHistoric(_23, type) {
    return objectSpread({
      displayName: type.toString(),
      isFromSi: true
    }, getTypeDef(type));
  }
  /** @internal Extracts a ScaleInfo Primitive into TypeDef.Plain */
  __internal__extractPrimitive(_23, type) {
    const typeStr = type.def.asPrimitive.type.toString();
    return {
      info: TypeDefInfo.Plain,
      type: PRIMITIVE_ALIAS[typeStr] || typeStr.toLowerCase()
    };
  }
  /** @internal Applies an alias path onto the TypeDef */
  __internal__extractAliasPath(_23, type) {
    return {
      info: TypeDefInfo.Plain,
      type
    };
  }
  /** @internal Extracts a ScaleInfo Sequence into TypeDef.Vec (with Bytes shortcut) */
  __internal__extractSequence(lookupIndex, { type }) {
    const sub = this.__internal__createSiDef(type);
    if (sub.type === "u8") {
      return {
        info: TypeDefInfo.Plain,
        type: "Bytes"
      };
    }
    return withTypeString(this.registry, {
      info: TypeDefInfo.Vec,
      lookupIndex,
      lookupName: this.__internal__names[lookupIndex],
      sub
    });
  }
  /** @internal Extracts a ScaleInfo Tuple into TypeDef.Tuple */
  __internal__extractTuple(lookupIndex, ids) {
    if (ids.length === 0) {
      return {
        info: TypeDefInfo.Null,
        type: "Null"
      };
    } else if (ids.length === 1) {
      return this.getTypeDef(ids[0]);
    }
    const sub = ids.map((t) => this.__internal__createSiDef(t));
    return withTypeString(this.registry, {
      info: TypeDefInfo.Tuple,
      lookupIndex,
      lookupName: this.__internal__names[lookupIndex],
      sub
    });
  }
  /** @internal Extracts a ScaleInfo Variant into TypeDef.{Option, Result, Enum} */
  __internal__extractVariant(lookupIndex, { params, path: path2 }, { variants }) {
    if (path2.length) {
      const specialVariant = path2[0].toString();
      if (specialVariant === "Option") {
        if (params.length !== 1) {
          throw new Error(`Option requires 1 parameter, found ${params.length}`);
        }
        return withTypeString(this.registry, {
          info: TypeDefInfo.Option,
          sub: this.__internal__createSiDef(params[0].type.unwrap())
        });
      } else if (specialVariant === "Result") {
        if (params.length !== 2) {
          throw new Error(`Result requires 2 parameters, found ${params.length}`);
        }
        return withTypeString(this.registry, {
          info: TypeDefInfo.Result,
          sub: params.map(({ type }, index) => objectSpread({
            name: ["Ok", "Error"][index]
          }, this.__internal__createSiDef(type.unwrap())))
        });
      }
    }
    if (variants.length === 0) {
      return {
        info: TypeDefInfo.Null,
        type: "Null"
      };
    }
    return this.__internal__extractVariantEnum(lookupIndex, variants);
  }
  /** @internal Extracts a ScaleInfo Variant into TypeDef.Enum */
  __internal__extractVariantEnum(lookupIndex, variants) {
    const sub = [];
    variants.slice().sort((a, b) => a.index.cmp(b.index)).forEach(({ fields, index: bnIndex, name }) => {
      const index = bnIndex.toNumber();
      while (sub.length !== index) {
        sub.push({
          index: sub.length,
          info: TypeDefInfo.Null,
          name: `__Unused${sub.length}`,
          type: "Null"
        });
      }
      sub.push(objectSpread(this.__internal__extractFields(-1, fields), {
        index,
        name: name.toString()
      }));
    });
    return withTypeString(this.registry, {
      info: TypeDefInfo.Enum,
      lookupIndex,
      lookupName: this.__internal__names[lookupIndex],
      sub
    });
  }
}
function convertType(key) {
  return (registry, { type }) => registry.createType("Si1TypeDef", {
    [key]: {
      type: type.toNumber()
    }
  });
}
function convertArray(registry, { len, type }) {
  return registry.createType("Si1TypeDef", {
    Array: {
      len,
      type: type.toNumber()
    }
  });
}
function convertBitSequence(registry, { bitOrderType, bitStoreType }) {
  return registry.createType("Si1TypeDef", {
    BitSequence: {
      bitOrderType: bitOrderType.toNumber(),
      bitStoreType: bitStoreType.toNumber()
    }
  });
}
const convertCompact = convertType("Compact");
function convertComposite(registry, { fields }) {
  return registry.createType("Si1TypeDef", {
    Composite: {
      fields: convertFields(registry, fields)
    }
  });
}
function convertFields(registry, fields) {
  return fields.map(({ docs, name, type, typeName }) => registry.createType("Si1Field", {
    docs,
    name,
    type: type.toNumber(),
    typeName
  }));
}
function convertPhantom(registry, path2) {
  console.warn(`Converting phantom type ${path2.map((p) => p.toString()).join("::")} to empty tuple`);
  return registry.createType("Si1TypeDef", {
    Tuple: []
  });
}
function convertPrimitive(registry, prim) {
  return registry.createType("Si1TypeDef", {
    Primitive: prim.toString()
  });
}
const convertSequence = convertType("Sequence");
function convertTuple(registry, types2) {
  return registry.createType("Si1TypeDef", {
    Tuple: types2.map((t) => t.toNumber())
  });
}
function convertVariant(registry, { variants }) {
  return registry.createType("Si1TypeDef", {
    Variant: {
      variants: variants.map(({ discriminant, docs, fields, name }, index) => registry.createType("Si1Variant", {
        docs,
        fields: convertFields(registry, fields),
        index: discriminant.isSome ? discriminant.unwrap().toNumber() : index,
        name
      }))
    }
  });
}
function convertDef(registry, { def, path: path2 }) {
  let result;
  switch (def.type) {
    case "Array":
      result = convertArray(registry, def.asArray);
      break;
    case "BitSequence":
      result = convertBitSequence(registry, def.asBitSequence);
      break;
    case "Compact":
      result = convertCompact(registry, def.asCompact);
      break;
    case "Composite":
      result = convertComposite(registry, def.asComposite);
      break;
    case "Phantom":
      result = convertPhantom(registry, path2);
      break;
    case "Primitive":
      result = convertPrimitive(registry, def.asPrimitive);
      break;
    case "Sequence":
      result = convertSequence(registry, def.asSequence);
      break;
    case "Tuple":
      result = convertTuple(registry, def.asTuple);
      break;
    case "Variant":
      result = convertVariant(registry, def.asVariant);
      break;
    default:
      assertUnreachable(def.type);
  }
  return result;
}
function toV1(registry, types2) {
  return types2.map((t, index) => registry.createType("PortableType", {
    // offsets are +1 from v0
    id: index + 1,
    type: {
      def: convertDef(registry, t),
      docs: [],
      params: t.params.map((p) => registry.createType("Si1TypeParameter", {
        type: p.toNumber()
      })),
      path: t.path.map((p) => p.toString())
    }
  }));
}
function flattenUniq(list, result = []) {
  for (let i = 0, count = list.length; i < count; i++) {
    const entry = list[i];
    if (Array.isArray(entry)) {
      flattenUniq(entry, result);
    } else {
      result.push(entry);
    }
  }
  return [...new Set(result)];
}
function getSiName(lookup14, type) {
  const typeDef = lookup14.getTypeDef(type);
  return typeDef.lookupName || typeDef.type;
}
function extractSubSingle(_23, { sub }) {
  const { lookupName, type } = sub;
  return extractTypes$1([lookupName || type]);
}
function extractSubArray(_23, { sub }) {
  return extractTypes$1(sub.map(({ lookupName, type }) => lookupName || type));
}
function unhandled(type, { info: info2 }) {
  throw new Error(`Unhandled: Unable to create and validate type from ${type} (info=${TypeDefInfo[info2]})`);
}
const mapping = {
  [TypeDefInfo.BTreeMap]: extractSubArray,
  [TypeDefInfo.BTreeSet]: extractSubSingle,
  [TypeDefInfo.Compact]: extractSubSingle,
  [TypeDefInfo.DoNotConstruct]: unhandled,
  [TypeDefInfo.Enum]: extractSubArray,
  [TypeDefInfo.HashMap]: extractSubArray,
  [TypeDefInfo.Int]: unhandled,
  [TypeDefInfo.Linkage]: extractSubSingle,
  [TypeDefInfo.Null]: unhandled,
  [TypeDefInfo.Option]: extractSubSingle,
  [TypeDefInfo.Plain]: (_23, typeDef) => typeDef.lookupName || typeDef.type,
  [TypeDefInfo.Range]: extractSubSingle,
  [TypeDefInfo.RangeInclusive]: extractSubSingle,
  [TypeDefInfo.Result]: extractSubArray,
  [TypeDefInfo.Set]: extractSubArray,
  [TypeDefInfo.Si]: unhandled,
  [TypeDefInfo.Struct]: extractSubArray,
  [TypeDefInfo.Tuple]: extractSubArray,
  [TypeDefInfo.UInt]: unhandled,
  [TypeDefInfo.Vec]: extractSubSingle,
  [TypeDefInfo.VecFixed]: extractSubSingle,
  [TypeDefInfo.WrapperKeepOpaque]: extractSubSingle,
  [TypeDefInfo.WrapperOpaque]: extractSubSingle
};
function extractTypes$1(types2) {
  const count = types2.length;
  const result = new Array(count);
  for (let i = 0; i < count; i++) {
    const type = types2[i];
    const typeDef = getTypeDef(type);
    result[i] = mapping[typeDef.info](type, typeDef);
  }
  return result;
}
const l$9 = logger("metadata");
function validateTypes(registry, throwError, types2) {
  const missing = flattenUniq(extractTypes$1(types2)).filter((type) => !registry.hasType(type) && !registry.isLookupType(type)).sort();
  if (missing.length !== 0) {
    const message = `Unknown types found, no types for ${missing.join(", ")}`;
    if (throwError) {
      throw new Error(message);
    } else {
      l$9.warn(message);
    }
  }
  return types2;
}
function extractTypes(lookup14, types2) {
  return types2.map(({ type }) => lookup14.getTypeDef(type).type);
}
function extractFieldTypes(lookup14, type) {
  return lookup14.getSiType(type).def.asVariant.variants.map(({ fields }) => extractTypes(lookup14, fields));
}
function getPalletNames({ lookup: lookup14, pallets }) {
  return pallets.reduce((all2, { calls, constants, events: events2, storage: storage2 }) => {
    all2.push([extractTypes(lookup14, constants)]);
    if (calls.isSome) {
      all2.push(extractFieldTypes(lookup14, calls.unwrap().type));
    }
    if (events2.isSome) {
      all2.push(extractFieldTypes(lookup14, events2.unwrap().type));
    }
    if (storage2.isSome) {
      all2.push(storage2.unwrap().items.map(({ type }) => {
        if (type.isPlain) {
          return [lookup14.getTypeDef(type.asPlain).type];
        }
        const { hashers, key, value } = type.asMap;
        return hashers.length === 1 ? [
          lookup14.getTypeDef(value).type,
          lookup14.getTypeDef(key).type
        ] : [
          lookup14.getTypeDef(value).type,
          ...lookup14.getSiType(key).def.asTuple.map((t) => lookup14.getTypeDef(t).type)
        ];
      }));
    }
    return all2;
  }, []);
}
function getUniqTypes(registry, meta, throwError) {
  return validateTypes(registry, throwError, flattenUniq(getPalletNames(meta)));
}
function trimDocs(docs) {
  const strings = docs.map((d) => d.toString().trim());
  const firstEmpty = strings.findIndex((d) => !d.length);
  return firstEmpty === -1 ? strings : strings.slice(0, firstEmpty);
}
function toCallsOnly(registry, { extrinsic, lookup: lookup14, pallets }) {
  return registry.createTypeUnsafe("MetadataLatest", [{
    extrinsic,
    lookup: {
      types: lookup14.types.map(({ id, type }) => registry.createTypeUnsafe("PortableType", [{
        id,
        type: objectSpread({}, type, { docs: trimDocs(type.docs) })
      }]))
    },
    pallets: pallets.map(({ calls, index, name }) => ({
      calls: registry.createTypeUnsafe("Option<PalletCallMetadataLatest>", [calls.unwrapOr(null)]),
      index,
      name
    }))
  }]).toJSON();
}
function unwrapStorageSi(type) {
  return type.isPlain ? type.asPlain : type.asMap.value;
}
function unwrapStorageType(registry, type, isOptional) {
  const outputType = getSiName(registry.lookup, unwrapStorageSi(type));
  return isOptional ? `Option<${outputType}>` : outputType;
}
function lazyVariants(lookup14, { type }, getName, creator) {
  const result = {};
  const variants = lookup14.getSiType(type).def.asVariant.variants;
  for (let i = 0, count = variants.length; i < count; i++) {
    lazyMethod(result, variants[i], creator, getName, i);
  }
  return result;
}
function evaluateThis$2(fn) {
  return fn("return this");
}
const xglobal$2 = typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : evaluateThis$2(Function);
const crypto$1 = xglobal$2.crypto;
function getRandomValues(arr2) {
  return crypto$1.getRandomValues(arr2);
}
function evaluateThis$1(fn) {
  return fn("return this");
}
const xglobal$1 = typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : evaluateThis$1(Function);
function extractGlobal(name, fallback) {
  return typeof xglobal$1[name] === "undefined" ? fallback : xglobal$1[name];
}
function invalidFallback() {
  return Number.NaN;
}
const BigInt$1 = /* @__PURE__ */ extractGlobal("BigInt", invalidFallback);
const DEFAULT_CRYPTO = { getRandomValues };
const DEFAULT_SELF = { crypto: DEFAULT_CRYPTO };
class Wbg {
  constructor(bridge2) {
    __publicField(this, "__internal__bridge");
    /** @internal */
    __publicField(this, "abort", () => {
      throw new Error("abort");
    });
    /** @internal */
    __publicField(this, "__wbindgen_is_undefined", (idx) => {
      return this.__internal__bridge.getObject(idx) === void 0;
    });
    /** @internal */
    __publicField(this, "__wbindgen_throw", (ptr, len) => {
      throw new Error(this.__internal__bridge.getString(ptr, len));
    });
    /** @internal */
    __publicField(this, "__wbg_self_1b7a39e3a92c949c", () => {
      return this.__internal__bridge.addObject(DEFAULT_SELF);
    });
    /** @internal */
    __publicField(this, "__wbg_require_604837428532a733", (ptr, len) => {
      throw new Error(`Unable to require ${this.__internal__bridge.getString(ptr, len)}`);
    });
    /** @internal */
    __publicField(this, "__wbg_crypto_968f1772287e2df0", (_idx) => {
      return this.__internal__bridge.addObject(DEFAULT_CRYPTO);
    });
    /** @internal */
    __publicField(this, "__wbg_getRandomValues_a3d34b4fee3c2869", (_idx) => {
      return this.__internal__bridge.addObject(DEFAULT_CRYPTO.getRandomValues);
    });
    /** @internal */
    __publicField(this, "__wbg_getRandomValues_f5e14ab7ac8e995d", (_arg0, ptr, len) => {
      DEFAULT_CRYPTO.getRandomValues(this.__internal__bridge.getU8a(ptr, len));
    });
    /** @internal */
    __publicField(this, "__wbg_randomFillSync_d5bd2d655fdf256a", (_idx, _ptr, _len) => {
      throw new Error("randomFillsync is not available");
    });
    /** @internal */
    __publicField(this, "__wbindgen_object_drop_ref", (idx) => {
      this.__internal__bridge.takeObject(idx);
    });
    this.__internal__bridge = bridge2;
  }
}
class Bridge {
  constructor(createWasm2) {
    __publicField(this, "__internal__createWasm");
    __publicField(this, "__internal__heap");
    __publicField(this, "__internal__wbg");
    __publicField(this, "__internal__cachegetInt32");
    __publicField(this, "__internal__cachegetUint8");
    __publicField(this, "__internal__heapNext");
    __publicField(this, "__internal__wasm");
    __publicField(this, "__internal__wasmError");
    __publicField(this, "__internal__wasmPromise");
    __publicField(this, "__internal__type");
    this.__internal__createWasm = createWasm2;
    this.__internal__cachegetInt32 = null;
    this.__internal__cachegetUint8 = null;
    this.__internal__heap = new Array(32).fill(void 0).concat(void 0, null, true, false);
    this.__internal__heapNext = this.__internal__heap.length;
    this.__internal__type = "none";
    this.__internal__wasm = null;
    this.__internal__wasmError = null;
    this.__internal__wasmPromise = null;
    this.__internal__wbg = { ...new Wbg(this) };
  }
  /** @description Returns the init error */
  get error() {
    return this.__internal__wasmError;
  }
  /** @description Returns the init type */
  get type() {
    return this.__internal__type;
  }
  /** @description Returns the created wasm interface */
  get wasm() {
    return this.__internal__wasm;
  }
  /** @description Performs the wasm initialization */
  async init(createWasm2) {
    if (!this.__internal__wasmPromise || createWasm2) {
      this.__internal__wasmPromise = (createWasm2 || this.__internal__createWasm)(this.__internal__wbg);
    }
    const { error: error2, type, wasm } = await this.__internal__wasmPromise;
    this.__internal__type = type;
    this.__internal__wasm = wasm;
    this.__internal__wasmError = error2;
    return this.__internal__wasm;
  }
  /**
   * @internal
   * @description Gets an object from the heap
   */
  getObject(idx) {
    return this.__internal__heap[idx];
  }
  /**
   * @internal
   * @description Removes an object from the heap
   */
  dropObject(idx) {
    if (idx < 36) {
      return;
    }
    this.__internal__heap[idx] = this.__internal__heapNext;
    this.__internal__heapNext = idx;
  }
  /**
   * @internal
   * @description Retrieves and removes an object to the heap
   */
  takeObject(idx) {
    const ret = this.getObject(idx);
    this.dropObject(idx);
    return ret;
  }
  /**
   * @internal
   * @description Adds an object to the heap
   */
  addObject(obj) {
    if (this.__internal__heapNext === this.__internal__heap.length) {
      this.__internal__heap.push(this.__internal__heap.length + 1);
    }
    const idx = this.__internal__heapNext;
    this.__internal__heapNext = this.__internal__heap[idx];
    this.__internal__heap[idx] = obj;
    return idx;
  }
  /**
   * @internal
   * @description Retrieve an Int32 in the WASM interface
   */
  getInt32() {
    if (this.__internal__cachegetInt32 === null || this.__internal__cachegetInt32.buffer !== this.__internal__wasm.memory.buffer) {
      this.__internal__cachegetInt32 = new Int32Array(this.__internal__wasm.memory.buffer);
    }
    return this.__internal__cachegetInt32;
  }
  /**
   * @internal
   * @description Retrieve an Uint8Array in the WASM interface
   */
  getUint8() {
    if (this.__internal__cachegetUint8 === null || this.__internal__cachegetUint8.buffer !== this.__internal__wasm.memory.buffer) {
      this.__internal__cachegetUint8 = new Uint8Array(this.__internal__wasm.memory.buffer);
    }
    return this.__internal__cachegetUint8;
  }
  /**
   * @internal
   * @description Retrieves an Uint8Array in the WASM interface
   */
  getU8a(ptr, len) {
    return this.getUint8().subarray(ptr / 1, ptr / 1 + len);
  }
  /**
   * @internal
   * @description Retrieves a string in the WASM interface
   */
  getString(ptr, len) {
    return u8aToString(this.getU8a(ptr, len));
  }
  /**
   * @internal
   * @description Allocates an Uint8Array in the WASM interface
   */
  allocU8a(arg) {
    const ptr = this.__internal__wasm.__wbindgen_malloc(arg.length * 1);
    this.getUint8().set(arg, ptr / 1);
    return [ptr, arg.length];
  }
  /**
   * @internal
   * @description Allocates a string in the WASM interface
   */
  allocString(arg) {
    return this.allocU8a(stringToU8a(arg));
  }
  /**
   * @internal
   * @description Retrieves an Uint8Array from the WASM interface
   */
  resultU8a() {
    const r0 = this.getInt32()[8 / 4 + 0];
    const r1 = this.getInt32()[8 / 4 + 1];
    const ret = this.getU8a(r0, r1).slice();
    this.__internal__wasm.__wbindgen_free(r0, r1 * 1);
    return ret;
  }
  /**
   * @internal
   * @description Retrieve a string from the WASM interface
   */
  resultString() {
    return u8aToString(this.resultU8a());
  }
}
function createWasmFn(root, wasmBytes2, asmFn) {
  return async (wbg) => {
    const result = {
      error: null,
      type: "none",
      wasm: null
    };
    try {
      if (!(wasmBytes2 == null ? void 0 : wasmBytes2.length)) {
        throw new Error("No WebAssembly provided for initialization");
      } else if (typeof WebAssembly !== "object" || typeof WebAssembly.instantiate !== "function") {
        throw new Error("WebAssembly is not available in your environment");
      }
      const source = await WebAssembly.instantiate(wasmBytes2, { wbg });
      result.wasm = source.instance.exports;
      result.type = "wasm";
    } catch (error2) {
      if (typeof asmFn === "function") {
        result.wasm = asmFn(wbg);
        result.type = "asm";
      } else {
        result.error = `FATAL: Unable to initialize @polkadot/wasm-${root}:: ${error2.message}`;
        console.error(result.error);
      }
    }
    return result;
  };
}
const CHR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
const map = new Array(256);
for (let i = 0, count = CHR.length; i < count; i++) {
  map[CHR.charCodeAt(i)] = i;
}
function base64Decode$1(data, out) {
  let byte = 0;
  let bits2 = 0;
  let pos = -1;
  for (let i = 0, last2 = out.length - 1; pos !== last2; i++) {
    byte = byte << 6 | map[data.charCodeAt(i)];
    if ((bits2 += 6) >= 8) {
      out[++pos] = byte >>> (bits2 -= 8) & 255;
    }
  }
  return out;
}
const u82 = Uint8Array, u162 = Uint16Array, u32$1 = Uint32Array;
const clim = new u82([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
const fleb = new u82([
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  1,
  1,
  1,
  2,
  2,
  2,
  2,
  3,
  3,
  3,
  3,
  4,
  4,
  4,
  4,
  5,
  5,
  5,
  5,
  0,
  /* unused */
  0,
  0,
  /* impossible */
  0
]);
const fdeb = new u82([
  0,
  0,
  0,
  0,
  1,
  1,
  2,
  2,
  3,
  3,
  4,
  4,
  5,
  5,
  6,
  6,
  7,
  7,
  8,
  8,
  9,
  9,
  10,
  10,
  11,
  11,
  12,
  12,
  13,
  13,
  /* unused */
  0,
  0
]);
const freb = (eb, start) => {
  const b = new u162(31);
  for (let i = 0; i < 31; ++i) {
    b[i] = start += 1 << eb[i - 1];
  }
  const r = new u32$1(b[30]);
  for (let i = 1; i < 30; ++i) {
    for (let j = b[i]; j < b[i + 1]; ++j) {
      r[j] = j - b[i] << 5 | i;
    }
  }
  return [b, r];
};
const [fl, revfl] = freb(fleb, 2);
fl[28] = 258, revfl[258] = 28;
const [fd] = freb(fdeb, 0);
const rev = new u162(32768);
for (let i = 0; i < 32768; ++i) {
  let x = (i & 43690) >>> 1 | (i & 21845) << 1;
  x = (x & 52428) >>> 2 | (x & 13107) << 2;
  x = (x & 61680) >>> 4 | (x & 3855) << 4;
  rev[i] = ((x & 65280) >>> 8 | (x & 255) << 8) >>> 1;
}
const hMap = (cd, mb, r) => {
  const s = cd.length;
  let i = 0;
  const l2 = new u162(mb);
  for (; i < s; ++i) {
    if (cd[i])
      ++l2[cd[i] - 1];
  }
  const le = new u162(mb);
  for (i = 1; i < mb; ++i) {
    le[i] = le[i - 1] + l2[i - 1] << 1;
  }
  let co;
  if (r) {
    co = new u162(1 << mb);
    const rvb = 15 - mb;
    for (i = 0; i < s; ++i) {
      if (cd[i]) {
        const sv = i << 4 | cd[i];
        const r2 = mb - cd[i];
        let v = le[cd[i] - 1]++ << r2;
        for (const m2 = v | (1 << r2) - 1; v <= m2; ++v) {
          co[rev[v] >> rvb] = sv;
        }
      }
    }
  } else {
    co = new u162(s);
    for (i = 0; i < s; ++i) {
      if (cd[i]) {
        co[i] = rev[le[cd[i] - 1]++] >> 15 - cd[i];
      }
    }
  }
  return co;
};
const flt = new u82(288);
for (let i = 0; i < 144; ++i)
  flt[i] = 8;
for (let i = 144; i < 256; ++i)
  flt[i] = 9;
for (let i = 256; i < 280; ++i)
  flt[i] = 7;
for (let i = 280; i < 288; ++i)
  flt[i] = 8;
const fdt = new u82(32);
for (let i = 0; i < 32; ++i)
  fdt[i] = 5;
const flrm = hMap(flt, 9, 1);
const fdrm = hMap(fdt, 5, 1);
const bits = (d, p, m2) => {
  const o = p >>> 3;
  return (d[o] | d[o + 1] << 8) >>> (p & 7) & m2;
};
const bits16 = (d, p) => {
  const o = p >>> 3;
  return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >>> (p & 7);
};
const shft = (p) => (p >>> 3) + (p & 7 && 1);
const slc = (v, s, e) => {
  if (s == null || s < 0)
    s = 0;
  if (e == null || e > v.length)
    e = v.length;
  const n = new (v instanceof u162 ? u162 : v instanceof u32$1 ? u32$1 : u82)(e - s);
  n.set(v.subarray(s, e));
  return n;
};
const max = (a) => {
  let m2 = a[0];
  for (let i = 1, count = a.length; i < count; ++i) {
    if (a[i] > m2)
      m2 = a[i];
  }
  return m2;
};
const inflt = (dat, buf, st) => {
  const noSt = !st || st.i;
  if (!st)
    st = {};
  const sl = dat.length;
  const noBuf = !buf || !noSt;
  if (!buf)
    buf = new u82(sl * 3);
  const cbuf = (l2) => {
    let bl = buf.length;
    if (l2 > bl) {
      const nbuf = new u82(Math.max(bl << 1, l2));
      nbuf.set(buf);
      buf = nbuf;
    }
  };
  let final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
  if (final && !lm)
    return buf;
  const tbts = sl << 3;
  do {
    if (!lm) {
      st.f = final = bits(dat, pos, 1);
      const type = bits(dat, pos + 1, 3);
      pos += 3;
      if (!type) {
        const s = shft(pos) + 4, l2 = dat[s - 4] | dat[s - 3] << 8, t = s + l2;
        if (t > sl) {
          if (noSt)
            throw "unexpected EOF";
          break;
        }
        if (noBuf)
          cbuf(bt + l2);
        buf.set(dat.subarray(s, t), bt);
        st.b = bt += l2, st.p = pos = t << 3;
        continue;
      } else if (type == 1)
        lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
      else if (type == 2) {
        const hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
        const tl = hLit + bits(dat, pos + 5, 31) + 1;
        pos += 14;
        const ldt = new u82(tl);
        const clt = new u82(19);
        for (let i = 0; i < hcLen; ++i) {
          clt[clim[i]] = bits(dat, pos + i * 3, 7);
        }
        pos += hcLen * 3;
        const clb = max(clt), clbmsk = (1 << clb) - 1;
        if (!noSt && pos + tl * (clb + 7) > tbts)
          break;
        const clm = hMap(clt, clb, 1);
        for (let i = 0; i < tl; ) {
          const r = clm[bits(dat, pos, clbmsk)];
          pos += r & 15;
          const s = r >>> 4;
          if (s < 16) {
            ldt[i++] = s;
          } else {
            let c = 0, n = 0;
            if (s == 16)
              n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];
            else if (s == 17)
              n = 3 + bits(dat, pos, 7), pos += 3;
            else if (s == 18)
              n = 11 + bits(dat, pos, 127), pos += 7;
            while (n--)
              ldt[i++] = c;
          }
        }
        const lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
        lbt = max(lt);
        dbt = max(dt);
        lm = hMap(lt, lbt, 1);
        dm = hMap(dt, dbt, 1);
      } else
        throw "invalid block type";
      if (pos > tbts)
        throw "unexpected EOF";
    }
    if (noBuf)
      cbuf(bt + 131072);
    const lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
    const mxa = lbt + dbt + 18;
    while (noSt || pos + mxa < tbts) {
      const c = lm[bits16(dat, pos) & lms], sym = c >>> 4;
      pos += c & 15;
      if (pos > tbts)
        throw "unexpected EOF";
      if (!c)
        throw "invalid length/literal";
      if (sym < 256)
        buf[bt++] = sym;
      else if (sym == 256) {
        lm = void 0;
        break;
      } else {
        let add2 = sym - 254;
        if (sym > 264) {
          const i = sym - 257, b = fleb[i];
          add2 = bits(dat, pos, (1 << b) - 1) + fl[i];
          pos += b;
        }
        const d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;
        if (!d)
          throw "invalid distance";
        pos += d & 15;
        let dt = fd[dsym];
        if (dsym > 3) {
          const b = fdeb[dsym];
          dt += bits16(dat, pos) & (1 << b) - 1, pos += b;
        }
        if (pos > tbts)
          throw "unexpected EOF";
        if (noBuf)
          cbuf(bt + 131072);
        const end = bt + add2;
        for (; bt < end; bt += 4) {
          buf[bt] = buf[bt - dt];
          buf[bt + 1] = buf[bt + 1 - dt];
          buf[bt + 2] = buf[bt + 2 - dt];
          buf[bt + 3] = buf[bt + 3 - dt];
        }
        bt = end;
      }
    }
    st.l = lm, st.p = pos, st.b = bt;
    if (lm)
      final = 1, st.m = lbt, st.d = dm, st.n = dbt;
  } while (!final);
  return bt == buf.length ? buf : slc(buf, 0, bt);
};
const zlv = (d) => {
  if ((d[0] & 15) != 8 || d[0] >>> 4 > 7 || (d[0] << 8 | d[1]) % 31)
    throw "invalid zlib data";
  if (d[1] & 32)
    throw "invalid zlib data: preset dictionaries not supported";
};
function unzlibSync(data, out) {
  return inflt((zlv(data), data.subarray(2, -4)), out);
}
const lenIn = 70042;
const lenOut = 107426;
const bytes$1 = "";
const wasmBytes = /* @__PURE__ */ unzlibSync(base64Decode$1(bytes$1, new Uint8Array(lenIn)), new Uint8Array(lenOut));
const createWasm = /* @__PURE__ */ createWasmFn("crypto", wasmBytes, null);
const bridge = new Bridge(createWasm);
async function initBridge(createWasm2) {
  return bridge.init(createWasm2);
}
function withWasm(fn) {
  return (...params) => {
    if (!bridge.wasm) {
      throw new Error("The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.");
    }
    return fn(bridge.wasm, ...params);
  };
}
const bip39ToEntropy = /* @__PURE__ */ withWasm((wasm, phrase) => {
  wasm.ext_bip39_to_entropy(8, ...bridge.allocString(phrase));
  return bridge.resultU8a();
});
const bip39ToMiniSecret = /* @__PURE__ */ withWasm((wasm, phrase, password) => {
  wasm.ext_bip39_to_mini_secret(8, ...bridge.allocString(phrase), ...bridge.allocString(password));
  return bridge.resultU8a();
});
const bip39ToSeed = /* @__PURE__ */ withWasm((wasm, phrase, password) => {
  wasm.ext_bip39_to_seed(8, ...bridge.allocString(phrase), ...bridge.allocString(password));
  return bridge.resultU8a();
});
const bip39Validate = /* @__PURE__ */ withWasm((wasm, phrase) => {
  const ret = wasm.ext_bip39_validate(...bridge.allocString(phrase));
  return ret !== 0;
});
const ed25519KeypairFromSeed = /* @__PURE__ */ withWasm((wasm, seed) => {
  wasm.ext_ed_from_seed(8, ...bridge.allocU8a(seed));
  return bridge.resultU8a();
});
const ed25519Sign$1 = /* @__PURE__ */ withWasm((wasm, pubkey, seckey, message) => {
  wasm.ext_ed_sign(8, ...bridge.allocU8a(pubkey), ...bridge.allocU8a(seckey), ...bridge.allocU8a(message));
  return bridge.resultU8a();
});
const ed25519Verify$1 = /* @__PURE__ */ withWasm((wasm, signature, message, pubkey) => {
  const ret = wasm.ext_ed_verify(...bridge.allocU8a(signature), ...bridge.allocU8a(message), ...bridge.allocU8a(pubkey));
  return ret !== 0;
});
const secp256k1FromSeed = /* @__PURE__ */ withWasm((wasm, seckey) => {
  wasm.ext_secp_from_seed(8, ...bridge.allocU8a(seckey));
  return bridge.resultU8a();
});
const secp256k1Compress$1 = /* @__PURE__ */ withWasm((wasm, pubkey) => {
  wasm.ext_secp_pub_compress(8, ...bridge.allocU8a(pubkey));
  return bridge.resultU8a();
});
const secp256k1Expand$1 = /* @__PURE__ */ withWasm((wasm, pubkey) => {
  wasm.ext_secp_pub_expand(8, ...bridge.allocU8a(pubkey));
  return bridge.resultU8a();
});
const secp256k1Recover$1 = /* @__PURE__ */ withWasm((wasm, msgHash, sig2, recovery) => {
  wasm.ext_secp_recover(8, ...bridge.allocU8a(msgHash), ...bridge.allocU8a(sig2), recovery);
  return bridge.resultU8a();
});
const secp256k1Sign$1 = /* @__PURE__ */ withWasm((wasm, msgHash, seckey) => {
  wasm.ext_secp_sign(8, ...bridge.allocU8a(msgHash), ...bridge.allocU8a(seckey));
  return bridge.resultU8a();
});
const sr25519DeriveKeypairHard = /* @__PURE__ */ withWasm((wasm, pair, cc) => {
  wasm.ext_sr_derive_keypair_hard(8, ...bridge.allocU8a(pair), ...bridge.allocU8a(cc));
  return bridge.resultU8a();
});
const sr25519DeriveKeypairSoft = /* @__PURE__ */ withWasm((wasm, pair, cc) => {
  wasm.ext_sr_derive_keypair_soft(8, ...bridge.allocU8a(pair), ...bridge.allocU8a(cc));
  return bridge.resultU8a();
});
const sr25519KeypairFromSeed = /* @__PURE__ */ withWasm((wasm, seed) => {
  wasm.ext_sr_from_seed(8, ...bridge.allocU8a(seed));
  return bridge.resultU8a();
});
const sr25519Sign$1 = /* @__PURE__ */ withWasm((wasm, pubkey, secret, message) => {
  wasm.ext_sr_sign(8, ...bridge.allocU8a(pubkey), ...bridge.allocU8a(secret), ...bridge.allocU8a(message));
  return bridge.resultU8a();
});
const sr25519Verify$1 = /* @__PURE__ */ withWasm((wasm, signature, message, pubkey) => {
  const ret = wasm.ext_sr_verify(...bridge.allocU8a(signature), ...bridge.allocU8a(message), ...bridge.allocU8a(pubkey));
  return ret !== 0;
});
const vrfSign = /* @__PURE__ */ withWasm((wasm, secret, context, message, extra) => {
  wasm.ext_vrf_sign(8, ...bridge.allocU8a(secret), ...bridge.allocU8a(context), ...bridge.allocU8a(message), ...bridge.allocU8a(extra));
  return bridge.resultU8a();
});
const vrfVerify = /* @__PURE__ */ withWasm((wasm, pubkey, context, message, extra, outAndProof) => {
  const ret = wasm.ext_vrf_verify(...bridge.allocU8a(pubkey), ...bridge.allocU8a(context), ...bridge.allocU8a(message), ...bridge.allocU8a(extra), ...bridge.allocU8a(outAndProof));
  return ret !== 0;
});
const blake2b$1 = /* @__PURE__ */ withWasm((wasm, data, key, size) => {
  wasm.ext_blake2b(8, ...bridge.allocU8a(data), ...bridge.allocU8a(key), size);
  return bridge.resultU8a();
});
const hmacSha256 = /* @__PURE__ */ withWasm((wasm, key, data) => {
  wasm.ext_hmac_sha256(8, ...bridge.allocU8a(key), ...bridge.allocU8a(data));
  return bridge.resultU8a();
});
const hmacSha512 = /* @__PURE__ */ withWasm((wasm, key, data) => {
  wasm.ext_hmac_sha512(8, ...bridge.allocU8a(key), ...bridge.allocU8a(data));
  return bridge.resultU8a();
});
const keccak256 = /* @__PURE__ */ withWasm((wasm, data) => {
  wasm.ext_keccak256(8, ...bridge.allocU8a(data));
  return bridge.resultU8a();
});
const keccak512 = /* @__PURE__ */ withWasm((wasm, data) => {
  wasm.ext_keccak512(8, ...bridge.allocU8a(data));
  return bridge.resultU8a();
});
const pbkdf2$1 = /* @__PURE__ */ withWasm((wasm, data, salt, rounds) => {
  wasm.ext_pbkdf2(8, ...bridge.allocU8a(data), ...bridge.allocU8a(salt), rounds);
  return bridge.resultU8a();
});
const scrypt$1 = /* @__PURE__ */ withWasm((wasm, password, salt, log2n, r, p) => {
  wasm.ext_scrypt(8, ...bridge.allocU8a(password), ...bridge.allocU8a(salt), log2n, r, p);
  return bridge.resultU8a();
});
const sha256$1 = /* @__PURE__ */ withWasm((wasm, data) => {
  wasm.ext_sha256(8, ...bridge.allocU8a(data));
  return bridge.resultU8a();
});
const sha512$1 = /* @__PURE__ */ withWasm((wasm, data) => {
  wasm.ext_sha512(8, ...bridge.allocU8a(data));
  return bridge.resultU8a();
});
const twox = /* @__PURE__ */ withWasm((wasm, data, rounds) => {
  wasm.ext_twox(8, ...bridge.allocU8a(data), rounds);
  return bridge.resultU8a();
});
function isReady() {
  return !!bridge.wasm;
}
async function waitReady() {
  try {
    const wasm = await initBridge();
    return !!wasm;
  } catch {
    return false;
  }
}
function cryptoWaitReady() {
  return waitReady().then(() => {
    if (!isReady()) {
      throw new Error("Unable to initialize @polkadot/util-crypto");
    }
    return true;
  }).catch(() => false);
}
// @__NO_SIDE_EFFECTS__
function assertNumber(n) {
  if (!Number.isSafeInteger(n))
    throw new Error(`Wrong integer: ${n}`);
}
function isBytes$3(a) {
  return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
}
// @__NO_SIDE_EFFECTS__
function chain$1(...args) {
  const id = (a) => a;
  const wrap = (a, b) => (c) => a(b(c));
  const encode = args.map((x) => x.encode).reduceRight(wrap, id);
  const decode2 = args.map((x) => x.decode).reduce(wrap, id);
  return { encode, decode: decode2 };
}
// @__NO_SIDE_EFFECTS__
function alphabet(alphabet2) {
  return {
    encode: (digits) => {
      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
        throw new Error("alphabet.encode input should be an array of numbers");
      return digits.map((i) => {
        /* @__PURE__ */ assertNumber(i);
        if (i < 0 || i >= alphabet2.length)
          throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet2.length})`);
        return alphabet2[i];
      });
    },
    decode: (input) => {
      if (!Array.isArray(input) || input.length && typeof input[0] !== "string")
        throw new Error("alphabet.decode input should be array of strings");
      return input.map((letter) => {
        if (typeof letter !== "string")
          throw new Error(`alphabet.decode: not string element=${letter}`);
        const index = alphabet2.indexOf(letter);
        if (index === -1)
          throw new Error(`Unknown letter: "${letter}". Allowed: ${alphabet2}`);
        return index;
      });
    }
  };
}
// @__NO_SIDE_EFFECTS__
function join(separator = "") {
  if (typeof separator !== "string")
    throw new Error("join separator should be string");
  return {
    encode: (from2) => {
      if (!Array.isArray(from2) || from2.length && typeof from2[0] !== "string")
        throw new Error("join.encode input should be array of strings");
      for (let i of from2)
        if (typeof i !== "string")
          throw new Error(`join.encode: non-string input=${i}`);
      return from2.join(separator);
    },
    decode: (to) => {
      if (typeof to !== "string")
        throw new Error("join.decode input should be string");
      return to.split(separator);
    }
  };
}
// @__NO_SIDE_EFFECTS__
function padding(bits2, chr = "=") {
  /* @__PURE__ */ assertNumber(bits2);
  if (typeof chr !== "string")
    throw new Error("padding chr should be string");
  return {
    encode(data) {
      if (!Array.isArray(data) || data.length && typeof data[0] !== "string")
        throw new Error("padding.encode input should be array of strings");
      for (let i of data)
        if (typeof i !== "string")
          throw new Error(`padding.encode: non-string input=${i}`);
      while (data.length * bits2 % 8)
        data.push(chr);
      return data;
    },
    decode(input) {
      if (!Array.isArray(input) || input.length && typeof input[0] !== "string")
        throw new Error("padding.encode input should be array of strings");
      for (let i of input)
        if (typeof i !== "string")
          throw new Error(`padding.decode: non-string input=${i}`);
      let end = input.length;
      if (end * bits2 % 8)
        throw new Error("Invalid padding: string should have whole number of bytes");
      for (; end > 0 && input[end - 1] === chr; end--) {
        if (!((end - 1) * bits2 % 8))
          throw new Error("Invalid padding: string has too much padding");
      }
      return input.slice(0, end);
    }
  };
}
// @__NO_SIDE_EFFECTS__
function normalize$1(fn) {
  if (typeof fn !== "function")
    throw new Error("normalize fn should be function");
  return { encode: (from2) => from2, decode: (to) => fn(to) };
}
// @__NO_SIDE_EFFECTS__
function convertRadix(data, from2, to) {
  if (from2 < 2)
    throw new Error(`convertRadix: wrong from=${from2}, base cannot be less than 2`);
  if (to < 2)
    throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);
  if (!Array.isArray(data))
    throw new Error("convertRadix: data should be array");
  if (!data.length)
    return [];
  let pos = 0;
  const res = [];
  const digits = Array.from(data);
  digits.forEach((d) => {
    /* @__PURE__ */ assertNumber(d);
    if (d < 0 || d >= from2)
      throw new Error(`Wrong integer: ${d}`);
  });
  while (true) {
    let carry = 0;
    let done = true;
    for (let i = pos; i < digits.length; i++) {
      const digit = digits[i];
      const digitBase = from2 * carry + digit;
      if (!Number.isSafeInteger(digitBase) || from2 * carry / from2 !== carry || digitBase - digit !== from2 * carry) {
        throw new Error("convertRadix: carry overflow");
      }
      carry = digitBase % to;
      const rounded = Math.floor(digitBase / to);
      digits[i] = rounded;
      if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)
        throw new Error("convertRadix: carry overflow");
      if (!done)
        continue;
      else if (!rounded)
        pos = i;
      else
        done = false;
    }
    res.push(carry);
    if (done)
      break;
  }
  for (let i = 0; i < data.length - 1 && data[i] === 0; i++)
    res.push(0);
  return res.reverse();
}
const gcd = /* @__NO_SIDE_EFFECTS__ */ (a, b) => !b ? a : /* @__PURE__ */ gcd(b, a % b);
const radix2carry = /* @__NO_SIDE_EFFECTS__ */ (from2, to) => from2 + (to - /* @__PURE__ */ gcd(from2, to));
// @__NO_SIDE_EFFECTS__
function convertRadix2(data, from2, to, padding2) {
  if (!Array.isArray(data))
    throw new Error("convertRadix2: data should be array");
  if (from2 <= 0 || from2 > 32)
    throw new Error(`convertRadix2: wrong from=${from2}`);
  if (to <= 0 || to > 32)
    throw new Error(`convertRadix2: wrong to=${to}`);
  if (/* @__PURE__ */ radix2carry(from2, to) > 32) {
    throw new Error(`convertRadix2: carry overflow from=${from2} to=${to} carryBits=${/* @__PURE__ */ radix2carry(from2, to)}`);
  }
  let carry = 0;
  let pos = 0;
  const mask = 2 ** to - 1;
  const res = [];
  for (const n of data) {
    /* @__PURE__ */ assertNumber(n);
    if (n >= 2 ** from2)
      throw new Error(`convertRadix2: invalid data word=${n} from=${from2}`);
    carry = carry << from2 | n;
    if (pos + from2 > 32)
      throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from2}`);
    pos += from2;
    for (; pos >= to; pos -= to)
      res.push((carry >> pos - to & mask) >>> 0);
    carry &= 2 ** pos - 1;
  }
  carry = carry << to - pos & mask;
  if (!padding2 && pos >= from2)
    throw new Error("Excess padding");
  if (!padding2 && carry)
    throw new Error(`Non-zero padding: ${carry}`);
  if (padding2 && pos > 0)
    res.push(carry >>> 0);
  return res;
}
// @__NO_SIDE_EFFECTS__
function radix(num) {
  /* @__PURE__ */ assertNumber(num);
  return {
    encode: (bytes2) => {
      if (!isBytes$3(bytes2))
        throw new Error("radix.encode input should be Uint8Array");
      return /* @__PURE__ */ convertRadix(Array.from(bytes2), 2 ** 8, num);
    },
    decode: (digits) => {
      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
        throw new Error("radix.decode input should be array of numbers");
      return Uint8Array.from(/* @__PURE__ */ convertRadix(digits, num, 2 ** 8));
    }
  };
}
// @__NO_SIDE_EFFECTS__
function radix2(bits2, revPadding = false) {
  /* @__PURE__ */ assertNumber(bits2);
  if (bits2 <= 0 || bits2 > 32)
    throw new Error("radix2: bits should be in (0..32]");
  if (/* @__PURE__ */ radix2carry(8, bits2) > 32 || /* @__PURE__ */ radix2carry(bits2, 8) > 32)
    throw new Error("radix2: carry overflow");
  return {
    encode: (bytes2) => {
      if (!isBytes$3(bytes2))
        throw new Error("radix2.encode input should be Uint8Array");
      return /* @__PURE__ */ convertRadix2(Array.from(bytes2), 8, bits2, !revPadding);
    },
    decode: (digits) => {
      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
        throw new Error("radix2.decode input should be array of numbers");
      return Uint8Array.from(/* @__PURE__ */ convertRadix2(digits, bits2, 8, revPadding));
    }
  };
}
// @__NO_SIDE_EFFECTS__
function unsafeWrapper(fn) {
  if (typeof fn !== "function")
    throw new Error("unsafeWrapper fn should be function");
  return function(...args) {
    try {
      return fn.apply(null, args);
    } catch (e) {
    }
  };
}
/* @__PURE__ */ chain$1(/* @__PURE__ */ radix2(4), /* @__PURE__ */ alphabet("0123456789ABCDEF"), /* @__PURE__ */ join(""));
/* @__PURE__ */ chain$1(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), /* @__PURE__ */ padding(5), /* @__PURE__ */ join(""));
/* @__PURE__ */ chain$1(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), /* @__PURE__ */ padding(5), /* @__PURE__ */ join(""));
/* @__PURE__ */ chain$1(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), /* @__PURE__ */ join(""), /* @__PURE__ */ normalize$1((s) => s.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
const base64 = /* @__PURE__ */ chain$1(/* @__PURE__ */ radix2(6), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), /* @__PURE__ */ padding(6), /* @__PURE__ */ join(""));
/* @__PURE__ */ chain$1(/* @__PURE__ */ radix2(6), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), /* @__PURE__ */ padding(6), /* @__PURE__ */ join(""));
/* @__PURE__ */ chain$1(/* @__PURE__ */ radix2(6), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), /* @__PURE__ */ join(""));
const genBase58 = (abc) => /* @__PURE__ */ chain$1(/* @__PURE__ */ radix(58), /* @__PURE__ */ alphabet(abc), /* @__PURE__ */ join(""));
const base58 = /* @__PURE__ */ genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
/* @__PURE__ */ genBase58("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
/* @__PURE__ */ genBase58("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
const BECH_ALPHABET = /* @__PURE__ */ chain$1(/* @__PURE__ */ alphabet("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), /* @__PURE__ */ join(""));
const POLYMOD_GENERATORS = [996825010, 642813549, 513874426, 1027748829, 705979059];
// @__NO_SIDE_EFFECTS__
function bech32Polymod(pre) {
  const b = pre >> 25;
  let chk = (pre & 33554431) << 5;
  for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {
    if ((b >> i & 1) === 1)
      chk ^= POLYMOD_GENERATORS[i];
  }
  return chk;
}
// @__NO_SIDE_EFFECTS__
function bechChecksum(prefix2, words, encodingConst = 1) {
  const len = prefix2.length;
  let chk = 1;
  for (let i = 0; i < len; i++) {
    const c = prefix2.charCodeAt(i);
    if (c < 33 || c > 126)
      throw new Error(`Invalid prefix (${prefix2})`);
    chk = /* @__PURE__ */ bech32Polymod(chk) ^ c >> 5;
  }
  chk = /* @__PURE__ */ bech32Polymod(chk);
  for (let i = 0; i < len; i++)
    chk = /* @__PURE__ */ bech32Polymod(chk) ^ prefix2.charCodeAt(i) & 31;
  for (let v of words)
    chk = /* @__PURE__ */ bech32Polymod(chk) ^ v;
  for (let i = 0; i < 6; i++)
    chk = /* @__PURE__ */ bech32Polymod(chk);
  chk ^= encodingConst;
  return BECH_ALPHABET.encode(/* @__PURE__ */ convertRadix2([chk % 2 ** 30], 30, 5, false));
}
// @__NO_SIDE_EFFECTS__
function genBech32(encoding) {
  const ENCODING_CONST = encoding === "bech32" ? 1 : 734539939;
  const _words = /* @__PURE__ */ radix2(5);
  const fromWords = _words.decode;
  const toWords = _words.encode;
  const fromWordsUnsafe = /* @__PURE__ */ unsafeWrapper(fromWords);
  function encode(prefix2, words, limit = 90) {
    if (typeof prefix2 !== "string")
      throw new Error(`bech32.encode prefix should be string, not ${typeof prefix2}`);
    if (!Array.isArray(words) || words.length && typeof words[0] !== "number")
      throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);
    const actualLength = prefix2.length + 7 + words.length;
    if (limit !== false && actualLength > limit)
      throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);
    const lowered = prefix2.toLowerCase();
    const sum = /* @__PURE__ */ bechChecksum(lowered, words, ENCODING_CONST);
    return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;
  }
  function decode2(str, limit = 90) {
    if (typeof str !== "string")
      throw new Error(`bech32.decode input should be string, not ${typeof str}`);
    if (str.length < 8 || limit !== false && str.length > limit)
      throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);
    const lowered = str.toLowerCase();
    if (str !== lowered && str !== str.toUpperCase())
      throw new Error(`String must be lowercase or uppercase`);
    str = lowered;
    const sepIndex = str.lastIndexOf("1");
    if (sepIndex === 0 || sepIndex === -1)
      throw new Error(`Letter "1" must be present between prefix and data only`);
    const prefix2 = str.slice(0, sepIndex);
    const _words2 = str.slice(sepIndex + 1);
    if (_words2.length < 6)
      throw new Error("Data must be at least 6 characters long");
    const words = BECH_ALPHABET.decode(_words2).slice(0, -6);
    const sum = /* @__PURE__ */ bechChecksum(prefix2, words, ENCODING_CONST);
    if (!_words2.endsWith(sum))
      throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
    return { prefix: prefix2, words };
  }
  const decodeUnsafe = /* @__PURE__ */ unsafeWrapper(decode2);
  function decodeToBytes(str) {
    const { prefix: prefix2, words } = decode2(str, false);
    return { prefix: prefix2, words, bytes: fromWords(words) };
  }
  return { encode, decode: decode2, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };
}
/* @__PURE__ */ genBech32("bech32");
/* @__PURE__ */ genBech32("bech32m");
/* @__PURE__ */ chain$1(/* @__PURE__ */ radix2(4), /* @__PURE__ */ alphabet("0123456789abcdef"), /* @__PURE__ */ join(""), /* @__PURE__ */ normalize$1((s) => {
  if (typeof s !== "string" || s.length % 2)
    throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);
  return s.toLowerCase();
}));
function createDecode({ coder, ipfs }, validate) {
  return (value, ipfsCompat) => {
    validate(value, ipfsCompat);
    return coder.decode(ipfs && ipfsCompat ? value.substring(1) : value);
  };
}
function createEncode({ coder, ipfs }) {
  return (value, ipfsCompat) => {
    const out = coder.encode(u8aToU8a(value));
    return ipfs && ipfsCompat ? `${ipfs}${out}` : out;
  };
}
function createValidate({ chars: chars2, ipfs, type, withPadding }) {
  return (value, ipfsCompat) => {
    if (typeof value !== "string") {
      throw new Error(`Expected ${type} string input`);
    } else if (ipfs && ipfsCompat && !value.startsWith(ipfs)) {
      throw new Error(`Expected ipfs-compatible ${type} to start with '${ipfs}'`);
    }
    for (let i = ipfsCompat ? 1 : 0, count = value.length; i < count; i++) {
      if (chars2.includes(value[i]))
        ;
      else if (withPadding && value[i] === "=") {
        if (i === count - 1)
          ;
        else if (value[i + 1] === "=")
          ;
        else {
          throw new Error(`Invalid ${type} padding sequence "${value[i]}${value[i + 1]}" at index ${i}`);
        }
      } else {
        throw new Error(`Invalid ${type} character "${value[i]}" (0x${value.charCodeAt(i).toString(16)}) at index ${i}`);
      }
    }
    return true;
  };
}
const config$1 = {
  chars: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
  coder: base58,
  ipfs: "z",
  type: "base58"
};
const base58Validate = /* @__PURE__ */ createValidate(config$1);
const base58Decode = /* @__PURE__ */ createDecode(config$1, base58Validate);
const base58Encode = /* @__PURE__ */ createEncode(config$1);
function number(n) {
  if (!Number.isSafeInteger(n) || n < 0)
    throw new Error(`Wrong positive integer: ${n}`);
}
function isBytes$2(a) {
  return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
}
function bytes(b, ...lengths) {
  if (!isBytes$2(b))
    throw new Error("Expected Uint8Array");
  if (lengths.length > 0 && !lengths.includes(b.length))
    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
}
function hash(hash2) {
  if (typeof hash2 !== "function" || typeof hash2.create !== "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  number(hash2.outputLen);
  number(hash2.blockLen);
}
function exists(instance2, checkFinished = true) {
  if (instance2.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance2.finished)
    throw new Error("Hash#digest() has already been called");
}
function output(out, instance2) {
  bytes(out);
  const min = instance2.outputLen;
  if (out.length < min) {
    throw new Error(`digestInto() expects output buffer of length at least ${min}`);
  }
}
const crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
const u322 = (arr2) => new Uint32Array(arr2.buffer, arr2.byteOffset, Math.floor(arr2.byteLength / 4));
function isBytes$1(a) {
  return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
}
const createView = (arr2) => new DataView(arr2.buffer, arr2.byteOffset, arr2.byteLength);
const rotr = (word, shift) => word << 32 - shift | word >>> shift;
const isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!isLE)
  throw new Error("Non little-endian hardware is not supported");
/* @__PURE__ */ Array.from({ length: 256 }, (_23, i) => i.toString(16).padStart(2, "0"));
function utf8ToBytes$1(str) {
  if (typeof str !== "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
  return new Uint8Array(new TextEncoder().encode(str));
}
function toBytes(data) {
  if (typeof data === "string")
    data = utf8ToBytes$1(data);
  if (!isBytes$1(data))
    throw new Error(`expected Uint8Array, got ${typeof data}`);
  return data;
}
function concatBytes$1(...arrays) {
  let sum = 0;
  for (let i = 0; i < arrays.length; i++) {
    const a = arrays[i];
    if (!isBytes$1(a))
      throw new Error("Uint8Array expected");
    sum += a.length;
  }
  const res = new Uint8Array(sum);
  for (let i = 0, pad = 0; i < arrays.length; i++) {
    const a = arrays[i];
    res.set(a, pad);
    pad += a.length;
  }
  return res;
}
class Hash {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
}
const toStr = {}.toString;
function checkOpts(defaults2, opts) {
  if (opts !== void 0 && toStr.call(opts) !== "[object Object]")
    throw new Error("Options should be object or undefined");
  const merged = Object.assign(defaults2, opts);
  return merged;
}
function wrapConstructor(hashCons) {
  const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
  const tmp = hashCons();
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = () => hashCons();
  return hashC;
}
function wrapConstructorWithOpts(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (opts) => hashCons(opts);
  return hashC;
}
function wrapXOFConstructorWithOpts(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (opts) => hashCons(opts);
  return hashC;
}
function randomBytes(bytesLength = 32) {
  if (crypto && typeof crypto.getRandomValues === "function") {
    return crypto.getRandomValues(new Uint8Array(bytesLength));
  }
  throw new Error("crypto.getRandomValues must be defined");
}
const SIGMA = /* @__PURE__ */ new Uint8Array([
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  14,
  10,
  4,
  8,
  9,
  15,
  13,
  6,
  1,
  12,
  0,
  2,
  11,
  7,
  5,
  3,
  11,
  8,
  12,
  0,
  5,
  2,
  15,
  13,
  10,
  14,
  3,
  6,
  7,
  1,
  9,
  4,
  7,
  9,
  3,
  1,
  13,
  12,
  11,
  14,
  2,
  6,
  5,
  10,
  4,
  0,
  15,
  8,
  9,
  0,
  5,
  7,
  2,
  4,
  10,
  15,
  14,
  1,
  11,
  12,
  6,
  8,
  3,
  13,
  2,
  12,
  6,
  10,
  0,
  11,
  8,
  3,
  4,
  13,
  7,
  5,
  15,
  14,
  1,
  9,
  12,
  5,
  1,
  15,
  14,
  13,
  4,
  10,
  0,
  7,
  6,
  3,
  9,
  2,
  8,
  11,
  13,
  11,
  7,
  14,
  12,
  1,
  3,
  9,
  5,
  0,
  15,
  4,
  8,
  6,
  2,
  10,
  6,
  15,
  14,
  9,
  11,
  3,
  0,
  8,
  12,
  2,
  13,
  7,
  1,
  4,
  10,
  5,
  10,
  2,
  8,
  4,
  7,
  6,
  1,
  5,
  15,
  11,
  9,
  14,
  3,
  12,
  13,
  0,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  14,
  10,
  4,
  8,
  9,
  15,
  13,
  6,
  1,
  12,
  0,
  2,
  11,
  7,
  5,
  3
]);
class BLAKE2 extends Hash {
  constructor(blockLen, outputLen, opts = {}, keyLen, saltLen, persLen) {
    super();
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.length = 0;
    this.pos = 0;
    this.finished = false;
    this.destroyed = false;
    number(blockLen);
    number(outputLen);
    number(keyLen);
    if (outputLen < 0 || outputLen > keyLen)
      throw new Error("outputLen bigger than keyLen");
    if (opts.key !== void 0 && (opts.key.length < 1 || opts.key.length > keyLen))
      throw new Error(`key must be up 1..${keyLen} byte long or undefined`);
    if (opts.salt !== void 0 && opts.salt.length !== saltLen)
      throw new Error(`salt must be ${saltLen} byte long or undefined`);
    if (opts.personalization !== void 0 && opts.personalization.length !== persLen)
      throw new Error(`personalization must be ${persLen} byte long or undefined`);
    this.buffer32 = u322(this.buffer = new Uint8Array(blockLen));
  }
  update(data) {
    exists(this);
    const { blockLen, buffer, buffer32 } = this;
    data = toBytes(data);
    const len = data.length;
    const offset = data.byteOffset;
    const buf = data.buffer;
    for (let pos = 0; pos < len; ) {
      if (this.pos === blockLen) {
        this.compress(buffer32, 0, false);
        this.pos = 0;
      }
      const take2 = Math.min(blockLen - this.pos, len - pos);
      const dataOffset = offset + pos;
      if (take2 === blockLen && !(dataOffset % 4) && pos + take2 < len) {
        const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));
        for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {
          this.length += blockLen;
          this.compress(data32, pos32, false);
        }
        continue;
      }
      buffer.set(data.subarray(pos, pos + take2), this.pos);
      this.pos += take2;
      this.length += take2;
      pos += take2;
    }
    return this;
  }
  digestInto(out) {
    exists(this);
    output(out, this);
    const { pos, buffer32 } = this;
    this.finished = true;
    this.buffer.subarray(pos).fill(0);
    this.compress(buffer32, 0, true);
    const out32 = u322(out);
    this.get().forEach((v, i) => out32[i] = v);
  }
  digest() {
    const { buffer, outputLen } = this;
    this.digestInto(buffer);
    const res = buffer.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to) {
    const { buffer, length: length2, finished, destroyed, outputLen, pos } = this;
    to || (to = new this.constructor({ dkLen: outputLen }));
    to.set(...this.get());
    to.length = length2;
    to.finished = finished;
    to.destroyed = destroyed;
    to.outputLen = outputLen;
    to.buffer.set(buffer);
    to.pos = pos;
    return to;
  }
}
const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
const _32n$1 = /* @__PURE__ */ BigInt(32);
function fromBig(n, le = false) {
  if (le)
    return { h: Number(n & U32_MASK64), l: Number(n >> _32n$1 & U32_MASK64) };
  return { h: Number(n >> _32n$1 & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
}
function split(lst, le = false) {
  let Ah = new Uint32Array(lst.length);
  let Al = new Uint32Array(lst.length);
  for (let i = 0; i < lst.length; i++) {
    const { h, l: l2 } = fromBig(lst[i], le);
    [Ah[i], Al[i]] = [h, l2];
  }
  return [Ah, Al];
}
const toBig = (h, l2) => BigInt(h >>> 0) << _32n$1 | BigInt(l2 >>> 0);
const shrSH = (h, _l, s) => h >>> s;
const shrSL = (h, l2, s) => h << 32 - s | l2 >>> s;
const rotrSH = (h, l2, s) => h >>> s | l2 << 32 - s;
const rotrSL = (h, l2, s) => h << 32 - s | l2 >>> s;
const rotrBH = (h, l2, s) => h << 64 - s | l2 >>> s - 32;
const rotrBL = (h, l2, s) => h >>> s - 32 | l2 << 64 - s;
const rotr32H = (_h, l2) => l2;
const rotr32L = (h, _l) => h;
const rotlSH = (h, l2, s) => h << s | l2 >>> 32 - s;
const rotlSL = (h, l2, s) => l2 << s | h >>> 32 - s;
const rotlBH = (h, l2, s) => l2 << s - 32 | h >>> 64 - s;
const rotlBL = (h, l2, s) => h << s - 32 | l2 >>> 64 - s;
function add(Ah, Al, Bh, Bl) {
  const l2 = (Al >>> 0) + (Bl >>> 0);
  return { h: Ah + Bh + (l2 / 2 ** 32 | 0) | 0, l: l2 | 0 };
}
const add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
const add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
const add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
const add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
const add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
const add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
const u642 = {
  fromBig,
  split,
  toBig,
  shrSH,
  shrSL,
  rotrSH,
  rotrSL,
  rotrBH,
  rotrBL,
  rotr32H,
  rotr32L,
  rotlSH,
  rotlSL,
  rotlBH,
  rotlBL,
  add,
  add3L,
  add3H,
  add4L,
  add4H,
  add5H,
  add5L
};
const u64$1 = u642;
const IV$1 = /* @__PURE__ */ new Uint32Array([
  4089235720,
  1779033703,
  2227873595,
  3144134277,
  4271175723,
  1013904242,
  1595750129,
  2773480762,
  2917565137,
  1359893119,
  725511199,
  2600822924,
  4215389547,
  528734635,
  327033209,
  1541459225
]);
const BUF = /* @__PURE__ */ new Uint32Array(32);
function G1(a, b, c, d, msg, x) {
  const Xl = msg[x], Xh = msg[x + 1];
  let Al = BUF[2 * a], Ah = BUF[2 * a + 1];
  let Bl = BUF[2 * b], Bh = BUF[2 * b + 1];
  let Cl = BUF[2 * c], Ch = BUF[2 * c + 1];
  let Dl = BUF[2 * d], Dh = BUF[2 * d + 1];
  let ll = u64$1.add3L(Al, Bl, Xl);
  Ah = u64$1.add3H(ll, Ah, Bh, Xh);
  Al = ll | 0;
  ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
  ({ Dh, Dl } = { Dh: u64$1.rotr32H(Dh, Dl), Dl: u64$1.rotr32L(Dh, Dl) });
  ({ h: Ch, l: Cl } = u64$1.add(Ch, Cl, Dh, Dl));
  ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
  ({ Bh, Bl } = { Bh: u64$1.rotrSH(Bh, Bl, 24), Bl: u64$1.rotrSL(Bh, Bl, 24) });
  BUF[2 * a] = Al, BUF[2 * a + 1] = Ah;
  BUF[2 * b] = Bl, BUF[2 * b + 1] = Bh;
  BUF[2 * c] = Cl, BUF[2 * c + 1] = Ch;
  BUF[2 * d] = Dl, BUF[2 * d + 1] = Dh;
}
function G2(a, b, c, d, msg, x) {
  const Xl = msg[x], Xh = msg[x + 1];
  let Al = BUF[2 * a], Ah = BUF[2 * a + 1];
  let Bl = BUF[2 * b], Bh = BUF[2 * b + 1];
  let Cl = BUF[2 * c], Ch = BUF[2 * c + 1];
  let Dl = BUF[2 * d], Dh = BUF[2 * d + 1];
  let ll = u64$1.add3L(Al, Bl, Xl);
  Ah = u64$1.add3H(ll, Ah, Bh, Xh);
  Al = ll | 0;
  ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
  ({ Dh, Dl } = { Dh: u64$1.rotrSH(Dh, Dl, 16), Dl: u64$1.rotrSL(Dh, Dl, 16) });
  ({ h: Ch, l: Cl } = u64$1.add(Ch, Cl, Dh, Dl));
  ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
  ({ Bh, Bl } = { Bh: u64$1.rotrBH(Bh, Bl, 63), Bl: u64$1.rotrBL(Bh, Bl, 63) });
  BUF[2 * a] = Al, BUF[2 * a + 1] = Ah;
  BUF[2 * b] = Bl, BUF[2 * b + 1] = Bh;
  BUF[2 * c] = Cl, BUF[2 * c + 1] = Ch;
  BUF[2 * d] = Dl, BUF[2 * d + 1] = Dh;
}
class BLAKE2b extends BLAKE2 {
  constructor(opts = {}) {
    super(128, opts.dkLen === void 0 ? 64 : opts.dkLen, opts, 64, 16, 16);
    this.v0l = IV$1[0] | 0;
    this.v0h = IV$1[1] | 0;
    this.v1l = IV$1[2] | 0;
    this.v1h = IV$1[3] | 0;
    this.v2l = IV$1[4] | 0;
    this.v2h = IV$1[5] | 0;
    this.v3l = IV$1[6] | 0;
    this.v3h = IV$1[7] | 0;
    this.v4l = IV$1[8] | 0;
    this.v4h = IV$1[9] | 0;
    this.v5l = IV$1[10] | 0;
    this.v5h = IV$1[11] | 0;
    this.v6l = IV$1[12] | 0;
    this.v6h = IV$1[13] | 0;
    this.v7l = IV$1[14] | 0;
    this.v7h = IV$1[15] | 0;
    const keyLength = opts.key ? opts.key.length : 0;
    this.v0l ^= this.outputLen | keyLength << 8 | 1 << 16 | 1 << 24;
    if (opts.salt) {
      const salt = u322(toBytes(opts.salt));
      this.v4l ^= salt[0];
      this.v4h ^= salt[1];
      this.v5l ^= salt[2];
      this.v5h ^= salt[3];
    }
    if (opts.personalization) {
      const pers = u322(toBytes(opts.personalization));
      this.v6l ^= pers[0];
      this.v6h ^= pers[1];
      this.v7l ^= pers[2];
      this.v7h ^= pers[3];
    }
    if (opts.key) {
      const tmp = new Uint8Array(this.blockLen);
      tmp.set(toBytes(opts.key));
      this.update(tmp);
    }
  }
  // prettier-ignore
  get() {
    let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;
    return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];
  }
  // prettier-ignore
  set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {
    this.v0l = v0l | 0;
    this.v0h = v0h | 0;
    this.v1l = v1l | 0;
    this.v1h = v1h | 0;
    this.v2l = v2l | 0;
    this.v2h = v2h | 0;
    this.v3l = v3l | 0;
    this.v3h = v3h | 0;
    this.v4l = v4l | 0;
    this.v4h = v4h | 0;
    this.v5l = v5l | 0;
    this.v5h = v5h | 0;
    this.v6l = v6l | 0;
    this.v6h = v6h | 0;
    this.v7l = v7l | 0;
    this.v7h = v7h | 0;
  }
  compress(msg, offset, isLast) {
    this.get().forEach((v, i) => BUF[i] = v);
    BUF.set(IV$1, 16);
    let { h, l: l2 } = u64$1.fromBig(BigInt(this.length));
    BUF[24] = IV$1[8] ^ l2;
    BUF[25] = IV$1[9] ^ h;
    if (isLast) {
      BUF[28] = ~BUF[28];
      BUF[29] = ~BUF[29];
    }
    let j = 0;
    const s = SIGMA;
    for (let i = 0; i < 12; i++) {
      G1(0, 4, 8, 12, msg, offset + 2 * s[j++]);
      G2(0, 4, 8, 12, msg, offset + 2 * s[j++]);
      G1(1, 5, 9, 13, msg, offset + 2 * s[j++]);
      G2(1, 5, 9, 13, msg, offset + 2 * s[j++]);
      G1(2, 6, 10, 14, msg, offset + 2 * s[j++]);
      G2(2, 6, 10, 14, msg, offset + 2 * s[j++]);
      G1(3, 7, 11, 15, msg, offset + 2 * s[j++]);
      G2(3, 7, 11, 15, msg, offset + 2 * s[j++]);
      G1(0, 5, 10, 15, msg, offset + 2 * s[j++]);
      G2(0, 5, 10, 15, msg, offset + 2 * s[j++]);
      G1(1, 6, 11, 12, msg, offset + 2 * s[j++]);
      G2(1, 6, 11, 12, msg, offset + 2 * s[j++]);
      G1(2, 7, 8, 13, msg, offset + 2 * s[j++]);
      G2(2, 7, 8, 13, msg, offset + 2 * s[j++]);
      G1(3, 4, 9, 14, msg, offset + 2 * s[j++]);
      G2(3, 4, 9, 14, msg, offset + 2 * s[j++]);
    }
    this.v0l ^= BUF[0] ^ BUF[16];
    this.v0h ^= BUF[1] ^ BUF[17];
    this.v1l ^= BUF[2] ^ BUF[18];
    this.v1h ^= BUF[3] ^ BUF[19];
    this.v2l ^= BUF[4] ^ BUF[20];
    this.v2h ^= BUF[5] ^ BUF[21];
    this.v3l ^= BUF[6] ^ BUF[22];
    this.v3h ^= BUF[7] ^ BUF[23];
    this.v4l ^= BUF[8] ^ BUF[24];
    this.v4h ^= BUF[9] ^ BUF[25];
    this.v5l ^= BUF[10] ^ BUF[26];
    this.v5h ^= BUF[11] ^ BUF[27];
    this.v6l ^= BUF[12] ^ BUF[28];
    this.v6h ^= BUF[13] ^ BUF[29];
    this.v7l ^= BUF[14] ^ BUF[30];
    this.v7h ^= BUF[15] ^ BUF[31];
    BUF.fill(0);
  }
  destroy() {
    this.destroyed = true;
    this.buffer32.fill(0);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
}
const blake2b = /* @__PURE__ */ wrapConstructorWithOpts((opts) => new BLAKE2b(opts));
function createAsHex(fn) {
  return (...args) => u8aToHex(fn(...args));
}
function createBitHasher(bitLength, fn) {
  return (data, onlyJs) => fn(data, bitLength, onlyJs);
}
function createDualHasher(wa, js) {
  return (value, bitLength = 256, onlyJs) => {
    const u8a = u8aToU8a(value);
    return !hasBigInt || !onlyJs && isReady() ? wa[bitLength](u8a) : js[bitLength](u8a);
  };
}
function blake2AsU8a(data, bitLength = 256, key, onlyJs) {
  const byteLength = Math.ceil(bitLength / 8);
  const u8a = u8aToU8a(data);
  return !hasBigInt || !onlyJs && isReady() ? blake2b$1(u8a, u8aToU8a(key), byteLength) : key ? blake2b(u8a, { dkLen: byteLength, key }) : blake2b(u8a, { dkLen: byteLength });
}
const blake2AsHex = /* @__PURE__ */ createAsHex(blake2AsU8a);
const SS58_PREFIX = stringToU8a("SS58PRE");
function sshash(key) {
  return blake2AsU8a(u8aConcat(SS58_PREFIX, key), 512);
}
function checkAddressChecksum(decoded) {
  const ss58Length = decoded[0] & 64 ? 2 : 1;
  const ss58Decoded = ss58Length === 1 ? decoded[0] : (decoded[0] & 63) << 2 | decoded[1] >> 6 | (decoded[1] & 63) << 8;
  const isPublicKey = [34 + ss58Length, 35 + ss58Length].includes(decoded.length);
  const length2 = decoded.length - (isPublicKey ? 2 : 1);
  const hash2 = sshash(decoded.subarray(0, length2));
  const isValid2 = (decoded[0] & 128) === 0 && ![46, 47].includes(decoded[0]) && (isPublicKey ? decoded[decoded.length - 2] === hash2[0] && decoded[decoded.length - 1] === hash2[1] : decoded[decoded.length - 1] === hash2[0]);
  return [isValid2, length2, ss58Length, ss58Decoded];
}
const knownSubstrate = [
  {
    "prefix": 0,
    "network": "polkadot",
    "displayName": "Polkadot Relay Chain",
    "symbols": [
      "DOT"
    ],
    "decimals": [
      10
    ],
    "standardAccount": "*25519",
    "website": "https://polkadot.network"
  },
  {
    "prefix": 1,
    "network": "BareSr25519",
    "displayName": "Bare 32-bit Schnorr/Ristretto (S/R 25519) public key.",
    "symbols": [],
    "decimals": [],
    "standardAccount": "Sr25519",
    "website": null
  },
  {
    "prefix": 2,
    "network": "kusama",
    "displayName": "Kusama Relay Chain",
    "symbols": [
      "KSM"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://kusama.network"
  },
  {
    "prefix": 3,
    "network": "BareEd25519",
    "displayName": "Bare 32-bit Ed25519 public key.",
    "symbols": [],
    "decimals": [],
    "standardAccount": "Ed25519",
    "website": null
  },
  {
    "prefix": 4,
    "network": "katalchain",
    "displayName": "Katal Chain",
    "symbols": [],
    "decimals": [],
    "standardAccount": "*25519",
    "website": null
  },
  {
    "prefix": 5,
    "network": "astar",
    "displayName": "Astar Network",
    "symbols": [
      "ASTR"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://astar.network"
  },
  {
    "prefix": 6,
    "network": "bifrost",
    "displayName": "Bifrost",
    "symbols": [
      "BNC"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://bifrost.finance/"
  },
  {
    "prefix": 7,
    "network": "edgeware",
    "displayName": "Edgeware",
    "symbols": [
      "EDG"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://edgewa.re"
  },
  {
    "prefix": 8,
    "network": "karura",
    "displayName": "Karura",
    "symbols": [
      "KAR"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://karura.network/"
  },
  {
    "prefix": 9,
    "network": "reynolds",
    "displayName": "Laminar Reynolds Canary",
    "symbols": [
      "REY"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "http://laminar.network/"
  },
  {
    "prefix": 10,
    "network": "acala",
    "displayName": "Acala",
    "symbols": [
      "ACA"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://acala.network/"
  },
  {
    "prefix": 11,
    "network": "laminar",
    "displayName": "Laminar",
    "symbols": [
      "LAMI"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "http://laminar.network/"
  },
  {
    "prefix": 12,
    "network": "polymesh",
    "displayName": "Polymesh",
    "symbols": [
      "POLYX"
    ],
    "decimals": [
      6
    ],
    "standardAccount": "*25519",
    "website": "https://polymath.network/"
  },
  {
    "prefix": 13,
    "network": "integritee",
    "displayName": "Integritee",
    "symbols": [
      "TEER"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://integritee.network"
  },
  {
    "prefix": 14,
    "network": "totem",
    "displayName": "Totem",
    "symbols": [
      "TOTEM"
    ],
    "decimals": [
      0
    ],
    "standardAccount": "*25519",
    "website": "https://totemaccounting.com"
  },
  {
    "prefix": 15,
    "network": "synesthesia",
    "displayName": "Synesthesia",
    "symbols": [
      "SYN"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://synesthesia.network/"
  },
  {
    "prefix": 16,
    "network": "kulupu",
    "displayName": "Kulupu",
    "symbols": [
      "KLP"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://kulupu.network/"
  },
  {
    "prefix": 17,
    "network": "dark",
    "displayName": "Dark Mainnet",
    "symbols": [],
    "decimals": [],
    "standardAccount": "*25519",
    "website": null
  },
  {
    "prefix": 18,
    "network": "darwinia",
    "displayName": "Darwinia Network",
    "symbols": [
      "RING"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "secp256k1",
    "website": "https://darwinia.network"
  },
  {
    "prefix": 19,
    "network": "watr",
    "displayName": "Watr Protocol",
    "symbols": [
      "WATR"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://www.watr.org"
  },
  {
    "prefix": 20,
    "network": "stafi",
    "displayName": "Stafi",
    "symbols": [
      "FIS"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://stafi.io"
  },
  {
    "prefix": 21,
    "network": "karmachain",
    "displayName": "Karmacoin",
    "symbols": [
      "KCOIN"
    ],
    "decimals": [
      6
    ],
    "standardAccount": "*25519",
    "website": "https://karmaco.in"
  },
  {
    "prefix": 22,
    "network": "dock-pos-mainnet",
    "displayName": "Dock Mainnet",
    "symbols": [
      "DCK"
    ],
    "decimals": [
      6
    ],
    "standardAccount": "*25519",
    "website": "https://dock.io"
  },
  {
    "prefix": 23,
    "network": "shift",
    "displayName": "ShiftNrg",
    "symbols": [],
    "decimals": [],
    "standardAccount": "*25519",
    "website": null
  },
  {
    "prefix": 24,
    "network": "zero",
    "displayName": "ZERO",
    "symbols": [
      "ZERO"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://zero.io"
  },
  {
    "prefix": 25,
    "network": "zero-alphaville",
    "displayName": "ZERO Alphaville",
    "symbols": [
      "ZERO"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://zero.io"
  },
  {
    "prefix": 26,
    "network": "jupiter",
    "displayName": "Jupiter",
    "symbols": [
      "jDOT"
    ],
    "decimals": [
      10
    ],
    "standardAccount": "*25519",
    "website": "https://jupiter.patract.io"
  },
  {
    "prefix": 27,
    "network": "kabocha",
    "displayName": "Kabocha",
    "symbols": [
      "KAB"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://kabocha.network"
  },
  {
    "prefix": 28,
    "network": "subsocial",
    "displayName": "Subsocial",
    "symbols": [],
    "decimals": [],
    "standardAccount": "*25519",
    "website": null
  },
  {
    "prefix": 29,
    "network": "cord",
    "displayName": "CORD Network",
    "symbols": [
      "DHI",
      "WAY"
    ],
    "decimals": [
      12,
      12
    ],
    "standardAccount": "*25519",
    "website": "https://cord.network/"
  },
  {
    "prefix": 30,
    "network": "phala",
    "displayName": "Phala Network",
    "symbols": [
      "PHA"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://phala.network"
  },
  {
    "prefix": 31,
    "network": "litentry",
    "displayName": "Litentry Network",
    "symbols": [
      "LIT"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://litentry.com/"
  },
  {
    "prefix": 32,
    "network": "robonomics",
    "displayName": "Robonomics",
    "symbols": [
      "XRT"
    ],
    "decimals": [
      9
    ],
    "standardAccount": "*25519",
    "website": "https://robonomics.network"
  },
  {
    "prefix": 33,
    "network": "datahighway",
    "displayName": "DataHighway",
    "symbols": [],
    "decimals": [],
    "standardAccount": "*25519",
    "website": null
  },
  {
    "prefix": 34,
    "network": "ares",
    "displayName": "Ares Protocol",
    "symbols": [
      "ARES"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://www.aresprotocol.com/"
  },
  {
    "prefix": 35,
    "network": "vln",
    "displayName": "Valiu Liquidity Network",
    "symbols": [
      "USDv"
    ],
    "decimals": [
      15
    ],
    "standardAccount": "*25519",
    "website": "https://valiu.com/"
  },
  {
    "prefix": 36,
    "network": "centrifuge",
    "displayName": "Centrifuge Chain",
    "symbols": [
      "CFG"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://centrifuge.io/"
  },
  {
    "prefix": 37,
    "network": "nodle",
    "displayName": "Nodle Chain",
    "symbols": [
      "NODL"
    ],
    "decimals": [
      11
    ],
    "standardAccount": "*25519",
    "website": "https://nodle.io/"
  },
  {
    "prefix": 38,
    "network": "kilt",
    "displayName": "KILT Spiritnet",
    "symbols": [
      "KILT"
    ],
    "decimals": [
      15
    ],
    "standardAccount": "*25519",
    "website": "https://kilt.io/"
  },
  {
    "prefix": 39,
    "network": "mathchain",
    "displayName": "MathChain mainnet",
    "symbols": [
      "MATH"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://mathwallet.org"
  },
  {
    "prefix": 40,
    "network": "mathchain-testnet",
    "displayName": "MathChain testnet",
    "symbols": [
      "MATH"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://mathwallet.org"
  },
  {
    "prefix": 41,
    "network": "polimec",
    "displayName": "Polimec Protocol",
    "symbols": [
      "PLMC"
    ],
    "decimals": [
      10
    ],
    "standardAccount": "*25519",
    "website": "https://www.polimec.org/"
  },
  {
    "prefix": 42,
    "network": "substrate",
    "displayName": "Substrate",
    "symbols": [],
    "decimals": [],
    "standardAccount": "*25519",
    "website": "https://substrate.io/"
  },
  {
    "prefix": 43,
    "network": "BareSecp256k1",
    "displayName": "Bare 32-bit ECDSA SECP-256k1 public key.",
    "symbols": [],
    "decimals": [],
    "standardAccount": "secp256k1",
    "website": null
  },
  {
    "prefix": 44,
    "network": "chainx",
    "displayName": "ChainX",
    "symbols": [
      "PCX"
    ],
    "decimals": [
      8
    ],
    "standardAccount": "*25519",
    "website": "https://chainx.org/"
  },
  {
    "prefix": 45,
    "network": "uniarts",
    "displayName": "UniArts Network",
    "symbols": [
      "UART",
      "UINK"
    ],
    "decimals": [
      12,
      12
    ],
    "standardAccount": "*25519",
    "website": "https://uniarts.me"
  },
  {
    "prefix": 46,
    "network": "reserved46",
    "displayName": "This prefix is reserved.",
    "symbols": [],
    "decimals": [],
    "standardAccount": null,
    "website": null
  },
  {
    "prefix": 47,
    "network": "reserved47",
    "displayName": "This prefix is reserved.",
    "symbols": [],
    "decimals": [],
    "standardAccount": null,
    "website": null
  },
  {
    "prefix": 48,
    "network": "neatcoin",
    "displayName": "Neatcoin Mainnet",
    "symbols": [
      "NEAT"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://neatcoin.org"
  },
  {
    "prefix": 49,
    "network": "picasso",
    "displayName": "Picasso",
    "symbols": [
      "PICA"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://picasso.composable.finance"
  },
  {
    "prefix": 50,
    "network": "composable",
    "displayName": "Composable Finance",
    "symbols": [
      "LAYR"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://composable.finance"
  },
  {
    "prefix": 51,
    "network": "oak",
    "displayName": "OAK Network",
    "symbols": [
      "OAK",
      "TUR"
    ],
    "decimals": [
      10,
      10
    ],
    "standardAccount": "*25519",
    "website": "https://oak.tech"
  },
  {
    "prefix": 52,
    "network": "KICO",
    "displayName": "KICO",
    "symbols": [
      "KICO"
    ],
    "decimals": [
      14
    ],
    "standardAccount": "*25519",
    "website": "https://dico.io"
  },
  {
    "prefix": 53,
    "network": "DICO",
    "displayName": "DICO",
    "symbols": [
      "DICO"
    ],
    "decimals": [
      14
    ],
    "standardAccount": "*25519",
    "website": "https://dico.io"
  },
  {
    "prefix": 54,
    "network": "cere",
    "displayName": "Cere Network",
    "symbols": [
      "CERE"
    ],
    "decimals": [
      10
    ],
    "standardAccount": "*25519",
    "website": "https://cere.network"
  },
  {
    "prefix": 55,
    "network": "xxnetwork",
    "displayName": "xx network",
    "symbols": [
      "XX"
    ],
    "decimals": [
      9
    ],
    "standardAccount": "*25519",
    "website": "https://xx.network"
  },
  {
    "prefix": 56,
    "network": "pendulum",
    "displayName": "Pendulum chain",
    "symbols": [
      "PEN"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://pendulumchain.org/"
  },
  {
    "prefix": 57,
    "network": "amplitude",
    "displayName": "Amplitude chain",
    "symbols": [
      "AMPE"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://pendulumchain.org/"
  },
  {
    "prefix": 58,
    "network": "eternal-civilization",
    "displayName": "Eternal Civilization",
    "symbols": [
      "ECC"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "http://www.ysknfr.cn/"
  },
  {
    "prefix": 63,
    "network": "hydradx",
    "displayName": "HydraDX",
    "symbols": [
      "HDX"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://hydradx.io"
  },
  {
    "prefix": 65,
    "network": "aventus",
    "displayName": "Aventus Mainnet",
    "symbols": [
      "AVT"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://aventus.io"
  },
  {
    "prefix": 66,
    "network": "crust",
    "displayName": "Crust Network",
    "symbols": [
      "CRU"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://crust.network"
  },
  {
    "prefix": 67,
    "network": "genshiro",
    "displayName": "Genshiro Network",
    "symbols": [
      "GENS",
      "EQD",
      "LPT0"
    ],
    "decimals": [
      9,
      9,
      9
    ],
    "standardAccount": "*25519",
    "website": "https://genshiro.equilibrium.io"
  },
  {
    "prefix": 68,
    "network": "equilibrium",
    "displayName": "Equilibrium Network",
    "symbols": [
      "EQ"
    ],
    "decimals": [
      9
    ],
    "standardAccount": "*25519",
    "website": "https://equilibrium.io"
  },
  {
    "prefix": 69,
    "network": "sora",
    "displayName": "SORA Network",
    "symbols": [
      "XOR"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://sora.org"
  },
  {
    "prefix": 71,
    "network": "p3d",
    "displayName": "3DP network",
    "symbols": [
      "P3D"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://3dpass.org"
  },
  {
    "prefix": 72,
    "network": "p3dt",
    "displayName": "3DP test network",
    "symbols": [
      "P3Dt"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://3dpass.org"
  },
  {
    "prefix": 73,
    "network": "zeitgeist",
    "displayName": "Zeitgeist",
    "symbols": [
      "ZTG"
    ],
    "decimals": [
      10
    ],
    "standardAccount": "*25519",
    "website": "https://zeitgeist.pm"
  },
  {
    "prefix": 77,
    "network": "manta",
    "displayName": "Manta network",
    "symbols": [
      "MANTA"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://manta.network"
  },
  {
    "prefix": 78,
    "network": "calamari",
    "displayName": "Calamari: Manta Canary Network",
    "symbols": [
      "KMA"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://manta.network"
  },
  {
    "prefix": 81,
    "network": "sora_dot_para",
    "displayName": "SORA Polkadot Parachain",
    "symbols": [
      "XOR"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://sora.org"
  },
  {
    "prefix": 88,
    "network": "polkadex",
    "displayName": "Polkadex Mainnet",
    "symbols": [
      "PDEX"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://polkadex.trade"
  },
  {
    "prefix": 89,
    "network": "polkadexparachain",
    "displayName": "Polkadex Parachain",
    "symbols": [
      "PDEX"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://polkadex.trade"
  },
  {
    "prefix": 90,
    "network": "frequency",
    "displayName": "Frequency",
    "symbols": [
      "FRQCY"
    ],
    "decimals": [
      8
    ],
    "standardAccount": "*25519",
    "website": "https://www.frequency.xyz"
  },
  {
    "prefix": 92,
    "network": "anmol",
    "displayName": "Anmol Network",
    "symbols": [
      "ANML"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://anmol.network/"
  },
  {
    "prefix": 93,
    "network": "fragnova",
    "displayName": "Fragnova Network",
    "symbols": [
      "NOVA"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://fragnova.com"
  },
  {
    "prefix": 98,
    "network": "polkasmith",
    "displayName": "PolkaSmith Canary Network",
    "symbols": [
      "PKS"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://polkafoundry.com"
  },
  {
    "prefix": 99,
    "network": "polkafoundry",
    "displayName": "PolkaFoundry Network",
    "symbols": [
      "PKF"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://polkafoundry.com"
  },
  {
    "prefix": 100,
    "network": "ibtida",
    "displayName": "Anmol Network Ibtida Canary network",
    "symbols": [
      "IANML"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://anmol.network/"
  },
  {
    "prefix": 101,
    "network": "origintrail-parachain",
    "displayName": "OriginTrail Parachain",
    "symbols": [
      "OTP"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://parachain.origintrail.io/"
  },
  {
    "prefix": 105,
    "network": "pontem-network",
    "displayName": "Pontem Network",
    "symbols": [
      "PONT"
    ],
    "decimals": [
      10
    ],
    "standardAccount": "*25519",
    "website": "https://pontem.network"
  },
  {
    "prefix": 110,
    "network": "heiko",
    "displayName": "Heiko",
    "symbols": [
      "HKO"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://parallel.fi/"
  },
  {
    "prefix": 113,
    "network": "integritee-incognito",
    "displayName": "Integritee Incognito",
    "symbols": [],
    "decimals": [],
    "standardAccount": "*25519",
    "website": "https://integritee.network"
  },
  {
    "prefix": 117,
    "network": "tinker",
    "displayName": "Tinker",
    "symbols": [
      "TNKR"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://invarch.network"
  },
  {
    "prefix": 126,
    "network": "joystream",
    "displayName": "Joystream",
    "symbols": [
      "JOY"
    ],
    "decimals": [
      10
    ],
    "standardAccount": "*25519",
    "website": "https://www.joystream.org"
  },
  {
    "prefix": 128,
    "network": "clover",
    "displayName": "Clover Finance",
    "symbols": [
      "CLV"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://clover.finance"
  },
  {
    "prefix": 129,
    "network": "dorafactory-polkadot",
    "displayName": "Dorafactory Polkadot Network",
    "symbols": [
      "DORA"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://dorafactory.org"
  },
  {
    "prefix": 131,
    "network": "litmus",
    "displayName": "Litmus Network",
    "symbols": [
      "LIT"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://litentry.com/"
  },
  {
    "prefix": 136,
    "network": "altair",
    "displayName": "Altair",
    "symbols": [
      "AIR"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://centrifuge.io/"
  },
  {
    "prefix": 137,
    "network": "vara",
    "displayName": "Vara Network",
    "symbols": [
      "VARA"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://vara.network/"
  },
  {
    "prefix": 172,
    "network": "parallel",
    "displayName": "Parallel",
    "symbols": [
      "PARA"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://parallel.fi/"
  },
  {
    "prefix": 252,
    "network": "social-network",
    "displayName": "Social Network",
    "symbols": [
      "NET"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://social.network"
  },
  {
    "prefix": 255,
    "network": "quartz_mainnet",
    "displayName": "QUARTZ by UNIQUE",
    "symbols": [
      "QTZ"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://unique.network"
  },
  {
    "prefix": 268,
    "network": "pioneer_network",
    "displayName": "Pioneer Network by Bit.Country",
    "symbols": [
      "NEER"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://bit.country"
  },
  {
    "prefix": 420,
    "network": "sora_kusama_para",
    "displayName": "SORA Kusama Parachain",
    "symbols": [
      "XOR"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://sora.org"
  },
  {
    "prefix": 440,
    "network": "allfeat_network",
    "displayName": "Allfeat Network",
    "symbols": [
      "AFT"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://allfeat.network"
  },
  {
    "prefix": 666,
    "network": "metaquity_network",
    "displayName": "Metaquity Network",
    "symbols": [
      "MQTY"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://metaquity.xyz/"
  },
  {
    "prefix": 777,
    "network": "curio",
    "displayName": "Curio",
    "symbols": [
      "CGT"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://parachain.capitaldex.exchange/"
  },
  {
    "prefix": 789,
    "network": "geek",
    "displayName": "GEEK Network",
    "symbols": [
      "GEEK"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://geek.gl"
  },
  {
    "prefix": 995,
    "network": "ternoa",
    "displayName": "Ternoa",
    "symbols": [
      "CAPS"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://www.ternoa.network"
  },
  {
    "prefix": 1110,
    "network": "efinity",
    "displayName": "Efinity",
    "symbols": [
      "EFI"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://efinity.io/"
  },
  {
    "prefix": 1221,
    "network": "peaq",
    "displayName": "Peaq Network",
    "symbols": [
      "PEAQ"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "Sr25519",
    "website": "https://www.peaq.network/"
  },
  {
    "prefix": 1222,
    "network": "krest",
    "displayName": "Krest Network",
    "symbols": [
      "KREST"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "Sr25519",
    "website": "https://www.peaq.network/"
  },
  {
    "prefix": 1284,
    "network": "moonbeam",
    "displayName": "Moonbeam",
    "symbols": [
      "GLMR"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "secp256k1",
    "website": "https://moonbeam.network"
  },
  {
    "prefix": 1285,
    "network": "moonriver",
    "displayName": "Moonriver",
    "symbols": [
      "MOVR"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "secp256k1",
    "website": "https://moonbeam.network"
  },
  {
    "prefix": 1328,
    "network": "ajuna",
    "displayName": "Ajuna Network",
    "symbols": [
      "AJUN"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://ajuna.io"
  },
  {
    "prefix": 1337,
    "network": "bajun",
    "displayName": "Bajun Network",
    "symbols": [
      "BAJU"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://ajuna.io"
  },
  {
    "prefix": 1516,
    "network": "societal",
    "displayName": "Societal",
    "symbols": [
      "SCTL"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://www.sctl.xyz"
  },
  {
    "prefix": 1985,
    "network": "seals",
    "displayName": "Seals Network",
    "symbols": [
      "SEAL"
    ],
    "decimals": [
      9
    ],
    "standardAccount": "*25519",
    "website": "https://seals.app"
  },
  {
    "prefix": 2007,
    "network": "kapex",
    "displayName": "Kapex",
    "symbols": [
      "KAPEX"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://totemaccounting.com"
  },
  {
    "prefix": 2009,
    "network": "cloudwalk_mainnet",
    "displayName": "CloudWalk Network Mainnet",
    "symbols": [
      "CWN"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://explorer.mainnet.cloudwalk.io"
  },
  {
    "prefix": 2021,
    "network": "logion",
    "displayName": "logion network",
    "symbols": [
      "LGNT"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://logion.network"
  },
  {
    "prefix": 2032,
    "network": "interlay",
    "displayName": "Interlay",
    "symbols": [
      "INTR"
    ],
    "decimals": [
      10
    ],
    "standardAccount": "*25519",
    "website": "https://interlay.io/"
  },
  {
    "prefix": 2092,
    "network": "kintsugi",
    "displayName": "Kintsugi",
    "symbols": [
      "KINT"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://interlay.io/"
  },
  {
    "prefix": 2106,
    "network": "bitgreen",
    "displayName": "Bitgreen",
    "symbols": [
      "BBB"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://bitgreen.org/"
  },
  {
    "prefix": 2112,
    "network": "chainflip",
    "displayName": "Chainflip",
    "symbols": [
      "FLIP"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://chainflip.io/"
  },
  {
    "prefix": 2199,
    "network": "moonsama",
    "displayName": "Moonsama",
    "symbols": [
      "SAMA"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "secp256k1",
    "website": "https://moonsama.com"
  },
  {
    "prefix": 2206,
    "network": "ICE",
    "displayName": "ICE Network",
    "symbols": [
      "ICY"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://icenetwork.io"
  },
  {
    "prefix": 2207,
    "network": "SNOW",
    "displayName": "SNOW: ICE Canary Network",
    "symbols": [
      "ICZ"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://icenetwork.io"
  },
  {
    "prefix": 2254,
    "network": "subspace_testnet",
    "displayName": "Subspace testnet",
    "symbols": [
      "tSSC"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://subspace.network"
  },
  {
    "prefix": 3333,
    "network": "peerplays",
    "displayName": "Peerplays",
    "symbols": [
      "PPY"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "secp256k1",
    "website": "https://www.peerplays.com/"
  },
  {
    "prefix": 4450,
    "network": "g1",
    "displayName": "Ğ1",
    "symbols": [
      "G1"
    ],
    "decimals": [
      2
    ],
    "standardAccount": "*25519",
    "website": "https://duniter.org"
  },
  {
    "prefix": 5234,
    "network": "humanode",
    "displayName": "Humanode Network",
    "symbols": [
      "HMND"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://humanode.io"
  },
  {
    "prefix": 5845,
    "network": "tangle",
    "displayName": "Tangle Network",
    "symbols": [
      "TNT"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://www.tangle.tools/"
  },
  {
    "prefix": 6094,
    "network": "subspace",
    "displayName": "Subspace",
    "symbols": [
      "SSC"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://subspace.network"
  },
  {
    "prefix": 7007,
    "network": "tidefi",
    "displayName": "Tidefi",
    "symbols": [
      "TDFY"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://tidefi.com"
  },
  {
    "prefix": 7013,
    "network": "gm",
    "displayName": "GM",
    "symbols": [
      "FREN",
      "GM",
      "GN"
    ],
    "decimals": [
      12,
      0,
      0
    ],
    "standardAccount": "*25519",
    "website": "https://gmordie.com"
  },
  {
    "prefix": 7306,
    "network": "krigan",
    "displayName": "Krigan Network",
    "symbols": [
      "KRGN"
    ],
    "decimals": [
      9
    ],
    "standardAccount": "*25519",
    "website": "https://krigan.network"
  },
  {
    "prefix": 7391,
    "network": "unique_mainnet",
    "displayName": "Unique Network",
    "symbols": [
      "UNQ"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://unique.network"
  },
  {
    "prefix": 8866,
    "network": "golden_gate",
    "displayName": "Golden Gate",
    "symbols": [
      "GGX"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://ggxchain.io/"
  },
  {
    "prefix": 8883,
    "network": "sapphire_mainnet",
    "displayName": "Sapphire by Unique",
    "symbols": [
      "QTZ"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://unique.network"
  },
  {
    "prefix": 8886,
    "network": "golden_gate_sydney",
    "displayName": "Golden Gate Sydney",
    "symbols": [
      "GGXT"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://ggxchain.io/"
  },
  {
    "prefix": 9072,
    "network": "hashed",
    "displayName": "Hashed Network",
    "symbols": [
      "HASH"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://hashed.network"
  },
  {
    "prefix": 9807,
    "network": "dentnet",
    "displayName": "DENTNet",
    "symbols": [
      "DENTX"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://www.dentnet.io"
  },
  {
    "prefix": 9935,
    "network": "t3rn",
    "displayName": "t3rn",
    "symbols": [
      "TRN"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://t3rn.io/"
  },
  {
    "prefix": 10041,
    "network": "basilisk",
    "displayName": "Basilisk",
    "symbols": [
      "BSX"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://bsx.fi"
  },
  {
    "prefix": 11330,
    "network": "cess-testnet",
    "displayName": "CESS Testnet",
    "symbols": [
      "TCESS"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://cess.cloud"
  },
  {
    "prefix": 11331,
    "network": "cess",
    "displayName": "CESS",
    "symbols": [
      "CESS"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://cess.cloud"
  },
  {
    "prefix": 11486,
    "network": "luhn",
    "displayName": "Luhn Network",
    "symbols": [
      "LUHN"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://luhn.network"
  },
  {
    "prefix": 11820,
    "network": "contextfree",
    "displayName": "Automata ContextFree",
    "symbols": [
      "CTX"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://ata.network"
  },
  {
    "prefix": 12155,
    "network": "impact",
    "displayName": "Impact Protocol Network",
    "symbols": [
      "BSTY"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://impactprotocol.network/"
  },
  {
    "prefix": 12191,
    "network": "nftmart",
    "displayName": "NFTMart",
    "symbols": [
      "NMT"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://nftmart.io"
  },
  {
    "prefix": 13116,
    "network": "bittensor",
    "displayName": "Bittensor",
    "symbols": [
      "TAO"
    ],
    "decimals": [
      9
    ],
    "standardAccount": "*25519",
    "website": "https://bittensor.com"
  },
  {
    "prefix": 14697,
    "network": "goro",
    "displayName": "GORO Network",
    "symbols": [
      "GORO"
    ],
    "decimals": [
      9
    ],
    "standardAccount": "*25519",
    "website": "https://goro.network"
  }
];
const knownGenesis = {
  kusama: [
    "0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe",
    "0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636",
    "0x3fd7b9eb6a00376e5be61f01abb429ffb0b104be05eaff4d458da48fcd425baf"
  ],
  polkadot: ["0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3"],
  rococo: [
    "0x6408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063e",
    "0xaaf2cd1b74b5f726895921259421b534124726263982522174147046b8827897",
    "0x037f5f3c8e67b314062025fc886fcd6238ea25a4a9b45dce8d246815c9ebe770",
    "0xc196f81260cf1686172b47a79cf002120735d7cb0eb1474e8adce56618456fff",
    "0xf6e9983c37baf68846fedafe21e56718790e39fb1c582abc408b81bc7b208f9a",
    "0x5fce687da39305dfe682b117f0820b319348e8bb37eb16cf34acbf6a202de9d9",
    "0xe7c3d5edde7db964317cd9b51a3a059d7cd99f81bdbce14990047354334c9779",
    "0x1611e1dbf0405379b861e2e27daa90f480b2e6d3682414a80835a52e8cb8a215",
    "0x343442f12fa715489a8714e79a7b264ea88c0d5b8c66b684a7788a516032f6b9",
    "0x78bcd530c6b3a068bc17473cf5d2aff9c287102bed9af3ae3c41c33b9d6c6147",
    "0x47381ee0697153d64404fc578392c8fd5cba9073391908f46c888498415647bd",
    "0x19c0e4fa8ab75f5ac7865e0b8f74ff91eb9a100d336f423cd013a8befba40299"
  ],
  westend: ["0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"]
};
const knownIcon$1 = {
  centrifuge: "polkadot",
  kusama: "polkadot",
  polkadot: "polkadot",
  sora: "polkadot",
  statemine: "polkadot",
  statemint: "polkadot",
  westmint: "polkadot"
};
const knownLedger$1 = {
  acala: 787,
  ajuna: 354,
  "aleph-node": 643,
  astar: 810,
  bifrost: 788,
  "bifrost-kusama": 788,
  centrifuge: 747,
  composable: 354,
  darwinia: 354,
  "dock-mainnet": 594,
  edgeware: 523,
  enjin: 1155,
  equilibrium: 99999997,
  genshiro: 99999996,
  hydradx: 354,
  "interlay-parachain": 354,
  karura: 686,
  khala: 434,
  kusama: 434,
  matrixchain: 1155,
  nodle: 1003,
  origintrail: 354,
  parallel: 354,
  pendulum: 354,
  phala: 354,
  picasso: 434,
  polkadex: 799,
  polkadot: 354,
  polymesh: 595,
  quartz: 631,
  sora: 617,
  stafi: 907,
  statemine: 434,
  statemint: 354,
  ternoa: 995,
  unique: 661,
  vtb: 694,
  xxnetwork: 1955,
  zeitgeist: 354
};
const knownTestnet$1 = {
  "": true,
  "cess-testnet": true,
  "dock-testnet": true,
  jupiter: true,
  "mathchain-testnet": true,
  p3dt: true,
  subspace_testnet: true,
  "zero-alphaville": true
};
const UNSORTED$1 = [0, 2, 42];
const TESTNETS$1 = ["testnet"];
function toExpanded$1(o) {
  var _a2, _b;
  const network = o.network || "";
  const nameParts = network.replace(/_/g, "-").split("-");
  const n = o;
  n.slip44 = knownLedger$1[network];
  n.hasLedgerSupport = !!n.slip44;
  n.genesisHash = knownGenesis[network] || [];
  n.icon = knownIcon$1[network] || "substrate";
  n.isTestnet = !!knownTestnet$1[network] || TESTNETS$1.includes(nameParts[nameParts.length - 1]);
  n.isIgnored = n.isTestnet || !(o.standardAccount && ((_a2 = o.decimals) == null ? void 0 : _a2.length) && ((_b = o.symbols) == null ? void 0 : _b.length)) && o.prefix !== 42;
  return n;
}
function filterSelectable$1({ genesisHash, prefix: prefix2 }) {
  return !!genesisHash.length || prefix2 === 42;
}
function filterAvailable$1(n) {
  return !n.isIgnored && !!n.network;
}
function sortNetworks$1(a, b) {
  const isUnSortedA = UNSORTED$1.includes(a.prefix);
  const isUnSortedB = UNSORTED$1.includes(b.prefix);
  return isUnSortedA === isUnSortedB ? isUnSortedA ? 0 : a.displayName.localeCompare(b.displayName) : isUnSortedA ? -1 : 1;
}
const allNetworks$1 = knownSubstrate.map(toExpanded$1);
const availableNetworks$1 = allNetworks$1.filter(filterAvailable$1).sort(sortNetworks$1);
availableNetworks$1.filter(filterSelectable$1);
const defaults$4 = {
  allowedDecodedLengths: [1, 2, 4, 8, 32, 33],
  // publicKey has prefix + 2 checksum bytes, short only prefix + 1 checksum byte
  allowedEncodedLengths: [3, 4, 6, 10, 35, 36, 37, 38],
  allowedPrefix: availableNetworks$1.map(({ prefix: prefix2 }) => prefix2),
  prefix: 42
};
function decodeAddress(encoded, ignoreChecksum, ss58Format = -1) {
  if (!encoded) {
    throw new Error("Invalid empty address passed");
  }
  if (isU8a(encoded) || isHex(encoded)) {
    return u8aToU8a(encoded);
  }
  try {
    const decoded = base58Decode(encoded);
    if (!defaults$4.allowedEncodedLengths.includes(decoded.length)) {
      throw new Error("Invalid decoded address length");
    }
    const [isValid2, endPos, ss58Length, ss58Decoded] = checkAddressChecksum(decoded);
    if (!isValid2 && !ignoreChecksum) {
      throw new Error("Invalid decoded address checksum");
    } else if (ss58Format !== -1 && ss58Format !== ss58Decoded) {
      throw new Error(`Expected ss58Format ${ss58Format}, received ${ss58Decoded}`);
    }
    return decoded.slice(ss58Length, endPos);
  } catch (error2) {
    throw new Error(`Decoding ${encoded}: ${error2.message}`);
  }
}
const BN_BE_OPTS = { isLe: false };
const BN_LE_OPTS = { isLe: true };
const BN_BE_32_OPTS = { bitLength: 32, isLe: false };
const BN_LE_32_OPTS = { bitLength: 32, isLe: true };
const BN_BE_256_OPTS = { bitLength: 256, isLe: false };
const BN_LE_256_OPTS = { bitLength: 256, isLe: true };
const RE_NUMBER = /^\d+$/;
const JUNCTION_ID_LEN = 32;
class DeriveJunction {
  constructor() {
    __publicField(this, "__internal__chainCode", new Uint8Array(32));
    __publicField(this, "__internal__isHard", false);
  }
  static from(value) {
    const result = new DeriveJunction();
    const [code, isHard] = value.startsWith("/") ? [value.substring(1), true] : [value, false];
    result.soft(RE_NUMBER.test(code) ? new BN(code, 10) : code);
    return isHard ? result.harden() : result;
  }
  get chainCode() {
    return this.__internal__chainCode;
  }
  get isHard() {
    return this.__internal__isHard;
  }
  get isSoft() {
    return !this.__internal__isHard;
  }
  hard(value) {
    return this.soft(value).harden();
  }
  harden() {
    this.__internal__isHard = true;
    return this;
  }
  soft(value) {
    if (isNumber(value) || isBn(value) || isBigInt(value)) {
      return this.soft(bnToU8a(value, BN_LE_256_OPTS));
    } else if (isHex(value)) {
      return this.soft(hexToU8a(value));
    } else if (isString(value)) {
      return this.soft(compactAddLength(stringToU8a(value)));
    } else if (value.length > JUNCTION_ID_LEN) {
      return this.soft(blake2AsU8a(value));
    }
    this.__internal__chainCode.fill(0);
    this.__internal__chainCode.set(value, 0);
    return this;
  }
  soften() {
    this.__internal__isHard = false;
    return this;
  }
}
const RE_JUNCTION = /\/(\/?)([^/]+)/g;
function keyExtractPath(derivePath) {
  const parts = derivePath.match(RE_JUNCTION);
  const path2 = [];
  let constructed = "";
  if (parts) {
    constructed = parts.join("");
    for (const p of parts) {
      path2.push(DeriveJunction.from(p.substring(1)));
    }
  }
  if (constructed !== derivePath) {
    throw new Error(`Re-constructed path "${constructed}" does not match input`);
  }
  return {
    parts,
    path: path2
  };
}
const RE_CAPTURE = /^(\w+( \w+)*)((\/\/?[^/]+)*)(\/\/\/(.*))?$/;
function keyExtractSuri(suri) {
  const matches = suri.match(RE_CAPTURE);
  if (matches === null) {
    throw new Error("Unable to match provided value to a secret URI");
  }
  const [, phrase, , derivePath, , , password] = matches;
  const { path: path2 } = keyExtractPath(derivePath);
  return {
    derivePath,
    password,
    path: path2,
    phrase
  };
}
const HDKD$1 = compactAddLength(stringToU8a("Secp256k1HDKD"));
function secp256k1DeriveHard(seed, chainCode) {
  if (!isU8a(chainCode) || chainCode.length !== 32) {
    throw new Error("Invalid chainCode passed to derive");
  }
  return blake2AsU8a(u8aConcat(HDKD$1, seed, chainCode), 256);
}
function setBigUint64(view, byteOffset, value, isLE2) {
  if (typeof view.setBigUint64 === "function")
    return view.setBigUint64(byteOffset, value, isLE2);
  const _32n2 = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value >> _32n2 & _u32_max);
  const wl = Number(value & _u32_max);
  const h = isLE2 ? 4 : 0;
  const l2 = isLE2 ? 0 : 4;
  view.setUint32(byteOffset + h, wh, isLE2);
  view.setUint32(byteOffset + l2, wl, isLE2);
}
class SHA2 extends Hash {
  constructor(blockLen, outputLen, padOffset, isLE2) {
    super();
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.padOffset = padOffset;
    this.isLE = isLE2;
    this.finished = false;
    this.length = 0;
    this.pos = 0;
    this.destroyed = false;
    this.buffer = new Uint8Array(blockLen);
    this.view = createView(this.buffer);
  }
  update(data) {
    exists(this);
    const { view, buffer, blockLen } = this;
    data = toBytes(data);
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take2 = Math.min(blockLen - this.pos, len - pos);
      if (take2 === blockLen) {
        const dataView = createView(data);
        for (; blockLen <= len - pos; pos += blockLen)
          this.process(dataView, pos);
        continue;
      }
      buffer.set(data.subarray(pos, pos + take2), this.pos);
      this.pos += take2;
      pos += take2;
      if (this.pos === blockLen) {
        this.process(view, 0);
        this.pos = 0;
      }
    }
    this.length += data.length;
    this.roundClean();
    return this;
  }
  digestInto(out) {
    exists(this);
    output(out, this);
    this.finished = true;
    const { buffer, view, blockLen, isLE: isLE2 } = this;
    let { pos } = this;
    buffer[pos++] = 128;
    this.buffer.subarray(pos).fill(0);
    if (this.padOffset > blockLen - pos) {
      this.process(view, 0);
      pos = 0;
    }
    for (let i = pos; i < blockLen; i++)
      buffer[i] = 0;
    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE2);
    this.process(view, 0);
    const oview = createView(out);
    const len = this.outputLen;
    if (len % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const outLen = len / 4;
    const state = this.get();
    if (outLen > state.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let i = 0; i < outLen; i++)
      oview.setUint32(4 * i, state[i], isLE2);
  }
  digest() {
    const { buffer, outputLen } = this;
    this.digestInto(buffer);
    const res = buffer.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to) {
    to || (to = new this.constructor());
    to.set(...this.get());
    const { blockLen, buffer, length: length2, finished, destroyed, pos } = this;
    to.length = length2;
    to.pos = pos;
    to.finished = finished;
    to.destroyed = destroyed;
    if (length2 % blockLen)
      to.buffer.set(buffer);
    return to;
  }
}
const Chi = (a, b, c) => a & b ^ ~a & c;
const Maj = (a, b, c) => a & b ^ a & c ^ b & c;
const SHA256_K = /* @__PURE__ */ new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]);
const IV = /* @__PURE__ */ new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]);
const SHA256_W = /* @__PURE__ */ new Uint32Array(64);
class SHA256 extends SHA2 {
  constructor() {
    super(64, 32, 8, false);
    this.A = IV[0] | 0;
    this.B = IV[1] | 0;
    this.C = IV[2] | 0;
    this.D = IV[3] | 0;
    this.E = IV[4] | 0;
    this.F = IV[5] | 0;
    this.G = IV[6] | 0;
    this.H = IV[7] | 0;
  }
  get() {
    const { A, B, C, D, E, F, G, H } = this;
    return [A, B, C, D, E, F, G, H];
  }
  // prettier-ignore
  set(A, B, C, D, E, F, G, H) {
    this.A = A | 0;
    this.B = B | 0;
    this.C = C | 0;
    this.D = D | 0;
    this.E = E | 0;
    this.F = F | 0;
    this.G = G | 0;
    this.H = H | 0;
  }
  process(view, offset) {
    for (let i = 0; i < 16; i++, offset += 4)
      SHA256_W[i] = view.getUint32(offset, false);
    for (let i = 16; i < 64; i++) {
      const W15 = SHA256_W[i - 15];
      const W2 = SHA256_W[i - 2];
      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;
      SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
    }
    let { A, B, C, D, E, F, G, H } = this;
    for (let i = 0; i < 64; i++) {
      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
      const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
      const T2 = sigma0 + Maj(A, B, C) | 0;
      H = G;
      G = F;
      F = E;
      E = D + T1 | 0;
      D = C;
      C = B;
      B = A;
      A = T1 + T2 | 0;
    }
    A = A + this.A | 0;
    B = B + this.B | 0;
    C = C + this.C | 0;
    D = D + this.D | 0;
    E = E + this.E | 0;
    F = F + this.F | 0;
    G = G + this.G | 0;
    H = H + this.H | 0;
    this.set(A, B, C, D, E, F, G, H);
  }
  roundClean() {
    SHA256_W.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0);
    this.buffer.fill(0);
  }
}
class SHA224 extends SHA256 {
  constructor() {
    super();
    this.A = 3238371032 | 0;
    this.B = 914150663 | 0;
    this.C = 812702999 | 0;
    this.D = 4144912697 | 0;
    this.E = 4290775857 | 0;
    this.F = 1750603025 | 0;
    this.G = 1694076839 | 0;
    this.H = 3204075428 | 0;
    this.outputLen = 28;
  }
}
const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());
/* @__PURE__ */ wrapConstructor(() => new SHA224());
const _0n$6 = BigInt(0);
const _1n$8 = BigInt(1);
const _2n$6 = BigInt(2);
function isBytes(a) {
  return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
}
const hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_23, i) => i.toString(16).padStart(2, "0"));
function bytesToHex(bytes2) {
  if (!isBytes(bytes2))
    throw new Error("Uint8Array expected");
  let hex2 = "";
  for (let i = 0; i < bytes2.length; i++) {
    hex2 += hexes[bytes2[i]];
  }
  return hex2;
}
function numberToHexUnpadded(num) {
  const hex2 = num.toString(16);
  return hex2.length & 1 ? `0${hex2}` : hex2;
}
function hexToNumber(hex2) {
  if (typeof hex2 !== "string")
    throw new Error("hex string expected, got " + typeof hex2);
  return BigInt(hex2 === "" ? "0" : `0x${hex2}`);
}
const asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
function asciiToBase16(char2) {
  if (char2 >= asciis._0 && char2 <= asciis._9)
    return char2 - asciis._0;
  if (char2 >= asciis._A && char2 <= asciis._F)
    return char2 - (asciis._A - 10);
  if (char2 >= asciis._a && char2 <= asciis._f)
    return char2 - (asciis._a - 10);
  return;
}
function hexToBytes(hex2) {
  if (typeof hex2 !== "string")
    throw new Error("hex string expected, got " + typeof hex2);
  const hl = hex2.length;
  const al = hl / 2;
  if (hl % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + hl);
  const array = new Uint8Array(al);
  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
    const n1 = asciiToBase16(hex2.charCodeAt(hi));
    const n2 = asciiToBase16(hex2.charCodeAt(hi + 1));
    if (n1 === void 0 || n2 === void 0) {
      const char2 = hex2[hi] + hex2[hi + 1];
      throw new Error('hex string expected, got non-hex character "' + char2 + '" at index ' + hi);
    }
    array[ai] = n1 * 16 + n2;
  }
  return array;
}
function bytesToNumberBE(bytes2) {
  return hexToNumber(bytesToHex(bytes2));
}
function bytesToNumberLE(bytes2) {
  if (!isBytes(bytes2))
    throw new Error("Uint8Array expected");
  return hexToNumber(bytesToHex(Uint8Array.from(bytes2).reverse()));
}
function numberToBytesBE(n, len) {
  return hexToBytes(n.toString(16).padStart(len * 2, "0"));
}
function numberToBytesLE(n, len) {
  return numberToBytesBE(n, len).reverse();
}
function numberToVarBytesBE(n) {
  return hexToBytes(numberToHexUnpadded(n));
}
function ensureBytes(title, hex2, expectedLength) {
  let res;
  if (typeof hex2 === "string") {
    try {
      res = hexToBytes(hex2);
    } catch (e) {
      throw new Error(`${title} must be valid hex string, got "${hex2}". Cause: ${e}`);
    }
  } else if (isBytes(hex2)) {
    res = Uint8Array.from(hex2);
  } else {
    throw new Error(`${title} must be hex string or Uint8Array`);
  }
  const len = res.length;
  if (typeof expectedLength === "number" && len !== expectedLength)
    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
  return res;
}
function concatBytes(...arrays) {
  let sum = 0;
  for (let i = 0; i < arrays.length; i++) {
    const a = arrays[i];
    if (!isBytes(a))
      throw new Error("Uint8Array expected");
    sum += a.length;
  }
  let res = new Uint8Array(sum);
  let pad = 0;
  for (let i = 0; i < arrays.length; i++) {
    const a = arrays[i];
    res.set(a, pad);
    pad += a.length;
  }
  return res;
}
function equalBytes(a, b) {
  if (a.length !== b.length)
    return false;
  let diff = 0;
  for (let i = 0; i < a.length; i++)
    diff |= a[i] ^ b[i];
  return diff === 0;
}
function utf8ToBytes(str) {
  if (typeof str !== "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
  return new Uint8Array(new TextEncoder().encode(str));
}
function bitLen(n) {
  let len;
  for (len = 0; n > _0n$6; n >>= _1n$8, len += 1)
    ;
  return len;
}
function bitGet(n, pos) {
  return n >> BigInt(pos) & _1n$8;
}
const bitSet = (n, pos, value) => {
  return n | (value ? _1n$8 : _0n$6) << BigInt(pos);
};
const bitMask = (n) => (_2n$6 << BigInt(n - 1)) - _1n$8;
const u8n = (data) => new Uint8Array(data);
const u8fr = (arr2) => Uint8Array.from(arr2);
function createHmacDrbg(hashLen, qByteLen, hmacFn) {
  if (typeof hashLen !== "number" || hashLen < 2)
    throw new Error("hashLen must be a number");
  if (typeof qByteLen !== "number" || qByteLen < 2)
    throw new Error("qByteLen must be a number");
  if (typeof hmacFn !== "function")
    throw new Error("hmacFn must be a function");
  let v = u8n(hashLen);
  let k = u8n(hashLen);
  let i = 0;
  const reset = () => {
    v.fill(1);
    k.fill(0);
    i = 0;
  };
  const h = (...b) => hmacFn(k, v, ...b);
  const reseed = (seed = u8n()) => {
    k = h(u8fr([0]), seed);
    v = h();
    if (seed.length === 0)
      return;
    k = h(u8fr([1]), seed);
    v = h();
  };
  const gen2 = () => {
    if (i++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let len = 0;
    const out = [];
    while (len < qByteLen) {
      v = h();
      const sl = v.slice();
      out.push(sl);
      len += v.length;
    }
    return concatBytes(...out);
  };
  const genUntil = (seed, pred) => {
    reset();
    reseed(seed);
    let res = void 0;
    while (!(res = pred(gen2())))
      reseed();
    reset();
    return res;
  };
  return genUntil;
}
const validatorFns = {
  bigint: (val) => typeof val === "bigint",
  function: (val) => typeof val === "function",
  boolean: (val) => typeof val === "boolean",
  string: (val) => typeof val === "string",
  stringOrUint8Array: (val) => typeof val === "string" || isBytes(val),
  isSafeInteger: (val) => Number.isSafeInteger(val),
  array: (val) => Array.isArray(val),
  field: (val, object) => object.Fp.isValid(val),
  hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
};
function validateObject(object, validators, optValidators = {}) {
  const checkField = (fieldName, type, isOptional) => {
    const checkVal = validatorFns[type];
    if (typeof checkVal !== "function")
      throw new Error(`Invalid validator "${type}", expected function`);
    const val = object[fieldName];
    if (isOptional && val === void 0)
      return;
    if (!checkVal(val, object)) {
      throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
    }
  };
  for (const [fieldName, type] of Object.entries(validators))
    checkField(fieldName, type, false);
  for (const [fieldName, type] of Object.entries(optValidators))
    checkField(fieldName, type, true);
  return object;
}
const ut = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  bitGet,
  bitLen,
  bitMask,
  bitSet,
  bytesToHex,
  bytesToNumberBE,
  bytesToNumberLE,
  concatBytes,
  createHmacDrbg,
  ensureBytes,
  equalBytes,
  hexToBytes,
  hexToNumber,
  isBytes,
  numberToBytesBE,
  numberToBytesLE,
  numberToHexUnpadded,
  numberToVarBytesBE,
  utf8ToBytes,
  validateObject
}, Symbol.toStringTag, { value: "Module" }));
const _0n$5 = BigInt(0), _1n$7 = BigInt(1), _2n$5 = BigInt(2), _3n$1 = BigInt(3);
const _4n$1 = BigInt(4), _5n$1 = BigInt(5), _8n$1 = BigInt(8);
BigInt(9);
BigInt(16);
function mod(a, b) {
  const result = a % b;
  return result >= _0n$5 ? result : b + result;
}
function pow(num, power, modulo) {
  if (modulo <= _0n$5 || power < _0n$5)
    throw new Error("Expected power/modulo > 0");
  if (modulo === _1n$7)
    return _0n$5;
  let res = _1n$7;
  while (power > _0n$5) {
    if (power & _1n$7)
      res = res * num % modulo;
    num = num * num % modulo;
    power >>= _1n$7;
  }
  return res;
}
function pow2(x, power, modulo) {
  let res = x;
  while (power-- > _0n$5) {
    res *= res;
    res %= modulo;
  }
  return res;
}
function invert(number2, modulo) {
  if (number2 === _0n$5 || modulo <= _0n$5) {
    throw new Error(`invert: expected positive integers, got n=${number2} mod=${modulo}`);
  }
  let a = mod(number2, modulo);
  let b = modulo;
  let x = _0n$5, u = _1n$7;
  while (a !== _0n$5) {
    const q = b / a;
    const r = b % a;
    const m2 = x - u * q;
    b = a, a = r, x = u, u = m2;
  }
  const gcd2 = b;
  if (gcd2 !== _1n$7)
    throw new Error("invert: does not exist");
  return mod(x, modulo);
}
function tonelliShanks(P) {
  const legendreC = (P - _1n$7) / _2n$5;
  let Q, S, Z;
  for (Q = P - _1n$7, S = 0; Q % _2n$5 === _0n$5; Q /= _2n$5, S++)
    ;
  for (Z = _2n$5; Z < P && pow(Z, legendreC, P) !== P - _1n$7; Z++)
    ;
  if (S === 1) {
    const p1div4 = (P + _1n$7) / _4n$1;
    return function tonelliFast(Fp2, n) {
      const root = Fp2.pow(n, p1div4);
      if (!Fp2.eql(Fp2.sqr(root), n))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  const Q1div2 = (Q + _1n$7) / _2n$5;
  return function tonelliSlow(Fp2, n) {
    if (Fp2.pow(n, legendreC) === Fp2.neg(Fp2.ONE))
      throw new Error("Cannot find square root");
    let r = S;
    let g = Fp2.pow(Fp2.mul(Fp2.ONE, Z), Q);
    let x = Fp2.pow(n, Q1div2);
    let b = Fp2.pow(n, Q);
    while (!Fp2.eql(b, Fp2.ONE)) {
      if (Fp2.eql(b, Fp2.ZERO))
        return Fp2.ZERO;
      let m2 = 1;
      for (let t2 = Fp2.sqr(b); m2 < r; m2++) {
        if (Fp2.eql(t2, Fp2.ONE))
          break;
        t2 = Fp2.sqr(t2);
      }
      const ge = Fp2.pow(g, _1n$7 << BigInt(r - m2 - 1));
      g = Fp2.sqr(ge);
      x = Fp2.mul(x, ge);
      b = Fp2.mul(b, g);
      r = m2;
    }
    return x;
  };
}
function FpSqrt(P) {
  if (P % _4n$1 === _3n$1) {
    const p1div4 = (P + _1n$7) / _4n$1;
    return function sqrt3mod4(Fp2, n) {
      const root = Fp2.pow(n, p1div4);
      if (!Fp2.eql(Fp2.sqr(root), n))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  if (P % _8n$1 === _5n$1) {
    const c1 = (P - _5n$1) / _8n$1;
    return function sqrt5mod8(Fp2, n) {
      const n2 = Fp2.mul(n, _2n$5);
      const v = Fp2.pow(n2, c1);
      const nv = Fp2.mul(n, v);
      const i = Fp2.mul(Fp2.mul(nv, _2n$5), v);
      const root = Fp2.mul(nv, Fp2.sub(i, Fp2.ONE));
      if (!Fp2.eql(Fp2.sqr(root), n))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  return tonelliShanks(P);
}
const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n$7) === _1n$7;
const FIELD_FIELDS = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function validateField(field) {
  const initial = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  };
  const opts = FIELD_FIELDS.reduce((map2, val) => {
    map2[val] = "function";
    return map2;
  }, initial);
  return validateObject(field, opts);
}
function FpPow(f, num, power) {
  if (power < _0n$5)
    throw new Error("Expected power > 0");
  if (power === _0n$5)
    return f.ONE;
  if (power === _1n$7)
    return num;
  let p = f.ONE;
  let d = num;
  while (power > _0n$5) {
    if (power & _1n$7)
      p = f.mul(p, d);
    d = f.sqr(d);
    power >>= _1n$7;
  }
  return p;
}
function FpInvertBatch(f, nums) {
  const tmp = new Array(nums.length);
  const lastMultiplied = nums.reduce((acc, num, i) => {
    if (f.is0(num))
      return acc;
    tmp[i] = acc;
    return f.mul(acc, num);
  }, f.ONE);
  const inverted = f.inv(lastMultiplied);
  nums.reduceRight((acc, num, i) => {
    if (f.is0(num))
      return acc;
    tmp[i] = f.mul(acc, tmp[i]);
    return f.mul(acc, num);
  }, inverted);
  return tmp;
}
function nLength(n, nBitLength) {
  const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;
  const nByteLength = Math.ceil(_nBitLength / 8);
  return { nBitLength: _nBitLength, nByteLength };
}
function Field(ORDER, bitLen2, isLE2 = false, redef = {}) {
  if (ORDER <= _0n$5)
    throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen2);
  if (BYTES > 2048)
    throw new Error("Field lengths over 2048 bytes are not supported");
  const sqrtP = FpSqrt(ORDER);
  const f = Object.freeze({
    ORDER,
    BITS,
    BYTES,
    MASK: bitMask(BITS),
    ZERO: _0n$5,
    ONE: _1n$7,
    create: (num) => mod(num, ORDER),
    isValid: (num) => {
      if (typeof num !== "bigint")
        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
      return _0n$5 <= num && num < ORDER;
    },
    is0: (num) => num === _0n$5,
    isOdd: (num) => (num & _1n$7) === _1n$7,
    neg: (num) => mod(-num, ORDER),
    eql: (lhs, rhs) => lhs === rhs,
    sqr: (num) => mod(num * num, ORDER),
    add: (lhs, rhs) => mod(lhs + rhs, ORDER),
    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
    pow: (num, power) => FpPow(f, num, power),
    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
    // Same as above, but doesn't normalize
    sqrN: (num) => num * num,
    addN: (lhs, rhs) => lhs + rhs,
    subN: (lhs, rhs) => lhs - rhs,
    mulN: (lhs, rhs) => lhs * rhs,
    inv: (num) => invert(num, ORDER),
    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),
    invertBatch: (lst) => FpInvertBatch(f, lst),
    // TODO: do we really need constant cmov?
    // We don't have const-time bigints anyway, so probably will be not very useful
    cmov: (a, b, c) => c ? b : a,
    toBytes: (num) => isLE2 ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES),
    fromBytes: (bytes2) => {
      if (bytes2.length !== BYTES)
        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes2.length}`);
      return isLE2 ? bytesToNumberLE(bytes2) : bytesToNumberBE(bytes2);
    }
  });
  return Object.freeze(f);
}
function FpSqrtEven(Fp2, elm) {
  if (!Fp2.isOdd)
    throw new Error(`Field doesn't have isOdd`);
  const root = Fp2.sqrt(elm);
  return Fp2.isOdd(root) ? Fp2.neg(root) : root;
}
function getFieldBytesLength(fieldOrder) {
  if (typeof fieldOrder !== "bigint")
    throw new Error("field order must be bigint");
  const bitLength = fieldOrder.toString(2).length;
  return Math.ceil(bitLength / 8);
}
function getMinHashLength(fieldOrder) {
  const length2 = getFieldBytesLength(fieldOrder);
  return length2 + Math.ceil(length2 / 2);
}
function mapHashToField(key, fieldOrder, isLE2 = false) {
  const len = key.length;
  const fieldLen = getFieldBytesLength(fieldOrder);
  const minLen = getMinHashLength(fieldOrder);
  if (len < 16 || len < minLen || len > 1024)
    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
  const num = isLE2 ? bytesToNumberBE(key) : bytesToNumberLE(key);
  const reduced = mod(num, fieldOrder - _1n$7) + _1n$7;
  return isLE2 ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);
}
const _0n$4 = BigInt(0);
const _1n$6 = BigInt(1);
function wNAF(c, bits2) {
  const constTimeNegate = (condition, item) => {
    const neg = item.negate();
    return condition ? neg : item;
  };
  const opts = (W) => {
    const windows = Math.ceil(bits2 / W) + 1;
    const windowSize = 2 ** (W - 1);
    return { windows, windowSize };
  };
  return {
    constTimeNegate,
    // non-const time multiplication ladder
    unsafeLadder(elm, n) {
      let p = c.ZERO;
      let d = elm;
      while (n > _0n$4) {
        if (n & _1n$6)
          p = p.add(d);
        d = d.double();
        n >>= _1n$6;
      }
      return p;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(elm, W) {
      const { windows, windowSize } = opts(W);
      const points = [];
      let p = elm;
      let base = p;
      for (let window2 = 0; window2 < windows; window2++) {
        base = p;
        points.push(base);
        for (let i = 1; i < windowSize; i++) {
          base = base.add(p);
          points.push(base);
        }
        p = base.double();
      }
      return points;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(W, precomputes, n) {
      const { windows, windowSize } = opts(W);
      let p = c.ZERO;
      let f = c.BASE;
      const mask = BigInt(2 ** W - 1);
      const maxNumber = 2 ** W;
      const shiftBy = BigInt(W);
      for (let window2 = 0; window2 < windows; window2++) {
        const offset = window2 * windowSize;
        let wbits = Number(n & mask);
        n >>= shiftBy;
        if (wbits > windowSize) {
          wbits -= maxNumber;
          n += _1n$6;
        }
        const offset1 = offset;
        const offset2 = offset + Math.abs(wbits) - 1;
        const cond1 = window2 % 2 !== 0;
        const cond2 = wbits < 0;
        if (wbits === 0) {
          f = f.add(constTimeNegate(cond1, precomputes[offset1]));
        } else {
          p = p.add(constTimeNegate(cond2, precomputes[offset2]));
        }
      }
      return { p, f };
    },
    wNAFCached(P, precomputesMap, n, transform) {
      const W = P._WINDOW_SIZE || 1;
      let comp = precomputesMap.get(P);
      if (!comp) {
        comp = this.precomputeWindow(P, W);
        if (W !== 1) {
          precomputesMap.set(P, transform(comp));
        }
      }
      return this.wNAF(W, comp, n);
    }
  };
}
function validateBasic(curve) {
  validateField(curve.Fp);
  validateObject(curve, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  });
  return Object.freeze({
    ...nLength(curve.n, curve.nBitLength),
    ...curve,
    ...{ p: curve.Fp.ORDER }
  });
}
function validatePointOpts(curve) {
  const opts = validateBasic(curve);
  validateObject(opts, {
    a: "field",
    b: "field"
  }, {
    allowedPrivateKeyLengths: "array",
    wrapPrivateKey: "boolean",
    isTorsionFree: "function",
    clearCofactor: "function",
    allowInfinityPoint: "boolean",
    fromBytes: "function",
    toBytes: "function"
  });
  const { endo, Fp: Fp2, a } = opts;
  if (endo) {
    if (!Fp2.eql(a, Fp2.ZERO)) {
      throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
    }
    if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
      throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
    }
  }
  return Object.freeze({ ...opts });
}
const { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;
const DER = {
  // asn.1 DER encoding utils
  Err: class DERErr extends Error {
    constructor(m2 = "") {
      super(m2);
    }
  },
  _parseInt(data) {
    const { Err: E } = DER;
    if (data.length < 2 || data[0] !== 2)
      throw new E("Invalid signature integer tag");
    const len = data[1];
    const res = data.subarray(2, len + 2);
    if (!len || res.length !== len)
      throw new E("Invalid signature integer: wrong length");
    if (res[0] & 128)
      throw new E("Invalid signature integer: negative");
    if (res[0] === 0 && !(res[1] & 128))
      throw new E("Invalid signature integer: unnecessary leading zero");
    return { d: b2n(res), l: data.subarray(len + 2) };
  },
  toSig(hex2) {
    const { Err: E } = DER;
    const data = typeof hex2 === "string" ? h2b(hex2) : hex2;
    if (!isBytes(data))
      throw new Error("ui8a expected");
    let l2 = data.length;
    if (l2 < 2 || data[0] != 48)
      throw new E("Invalid signature tag");
    if (data[1] !== l2 - 2)
      throw new E("Invalid signature: incorrect length");
    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));
    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);
    if (rBytesLeft.length)
      throw new E("Invalid signature: left bytes after parsing");
    return { r, s };
  },
  hexFromSig(sig2) {
    const slice2 = (s2) => Number.parseInt(s2[0], 16) & 8 ? "00" + s2 : s2;
    const h = (num) => {
      const hex2 = num.toString(16);
      return hex2.length & 1 ? `0${hex2}` : hex2;
    };
    const s = slice2(h(sig2.s));
    const r = slice2(h(sig2.r));
    const shl = s.length / 2;
    const rhl = r.length / 2;
    const sl = h(shl);
    const rl = h(rhl);
    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
  }
};
const _0n$3 = BigInt(0), _1n$5 = BigInt(1), _2n$4 = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);
function weierstrassPoints(opts) {
  const CURVE = validatePointOpts(opts);
  const { Fp: Fp2 } = CURVE;
  const toBytes2 = CURVE.toBytes || ((_c, point, _isCompressed) => {
    const a = point.toAffine();
    return concatBytes(Uint8Array.from([4]), Fp2.toBytes(a.x), Fp2.toBytes(a.y));
  });
  const fromBytes = CURVE.fromBytes || ((bytes2) => {
    const tail = bytes2.subarray(1);
    const x = Fp2.fromBytes(tail.subarray(0, Fp2.BYTES));
    const y = Fp2.fromBytes(tail.subarray(Fp2.BYTES, 2 * Fp2.BYTES));
    return { x, y };
  });
  function weierstrassEquation(x) {
    const { a, b } = CURVE;
    const x2 = Fp2.sqr(x);
    const x3 = Fp2.mul(x2, x);
    return Fp2.add(Fp2.add(x3, Fp2.mul(x, a)), b);
  }
  if (!Fp2.eql(Fp2.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
    throw new Error("bad generator point: equation left != right");
  function isWithinCurveOrder(num) {
    return typeof num === "bigint" && _0n$3 < num && num < CURVE.n;
  }
  function assertGE(num) {
    if (!isWithinCurveOrder(num))
      throw new Error("Expected valid bigint: 0 < bigint < curve.n");
  }
  function normPrivateKeyToScalar(key) {
    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
    if (lengths && typeof key !== "bigint") {
      if (isBytes(key))
        key = bytesToHex(key);
      if (typeof key !== "string" || !lengths.includes(key.length))
        throw new Error("Invalid key");
      key = key.padStart(nByteLength * 2, "0");
    }
    let num;
    try {
      num = typeof key === "bigint" ? key : bytesToNumberBE(ensureBytes("private key", key, nByteLength));
    } catch (error2) {
      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
    }
    if (wrapPrivateKey)
      num = mod(num, n);
    assertGE(num);
    return num;
  }
  const pointPrecomputes = /* @__PURE__ */ new Map();
  function assertPrjPoint(other) {
    if (!(other instanceof Point))
      throw new Error("ProjectivePoint expected");
  }
  class Point {
    constructor(px, py, pz) {
      this.px = px;
      this.py = py;
      this.pz = pz;
      if (px == null || !Fp2.isValid(px))
        throw new Error("x required");
      if (py == null || !Fp2.isValid(py))
        throw new Error("y required");
      if (pz == null || !Fp2.isValid(pz))
        throw new Error("z required");
    }
    // Does not validate if the point is on-curve.
    // Use fromHex instead, or call assertValidity() later.
    static fromAffine(p) {
      const { x, y } = p || {};
      if (!p || !Fp2.isValid(x) || !Fp2.isValid(y))
        throw new Error("invalid affine point");
      if (p instanceof Point)
        throw new Error("projective point not allowed");
      const is0 = (i) => Fp2.eql(i, Fp2.ZERO);
      if (is0(x) && is0(y))
        return Point.ZERO;
      return new Point(x, y, Fp2.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     * Takes a bunch of Projective Points but executes only one
     * inversion on all of them. Inversion is very slow operation,
     * so this improves performance massively.
     * Optimization: converts a list of projective points to a list of identical points with Z=1.
     */
    static normalizeZ(points) {
      const toInv = Fp2.invertBatch(points.map((p) => p.pz));
      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
    }
    /**
     * Converts hash string or Uint8Array to Point.
     * @param hex short/long ECDSA hex
     */
    static fromHex(hex2) {
      const P = Point.fromAffine(fromBytes(ensureBytes("pointHex", hex2)));
      P.assertValidity();
      return P;
    }
    // Multiplies generator point by privateKey.
    static fromPrivateKey(privateKey) {
      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));
    }
    // "Private method", don't use it directly
    _setWindowSize(windowSize) {
      this._WINDOW_SIZE = windowSize;
      pointPrecomputes.delete(this);
    }
    // A point on curve is valid if it conforms to equation.
    assertValidity() {
      if (this.is0()) {
        if (CURVE.allowInfinityPoint && !Fp2.is0(this.py))
          return;
        throw new Error("bad point: ZERO");
      }
      const { x, y } = this.toAffine();
      if (!Fp2.isValid(x) || !Fp2.isValid(y))
        throw new Error("bad point: x or y not FE");
      const left = Fp2.sqr(y);
      const right = weierstrassEquation(x);
      if (!Fp2.eql(left, right))
        throw new Error("bad point: equation left != right");
      if (!this.isTorsionFree())
        throw new Error("bad point: not in prime-order subgroup");
    }
    hasEvenY() {
      const { y } = this.toAffine();
      if (Fp2.isOdd)
        return !Fp2.isOdd(y);
      throw new Error("Field doesn't support isOdd");
    }
    /**
     * Compare one point to another.
     */
    equals(other) {
      assertPrjPoint(other);
      const { px: X1, py: Y1, pz: Z1 } = this;
      const { px: X2, py: Y2, pz: Z2 } = other;
      const U1 = Fp2.eql(Fp2.mul(X1, Z2), Fp2.mul(X2, Z1));
      const U2 = Fp2.eql(Fp2.mul(Y1, Z2), Fp2.mul(Y2, Z1));
      return U1 && U2;
    }
    /**
     * Flips point to one corresponding to (x, -y) in Affine coordinates.
     */
    negate() {
      return new Point(this.px, Fp2.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a, b } = CURVE;
      const b3 = Fp2.mul(b, _3n);
      const { px: X1, py: Y1, pz: Z1 } = this;
      let X3 = Fp2.ZERO, Y3 = Fp2.ZERO, Z3 = Fp2.ZERO;
      let t0 = Fp2.mul(X1, X1);
      let t1 = Fp2.mul(Y1, Y1);
      let t2 = Fp2.mul(Z1, Z1);
      let t3 = Fp2.mul(X1, Y1);
      t3 = Fp2.add(t3, t3);
      Z3 = Fp2.mul(X1, Z1);
      Z3 = Fp2.add(Z3, Z3);
      X3 = Fp2.mul(a, Z3);
      Y3 = Fp2.mul(b3, t2);
      Y3 = Fp2.add(X3, Y3);
      X3 = Fp2.sub(t1, Y3);
      Y3 = Fp2.add(t1, Y3);
      Y3 = Fp2.mul(X3, Y3);
      X3 = Fp2.mul(t3, X3);
      Z3 = Fp2.mul(b3, Z3);
      t2 = Fp2.mul(a, t2);
      t3 = Fp2.sub(t0, t2);
      t3 = Fp2.mul(a, t3);
      t3 = Fp2.add(t3, Z3);
      Z3 = Fp2.add(t0, t0);
      t0 = Fp2.add(Z3, t0);
      t0 = Fp2.add(t0, t2);
      t0 = Fp2.mul(t0, t3);
      Y3 = Fp2.add(Y3, t0);
      t2 = Fp2.mul(Y1, Z1);
      t2 = Fp2.add(t2, t2);
      t0 = Fp2.mul(t2, t3);
      X3 = Fp2.sub(X3, t0);
      Z3 = Fp2.mul(t2, t1);
      Z3 = Fp2.add(Z3, Z3);
      Z3 = Fp2.add(Z3, Z3);
      return new Point(X3, Y3, Z3);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(other) {
      assertPrjPoint(other);
      const { px: X1, py: Y1, pz: Z1 } = this;
      const { px: X2, py: Y2, pz: Z2 } = other;
      let X3 = Fp2.ZERO, Y3 = Fp2.ZERO, Z3 = Fp2.ZERO;
      const a = CURVE.a;
      const b3 = Fp2.mul(CURVE.b, _3n);
      let t0 = Fp2.mul(X1, X2);
      let t1 = Fp2.mul(Y1, Y2);
      let t2 = Fp2.mul(Z1, Z2);
      let t3 = Fp2.add(X1, Y1);
      let t4 = Fp2.add(X2, Y2);
      t3 = Fp2.mul(t3, t4);
      t4 = Fp2.add(t0, t1);
      t3 = Fp2.sub(t3, t4);
      t4 = Fp2.add(X1, Z1);
      let t5 = Fp2.add(X2, Z2);
      t4 = Fp2.mul(t4, t5);
      t5 = Fp2.add(t0, t2);
      t4 = Fp2.sub(t4, t5);
      t5 = Fp2.add(Y1, Z1);
      X3 = Fp2.add(Y2, Z2);
      t5 = Fp2.mul(t5, X3);
      X3 = Fp2.add(t1, t2);
      t5 = Fp2.sub(t5, X3);
      Z3 = Fp2.mul(a, t4);
      X3 = Fp2.mul(b3, t2);
      Z3 = Fp2.add(X3, Z3);
      X3 = Fp2.sub(t1, Z3);
      Z3 = Fp2.add(t1, Z3);
      Y3 = Fp2.mul(X3, Z3);
      t1 = Fp2.add(t0, t0);
      t1 = Fp2.add(t1, t0);
      t2 = Fp2.mul(a, t2);
      t4 = Fp2.mul(b3, t4);
      t1 = Fp2.add(t1, t2);
      t2 = Fp2.sub(t0, t2);
      t2 = Fp2.mul(a, t2);
      t4 = Fp2.add(t4, t2);
      t0 = Fp2.mul(t1, t4);
      Y3 = Fp2.add(Y3, t0);
      t0 = Fp2.mul(t5, t4);
      X3 = Fp2.mul(t3, X3);
      X3 = Fp2.sub(X3, t0);
      t0 = Fp2.mul(t3, t1);
      Z3 = Fp2.mul(t5, Z3);
      Z3 = Fp2.add(Z3, t0);
      return new Point(X3, Y3, Z3);
    }
    subtract(other) {
      return this.add(other.negate());
    }
    is0() {
      return this.equals(Point.ZERO);
    }
    wNAF(n) {
      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {
        const toInv = Fp2.invertBatch(comp.map((p) => p.pz));
        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
      });
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(n) {
      const I = Point.ZERO;
      if (n === _0n$3)
        return I;
      assertGE(n);
      if (n === _1n$5)
        return this;
      const { endo } = CURVE;
      if (!endo)
        return wnaf.unsafeLadder(this, n);
      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
      let k1p = I;
      let k2p = I;
      let d = this;
      while (k1 > _0n$3 || k2 > _0n$3) {
        if (k1 & _1n$5)
          k1p = k1p.add(d);
        if (k2 & _1n$5)
          k2p = k2p.add(d);
        d = d.double();
        k1 >>= _1n$5;
        k2 >>= _1n$5;
      }
      if (k1neg)
        k1p = k1p.negate();
      if (k2neg)
        k2p = k2p.negate();
      k2p = new Point(Fp2.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
      return k1p.add(k2p);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(scalar) {
      assertGE(scalar);
      let n = scalar;
      let point, fake;
      const { endo } = CURVE;
      if (endo) {
        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
        let { p: k1p, f: f1p } = this.wNAF(k1);
        let { p: k2p, f: f2p } = this.wNAF(k2);
        k1p = wnaf.constTimeNegate(k1neg, k1p);
        k2p = wnaf.constTimeNegate(k2neg, k2p);
        k2p = new Point(Fp2.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
        point = k1p.add(k2p);
        fake = f1p.add(f2p);
      } else {
        const { p, f } = this.wNAF(n);
        point = p;
        fake = f;
      }
      return Point.normalizeZ([point, fake])[0];
    }
    /**
     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
     * Not using Strauss-Shamir trick: precomputation tables are faster.
     * The trick could be useful if both P and Q are not G (not in our case).
     * @returns non-zero affine point
     */
    multiplyAndAddUnsafe(Q, a, b) {
      const G = Point.BASE;
      const mul = (P, a2) => a2 === _0n$3 || a2 === _1n$5 || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
      const sum = mul(this, a).add(mul(Q, b));
      return sum.is0() ? void 0 : sum;
    }
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    toAffine(iz) {
      const { px: x, py: y, pz: z2 } = this;
      const is0 = this.is0();
      if (iz == null)
        iz = is0 ? Fp2.ONE : Fp2.inv(z2);
      const ax = Fp2.mul(x, iz);
      const ay = Fp2.mul(y, iz);
      const zz = Fp2.mul(z2, iz);
      if (is0)
        return { x: Fp2.ZERO, y: Fp2.ZERO };
      if (!Fp2.eql(zz, Fp2.ONE))
        throw new Error("invZ was invalid");
      return { x: ax, y: ay };
    }
    isTorsionFree() {
      const { h: cofactor, isTorsionFree } = CURVE;
      if (cofactor === _1n$5)
        return true;
      if (isTorsionFree)
        return isTorsionFree(Point, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: cofactor, clearCofactor } = CURVE;
      if (cofactor === _1n$5)
        return this;
      if (clearCofactor)
        return clearCofactor(Point, this);
      return this.multiplyUnsafe(CURVE.h);
    }
    toRawBytes(isCompressed = true) {
      this.assertValidity();
      return toBytes2(Point, this, isCompressed);
    }
    toHex(isCompressed = true) {
      return bytesToHex(this.toRawBytes(isCompressed));
    }
  }
  Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp2.ONE);
  Point.ZERO = new Point(Fp2.ZERO, Fp2.ONE, Fp2.ZERO);
  const _bits = CURVE.nBitLength;
  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
  return {
    CURVE,
    ProjectivePoint: Point,
    normPrivateKeyToScalar,
    weierstrassEquation,
    isWithinCurveOrder
  };
}
function validateOpts$2(curve) {
  const opts = validateBasic(curve);
  validateObject(opts, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  });
  return Object.freeze({ lowS: true, ...opts });
}
function weierstrass(curveDef) {
  const CURVE = validateOpts$2(curveDef);
  const { Fp: Fp2, n: CURVE_ORDER } = CURVE;
  const compressedLen = Fp2.BYTES + 1;
  const uncompressedLen = 2 * Fp2.BYTES + 1;
  function isValidFieldElement(num) {
    return _0n$3 < num && num < Fp2.ORDER;
  }
  function modN(a) {
    return mod(a, CURVE_ORDER);
  }
  function invN(a) {
    return invert(a, CURVE_ORDER);
  }
  const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
    ...CURVE,
    toBytes(_c, point, isCompressed) {
      const a = point.toAffine();
      const x = Fp2.toBytes(a.x);
      const cat = concatBytes;
      if (isCompressed) {
        return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
      } else {
        return cat(Uint8Array.from([4]), x, Fp2.toBytes(a.y));
      }
    },
    fromBytes(bytes2) {
      const len = bytes2.length;
      const head = bytes2[0];
      const tail = bytes2.subarray(1);
      if (len === compressedLen && (head === 2 || head === 3)) {
        const x = bytesToNumberBE(tail);
        if (!isValidFieldElement(x))
          throw new Error("Point is not on curve");
        const y2 = weierstrassEquation(x);
        let y = Fp2.sqrt(y2);
        const isYOdd = (y & _1n$5) === _1n$5;
        const isHeadOdd = (head & 1) === 1;
        if (isHeadOdd !== isYOdd)
          y = Fp2.neg(y);
        return { x, y };
      } else if (len === uncompressedLen && head === 4) {
        const x = Fp2.fromBytes(tail.subarray(0, Fp2.BYTES));
        const y = Fp2.fromBytes(tail.subarray(Fp2.BYTES, 2 * Fp2.BYTES));
        return { x, y };
      } else {
        throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
      }
    }
  });
  const numToNByteStr = (num) => bytesToHex(numberToBytesBE(num, CURVE.nByteLength));
  function isBiggerThanHalfOrder(number2) {
    const HALF = CURVE_ORDER >> _1n$5;
    return number2 > HALF;
  }
  function normalizeS(s) {
    return isBiggerThanHalfOrder(s) ? modN(-s) : s;
  }
  const slcNum = (b, from2, to) => bytesToNumberBE(b.slice(from2, to));
  class Signature {
    constructor(r, s, recovery) {
      this.r = r;
      this.s = s;
      this.recovery = recovery;
      this.assertValidity();
    }
    // pair (bytes of r, bytes of s)
    static fromCompact(hex2) {
      const l2 = CURVE.nByteLength;
      hex2 = ensureBytes("compactSignature", hex2, l2 * 2);
      return new Signature(slcNum(hex2, 0, l2), slcNum(hex2, l2, 2 * l2));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER(hex2) {
      const { r, s } = DER.toSig(ensureBytes("DER", hex2));
      return new Signature(r, s);
    }
    assertValidity() {
      if (!isWithinCurveOrder(this.r))
        throw new Error("r must be 0 < r < CURVE.n");
      if (!isWithinCurveOrder(this.s))
        throw new Error("s must be 0 < s < CURVE.n");
    }
    addRecoveryBit(recovery) {
      return new Signature(this.r, this.s, recovery);
    }
    recoverPublicKey(msgHash) {
      const { r, s, recovery: rec } = this;
      const h = bits2int_modN(ensureBytes("msgHash", msgHash));
      if (rec == null || ![0, 1, 2, 3].includes(rec))
        throw new Error("recovery id invalid");
      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
      if (radj >= Fp2.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const prefix2 = (rec & 1) === 0 ? "02" : "03";
      const R = Point.fromHex(prefix2 + numToNByteStr(radj));
      const ir = invN(radj);
      const u1 = modN(-h * ir);
      const u2 = modN(s * ir);
      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);
      if (!Q)
        throw new Error("point at infinify");
      Q.assertValidity();
      return Q;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return isBiggerThanHalfOrder(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
    }
    // DER-encoded
    toDERRawBytes() {
      return hexToBytes(this.toDERHex());
    }
    toDERHex() {
      return DER.hexFromSig({ r: this.r, s: this.s });
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return hexToBytes(this.toCompactHex());
    }
    toCompactHex() {
      return numToNByteStr(this.r) + numToNByteStr(this.s);
    }
  }
  const utils = {
    isValidPrivateKey(privateKey) {
      try {
        normPrivateKeyToScalar(privateKey);
        return true;
      } catch (error2) {
        return false;
      }
    },
    normPrivateKeyToScalar,
    /**
     * Produces cryptographically secure private key from random of size
     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
     */
    randomPrivateKey: () => {
      const length2 = getMinHashLength(CURVE.n);
      return mapHashToField(CURVE.randomBytes(length2), CURVE.n);
    },
    /**
     * Creates precompute table for an arbitrary EC point. Makes point "cached".
     * Allows to massively speed-up `point.multiply(scalar)`.
     * @returns cached point
     * @example
     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
     * fast.multiply(privKey); // much faster ECDH now
     */
    precompute(windowSize = 8, point = Point.BASE) {
      point._setWindowSize(windowSize);
      point.multiply(BigInt(3));
      return point;
    }
  };
  function getPublicKey(privateKey, isCompressed = true) {
    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
  }
  function isProbPub(item) {
    const arr2 = isBytes(item);
    const str = typeof item === "string";
    const len = (arr2 || str) && item.length;
    if (arr2)
      return len === compressedLen || len === uncompressedLen;
    if (str)
      return len === 2 * compressedLen || len === 2 * uncompressedLen;
    if (item instanceof Point)
      return true;
    return false;
  }
  function getSharedSecret(privateA, publicB, isCompressed = true) {
    if (isProbPub(privateA))
      throw new Error("first arg must be private key");
    if (!isProbPub(publicB))
      throw new Error("second arg must be public key");
    const b = Point.fromHex(publicB);
    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
  }
  const bits2int = CURVE.bits2int || function(bytes2) {
    const num = bytesToNumberBE(bytes2);
    const delta = bytes2.length * 8 - CURVE.nBitLength;
    return delta > 0 ? num >> BigInt(delta) : num;
  };
  const bits2int_modN = CURVE.bits2int_modN || function(bytes2) {
    return modN(bits2int(bytes2));
  };
  const ORDER_MASK = bitMask(CURVE.nBitLength);
  function int2octets(num) {
    if (typeof num !== "bigint")
      throw new Error("bigint expected");
    if (!(_0n$3 <= num && num < ORDER_MASK))
      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
    return numberToBytesBE(num, CURVE.nByteLength);
  }
  function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
    if (["recovered", "canonical"].some((k) => k in opts))
      throw new Error("sign() legacy options not supported");
    const { hash: hash2, randomBytes: randomBytes2 } = CURVE;
    let { lowS, prehash, extraEntropy: ent } = opts;
    if (lowS == null)
      lowS = true;
    msgHash = ensureBytes("msgHash", msgHash);
    if (prehash)
      msgHash = ensureBytes("prehashed msgHash", hash2(msgHash));
    const h1int = bits2int_modN(msgHash);
    const d = normPrivateKeyToScalar(privateKey);
    const seedArgs = [int2octets(d), int2octets(h1int)];
    if (ent != null) {
      const e = ent === true ? randomBytes2(Fp2.BYTES) : ent;
      seedArgs.push(ensureBytes("extraEntropy", e));
    }
    const seed = concatBytes(...seedArgs);
    const m2 = h1int;
    function k2sig(kBytes) {
      const k = bits2int(kBytes);
      if (!isWithinCurveOrder(k))
        return;
      const ik = invN(k);
      const q = Point.BASE.multiply(k).toAffine();
      const r = modN(q.x);
      if (r === _0n$3)
        return;
      const s = modN(ik * modN(m2 + r * d));
      if (s === _0n$3)
        return;
      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n$5);
      let normS = s;
      if (lowS && isBiggerThanHalfOrder(s)) {
        normS = normalizeS(s);
        recovery ^= 1;
      }
      return new Signature(r, normS, recovery);
    }
    return { seed, k2sig };
  }
  const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
  const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
  function sign2(msgHash, privKey, opts = defaultSigOpts) {
    const { seed, k2sig } = prepSig(msgHash, privKey, opts);
    const C = CURVE;
    const drbg = createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
    return drbg(seed, k2sig);
  }
  Point.BASE._setWindowSize(8);
  function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
    var _a2;
    const sg = signature;
    msgHash = ensureBytes("msgHash", msgHash);
    publicKey = ensureBytes("publicKey", publicKey);
    if ("strict" in opts)
      throw new Error("options.strict was renamed to lowS");
    const { lowS, prehash } = opts;
    let _sig = void 0;
    let P;
    try {
      if (typeof sg === "string" || isBytes(sg)) {
        try {
          _sig = Signature.fromDER(sg);
        } catch (derError) {
          if (!(derError instanceof DER.Err))
            throw derError;
          _sig = Signature.fromCompact(sg);
        }
      } else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
        const { r: r2, s: s2 } = sg;
        _sig = new Signature(r2, s2);
      } else {
        throw new Error("PARSE");
      }
      P = Point.fromHex(publicKey);
    } catch (error2) {
      if (error2.message === "PARSE")
        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
      return false;
    }
    if (lowS && _sig.hasHighS())
      return false;
    if (prehash)
      msgHash = CURVE.hash(msgHash);
    const { r, s } = _sig;
    const h = bits2int_modN(msgHash);
    const is = invN(s);
    const u1 = modN(h * is);
    const u2 = modN(r * is);
    const R = (_a2 = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)) == null ? void 0 : _a2.toAffine();
    if (!R)
      return false;
    const v = modN(R.x);
    return v === r;
  }
  return {
    CURVE,
    getPublicKey,
    getSharedSecret,
    sign: sign2,
    verify,
    ProjectivePoint: Point,
    Signature,
    utils
  };
}
function SWUFpSqrtRatio(Fp2, Z) {
  const q = Fp2.ORDER;
  let l2 = _0n$3;
  for (let o = q - _1n$5; o % _2n$4 === _0n$3; o /= _2n$4)
    l2 += _1n$5;
  const c1 = l2;
  const _2n_pow_c1_1 = _2n$4 << c1 - _1n$5 - _1n$5;
  const _2n_pow_c1 = _2n_pow_c1_1 * _2n$4;
  const c2 = (q - _1n$5) / _2n_pow_c1;
  const c3 = (c2 - _1n$5) / _2n$4;
  const c4 = _2n_pow_c1 - _1n$5;
  const c5 = _2n_pow_c1_1;
  const c6 = Fp2.pow(Z, c2);
  const c7 = Fp2.pow(Z, (c2 + _1n$5) / _2n$4);
  let sqrtRatio = (u, v) => {
    let tv1 = c6;
    let tv2 = Fp2.pow(v, c4);
    let tv3 = Fp2.sqr(tv2);
    tv3 = Fp2.mul(tv3, v);
    let tv5 = Fp2.mul(u, tv3);
    tv5 = Fp2.pow(tv5, c3);
    tv5 = Fp2.mul(tv5, tv2);
    tv2 = Fp2.mul(tv5, v);
    tv3 = Fp2.mul(tv5, u);
    let tv4 = Fp2.mul(tv3, tv2);
    tv5 = Fp2.pow(tv4, c5);
    let isQR = Fp2.eql(tv5, Fp2.ONE);
    tv2 = Fp2.mul(tv3, c7);
    tv5 = Fp2.mul(tv4, tv1);
    tv3 = Fp2.cmov(tv2, tv3, isQR);
    tv4 = Fp2.cmov(tv5, tv4, isQR);
    for (let i = c1; i > _1n$5; i--) {
      let tv52 = i - _2n$4;
      tv52 = _2n$4 << tv52 - _1n$5;
      let tvv5 = Fp2.pow(tv4, tv52);
      const e1 = Fp2.eql(tvv5, Fp2.ONE);
      tv2 = Fp2.mul(tv3, tv1);
      tv1 = Fp2.mul(tv1, tv1);
      tvv5 = Fp2.mul(tv4, tv1);
      tv3 = Fp2.cmov(tv2, tv3, e1);
      tv4 = Fp2.cmov(tvv5, tv4, e1);
    }
    return { isValid: isQR, value: tv3 };
  };
  if (Fp2.ORDER % _4n === _3n) {
    const c12 = (Fp2.ORDER - _3n) / _4n;
    const c22 = Fp2.sqrt(Fp2.neg(Z));
    sqrtRatio = (u, v) => {
      let tv1 = Fp2.sqr(v);
      const tv2 = Fp2.mul(u, v);
      tv1 = Fp2.mul(tv1, tv2);
      let y1 = Fp2.pow(tv1, c12);
      y1 = Fp2.mul(y1, tv2);
      const y2 = Fp2.mul(y1, c22);
      const tv3 = Fp2.mul(Fp2.sqr(y1), v);
      const isQR = Fp2.eql(tv3, u);
      let y = Fp2.cmov(y2, y1, isQR);
      return { isValid: isQR, value: y };
    };
  }
  return sqrtRatio;
}
function mapToCurveSimpleSWU(Fp2, opts) {
  validateField(Fp2);
  if (!Fp2.isValid(opts.A) || !Fp2.isValid(opts.B) || !Fp2.isValid(opts.Z))
    throw new Error("mapToCurveSimpleSWU: invalid opts");
  const sqrtRatio = SWUFpSqrtRatio(Fp2, opts.Z);
  if (!Fp2.isOdd)
    throw new Error("Fp.isOdd is not implemented!");
  return (u) => {
    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
    tv1 = Fp2.sqr(u);
    tv1 = Fp2.mul(tv1, opts.Z);
    tv2 = Fp2.sqr(tv1);
    tv2 = Fp2.add(tv2, tv1);
    tv3 = Fp2.add(tv2, Fp2.ONE);
    tv3 = Fp2.mul(tv3, opts.B);
    tv4 = Fp2.cmov(opts.Z, Fp2.neg(tv2), !Fp2.eql(tv2, Fp2.ZERO));
    tv4 = Fp2.mul(tv4, opts.A);
    tv2 = Fp2.sqr(tv3);
    tv6 = Fp2.sqr(tv4);
    tv5 = Fp2.mul(tv6, opts.A);
    tv2 = Fp2.add(tv2, tv5);
    tv2 = Fp2.mul(tv2, tv3);
    tv6 = Fp2.mul(tv6, tv4);
    tv5 = Fp2.mul(tv6, opts.B);
    tv2 = Fp2.add(tv2, tv5);
    x = Fp2.mul(tv1, tv3);
    const { isValid: isValid2, value } = sqrtRatio(tv2, tv6);
    y = Fp2.mul(tv1, u);
    y = Fp2.mul(y, value);
    x = Fp2.cmov(x, tv3, isValid2);
    y = Fp2.cmov(y, value, isValid2);
    const e1 = Fp2.isOdd(u) === Fp2.isOdd(y);
    y = Fp2.cmov(Fp2.neg(y), y, e1);
    x = Fp2.div(x, tv4);
    return { x, y };
  };
}
function validateDST(dst) {
  if (isBytes(dst))
    return dst;
  if (typeof dst === "string")
    return utf8ToBytes(dst);
  throw new Error("DST must be Uint8Array or string");
}
const os2ip = bytesToNumberBE;
function i2osp(value, length2) {
  if (value < 0 || value >= 1 << 8 * length2) {
    throw new Error(`bad I2OSP call: value=${value} length=${length2}`);
  }
  const res = Array.from({ length: length2 }).fill(0);
  for (let i = length2 - 1; i >= 0; i--) {
    res[i] = value & 255;
    value >>>= 8;
  }
  return new Uint8Array(res);
}
function strxor(a, b) {
  const arr2 = new Uint8Array(a.length);
  for (let i = 0; i < a.length; i++) {
    arr2[i] = a[i] ^ b[i];
  }
  return arr2;
}
function abytes(item) {
  if (!isBytes(item))
    throw new Error("Uint8Array expected");
}
function isNum(item) {
  if (!Number.isSafeInteger(item))
    throw new Error("number expected");
}
function expand_message_xmd(msg, DST, lenInBytes, H) {
  abytes(msg);
  abytes(DST);
  isNum(lenInBytes);
  if (DST.length > 255)
    DST = H(concatBytes(utf8ToBytes("H2C-OVERSIZE-DST-"), DST));
  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
  const ell = Math.ceil(lenInBytes / b_in_bytes);
  if (ell > 255)
    throw new Error("Invalid xmd length");
  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));
  const Z_pad = i2osp(0, r_in_bytes);
  const l_i_b_str = i2osp(lenInBytes, 2);
  const b = new Array(ell);
  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));
  for (let i = 1; i <= ell; i++) {
    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];
    b[i] = H(concatBytes(...args));
  }
  const pseudo_random_bytes = concatBytes(...b);
  return pseudo_random_bytes.slice(0, lenInBytes);
}
function expand_message_xof(msg, DST, lenInBytes, k, H) {
  abytes(msg);
  abytes(DST);
  isNum(lenInBytes);
  if (DST.length > 255) {
    const dkLen = Math.ceil(2 * k / 8);
    DST = H.create({ dkLen }).update(utf8ToBytes("H2C-OVERSIZE-DST-")).update(DST).digest();
  }
  if (lenInBytes > 65535 || DST.length > 255)
    throw new Error("expand_message_xof: invalid lenInBytes");
  return H.create({ dkLen: lenInBytes }).update(msg).update(i2osp(lenInBytes, 2)).update(DST).update(i2osp(DST.length, 1)).digest();
}
function hash_to_field(msg, count, options) {
  validateObject(options, {
    DST: "stringOrUint8Array",
    p: "bigint",
    m: "isSafeInteger",
    k: "isSafeInteger",
    hash: "hash"
  });
  const { p, k, m: m2, hash: hash2, expand, DST: _DST } = options;
  abytes(msg);
  isNum(count);
  const DST = validateDST(_DST);
  const log2p = p.toString(2).length;
  const L = Math.ceil((log2p + k) / 8);
  const len_in_bytes = count * m2 * L;
  let prb;
  if (expand === "xmd") {
    prb = expand_message_xmd(msg, DST, len_in_bytes, hash2);
  } else if (expand === "xof") {
    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash2);
  } else if (expand === "_internal_pass") {
    prb = msg;
  } else {
    throw new Error('expand must be "xmd" or "xof"');
  }
  const u = new Array(count);
  for (let i = 0; i < count; i++) {
    const e = new Array(m2);
    for (let j = 0; j < m2; j++) {
      const elm_offset = L * (j + i * m2);
      const tv = prb.subarray(elm_offset, elm_offset + L);
      e[j] = mod(os2ip(tv), p);
    }
    u[i] = e;
  }
  return u;
}
function isogenyMap(field, map2) {
  const COEFF = map2.map((i) => Array.from(i).reverse());
  return (x, y) => {
    const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));
    x = field.div(xNum, xDen);
    y = field.mul(y, field.div(yNum, yDen));
    return { x, y };
  };
}
function createHasher(Point, mapToCurve, def) {
  if (typeof mapToCurve !== "function")
    throw new Error("mapToCurve() must be defined");
  return {
    // Encodes byte string to elliptic curve.
    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
    hashToCurve(msg, options) {
      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });
      const u0 = Point.fromAffine(mapToCurve(u[0]));
      const u1 = Point.fromAffine(mapToCurve(u[1]));
      const P = u0.add(u1).clearCofactor();
      P.assertValidity();
      return P;
    },
    // Encodes byte string to elliptic curve.
    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
    encodeToCurve(msg, options) {
      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });
      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();
      P.assertValidity();
      return P;
    }
  };
}
class HMAC extends Hash {
  constructor(hash$12, _key) {
    super();
    this.finished = false;
    this.destroyed = false;
    hash(hash$12);
    const key = toBytes(_key);
    this.iHash = hash$12.create();
    if (typeof this.iHash.update !== "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen;
    this.outputLen = this.iHash.outputLen;
    const blockLen = this.blockLen;
    const pad = new Uint8Array(blockLen);
    pad.set(key.length > blockLen ? hash$12.create().update(key).digest() : key);
    for (let i = 0; i < pad.length; i++)
      pad[i] ^= 54;
    this.iHash.update(pad);
    this.oHash = hash$12.create();
    for (let i = 0; i < pad.length; i++)
      pad[i] ^= 54 ^ 92;
    this.oHash.update(pad);
    pad.fill(0);
  }
  update(buf) {
    exists(this);
    this.iHash.update(buf);
    return this;
  }
  digestInto(out) {
    exists(this);
    bytes(out, this.outputLen);
    this.finished = true;
    this.iHash.digestInto(out);
    this.oHash.update(out);
    this.oHash.digestInto(out);
    this.destroy();
  }
  digest() {
    const out = new Uint8Array(this.oHash.outputLen);
    this.digestInto(out);
    return out;
  }
  _cloneInto(to) {
    to || (to = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
    to = to;
    to.finished = finished;
    to.destroyed = destroyed;
    to.blockLen = blockLen;
    to.outputLen = outputLen;
    to.oHash = oHash._cloneInto(to.oHash);
    to.iHash = iHash._cloneInto(to.iHash);
    return to;
  }
  destroy() {
    this.destroyed = true;
    this.oHash.destroy();
    this.iHash.destroy();
  }
}
const hmac = (hash2, key, message) => new HMAC(hash2, key).update(message).digest();
hmac.create = (hash2, key) => new HMAC(hash2, key);
function getHash$1(hash2) {
  return {
    hash: hash2,
    hmac: (key, ...msgs) => hmac(hash2, key, concatBytes$1(...msgs)),
    randomBytes
  };
}
function createCurve(curveDef, defHash) {
  const create2 = (hash2) => weierstrass({ ...curveDef, ...getHash$1(hash2) });
  return Object.freeze({ ...create2(defHash), create: create2 });
}
const secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
const secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
const _1n$4 = BigInt(1);
const _2n$3 = BigInt(2);
const divNearest = (a, b) => (a + b / _2n$3) / b;
function sqrtMod(y) {
  const P = secp256k1P;
  const _3n2 = BigInt(3), _6n2 = BigInt(6), _11n2 = BigInt(11), _22n = BigInt(22);
  const _23n2 = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
  const b2 = y * y * y % P;
  const b3 = b2 * b2 * y % P;
  const b6 = pow2(b3, _3n2, P) * b3 % P;
  const b9 = pow2(b6, _3n2, P) * b3 % P;
  const b11 = pow2(b9, _2n$3, P) * b2 % P;
  const b22 = pow2(b11, _11n2, P) * b11 % P;
  const b44 = pow2(b22, _22n, P) * b22 % P;
  const b88 = pow2(b44, _44n, P) * b44 % P;
  const b176 = pow2(b88, _88n, P) * b88 % P;
  const b220 = pow2(b176, _44n, P) * b44 % P;
  const b223 = pow2(b220, _3n2, P) * b3 % P;
  const t1 = pow2(b223, _23n2, P) * b22 % P;
  const t2 = pow2(t1, _6n2, P) * b2 % P;
  const root = pow2(t2, _2n$3, P);
  if (!Fp$1.eql(Fp$1.sqr(root), y))
    throw new Error("Cannot find square root");
  return root;
}
const Fp$1 = Field(secp256k1P, void 0, void 0, { sqrt: sqrtMod });
const secp256k1 = createCurve({
  a: BigInt(0),
  // equation params: a, b
  b: BigInt(7),
  // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975
  Fp: Fp$1,
  // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n
  n: secp256k1N,
  // Curve order, total count of valid points in the field
  // Base point (x, y) aka generator point
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  // Cofactor
  lowS: true,
  // Allow only low-S signatures by default in sign() and verify()
  /**
   * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
   * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
   * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
   * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
   */
  endo: {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (k) => {
      const n = secp256k1N;
      const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
      const b1 = -_1n$4 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
      const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
      const b2 = a1;
      const POW_2_128 = BigInt("0x100000000000000000000000000000000");
      const c1 = divNearest(b2 * k, n);
      const c2 = divNearest(-b1 * k, n);
      let k1 = mod(k - c1 * a1 - c2 * a2, n);
      let k2 = mod(-c1 * b1 - c2 * b2, n);
      const k1neg = k1 > POW_2_128;
      const k2neg = k2 > POW_2_128;
      if (k1neg)
        k1 = n - k1;
      if (k2neg)
        k2 = n - k2;
      if (k1 > POW_2_128 || k2 > POW_2_128) {
        throw new Error("splitScalar: Endomorphism failed, k=" + k);
      }
      return { k1neg, k1, k2neg, k2 };
    }
  }
}, sha256);
BigInt(0);
const isoMap = /* @__PURE__ */ (() => isogenyMap(Fp$1, [
  // xNum
  [
    "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
    "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
    "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
    "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
  ],
  // xDen
  [
    "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
    "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ],
  // yNum
  [
    "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
    "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
    "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
    "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
  ],
  // yDen
  [
    "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
    "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
    "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ]
].map((i) => i.map((j) => BigInt(j)))))();
const mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fp$1, {
  A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
  B: BigInt("1771"),
  Z: Fp$1.create(BigInt("-11"))
}))();
/* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {
  const { x, y } = mapSWU(Fp$1.create(scalars[0]));
  return isoMap(x, y);
}, {
  DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
  encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
  p: Fp$1.ORDER,
  m: 1,
  k: 128,
  expand: "xmd",
  hash: sha256
}))();
function secp256k1PairFromSeed(seed, onlyJs) {
  if (seed.length !== 32) {
    throw new Error("Expected valid 32-byte private key as a seed");
  }
  if (!hasBigInt || !onlyJs && isReady()) {
    const full = secp256k1FromSeed(seed);
    const publicKey = full.slice(32);
    if (u8aEmpty(publicKey)) {
      throw new Error("Invalid publicKey generated from WASM interface");
    }
    return {
      publicKey,
      secretKey: full.slice(0, 32)
    };
  }
  return {
    publicKey: secp256k1.getPublicKey(seed, true),
    secretKey: seed
  };
}
function createSeedDeriveFn(fromSeed, derive2) {
  return (keypair, { chainCode, isHard }) => {
    if (!isHard) {
      throw new Error("A soft key was found in the path and is not supported");
    }
    return fromSeed(derive2(keypair.secretKey.subarray(0, 32), chainCode));
  };
}
const keyHdkdEcdsa = /* @__PURE__ */ createSeedDeriveFn(secp256k1PairFromSeed, secp256k1DeriveHard);
const HDKD = compactAddLength(stringToU8a("Ed25519HDKD"));
function ed25519DeriveHard(seed, chainCode) {
  if (!isU8a(chainCode) || chainCode.length !== 32) {
    throw new Error("Invalid chainCode passed to derive");
  }
  return blake2AsU8a(u8aConcat(HDKD, seed, chainCode));
}
function randomAsU8a(length2 = 32) {
  return getRandomValues(new Uint8Array(length2));
}
const randomAsHex = /* @__PURE__ */ createAsHex(randomAsU8a);
const [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64$1.split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((n) => BigInt(n))))();
const SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);
const SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);
class SHA512 extends SHA2 {
  constructor() {
    super(128, 64, 16, false);
    this.Ah = 1779033703 | 0;
    this.Al = 4089235720 | 0;
    this.Bh = 3144134277 | 0;
    this.Bl = 2227873595 | 0;
    this.Ch = 1013904242 | 0;
    this.Cl = 4271175723 | 0;
    this.Dh = 2773480762 | 0;
    this.Dl = 1595750129 | 0;
    this.Eh = 1359893119 | 0;
    this.El = 2917565137 | 0;
    this.Fh = 2600822924 | 0;
    this.Fl = 725511199 | 0;
    this.Gh = 528734635 | 0;
    this.Gl = 4215389547 | 0;
    this.Hh = 1541459225 | 0;
    this.Hl = 327033209 | 0;
  }
  // prettier-ignore
  get() {
    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
  }
  // prettier-ignore
  set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
    this.Ah = Ah | 0;
    this.Al = Al | 0;
    this.Bh = Bh | 0;
    this.Bl = Bl | 0;
    this.Ch = Ch | 0;
    this.Cl = Cl | 0;
    this.Dh = Dh | 0;
    this.Dl = Dl | 0;
    this.Eh = Eh | 0;
    this.El = El | 0;
    this.Fh = Fh | 0;
    this.Fl = Fl | 0;
    this.Gh = Gh | 0;
    this.Gl = Gl | 0;
    this.Hh = Hh | 0;
    this.Hl = Hl | 0;
  }
  process(view, offset) {
    for (let i = 0; i < 16; i++, offset += 4) {
      SHA512_W_H[i] = view.getUint32(offset);
      SHA512_W_L[i] = view.getUint32(offset += 4);
    }
    for (let i = 16; i < 80; i++) {
      const W15h = SHA512_W_H[i - 15] | 0;
      const W15l = SHA512_W_L[i - 15] | 0;
      const s0h = u64$1.rotrSH(W15h, W15l, 1) ^ u64$1.rotrSH(W15h, W15l, 8) ^ u64$1.shrSH(W15h, W15l, 7);
      const s0l = u64$1.rotrSL(W15h, W15l, 1) ^ u64$1.rotrSL(W15h, W15l, 8) ^ u64$1.shrSL(W15h, W15l, 7);
      const W2h = SHA512_W_H[i - 2] | 0;
      const W2l = SHA512_W_L[i - 2] | 0;
      const s1h = u64$1.rotrSH(W2h, W2l, 19) ^ u64$1.rotrBH(W2h, W2l, 61) ^ u64$1.shrSH(W2h, W2l, 6);
      const s1l = u64$1.rotrSL(W2h, W2l, 19) ^ u64$1.rotrBL(W2h, W2l, 61) ^ u64$1.shrSL(W2h, W2l, 6);
      const SUMl = u64$1.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
      const SUMh = u64$1.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
      SHA512_W_H[i] = SUMh | 0;
      SHA512_W_L[i] = SUMl | 0;
    }
    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    for (let i = 0; i < 80; i++) {
      const sigma1h = u64$1.rotrSH(Eh, El, 14) ^ u64$1.rotrSH(Eh, El, 18) ^ u64$1.rotrBH(Eh, El, 41);
      const sigma1l = u64$1.rotrSL(Eh, El, 14) ^ u64$1.rotrSL(Eh, El, 18) ^ u64$1.rotrBL(Eh, El, 41);
      const CHIh = Eh & Fh ^ ~Eh & Gh;
      const CHIl = El & Fl ^ ~El & Gl;
      const T1ll = u64$1.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
      const T1h = u64$1.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
      const T1l = T1ll | 0;
      const sigma0h = u64$1.rotrSH(Ah, Al, 28) ^ u64$1.rotrBH(Ah, Al, 34) ^ u64$1.rotrBH(Ah, Al, 39);
      const sigma0l = u64$1.rotrSL(Ah, Al, 28) ^ u64$1.rotrBL(Ah, Al, 34) ^ u64$1.rotrBL(Ah, Al, 39);
      const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
      const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
      Hh = Gh | 0;
      Hl = Gl | 0;
      Gh = Fh | 0;
      Gl = Fl | 0;
      Fh = Eh | 0;
      Fl = El | 0;
      ({ h: Eh, l: El } = u64$1.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
      Dh = Ch | 0;
      Dl = Cl | 0;
      Ch = Bh | 0;
      Cl = Bl | 0;
      Bh = Ah | 0;
      Bl = Al | 0;
      const All = u64$1.add3L(T1l, sigma0l, MAJl);
      Ah = u64$1.add3H(All, T1h, sigma0h, MAJh);
      Al = All | 0;
    }
    ({ h: Ah, l: Al } = u64$1.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
    ({ h: Bh, l: Bl } = u64$1.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
    ({ h: Ch, l: Cl } = u64$1.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
    ({ h: Dh, l: Dl } = u64$1.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
    ({ h: Eh, l: El } = u64$1.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
    ({ h: Fh, l: Fl } = u64$1.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
    ({ h: Gh, l: Gl } = u64$1.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
    ({ h: Hh, l: Hl } = u64$1.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
  }
  roundClean() {
    SHA512_W_H.fill(0);
    SHA512_W_L.fill(0);
  }
  destroy() {
    this.buffer.fill(0);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
}
class SHA512_224 extends SHA512 {
  constructor() {
    super();
    this.Ah = 2352822216 | 0;
    this.Al = 424955298 | 0;
    this.Bh = 1944164710 | 0;
    this.Bl = 2312950998 | 0;
    this.Ch = 502970286 | 0;
    this.Cl = 855612546 | 0;
    this.Dh = 1738396948 | 0;
    this.Dl = 1479516111 | 0;
    this.Eh = 258812777 | 0;
    this.El = 2077511080 | 0;
    this.Fh = 2011393907 | 0;
    this.Fl = 79989058 | 0;
    this.Gh = 1067287976 | 0;
    this.Gl = 1780299464 | 0;
    this.Hh = 286451373 | 0;
    this.Hl = 2446758561 | 0;
    this.outputLen = 28;
  }
}
class SHA512_256 extends SHA512 {
  constructor() {
    super();
    this.Ah = 573645204 | 0;
    this.Al = 4230739756 | 0;
    this.Bh = 2673172387 | 0;
    this.Bl = 3360449730 | 0;
    this.Ch = 596883563 | 0;
    this.Cl = 1867755857 | 0;
    this.Dh = 2520282905 | 0;
    this.Dl = 1497426621 | 0;
    this.Eh = 2519219938 | 0;
    this.El = 2827943907 | 0;
    this.Fh = 3193839141 | 0;
    this.Fl = 1401305490 | 0;
    this.Gh = 721525244 | 0;
    this.Gl = 746961066 | 0;
    this.Hh = 246885852 | 0;
    this.Hl = 2177182882 | 0;
    this.outputLen = 32;
  }
}
class SHA384 extends SHA512 {
  constructor() {
    super();
    this.Ah = 3418070365 | 0;
    this.Al = 3238371032 | 0;
    this.Bh = 1654270250 | 0;
    this.Bl = 914150663 | 0;
    this.Ch = 2438529370 | 0;
    this.Cl = 812702999 | 0;
    this.Dh = 355462360 | 0;
    this.Dl = 4144912697 | 0;
    this.Eh = 1731405415 | 0;
    this.El = 4290775857 | 0;
    this.Fh = 2394180231 | 0;
    this.Fl = 1750603025 | 0;
    this.Gh = 3675008525 | 0;
    this.Gl = 1694076839 | 0;
    this.Hh = 1203062813 | 0;
    this.Hl = 3204075428 | 0;
    this.outputLen = 48;
  }
}
const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());
/* @__PURE__ */ wrapConstructor(() => new SHA512_224());
/* @__PURE__ */ wrapConstructor(() => new SHA512_256());
/* @__PURE__ */ wrapConstructor(() => new SHA384());
const _0n$2 = BigInt(0), _1n$3 = BigInt(1), _2n$2 = BigInt(2), _8n = BigInt(8);
const VERIFY_DEFAULT = { zip215: true };
function validateOpts$1(curve) {
  const opts = validateBasic(curve);
  validateObject(curve, {
    hash: "function",
    a: "bigint",
    d: "bigint",
    randomBytes: "function"
  }, {
    adjustScalarBytes: "function",
    domain: "function",
    uvRatio: "function",
    mapToCurve: "function"
  });
  return Object.freeze({ ...opts });
}
function twistedEdwards(curveDef) {
  const CURVE = validateOpts$1(curveDef);
  const { Fp: Fp2, n: CURVE_ORDER, prehash, hash: cHash, randomBytes: randomBytes2, nByteLength, h: cofactor } = CURVE;
  const MASK = _2n$2 << BigInt(nByteLength * 8) - _1n$3;
  const modP = Fp2.create;
  const uvRatio2 = CURVE.uvRatio || ((u, v) => {
    try {
      return { isValid: true, value: Fp2.sqrt(u * Fp2.inv(v)) };
    } catch (e) {
      return { isValid: false, value: _0n$2 };
    }
  });
  const adjustScalarBytes2 = CURVE.adjustScalarBytes || ((bytes2) => bytes2);
  const domain = CURVE.domain || ((data, ctx, phflag) => {
    if (ctx.length || phflag)
      throw new Error("Contexts/pre-hash are not supported");
    return data;
  });
  const inBig = (n) => typeof n === "bigint" && _0n$2 < n;
  const inRange = (n, max2) => inBig(n) && inBig(max2) && n < max2;
  const in0MaskRange = (n) => n === _0n$2 || inRange(n, MASK);
  function assertInRange(n, max2) {
    if (inRange(n, max2))
      return n;
    throw new Error(`Expected valid scalar < ${max2}, got ${typeof n} ${n}`);
  }
  function assertGE0(n) {
    return n === _0n$2 ? n : assertInRange(n, CURVE_ORDER);
  }
  const pointPrecomputes = /* @__PURE__ */ new Map();
  function isPoint(other) {
    if (!(other instanceof Point))
      throw new Error("ExtendedPoint expected");
  }
  class Point {
    constructor(ex, ey, ez, et) {
      this.ex = ex;
      this.ey = ey;
      this.ez = ez;
      this.et = et;
      if (!in0MaskRange(ex))
        throw new Error("x required");
      if (!in0MaskRange(ey))
        throw new Error("y required");
      if (!in0MaskRange(ez))
        throw new Error("z required");
      if (!in0MaskRange(et))
        throw new Error("t required");
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static fromAffine(p) {
      if (p instanceof Point)
        throw new Error("extended point not allowed");
      const { x, y } = p || {};
      if (!in0MaskRange(x) || !in0MaskRange(y))
        throw new Error("invalid affine point");
      return new Point(x, y, _1n$3, modP(x * y));
    }
    static normalizeZ(points) {
      const toInv = Fp2.invertBatch(points.map((p) => p.ez));
      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
    }
    // "Private method", don't use it directly
    _setWindowSize(windowSize) {
      this._WINDOW_SIZE = windowSize;
      pointPrecomputes.delete(this);
    }
    // Not required for fromHex(), which always creates valid points.
    // Could be useful for fromAffine().
    assertValidity() {
      const { a, d } = CURVE;
      if (this.is0())
        throw new Error("bad point: ZERO");
      const { ex: X, ey: Y, ez: Z, et: T } = this;
      const X2 = modP(X * X);
      const Y2 = modP(Y * Y);
      const Z2 = modP(Z * Z);
      const Z4 = modP(Z2 * Z2);
      const aX2 = modP(X2 * a);
      const left = modP(Z2 * modP(aX2 + Y2));
      const right = modP(Z4 + modP(d * modP(X2 * Y2)));
      if (left !== right)
        throw new Error("bad point: equation left != right (1)");
      const XY = modP(X * Y);
      const ZT = modP(Z * T);
      if (XY !== ZT)
        throw new Error("bad point: equation left != right (2)");
    }
    // Compare one point to another.
    equals(other) {
      isPoint(other);
      const { ex: X1, ey: Y1, ez: Z1 } = this;
      const { ex: X2, ey: Y2, ez: Z2 } = other;
      const X1Z2 = modP(X1 * Z2);
      const X2Z1 = modP(X2 * Z1);
      const Y1Z2 = modP(Y1 * Z2);
      const Y2Z1 = modP(Y2 * Z1);
      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;
    }
    is0() {
      return this.equals(Point.ZERO);
    }
    negate() {
      return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));
    }
    // Fast algo for doubling Extended Point.
    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd
    // Cost: 4M + 4S + 1*a + 6add + 1*2.
    double() {
      const { a } = CURVE;
      const { ex: X1, ey: Y1, ez: Z1 } = this;
      const A = modP(X1 * X1);
      const B = modP(Y1 * Y1);
      const C = modP(_2n$2 * modP(Z1 * Z1));
      const D = modP(a * A);
      const x1y1 = X1 + Y1;
      const E = modP(modP(x1y1 * x1y1) - A - B);
      const G3 = D + B;
      const F = G3 - C;
      const H = D - B;
      const X3 = modP(E * F);
      const Y3 = modP(G3 * H);
      const T3 = modP(E * H);
      const Z3 = modP(F * G3);
      return new Point(X3, Y3, Z3, T3);
    }
    // Fast algo for adding 2 Extended Points.
    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd
    // Cost: 9M + 1*a + 1*d + 7add.
    add(other) {
      isPoint(other);
      const { a, d } = CURVE;
      const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;
      const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;
      if (a === BigInt(-1)) {
        const A2 = modP((Y1 - X1) * (Y2 + X2));
        const B2 = modP((Y1 + X1) * (Y2 - X2));
        const F2 = modP(B2 - A2);
        if (F2 === _0n$2)
          return this.double();
        const C2 = modP(Z1 * _2n$2 * T2);
        const D2 = modP(T1 * _2n$2 * Z2);
        const E2 = D2 + C2;
        const G4 = B2 + A2;
        const H2 = D2 - C2;
        const X32 = modP(E2 * F2);
        const Y32 = modP(G4 * H2);
        const T32 = modP(E2 * H2);
        const Z32 = modP(F2 * G4);
        return new Point(X32, Y32, Z32, T32);
      }
      const A = modP(X1 * X2);
      const B = modP(Y1 * Y2);
      const C = modP(T1 * d * T2);
      const D = modP(Z1 * Z2);
      const E = modP((X1 + Y1) * (X2 + Y2) - A - B);
      const F = D - C;
      const G3 = D + C;
      const H = modP(B - a * A);
      const X3 = modP(E * F);
      const Y3 = modP(G3 * H);
      const T3 = modP(E * H);
      const Z3 = modP(F * G3);
      return new Point(X3, Y3, Z3, T3);
    }
    subtract(other) {
      return this.add(other.negate());
    }
    wNAF(n) {
      return wnaf.wNAFCached(this, pointPrecomputes, n, Point.normalizeZ);
    }
    // Constant-time multiplication.
    multiply(scalar) {
      const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));
      return Point.normalizeZ([p, f])[0];
    }
    // Non-constant-time multiplication. Uses double-and-add algorithm.
    // It's faster, but should only be used when you don't care about
    // an exposed private key e.g. sig verification.
    // Does NOT allow scalars higher than CURVE.n.
    multiplyUnsafe(scalar) {
      let n = assertGE0(scalar);
      if (n === _0n$2)
        return I;
      if (this.equals(I) || n === _1n$3)
        return this;
      if (this.equals(G))
        return this.wNAF(n).p;
      return wnaf.unsafeLadder(this, n);
    }
    // Checks if point is of small order.
    // If you add something to small order point, you will have "dirty"
    // point with torsion component.
    // Multiplies point by cofactor and checks if the result is 0.
    isSmallOrder() {
      return this.multiplyUnsafe(cofactor).is0();
    }
    // Multiplies point by curve order and checks if the result is 0.
    // Returns `false` is the point is dirty.
    isTorsionFree() {
      return wnaf.unsafeLadder(this, CURVE_ORDER).is0();
    }
    // Converts Extended point to default (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    toAffine(iz) {
      const { ex: x, ey: y, ez: z2 } = this;
      const is0 = this.is0();
      if (iz == null)
        iz = is0 ? _8n : Fp2.inv(z2);
      const ax = modP(x * iz);
      const ay = modP(y * iz);
      const zz = modP(z2 * iz);
      if (is0)
        return { x: _0n$2, y: _1n$3 };
      if (zz !== _1n$3)
        throw new Error("invZ was invalid");
      return { x: ax, y: ay };
    }
    clearCofactor() {
      const { h: cofactor2 } = CURVE;
      if (cofactor2 === _1n$3)
        return this;
      return this.multiplyUnsafe(cofactor2);
    }
    // Converts hash string or Uint8Array to Point.
    // Uses algo from RFC8032 5.1.3.
    static fromHex(hex2, zip215 = false) {
      const { d, a } = CURVE;
      const len = Fp2.BYTES;
      hex2 = ensureBytes("pointHex", hex2, len);
      const normed = hex2.slice();
      const lastByte = hex2[len - 1];
      normed[len - 1] = lastByte & ~128;
      const y = bytesToNumberLE(normed);
      if (y === _0n$2)
        ;
      else {
        if (zip215)
          assertInRange(y, MASK);
        else
          assertInRange(y, Fp2.ORDER);
      }
      const y2 = modP(y * y);
      const u = modP(y2 - _1n$3);
      const v = modP(d * y2 - a);
      let { isValid: isValid2, value: x } = uvRatio2(u, v);
      if (!isValid2)
        throw new Error("Point.fromHex: invalid y coordinate");
      const isXOdd = (x & _1n$3) === _1n$3;
      const isLastByteOdd = (lastByte & 128) !== 0;
      if (!zip215 && x === _0n$2 && isLastByteOdd)
        throw new Error("Point.fromHex: x=0 and x_0=1");
      if (isLastByteOdd !== isXOdd)
        x = modP(-x);
      return Point.fromAffine({ x, y });
    }
    static fromPrivateKey(privKey) {
      return getExtendedPublicKey(privKey).point;
    }
    toRawBytes() {
      const { x, y } = this.toAffine();
      const bytes2 = numberToBytesLE(y, Fp2.BYTES);
      bytes2[bytes2.length - 1] |= x & _1n$3 ? 128 : 0;
      return bytes2;
    }
    toHex() {
      return bytesToHex(this.toRawBytes());
    }
  }
  Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n$3, modP(CURVE.Gx * CURVE.Gy));
  Point.ZERO = new Point(_0n$2, _1n$3, _1n$3, _0n$2);
  const { BASE: G, ZERO: I } = Point;
  const wnaf = wNAF(Point, nByteLength * 8);
  function modN(a) {
    return mod(a, CURVE_ORDER);
  }
  function modN_LE(hash2) {
    return modN(bytesToNumberLE(hash2));
  }
  function getExtendedPublicKey(key) {
    const len = nByteLength;
    key = ensureBytes("private key", key, len);
    const hashed = ensureBytes("hashed private key", cHash(key), 2 * len);
    const head = adjustScalarBytes2(hashed.slice(0, len));
    const prefix2 = hashed.slice(len, 2 * len);
    const scalar = modN_LE(head);
    const point = G.multiply(scalar);
    const pointBytes = point.toRawBytes();
    return { head, prefix: prefix2, scalar, point, pointBytes };
  }
  function getPublicKey(privKey) {
    return getExtendedPublicKey(privKey).pointBytes;
  }
  function hashDomainToScalar(context = new Uint8Array(), ...msgs) {
    const msg = concatBytes(...msgs);
    return modN_LE(cHash(domain(msg, ensureBytes("context", context), !!prehash)));
  }
  function sign2(msg, privKey, options = {}) {
    msg = ensureBytes("message", msg);
    if (prehash)
      msg = prehash(msg);
    const { prefix: prefix2, scalar, pointBytes } = getExtendedPublicKey(privKey);
    const r = hashDomainToScalar(options.context, prefix2, msg);
    const R = G.multiply(r).toRawBytes();
    const k = hashDomainToScalar(options.context, R, pointBytes, msg);
    const s = modN(r + k * scalar);
    assertGE0(s);
    const res = concatBytes(R, numberToBytesLE(s, Fp2.BYTES));
    return ensureBytes("result", res, nByteLength * 2);
  }
  const verifyOpts = VERIFY_DEFAULT;
  function verify(sig2, msg, publicKey, options = verifyOpts) {
    const { context, zip215 } = options;
    const len = Fp2.BYTES;
    sig2 = ensureBytes("signature", sig2, 2 * len);
    msg = ensureBytes("message", msg);
    if (prehash)
      msg = prehash(msg);
    const s = bytesToNumberLE(sig2.slice(len, 2 * len));
    let A, R, SB;
    try {
      A = Point.fromHex(publicKey, zip215);
      R = Point.fromHex(sig2.slice(0, len), zip215);
      SB = G.multiplyUnsafe(s);
    } catch (error2) {
      return false;
    }
    if (!zip215 && A.isSmallOrder())
      return false;
    const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);
    const RkA = R.add(A.multiplyUnsafe(k));
    return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);
  }
  G._setWindowSize(8);
  const utils = {
    getExtendedPublicKey,
    // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.
    randomPrivateKey: () => randomBytes2(Fp2.BYTES),
    /**
     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT
     * values. This slows down first getPublicKey() by milliseconds (see Speed section),
     * but allows to speed-up subsequent getPublicKey() calls up to 20x.
     * @param windowSize 2, 4, 8, 16
     */
    precompute(windowSize = 8, point = Point.BASE) {
      point._setWindowSize(windowSize);
      point.multiply(BigInt(3));
      return point;
    }
  };
  return {
    CURVE,
    getPublicKey,
    sign: sign2,
    verify,
    ExtendedPoint: Point,
    utils
  };
}
const _0n$1 = BigInt(0);
const _1n$2 = BigInt(1);
function validateOpts(curve) {
  validateObject(curve, {
    a: "bigint"
  }, {
    montgomeryBits: "isSafeInteger",
    nByteLength: "isSafeInteger",
    adjustScalarBytes: "function",
    domain: "function",
    powPminus2: "function",
    Gu: "bigint"
  });
  return Object.freeze({ ...curve });
}
function montgomery(curveDef) {
  const CURVE = validateOpts(curveDef);
  const { P } = CURVE;
  const modP = (n) => mod(n, P);
  const montgomeryBits = CURVE.montgomeryBits;
  const montgomeryBytes = Math.ceil(montgomeryBits / 8);
  const fieldLen = CURVE.nByteLength;
  const adjustScalarBytes2 = CURVE.adjustScalarBytes || ((bytes2) => bytes2);
  const powPminus2 = CURVE.powPminus2 || ((x) => pow(x, P - BigInt(2), P));
  function cswap(swap, x_2, x_3) {
    const dummy = modP(swap * (x_2 - x_3));
    x_2 = modP(x_2 - dummy);
    x_3 = modP(x_3 + dummy);
    return [x_2, x_3];
  }
  function assertFieldElement(n) {
    if (typeof n === "bigint" && _0n$1 <= n && n < P)
      return n;
    throw new Error("Expected valid scalar 0 < scalar < CURVE.P");
  }
  const a24 = (CURVE.a - BigInt(2)) / BigInt(4);
  function montgomeryLadder(pointU, scalar) {
    const u = assertFieldElement(pointU);
    const k = assertFieldElement(scalar);
    const x_1 = u;
    let x_2 = _1n$2;
    let z_2 = _0n$1;
    let x_3 = u;
    let z_3 = _1n$2;
    let swap = _0n$1;
    let sw;
    for (let t = BigInt(montgomeryBits - 1); t >= _0n$1; t--) {
      const k_t = k >> t & _1n$2;
      swap ^= k_t;
      sw = cswap(swap, x_2, x_3);
      x_2 = sw[0];
      x_3 = sw[1];
      sw = cswap(swap, z_2, z_3);
      z_2 = sw[0];
      z_3 = sw[1];
      swap = k_t;
      const A = x_2 + z_2;
      const AA = modP(A * A);
      const B = x_2 - z_2;
      const BB = modP(B * B);
      const E = AA - BB;
      const C = x_3 + z_3;
      const D = x_3 - z_3;
      const DA = modP(D * A);
      const CB = modP(C * B);
      const dacb = DA + CB;
      const da_cb = DA - CB;
      x_3 = modP(dacb * dacb);
      z_3 = modP(x_1 * modP(da_cb * da_cb));
      x_2 = modP(AA * BB);
      z_2 = modP(E * (AA + modP(a24 * E)));
    }
    sw = cswap(swap, x_2, x_3);
    x_2 = sw[0];
    x_3 = sw[1];
    sw = cswap(swap, z_2, z_3);
    z_2 = sw[0];
    z_3 = sw[1];
    const z2 = powPminus2(z_2);
    return modP(x_2 * z2);
  }
  function encodeUCoordinate(u) {
    return numberToBytesLE(modP(u), montgomeryBytes);
  }
  function decodeUCoordinate(uEnc) {
    const u = ensureBytes("u coordinate", uEnc, montgomeryBytes);
    if (fieldLen === 32)
      u[31] &= 127;
    return bytesToNumberLE(u);
  }
  function decodeScalar(n) {
    const bytes2 = ensureBytes("scalar", n);
    const len = bytes2.length;
    if (len !== montgomeryBytes && len !== fieldLen)
      throw new Error(`Expected ${montgomeryBytes} or ${fieldLen} bytes, got ${len}`);
    return bytesToNumberLE(adjustScalarBytes2(bytes2));
  }
  function scalarMult(scalar, u) {
    const pointU = decodeUCoordinate(u);
    const _scalar = decodeScalar(scalar);
    const pu = montgomeryLadder(pointU, _scalar);
    if (pu === _0n$1)
      throw new Error("Invalid private or public key received");
    return encodeUCoordinate(pu);
  }
  const GuBytes = encodeUCoordinate(CURVE.Gu);
  function scalarMultBase(scalar) {
    return scalarMult(scalar, GuBytes);
  }
  return {
    scalarMult,
    scalarMultBase,
    getSharedSecret: (privateKey, publicKey) => scalarMult(privateKey, publicKey),
    getPublicKey: (privateKey) => scalarMultBase(privateKey),
    utils: { randomPrivateKey: () => CURVE.randomBytes(CURVE.nByteLength) },
    GuBytes
  };
}
const ED25519_P = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
const ED25519_SQRT_M1 = BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");
BigInt(0);
const _1n$1 = BigInt(1), _2n$1 = BigInt(2), _5n = BigInt(5);
const _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);
function ed25519_pow_2_252_3(x) {
  const P = ED25519_P;
  const x2 = x * x % P;
  const b2 = x2 * x % P;
  const b4 = pow2(b2, _2n$1, P) * b2 % P;
  const b5 = pow2(b4, _1n$1, P) * x % P;
  const b10 = pow2(b5, _5n, P) * b5 % P;
  const b20 = pow2(b10, _10n, P) * b10 % P;
  const b40 = pow2(b20, _20n, P) * b20 % P;
  const b80 = pow2(b40, _40n, P) * b40 % P;
  const b160 = pow2(b80, _80n, P) * b80 % P;
  const b240 = pow2(b160, _80n, P) * b80 % P;
  const b250 = pow2(b240, _10n, P) * b10 % P;
  const pow_p_5_8 = pow2(b250, _2n$1, P) * x % P;
  return { pow_p_5_8, b2 };
}
function adjustScalarBytes(bytes2) {
  bytes2[0] &= 248;
  bytes2[31] &= 127;
  bytes2[31] |= 64;
  return bytes2;
}
function uvRatio(u, v) {
  const P = ED25519_P;
  const v3 = mod(v * v * v, P);
  const v7 = mod(v3 * v3 * v, P);
  const pow3 = ed25519_pow_2_252_3(u * v7).pow_p_5_8;
  let x = mod(u * v3 * pow3, P);
  const vx2 = mod(v * x * x, P);
  const root1 = x;
  const root2 = mod(x * ED25519_SQRT_M1, P);
  const useRoot1 = vx2 === u;
  const useRoot2 = vx2 === mod(-u, P);
  const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P);
  if (useRoot1)
    x = root1;
  if (useRoot2 || noRoot)
    x = root2;
  if (isNegativeLE(x, P))
    x = mod(-x, P);
  return { isValid: useRoot1 || useRoot2, value: x };
}
const Fp = Field(ED25519_P, void 0, true);
const ed25519Defaults = {
  // Param: a
  a: BigInt(-1),
  // Fp.create(-1) is proper; our way still works and is faster
  // d is equal to -121665/121666 over finite field.
  // Negative number is P - number, and division is invert(number, P)
  d: BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"),
  // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n
  Fp,
  // Subgroup order: how many points curve has
  // 2n**252n + 27742317777372353535851937790883648493n;
  n: BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"),
  // Cofactor
  h: BigInt(8),
  // Base point (x, y) aka generator point
  Gx: BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"),
  Gy: BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"),
  hash: sha512,
  randomBytes,
  adjustScalarBytes,
  // dom2
  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.
  // Constant-time, u/√v
  uvRatio
};
const ed25519 = /* @__PURE__ */ twistedEdwards(ed25519Defaults);
function ed25519_domain(data, ctx, phflag) {
  if (ctx.length > 255)
    throw new Error("Context is too big");
  return concatBytes$1(utf8ToBytes$1("SigEd25519 no Ed25519 collisions"), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);
}
/* @__PURE__ */ twistedEdwards({
  ...ed25519Defaults,
  domain: ed25519_domain
});
/* @__PURE__ */ twistedEdwards({
  ...ed25519Defaults,
  domain: ed25519_domain,
  prehash: sha512
});
/* @__PURE__ */ (() => montgomery({
  P: ED25519_P,
  a: BigInt(486662),
  montgomeryBits: 255,
  // n is 253 bits
  nByteLength: 32,
  Gu: BigInt(9),
  powPminus2: (x) => {
    const P = ED25519_P;
    const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);
    return mod(pow2(pow_p_5_8, BigInt(3), P) * b2, P);
  },
  adjustScalarBytes,
  randomBytes
}))();
const ELL2_C1 = (Fp.ORDER + BigInt(3)) / BigInt(8);
const ELL2_C2 = Fp.pow(_2n$1, ELL2_C1);
const ELL2_C3 = Fp.sqrt(Fp.neg(Fp.ONE));
const ELL2_C4 = (Fp.ORDER - BigInt(5)) / BigInt(8);
const ELL2_J = BigInt(486662);
function map_to_curve_elligator2_curve25519(u) {
  let tv1 = Fp.sqr(u);
  tv1 = Fp.mul(tv1, _2n$1);
  let xd = Fp.add(tv1, Fp.ONE);
  let x1n = Fp.neg(ELL2_J);
  let tv2 = Fp.sqr(xd);
  let gxd = Fp.mul(tv2, xd);
  let gx1 = Fp.mul(tv1, ELL2_J);
  gx1 = Fp.mul(gx1, x1n);
  gx1 = Fp.add(gx1, tv2);
  gx1 = Fp.mul(gx1, x1n);
  let tv3 = Fp.sqr(gxd);
  tv2 = Fp.sqr(tv3);
  tv3 = Fp.mul(tv3, gxd);
  tv3 = Fp.mul(tv3, gx1);
  tv2 = Fp.mul(tv2, tv3);
  let y11 = Fp.pow(tv2, ELL2_C4);
  y11 = Fp.mul(y11, tv3);
  let y12 = Fp.mul(y11, ELL2_C3);
  tv2 = Fp.sqr(y11);
  tv2 = Fp.mul(tv2, gxd);
  let e1 = Fp.eql(tv2, gx1);
  let y1 = Fp.cmov(y12, y11, e1);
  let x2n = Fp.mul(x1n, tv1);
  let y21 = Fp.mul(y11, u);
  y21 = Fp.mul(y21, ELL2_C2);
  let y22 = Fp.mul(y21, ELL2_C3);
  let gx2 = Fp.mul(gx1, tv1);
  tv2 = Fp.sqr(y21);
  tv2 = Fp.mul(tv2, gxd);
  let e2 = Fp.eql(tv2, gx2);
  let y2 = Fp.cmov(y22, y21, e2);
  tv2 = Fp.sqr(y1);
  tv2 = Fp.mul(tv2, gxd);
  let e3 = Fp.eql(tv2, gx1);
  let xn = Fp.cmov(x2n, x1n, e3);
  let y = Fp.cmov(y2, y1, e3);
  let e4 = Fp.isOdd(y);
  y = Fp.cmov(y, Fp.neg(y), e3 !== e4);
  return { xMn: xn, xMd: xd, yMn: y, yMd: _1n$1 };
}
const ELL2_C1_EDWARDS = FpSqrtEven(Fp, Fp.neg(BigInt(486664)));
function map_to_curve_elligator2_edwards25519(u) {
  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u);
  let xn = Fp.mul(xMn, yMd);
  xn = Fp.mul(xn, ELL2_C1_EDWARDS);
  let xd = Fp.mul(xMd, yMn);
  let yn = Fp.sub(xMn, xMd);
  let yd = Fp.add(xMn, xMd);
  let tv1 = Fp.mul(xd, yd);
  let e = Fp.eql(tv1, Fp.ZERO);
  xn = Fp.cmov(xn, Fp.ZERO, e);
  xd = Fp.cmov(xd, Fp.ONE, e);
  yn = Fp.cmov(yn, Fp.ONE, e);
  yd = Fp.cmov(yd, Fp.ONE, e);
  const inv = Fp.invertBatch([xd, yd]);
  return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) };
}
/* @__PURE__ */ (() => createHasher(ed25519.ExtendedPoint, (scalars) => map_to_curve_elligator2_edwards25519(scalars[0]), {
  DST: "edwards25519_XMD:SHA-512_ELL2_RO_",
  encodeDST: "edwards25519_XMD:SHA-512_ELL2_NU_",
  p: Fp.ORDER,
  m: 1,
  k: 128,
  expand: "xmd",
  hash: sha512
}))();
BigInt("25063068953384623474111414158702152701244531502492656460079210482610430750235");
BigInt("54469307008909316920995813868745141605393597292927456921205312896311721017578");
BigInt("1159843021668779879193775521855586647937357759715417654439879720876111806838");
BigInt("40440834346308536858101042469323190826248399146238708352240133220865137265952");
BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
function ed25519PairFromSeed(seed, onlyJs) {
  if (!hasBigInt || !onlyJs && isReady()) {
    const full = ed25519KeypairFromSeed(seed);
    return {
      publicKey: full.slice(32),
      secretKey: full.slice(0, 64)
    };
  }
  const publicKey = ed25519.getPublicKey(seed);
  return {
    publicKey,
    secretKey: u8aConcatStrict([seed, publicKey])
  };
}
function ed25519Sign(message, { publicKey, secretKey }, onlyJs) {
  if (!secretKey) {
    throw new Error("Expected a valid secretKey");
  } else if (!publicKey) {
    throw new Error("Expected a valid publicKey");
  }
  const messageU8a = u8aToU8a(message);
  const privateU8a = secretKey.subarray(0, 32);
  return !hasBigInt || !onlyJs && isReady() ? ed25519Sign$1(publicKey, privateU8a, messageU8a) : ed25519.sign(messageU8a, privateU8a);
}
function ed25519Verify(message, signature, publicKey, onlyJs) {
  const messageU8a = u8aToU8a(message);
  const publicKeyU8a = u8aToU8a(publicKey);
  const signatureU8a = u8aToU8a(signature);
  if (publicKeyU8a.length !== 32) {
    throw new Error(`Invalid publicKey, received ${publicKeyU8a.length}, expected 32`);
  } else if (signatureU8a.length !== 64) {
    throw new Error(`Invalid signature, received ${signatureU8a.length} bytes, expected 64`);
  }
  try {
    return !hasBigInt || !onlyJs && isReady() ? ed25519Verify$1(signatureU8a, messageU8a, publicKeyU8a) : ed25519.verify(signatureU8a, messageU8a, publicKeyU8a);
  } catch {
    return false;
  }
}
const keyHdkdEd25519 = /* @__PURE__ */ createSeedDeriveFn(ed25519PairFromSeed, ed25519DeriveHard);
const SEC_LEN = 64;
const PUB_LEN = 32;
const TOT_LEN = SEC_LEN + PUB_LEN;
function sr25519PairFromU8a(full) {
  const fullU8a = u8aToU8a(full);
  if (fullU8a.length !== TOT_LEN) {
    throw new Error(`Expected keypair with ${TOT_LEN} bytes, found ${fullU8a.length}`);
  }
  return {
    publicKey: fullU8a.slice(SEC_LEN, TOT_LEN),
    secretKey: fullU8a.slice(0, SEC_LEN)
  };
}
function sr25519KeypairToU8a({ publicKey, secretKey }) {
  return u8aConcat(secretKey, publicKey).slice();
}
function createDeriveFn(derive2) {
  return (keypair, chainCode) => {
    if (!isU8a(chainCode) || chainCode.length !== 32) {
      throw new Error("Invalid chainCode passed to derive");
    }
    return sr25519PairFromU8a(derive2(sr25519KeypairToU8a(keypair), chainCode));
  };
}
const sr25519DeriveHard = /* @__PURE__ */ createDeriveFn(sr25519DeriveKeypairHard);
const sr25519DeriveSoft = /* @__PURE__ */ createDeriveFn(sr25519DeriveKeypairSoft);
function keyHdkdSr25519(keypair, { chainCode, isSoft }) {
  return isSoft ? sr25519DeriveSoft(keypair, chainCode) : sr25519DeriveHard(keypair, chainCode);
}
const generators = {
  ecdsa: keyHdkdEcdsa,
  ed25519: keyHdkdEd25519,
  // FIXME This is Substrate-compatible, not Ethereum-compatible
  ethereum: keyHdkdEcdsa,
  sr25519: keyHdkdSr25519
};
function keyFromPath(pair, path2, type) {
  const keyHdkd = generators[type];
  let result = pair;
  for (const junction of path2) {
    result = keyHdkd(result, junction);
  }
  return result;
}
function sr25519PairFromSeed(seed) {
  const seedU8a = u8aToU8a(seed);
  if (seedU8a.length !== 32) {
    throw new Error(`Expected a seed matching 32 bytes, found ${seedU8a.length}`);
  }
  return sr25519PairFromU8a(sr25519KeypairFromSeed(seedU8a));
}
function sr25519Sign(message, { publicKey, secretKey }) {
  if ((publicKey == null ? void 0 : publicKey.length) !== 32) {
    throw new Error("Expected a valid publicKey, 32-bytes");
  } else if ((secretKey == null ? void 0 : secretKey.length) !== 64) {
    throw new Error("Expected a valid secretKey, 64-bytes");
  }
  return sr25519Sign$1(publicKey, secretKey, u8aToU8a(message));
}
function sr25519Verify(message, signature, publicKey) {
  const publicKeyU8a = u8aToU8a(publicKey);
  const signatureU8a = u8aToU8a(signature);
  if (publicKeyU8a.length !== 32) {
    throw new Error(`Invalid publicKey, received ${publicKeyU8a.length} bytes, expected 32`);
  } else if (signatureU8a.length !== 64) {
    throw new Error(`Invalid signature, received ${signatureU8a.length} bytes, expected 64`);
  }
  return sr25519Verify$1(signatureU8a, u8aToU8a(message), publicKeyU8a);
}
const EMPTY_U8A$2 = new Uint8Array();
function sr25519VrfSign(message, { secretKey }, context = EMPTY_U8A$2, extra = EMPTY_U8A$2) {
  if ((secretKey == null ? void 0 : secretKey.length) !== 64) {
    throw new Error("Invalid secretKey, expected 64-bytes");
  }
  return vrfSign(secretKey, u8aToU8a(context), u8aToU8a(message), u8aToU8a(extra));
}
const EMPTY_U8A$1 = new Uint8Array();
function sr25519VrfVerify(message, signOutput, publicKey, context = EMPTY_U8A$1, extra = EMPTY_U8A$1) {
  const publicKeyU8a = u8aToU8a(publicKey);
  const proofU8a = u8aToU8a(signOutput);
  if (publicKeyU8a.length !== 32) {
    throw new Error("Invalid publicKey, expected 32-bytes");
  } else if (proofU8a.length !== 96) {
    throw new Error("Invalid vrfSign output, expected 96 bytes");
  }
  return vrfVerify(publicKeyU8a, u8aToU8a(context), u8aToU8a(message), u8aToU8a(extra), proofU8a);
}
function encodeAddress(key, ss58Format = defaults$4.prefix) {
  const u8a = decodeAddress(key);
  if (ss58Format < 0 || ss58Format > 16383 || [46, 47].includes(ss58Format)) {
    throw new Error("Out of range ss58Format specified");
  } else if (!defaults$4.allowedDecodedLengths.includes(u8a.length)) {
    throw new Error(`Expected a valid key to convert, with length ${defaults$4.allowedDecodedLengths.join(", ")}`);
  }
  const input = u8aConcat(ss58Format < 64 ? [ss58Format] : [
    (ss58Format & 252) >> 2 | 64,
    ss58Format >> 8 | (ss58Format & 3) << 6
  ], u8a);
  return base58Encode(u8aConcat(input, sshash(input).subarray(0, [32, 33].includes(u8a.length) ? 2 : 1)));
}
const [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];
const _0n = /* @__PURE__ */ BigInt(0);
const _1n = /* @__PURE__ */ BigInt(1);
const _2n = /* @__PURE__ */ BigInt(2);
const _7n$1 = /* @__PURE__ */ BigInt(7);
const _256n$1 = /* @__PURE__ */ BigInt(256);
const _0x71n = /* @__PURE__ */ BigInt(113);
for (let round2 = 0, R = _1n, x = 1, y = 0; round2 < 24; round2++) {
  [x, y] = [y, (2 * x + 3 * y) % 5];
  SHA3_PI.push(2 * (5 * y + x));
  SHA3_ROTL.push((round2 + 1) * (round2 + 2) / 2 % 64);
  let t = _0n;
  for (let j = 0; j < 7; j++) {
    R = (R << _1n ^ (R >> _7n$1) * _0x71n) % _256n$1;
    if (R & _2n)
      t ^= _1n << (_1n << /* @__PURE__ */ BigInt(j)) - _1n;
  }
  _SHA3_IOTA.push(t);
}
const [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);
const rotlH = (h, l2, s) => s > 32 ? rotlBH(h, l2, s) : rotlSH(h, l2, s);
const rotlL = (h, l2, s) => s > 32 ? rotlBL(h, l2, s) : rotlSL(h, l2, s);
function keccakP(s, rounds = 24) {
  const B = new Uint32Array(5 * 2);
  for (let round2 = 24 - rounds; round2 < 24; round2++) {
    for (let x = 0; x < 10; x++)
      B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
    for (let x = 0; x < 10; x += 2) {
      const idx1 = (x + 8) % 10;
      const idx0 = (x + 2) % 10;
      const B0 = B[idx0];
      const B1 = B[idx0 + 1];
      const Th = rotlH(B0, B1, 1) ^ B[idx1];
      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
      for (let y = 0; y < 50; y += 10) {
        s[x + y] ^= Th;
        s[x + y + 1] ^= Tl;
      }
    }
    let curH = s[2];
    let curL = s[3];
    for (let t = 0; t < 24; t++) {
      const shift = SHA3_ROTL[t];
      const Th = rotlH(curH, curL, shift);
      const Tl = rotlL(curH, curL, shift);
      const PI = SHA3_PI[t];
      curH = s[PI];
      curL = s[PI + 1];
      s[PI] = Th;
      s[PI + 1] = Tl;
    }
    for (let y = 0; y < 50; y += 10) {
      for (let x = 0; x < 10; x++)
        B[x] = s[y + x];
      for (let x = 0; x < 10; x++)
        s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
    }
    s[0] ^= SHA3_IOTA_H[round2];
    s[1] ^= SHA3_IOTA_L[round2];
  }
  B.fill(0);
}
class Keccak extends Hash {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
    super();
    this.blockLen = blockLen;
    this.suffix = suffix;
    this.outputLen = outputLen;
    this.enableXOF = enableXOF;
    this.rounds = rounds;
    this.pos = 0;
    this.posOut = 0;
    this.finished = false;
    this.destroyed = false;
    number(outputLen);
    if (0 >= this.blockLen || this.blockLen >= 200)
      throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200);
    this.state32 = u322(this.state);
  }
  keccak() {
    keccakP(this.state32, this.rounds);
    this.posOut = 0;
    this.pos = 0;
  }
  update(data) {
    exists(this);
    const { blockLen, state } = this;
    data = toBytes(data);
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take2 = Math.min(blockLen - this.pos, len - pos);
      for (let i = 0; i < take2; i++)
        state[this.pos++] ^= data[pos++];
      if (this.pos === blockLen)
        this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = true;
    const { state, suffix, pos, blockLen } = this;
    state[pos] ^= suffix;
    if ((suffix & 128) !== 0 && pos === blockLen - 1)
      this.keccak();
    state[blockLen - 1] ^= 128;
    this.keccak();
  }
  writeInto(out) {
    exists(this, false);
    bytes(out);
    this.finish();
    const bufferOut = this.state;
    const { blockLen } = this;
    for (let pos = 0, len = out.length; pos < len; ) {
      if (this.posOut >= blockLen)
        this.keccak();
      const take2 = Math.min(blockLen - this.posOut, len - pos);
      out.set(bufferOut.subarray(this.posOut, this.posOut + take2), pos);
      this.posOut += take2;
      pos += take2;
    }
    return out;
  }
  xofInto(out) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(out);
  }
  xof(bytes2) {
    number(bytes2);
    return this.xofInto(new Uint8Array(bytes2));
  }
  digestInto(out) {
    output(out, this);
    if (this.finished)
      throw new Error("digest() was already called");
    this.writeInto(out);
    this.destroy();
    return out;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true;
    this.state.fill(0);
  }
  _cloneInto(to) {
    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
    to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
    to.state32.set(this.state32);
    to.pos = this.pos;
    to.posOut = this.posOut;
    to.finished = this.finished;
    to.rounds = rounds;
    to.suffix = suffix;
    to.outputLen = outputLen;
    to.enableXOF = enableXOF;
    to.destroyed = this.destroyed;
    return to;
  }
}
const gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));
/* @__PURE__ */ gen(6, 144, 224 / 8);
/* @__PURE__ */ gen(6, 136, 256 / 8);
/* @__PURE__ */ gen(6, 104, 384 / 8);
/* @__PURE__ */ gen(6, 72, 512 / 8);
/* @__PURE__ */ gen(1, 144, 224 / 8);
const keccak_256 = /* @__PURE__ */ gen(1, 136, 256 / 8);
/* @__PURE__ */ gen(1, 104, 384 / 8);
const keccak_512 = /* @__PURE__ */ gen(1, 72, 512 / 8);
const genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
/* @__PURE__ */ genShake(31, 168, 128 / 8);
/* @__PURE__ */ genShake(31, 136, 256 / 8);
const keccakAsU8a = /* @__PURE__ */ createDualHasher({ 256: keccak256, 512: keccak512 }, { 256: keccak_256, 512: keccak_512 });
function hasher(hashType, data, onlyJs) {
  return hashType === "keccak" ? keccakAsU8a(data, void 0, onlyJs) : blake2AsU8a(data, void 0, void 0, onlyJs);
}
const config = {
  chars: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
  coder: base64,
  type: "base64",
  withPadding: true
};
const base64Validate = /* @__PURE__ */ createValidate(config);
const base64Decode = /* @__PURE__ */ createDecode(config, base64Validate);
const base64Encode = /* @__PURE__ */ createEncode(config);
function secp256k1Compress(publicKey, onlyJs) {
  if (![33, 65].includes(publicKey.length)) {
    throw new Error(`Invalid publicKey provided, received ${publicKey.length} bytes input`);
  }
  if (publicKey.length === 33) {
    return publicKey;
  }
  return !hasBigInt || !onlyJs && isReady() ? secp256k1Compress$1(publicKey) : secp256k1.ProjectivePoint.fromHex(publicKey).toRawBytes(true);
}
function secp256k1Expand(publicKey, onlyJs) {
  if (![33, 65].includes(publicKey.length)) {
    throw new Error(`Invalid publicKey provided, received ${publicKey.length} bytes input`);
  }
  if (publicKey.length === 65) {
    return publicKey.subarray(1);
  }
  if (!hasBigInt || !onlyJs && isReady()) {
    return secp256k1Expand$1(publicKey).subarray(1);
  }
  const { px, py } = secp256k1.ProjectivePoint.fromHex(publicKey);
  return u8aConcat(bnToU8a(px, BN_BE_256_OPTS), bnToU8a(py, BN_BE_256_OPTS));
}
function secp256k1Recover(msgHash, signature, recovery, hashType = "blake2", onlyJs) {
  const sig2 = u8aToU8a(signature).subarray(0, 64);
  const msg = u8aToU8a(msgHash);
  const publicKey = !hasBigInt || !onlyJs && isReady() ? secp256k1Recover$1(msg, sig2, recovery) : secp256k1.Signature.fromCompact(sig2).addRecoveryBit(recovery).recoverPublicKey(msg).toRawBytes();
  if (!publicKey) {
    throw new Error("Unable to recover publicKey from signature");
  }
  return hashType === "keccak" ? secp256k1Expand(publicKey, onlyJs) : secp256k1Compress(publicKey, onlyJs);
}
function secp256k1Sign(message, { secretKey }, hashType = "blake2", onlyJs) {
  if ((secretKey == null ? void 0 : secretKey.length) !== 32) {
    throw new Error("Expected valid secp256k1 secretKey, 32-bytes");
  }
  const data = hasher(hashType, message, onlyJs);
  if (!hasBigInt || !onlyJs && isReady()) {
    return secp256k1Sign$1(data, secretKey);
  }
  const signature = secp256k1.sign(data, secretKey, { lowS: true });
  return u8aConcat(bnToU8a(signature.r, BN_BE_256_OPTS), bnToU8a(signature.s, BN_BE_256_OPTS), new Uint8Array([signature.recovery || 0]));
}
const N = "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141".replace(/ /g, "");
const N_BI = BigInt$1(`0x${N}`);
const N_BN = new BN(N, "hex");
function addBi(seckey, tweak) {
  let res = u8aToBigInt(tweak, BN_BE_OPTS);
  if (res >= N_BI) {
    throw new Error("Tweak parameter is out of range");
  }
  res += u8aToBigInt(seckey, BN_BE_OPTS);
  if (res >= N_BI) {
    res -= N_BI;
  }
  if (res === _0n$7) {
    throw new Error("Invalid resulting private key");
  }
  return nToU8a(res, BN_BE_256_OPTS);
}
function addBn(seckey, tweak) {
  const res = new BN(tweak);
  if (res.cmp(N_BN) >= 0) {
    throw new Error("Tweak parameter is out of range");
  }
  res.iadd(new BN(seckey));
  if (res.cmp(N_BN) >= 0) {
    res.isub(N_BN);
  }
  if (res.isZero()) {
    throw new Error("Invalid resulting private key");
  }
  return bnToU8a(res, BN_BE_256_OPTS);
}
function secp256k1PrivateKeyTweakAdd(seckey, tweak, onlyBn) {
  if (!isU8a(seckey) || seckey.length !== 32) {
    throw new Error("Expected seckey to be an Uint8Array with length 32");
  } else if (!isU8a(tweak) || tweak.length !== 32) {
    throw new Error("Expected tweak to be an Uint8Array with length 32");
  }
  return !hasBigInt || onlyBn ? addBn(seckey, tweak) : addBi(seckey, tweak);
}
function secp256k1Verify(msgHash, signature, address, hashType = "blake2", onlyJs) {
  const sig2 = u8aToU8a(signature);
  if (sig2.length !== 65) {
    throw new Error(`Expected signature with 65 bytes, ${sig2.length} found instead`);
  }
  const publicKey = secp256k1Recover(hasher(hashType, msgHash), sig2, sig2[64], hashType, onlyJs);
  const signerAddr = hasher(hashType, publicKey, onlyJs);
  const inputAddr = u8aToU8a(address);
  return u8aEq(publicKey, inputAddr) || (hashType === "keccak" ? u8aEq(signerAddr.slice(-20), inputAddr.slice(-20)) : u8aEq(signerAddr, inputAddr));
}
function getH160(u8a) {
  if ([33, 65].includes(u8a.length)) {
    u8a = keccakAsU8a(secp256k1Expand(u8a));
  }
  return u8a.slice(-20);
}
function ethereumEncode(addressOrPublic) {
  if (!addressOrPublic) {
    return "0x";
  }
  const u8aAddress = u8aToU8a(addressOrPublic);
  if (![20, 32, 33, 65].includes(u8aAddress.length)) {
    throw new Error(`Invalid address or publicKey provided, received ${u8aAddress.length} bytes input`);
  }
  const address = u8aToHex(getH160(u8aAddress), -1, false);
  const hash2 = u8aToHex(keccakAsU8a(address), -1, false);
  let result = "";
  for (let i = 0; i < 40; i++) {
    result = `${result}${parseInt(hash2[i], 16) > 7 ? address[i].toUpperCase() : address[i]}`;
  }
  return `0x${result}`;
}
function isInvalidChar(char2, byte) {
  return char2 !== (byte > 7 ? char2.toUpperCase() : char2.toLowerCase());
}
function isEthereumChecksum(_address) {
  const address = _address.replace("0x", "");
  const hash2 = u8aToHex(keccakAsU8a(address.toLowerCase()), -1, false);
  for (let i = 0; i < 40; i++) {
    if (isInvalidChar(address[i], parseInt(hash2[i], 16))) {
      return false;
    }
  }
  return true;
}
function isEthereumAddress(address) {
  if (!address || address.length !== 42 || !isHex(address)) {
    return false;
  } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
    return true;
  }
  return isEthereumChecksum(address);
}
const JS_HASH = {
  256: sha256,
  512: sha512
};
const WA_MHAC = {
  256: hmacSha256,
  512: hmacSha512
};
function hmacShaAsU8a(key, data, bitLength = 256, onlyJs) {
  const u8aKey = u8aToU8a(key);
  return !hasBigInt || !onlyJs && isReady() ? WA_MHAC[bitLength](u8aKey, data) : hmac(JS_HASH[bitLength], u8aKey, data);
}
const HARDENED = 2147483648;
function hdValidatePath(path2) {
  if (!path2.startsWith("m/")) {
    return false;
  }
  const parts = path2.split("/").slice(1);
  for (const p of parts) {
    const n = /^\d+'?$/.test(p) ? parseInt(p.replace(/'$/, ""), 10) : Number.NaN;
    if (isNaN(n) || n >= HARDENED || n < 0) {
      return false;
    }
  }
  return true;
}
const MASTER_SECRET = stringToU8a("Bitcoin seed");
function createCoded(secretKey, chainCode) {
  return {
    chainCode,
    publicKey: secp256k1PairFromSeed(secretKey).publicKey,
    secretKey
  };
}
function deriveChild(hd, index) {
  const indexBuffer = bnToU8a(index, BN_BE_32_OPTS);
  const data = index >= HARDENED ? u8aConcat(new Uint8Array(1), hd.secretKey, indexBuffer) : u8aConcat(hd.publicKey, indexBuffer);
  try {
    const I = hmacShaAsU8a(hd.chainCode, data, 512);
    return createCoded(secp256k1PrivateKeyTweakAdd(hd.secretKey, I.slice(0, 32)), I.slice(32));
  } catch {
    return deriveChild(hd, index + 1);
  }
}
function hdEthereum(seed, path2 = "") {
  const I = hmacShaAsU8a(MASTER_SECRET, seed, 512);
  let hd = createCoded(I.slice(0, 32), I.slice(32));
  if (!path2 || path2 === "m" || path2 === "M" || path2 === "m'" || path2 === "M'") {
    return hd;
  }
  if (!hdValidatePath(path2)) {
    throw new Error("Invalid derivation path");
  }
  const parts = path2.split("/").slice(1);
  for (const p of parts) {
    hd = deriveChild(hd, parseInt(p, 10) + (p.length > 1 && p.endsWith("'") ? HARDENED : 0));
  }
  return hd;
}
function pbkdf2Init(hash$12, _password, _salt, _opts) {
  hash(hash$12);
  const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);
  const { c, dkLen, asyncTick } = opts;
  number(c);
  number(dkLen);
  number(asyncTick);
  if (c < 1)
    throw new Error("PBKDF2: iterations (c) should be >= 1");
  const password = toBytes(_password);
  const salt = toBytes(_salt);
  const DK = new Uint8Array(dkLen);
  const PRF = hmac.create(hash$12, password);
  const PRFSalt = PRF._cloneInto().update(salt);
  return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
}
function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
  PRF.destroy();
  PRFSalt.destroy();
  if (prfW)
    prfW.destroy();
  u.fill(0);
  return DK;
}
function pbkdf2(hash2, password, salt, opts) {
  const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash2, password, salt, opts);
  let prfW;
  const arr2 = new Uint8Array(4);
  const view = createView(arr2);
  const u = new Uint8Array(PRF.outputLen);
  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
    const Ti = DK.subarray(pos, pos + PRF.outputLen);
    view.setInt32(0, ti, false);
    (prfW = PRFSalt._cloneInto(prfW)).update(arr2).digestInto(u);
    Ti.set(u.subarray(0, Ti.length));
    for (let ui = 1; ui < c; ui++) {
      PRF._cloneInto(prfW).update(u).digestInto(u);
      for (let i = 0; i < Ti.length; i++)
        Ti[i] ^= u[i];
    }
  }
  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
}
function pbkdf2Encode(passphrase, salt = randomAsU8a(), rounds = 2048, onlyJs) {
  const u8aPass = u8aToU8a(passphrase);
  const u8aSalt = u8aToU8a(salt);
  return {
    password: !hasBigInt || !onlyJs && isReady() ? pbkdf2$1(u8aPass, u8aSalt, rounds) : pbkdf2(sha512, u8aPass, u8aSalt, { c: rounds, dkLen: 64 }),
    rounds,
    salt
  };
}
const shaAsU8a = /* @__PURE__ */ createDualHasher({ 256: sha256$1, 512: sha512$1 }, { 256: sha256, 512: sha512 });
const sha256AsU8a = /* @__PURE__ */ createBitHasher(256, shaAsU8a);
const DEFAULT_WORDLIST = "abandon|ability|able|about|above|absent|absorb|abstract|absurd|abuse|access|accident|account|accuse|achieve|acid|acoustic|acquire|across|act|action|actor|actress|actual|adapt|add|addict|address|adjust|admit|adult|advance|advice|aerobic|affair|afford|afraid|again|age|agent|agree|ahead|aim|air|airport|aisle|alarm|album|alcohol|alert|alien|all|alley|allow|almost|alone|alpha|already|also|alter|always|amateur|amazing|among|amount|amused|analyst|anchor|ancient|anger|angle|angry|animal|ankle|announce|annual|another|answer|antenna|antique|anxiety|any|apart|apology|appear|apple|approve|april|arch|arctic|area|arena|argue|arm|armed|armor|army|around|arrange|arrest|arrive|arrow|art|artefact|artist|artwork|ask|aspect|assault|asset|assist|assume|asthma|athlete|atom|attack|attend|attitude|attract|auction|audit|august|aunt|author|auto|autumn|average|avocado|avoid|awake|aware|away|awesome|awful|awkward|axis|baby|bachelor|bacon|badge|bag|balance|balcony|ball|bamboo|banana|banner|bar|barely|bargain|barrel|base|basic|basket|battle|beach|bean|beauty|because|become|beef|before|begin|behave|behind|believe|below|belt|bench|benefit|best|betray|better|between|beyond|bicycle|bid|bike|bind|biology|bird|birth|bitter|black|blade|blame|blanket|blast|bleak|bless|blind|blood|blossom|blouse|blue|blur|blush|board|boat|body|boil|bomb|bone|bonus|book|boost|border|boring|borrow|boss|bottom|bounce|box|boy|bracket|brain|brand|brass|brave|bread|breeze|brick|bridge|brief|bright|bring|brisk|broccoli|broken|bronze|broom|brother|brown|brush|bubble|buddy|budget|buffalo|build|bulb|bulk|bullet|bundle|bunker|burden|burger|burst|bus|business|busy|butter|buyer|buzz|cabbage|cabin|cable|cactus|cage|cake|call|calm|camera|camp|can|canal|cancel|candy|cannon|canoe|canvas|canyon|capable|capital|captain|car|carbon|card|cargo|carpet|carry|cart|case|cash|casino|castle|casual|cat|catalog|catch|category|cattle|caught|cause|caution|cave|ceiling|celery|cement|census|century|cereal|certain|chair|chalk|champion|change|chaos|chapter|charge|chase|chat|cheap|check|cheese|chef|cherry|chest|chicken|chief|child|chimney|choice|choose|chronic|chuckle|chunk|churn|cigar|cinnamon|circle|citizen|city|civil|claim|clap|clarify|claw|clay|clean|clerk|clever|click|client|cliff|climb|clinic|clip|clock|clog|close|cloth|cloud|clown|club|clump|cluster|clutch|coach|coast|coconut|code|coffee|coil|coin|collect|color|column|combine|come|comfort|comic|common|company|concert|conduct|confirm|congress|connect|consider|control|convince|cook|cool|copper|copy|coral|core|corn|correct|cost|cotton|couch|country|couple|course|cousin|cover|coyote|crack|cradle|craft|cram|crane|crash|crater|crawl|crazy|cream|credit|creek|crew|cricket|crime|crisp|critic|crop|cross|crouch|crowd|crucial|cruel|cruise|crumble|crunch|crush|cry|crystal|cube|culture|cup|cupboard|curious|current|curtain|curve|cushion|custom|cute|cycle|dad|damage|damp|dance|danger|daring|dash|daughter|dawn|day|deal|debate|debris|decade|december|decide|decline|decorate|decrease|deer|defense|define|defy|degree|delay|deliver|demand|demise|denial|dentist|deny|depart|depend|deposit|depth|deputy|derive|describe|desert|design|desk|despair|destroy|detail|detect|develop|device|devote|diagram|dial|diamond|diary|dice|diesel|diet|differ|digital|dignity|dilemma|dinner|dinosaur|direct|dirt|disagree|discover|disease|dish|dismiss|disorder|display|distance|divert|divide|divorce|dizzy|doctor|document|dog|doll|dolphin|domain|donate|donkey|donor|door|dose|double|dove|draft|dragon|drama|drastic|draw|dream|dress|drift|drill|drink|drip|drive|drop|drum|dry|duck|dumb|dune|during|dust|dutch|duty|dwarf|dynamic|eager|eagle|early|earn|earth|easily|east|easy|echo|ecology|economy|edge|edit|educate|effort|egg|eight|either|elbow|elder|electric|elegant|element|elephant|elevator|elite|else|embark|embody|embrace|emerge|emotion|employ|empower|empty|enable|enact|end|endless|endorse|enemy|energy|enforce|engage|engine|enhance|enjoy|enlist|enough|enrich|enroll|ensure|enter|entire|entry|envelope|episode|equal|equip|era|erase|erode|erosion|error|erupt|escape|essay|essence|estate|eternal|ethics|evidence|evil|evoke|evolve|exact|example|excess|exchange|excite|exclude|excuse|execute|exercise|exhaust|exhibit|exile|exist|exit|exotic|expand|expect|expire|explain|expose|express|extend|extra|eye|eyebrow|fabric|face|faculty|fade|faint|faith|fall|false|fame|family|famous|fan|fancy|fantasy|farm|fashion|fat|fatal|father|fatigue|fault|favorite|feature|february|federal|fee|feed|feel|female|fence|festival|fetch|fever|few|fiber|fiction|field|figure|file|film|filter|final|find|fine|finger|finish|fire|firm|first|fiscal|fish|fit|fitness|fix|flag|flame|flash|flat|flavor|flee|flight|flip|float|flock|floor|flower|fluid|flush|fly|foam|focus|fog|foil|fold|follow|food|foot|force|forest|forget|fork|fortune|forum|forward|fossil|foster|found|fox|fragile|frame|frequent|fresh|friend|fringe|frog|front|frost|frown|frozen|fruit|fuel|fun|funny|furnace|fury|future|gadget|gain|galaxy|gallery|game|gap|garage|garbage|garden|garlic|garment|gas|gasp|gate|gather|gauge|gaze|general|genius|genre|gentle|genuine|gesture|ghost|giant|gift|giggle|ginger|giraffe|girl|give|glad|glance|glare|glass|glide|glimpse|globe|gloom|glory|glove|glow|glue|goat|goddess|gold|good|goose|gorilla|gospel|gossip|govern|gown|grab|grace|grain|grant|grape|grass|gravity|great|green|grid|grief|grit|grocery|group|grow|grunt|guard|guess|guide|guilt|guitar|gun|gym|habit|hair|half|hammer|hamster|hand|happy|harbor|hard|harsh|harvest|hat|have|hawk|hazard|head|health|heart|heavy|hedgehog|height|hello|helmet|help|hen|hero|hidden|high|hill|hint|hip|hire|history|hobby|hockey|hold|hole|holiday|hollow|home|honey|hood|hope|horn|horror|horse|hospital|host|hotel|hour|hover|hub|huge|human|humble|humor|hundred|hungry|hunt|hurdle|hurry|hurt|husband|hybrid|ice|icon|idea|identify|idle|ignore|ill|illegal|illness|image|imitate|immense|immune|impact|impose|improve|impulse|inch|include|income|increase|index|indicate|indoor|industry|infant|inflict|inform|inhale|inherit|initial|inject|injury|inmate|inner|innocent|input|inquiry|insane|insect|inside|inspire|install|intact|interest|into|invest|invite|involve|iron|island|isolate|issue|item|ivory|jacket|jaguar|jar|jazz|jealous|jeans|jelly|jewel|job|join|joke|journey|joy|judge|juice|jump|jungle|junior|junk|just|kangaroo|keen|keep|ketchup|key|kick|kid|kidney|kind|kingdom|kiss|kit|kitchen|kite|kitten|kiwi|knee|knife|knock|know|lab|label|labor|ladder|lady|lake|lamp|language|laptop|large|later|latin|laugh|laundry|lava|law|lawn|lawsuit|layer|lazy|leader|leaf|learn|leave|lecture|left|leg|legal|legend|leisure|lemon|lend|length|lens|leopard|lesson|letter|level|liar|liberty|library|license|life|lift|light|like|limb|limit|link|lion|liquid|list|little|live|lizard|load|loan|lobster|local|lock|logic|lonely|long|loop|lottery|loud|lounge|love|loyal|lucky|luggage|lumber|lunar|lunch|luxury|lyrics|machine|mad|magic|magnet|maid|mail|main|major|make|mammal|man|manage|mandate|mango|mansion|manual|maple|marble|march|margin|marine|market|marriage|mask|mass|master|match|material|math|matrix|matter|maximum|maze|meadow|mean|measure|meat|mechanic|medal|media|melody|melt|member|memory|mention|menu|mercy|merge|merit|merry|mesh|message|metal|method|middle|midnight|milk|million|mimic|mind|minimum|minor|minute|miracle|mirror|misery|miss|mistake|mix|mixed|mixture|mobile|model|modify|mom|moment|monitor|monkey|monster|month|moon|moral|more|morning|mosquito|mother|motion|motor|mountain|mouse|move|movie|much|muffin|mule|multiply|muscle|museum|mushroom|music|must|mutual|myself|mystery|myth|naive|name|napkin|narrow|nasty|nation|nature|near|neck|need|negative|neglect|neither|nephew|nerve|nest|net|network|neutral|never|news|next|nice|night|noble|noise|nominee|noodle|normal|north|nose|notable|note|nothing|notice|novel|now|nuclear|number|nurse|nut|oak|obey|object|oblige|obscure|observe|obtain|obvious|occur|ocean|october|odor|off|offer|office|often|oil|okay|old|olive|olympic|omit|once|one|onion|online|only|open|opera|opinion|oppose|option|orange|orbit|orchard|order|ordinary|organ|orient|original|orphan|ostrich|other|outdoor|outer|output|outside|oval|oven|over|own|owner|oxygen|oyster|ozone|pact|paddle|page|pair|palace|palm|panda|panel|panic|panther|paper|parade|parent|park|parrot|party|pass|patch|path|patient|patrol|pattern|pause|pave|payment|peace|peanut|pear|peasant|pelican|pen|penalty|pencil|people|pepper|perfect|permit|person|pet|phone|photo|phrase|physical|piano|picnic|picture|piece|pig|pigeon|pill|pilot|pink|pioneer|pipe|pistol|pitch|pizza|place|planet|plastic|plate|play|please|pledge|pluck|plug|plunge|poem|poet|point|polar|pole|police|pond|pony|pool|popular|portion|position|possible|post|potato|pottery|poverty|powder|power|practice|praise|predict|prefer|prepare|present|pretty|prevent|price|pride|primary|print|priority|prison|private|prize|problem|process|produce|profit|program|project|promote|proof|property|prosper|protect|proud|provide|public|pudding|pull|pulp|pulse|pumpkin|punch|pupil|puppy|purchase|purity|purpose|purse|push|put|puzzle|pyramid|quality|quantum|quarter|question|quick|quit|quiz|quote|rabbit|raccoon|race|rack|radar|radio|rail|rain|raise|rally|ramp|ranch|random|range|rapid|rare|rate|rather|raven|raw|razor|ready|real|reason|rebel|rebuild|recall|receive|recipe|record|recycle|reduce|reflect|reform|refuse|region|regret|regular|reject|relax|release|relief|rely|remain|remember|remind|remove|render|renew|rent|reopen|repair|repeat|replace|report|require|rescue|resemble|resist|resource|response|result|retire|retreat|return|reunion|reveal|review|reward|rhythm|rib|ribbon|rice|rich|ride|ridge|rifle|right|rigid|ring|riot|ripple|risk|ritual|rival|river|road|roast|robot|robust|rocket|romance|roof|rookie|room|rose|rotate|rough|round|route|royal|rubber|rude|rug|rule|run|runway|rural|sad|saddle|sadness|safe|sail|salad|salmon|salon|salt|salute|same|sample|sand|satisfy|satoshi|sauce|sausage|save|say|scale|scan|scare|scatter|scene|scheme|school|science|scissors|scorpion|scout|scrap|screen|script|scrub|sea|search|season|seat|second|secret|section|security|seed|seek|segment|select|sell|seminar|senior|sense|sentence|series|service|session|settle|setup|seven|shadow|shaft|shallow|share|shed|shell|sheriff|shield|shift|shine|ship|shiver|shock|shoe|shoot|shop|short|shoulder|shove|shrimp|shrug|shuffle|shy|sibling|sick|side|siege|sight|sign|silent|silk|silly|silver|similar|simple|since|sing|siren|sister|situate|six|size|skate|sketch|ski|skill|skin|skirt|skull|slab|slam|sleep|slender|slice|slide|slight|slim|slogan|slot|slow|slush|small|smart|smile|smoke|smooth|snack|snake|snap|sniff|snow|soap|soccer|social|sock|soda|soft|solar|soldier|solid|solution|solve|someone|song|soon|sorry|sort|soul|sound|soup|source|south|space|spare|spatial|spawn|speak|special|speed|spell|spend|sphere|spice|spider|spike|spin|spirit|split|spoil|sponsor|spoon|sport|spot|spray|spread|spring|spy|square|squeeze|squirrel|stable|stadium|staff|stage|stairs|stamp|stand|start|state|stay|steak|steel|stem|step|stereo|stick|still|sting|stock|stomach|stone|stool|story|stove|strategy|street|strike|strong|struggle|student|stuff|stumble|style|subject|submit|subway|success|such|sudden|suffer|sugar|suggest|suit|summer|sun|sunny|sunset|super|supply|supreme|sure|surface|surge|surprise|surround|survey|suspect|sustain|swallow|swamp|swap|swarm|swear|sweet|swift|swim|swing|switch|sword|symbol|symptom|syrup|system|table|tackle|tag|tail|talent|talk|tank|tape|target|task|taste|tattoo|taxi|teach|team|tell|ten|tenant|tennis|tent|term|test|text|thank|that|theme|then|theory|there|they|thing|this|thought|three|thrive|throw|thumb|thunder|ticket|tide|tiger|tilt|timber|time|tiny|tip|tired|tissue|title|toast|tobacco|today|toddler|toe|together|toilet|token|tomato|tomorrow|tone|tongue|tonight|tool|tooth|top|topic|topple|torch|tornado|tortoise|toss|total|tourist|toward|tower|town|toy|track|trade|traffic|tragic|train|transfer|trap|trash|travel|tray|treat|tree|trend|trial|tribe|trick|trigger|trim|trip|trophy|trouble|truck|true|truly|trumpet|trust|truth|try|tube|tuition|tumble|tuna|tunnel|turkey|turn|turtle|twelve|twenty|twice|twin|twist|two|type|typical|ugly|umbrella|unable|unaware|uncle|uncover|under|undo|unfair|unfold|unhappy|uniform|unique|unit|universe|unknown|unlock|until|unusual|unveil|update|upgrade|uphold|upon|upper|upset|urban|urge|usage|use|used|useful|useless|usual|utility|vacant|vacuum|vague|valid|valley|valve|van|vanish|vapor|various|vast|vault|vehicle|velvet|vendor|venture|venue|verb|verify|version|very|vessel|veteran|viable|vibrant|vicious|victory|video|view|village|vintage|violin|virtual|virus|visa|visit|visual|vital|vivid|vocal|voice|void|volcano|volume|vote|voyage|wage|wagon|wait|walk|wall|walnut|want|warfare|warm|warrior|wash|wasp|waste|water|wave|way|wealth|weapon|wear|weasel|weather|web|wedding|weekend|weird|welcome|west|wet|whale|what|wheat|wheel|when|where|whip|whisper|wide|width|wife|wild|will|win|window|wine|wing|wink|winner|winter|wire|wisdom|wise|wish|witness|wolf|woman|wonder|wood|wool|word|work|world|worry|worth|wrap|wreck|wrestle|wrist|write|wrong|yard|year|yellow|you|young|youth|zebra|zero|zone|zoo".split("|");
const INVALID_MNEMONIC = "Invalid mnemonic";
const INVALID_ENTROPY = "Invalid entropy";
const INVALID_CHECKSUM = "Invalid mnemonic checksum";
function normalize(str) {
  return (str || "").normalize("NFKD");
}
function binaryToByte(bin) {
  return parseInt(bin, 2);
}
function bytesToBinary(bytes2) {
  return bytes2.map((x) => x.toString(2).padStart(8, "0")).join("");
}
function deriveChecksumBits(entropyBuffer) {
  return bytesToBinary(Array.from(sha256AsU8a(entropyBuffer))).slice(0, entropyBuffer.length * 8 / 32);
}
function mnemonicToSeedSync(mnemonic, password) {
  return pbkdf2Encode(stringToU8a(normalize(mnemonic)), stringToU8a(`mnemonic${normalize(password)}`)).password;
}
function mnemonicToEntropy$1(mnemonic, wordlist = DEFAULT_WORDLIST) {
  const words = normalize(mnemonic).split(" ");
  if (words.length % 3 !== 0) {
    throw new Error(INVALID_MNEMONIC);
  }
  const bits2 = words.map((word) => {
    const index = wordlist.indexOf(word);
    if (index === -1) {
      throw new Error(INVALID_MNEMONIC);
    }
    return index.toString(2).padStart(11, "0");
  }).join("");
  const dividerIndex = Math.floor(bits2.length / 33) * 32;
  const entropyBits = bits2.slice(0, dividerIndex);
  const checksumBits = bits2.slice(dividerIndex);
  const matched = entropyBits.match(/(.{1,8})/g);
  const entropyBytes = matched == null ? void 0 : matched.map(binaryToByte);
  if (!entropyBytes || entropyBytes.length % 4 !== 0 || entropyBytes.length < 16 || entropyBytes.length > 32) {
    throw new Error(INVALID_ENTROPY);
  }
  const entropy = u8aToU8a(entropyBytes);
  if (deriveChecksumBits(entropy) !== checksumBits) {
    throw new Error(INVALID_CHECKSUM);
  }
  return entropy;
}
function entropyToMnemonic(entropy, wordlist = DEFAULT_WORDLIST) {
  if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {
    throw new Error(INVALID_ENTROPY);
  }
  const matched = `${bytesToBinary(Array.from(entropy))}${deriveChecksumBits(entropy)}`.match(/(.{1,11})/g);
  const mapped = matched == null ? void 0 : matched.map((b) => wordlist[binaryToByte(b)]);
  if (!mapped || mapped.length < 12) {
    throw new Error("Unable to map entropy to mnemonic");
  }
  return mapped.join(" ");
}
function validateMnemonic(mnemonic, wordlist) {
  try {
    mnemonicToEntropy$1(mnemonic, wordlist);
  } catch {
    return false;
  }
  return true;
}
function mnemonicToEntropy(mnemonic, wordlist, onlyJs) {
  return !hasBigInt || !wordlist && !onlyJs && isReady() ? bip39ToEntropy(mnemonic) : mnemonicToEntropy$1(mnemonic, wordlist);
}
function mnemonicValidate(mnemonic, wordlist, onlyJs) {
  return !hasBigInt || !wordlist && !onlyJs && isReady() ? bip39Validate(mnemonic) : validateMnemonic(mnemonic, wordlist);
}
function mnemonicToLegacySeed(mnemonic, password = "", onlyJs, byteLength = 32) {
  if (!mnemonicValidate(mnemonic)) {
    throw new Error("Invalid bip39 mnemonic specified");
  } else if (![32, 64].includes(byteLength)) {
    throw new Error(`Invalid seed length ${byteLength}, expected 32 or 64`);
  }
  return byteLength === 32 ? !hasBigInt || !onlyJs && isReady() ? bip39ToSeed(mnemonic, password) : mnemonicToSeedSync(mnemonic, password).subarray(0, 32) : mnemonicToSeedSync(mnemonic, password);
}
function mnemonicToMiniSecret(mnemonic, password = "", wordlist, onlyJs) {
  if (!mnemonicValidate(mnemonic, wordlist, onlyJs)) {
    throw new Error("Invalid bip39 mnemonic specified");
  } else if (!wordlist && !onlyJs && isReady()) {
    return bip39ToMiniSecret(mnemonic, password);
  }
  const entropy = mnemonicToEntropy(mnemonic, wordlist);
  const salt = stringToU8a(`mnemonic${password}`);
  return pbkdf2Encode(entropy, salt).password.slice(0, 32);
}
function L32(x, c) {
  return x << c | x >>> 32 - c;
}
function ld32(x, i) {
  let u = x[i + 3] & 255;
  u = u << 8 | x[i + 2] & 255;
  u = u << 8 | x[i + 1] & 255;
  return u << 8 | x[i + 0] & 255;
}
function st32(x, j, u) {
  for (let i = 0; i < 4; i++) {
    x[j + i] = u & 255;
    u >>>= 8;
  }
}
function vn(x, xi, y, yi, n) {
  let d = 0;
  for (let i = 0; i < n; i++)
    d |= x[xi + i] ^ y[yi + i];
  return (1 & d - 1 >>> 8) - 1;
}
function core(out, inp, k, c, h) {
  const w = new Uint32Array(16), x = new Uint32Array(16), y = new Uint32Array(16), t = new Uint32Array(4);
  let i, j, m2;
  for (i = 0; i < 4; i++) {
    x[5 * i] = ld32(c, 4 * i);
    x[1 + i] = ld32(k, 4 * i);
    x[6 + i] = ld32(inp, 4 * i);
    x[11 + i] = ld32(k, 16 + 4 * i);
  }
  for (i = 0; i < 16; i++)
    y[i] = x[i];
  for (i = 0; i < 20; i++) {
    for (j = 0; j < 4; j++) {
      for (m2 = 0; m2 < 4; m2++)
        t[m2] = x[(5 * j + 4 * m2) % 16];
      t[1] ^= L32(t[0] + t[3] | 0, 7);
      t[2] ^= L32(t[1] + t[0] | 0, 9);
      t[3] ^= L32(t[2] + t[1] | 0, 13);
      t[0] ^= L32(t[3] + t[2] | 0, 18);
      for (m2 = 0; m2 < 4; m2++)
        w[4 * j + (j + m2) % 4] = t[m2];
    }
    for (m2 = 0; m2 < 16; m2++)
      x[m2] = w[m2];
  }
  if (h) {
    for (i = 0; i < 16; i++)
      x[i] = x[i] + y[i] | 0;
    for (i = 0; i < 4; i++) {
      x[5 * i] = x[5 * i] - ld32(c, 4 * i) | 0;
      x[6 + i] = x[6 + i] - ld32(inp, 4 * i) | 0;
    }
    for (i = 0; i < 4; i++) {
      st32(out, 4 * i, x[5 * i]);
      st32(out, 16 + 4 * i, x[6 + i]);
    }
  } else {
    for (i = 0; i < 16; i++)
      st32(out, 4 * i, x[i] + y[i] | 0);
  }
}
const sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
function crypto_stream_salsa20_xor(c, cpos, m2, mpos, b, n, k) {
  const z2 = new Uint8Array(16), x = new Uint8Array(64);
  let u, i;
  if (!b)
    return 0;
  for (i = 0; i < 16; i++)
    z2[i] = 0;
  for (i = 0; i < 8; i++)
    z2[i] = n[i];
  while (b >= 64) {
    core(x, z2, k, sigma, false);
    for (i = 0; i < 64; i++)
      c[cpos + i] = (m2 ? m2[mpos + i] : 0) ^ x[i];
    u = 1;
    for (i = 8; i < 16; i++) {
      u = u + (z2[i] & 255) | 0;
      z2[i] = u & 255;
      u >>>= 8;
    }
    b -= 64;
    cpos += 64;
    if (m2)
      mpos += 64;
  }
  if (b > 0) {
    core(x, z2, k, sigma, false);
    for (i = 0; i < b; i++)
      c[cpos + i] = (m2 ? m2[mpos + i] : 0) ^ x[i];
  }
  return 0;
}
function crypto_stream_xor(c, cpos, m2, mpos, d, n, k) {
  const s = new Uint8Array(32);
  core(s, n, k, sigma, true);
  return crypto_stream_salsa20_xor(c, cpos, m2, mpos, d, n.subarray(16), s);
}
function add1305(h, c) {
  let u = 0;
  for (let j = 0; j < 17; j++) {
    u = u + (h[j] + c[j] | 0) | 0;
    h[j] = u & 255;
    u >>>= 8;
  }
}
const minusp = new Uint32Array([5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252]);
function crypto_onetimeauth(out, outpos, m2, mpos, n, k) {
  let i, j, u;
  const x = new Uint32Array(17), r = new Uint32Array(17), h = new Uint32Array(17), c = new Uint32Array(17), g = new Uint32Array(17);
  for (j = 0; j < 17; j++)
    r[j] = h[j] = 0;
  for (j = 0; j < 16; j++)
    r[j] = k[j];
  r[3] &= 15;
  r[4] &= 252;
  r[7] &= 15;
  r[8] &= 252;
  r[11] &= 15;
  r[12] &= 252;
  r[15] &= 15;
  while (n > 0) {
    for (j = 0; j < 17; j++)
      c[j] = 0;
    for (j = 0; j < 16 && j < n; ++j)
      c[j] = m2[mpos + j];
    c[j] = 1;
    mpos += j;
    n -= j;
    add1305(h, c);
    for (i = 0; i < 17; i++) {
      x[i] = 0;
      for (j = 0; j < 17; j++)
        x[i] = x[i] + h[j] * (j <= i ? r[i - j] : 320 * r[i + 17 - j] | 0) | 0 | 0;
    }
    for (i = 0; i < 17; i++)
      h[i] = x[i];
    u = 0;
    for (j = 0; j < 16; j++) {
      u = u + h[j] | 0;
      h[j] = u & 255;
      u >>>= 8;
    }
    u = u + h[16] | 0;
    h[16] = u & 3;
    u = 5 * (u >>> 2) | 0;
    for (j = 0; j < 16; j++) {
      u = u + h[j] | 0;
      h[j] = u & 255;
      u >>>= 8;
    }
    u = u + h[16] | 0;
    h[16] = u;
  }
  for (j = 0; j < 17; j++)
    g[j] = h[j];
  add1305(h, minusp);
  const s = -(h[16] >>> 7) | 0;
  for (j = 0; j < 17; j++)
    h[j] ^= s & (g[j] ^ h[j]);
  for (j = 0; j < 16; j++)
    c[j] = k[j + 16];
  c[16] = 0;
  add1305(h, c);
  for (j = 0; j < 16; j++)
    out[outpos + j] = h[j];
  return 0;
}
function crypto_onetimeauth_verify(h, hpos, m2, mpos, n, k) {
  const x = new Uint8Array(16);
  crypto_onetimeauth(x, 0, m2, mpos, n, k);
  return vn(h, hpos, x, 0, 16);
}
function crypto_secretbox(c, m2, d, n, k) {
  if (d < 32)
    return -1;
  crypto_stream_xor(c, 0, m2, 0, d, n, k);
  crypto_onetimeauth(c, 16, c, 32, d - 32, c);
  for (let i = 0; i < 16; i++)
    c[i] = 0;
  return 0;
}
function crypto_secretbox_open(m2, c, d, n, k) {
  const x = new Uint8Array(32);
  if (d < 32)
    return -1;
  crypto_stream_xor(x, 0, null, 0, 32, n, k);
  if (crypto_onetimeauth_verify(c, 16, c, 32, d - 32, x) !== 0)
    return -1;
  crypto_stream_xor(m2, 0, c, 0, d, n, k);
  for (let i = 0; i < 32; i++)
    m2[i] = 0;
  return 0;
}
const crypto_secretbox_KEYBYTES = 32;
const crypto_secretbox_NONCEBYTES = 24;
const crypto_secretbox_ZEROBYTES = 32;
const crypto_secretbox_BOXZEROBYTES = 16;
function checkLengths(k, n) {
  if (k.length !== crypto_secretbox_KEYBYTES)
    throw new Error("bad key size");
  if (n.length !== crypto_secretbox_NONCEBYTES)
    throw new Error("bad nonce size");
}
function checkArrayTypes(...args) {
  for (let i = 0, count = args.length; i < count; i++) {
    if (!(args[i] instanceof Uint8Array))
      throw new TypeError("unexpected type, use Uint8Array");
  }
}
function naclSecretbox(msg, nonce, key) {
  checkArrayTypes(msg, nonce, key);
  checkLengths(key, nonce);
  const m2 = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
  const c = new Uint8Array(m2.length);
  for (let i = 0; i < msg.length; i++)
    m2[i + crypto_secretbox_ZEROBYTES] = msg[i];
  crypto_secretbox(c, m2, m2.length, nonce, key);
  return c.subarray(crypto_secretbox_BOXZEROBYTES);
}
function naclSecretboxOpen(box, nonce, key) {
  checkArrayTypes(box, nonce, key);
  checkLengths(key, nonce);
  const c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
  const m2 = new Uint8Array(c.length);
  for (let i = 0; i < box.length; i++)
    c[i + crypto_secretbox_BOXZEROBYTES] = box[i];
  if (c.length < 32)
    return null;
  if (crypto_secretbox_open(m2, c, c.length, nonce, key) !== 0)
    return null;
  return m2.subarray(crypto_secretbox_ZEROBYTES);
}
function naclDecrypt(encrypted, nonce, secret) {
  return naclSecretboxOpen(encrypted, nonce, secret);
}
function naclEncrypt(message, secret, nonce = randomAsU8a(24)) {
  return {
    encrypted: naclSecretbox(message, nonce, secret),
    nonce
  };
}
const rotl$1 = (a, b) => a << b | a >>> 32 - b;
function XorAndSalsa(prev2, pi, input, ii, out, oi) {
  let y00 = prev2[pi++] ^ input[ii++], y01 = prev2[pi++] ^ input[ii++];
  let y02 = prev2[pi++] ^ input[ii++], y03 = prev2[pi++] ^ input[ii++];
  let y04 = prev2[pi++] ^ input[ii++], y05 = prev2[pi++] ^ input[ii++];
  let y06 = prev2[pi++] ^ input[ii++], y07 = prev2[pi++] ^ input[ii++];
  let y08 = prev2[pi++] ^ input[ii++], y09 = prev2[pi++] ^ input[ii++];
  let y10 = prev2[pi++] ^ input[ii++], y11 = prev2[pi++] ^ input[ii++];
  let y12 = prev2[pi++] ^ input[ii++], y13 = prev2[pi++] ^ input[ii++];
  let y14 = prev2[pi++] ^ input[ii++], y15 = prev2[pi++] ^ input[ii++];
  let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
  for (let i = 0; i < 8; i += 2) {
    x04 ^= rotl$1(x00 + x12 | 0, 7);
    x08 ^= rotl$1(x04 + x00 | 0, 9);
    x12 ^= rotl$1(x08 + x04 | 0, 13);
    x00 ^= rotl$1(x12 + x08 | 0, 18);
    x09 ^= rotl$1(x05 + x01 | 0, 7);
    x13 ^= rotl$1(x09 + x05 | 0, 9);
    x01 ^= rotl$1(x13 + x09 | 0, 13);
    x05 ^= rotl$1(x01 + x13 | 0, 18);
    x14 ^= rotl$1(x10 + x06 | 0, 7);
    x02 ^= rotl$1(x14 + x10 | 0, 9);
    x06 ^= rotl$1(x02 + x14 | 0, 13);
    x10 ^= rotl$1(x06 + x02 | 0, 18);
    x03 ^= rotl$1(x15 + x11 | 0, 7);
    x07 ^= rotl$1(x03 + x15 | 0, 9);
    x11 ^= rotl$1(x07 + x03 | 0, 13);
    x15 ^= rotl$1(x11 + x07 | 0, 18);
    x01 ^= rotl$1(x00 + x03 | 0, 7);
    x02 ^= rotl$1(x01 + x00 | 0, 9);
    x03 ^= rotl$1(x02 + x01 | 0, 13);
    x00 ^= rotl$1(x03 + x02 | 0, 18);
    x06 ^= rotl$1(x05 + x04 | 0, 7);
    x07 ^= rotl$1(x06 + x05 | 0, 9);
    x04 ^= rotl$1(x07 + x06 | 0, 13);
    x05 ^= rotl$1(x04 + x07 | 0, 18);
    x11 ^= rotl$1(x10 + x09 | 0, 7);
    x08 ^= rotl$1(x11 + x10 | 0, 9);
    x09 ^= rotl$1(x08 + x11 | 0, 13);
    x10 ^= rotl$1(x09 + x08 | 0, 18);
    x12 ^= rotl$1(x15 + x14 | 0, 7);
    x13 ^= rotl$1(x12 + x15 | 0, 9);
    x14 ^= rotl$1(x13 + x12 | 0, 13);
    x15 ^= rotl$1(x14 + x13 | 0, 18);
  }
  out[oi++] = y00 + x00 | 0;
  out[oi++] = y01 + x01 | 0;
  out[oi++] = y02 + x02 | 0;
  out[oi++] = y03 + x03 | 0;
  out[oi++] = y04 + x04 | 0;
  out[oi++] = y05 + x05 | 0;
  out[oi++] = y06 + x06 | 0;
  out[oi++] = y07 + x07 | 0;
  out[oi++] = y08 + x08 | 0;
  out[oi++] = y09 + x09 | 0;
  out[oi++] = y10 + x10 | 0;
  out[oi++] = y11 + x11 | 0;
  out[oi++] = y12 + x12 | 0;
  out[oi++] = y13 + x13 | 0;
  out[oi++] = y14 + x14 | 0;
  out[oi++] = y15 + x15 | 0;
}
function BlockMix(input, ii, out, oi, r) {
  let head = oi + 0;
  let tail = oi + 16 * r;
  for (let i = 0; i < 16; i++)
    out[tail + i] = input[ii + (2 * r - 1) * 16 + i];
  for (let i = 0; i < r; i++, head += 16, ii += 16) {
    XorAndSalsa(out, tail, input, ii, out, head);
    if (i > 0)
      tail += 16;
    XorAndSalsa(out, head, input, ii += 16, out, tail);
  }
}
function scryptInit(password, salt, _opts) {
  const opts = checkOpts({
    dkLen: 32,
    asyncTick: 10,
    maxmem: 1024 ** 3 + 1024
  }, _opts);
  const { N: N2, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;
  number(N2);
  number(r);
  number(p);
  number(dkLen);
  number(asyncTick);
  number(maxmem);
  if (onProgress !== void 0 && typeof onProgress !== "function")
    throw new Error("progressCb should be function");
  const blockSize = 128 * r;
  const blockSize32 = blockSize / 4;
  if (N2 <= 1 || (N2 & N2 - 1) !== 0 || N2 >= 2 ** (blockSize / 8) || N2 > 2 ** 32) {
    throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");
  }
  if (p < 0 || p > (2 ** 32 - 1) * 32 / blockSize) {
    throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
  }
  if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {
    throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
  }
  const memUsed = blockSize * (N2 + p);
  if (memUsed > maxmem) {
    throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
  }
  const B = pbkdf2(sha256, password, salt, { c: 1, dkLen: blockSize * p });
  const B32 = u322(B);
  const V = u322(new Uint8Array(blockSize * N2));
  const tmp = u322(new Uint8Array(blockSize));
  let blockMixCb = () => {
  };
  if (onProgress) {
    const totalBlockMix = 2 * N2 * p;
    const callbackPer = Math.max(Math.floor(totalBlockMix / 1e4), 1);
    let blockMixCnt = 0;
    blockMixCb = () => {
      blockMixCnt++;
      if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
        onProgress(blockMixCnt / totalBlockMix);
    };
  }
  return { N: N2, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };
}
function scryptOutput(password, dkLen, B, V, tmp) {
  const res = pbkdf2(sha256, password, B, { c: 1, dkLen });
  B.fill(0);
  V.fill(0);
  tmp.fill(0);
  return res;
}
function scrypt(password, salt, opts) {
  const { N: N2, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);
  for (let pi = 0; pi < p; pi++) {
    const Pi = blockSize32 * pi;
    for (let i = 0; i < blockSize32; i++)
      V[i] = B32[Pi + i];
    for (let i = 0, pos = 0; i < N2 - 1; i++) {
      BlockMix(V, pos, V, pos += blockSize32, r);
      blockMixCb();
    }
    BlockMix(V, (N2 - 1) * blockSize32, B32, Pi, r);
    blockMixCb();
    for (let i = 0; i < N2; i++) {
      const j = B32[Pi + blockSize32 - 16] % N2;
      for (let k = 0; k < blockSize32; k++)
        tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k];
      BlockMix(tmp, 0, B32, Pi, r);
      blockMixCb();
    }
  }
  return scryptOutput(password, dkLen, B, V, tmp);
}
const DEFAULT_PARAMS = {
  N: 1 << 15,
  p: 1,
  r: 8
};
function scryptEncode(passphrase, salt = randomAsU8a(), params = DEFAULT_PARAMS, onlyJs) {
  const u8a = u8aToU8a(passphrase);
  return {
    params,
    password: !hasBigInt || !onlyJs && isReady() ? scrypt$1(u8a, salt, Math.log2(params.N), params.r, params.p) : scrypt(u8a, salt, objectSpread({ dkLen: 64 }, params)),
    salt
  };
}
function scryptFromU8a(data) {
  const salt = data.subarray(0, 32);
  const N2 = u8aToBn(data.subarray(32 + 0, 32 + 4), BN_LE_OPTS).toNumber();
  const p = u8aToBn(data.subarray(32 + 4, 32 + 8), BN_LE_OPTS).toNumber();
  const r = u8aToBn(data.subarray(32 + 8, 32 + 12), BN_LE_OPTS).toNumber();
  if (N2 !== DEFAULT_PARAMS.N || p !== DEFAULT_PARAMS.p || r !== DEFAULT_PARAMS.r) {
    throw new Error("Invalid injected scrypt params found");
  }
  return { params: { N: N2, p, r }, salt };
}
function scryptToU8a(salt, { N: N2, p, r }) {
  return u8aConcat(salt, bnToU8a(N2, BN_LE_32_OPTS), bnToU8a(p, BN_LE_32_OPTS), bnToU8a(r, BN_LE_32_OPTS));
}
const ENCODING = ["scrypt", "xsalsa20-poly1305"];
const ENCODING_NONE = ["none"];
const ENCODING_VERSION = "3";
const NONCE_LENGTH = 24;
const SCRYPT_LENGTH = 32 + 3 * 4;
function jsonDecryptData(encrypted, passphrase, encType = ENCODING) {
  if (!encrypted) {
    throw new Error("No encrypted data available to decode");
  } else if (encType.includes("xsalsa20-poly1305") && !passphrase) {
    throw new Error("Password required to decode encrypted data");
  }
  let encoded = encrypted;
  if (passphrase) {
    let password;
    if (encType.includes("scrypt")) {
      const { params, salt } = scryptFromU8a(encrypted);
      password = scryptEncode(passphrase, salt, params).password;
      encrypted = encrypted.subarray(SCRYPT_LENGTH);
    } else {
      password = stringToU8a(passphrase);
    }
    encoded = naclDecrypt(encrypted.subarray(NONCE_LENGTH), encrypted.subarray(0, NONCE_LENGTH), u8aFixLength(password, 256, true));
  }
  if (!encoded) {
    throw new Error("Unable to decode using the supplied passphrase");
  }
  return encoded;
}
function jsonEncryptFormat(encoded, contentType, isEncrypted) {
  return {
    encoded: base64Encode(encoded),
    encoding: {
      content: contentType,
      type: isEncrypted ? ENCODING : ENCODING_NONE,
      version: ENCODING_VERSION
    }
  };
}
const secp256k1VerifyHasher = (hashType) => (message, signature, publicKey) => secp256k1Verify(message, signature, publicKey, hashType);
const VERIFIERS_ECDSA = [
  ["ecdsa", secp256k1VerifyHasher("blake2")],
  ["ethereum", secp256k1VerifyHasher("keccak")]
];
const VERIFIERS = [
  ["ed25519", ed25519Verify],
  ["sr25519", sr25519Verify],
  ...VERIFIERS_ECDSA
];
const CRYPTO_TYPES = ["ed25519", "sr25519", "ecdsa"];
function verifyDetect(result, { message, publicKey, signature }, verifiers = VERIFIERS) {
  result.isValid = verifiers.some(([crypto2, verify]) => {
    try {
      if (verify(message, signature, publicKey)) {
        result.crypto = crypto2;
        return true;
      }
    } catch {
    }
    return false;
  });
  return result;
}
function verifyMultisig(result, { message, publicKey, signature }) {
  if (![0, 1, 2].includes(signature[0])) {
    throw new Error(`Unknown crypto type, expected signature prefix [0..2], found ${signature[0]}`);
  }
  const type = CRYPTO_TYPES[signature[0]] || "none";
  result.crypto = type;
  try {
    result.isValid = {
      ecdsa: () => verifyDetect(result, { message, publicKey, signature: signature.subarray(1) }, VERIFIERS_ECDSA).isValid,
      ed25519: () => ed25519Verify(message, signature.subarray(1), publicKey),
      none: () => {
        throw Error("no verify for `none` crypto type");
      },
      sr25519: () => sr25519Verify(message, signature.subarray(1), publicKey)
    }[type]();
  } catch {
  }
  return result;
}
function getVerifyFn(signature) {
  return [0, 1, 2].includes(signature[0]) && [65, 66].includes(signature.length) ? verifyMultisig : verifyDetect;
}
function signatureVerify(message, signature, addressOrPublicKey) {
  const signatureU8a = u8aToU8a(signature);
  if (![64, 65, 66].includes(signatureU8a.length)) {
    throw new Error(`Invalid signature length, expected [64..66] bytes, found ${signatureU8a.length}`);
  }
  const publicKey = decodeAddress(addressOrPublicKey);
  const input = { message: u8aToU8a(message), publicKey, signature: signatureU8a };
  const result = { crypto: "none", isValid: false, isWrapped: u8aIsWrapped(input.message, true), publicKey };
  const isWrappedBytes = u8aIsWrapped(input.message, false);
  const verifyFn = getVerifyFn(signatureU8a);
  verifyFn(result, input);
  if (result.crypto !== "none" || result.isWrapped && !isWrappedBytes) {
    return result;
  }
  input.message = isWrappedBytes ? u8aUnwrapBytes(input.message) : u8aWrapBytes(input.message);
  return verifyFn(result, input);
}
const P64_1 = BigInt$1("11400714785074694791");
const P64_2 = BigInt$1("14029467366897019727");
const P64_3 = BigInt$1("1609587929392839161");
const P64_4 = BigInt$1("9650029242287828579");
const P64_5 = BigInt$1("2870177450012600261");
const U64 = BigInt$1("0xffffffffffffffff");
const _7n = BigInt$1(7);
const _11n = BigInt$1(11);
const _12n = BigInt$1(12);
const _16n = BigInt$1(16);
const _18n = BigInt$1(18);
const _23n = BigInt$1(23);
const _27n = BigInt$1(27);
const _29n = BigInt$1(29);
const _31n = BigInt$1(31);
const _32n = BigInt$1(32);
const _33n = BigInt$1(33);
const _64n = BigInt$1(64);
const _256n = BigInt$1(256);
function rotl(a, b) {
  const c = a & U64;
  return (c << b | c >> _64n - b) & U64;
}
function fromU8a(u8a, p, count) {
  const bigints = new Array(count);
  let offset = 0;
  for (let i = 0; i < count; i++, offset += 2) {
    bigints[i] = BigInt$1(u8a[p + offset] | u8a[p + 1 + offset] << 8);
  }
  let result = _0n$7;
  for (let i = count - 1; i >= 0; i--) {
    result = (result << _16n) + bigints[i];
  }
  return result;
}
function init(seed, input) {
  const state = {
    seed,
    u8a: new Uint8Array(32),
    u8asize: 0,
    v1: seed + P64_1 + P64_2,
    v2: seed + P64_2,
    v3: seed,
    v4: seed - P64_1
  };
  if (input.length < 32) {
    state.u8a.set(input);
    state.u8asize = input.length;
    return state;
  }
  const limit = input.length - 32;
  let p = 0;
  if (limit >= 0) {
    const adjustV = (v) => P64_1 * rotl(v + P64_2 * fromU8a(input, p, 4), _31n);
    do {
      state.v1 = adjustV(state.v1);
      p += 8;
      state.v2 = adjustV(state.v2);
      p += 8;
      state.v3 = adjustV(state.v3);
      p += 8;
      state.v4 = adjustV(state.v4);
      p += 8;
    } while (p <= limit);
  }
  if (p < input.length) {
    state.u8a.set(input.subarray(p, input.length));
    state.u8asize = input.length - p;
  }
  return state;
}
function xxhash64(input, initSeed) {
  const { seed, u8a, u8asize, v1: v16, v2, v3, v4: v42 } = init(BigInt$1(initSeed), input);
  let p = 0;
  let h64 = U64 & BigInt$1(input.length) + (input.length >= 32 ? ((((rotl(v16, _1n$9) + rotl(v2, _7n) + rotl(v3, _12n) + rotl(v42, _18n) ^ P64_1 * rotl(v16 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v2 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v3 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v42 * P64_2, _31n)) * P64_1 + P64_4 : seed + P64_5);
  while (p <= u8asize - 8) {
    h64 = U64 & P64_4 + P64_1 * rotl(h64 ^ P64_1 * rotl(P64_2 * fromU8a(u8a, p, 4), _31n), _27n);
    p += 8;
  }
  if (p + 4 <= u8asize) {
    h64 = U64 & P64_3 + P64_2 * rotl(h64 ^ P64_1 * fromU8a(u8a, p, 2), _23n);
    p += 4;
  }
  while (p < u8asize) {
    h64 = U64 & P64_1 * rotl(h64 ^ P64_5 * BigInt$1(u8a[p++]), _11n);
  }
  h64 = U64 & P64_2 * (h64 ^ h64 >> _33n);
  h64 = U64 & P64_3 * (h64 ^ h64 >> _29n);
  h64 = U64 & (h64 ^ h64 >> _32n);
  const result = new Uint8Array(8);
  for (let i = 7; i >= 0; i--) {
    result[i] = Number(h64 % _256n);
    h64 = h64 / _256n;
  }
  return result;
}
function xxhashAsU8a(data, bitLength = 64, onlyJs) {
  const rounds = Math.ceil(bitLength / 64);
  const u8a = u8aToU8a(data);
  if (!hasBigInt || !onlyJs && isReady()) {
    return twox(u8a, rounds);
  }
  const result = new Uint8Array(rounds * 8);
  for (let seed = 0; seed < rounds; seed++) {
    result.set(xxhash64(u8a, seed).reverse(), seed * 8);
  }
  return result;
}
const upgrades$1 = [];
const versioned$3 = [];
const statemint = [];
const polkadot = [];
const shell = [];
const emptyCheck = {
  extrinsic: {},
  payload: {}
};
const CheckMortality = {
  extrinsic: {
    era: "ExtrinsicEra"
  },
  payload: {
    blockHash: "Hash"
  }
};
const ChargeTransactionPayment = {
  extrinsic: {
    tip: "Compact<Balance>"
  },
  payload: {}
};
const substrate$1 = {
  ChargeTransactionPayment,
  CheckBlockGasLimit: emptyCheck,
  CheckEra: CheckMortality,
  CheckGenesis: {
    extrinsic: {},
    payload: {
      genesisHash: "Hash"
    }
  },
  CheckMortality,
  CheckNonZeroSender: emptyCheck,
  CheckNonce: {
    extrinsic: {
      nonce: "Compact<Index>"
    },
    payload: {}
  },
  CheckSpecVersion: {
    extrinsic: {},
    payload: {
      specVersion: "u32"
    }
  },
  CheckTxVersion: {
    extrinsic: {},
    payload: {
      transactionVersion: "u32"
    }
  },
  CheckVersion: {
    extrinsic: {},
    payload: {
      specVersion: "u32"
    }
  },
  CheckWeight: emptyCheck,
  LockStakingStatus: emptyCheck,
  SkipCheckIfFeeless: ChargeTransactionPayment,
  ValidateEquivocationReport: emptyCheck
};
const allExtensions = objectSpread({}, substrate$1, polkadot, shell, statemint);
const fallbackExtensions = [
  "CheckVersion",
  "CheckGenesis",
  "CheckEra",
  "CheckNonce",
  "CheckWeight",
  "ChargeTransactionPayment",
  "CheckBlockGasLimit"
];
function findUnknownExtensions(extensions, userExtensions = {}) {
  const names = [...Object.keys(allExtensions), ...Object.keys(userExtensions)];
  return extensions.filter((k) => !names.includes(k));
}
function expandExtensionTypes(extensions, type, userExtensions = {}) {
  return extensions.map((k) => userExtensions[k] || allExtensions[k]).filter((info2) => !!info2).reduce((result, info2) => objectSpread(result, info2[type]), {});
}
function decodeEvent(registry, value) {
  if (!(value == null ? void 0 : value.length)) {
    return { DataType: Null };
  }
  const index = value.subarray(0, 2);
  return {
    DataType: registry.findMetaEvent(index),
    value: {
      data: value.subarray(2),
      index
    }
  };
}
class GenericEventData extends Tuple {
  constructor(registry, value, meta, section2 = "<unknown>", method = "<unknown>") {
    const fields = (meta == null ? void 0 : meta.fields) || [];
    super(registry, fields.map(({ type }) => registry.createLookupType(type)), value);
    __publicField(this, "__internal__meta");
    __publicField(this, "__internal__method");
    __publicField(this, "__internal__names", null);
    __publicField(this, "__internal__section");
    __publicField(this, "__internal__typeDef");
    this.__internal__meta = meta;
    this.__internal__method = method;
    this.__internal__section = section2;
    this.__internal__typeDef = fields.map(({ type }) => registry.lookup.getTypeDef(type));
    const names = fields.map(({ name }) => registry.lookup.sanitizeField(name)[0]).filter((n) => !!n);
    if (names.length === fields.length) {
      this.__internal__names = names;
      objectProperties(this, names, (_23, i) => this[i]);
    }
  }
  /**
   * @description The wrapped [[EventMetadata]]
   */
  get meta() {
    return this.__internal__meta;
  }
  /**
   * @description The method as a string
   */
  get method() {
    return this.__internal__method;
  }
  /**
   * @description The field names (as available)
   */
  get names() {
    return this.__internal__names;
  }
  /**
   * @description The section as a string
   */
  get section() {
    return this.__internal__section;
  }
  /**
   * @description The [[TypeDef]] for this event
   */
  get typeDef() {
    return this.__internal__typeDef;
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended) {
    if (this.__internal__names !== null) {
      const json = {};
      for (let i = 0, count = this.__internal__names.length; i < count; i++) {
        json[this.__internal__names[i]] = this[i].toHuman(isExtended);
      }
      return json;
    }
    return super.toHuman(isExtended);
  }
}
class GenericEvent extends Struct {
  // Currently we _only_ decode from Uint8Array, since we expect it to
  // be used via EventRecord
  constructor(registry, _value) {
    const { DataType, value } = decodeEvent(registry, _value);
    super(registry, {
      index: "EventId",
      // eslint-disable-next-line sort-keys
      data: DataType
    }, value);
  }
  /**
   * @description The wrapped [[EventData]]
   */
  get data() {
    return this.getT("data");
  }
  /**
   * @description The [[EventId]], identifying the raw event
   */
  get index() {
    return this.getT("index");
  }
  /**
   * @description The [[EventMetadata]] with the documentation
   */
  get meta() {
    return this.data.meta;
  }
  /**
   * @description The method string identifying the event
   */
  get method() {
    return this.data.method;
  }
  /**
   * @description The section string identifying the event
   */
  get section() {
    return this.data.section;
  }
  /**
   * @description The [[TypeDef]] for the event
   */
  get typeDef() {
    return this.data.typeDef;
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExpanded) {
    return objectSpread({
      method: this.method,
      section: this.section
    }, isExpanded ? { docs: this.meta.docs.map((d) => d.toString()) } : null, super.toHuman(isExpanded));
  }
}
const EXTRINSIC_VERSION = 4;
class GenericExtrinsicV4 extends Struct {
  constructor(registry, value, { isSigned } = {}) {
    super(registry, {
      signature: "ExtrinsicSignatureV4",
      // eslint-disable-next-line sort-keys
      method: "Call"
    }, GenericExtrinsicV4.decodeExtrinsic(registry, value, isSigned));
  }
  /** @internal */
  static decodeExtrinsic(registry, value, isSigned = false) {
    if (value instanceof GenericExtrinsicV4) {
      return value;
    } else if (value instanceof registry.createClassUnsafe("Call")) {
      return { method: value };
    } else if (isU8a(value)) {
      const signature = registry.createTypeUnsafe("ExtrinsicSignatureV4", [value, { isSigned }]);
      const method = registry.createTypeUnsafe("Call", [value.subarray(signature.encodedLength)]);
      return {
        method,
        signature
      };
    }
    return value || {};
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description The [[Call]] this extrinsic wraps
   */
  get method() {
    return this.getT("method");
  }
  /**
   * @description The [[ExtrinsicSignatureV4]]
   */
  get signature() {
    return this.getT("signature");
  }
  /**
   * @description The version for the signature
   */
  get version() {
    return EXTRINSIC_VERSION;
  }
  /**
   * @description Add an [[ExtrinsicSignatureV4]] to the extrinsic (already generated)
   */
  addSignature(signer, signature, payload) {
    this.signature.addSignature(signer, signature, payload);
    return this;
  }
  /**
   * @description Sign the extrinsic with a specific keypair
   */
  sign(account2, options) {
    this.signature.sign(this.method, account2, options);
    return this;
  }
  /**
   * @describe Adds a fake signature to the extrinsic
   */
  signFake(signer, options) {
    this.signature.signFake(this.method, signer, options);
    return this;
  }
}
const BIT_SIGNED = 128;
const BIT_UNSIGNED = 0;
const EMPTY_U8A = new Uint8Array();
const DEFAULT_VERSION = 4;
const IMMORTAL_ERA = new Uint8Array([0]);
const UNMASK_VERSION = 127;
const VERSIONS$1 = [
  "ExtrinsicUnknown",
  "ExtrinsicUnknown",
  "ExtrinsicUnknown",
  "ExtrinsicUnknown",
  "ExtrinsicV4"
];
function newFromValue(registry, value, version2) {
  if (value instanceof GenericExtrinsic) {
    return value.unwrap();
  }
  const isSigned = (version2 & BIT_SIGNED) === BIT_SIGNED;
  const type = VERSIONS$1[version2 & UNMASK_VERSION] || VERSIONS$1[0];
  return registry.createTypeUnsafe(type, [value, { isSigned, version: version2 }]);
}
function decodeExtrinsic(registry, value, version2 = DEFAULT_VERSION) {
  if (isU8a(value) || Array.isArray(value) || isHex(value)) {
    return decodeU8a$4(registry, u8aToU8a(value), version2);
  } else if (value instanceof registry.createClassUnsafe("Call")) {
    return newFromValue(registry, { method: value }, version2);
  }
  return newFromValue(registry, value, version2);
}
function decodeU8a$4(registry, value, version2) {
  if (!value.length) {
    return newFromValue(registry, new Uint8Array(), version2);
  }
  const [offset, length2] = compactFromU8a(value);
  const total = offset + length2.toNumber();
  if (total > value.length) {
    throw new Error(`Extrinsic: length less than remainder, expected at least ${total}, found ${value.length}`);
  }
  const data = value.subarray(offset, total);
  return newFromValue(registry, data.subarray(1), data[0]);
}
class ExtrinsicBase extends AbstractBase {
  constructor(registry, value, initialU8aLength) {
    super(registry, value, initialU8aLength);
    const signKeys = Object.keys(registry.getSignedExtensionTypes());
    const getter = (key) => this.inner.signature[key];
    for (let i = 0, count = signKeys.length; i < count; i++) {
      objectProperty(this, signKeys[i], getter);
    }
  }
  /**
   * @description The arguments passed to for the call, exposes args so it is compatible with [[Call]]
   */
  get args() {
    return this.method.args;
  }
  /**
   * @description The argument definitions, compatible with [[Call]]
   */
  get argsDef() {
    return this.method.argsDef;
  }
  /**
   * @description The actual `[sectionIndex, methodIndex]` as used in the Call
   */
  get callIndex() {
    return this.method.callIndex;
  }
  /**
   * @description The actual data for the Call
   */
  get data() {
    return this.method.data;
  }
  /**
   * @description The era for this extrinsic
   */
  get era() {
    return this.inner.signature.era;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description `true` id the extrinsic is signed
   */
  get isSigned() {
    return this.inner.signature.isSigned;
  }
  /**
   * @description The length of the actual data, excluding prefix
   */
  get length() {
    return this.toU8a(true).length;
  }
  /**
   * @description The [[FunctionMetadataLatest]] that describes the extrinsic
   */
  get meta() {
    return this.method.meta;
  }
  /**
   * @description The [[Call]] this extrinsic wraps
   */
  get method() {
    return this.inner.method;
  }
  /**
   * @description The nonce for this extrinsic
   */
  get nonce() {
    return this.inner.signature.nonce;
  }
  /**
   * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
   */
  get signature() {
    return this.inner.signature.signature;
  }
  /**
   * @description The [[Address]] that signed
   */
  get signer() {
    return this.inner.signature.signer;
  }
  /**
   * @description Forwards compat
   */
  get tip() {
    return this.inner.signature.tip;
  }
  /**
   * @description Returns the raw transaction version (not flagged with signing information)
  */
  get type() {
    return this.inner.version;
  }
  get inner() {
    return this.unwrap();
  }
  /**
   * @description Returns the encoded version flag
  */
  get version() {
    return this.type | (this.isSigned ? BIT_SIGNED : BIT_UNSIGNED);
  }
  /**
   * @description Checks if the source matches this in type
   */
  is(other) {
    return this.method.is(other);
  }
  unwrap() {
    return super.unwrap();
  }
}
class GenericExtrinsic extends ExtrinsicBase {
  constructor(registry, value, { version: version2 } = {}) {
    super(registry, decodeExtrinsic(registry, value, version2));
    __publicField(this, "__internal__hashCache");
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    if (!this.__internal__hashCache) {
      this.__internal__hashCache = super.hash;
    }
    return this.__internal__hashCache;
  }
  /**
   * @description Injects an already-generated signature into the extrinsic
   */
  addSignature(signer, signature, payload) {
    this.inner.addSignature(signer, signature, payload);
    this.__internal__hashCache = void 0;
    return this;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    const encoded = u8aConcat(...this.toU8aInner());
    return {
      inner: this.isSigned ? this.inner.inspect().inner : this.inner.method.inspect().inner,
      outer: [compactToU8a(encoded.length), new Uint8Array([this.version])]
    };
  }
  /**
   * @description Sign the extrinsic with a specific keypair
   */
  sign(account2, options) {
    this.inner.sign(account2, options);
    this.__internal__hashCache = void 0;
    return this;
  }
  /**
   * @describe Adds a fake signature to the extrinsic
   */
  signFake(signer, options) {
    this.inner.signFake(signer, options);
    this.__internal__hashCache = void 0;
    return this;
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex(isBare) {
    return u8aToHex(this.toU8a(isBare));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExpanded) {
    return objectSpread({}, {
      isSigned: this.isSigned,
      method: this.method.toHuman(isExpanded)
    }, this.isSigned ? {
      era: this.era.toHuman(isExpanded),
      nonce: this.nonce.toHuman(isExpanded),
      signature: this.signature.toHex(),
      signer: this.signer.toHuman(isExpanded),
      tip: this.tip.toHuman(isExpanded)
    } : null);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.toHex();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Extrinsic";
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value is not length-prefixed
   */
  toU8a(isBare) {
    const encoded = u8aConcat(...this.toU8aInner());
    return isBare ? encoded : compactAddLength(encoded);
  }
  toU8aInner() {
    return [
      new Uint8Array([this.version]),
      this.inner.toU8a()
    ];
  }
}
__publicField(GenericExtrinsic, "LATEST_EXTRINSIC_VERSION", EXTRINSIC_VERSION);
function getTrailingZeros(period) {
  const binary = period.toString(2);
  let index = 0;
  while (binary[binary.length - 1 - index] === "0") {
    index++;
  }
  return index;
}
function decodeMortalEra(registry, value) {
  if (isU8a(value) || isHex(value) || Array.isArray(value)) {
    return decodeMortalU8a(registry, u8aToU8a(value));
  } else if (!value) {
    return [new u64$2(registry), new u64$2(registry)];
  } else if (isObject$1(value)) {
    return decodeMortalObject(registry, value);
  }
  throw new Error("Invalid data passed to Mortal era");
}
function decodeMortalObject(registry, value) {
  const { current, period } = value;
  let calPeriod = Math.pow(2, Math.ceil(Math.log2(period)));
  calPeriod = Math.min(Math.max(calPeriod, 4), 1 << 16);
  const phase = current % calPeriod;
  const quantizeFactor = Math.max(calPeriod >> 12, 1);
  const quantizedPhase = phase / quantizeFactor * quantizeFactor;
  return [new u64$2(registry, calPeriod), new u64$2(registry, quantizedPhase)];
}
function decodeMortalU8a(registry, value) {
  if (value.length === 0) {
    return [new u64$2(registry), new u64$2(registry)];
  }
  const first2 = u8aToBn(value.subarray(0, 1)).toNumber();
  const second = u8aToBn(value.subarray(1, 2)).toNumber();
  const encoded = first2 + (second << 8);
  const period = 2 << encoded % (1 << 4);
  const quantizeFactor = Math.max(period >> 12, 1);
  const phase = (encoded >> 4) * quantizeFactor;
  if (period < 4 || phase >= period) {
    throw new Error("Invalid data passed to Mortal era");
  }
  return [new u64$2(registry, period), new u64$2(registry, phase)];
}
function decodeExtrinsicEra(value = new Uint8Array()) {
  if (isU8a(value)) {
    return !value.length || value[0] === 0 ? new Uint8Array([0]) : new Uint8Array([1, value[0], value[1]]);
  } else if (!value) {
    return new Uint8Array([0]);
  } else if (value instanceof GenericExtrinsicEra) {
    return decodeExtrinsicEra(value.toU8a());
  } else if (isHex(value)) {
    return decodeExtrinsicEra(hexToU8a(value));
  } else if (isObject$1(value)) {
    const entries = Object.entries(value).map(([k, v]) => [k.toLowerCase(), v]);
    const mortal = entries.find(([k]) => k.toLowerCase() === "mortalera");
    const immortal = entries.find(([k]) => k.toLowerCase() === "immortalera");
    return mortal ? { MortalEra: mortal[1] } : immortal ? { ImmortalEra: immortal[1] } : { MortalEra: value };
  }
  throw new Error("Invalid data passed to Era");
}
class ImmortalEra extends Raw {
  constructor(registry, _value) {
    super(registry, IMMORTAL_ERA);
  }
}
class MortalEra extends Tuple {
  constructor(registry, value) {
    super(registry, {
      period: u64$2,
      phase: u64$2
    }, decodeMortalEra(registry, value));
  }
  /**
   * @description Encoded length for mortals occupy 2 bytes, different from the actual Tuple since it is encoded. This is a shortcut fro `toU8a().length`
   */
  get encodedLength() {
    return 2 | 0;
  }
  /**
   * @description The period of this Mortal wraps as a [[U64]]
   */
  get period() {
    return this[0];
  }
  /**
   * @description The phase of this Mortal wraps as a [[U64]]
   */
  get phase() {
    return this[1];
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return {
      period: formatNumber(this.period),
      phase: formatNumber(this.phase)
    };
  }
  /**
   * @description Returns a JSON representation of the actual value
   */
  toJSON() {
    return this.toHex();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the parity-codec specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   * Period and phase are encoded:
   *   - The period of validity from the block hash found in the signing material.
   *   - The phase in the period that this transaction's lifetime begins (and, importantly,
   *     implies which block hash is included in the signature material). If the `period` is
   *     greater than 1 << 12, then it will be a factor of the times greater than 1<<12 that
   *     `period` is.
   */
  toU8a(_isBare) {
    const period = this.period.toNumber();
    const encoded = Math.min(15, Math.max(1, getTrailingZeros(period) - 1)) + (this.phase.toNumber() / Math.max(period >> 12, 1) << 4);
    return new Uint8Array([
      encoded & 255,
      encoded >> 8
    ]);
  }
  /**
   * @description Get the block number of the start of the era whose properties this object describes that `current` belongs to.
   */
  birth(current) {
    const phase = this.phase.toNumber();
    const period = this.period.toNumber();
    return ~~((Math.max(bnToBn(current).toNumber(), phase) - phase) / period) * period + phase;
  }
  /**
   * @description Get the block number of the first block at which the era has ended.
   */
  death(current) {
    return this.birth(current) + this.period.toNumber();
  }
}
class GenericExtrinsicEra extends Enum {
  constructor(registry, value) {
    super(registry, {
      ImmortalEra,
      MortalEra
    }, decodeExtrinsicEra(value));
  }
  /**
   * @description Override the encoded length method
   */
  get encodedLength() {
    return this.isImmortalEra ? this.asImmortalEra.encodedLength : this.asMortalEra.encodedLength;
  }
  /**
   * @description Returns the item as a [[ImmortalEra]]
   */
  get asImmortalEra() {
    if (!this.isImmortalEra) {
      throw new Error(`Cannot convert '${this.type}' via asImmortalEra`);
    }
    return this.inner;
  }
  /**
   * @description Returns the item as a [[MortalEra]]
   */
  get asMortalEra() {
    if (!this.isMortalEra) {
      throw new Error(`Cannot convert '${this.type}' via asMortalEra`);
    }
    return this.inner;
  }
  /**
   * @description `true` if Immortal
   */
  get isImmortalEra() {
    return this.index === 0;
  }
  /**
   * @description `true` if Mortal
   */
  get isMortalEra() {
    return this.index > 0;
  }
  /**
   * @description Encodes the value as a Uint8Array as per the parity-codec specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    return this.isMortalEra ? this.asMortalEra.toU8a(isBare) : this.asImmortalEra.toU8a(isBare);
  }
}
const VERSIONS = [
  "ExtrinsicPayloadUnknown",
  "ExtrinsicPayloadUnknown",
  "ExtrinsicPayloadUnknown",
  "ExtrinsicPayloadUnknown",
  "ExtrinsicPayloadV4"
];
function decodeExtrinsicPayload(registry, value, version2 = DEFAULT_VERSION) {
  if (value instanceof GenericExtrinsicPayload) {
    return value.unwrap();
  }
  return registry.createTypeUnsafe(VERSIONS[version2] || VERSIONS[0], [value, { version: version2 }]);
}
class GenericExtrinsicPayload extends AbstractBase {
  constructor(registry, value, { version: version2 } = {}) {
    super(registry, decodeExtrinsicPayload(registry, value, version2));
  }
  /**
   * @description The block [[BlockHash]] the signature applies to (mortal/immortal)
   */
  get blockHash() {
    return this.inner.blockHash;
  }
  /**
   * @description The [[ExtrinsicEra]]
   */
  get era() {
    return this.inner.era;
  }
  /**
   * @description The genesis block [[BlockHash]] the signature applies to
   */
  get genesisHash() {
    return this.inner.genesisHash || this.registry.createTypeUnsafe("Hash", []);
  }
  /**
   * @description The [[Bytes]] contained in the payload
   */
  get method() {
    return this.inner.method;
  }
  /**
   * @description The [[Index]]
   */
  get nonce() {
    return this.inner.nonce;
  }
  /**
   * @description The specVersion as a [[u32]] for this payload
   */
  get specVersion() {
    return this.inner.specVersion || this.registry.createTypeUnsafe("u32", []);
  }
  /**
   * @description The [[Balance]]
   */
  get tip() {
    return this.inner.tip || this.registry.createTypeUnsafe("Compact<Balance>", []);
  }
  /**
   * @description The transaction version as a [[u32]] for this payload
   */
  get transactionVersion() {
    return this.inner.transactionVersion || this.registry.createTypeUnsafe("u32", []);
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return this.inner.eq(other);
  }
  /**
   * @description Sign the payload with the keypair
   */
  sign(signerPair) {
    const signature = this.inner.sign(signerPair);
    return {
      signature: u8aToHex(signature)
    };
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended) {
    return this.inner.toHuman(isExtended);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.toHex();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "ExtrinsicPayload";
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.toHex();
  }
  /**
   * @description Returns a serialized u8a form
   */
  toU8a(isBare) {
    return super.toU8a(isBare ? { method: true } : false);
  }
}
class GenericExtrinsicPayloadUnknown extends Struct {
  constructor(registry, _value, { version: version2 = 0 } = {}) {
    super(registry, {});
    throw new Error(`Unsupported extrinsic payload version ${version2}`);
  }
}
class GenericExtrinsicUnknown extends Struct {
  constructor(registry, _value, { isSigned = false, version: version2 = 0 } = {}) {
    super(registry, {});
    throw new Error(`Unsupported ${isSigned ? "" : "un"}signed extrinsic version ${version2 & UNMASK_VERSION}`);
  }
}
const knownTypes = {
  address: "Address",
  blockHash: "Hash",
  blockNumber: "BlockNumber",
  era: "ExtrinsicEra",
  genesisHash: "Hash",
  method: "Call",
  nonce: "Compact<Index>",
  runtimeVersion: "RuntimeVersion",
  signedExtensions: "Vec<Text>",
  tip: "Compact<Balance>",
  version: "u8"
};
class GenericSignerPayload extends Struct {
  constructor(registry, value) {
    const extensionTypes = objectSpread({}, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra());
    super(registry, objectSpread({}, extensionTypes, knownTypes), value);
    __publicField(this, "__internal__extraTypes");
    this.__internal__extraTypes = {};
    const getter = (key) => this.get(key);
    for (const [key, type] of Object.entries(extensionTypes)) {
      if (!knownTypes[key]) {
        this.__internal__extraTypes[key] = type;
      }
      objectProperty(this, key, getter);
    }
  }
  get address() {
    return this.getT("address");
  }
  get blockHash() {
    return this.getT("blockHash");
  }
  get blockNumber() {
    return this.getT("blockNumber");
  }
  get era() {
    return this.getT("era");
  }
  get genesisHash() {
    return this.getT("genesisHash");
  }
  get method() {
    return this.getT("method");
  }
  get nonce() {
    return this.getT("nonce");
  }
  get runtimeVersion() {
    return this.getT("runtimeVersion");
  }
  get signedExtensions() {
    return this.getT("signedExtensions");
  }
  get tip() {
    return this.getT("tip");
  }
  get version() {
    return this.getT("version");
  }
  /**
   * @description Creates an representation of the structure as an ISignerPayload JSON
   */
  toPayload() {
    const result = {};
    const keys = Object.keys(this.__internal__extraTypes);
    for (let i = 0, count = keys.length; i < count; i++) {
      const key = keys[i];
      const value = this.getT(key);
      if (!(value instanceof Option) || value.isSome) {
        result[key] = value.toJSON();
      }
    }
    return objectSpread(result, {
      // the known defaults as managed explicitly and has different
      // formatting in cases, e.g. we mostly expose a hex format here
      address: this.address.toString(),
      blockHash: this.blockHash.toHex(),
      blockNumber: this.blockNumber.toHex(),
      era: this.era.toHex(),
      genesisHash: this.genesisHash.toHex(),
      method: this.method.toHex(),
      nonce: this.nonce.toHex(),
      signedExtensions: this.signedExtensions.map((e) => e.toString()),
      specVersion: this.runtimeVersion.specVersion.toHex(),
      tip: this.tip.toHex(),
      transactionVersion: this.runtimeVersion.transactionVersion.toHex(),
      version: this.version.toNumber()
    });
  }
  /**
   * @description Creates a representation of the payload in raw Exrinsic form
   */
  toRaw() {
    const payload = this.toPayload();
    const data = u8aToHex(this.registry.createTypeUnsafe("ExtrinsicPayload", [payload, { version: payload.version }]).toU8a({ method: true }));
    return {
      address: payload.address,
      data,
      type: "payload"
    };
  }
}
function sign(registry, signerPair, u8a, options) {
  const encoded = u8a.length > 256 ? registry.hash(u8a) : u8a;
  return signerPair.sign(encoded, options);
}
class GenericExtrinsicPayloadV4 extends Struct {
  constructor(registry, value) {
    super(registry, objectSpread({ method: "Bytes" }, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra()), value);
    __publicField(this, "__internal__signOptions");
    this.__internal__signOptions = {
      withType: registry.createTypeUnsafe("ExtrinsicSignature", []) instanceof Enum
    };
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return super.inspect({ method: true });
  }
  /**
   * @description The block [[BlockHash]] the signature applies to (mortal/immortal)
   */
  get blockHash() {
    return this.getT("blockHash");
  }
  /**
   * @description The [[ExtrinsicEra]]
   */
  get era() {
    return this.getT("era");
  }
  /**
   * @description The genesis [[BlockHash]] the signature applies to (mortal/immortal)
   */
  get genesisHash() {
    return this.getT("genesisHash");
  }
  /**
   * @description The [[Bytes]] contained in the payload
   */
  get method() {
    return this.getT("method");
  }
  /**
   * @description The [[Index]]
   */
  get nonce() {
    return this.getT("nonce");
  }
  /**
   * @description The specVersion for this signature
   */
  get specVersion() {
    return this.getT("specVersion");
  }
  /**
   * @description The tip [[Balance]]
   */
  get tip() {
    return this.getT("tip");
  }
  /**
   * @description The transactionVersion for this signature
   */
  get transactionVersion() {
    return this.getT("transactionVersion");
  }
  /**
   * @description The (optional) asset id for this signature for chains that support transaction fees in assets
   */
  get assetId() {
    return this.getT("assetId");
  }
  /**
   * @description Sign the payload with the keypair
   */
  sign(signerPair) {
    return sign(this.registry, signerPair, this.toU8a({ method: true }), this.__internal__signOptions);
  }
}
const FAKE_SIGNATURE = new Uint8Array(256).fill(1);
function toAddress(registry, address) {
  return registry.createTypeUnsafe("Address", [isU8a(address) ? u8aToHex(address) : address]);
}
class GenericExtrinsicSignatureV4 extends Struct {
  constructor(registry, value, { isSigned } = {}) {
    const signTypes = registry.getSignedExtensionTypes();
    super(registry, objectSpread(
      // eslint-disable-next-line sort-keys
      { signer: "Address", signature: "ExtrinsicSignature" },
      signTypes
    ), GenericExtrinsicSignatureV4.decodeExtrinsicSignature(value, isSigned));
    __publicField(this, "__internal__signKeys");
    this.__internal__signKeys = Object.keys(signTypes);
    objectProperties(this, this.__internal__signKeys, (k) => this.get(k));
  }
  /** @internal */
  static decodeExtrinsicSignature(value, isSigned = false) {
    if (!value) {
      return EMPTY_U8A;
    } else if (value instanceof GenericExtrinsicSignatureV4) {
      return value;
    }
    return isSigned ? value : EMPTY_U8A;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.isSigned ? super.encodedLength : 0;
  }
  /**
   * @description `true` if the signature is valid
   */
  get isSigned() {
    return !this.signature.isEmpty;
  }
  /**
   * @description The [[ExtrinsicEra]] (mortal or immortal) this signature applies to
   */
  get era() {
    return this.getT("era");
  }
  /**
   * @description The [[Index]] for the signature
   */
  get nonce() {
    return this.getT("nonce");
  }
  /**
   * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
   */
  get signature() {
    return this.multiSignature.value || this.multiSignature;
  }
  /**
   * @description The raw [[ExtrinsicSignature]]
   */
  get multiSignature() {
    return this.getT("signature");
  }
  /**
   * @description The [[Address]] that signed
   */
  get signer() {
    return this.getT("signer");
  }
  /**
   * @description The [[Balance]] tip
   */
  get tip() {
    return this.getT("tip");
  }
  _injectSignature(signer, signature, payload) {
    for (let i = 0, count = this.__internal__signKeys.length; i < count; i++) {
      const k = this.__internal__signKeys[i];
      const v = payload.get(k);
      if (!isUndefined(v)) {
        this.set(k, v);
      }
    }
    this.set("signer", signer);
    this.set("signature", signature);
    return this;
  }
  /**
   * @description Adds a raw signature
   */
  addSignature(signer, signature, payload) {
    return this._injectSignature(toAddress(this.registry, signer), this.registry.createTypeUnsafe("ExtrinsicSignature", [signature]), new GenericExtrinsicPayloadV4(this.registry, payload));
  }
  /**
   * @description Creates a payload from the supplied options
   */
  createPayload(method, options) {
    const { era, runtimeVersion: { specVersion, transactionVersion } } = options;
    return new GenericExtrinsicPayloadV4(this.registry, objectSpread({}, options, {
      era: era || IMMORTAL_ERA,
      method: method.toHex(),
      specVersion,
      transactionVersion
    }));
  }
  /**
   * @description Generate a payload and applies the signature from a keypair
   */
  sign(method, account2, options) {
    if (!(account2 == null ? void 0 : account2.addressRaw)) {
      throw new Error(`Expected a valid keypair for signing, found ${stringify$1(account2)}`);
    }
    const payload = this.createPayload(method, options);
    return this._injectSignature(toAddress(this.registry, account2.addressRaw), this.registry.createTypeUnsafe("ExtrinsicSignature", [payload.sign(account2)]), payload);
  }
  /**
   * @description Generate a payload and applies a fake signature
   */
  signFake(method, address, options) {
    if (!address) {
      throw new Error(`Expected a valid address for signing, found ${stringify$1(address)}`);
    }
    const payload = this.createPayload(method, options);
    return this._injectSignature(toAddress(this.registry, address), this.registry.createTypeUnsafe("ExtrinsicSignature", [FAKE_SIGNATURE]), payload);
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    return this.isSigned ? super.toU8a(isBare) : EMPTY_U8A;
  }
}
function decodeAccountId$1(value) {
  if (isU8a(value) || Array.isArray(value)) {
    return u8aToU8a(value);
  } else if (!value) {
    return new Uint8Array();
  } else if (isHex(value)) {
    return hexToU8a(value);
  } else if (isString(value)) {
    return decodeAddress(value.toString());
  }
  throw new Error(`Unknown type passed to AccountId constructor, found typeof ${typeof value}`);
}
class BaseAccountId extends U8aFixed {
  constructor(registry, allowedBits = 256 | 264, value) {
    const decoded = decodeAccountId$1(value);
    const decodedBits = decoded.length * 8;
    if (decodedBits < allowedBits && decoded.some((b) => b)) {
      throw new Error(`Invalid AccountId provided, expected ${allowedBits >> 3} bytes, found ${decoded.length}`);
    }
    super(registry, decoded, allowedBits);
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return super.eq(decodeAccountId$1(other));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.toString();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.toJSON();
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return encodeAddress(this, this.registry.chainSS58);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "AccountId";
  }
}
class GenericAccountId extends BaseAccountId {
  constructor(registry, value) {
    super(registry, 256, value);
  }
}
class GenericAccountId33 extends BaseAccountId {
  constructor(registry, value) {
    super(registry, 264, value);
  }
}
const PREFIX_1BYTE = 239;
const PREFIX_2BYTE = 252;
const PREFIX_4BYTE = 253;
const PREFIX_8BYTE = 254;
const MAX_1BYTE = new BN(PREFIX_1BYTE);
const MAX_2BYTE = new BN(1).shln(16);
const MAX_4BYTE = new BN(1).shln(32);
function decodeAccountIndex(value) {
  if (value instanceof GenericAccountIndex) {
    return value.toBn();
  } else if (isBn(value) || isNumber(value) || isHex(value) || isU8a(value) || isBigInt(value)) {
    return value;
  }
  return decodeAccountIndex(decodeAddress(value));
}
class GenericAccountIndex extends u32$2 {
  constructor(registry, value = new BN(0)) {
    super(registry, decodeAccountIndex(value));
  }
  static calcLength(_value) {
    const value = bnToBn(_value);
    if (value.lte(MAX_1BYTE)) {
      return 1;
    } else if (value.lt(MAX_2BYTE)) {
      return 2;
    } else if (value.lt(MAX_4BYTE)) {
      return 4;
    }
    return 8;
  }
  static readLength(input) {
    const first2 = input[0];
    if (first2 === PREFIX_2BYTE) {
      return [1, 2];
    } else if (first2 === PREFIX_4BYTE) {
      return [1, 4];
    } else if (first2 === PREFIX_8BYTE) {
      return [1, 8];
    }
    return [0, 1];
  }
  static writeLength(input) {
    switch (input.length) {
      case 2:
        return new Uint8Array([PREFIX_2BYTE]);
      case 4:
        return new Uint8Array([PREFIX_4BYTE]);
      case 8:
        return new Uint8Array([PREFIX_8BYTE]);
      default:
        return new Uint8Array([]);
    }
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    if (isBn(other) || isNumber(other)) {
      return super.eq(other);
    }
    return super.eq(this.registry.createTypeUnsafe("AccountIndex", [other]));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.toString();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.toJSON();
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    const length2 = GenericAccountIndex.calcLength(this);
    return encodeAddress(this.toU8a().subarray(0, length2), this.registry.chainSS58);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "AccountIndex";
  }
}
class GenericBlock extends Struct {
  constructor(registry, value) {
    super(registry, {
      header: "Header",
      // eslint-disable-next-line sort-keys
      extrinsics: "Vec<Extrinsic>"
    }, value);
  }
  /**
   * @description Encodes a content [[Hash]] for the block
   */
  get contentHash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description The [[Extrinsic]] contained in the block
   */
  get extrinsics() {
    return this.getT("extrinsics");
  }
  /**
   * @description Block/header [[Hash]]
   */
  get hash() {
    return this.header.hash;
  }
  /**
   * @description The [[Header]] of the block
   */
  get header() {
    return this.getT("header");
  }
}
function getArgsDef(registry, meta) {
  return meta.fields.reduce((result, { name, type }, index) => {
    result[name.unwrapOr(`param${index}`).toString()] = registry.createLookupType(type);
    return result;
  }, {});
}
function decodeCallViaObject(registry, value, _meta) {
  const { args, callIndex } = value;
  const lookupIndex = callIndex instanceof GenericCallIndex ? callIndex.toU8a() : callIndex;
  const meta = _meta || registry.findMetaCall(lookupIndex).meta;
  return {
    args,
    argsDef: getArgsDef(registry, meta),
    callIndex,
    meta
  };
}
function decodeCallViaU8a(registry, value, _meta) {
  const callIndex = registry.firstCallIndex.slice();
  callIndex.set(value.subarray(0, 2), 0);
  const meta = _meta || registry.findMetaCall(callIndex).meta;
  return {
    args: value.subarray(2),
    argsDef: getArgsDef(registry, meta),
    callIndex,
    meta
  };
}
function decodeCall(registry, value = new Uint8Array(), _meta) {
  if (isU8a(value) || isHex(value)) {
    return decodeCallViaU8a(registry, u8aToU8a(value), _meta);
  } else if (isObject$1(value) && value.callIndex && value.args) {
    return decodeCallViaObject(registry, value, _meta);
  }
  throw new Error(`Call: Cannot decode value '${value}' of type ${typeof value}`);
}
class GenericCallIndex extends U8aFixed {
  constructor(registry, value) {
    super(registry, value, 16);
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.toHex();
  }
}
class GenericCall extends Struct {
  constructor(registry, value, meta) {
    var __super = (...args) => {
      super(...args);
      __publicField(this, "_meta");
    };
    const decoded = decodeCall(registry, value, meta);
    try {
      __super(registry, {
        callIndex: GenericCallIndex,
        // eslint-disable-next-line sort-keys
        args: Struct.with(decoded.argsDef)
      }, decoded);
    } catch (error2) {
      let method = "unknown.unknown";
      try {
        const c = registry.findMetaCall(decoded.callIndex);
        method = `${c.section}.${c.method}`;
      } catch {
      }
      throw new Error(`Call: failed decoding ${method}:: ${error2.message}`);
    }
    this._meta = decoded.meta;
  }
  /**
   * @description The arguments for the function call
   */
  get args() {
    return [...this.getT("args").values()];
  }
  /**
   * @description The argument definitions
   */
  get argsDef() {
    return getArgsDef(this.registry, this.meta);
  }
  /**
   * @description The argument entries
   */
  get argsEntries() {
    return [...this.getT("args").entries()];
  }
  /**
   * @description The encoded `[sectionIndex, methodIndex]` identifier
   */
  get callIndex() {
    return this.getT("callIndex").toU8a();
  }
  /**
   * @description The encoded data
   */
  get data() {
    return this.getT("args").toU8a();
  }
  /**
   * @description The [[FunctionMetadata]]
   */
  get meta() {
    return this._meta;
  }
  /**
   * @description Returns the name of the method
   */
  get method() {
    return this.registry.findMetaCall(this.callIndex).method;
  }
  /**
   * @description Returns the module containing the method
   */
  get section() {
    return this.registry.findMetaCall(this.callIndex).section;
  }
  /**
   * @description Checks if the source matches this in type
   */
  is(other) {
    return other.callIndex[0] === this.callIndex[0] && other.callIndex[1] === this.callIndex[1];
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExpanded) {
    let call;
    try {
      call = this.registry.findMetaCall(this.callIndex);
    } catch {
    }
    return objectSpread({
      args: this.argsEntries.reduce((args, [n, a]) => objectSpread(args, { [n]: a.toHuman(isExpanded) }), {}),
      method: call == null ? void 0 : call.method,
      section: call == null ? void 0 : call.section
    }, isExpanded && call ? { docs: call.meta.docs.map((d) => d.toString()) } : null);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Call";
  }
}
function createValue(registry, type, value, asArray = true) {
  if (value && isFunction$1(value.unwrapOrDefault)) {
    return value;
  }
  return registry.createTypeUnsafe(type, [
    asArray ? isNull(value) || isUndefined(value) ? null : Array.isArray(value) ? value : [value] : value
  ]);
}
function decodeValue(registry, key, value) {
  return key === "ss58Format" ? createValue(registry, "Option<u32>", value, false) : key === "tokenDecimals" ? createValue(registry, "Option<Vec<u32>>", value) : key === "tokenSymbol" ? createValue(registry, "Option<Vec<Text>>", value) : key === "isEthereum" ? createValue(registry, "Bool", value, false) : value;
}
function decode(registry, value) {
  return (
    // allow decoding from a map as well (ourselves)
    (value && isFunction$1(value.entries) ? [...value.entries()] : Object.entries(value || {})).reduce((all2, [key, value2]) => {
      all2[key] = decodeValue(registry, key, value2);
      return all2;
    }, {
      isEthereum: registry.createTypeUnsafe("Bool", []),
      ss58Format: registry.createTypeUnsafe("Option<u32>", []),
      tokenDecimals: registry.createTypeUnsafe("Option<Vec<u32>>", []),
      tokenSymbol: registry.createTypeUnsafe("Option<Vec<Text>>", [])
    })
  );
}
class GenericChainProperties extends Json {
  constructor(registry, value) {
    super(registry, decode(registry, value));
  }
  /**
   * @description The chain uses Ethereum addresses
   */
  get isEthereum() {
    return this.getT("isEthereum");
  }
  /**
   * @description The chain ss58Format
   */
  get ss58Format() {
    return this.getT("ss58Format");
  }
  /**
   * @description The decimals for each of the tokens
   */
  get tokenDecimals() {
    return this.getT("tokenDecimals");
  }
  /**
   * @description The symbols for the tokens
   */
  get tokenSymbol() {
    return this.getT("tokenSymbol");
  }
}
const CID_AURA = /* @__PURE__ */ stringToU8a("aura");
const CID_BABE = /* @__PURE__ */ stringToU8a("BABE");
const CID_GRPA = /* @__PURE__ */ stringToU8a("FRNK");
const CID_POW = /* @__PURE__ */ stringToU8a("pow_");
const CID_NMBS = /* @__PURE__ */ stringToU8a("nmbs");
function getAuraAuthor(registry, bytes2, sessionValidators) {
  return sessionValidators[registry.createTypeUnsafe("RawAuraPreDigest", [bytes2.toU8a(true)]).slotNumber.mod(new BN(sessionValidators.length)).toNumber()];
}
function getBabeAuthor(registry, bytes2, sessionValidators) {
  const digest = registry.createTypeUnsafe("RawBabePreDigestCompat", [bytes2.toU8a(true)]);
  return sessionValidators[digest.value.toNumber()];
}
function getBytesAsAuthor(registry, bytes2) {
  return registry.createTypeUnsafe("AccountId", [bytes2]);
}
class GenericConsensusEngineId extends U8aFixed {
  constructor(registry, value) {
    super(registry, isNumber(value) ? bnToU8a(value, { isLe: false }) : value, 32);
  }
  /**
   * @description `true` if the engine matches aura
   */
  get isAura() {
    return this.eq(CID_AURA);
  }
  /**
   * @description `true` is the engine matches babe
   */
  get isBabe() {
    return this.eq(CID_BABE);
  }
  /**
   * @description `true` is the engine matches grandpa
   */
  get isGrandpa() {
    return this.eq(CID_GRPA);
  }
  /**
   * @description `true` is the engine matches pow
   */
  get isPow() {
    return this.eq(CID_POW);
  }
  /**
   * @description `true` is the engine matches nimbus
   */
  get isNimbus() {
    return this.eq(CID_NMBS);
  }
  /**
   * @description From the input bytes, decode into an author
   */
  extractAuthor(bytes2, sessionValidators) {
    if (sessionValidators == null ? void 0 : sessionValidators.length) {
      if (this.isAura) {
        return getAuraAuthor(this.registry, bytes2, sessionValidators);
      } else if (this.isBabe) {
        return getBabeAuthor(this.registry, bytes2, sessionValidators);
      }
    }
    if (this.isPow || this.isNimbus) {
      return getBytesAsAuthor(this.registry, bytes2);
    }
    return void 0;
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toString();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "ConsensusEngineId";
  }
  /**
   * @description Override the default toString to return a 4-byte string
   */
  toString() {
    return this.isAscii ? u8aToString(this) : u8aToHex(this);
  }
}
const ACCOUNT_ID_PREFIX$1 = new Uint8Array([255]);
function decodeString$1(registry, value) {
  const decoded = decodeAddress(value);
  return decoded.length === 32 ? registry.createTypeUnsafe("AccountId", [decoded]) : registry.createTypeUnsafe("AccountIndex", [u8aToBn(decoded)]);
}
function decodeU8a$3(registry, value) {
  if (value.length === 32) {
    return registry.createTypeUnsafe("AccountId", [value]);
  } else if (value[0] === 255) {
    return registry.createTypeUnsafe("AccountId", [value.subarray(1)]);
  }
  const [offset, length2] = GenericAccountIndex.readLength(value);
  return registry.createTypeUnsafe("AccountIndex", [u8aToBn(value.subarray(offset, offset + length2))]);
}
function decodeAddressOrIndex$1(registry, value) {
  return value instanceof GenericLookupSource ? value.inner : value instanceof GenericAccountId || value instanceof GenericAccountIndex ? value : isBn(value) || isNumber(value) || isBigInt(value) ? registry.createTypeUnsafe("AccountIndex", [value]) : Array.isArray(value) || isHex(value) || isU8a(value) ? decodeU8a$3(registry, u8aToU8a(value)) : decodeString$1(registry, value);
}
class GenericLookupSource extends AbstractBase {
  constructor(registry, value = new Uint8Array()) {
    super(registry, decodeAddressOrIndex$1(registry, value));
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    const rawLength = this._rawLength;
    return rawLength + // for 1 byte AccountIndexes, we are not adding a specific prefix
    (rawLength > 1 ? 1 : 0);
  }
  /**
   * @description The length of the raw value, either AccountIndex or AccountId
   */
  get _rawLength() {
    return this.inner instanceof GenericAccountIndex ? GenericAccountIndex.calcLength(this.inner) : this.inner.encodedLength;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    const value = this.inner.toU8a().subarray(0, this._rawLength);
    return {
      outer: [
        new Uint8Array(this.inner instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(value) : ACCOUNT_ID_PREFIX$1),
        value
      ]
    };
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex(this.toU8a());
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Address";
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    const encoded = this.inner.toU8a().subarray(0, this._rawLength);
    return isBare ? encoded : u8aConcat(this.inner instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(encoded) : ACCOUNT_ID_PREFIX$1, encoded);
  }
}
function decodeU8a$2(registry, u8a) {
  if ([0, 32].includes(u8a.length)) {
    return { Id: u8a };
  } else if (u8a.length === 20) {
    return { Address20: u8a };
  } else if (u8a.length <= 8) {
    return { Index: registry.createTypeUnsafe("AccountIndex", [u8a]).toNumber() };
  }
  return u8a;
}
function decodeMultiAny(registry, value) {
  if (value instanceof GenericAccountId) {
    return { Id: value };
  } else if (isU8a(value)) {
    return decodeU8a$2(registry, value);
  } else if (value instanceof GenericMultiAddress) {
    return value;
  } else if (value instanceof GenericAccountIndex || isBn(value) || isNumber(value)) {
    return { Index: isNumber(value) ? value : value.toNumber() };
  } else if (isString(value)) {
    return decodeU8a$2(registry, decodeAddress(value.toString()));
  }
  return value;
}
class GenericMultiAddress extends Enum {
  constructor(registry, value) {
    super(registry, {
      Id: "AccountId",
      Index: "Compact<AccountIndex>",
      Raw: "Bytes",
      // eslint-disable-next-line sort-keys
      Address32: "H256",
      // eslint-disable-next-line sort-keys
      Address20: "H160"
    }, decodeMultiAny(registry, value));
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    const { inner, outer = [] } = this.inner.inspect();
    return {
      inner,
      outer: [new Uint8Array([this.index]), ...outer]
    };
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.value.toString();
  }
}
const AYE_BITS = 128;
const NAY_BITS = 0;
const CON_MASK = 127;
const DEF_CONV = 0;
function decodeVoteBool(value) {
  return value ? new Uint8Array([AYE_BITS | DEF_CONV]) : new Uint8Array([NAY_BITS]);
}
function decodeVoteU8a(value) {
  return value.length ? value.subarray(0, 1) : new Uint8Array([NAY_BITS]);
}
function decodeVoteType(registry, value) {
  return new Uint8Array([
    (new bool(registry, value.aye).isTrue ? AYE_BITS : NAY_BITS) | registry.createTypeUnsafe("Conviction", [value.conviction || DEF_CONV]).index
  ]);
}
function decodeVote(registry, value) {
  if (isU8a(value)) {
    return decodeVoteU8a(value);
  } else if (isUndefined(value) || value instanceof Boolean || isBoolean(value)) {
    return decodeVoteBool(new bool(registry, value).isTrue);
  } else if (isNumber(value)) {
    return decodeVoteBool(value < 0);
  }
  return decodeVoteType(registry, value);
}
class GenericVote extends U8aFixed {
  constructor(registry, value) {
    const decoded = decodeVote(registry, value);
    super(registry, decoded, 8);
    __publicField(this, "__internal__aye");
    __publicField(this, "__internal__conviction");
    this.__internal__aye = (decoded[0] & AYE_BITS) === AYE_BITS;
    this.__internal__conviction = this.registry.createTypeUnsafe("Conviction", [decoded[0] & CON_MASK]);
  }
  /**
   * @description returns a V2 conviction
   */
  get conviction() {
    return this.__internal__conviction;
  }
  /**
   * @description true if the wrapped value is a positive vote
   */
  get isAye() {
    return this.__internal__aye;
  }
  /**
   * @description true if the wrapped value is a negative vote
   */
  get isNay() {
    return !this.isAye;
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExpanded) {
    return {
      conviction: this.conviction.toHuman(isExpanded),
      vote: this.isAye ? "Aye" : "Nay"
    };
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return {
      aye: this.isAye,
      conviction: this.conviction.toPrimitive()
    };
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Vote";
  }
}
function decodeAccountId(value) {
  if (isU8a(value) || Array.isArray(value)) {
    return u8aToU8a(value);
  } else if (isHex(value) || isEthereumAddress(value.toString())) {
    return hexToU8a(value.toString());
  } else if (isString(value)) {
    return u8aToU8a(value);
  }
  return value;
}
class GenericEthereumAccountId extends U8aFixed {
  constructor(registry, value = new Uint8Array()) {
    super(registry, decodeAccountId(value), 160);
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return !!other && super.eq(decodeAccountId(other));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.toString();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.toJSON();
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return ethereumEncode(this);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "AccountId";
  }
}
const ACCOUNT_ID_PREFIX = new Uint8Array([255]);
function decodeString(registry, value) {
  const decoded = decodeAddress(value);
  return decoded.length === 20 ? registry.createTypeUnsafe("EthereumAccountId", [decoded]) : registry.createTypeUnsafe("AccountIndex", [u8aToBn(decoded)]);
}
function decodeU8a$1(registry, value) {
  if (value.length === 20) {
    return registry.createTypeUnsafe("EthereumAccountId", [value]);
  } else if (value[0] === 255) {
    return registry.createTypeUnsafe("EthereumAccountId", [value.subarray(1)]);
  }
  const [offset, length2] = GenericAccountIndex.readLength(value);
  return registry.createTypeUnsafe("AccountIndex", [u8aToBn(value.subarray(offset, offset + length2))]);
}
function decodeAddressOrIndex(registry, value) {
  return value instanceof GenericEthereumLookupSource ? value.inner : value instanceof GenericEthereumAccountId || value instanceof GenericAccountIndex ? value : isU8a(value) || Array.isArray(value) || isHex(value) ? decodeU8a$1(registry, u8aToU8a(value)) : isBn(value) || isNumber(value) || isBigInt(value) ? registry.createTypeUnsafe("AccountIndex", [value]) : decodeString(registry, value);
}
class GenericEthereumLookupSource extends AbstractBase {
  constructor(registry, value = new Uint8Array()) {
    super(registry, decodeAddressOrIndex(registry, value));
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    const rawLength = this._rawLength;
    return rawLength + // for 1 byte AccountIndexes, we are not adding a specific prefix
    (rawLength > 1 ? 1 : 0);
  }
  /**
   * @description The length of the raw value, either AccountIndex or AccountId
   */
  get _rawLength() {
    return this.inner instanceof GenericAccountIndex ? GenericAccountIndex.calcLength(this.inner) : this.inner.encodedLength;
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex(this.toU8a());
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Address";
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    const encoded = this.inner.toU8a().subarray(0, this._rawLength);
    return isBare ? encoded : u8aConcat(this.inner instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(encoded) : ACCOUNT_ID_PREFIX, encoded);
  }
}
function decodeDataU8a(registry, value) {
  const indicator = value[0];
  if (!indicator) {
    return [void 0, void 0];
  } else if (indicator >= 1 && indicator <= 33) {
    const length2 = indicator - 1;
    const data = value.subarray(1, length2 + 1);
    return [registry.createTypeUnsafe("Raw", [data]), 1];
  } else if (indicator >= 34 && indicator <= 37) {
    return [value.subarray(1, 32 + 1), indicator - 32];
  }
  throw new Error(`Unable to decode Data, invalid indicator byte ${indicator}`);
}
function decodeData(registry, value) {
  if (isU8a(value) || isString(value)) {
    return decodeDataU8a(registry, u8aToU8a(value));
  } else if (!value) {
    return [void 0, void 0];
  }
  return [value, void 0];
}
class Data extends Enum {
  constructor(registry, value) {
    super(registry, {
      None: "Null",
      Raw: "Bytes",
      // eslint-disable-next-line sort-keys
      BlakeTwo256: "H256",
      Sha256: "H256",
      // eslint-disable-next-line sort-keys
      Keccak256: "H256",
      ShaThree256: "H256"
      // 5
    }, ...decodeData(registry, value));
    if (this.isRaw && this.asRaw.length > 32) {
      throw new Error("Data.Raw values are limited to a maximum length of 32 bytes");
    }
  }
  get asBlakeTwo256() {
    return this.value;
  }
  get asKeccak256() {
    return this.value;
  }
  get asRaw() {
    return this.value;
  }
  get asSha256() {
    return this.value;
  }
  get asShaThree256() {
    return this.value;
  }
  get isBlakeTwo256() {
    return this.index === 2;
  }
  get isKeccak256() {
    return this.index === 4;
  }
  get isNone() {
    return this.index === 0;
  }
  get isRaw() {
    return this.index === 1;
  }
  get isSha256() {
    return this.index === 3;
  }
  get isShaThree256() {
    return this.index === 5;
  }
  /**
   * @description The encoded length
   */
  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */
  toU8a() {
    if (this.index === 0) {
      return new Uint8Array(1);
    } else if (this.index === 1) {
      const data = this.value.toU8a(true);
      const length2 = Math.min(data.length, 32);
      const u8a2 = new Uint8Array(length2 + 1);
      u8a2.set([length2 + 1], 0);
      u8a2.set(data.subarray(0, length2), 1);
      return u8a2;
    }
    const u8a = new Uint8Array(33);
    u8a.set([this.index + 32], 0);
    u8a.set(this.value.toU8a(), 1);
    return u8a;
  }
}
const HASHER_MAP = {
  // opaque
  Blake2_128: [16, false],
  Blake2_128Concat: [16, true],
  Blake2_256: [32, false],
  Identity: [0, true],
  Twox128: [16, false],
  Twox256: [32, false],
  Twox64Concat: [8, true]
};
function decodeStorageKey(value) {
  if (isU8a(value) || !value || isString(value)) {
    return { key: value };
  } else if (value instanceof StorageKey) {
    return {
      key: value,
      method: value.method,
      section: value.section
    };
  } else if (isFunction$1(value)) {
    return {
      key: value(),
      method: value.method,
      section: value.section
    };
  } else if (Array.isArray(value)) {
    const [fn, args = []] = value;
    if (!isFunction$1(fn)) {
      throw new Error("Expected function input for key construction");
    }
    if (fn.meta && fn.meta.type.isMap) {
      const map2 = fn.meta.type.asMap;
      if (!Array.isArray(args) || args.length !== map2.hashers.length) {
        throw new Error(`Expected an array of ${map2.hashers.length} values as params to a Map query`);
      }
    }
    return {
      key: fn(...args),
      method: fn.method,
      section: fn.section
    };
  }
  throw new Error(`Unable to convert input ${value} to StorageKey`);
}
function decodeHashers(registry, value, hashers) {
  let offset = 32;
  const count = hashers.length;
  const result = new Array(count);
  for (let i = 0; i < count; i++) {
    const [hasher2, type] = hashers[i];
    const [hashLen, canDecode] = HASHER_MAP[hasher2.type];
    const decoded = canDecode ? registry.createTypeUnsafe(getSiName(registry.lookup, type), [value.subarray(offset + hashLen)]) : registry.createTypeUnsafe("Raw", [value.subarray(offset, offset + hashLen)]);
    offset += hashLen + (canDecode ? decoded.encodedLength : 0);
    result[i] = decoded;
  }
  return result;
}
function decodeArgsFromMeta(registry, value, meta) {
  if (!meta || !meta.type.isMap) {
    return [];
  }
  const { hashers, key } = meta.type.asMap;
  const keys = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple;
  return decodeHashers(registry, value, hashers.map((h, i) => [h, keys[i]]));
}
function getMeta(value) {
  if (value instanceof StorageKey) {
    return value.meta;
  } else if (isFunction$1(value)) {
    return value.meta;
  } else if (Array.isArray(value)) {
    const [fn] = value;
    return fn.meta;
  }
  return void 0;
}
function getType(registry, value) {
  if (value instanceof StorageKey) {
    return value.outputType;
  } else if (isFunction$1(value)) {
    return unwrapStorageType(registry, value.meta.type);
  } else if (Array.isArray(value)) {
    const [fn] = value;
    if (fn.meta) {
      return unwrapStorageType(registry, fn.meta.type);
    }
  }
  return "Raw";
}
class StorageKey extends Bytes {
  constructor(registry, value, override = {}) {
    const { key, method, section: section2 } = decodeStorageKey(value);
    super(registry, key);
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore This is assigned via this.decodeArgsFromMeta()
    __publicField(this, "__internal__args");
    __publicField(this, "__internal__meta");
    __publicField(this, "__internal__outputType");
    __publicField(this, "__internal__method");
    __publicField(this, "__internal__section");
    this.__internal__outputType = getType(registry, value);
    this.setMeta(getMeta(value), override.section || section2, override.method || method);
  }
  /**
   * @description Return the decoded arguments (applicable to map with decodable values)
   */
  get args() {
    return this.__internal__args;
  }
  /**
   * @description The metadata or `undefined` when not available
   */
  get meta() {
    return this.__internal__meta;
  }
  /**
   * @description The key method or `undefined` when not specified
   */
  get method() {
    return this.__internal__method;
  }
  /**
   * @description The output type
   */
  get outputType() {
    return this.__internal__outputType;
  }
  /**
   * @description The key section or `undefined` when not specified
   */
  get section() {
    return this.__internal__section;
  }
  is(key) {
    return key.section === this.section && key.method === this.method;
  }
  /**
   * @description Sets the meta for this key
   */
  setMeta(meta, section2, method) {
    this.__internal__meta = meta;
    this.__internal__method = method || this.__internal__method;
    this.__internal__section = section2 || this.__internal__section;
    if (meta) {
      this.__internal__outputType = unwrapStorageType(this.registry, meta.type);
    }
    try {
      this.__internal__args = decodeArgsFromMeta(this.registry, this.toU8a(true), meta);
    } catch {
    }
    return this;
  }
  /**
   * @description Returns the Human representation for this type
   */
  toHuman() {
    return this.__internal__args.length ? this.__internal__args.map((a) => a.toHuman()) : super.toHuman();
  }
  /**
   * @description Returns the raw type for this
   */
  toRawType() {
    return "StorageKey";
  }
}
const baseTypes = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  BitVec,
  Bool: bool,
  Bytes,
  Data,
  F32: f32,
  F64: f64,
  GenericAccountId,
  GenericAccountId32: GenericAccountId,
  GenericAccountId33,
  GenericAccountIndex,
  GenericAddress: GenericMultiAddress,
  GenericBlock,
  GenericCall,
  GenericChainProperties,
  GenericConsensusEngineId,
  GenericEthereumAccountId,
  GenericEthereumLookupSource,
  GenericEvent,
  GenericEventData,
  GenericExtrinsic,
  GenericExtrinsicEra,
  GenericExtrinsicPayload,
  GenericExtrinsicPayloadUnknown,
  GenericExtrinsicPayloadV4,
  GenericExtrinsicSignatureV4,
  GenericExtrinsicUnknown,
  GenericExtrinsicV4,
  GenericImmortalEra: ImmortalEra,
  GenericLookupSource,
  GenericMortalEra: MortalEra,
  GenericMultiAddress,
  GenericSignerPayload,
  GenericVote,
  I128: i128,
  I16: i16,
  I256: i256,
  I32: i32,
  I64: i64,
  I8: i8,
  ISize: isize,
  Null,
  OptionBool,
  StorageKey,
  Text,
  Type,
  U128: u128,
  U16: u16$1,
  U256: u256,
  U32: u32$2,
  U64: u64$2,
  U8: u8$1,
  USize: usize,
  bool,
  f32,
  f64,
  i128,
  i16,
  i256,
  i32,
  i64,
  i8,
  isize,
  u128,
  u16: u16$1,
  u256,
  u32: u32$2,
  u64: u64$2,
  u8: u8$1,
  usize
}, Symbol.toStringTag, { value: "Module" }));
function convert(fn) {
  return ({ name }) => fn(name);
}
const objectNameToCamel = /* @__PURE__ */ convert(stringCamelCase);
const objectNameToString = /* @__PURE__ */ convert((n) => n.toString());
function isTx(tx2, callIndex) {
  return tx2.callIndex[0] === callIndex[0] && tx2.callIndex[1] === callIndex[1];
}
function createUnchecked(registry, section2, callIndex, callMetadata) {
  const expectedArgs = callMetadata.fields;
  const funcName = stringCamelCase(callMetadata.name);
  const extrinsicFn = (...args) => {
    if (expectedArgs.length !== args.length) {
      throw new Error(`Extrinsic ${section2}.${funcName} expects ${expectedArgs.length} arguments, got ${args.length}.`);
    }
    return registry.createTypeUnsafe("Call", [{ args, callIndex }, callMetadata]);
  };
  extrinsicFn.is = (tx2) => isTx(tx2, callIndex);
  extrinsicFn.callIndex = callIndex;
  extrinsicFn.meta = callMetadata;
  extrinsicFn.method = funcName;
  extrinsicFn.section = section2;
  extrinsicFn.toJSON = () => callMetadata.toJSON();
  return extrinsicFn;
}
function filterCallsSome({ calls }) {
  return calls.isSome;
}
function createCallFunction(registry, lookup14, variant, sectionName, sectionIndex) {
  const { fields, index } = variant;
  const count = fields.length;
  const args = new Array(count);
  for (let i = 0; i < count; i++) {
    const { name, type, typeName } = fields[i];
    args[i] = objectSpread({
      name: stringCamelCase(name.unwrapOr(`param${i}`)),
      type: getSiName(lookup14, type)
    }, typeName.isSome ? { typeName: typeName.unwrap() } : null);
  }
  return createUnchecked(registry, sectionName, new Uint8Array([sectionIndex, index.toNumber()]), registry.createTypeUnsafe("FunctionMetadataLatest", [objectSpread({ args }, variant)]));
}
function decorateExtrinsics(registry, { lookup: lookup14, pallets }, version2) {
  const result = {};
  const filtered = pallets.filter(filterCallsSome);
  for (let i = 0, count = filtered.length; i < count; i++) {
    const { calls, index, name } = filtered[i];
    const sectionName = stringCamelCase(name);
    const sectionIndex = version2 >= 12 ? index.toNumber() : i;
    lazyMethod(result, sectionName, () => lazyVariants(lookup14, calls.unwrap(), objectNameToCamel, (variant) => createCallFunction(registry, lookup14, variant, sectionName, sectionIndex)));
  }
  return result;
}
function createStorageHasher(registry, hasher2) {
  if (hasher2.toNumber() >= 2) {
    return registry.createTypeUnsafe("StorageHasherV10", [hasher2.toNumber() + 1]);
  }
  return registry.createTypeUnsafe("StorageHasherV10", [hasher2]);
}
function createStorageType(registry, entryType) {
  if (entryType.isMap) {
    return [objectSpread({}, entryType.asMap, {
      hasher: createStorageHasher(registry, entryType.asMap.hasher)
    }), 1];
  }
  if (entryType.isDoubleMap) {
    return [objectSpread({}, entryType.asDoubleMap, {
      hasher: createStorageHasher(registry, entryType.asDoubleMap.hasher),
      key2Hasher: createStorageHasher(registry, entryType.asDoubleMap.key2Hasher)
    }), 2];
  }
  return [entryType.asPlain, 0];
}
function convertModule(registry, mod2) {
  const storage2 = mod2.storage.unwrapOr(null);
  return registry.createTypeUnsafe("ModuleMetadataV10", [objectSpread({}, mod2, {
    storage: storage2 ? objectSpread({}, storage2, {
      items: storage2.items.map((item) => objectSpread({}, item, {
        type: registry.createTypeUnsafe("StorageEntryTypeV10", createStorageType(registry, item.type))
      }))
    }) : null
  })]);
}
function toV10(registry, { modules }) {
  return registry.createTypeUnsafe("MetadataV10", [{
    modules: modules.map((mod2) => convertModule(registry, mod2))
  }]);
}
function toV11(registry, { modules }) {
  return registry.createTypeUnsafe("MetadataV11", [{
    // This is new in V11, pass V0 here - something non-existing, telling the API to use
    // the fallback for this information (on-chain detection)
    extrinsic: {
      signedExtensions: [],
      version: 0
    },
    modules
  }]);
}
function toV12(registry, { extrinsic, modules }) {
  return registry.createTypeUnsafe("MetadataV12", [{
    extrinsic,
    modules: modules.map((mod2) => registry.createTypeUnsafe("ModuleMetadataV12", [objectSpread({}, mod2, { index: 255 })]))
  }]);
}
function toV13(registry, v122) {
  return registry.createTypeUnsafe("MetadataV13", [v122]);
}
const typesAlias = {
  assets: {
    Approval: "AssetApproval",
    ApprovalKey: "AssetApprovalKey",
    Balance: "TAssetBalance",
    DestroyWitness: "AssetDestroyWitness"
  },
  babe: {
    EquivocationProof: "BabeEquivocationProof"
  },
  balances: {
    Status: "BalanceStatus"
  },
  beefy: {
    AuthorityId: "BeefyId"
  },
  contracts: {
    StorageKey: "ContractStorageKey"
  },
  electionProviderMultiPhase: {
    Phase: "ElectionPhase"
  },
  ethereum: {
    Block: "EthBlock",
    Header: "EthHeader",
    Receipt: "EthReceipt",
    Transaction: "EthTransaction",
    TransactionStatus: "EthTransactionStatus"
  },
  evm: {
    Account: "EvmAccount",
    Log: "EvmLog",
    Vicinity: "EvmVicinity"
  },
  grandpa: {
    Equivocation: "GrandpaEquivocation",
    EquivocationProof: "GrandpaEquivocationProof"
  },
  identity: {
    Judgement: "IdentityJudgement"
  },
  inclusion: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  paraDisputes: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  paraInclusion: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  paraScheduler: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  paraShared: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  parachains: {
    Id: "ParaId"
  },
  parasDisputes: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  parasInclusion: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  parasScheduler: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  parasShared: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  proposeParachain: {
    Proposal: "ParachainProposal"
  },
  proxy: {
    Announcement: "ProxyAnnouncement"
  },
  scheduler: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  shared: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  society: {
    Judgement: "SocietyJudgement",
    Vote: "SocietyVote"
  },
  staking: {
    Compact: "CompactAssignments"
  },
  treasury: {
    Proposal: "TreasuryProposal"
  },
  xcm: {
    AssetId: "XcmAssetId"
  },
  xcmPallet: {
    AssetId: "XcmAssetId"
  }
};
function getAliasTypes({ knownTypes: knownTypes2 }, section2) {
  var _a2;
  return {
    ...typesAlias[section2] ?? {},
    ...((_a2 = knownTypes2.typesAlias) == null ? void 0 : _a2[section2]) ?? {}
  };
}
const BOXES = [["<", ">"], ["<", ","], [",", ">"], ["(", ")"], ["(", ","], [",", ","], [",", ")"]];
function compatType(specs, _type) {
  const type = _type.toString();
  const index = specs.findIndex(({ def }) => def.HistoricMetaCompat === type);
  if (index !== -1) {
    return index;
  }
  return specs.push({
    def: {
      HistoricMetaCompat: type
    }
  }) - 1;
}
function compatTypes(specs, ...types2) {
  for (let i = 0, count = types2.length; i < count; i++) {
    compatType(specs, types2[i]);
  }
}
function makeTupleType(specs, entries) {
  return specs.push({
    def: {
      Tuple: entries
    }
  }) - 1;
}
function makeVariantType(modName, variantType, specs, variants) {
  return specs.push({
    def: {
      Variant: { variants }
    },
    path: [`pallet_${modName.toString()}`, "pallet", variantType]
  }) - 1;
}
function registerOriginCaller(registry, modules, metaVersion) {
  registry.register({
    OriginCaller: {
      _enum: modules.map((mod2, index) => [
        mod2.name.toString(),
        metaVersion >= 12 ? mod2.index.toNumber() : index
      ]).sort((a, b) => a[1] - b[1]).reduce((result, [name, index]) => {
        for (let i = Object.keys(result).length; i < index; i++) {
          result[`Empty${i}`] = "Null";
        }
        result[name] = knownOrigins[name] || "Null";
        return result;
      }, {})
    }
  });
}
function setTypeOverride(sectionTypes, types2) {
  types2.forEach((type) => {
    const override = Object.keys(sectionTypes).find((aliased) => type.eq(aliased));
    if (override) {
      type.setOverride(sectionTypes[override]);
    } else {
      const orig = type.toString();
      const alias2 = Object.entries(sectionTypes).reduce((result, [src2, dst]) => BOXES.reduce((result2, [a, z2]) => result2.replace(`${a}${src2}${z2}`, `${a}${dst}${z2}`), result), orig);
      if (orig !== alias2) {
        type.setOverride(alias2);
      }
    }
  });
}
function convertCalls(specs, registry, modName, calls, sectionTypes) {
  const variants = calls.map(({ args, docs, name }, index) => {
    setTypeOverride(sectionTypes, args.map(({ type }) => type));
    return registry.createTypeUnsafe("SiVariant", [{
      docs,
      fields: args.map(({ name: name2, type }) => registry.createTypeUnsafe("SiField", [{ name: name2, type: compatType(specs, type) }])),
      index,
      name
    }]);
  });
  return registry.createTypeUnsafe("PalletCallMetadataV14", [{
    type: makeVariantType(modName, "Call", specs, variants)
  }]);
}
function convertConstants(specs, registry, constants, sectionTypes) {
  return constants.map(({ docs, name, type, value }) => {
    setTypeOverride(sectionTypes, [type]);
    return registry.createTypeUnsafe("PalletConstantMetadataV14", [{
      docs,
      name,
      type: compatType(specs, type),
      value
    }]);
  });
}
function convertErrors(specs, registry, modName, errors, _sectionTypes) {
  const variants = errors.map(({ docs, name }, index) => registry.createTypeUnsafe("SiVariant", [{
    docs,
    fields: [],
    index,
    name
  }]));
  return registry.createTypeUnsafe("PalletErrorMetadataV14", [{
    type: makeVariantType(modName, "Error", specs, variants)
  }]);
}
function convertEvents(specs, registry, modName, events2, sectionTypes) {
  const variants = events2.map(({ args, docs, name }, index) => {
    setTypeOverride(sectionTypes, args);
    return registry.createTypeUnsafe("SiVariant", [{
      docs,
      fields: args.map((t) => registry.createTypeUnsafe("SiField", [{ type: compatType(specs, t) }])),
      index,
      name
    }]);
  });
  return registry.createTypeUnsafe("PalletEventMetadataV14", [{
    type: makeVariantType(modName, "Event", specs, variants)
  }]);
}
function createMapEntry(specs, registry, sectionTypes, { hashers, isLinked, isOptional, keys, value }) {
  setTypeOverride(sectionTypes, [value, ...Array.isArray(keys) ? keys : [keys]]);
  return registry.createTypeUnsafe("StorageEntryTypeV14", [{
    Map: {
      hashers,
      key: hashers.length === 1 ? compatType(specs, keys[0]) : makeTupleType(specs, keys.map((t) => compatType(specs, t))),
      value: isLinked ? compatType(specs, `(${isOptional ? `Option<${value.toString()}>` : value.toString()}, Linkage<${keys[0].toString()}>)`) : compatType(specs, value)
    }
  }]);
}
function convertStorage(specs, registry, { items, prefix: prefix2 }, sectionTypes) {
  return registry.createTypeUnsafe("PalletStorageMetadataV14", [{
    items: items.map(({ docs, fallback, modifier, name, type }) => {
      let entryType;
      if (type.isPlain) {
        const plain = type.asPlain;
        setTypeOverride(sectionTypes, [plain]);
        entryType = registry.createTypeUnsafe("StorageEntryTypeV14", [{
          Plain: compatType(specs, plain)
        }]);
      } else if (type.isMap) {
        const map2 = type.asMap;
        entryType = createMapEntry(specs, registry, sectionTypes, {
          hashers: [map2.hasher],
          isLinked: map2.linked.isTrue,
          isOptional: modifier.isOptional,
          keys: [map2.key],
          value: map2.value
        });
      } else if (type.isDoubleMap) {
        const dm = type.asDoubleMap;
        entryType = createMapEntry(specs, registry, sectionTypes, {
          hashers: [dm.hasher, dm.key2Hasher],
          isLinked: false,
          isOptional: modifier.isOptional,
          keys: [dm.key1, dm.key2],
          value: dm.value
        });
      } else {
        const nm = type.asNMap;
        entryType = createMapEntry(specs, registry, sectionTypes, {
          hashers: nm.hashers,
          isLinked: false,
          isOptional: modifier.isOptional,
          keys: nm.keyVec,
          value: nm.value
        });
      }
      return registry.createTypeUnsafe("StorageEntryMetadataV14", [{
        docs,
        fallback,
        modifier,
        name,
        type: entryType
      }]);
    }),
    prefix: prefix2
  }]);
}
function convertExtrinsic(registry, { signedExtensions, version: version2 }) {
  return registry.createTypeUnsafe("ExtrinsicMetadataV14", [{
    signedExtensions: signedExtensions.map((identifier2) => ({
      identifier: identifier2,
      type: 0
      // we don't map the fields at all
    })),
    type: 0,
    version: version2
  }]);
}
function createPallet(specs, registry, mod2, { calls, constants, errors, events: events2, storage: storage2 }) {
  const sectionTypes = getAliasTypes(registry, stringCamelCase(mod2.name));
  return registry.createTypeUnsafe("PalletMetadataV14", [{
    calls: calls && convertCalls(specs, registry, mod2.name, calls, sectionTypes),
    constants: convertConstants(specs, registry, constants, sectionTypes),
    errors: errors && convertErrors(specs, registry, mod2.name, errors),
    events: events2 && convertEvents(specs, registry, mod2.name, events2, sectionTypes),
    index: mod2.index,
    name: mod2.name,
    storage: storage2 && convertStorage(specs, registry, storage2, sectionTypes)
  }]);
}
function toV14(registry, v132, metaVersion) {
  const specs = [];
  compatTypes(specs, "Null", "u8", "u16", "u32", "u64");
  registerOriginCaller(registry, v132.modules, metaVersion);
  const extrinsic = convertExtrinsic(registry, v132.extrinsic);
  const pallets = v132.modules.map((mod2) => createPallet(specs, registry, mod2, {
    calls: mod2.calls.unwrapOr(null),
    constants: mod2.constants,
    errors: mod2.errors.length ? mod2.errors : null,
    events: mod2.events.unwrapOr(null),
    storage: mod2.storage.unwrapOr(null)
  }));
  return registry.createTypeUnsafe("MetadataV14", [{
    extrinsic,
    lookup: {
      types: specs.map((type, id) => registry.createTypeUnsafe("PortableType", [{ id, type }]))
    },
    pallets
  }]);
}
function toV15(registry, v142, _23) {
  var _a2;
  const unchecked = v142.lookup.paramTypes.SpRuntimeUncheckedExtrinsic;
  return registry.createTypeUnsafe("MetadataV15", [
    objectSpread({}, v142, {
      extrinsic: registry.createTypeUnsafe("ExtrinsicMetadataV15", [
        objectSpread({}, v142.extrinsic, {
          addressType: unchecked == null ? void 0 : unchecked[0].type.unwrapOr(0),
          callType: unchecked == null ? void 0 : unchecked[1].type.unwrapOr(0),
          extraType: unchecked == null ? void 0 : unchecked[3].type.unwrapOr(0),
          signatureType: unchecked == null ? void 0 : unchecked[2].type.unwrapOr(0)
        })
      ]),
      outerEnums: registry.createTypeUnsafe("OuterEnums15", [{
        // FIXME We need to extract & add the errorType in here
        // (these doesn't seem to be an esay way to detect & extract it)
        callType: unchecked == null ? void 0 : unchecked[1].type.unwrapOr(0),
        eventType: (_a2 = v142.lookup.paramTypes.FrameSystemEventRecord) == null ? void 0 : _a2[0].type.unwrapOr(0)
      }])
    })
  ]);
}
function toLatest(_registry, v152, _metaVersion) {
  return v152;
}
const MAGIC_NUMBER = 1635018093;
class MagicNumber extends u32$2 {
  constructor(registry, value) {
    super(registry, value);
    if (!this.isEmpty && !this.eq(MAGIC_NUMBER)) {
      throw new Error(`MagicNumber mismatch: expected ${registry.createTypeUnsafe("u32", [MAGIC_NUMBER]).toHex()}, found ${this.toHex()}`);
    }
  }
}
const KNOWN_VERSIONS = [15, 14, 13, 12, 11, 10, 9];
const LATEST_VERSION = KNOWN_VERSIONS[0];
const TO_CALLS_VERSION = 14;
class MetadataVersioned extends Struct {
  constructor(registry, value) {
    super(registry, {
      magicNumber: MagicNumber,
      metadata: "MetadataAll"
    }, value);
    __publicField(this, "__internal__converted", /* @__PURE__ */ new Map());
    __publicField(this, "__internal__assertVersion", (version2) => {
      if (this.version > version2) {
        throw new Error(`Cannot convert metadata from version ${this.version} to ${version2}`);
      }
      return this.version === version2;
    });
    __publicField(this, "__internal__getVersion", (version2, fromPrev) => {
      if (version2 !== "latest" && this.__internal__assertVersion(version2)) {
        const asCurr = `asV${version2}`;
        return this.__internal__metadata()[asCurr];
      }
      if (!this.__internal__converted.has(version2)) {
        const asPrev = version2 === "latest" ? `asV${LATEST_VERSION}` : `asV${version2 - 1}`;
        this.__internal__converted.set(version2, fromPrev(this.registry, this[asPrev], this.version));
      }
      return this.__internal__converted.get(version2);
    });
    /**
     * @description the metadata wrapped
     */
    __publicField(this, "__internal__metadata", () => {
      return this.getT("metadata");
    });
  }
  /**
   * @description Returns the wrapped metadata as a limited calls-only (latest) version
   */
  get asCallsOnly() {
    return new MetadataVersioned(this.registry, {
      magicNumber: this.magicNumber,
      metadata: this.registry.createTypeUnsafe("MetadataAll", [toCallsOnly(this.registry, this.asLatest), TO_CALLS_VERSION])
    });
  }
  /**
   * @description Returns the wrapped metadata as a V9 object
   */
  get asV9() {
    this.__internal__assertVersion(9);
    return this.__internal__metadata().asV9;
  }
  /**
   * @description Returns the wrapped values as a V10 object
   */
  get asV10() {
    return this.__internal__getVersion(10, toV10);
  }
  /**
   * @description Returns the wrapped values as a V11 object
   */
  get asV11() {
    return this.__internal__getVersion(11, toV11);
  }
  /**
   * @description Returns the wrapped values as a V12 object
   */
  get asV12() {
    return this.__internal__getVersion(12, toV12);
  }
  /**
   * @description Returns the wrapped values as a V13 object
   */
  get asV13() {
    return this.__internal__getVersion(13, toV13);
  }
  /**
   * @description Returns the wrapped values as a V14 object
   */
  get asV14() {
    return this.__internal__getVersion(14, toV14);
  }
  /**
   * @description Returns the wrapped values as a V14 object
   */
  get asV15() {
    return this.__internal__getVersion(15, toV15);
  }
  /**
   * @description Returns the wrapped values as a latest version object
   */
  get asLatest() {
    return this.__internal__getVersion("latest", toLatest);
  }
  /**
   * @description The magicNumber for the Metadata (known constant)
   */
  get magicNumber() {
    return this.getT("magicNumber");
  }
  /**
   * @description the metadata version this structure represents
   */
  get version() {
    return this.__internal__metadata().index;
  }
  getUniqTypes(throwError) {
    return getUniqTypes(this.registry, this.asLatest, throwError);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return super.toJSON();
  }
}
const EMPTY_METADATA = new Uint8Array([109, 101, 116, 97, 9]);
const VERSION_IDX = EMPTY_METADATA.length - 1;
function decodeU8a(registry, u8a) {
  if (u8a.length === 0) {
    return EMPTY_METADATA;
  } else if (u8a[VERSION_IDX] === 9) {
    try {
      return new MetadataVersioned(registry, u8a);
    } catch {
      u8a[VERSION_IDX] = 10;
    }
  }
  return u8a;
}
class Metadata extends MetadataVersioned {
  constructor(registry, value) {
    super(registry, isU8a(value) || isString(value) ? decodeU8a(registry, u8aToU8a(value)) : value);
  }
}
function decorateConstants(registry, { pallets }, _version) {
  const result = {};
  for (let i = 0, count = pallets.length; i < count; i++) {
    const { constants, name } = pallets[i];
    if (!constants.isEmpty) {
      lazyMethod(result, stringCamelCase(name), () => lazyMethods({}, constants, (constant) => {
        const codec = registry.createTypeUnsafe(registry.createLookupType(constant.type), [hexToU8a(constant.value.toHex())]);
        codec.meta = constant;
        return codec;
      }, objectNameToCamel));
    }
  }
  return result;
}
function variantToMeta(lookup14, variant) {
  return objectSpread({ args: variant.fields.map(({ type }) => lookup14.getTypeDef(type).type) }, variant);
}
function decorateErrors(registry, { lookup: lookup14, pallets }, version2) {
  const result = {};
  for (let i = 0, count = pallets.length; i < count; i++) {
    const { errors, index, name } = pallets[i];
    if (errors.isSome) {
      const sectionIndex = version2 >= 12 ? index.toNumber() : i;
      lazyMethod(result, stringCamelCase(name), () => lazyVariants(lookup14, errors.unwrap(), objectNameToString, (variant) => ({
        // We sprinkle in isCodec & isU8a to ensure we are dealing with the correct objects
        is: (errorMod) => isCodec(errorMod) && isCodec(errorMod.index) && errorMod.index.eq(sectionIndex) && (isU8a(errorMod.error) ? errorMod.error[0] === variant.index.toNumber() : isCodec(errorMod.error) && errorMod.error.eq(variant.index)),
        meta: registry.createTypeUnsafe("ErrorMetadataLatest", [variantToMeta(lookup14, variant)])
      })));
    }
  }
  return result;
}
function filterEventsSome({ events: events2 }) {
  return events2.isSome;
}
function decorateEvents(registry, { lookup: lookup14, pallets }, version2) {
  const result = {};
  const filtered = pallets.filter(filterEventsSome);
  for (let i = 0, count = filtered.length; i < count; i++) {
    const { events: events2, index, name } = filtered[i];
    const sectionIndex = version2 >= 12 ? index.toNumber() : i;
    lazyMethod(result, stringCamelCase(name), () => lazyVariants(lookup14, events2.unwrap(), objectNameToString, (variant) => ({
      // We sprinkle in isCodec & isU8a to ensure we are dealing with the correct objects
      is: (eventRecord) => isCodec(eventRecord) && isU8a(eventRecord.index) && sectionIndex === eventRecord.index[0] && variant.index.eq(eventRecord.index[1]),
      meta: registry.createTypeUnsafe("EventMetadataLatest", [variantToMeta(lookup14, variant)])
    })));
  }
  return result;
}
const DEFAULT_FN = (data) => xxhashAsU8a(data, 128);
const HASHERS = {
  Blake2_128: (data) => (
    // eslint-disable-line camelcase
    blake2AsU8a(data, 128)
  ),
  Blake2_128Concat: (data) => (
    // eslint-disable-line camelcase
    u8aConcat(blake2AsU8a(data, 128), u8aToU8a(data))
  ),
  Blake2_256: (data) => (
    // eslint-disable-line camelcase
    blake2AsU8a(data, 256)
  ),
  Identity: (data) => u8aToU8a(data),
  Twox128: (data) => xxhashAsU8a(data, 128),
  Twox256: (data) => xxhashAsU8a(data, 256),
  Twox64Concat: (data) => u8aConcat(xxhashAsU8a(data, 64), u8aToU8a(data))
};
function getHasher(hasher2) {
  return HASHERS[hasher2.type] || DEFAULT_FN;
}
const NO_RAW_ARGS = {
  args: [],
  hashers: [],
  keys: []
};
function filterDefined(a) {
  return !isUndefined(a);
}
function assertArgs({ method, section: section2 }, { args, keys }) {
  if (!Array.isArray(args)) {
    throw new Error(`Call to ${stringCamelCase(section2 || "unknown")}.${stringCamelCase(method || "unknown")} needs ${keys.length} arguments`);
  } else if (args.filter(filterDefined).length !== keys.length) {
    throw new Error(`Call to ${stringCamelCase(section2 || "unknown")}.${stringCamelCase(method || "unknown")} needs ${keys.length} arguments, found [${args.join(", ")}]`);
  }
}
function createKeyRawParts(registry, itemFn, { args, hashers, keys }) {
  const count = keys.length;
  const extra = new Array(count);
  for (let i = 0; i < count; i++) {
    extra[i] = getHasher(hashers[i])(registry.createTypeUnsafe(registry.createLookupType(keys[i]), [args[i]]).toU8a());
  }
  return [
    [
      xxhashAsU8a(itemFn.prefix, 128),
      xxhashAsU8a(itemFn.method, 128)
    ],
    extra
  ];
}
function createKeyInspect(registry, itemFn, args) {
  assertArgs(itemFn, args);
  const { meta } = itemFn;
  const [prefix2, extra] = createKeyRawParts(registry, itemFn, args);
  let types2 = [];
  if (meta.type.isMap) {
    const { hashers, key } = meta.type.asMap;
    types2 = hashers.length === 1 ? [`${hashers[0].type}(${getSiName(registry.lookup, key)})`] : registry.lookup.getSiType(key).def.asTuple.map((k, i) => `${hashers[i].type}(${getSiName(registry.lookup, k)})`);
  }
  const names = ["module", "method"].concat(...args.args.map((_23, i) => types2[i]));
  return {
    inner: prefix2.concat(...extra).map((v, i) => ({ name: names[i], outer: [v] }))
  };
}
function createKeyRaw(registry, itemFn, args) {
  const [prefix2, extra] = createKeyRawParts(registry, itemFn, args);
  return u8aConcat(...prefix2, ...extra);
}
function createKey(registry, itemFn, args) {
  assertArgs(itemFn, args);
  return compactAddLength(createKeyRaw(registry, itemFn, args));
}
function createStorageInspect(registry, itemFn, options) {
  const { meta: { type } } = itemFn;
  return (...args) => {
    if (type.isPlain) {
      return options.skipHashing ? { inner: [], name: "wellKnown", outer: [u8aToU8a(options.key)] } : createKeyInspect(registry, itemFn, NO_RAW_ARGS);
    }
    const { hashers, key } = type.asMap;
    return hashers.length === 1 ? createKeyInspect(registry, itemFn, { args, hashers, keys: [key] }) : createKeyInspect(registry, itemFn, { args, hashers, keys: registry.lookup.getSiType(key).def.asTuple });
  };
}
function createStorageFn(registry, itemFn, options) {
  const { meta: { type } } = itemFn;
  let cacheKey = null;
  return (...args) => {
    if (type.isPlain) {
      if (!cacheKey) {
        cacheKey = options.skipHashing ? compactAddLength(u8aToU8a(options.key)) : createKey(registry, itemFn, NO_RAW_ARGS);
      }
      return cacheKey;
    }
    const { hashers, key } = type.asMap;
    return hashers.length === 1 ? createKey(registry, itemFn, { args, hashers, keys: [key] }) : createKey(registry, itemFn, { args, hashers, keys: registry.lookup.getSiType(key).def.asTuple });
  };
}
function createWithMeta(registry, itemFn, options) {
  const { meta, method, prefix: prefix2, section: section2 } = itemFn;
  const storageFn = createStorageFn(registry, itemFn, options);
  storageFn.inspect = createStorageInspect(registry, itemFn, options);
  storageFn.meta = meta;
  storageFn.method = stringCamelCase(method);
  storageFn.prefix = prefix2;
  storageFn.section = section2;
  storageFn.toJSON = () => objectSpread({ storage: { method, prefix: prefix2, section: section2 } }, meta.toJSON());
  return storageFn;
}
function extendHeadMeta(registry, { meta: { docs, name, type }, section: section2 }, { method }, iterFn) {
  const meta = registry.createTypeUnsafe("StorageEntryMetadataLatest", [{
    docs,
    fallback: registry.createTypeUnsafe("Bytes", []),
    modifier: registry.createTypeUnsafe("StorageEntryModifierLatest", [1]),
    name,
    type: registry.createTypeUnsafe("StorageEntryTypeLatest", [type.asMap.key, 0])
  }]);
  iterFn.meta = meta;
  const fn = (...args) => registry.createTypeUnsafe("StorageKey", [iterFn(...args), { method, section: section2 }]);
  fn.meta = meta;
  return fn;
}
function extendPrefixedMap(registry, itemFn, storageFn) {
  const { meta: { type }, method, section: section2 } = itemFn;
  storageFn.iterKey = extendHeadMeta(registry, itemFn, storageFn, (...args) => {
    if (args.length && (type.isPlain || args.length >= type.asMap.hashers.length)) {
      throw new Error(`Iteration of ${stringCamelCase(section2 || "unknown")}.${stringCamelCase(method || "unknown")} needs arguments to be at least one less than the full arguments, found [${args.join(", ")}]`);
    }
    if (args.length) {
      if (type.isMap) {
        const { hashers, key } = type.asMap;
        const keysVec = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple;
        return new Raw(registry, createKeyRaw(registry, itemFn, { args, hashers: hashers.slice(0, args.length), keys: keysVec.slice(0, args.length) }));
      }
    }
    return new Raw(registry, createKeyRaw(registry, itemFn, NO_RAW_ARGS));
  });
  return storageFn;
}
function createFunction(registry, itemFn, options) {
  const { meta: { type } } = itemFn;
  const storageFn = createWithMeta(registry, itemFn, options);
  if (type.isMap) {
    extendPrefixedMap(registry, itemFn, storageFn);
  }
  storageFn.keyPrefix = (...args) => storageFn.iterKey && storageFn.iterKey(...args) || compactStripLength(storageFn())[1];
  return storageFn;
}
function findSiPrimitive(registry, _prim) {
  const prim = _prim.toLowerCase();
  return registry.lookup.types.find((t) => t.type.def.isPrimitive && t.type.def.asPrimitive.toString().toLowerCase() === prim || t.type.def.isHistoricMetaCompat && t.type.def.asHistoricMetaCompat.toString().toLowerCase() === prim);
}
function findSiType(registry, orig) {
  let portable = findSiPrimitive(registry, orig);
  if (!portable && orig === "Bytes") {
    const u83 = findSiPrimitive(registry, "u8");
    if (u83) {
      portable = registry.lookup.types.find((t) => t.type.def.isSequence && t.type.def.asSequence.type.eq(u83.id) || t.type.def.isHistoricMetaCompat && t.type.def.asHistoricMetaCompat.eq(orig));
    }
  }
  if (!portable) {
    console.warn(`Unable to map ${orig} to a lookup index`);
  }
  return portable;
}
function createRuntimeFunction({ method, prefix: prefix2, section: section2 }, key, { docs, type }) {
  return (registry) => {
    var _a2;
    return createFunction(registry, {
      meta: registry.createTypeUnsafe("StorageEntryMetadataLatest", [{
        docs: registry.createTypeUnsafe("Vec<Text>", [[docs]]),
        modifier: registry.createTypeUnsafe("StorageEntryModifierLatest", ["Required"]),
        name: registry.createTypeUnsafe("Text", [method]),
        toJSON: () => key,
        type: registry.createTypeUnsafe("StorageEntryTypeLatest", [{ Plain: ((_a2 = findSiType(registry, type)) == null ? void 0 : _a2.id) || 0 }])
      }]),
      method,
      prefix: prefix2,
      section: section2
    }, { key, skipHashing: true });
  };
}
const prefix = "Substrate";
const section = "substrate";
function createSubstrateFn(method, key, meta) {
  return createRuntimeFunction({ method, prefix, section }, key, meta);
}
const substrate = {
  changesTrieConfig: createSubstrateFn("changesTrieConfig", ":changes_trie", {
    docs: "Changes trie configuration is stored under this key.",
    type: "u32"
  }),
  childStorageKeyPrefix: createSubstrateFn("childStorageKeyPrefix", ":child_storage:", {
    docs: "Prefix of child storage keys.",
    type: "u32"
  }),
  code: createSubstrateFn("code", ":code", {
    docs: "Wasm code of the runtime.",
    type: "Bytes"
  }),
  extrinsicIndex: createSubstrateFn("extrinsicIndex", ":extrinsic_index", {
    docs: "Current extrinsic index (u32) is stored under this key.",
    type: "u32"
  }),
  heapPages: createSubstrateFn("heapPages", ":heappages", {
    docs: "Number of wasm linear memory pages required for execution of the runtime.",
    type: "u64"
  }),
  intrablockEntropy: createSubstrateFn("intrablockEntropy", ":intrablock_entropy", {
    docs: "Current intra-block entropy (a universally unique `[u8; 32]` value) is stored here.",
    type: "[u8; 32]"
  })
};
function getStorage(registry) {
  const storage2 = {};
  const entries = Object.entries(substrate);
  for (let e = 0, count = entries.length; e < count; e++) {
    storage2[entries[e][0]] = entries[e][1](registry);
  }
  return { substrate: storage2 };
}
const VERSION_NAME = "palletVersion";
const VERSION_KEY = ":__STORAGE_VERSION__:";
const VERSION_DOCS = { docs: "Returns the current pallet version from storage", type: "u16" };
function decorateStorage(registry, { pallets }, _metaVersion) {
  const result = getStorage(registry);
  for (let i = 0, count = pallets.length; i < count; i++) {
    const { name, storage: storage2 } = pallets[i];
    if (storage2.isSome) {
      const section2 = stringCamelCase(name);
      const { items, prefix: _prefix } = storage2.unwrap();
      const prefix2 = _prefix.toString();
      lazyMethod(result, section2, () => lazyMethods({
        palletVersion: createRuntimeFunction({ method: VERSION_NAME, prefix: prefix2, section: section2 }, createKeyRaw(registry, { method: VERSION_KEY, prefix: name.toString() }, NO_RAW_ARGS), VERSION_DOCS)(registry)
      }, items, (meta) => createFunction(registry, { meta, method: meta.name.toString(), prefix: prefix2, section: section2 }, {}), objectNameToCamel));
    }
  }
  return result;
}
function expandMetadata(registry, metadata) {
  if (!(metadata instanceof Metadata)) {
    throw new Error("You need to pass a valid Metadata instance to Decorated");
  }
  const latest2 = metadata.asLatest;
  const version2 = metadata.version;
  return {
    consts: decorateConstants(registry, latest2),
    errors: decorateErrors(registry, latest2, version2),
    events: decorateEvents(registry, latest2, version2),
    query: decorateStorage(registry, latest2),
    registry,
    tx: decorateExtrinsics(registry, latest2, version2)
  };
}
const DEFAULT_FIRST_CALL_IDX = new Uint8Array(2);
const l$8 = logger("registry");
function sortDecimalStrings(a, b) {
  return parseInt(a, 10) - parseInt(b, 10);
}
function valueToString(v) {
  return v.toString();
}
function getFieldArgs(lookup14, fields) {
  const count = fields.length;
  const args = new Array(count);
  for (let i = 0; i < count; i++) {
    args[i] = lookup14.getTypeDef(fields[i].type).type;
  }
  return args;
}
function clearRecord(record) {
  const keys = Object.keys(record);
  for (let i = 0, count = keys.length; i < count; i++) {
    delete record[keys[i]];
  }
}
function getVariantStringIdx({ index }) {
  return index.toString();
}
function injectErrors(_23, { lookup: lookup14, pallets }, version2, result) {
  clearRecord(result);
  for (let i = 0, count = pallets.length; i < count; i++) {
    const { errors, index, name } = pallets[i];
    if (errors.isSome) {
      const sectionName = stringCamelCase(name);
      lazyMethod(result, version2 >= 12 ? index.toNumber() : i, () => lazyVariants(lookup14, errors.unwrap(), getVariantStringIdx, ({ docs, fields, index: index2, name: name2 }) => ({
        args: getFieldArgs(lookup14, fields),
        docs: docs.map(valueToString),
        fields,
        index: index2.toNumber(),
        method: name2.toString(),
        name: name2.toString(),
        section: sectionName
      })));
    }
  }
}
function injectEvents(registry, { lookup: lookup14, pallets }, version2, result) {
  const filtered = pallets.filter(filterEventsSome);
  clearRecord(result);
  for (let i = 0, count = filtered.length; i < count; i++) {
    const { events: events2, index, name } = filtered[i];
    lazyMethod(result, version2 >= 12 ? index.toNumber() : i, () => lazyVariants(lookup14, events2.unwrap(), getVariantStringIdx, (variant) => {
      const meta = registry.createType("EventMetadataLatest", objectSpread({}, variant, { args: getFieldArgs(lookup14, variant.fields) }));
      return class extends GenericEventData {
        constructor(registry2, value) {
          super(registry2, value, meta, stringCamelCase(name), variant.name.toString());
        }
      };
    }));
  }
}
function injectExtrinsics(registry, { lookup: lookup14, pallets }, version2, result, mapping2) {
  const filtered = pallets.filter(filterCallsSome);
  clearRecord(result);
  clearRecord(mapping2);
  for (let i = 0, count = filtered.length; i < count; i++) {
    const { calls, index, name } = filtered[i];
    const sectionIndex = version2 >= 12 ? index.toNumber() : i;
    const sectionName = stringCamelCase(name);
    const allCalls = calls.unwrap();
    lazyMethod(result, sectionIndex, () => lazyVariants(lookup14, allCalls, getVariantStringIdx, (variant) => createCallFunction(registry, lookup14, variant, sectionName, sectionIndex)));
    const { path: path2 } = registry.lookup.getSiType(allCalls.type);
    const palletIdx = path2.findIndex((v) => v.eq("pallet"));
    if (palletIdx !== -1) {
      const name2 = stringCamelCase(path2.slice(0, palletIdx).map((p, i2) => i2 === 0 ? p.replace(/^(frame|pallet)_/, "") : p).join(" "));
      if (!mapping2[name2]) {
        mapping2[name2] = [sectionName];
      } else {
        mapping2[name2].push(sectionName);
      }
    }
  }
}
function extractProperties(registry, metadata) {
  const original = registry.getChainProperties();
  const constants = decorateConstants(registry, metadata.asLatest);
  const ss58Format = constants["system"] && (constants["system"]["sS58Prefix"] || constants["system"]["ss58Prefix"]);
  if (!ss58Format) {
    return original;
  }
  const { isEthereum, tokenDecimals, tokenSymbol } = original || {};
  return registry.createTypeUnsafe("ChainProperties", [{ isEthereum, ss58Format, tokenDecimals, tokenSymbol }]);
}
class TypeRegistry {
  constructor(createdAtHash) {
    __publicField(this, "__internal__chainProperties");
    __publicField(this, "__internal__classes", /* @__PURE__ */ new Map());
    __publicField(this, "__internal__definitions", /* @__PURE__ */ new Map());
    __publicField(this, "__internal__firstCallIndex", null);
    __publicField(this, "__internal__hasher", blake2AsU8a);
    __publicField(this, "__internal__knownTypes", {});
    __publicField(this, "__internal__lookup");
    __publicField(this, "__internal__metadata");
    __publicField(this, "__internal__metadataVersion", 0);
    __publicField(this, "__internal__signedExtensions", fallbackExtensions);
    __publicField(this, "__internal__unknownTypes", /* @__PURE__ */ new Map());
    __publicField(this, "__internal__userExtensions");
    __publicField(this, "__internal__knownDefaults");
    __publicField(this, "__internal__knownDefaultsEntries");
    __publicField(this, "__internal__knownDefinitions");
    __publicField(this, "__internal__metadataCalls", {});
    __publicField(this, "__internal__metadataErrors", {});
    __publicField(this, "__internal__metadataEvents", {});
    __publicField(this, "__internal__moduleMap", {});
    __publicField(this, "createdAtHash");
    __publicField(this, "__internal__registerObject", (obj) => {
      const entries = Object.entries(obj);
      for (let e = 0, count = entries.length; e < count; e++) {
        const [name, type] = entries[e];
        if (isFunction$1(type)) {
          this.__internal__classes.set(name, type);
        } else {
          const def = isString(type) ? type : stringify$1(type);
          if (name === def) {
            throw new Error(`Unable to register circular ${name} === ${def}`);
          }
          if (this.__internal__classes.has(name)) {
            this.__internal__classes.delete(name);
          }
          this.__internal__definitions.set(name, def);
        }
      }
    });
    // register alias types alongside the portable/lookup setup
    // (we don't combine this into setLookup since that would/could
    // affect stand-along lookups, such as ABIs which don't have
    // actual on-chain metadata)
    __publicField(this, "__internal__registerLookup", (lookup14) => {
      this.setLookup(lookup14);
      let Weight = null;
      if (this.hasType("SpWeightsWeightV2Weight")) {
        const weightv2 = this.createType("SpWeightsWeightV2Weight");
        Weight = weightv2.refTime && weightv2.proofSize ? "SpWeightsWeightV2Weight" : "WeightV1";
      } else if (!isBn(this.createType("Weight"))) {
        Weight = "WeightV1";
      }
      if (Weight) {
        this.register({ Weight });
      }
    });
    this.__internal__knownDefaults = objectSpread({ Json, Metadata, PortableRegistry, Raw }, baseTypes);
    this.__internal__knownDefaultsEntries = Object.entries(this.__internal__knownDefaults);
    this.__internal__knownDefinitions = typeDefinitions;
    const allKnown2 = Object.values(this.__internal__knownDefinitions);
    for (let i = 0, count = allKnown2.length; i < count; i++) {
      this.register(allKnown2[i].types);
    }
    if (createdAtHash) {
      this.createdAtHash = this.createType("BlockHash", createdAtHash);
    }
  }
  get chainDecimals() {
    var _a2;
    if ((_a2 = this.__internal__chainProperties) == null ? void 0 : _a2.tokenDecimals.isSome) {
      const allDecimals = this.__internal__chainProperties.tokenDecimals.unwrap();
      if (allDecimals.length) {
        return allDecimals.map((b) => b.toNumber());
      }
    }
    return [12];
  }
  get chainIsEthereum() {
    var _a2;
    return ((_a2 = this.__internal__chainProperties) == null ? void 0 : _a2.isEthereum.isTrue) || false;
  }
  get chainSS58() {
    var _a2;
    return ((_a2 = this.__internal__chainProperties) == null ? void 0 : _a2.ss58Format.isSome) ? this.__internal__chainProperties.ss58Format.unwrap().toNumber() : void 0;
  }
  get chainTokens() {
    var _a2;
    if ((_a2 = this.__internal__chainProperties) == null ? void 0 : _a2.tokenSymbol.isSome) {
      const allTokens = this.__internal__chainProperties.tokenSymbol.unwrap();
      if (allTokens.length) {
        return allTokens.map(valueToString);
      }
    }
    return [formatBalance.getDefaults().unit];
  }
  get firstCallIndex() {
    return this.__internal__firstCallIndex || DEFAULT_FIRST_CALL_IDX;
  }
  /**
   * @description Returns true if the type is in a Compat format
   */
  isLookupType(value) {
    return /Lookup\d+$/.test(value);
  }
  /**
   * @description Creates a lookup string from the supplied id
   */
  createLookupType(lookupId) {
    return `Lookup${typeof lookupId === "number" ? lookupId : lookupId.toNumber()}`;
  }
  get knownTypes() {
    return this.__internal__knownTypes;
  }
  get lookup() {
    return assertReturn(this.__internal__lookup, "PortableRegistry has not been set on this registry");
  }
  get metadata() {
    return assertReturn(this.__internal__metadata, "Metadata has not been set on this registry");
  }
  get unknownTypes() {
    return [...this.__internal__unknownTypes.keys()];
  }
  get signedExtensions() {
    return this.__internal__signedExtensions;
  }
  clearCache() {
    this.__internal__classes = /* @__PURE__ */ new Map();
  }
  /**
   * @describe Creates an instance of the class
   */
  createClass(type) {
    return createClassUnsafe(this, type);
  }
  /**
   * @describe Creates an instance of the class
   */
  createClassUnsafe(type) {
    return createClassUnsafe(this, type);
  }
  /**
   * @description Creates an instance of a type as registered
   */
  createType(type, ...params) {
    return createTypeUnsafe(this, type, params);
  }
  /**
   * @description Creates an instance of a type as registered
   */
  createTypeUnsafe(type, params, options) {
    return createTypeUnsafe(this, type, params, options);
  }
  // find a specific call
  findMetaCall(callIndex) {
    const [section2, method] = [callIndex[0], callIndex[1]];
    return assertReturn(this.__internal__metadataCalls[`${section2}`] && this.__internal__metadataCalls[`${section2}`][`${method}`], () => `findMetaCall: Unable to find Call with index [${section2}, ${method}]/[${callIndex.toString()}]`);
  }
  // finds an error
  findMetaError(errorIndex) {
    const [section2, method] = isU8a(errorIndex) ? [errorIndex[0], errorIndex[1]] : [
      errorIndex.index.toNumber(),
      isU8a(errorIndex.error) ? errorIndex.error[0] : errorIndex.error.toNumber()
    ];
    return assertReturn(this.__internal__metadataErrors[`${section2}`] && this.__internal__metadataErrors[`${section2}`][`${method}`], () => `findMetaError: Unable to find Error with index [${section2}, ${method}]/[${errorIndex.toString()}]`);
  }
  findMetaEvent(eventIndex) {
    const [section2, method] = [eventIndex[0], eventIndex[1]];
    return assertReturn(this.__internal__metadataEvents[`${section2}`] && this.__internal__metadataEvents[`${section2}`][`${method}`], () => `findMetaEvent: Unable to find Event with index [${section2}, ${method}]/[${eventIndex.toString()}]`);
  }
  get(name, withUnknown, knownTypeDef) {
    return this.getUnsafe(name, withUnknown, knownTypeDef);
  }
  getUnsafe(name, withUnknown, knownTypeDef) {
    let Type2 = this.__internal__classes.get(name) || this.__internal__knownDefaults[name];
    if (!Type2) {
      const definition = this.__internal__definitions.get(name);
      let BaseType;
      if (definition) {
        BaseType = createClassUnsafe(this, definition);
      } else if (knownTypeDef) {
        BaseType = constructTypeClass(this, knownTypeDef);
      } else if (withUnknown) {
        l$8.warn(`Unable to resolve type ${name}, it will fail on construction`);
        this.__internal__unknownTypes.set(name, true);
        BaseType = DoNotConstruct.with(name);
      }
      if (BaseType) {
        Type2 = class extends BaseType {
        };
        this.__internal__classes.set(name, Type2);
        if (knownTypeDef && isNumber(knownTypeDef.lookupIndex)) {
          this.__internal__classes.set(this.createLookupType(knownTypeDef.lookupIndex), Type2);
        }
      }
    }
    return Type2;
  }
  getChainProperties() {
    return this.__internal__chainProperties;
  }
  getClassName(Type2) {
    const names = [];
    for (const [name, Clazz] of this.__internal__knownDefaultsEntries) {
      if (Type2 === Clazz) {
        names.push(name);
      }
    }
    for (const [name, Clazz] of this.__internal__classes.entries()) {
      if (Type2 === Clazz) {
        names.push(name);
      }
    }
    return names.length ? names.sort().reverse()[0] : void 0;
  }
  getDefinition(typeName) {
    return this.__internal__definitions.get(typeName);
  }
  getModuleInstances(specName, moduleName) {
    var _a2, _b, _c, _d, _e;
    return ((_e = (_d = (_c = (_b = (_a2 = this.__internal__knownTypes) == null ? void 0 : _a2.typesBundle) == null ? void 0 : _b.spec) == null ? void 0 : _c[specName.toString()]) == null ? void 0 : _d.instances) == null ? void 0 : _e[moduleName]) || this.__internal__moduleMap[moduleName];
  }
  getOrThrow(name) {
    const Clazz = this.get(name);
    if (!Clazz) {
      throw new Error(`type ${name} not found`);
    }
    return Clazz;
  }
  getOrUnknown(name) {
    return this.get(name, true);
  }
  getSignedExtensionExtra() {
    return expandExtensionTypes(this.__internal__signedExtensions, "payload", this.__internal__userExtensions);
  }
  getSignedExtensionTypes() {
    return expandExtensionTypes(this.__internal__signedExtensions, "extrinsic", this.__internal__userExtensions);
  }
  hasClass(name) {
    return this.__internal__classes.has(name) || !!this.__internal__knownDefaults[name];
  }
  hasDef(name) {
    return this.__internal__definitions.has(name);
  }
  hasType(name) {
    return !this.__internal__unknownTypes.get(name) && (this.hasClass(name) || this.hasDef(name));
  }
  hash(data) {
    return this.createType("CodecHash", this.__internal__hasher(data));
  }
  // eslint-disable-next-line no-dupe-class-members
  register(arg1, arg2) {
    if (isFunction$1(arg1)) {
      this.__internal__classes.set(arg1.name, arg1);
    } else if (isString(arg1)) {
      if (!isFunction$1(arg2)) {
        throw new Error(`Expected class definition passed to '${arg1}' registration`);
      } else if (arg1 === arg2.toString()) {
        throw new Error(`Unable to register circular ${arg1} === ${arg1}`);
      }
      this.__internal__classes.set(arg1, arg2);
    } else {
      this.__internal__registerObject(arg1);
    }
  }
  // sets the chain properties
  setChainProperties(properties) {
    if (properties) {
      this.__internal__chainProperties = properties;
    }
  }
  setHasher(hasher2) {
    this.__internal__hasher = hasher2 || blake2AsU8a;
  }
  setKnownTypes(knownTypes2) {
    this.__internal__knownTypes = knownTypes2;
  }
  setLookup(lookup14) {
    this.__internal__lookup = lookup14;
    lookup14.register();
  }
  // sets the metadata
  setMetadata(metadata, signedExtensions, userExtensions, noInitWarn) {
    this.__internal__metadata = metadata.asLatest;
    this.__internal__metadataVersion = metadata.version;
    this.__internal__firstCallIndex = null;
    this.__internal__registerLookup(this.__internal__metadata.lookup);
    injectExtrinsics(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataCalls, this.__internal__moduleMap);
    injectErrors(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataErrors);
    injectEvents(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataEvents);
    const [defSection] = Object.keys(this.__internal__metadataCalls).sort(sortDecimalStrings);
    if (defSection) {
      const [defMethod] = Object.keys(this.__internal__metadataCalls[defSection]).sort(sortDecimalStrings);
      if (defMethod) {
        this.__internal__firstCallIndex = new Uint8Array([parseInt(defSection, 10), parseInt(defMethod, 10)]);
      }
    }
    this.setSignedExtensions(signedExtensions || (this.__internal__metadata.extrinsic.version.gt(BN_ZERO) ? this.__internal__metadata.extrinsic.signedExtensions.map(({ identifier: identifier2 }) => identifier2.toString()) : fallbackExtensions), userExtensions, noInitWarn);
    this.setChainProperties(extractProperties(this, metadata));
  }
  // sets the available signed extensions
  setSignedExtensions(signedExtensions = fallbackExtensions, userExtensions, noInitWarn) {
    this.__internal__signedExtensions = signedExtensions;
    this.__internal__userExtensions = userExtensions;
    if (!noInitWarn) {
      const unknown = findUnknownExtensions(this.__internal__signedExtensions, this.__internal__userExtensions);
      if (unknown.length) {
        l$8.warn(`Unknown signed extensions ${unknown.join(", ")} found, treating them as no-effect`);
      }
    }
  }
}
const typesChain = {};
const sharedTypes$2 = {
  DispatchErrorModule: "DispatchErrorModuleU8",
  FullIdentification: "()",
  Keys: "SessionKeys7B",
  Weight: "WeightV1"
};
const versioned$2 = [
  {
    minmax: [0, 200],
    types: {
      ...sharedTypes$2,
      AccountInfo: "AccountInfoWithDualRefCount",
      Address: "AccountId",
      LookupSource: "AccountId"
    }
  },
  {
    minmax: [201, 214],
    types: {
      ...sharedTypes$2,
      AccountInfo: "AccountInfoWithDualRefCount"
    }
  },
  {
    minmax: [215, 228],
    types: {
      ...sharedTypes$2,
      Keys: "SessionKeys6"
    }
  },
  {
    minmax: [229, 9099],
    types: {
      ...sharedTypes$2,
      ...mapXcmTypes("V0")
    }
  },
  {
    minmax: [9100, 9105],
    types: {
      ...sharedTypes$2,
      ...mapXcmTypes("V1")
    }
  },
  {
    // metadata v14
    minmax: [9106, void 0],
    types: {
      Weight: "WeightV1"
    }
  }
  // ,
  // {
  //   // weight v2 introduction
  //   minmax: [9300, undefined],
  //   types: {
  //     Weight: 'WeightV2'
  //   }
  // }
];
const sharedTypes$1 = {
  DispatchErrorModule: "DispatchErrorModuleU8",
  TAssetBalance: "u128",
  ProxyType: {
    _enum: [
      "Any",
      "NonTransfer",
      "CancelProxy",
      "Assets",
      "AssetOwner",
      "AssetManager",
      "Staking"
    ]
  },
  Weight: "WeightV1"
};
const versioned$1 = [
  {
    minmax: [0, 3],
    types: {
      // Enum was modified mid-flight -
      // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
      DispatchError: "DispatchErrorPre6First",
      ...sharedTypes$1,
      ...mapXcmTypes("V0")
    }
  },
  {
    minmax: [4, 5],
    types: {
      // As above, see https://github.com/polkadot-js/api/issues/5301
      DispatchError: "DispatchErrorPre6First",
      ...sharedTypes$1,
      ...mapXcmTypes("V1")
    }
  },
  {
    // metadata V14
    minmax: [500, 9999],
    types: {
      Weight: "WeightV1",
      TAssetConversion: "Option<AssetId>"
    }
  },
  {
    minmax: [1e4, void 0],
    types: {
      Weight: "WeightV1"
    }
  }
];
const sharedTypes = {
  DispatchErrorModule: "DispatchErrorModuleU8",
  TAssetBalance: "u128",
  ProxyType: {
    _enum: [
      "Any",
      "NonTransfer",
      "CancelProxy",
      "Assets",
      "AssetOwner",
      "AssetManager",
      "Staking"
    ]
  },
  Weight: "WeightV1"
};
const versioned = [
  {
    minmax: [0, 3],
    types: {
      // Enum was modified mid-flight -
      // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
      DispatchError: "DispatchErrorPre6First",
      ...sharedTypes,
      ...mapXcmTypes("V0")
    }
  },
  {
    minmax: [4, 5],
    types: {
      // As above, see https://github.com/polkadot-js/api/issues/5301
      DispatchError: "DispatchErrorPre6First",
      ...sharedTypes,
      ...mapXcmTypes("V1")
    }
  },
  {
    // metadata V14
    minmax: [500, 9434],
    types: {
      Weight: "WeightV1",
      TAssetConversion: "Option<AssetId>"
    }
  },
  {
    minmax: [9435, void 0],
    types: {
      Weight: "WeightV1"
    }
  }
];
const typesSpec = {
  "centrifuge-chain": versioned$3,
  kusama: versioned$3,
  node: versioned$3,
  "node-template": versioned$3,
  polkadot: versioned$3,
  rococo: versioned$2,
  shell: versioned$3,
  statemine: versioned$1,
  statemint: versioned$3,
  westend: versioned$3,
  westmint: versioned
};
const knownIcon = {
  centrifuge: "polkadot",
  kusama: "polkadot",
  polkadot: "polkadot",
  sora: "polkadot",
  statemine: "polkadot",
  statemint: "polkadot",
  westmint: "polkadot"
};
const knownLedger = {
  acala: 787,
  ajuna: 354,
  "aleph-node": 643,
  astar: 810,
  bifrost: 788,
  "bifrost-kusama": 788,
  centrifuge: 747,
  composable: 354,
  darwinia: 354,
  "dock-mainnet": 594,
  edgeware: 523,
  enjin: 1155,
  equilibrium: 99999997,
  genshiro: 99999996,
  hydradx: 354,
  "interlay-parachain": 354,
  karura: 686,
  khala: 434,
  kusama: 434,
  matrixchain: 1155,
  nodle: 1003,
  origintrail: 354,
  parallel: 354,
  pendulum: 354,
  phala: 354,
  picasso: 434,
  polkadex: 799,
  polkadot: 354,
  polymesh: 595,
  quartz: 631,
  sora: 617,
  stafi: 907,
  statemine: 434,
  // common-good on Kusama, shares derivation
  statemint: 354,
  // common-good on Polkadot, shares derivation
  ternoa: 995,
  unique: 661,
  vtb: 694,
  xxnetwork: 1955,
  zeitgeist: 354
};
const knownTestnet = {
  "": true,
  // this is the default non-network entry
  "cess-testnet": true,
  "dock-testnet": true,
  jupiter: true,
  "mathchain-testnet": true,
  p3dt: true,
  subspace_testnet: true,
  "zero-alphaville": true
};
const UNSORTED = [0, 2, 42];
const TESTNETS = ["testnet"];
function toExpanded(o) {
  var _a2, _b;
  const network = o.network || "";
  const nameParts = network.replace(/_/g, "-").split("-");
  const n = o;
  n.slip44 = knownLedger[network];
  n.hasLedgerSupport = !!n.slip44;
  n.genesisHash = knownGenesis[network] || [];
  n.icon = knownIcon[network] || "substrate";
  n.isTestnet = !!knownTestnet[network] || TESTNETS.includes(nameParts[nameParts.length - 1]);
  n.isIgnored = n.isTestnet || !(o.standardAccount && ((_a2 = o.decimals) == null ? void 0 : _a2.length) && ((_b = o.symbols) == null ? void 0 : _b.length)) && o.prefix !== 42;
  return n;
}
function filterSelectable({ genesisHash, prefix: prefix2 }) {
  return !!genesisHash.length || prefix2 === 42;
}
function filterAvailable(n) {
  return !n.isIgnored && !!n.network;
}
function sortNetworks(a, b) {
  const isUnSortedA = UNSORTED.includes(a.prefix);
  const isUnSortedB = UNSORTED.includes(b.prefix);
  return isUnSortedA === isUnSortedB ? isUnSortedA ? 0 : a.displayName.localeCompare(b.displayName) : isUnSortedA ? -1 : 1;
}
const allNetworks = knownSubstrate.map(toExpanded);
const availableNetworks = allNetworks.filter(filterAvailable).sort(sortNetworks);
const selectableNetworks = availableNetworks.filter(filterSelectable);
const allKnown = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  kusama: upgrades$1,
  polkadot: upgrades$1,
  westend: upgrades$1
}, Symbol.toStringTag, { value: "Module" }));
const NET_EXTRA = {
  westend: {
    genesisHash: ["0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"]
  }
};
function mapRaw([network, versions]) {
  const chain2 = selectableNetworks.find((n) => n.network === network) || NET_EXTRA[network];
  if (!chain2) {
    throw new Error(`Unable to find info for chain ${network}`);
  }
  return {
    genesisHash: hexToU8a(chain2.genesisHash[0]),
    network,
    versions: versions.map(([blockNumber, specVersion, apis]) => ({
      apis,
      blockNumber: new BN(blockNumber),
      specVersion: new BN(specVersion)
    }))
  };
}
const upgrades = Object.entries(allKnown).map(mapRaw);
function withNames(chainName, specName, fn) {
  return fn(chainName.toString(), specName.toString());
}
function filterVersions(versions = [], specVersion) {
  return versions.filter(({ minmax: [min, max2] }) => (min === void 0 || min === null || specVersion >= min) && (max2 === void 0 || max2 === null || specVersion <= max2)).reduce((result, { types: types2 }) => ({ ...result, ...types2 }), {});
}
function getSpecExtensions({ knownTypes: knownTypes2 }, chainName, specName) {
  return withNames(chainName, specName, (c, s) => {
    var _a2, _b, _c, _d, _e, _f;
    return {
      ...((_c = (_b = (_a2 = knownTypes2.typesBundle) == null ? void 0 : _a2.spec) == null ? void 0 : _b[s]) == null ? void 0 : _c.signedExtensions) ?? {},
      ...((_f = (_e = (_d = knownTypes2.typesBundle) == null ? void 0 : _d.chain) == null ? void 0 : _e[c]) == null ? void 0 : _f.signedExtensions) ?? {}
    };
  });
}
function getSpecTypes({ knownTypes: knownTypes2 }, chainName, specName, specVersion) {
  const _specVersion = bnToBn(specVersion).toNumber();
  return withNames(chainName, specName, (c, s) => {
    var _a2, _b, _c, _d, _e, _f, _g, _h;
    return {
      // The order here is always, based on -
      //   - spec then chain
      //   - typesBundle takes higher precedence
      //   - types is the final catch-all override
      ...filterVersions(typesSpec[s], _specVersion),
      ...filterVersions(typesChain[c], _specVersion),
      ...filterVersions((_c = (_b = (_a2 = knownTypes2.typesBundle) == null ? void 0 : _a2.spec) == null ? void 0 : _b[s]) == null ? void 0 : _c.types, _specVersion),
      ...filterVersions((_f = (_e = (_d = knownTypes2.typesBundle) == null ? void 0 : _d.chain) == null ? void 0 : _e[c]) == null ? void 0 : _f.types, _specVersion),
      ...((_g = knownTypes2.typesSpec) == null ? void 0 : _g[s]) ?? {},
      ...((_h = knownTypes2.typesChain) == null ? void 0 : _h[c]) ?? {},
      ...knownTypes2.types ?? {}
    };
  });
}
function getSpecHasher({ knownTypes: knownTypes2 }, chainName, specName) {
  return withNames(chainName, specName, (c, s) => {
    var _a2, _b, _c, _d, _e, _f;
    return knownTypes2.hasher || ((_c = (_b = (_a2 = knownTypes2.typesBundle) == null ? void 0 : _a2.chain) == null ? void 0 : _b[c]) == null ? void 0 : _c.hasher) || ((_f = (_e = (_d = knownTypes2.typesBundle) == null ? void 0 : _d.spec) == null ? void 0 : _e[s]) == null ? void 0 : _f.hasher) || null;
  });
}
function getSpecRpc({ knownTypes: knownTypes2 }, chainName, specName) {
  return withNames(chainName, specName, (c, s) => {
    var _a2, _b, _c, _d, _e, _f;
    return {
      ...((_c = (_b = (_a2 = knownTypes2.typesBundle) == null ? void 0 : _a2.spec) == null ? void 0 : _b[s]) == null ? void 0 : _c.rpc) ?? {},
      ...((_f = (_e = (_d = knownTypes2.typesBundle) == null ? void 0 : _d.chain) == null ? void 0 : _e[c]) == null ? void 0 : _f.rpc) ?? {}
    };
  });
}
function getSpecRuntime({ knownTypes: knownTypes2 }, chainName, specName) {
  return withNames(chainName, specName, (c, s) => {
    var _a2, _b, _c, _d, _e, _f;
    return {
      ...((_c = (_b = (_a2 = knownTypes2.typesBundle) == null ? void 0 : _a2.spec) == null ? void 0 : _b[s]) == null ? void 0 : _c.runtime) ?? {},
      ...((_f = (_e = (_d = knownTypes2.typesBundle) == null ? void 0 : _d.chain) == null ? void 0 : _e[c]) == null ? void 0 : _f.runtime) ?? {}
    };
  });
}
function getSpecAlias({ knownTypes: knownTypes2 }, chainName, specName) {
  return withNames(chainName, specName, (c, s) => {
    var _a2, _b, _c, _d, _e, _f;
    return {
      // as per versions, first spec, then chain then finally non-versioned
      ...((_c = (_b = (_a2 = knownTypes2.typesBundle) == null ? void 0 : _a2.spec) == null ? void 0 : _b[s]) == null ? void 0 : _c.alias) ?? {},
      ...((_f = (_e = (_d = knownTypes2.typesBundle) == null ? void 0 : _d.chain) == null ? void 0 : _e[c]) == null ? void 0 : _f.alias) ?? {},
      ...knownTypes2.typesAlias ?? {}
    };
  });
}
function getUpgradeVersion(genesisHash, blockNumber) {
  const known2 = upgrades.find((u) => genesisHash.eq(u.genesisHash));
  return known2 ? [
    known2.versions.reduce((last2, version2) => {
      return blockNumber.gt(version2.blockNumber) ? version2 : last2;
    }, void 0),
    known2.versions.find((version2) => blockNumber.lte(version2.blockNumber))
  ] : [void 0, void 0];
}
function refCountDelay(delay = 1750) {
  return (source) => {
    let [state, refCount2, connection, scheduler2] = [0, 0, Subscription.EMPTY, Subscription.EMPTY];
    return new Observable((ob) => {
      source.subscribe(ob);
      if (refCount2++ === 0) {
        if (state === 1) {
          scheduler2.unsubscribe();
        } else {
          connection = source.connect();
        }
        state = 3;
      }
      return () => {
        if (--refCount2 === 0) {
          if (state === 2) {
            state = 0;
            scheduler2.unsubscribe();
          } else {
            state = 1;
            scheduler2 = asapScheduler.schedule(() => {
              state = 0;
              connection.unsubscribe();
            }, delay);
          }
        }
      };
    });
  };
}
function CMP(a, b) {
  return stringify$1({ t: a }) === stringify$1({ t: b });
}
function ERR(error2) {
  throw error2;
}
function NOOP() {
}
function drr({ delay, skipChange = false, skipTimeout = false } = {}) {
  return (source$) => source$.pipe(
    catchError(ERR),
    skipChange ? tap(NOOP) : distinctUntilChanged(CMP),
    // eslint-disable-next-line deprecation/deprecation
    publishReplay(1),
    skipTimeout ? refCount() : refCountDelay(delay)
  );
}
function memo(instanceId, inner) {
  const options = { getInstanceId: () => instanceId };
  const cached = memoize$1((...params) => new Observable((observer) => {
    const subscription = inner(...params).subscribe(observer);
    return () => {
      cached.unmemoize(...params);
      subscription.unsubscribe();
    };
  }).pipe(drr()), options);
  return cached;
}
const l$7 = logger("rpc-core");
const EMPTY_META = {
  fallback: void 0,
  modifier: { isOptional: true },
  type: {
    asMap: { linked: { isTrue: false } },
    isMap: false
  }
};
function logErrorMessage(method, { noErrorLog, params, type }, error2) {
  if (noErrorLog) {
    return;
  }
  l$7.error(`${method}(${params.map(({ isOptional, name, type: type2 }) => `${name}${isOptional ? "?" : ""}: ${type2}`).join(", ")}): ${type}:: ${error2.message}`);
}
function isTreatAsHex(key) {
  return ["0x3a636f6465"].includes(key.toHex());
}
class RpcCore {
  /**
   * @constructor
   * Default constructor for the core RPC handler
   * @param  {ProviderInterface} provider An API provider using any of the supported providers (HTTP, SC or WebSocket)
   */
  constructor(instanceId, registry, { isPedantic = true, provider, userRpc = {} }) {
    __publicField(this, "__internal__instanceId");
    __publicField(this, "__internal__isPedantic");
    __publicField(this, "__internal__registryDefault");
    __publicField(this, "__internal__storageCache", /* @__PURE__ */ new Map());
    __publicField(this, "__internal__storageCacheHits", 0);
    __publicField(this, "__internal__storageCacheSize", 0);
    __publicField(this, "__internal__getBlockRegistry");
    __publicField(this, "__internal__getBlockHash");
    __publicField(this, "mapping", /* @__PURE__ */ new Map());
    __publicField(this, "provider");
    __publicField(this, "sections", []);
    if (!provider || !isFunction$1(provider.send)) {
      throw new Error("Expected Provider to API create");
    }
    this.__internal__instanceId = instanceId;
    this.__internal__isPedantic = isPedantic;
    this.__internal__registryDefault = registry;
    this.provider = provider;
    const sectionNames = Object.keys(rpcDefinitions);
    this.sections.push(...sectionNames);
    this.addUserInterfaces(userRpc);
  }
  /**
   * @description Returns the connected status of a provider
   */
  get isConnected() {
    return this.provider.isConnected;
  }
  /**
   * @description Manually connect from the attached provider
   */
  connect() {
    return this.provider.connect();
  }
  /**
   * @description Manually disconnect from the attached provider
   */
  disconnect() {
    return this.provider.disconnect();
  }
  /**
   * @description Returns the underlying core stats, including those from teh provider
   */
  get stats() {
    const stats = this.provider.stats;
    return stats ? {
      ...stats,
      core: {
        cacheHits: this.__internal__storageCacheHits,
        cacheSize: this.__internal__storageCacheSize
      }
    } : void 0;
  }
  /**
   * @description Sets a registry swap (typically from Api)
   */
  setRegistrySwap(registrySwap) {
    this.__internal__getBlockRegistry = memoize$1(registrySwap, {
      getInstanceId: () => this.__internal__instanceId
    });
  }
  /**
   * @description Sets a function to resolve block hash from block number
   */
  setResolveBlockHash(resolveBlockHash) {
    this.__internal__getBlockHash = memoize$1(resolveBlockHash, {
      getInstanceId: () => this.__internal__instanceId
    });
  }
  addUserInterfaces(userRpc) {
    this.sections.push(...Object.keys(userRpc).filter((k) => !this.sections.includes(k)));
    for (let s = 0, scount = this.sections.length; s < scount; s++) {
      const section2 = this.sections[s];
      const defs = objectSpread({}, rpcDefinitions[section2], userRpc[section2]);
      const methods = Object.keys(defs);
      for (let m2 = 0, mcount = methods.length; m2 < mcount; m2++) {
        const method = methods[m2];
        const def = defs[method];
        const jsonrpc2 = def.endpoint || `${section2}_${method}`;
        if (!this.mapping.has(jsonrpc2)) {
          const isSubscription2 = !!def.pubsub;
          if (!this[section2]) {
            this[section2] = {};
          }
          this.mapping.set(jsonrpc2, objectSpread({}, def, { isSubscription: isSubscription2, jsonrpc: jsonrpc2, method, section: section2 }));
          lazyMethod(this[section2], method, () => isSubscription2 ? this._createMethodSubscribe(section2, method, def) : this._createMethodSend(section2, method, def));
        }
      }
    }
  }
  _memomize(creator, def) {
    const memoOpts = { getInstanceId: () => this.__internal__instanceId };
    const memoized = memoize$1(creator(true), memoOpts);
    memoized.raw = memoize$1(creator(false), memoOpts);
    memoized.meta = def;
    return memoized;
  }
  _formatResult(isScale, registry, blockHash, method, def, params, result) {
    return isScale ? this._formatOutput(registry, blockHash, method, def, params, result) : result;
  }
  _createMethodSend(section2, method, def) {
    const rpcName = def.endpoint || `${section2}_${method}`;
    const hashIndex = def.params.findIndex(({ isHistoric }) => isHistoric);
    let memoized = null;
    const callWithRegistry = async (isScale, values) => {
      var _a2;
      const blockId = hashIndex === -1 ? null : values[hashIndex];
      const blockHash = blockId && def.params[hashIndex].type === "BlockNumber" ? await ((_a2 = this.__internal__getBlockHash) == null ? void 0 : _a2.call(this, blockId)) : blockId;
      const { registry } = isScale && blockHash && this.__internal__getBlockRegistry ? await this.__internal__getBlockRegistry(u8aToU8a(blockHash)) : { registry: this.__internal__registryDefault };
      const params = this._formatParams(registry, null, def, values);
      const result = await this.provider.send(rpcName, params.map((p) => p.toJSON()), !!blockHash);
      return this._formatResult(isScale, registry, blockHash, method, def, params, result);
    };
    const creator = (isScale) => (...values) => {
      const isDelayed = isScale && hashIndex !== -1 && !!values[hashIndex];
      return new Observable((observer) => {
        callWithRegistry(isScale, values).then((value) => {
          observer.next(value);
          observer.complete();
        }).catch((error2) => {
          logErrorMessage(method, def, error2);
          observer.error(error2);
          observer.complete();
        });
        return () => {
          if (isScale) {
            memoized == null ? void 0 : memoized.unmemoize(...values);
          } else {
            memoized == null ? void 0 : memoized.raw.unmemoize(...values);
          }
        };
      }).pipe(
        // eslint-disable-next-line deprecation/deprecation
        publishReplay(1),
        // create a Replay(1)
        isDelayed ? refCountDelay() : refCount()
      );
    };
    memoized = this._memomize(creator, def);
    return memoized;
  }
  // create a subscriptor, it subscribes once and resolves with the id as subscribe
  _createSubscriber({ paramsJson, subName, subType, update }, errorHandler) {
    return new Promise((resolve, reject) => {
      this.provider.subscribe(subType, subName, paramsJson, update).then(resolve).catch((error2) => {
        errorHandler(error2);
        reject(error2);
      });
    });
  }
  _createMethodSubscribe(section2, method, def) {
    const [updateType, subMethod, unsubMethod] = def.pubsub;
    const subName = `${section2}_${subMethod}`;
    const unsubName = `${section2}_${unsubMethod}`;
    const subType = `${section2}_${updateType}`;
    let memoized = null;
    const creator = (isScale) => (...values) => {
      return new Observable((observer) => {
        let subscriptionPromise = Promise.resolve(null);
        const registry = this.__internal__registryDefault;
        const errorHandler = (error2) => {
          logErrorMessage(method, def, error2);
          observer.error(error2);
        };
        try {
          const params = this._formatParams(registry, null, def, values);
          const update = (error2, result) => {
            if (error2) {
              logErrorMessage(method, def, error2);
              return;
            }
            try {
              observer.next(this._formatResult(isScale, registry, null, method, def, params, result));
            } catch (error3) {
              observer.error(error3);
            }
          };
          subscriptionPromise = this._createSubscriber({ paramsJson: params.map((p) => p.toJSON()), subName, subType, update }, errorHandler);
        } catch (error2) {
          errorHandler(error2);
        }
        return () => {
          if (isScale) {
            memoized == null ? void 0 : memoized.unmemoize(...values);
          } else {
            memoized == null ? void 0 : memoized.raw.unmemoize(...values);
          }
          subscriptionPromise.then((subscriptionId) => isNull(subscriptionId) ? Promise.resolve(false) : this.provider.unsubscribe(subType, unsubName, subscriptionId)).catch((error2) => logErrorMessage(method, def, error2));
        };
      }).pipe(drr());
    };
    memoized = this._memomize(creator, def);
    return memoized;
  }
  _formatParams(registry, blockHash, def, inputs) {
    const count = inputs.length;
    const reqCount = def.params.filter(({ isOptional }) => !isOptional).length;
    if (count < reqCount || count > def.params.length) {
      throw new Error(`Expected ${def.params.length} parameters${reqCount === def.params.length ? "" : ` (${def.params.length - reqCount} optional)`}, ${count} found instead`);
    }
    const params = new Array(count);
    for (let i = 0; i < count; i++) {
      params[i] = registry.createTypeUnsafe(def.params[i].type, [inputs[i]], { blockHash });
    }
    return params;
  }
  _formatOutput(registry, blockHash, method, rpc2, params, result) {
    if (rpc2.type === "StorageData") {
      const key = params[0];
      return this._formatStorageData(registry, blockHash, key, result);
    } else if (rpc2.type === "StorageChangeSet") {
      const keys = params[0];
      return keys ? this._formatStorageSet(registry, result.block, keys, result.changes) : registry.createType("StorageChangeSet", result);
    } else if (rpc2.type === "Vec<StorageChangeSet>") {
      const jsonSet = result;
      const count = jsonSet.length;
      const mapped = new Array(count);
      for (let i = 0; i < count; i++) {
        const { block, changes } = jsonSet[i];
        mapped[i] = [
          registry.createType("BlockHash", block),
          this._formatStorageSet(registry, block, params[0], changes)
        ];
      }
      return method === "queryStorageAt" ? mapped[0][1] : mapped;
    }
    return registry.createTypeUnsafe(rpc2.type, [result], { blockHash });
  }
  _formatStorageData(registry, blockHash, key, value) {
    const isEmpty = isNull(value);
    const input = isEmpty ? null : isTreatAsHex(key) ? value : u8aToU8a(value);
    return this._newType(registry, blockHash, key, input, isEmpty);
  }
  _formatStorageSet(registry, blockHash, keys, changes) {
    const count = keys.length;
    const withCache = count !== 1;
    const values = new Array(count);
    for (let i = 0; i < count; i++) {
      values[i] = this._formatStorageSetEntry(registry, blockHash, keys[i], changes, withCache, i);
    }
    return values;
  }
  _formatStorageSetEntry(registry, blockHash, key, changes, withCache, entryIndex) {
    const hexKey = key.toHex();
    const found = changes.find(([key2]) => key2 === hexKey);
    const isNotFound = isUndefined(found);
    if (isNotFound && withCache) {
      const cached = this.__internal__storageCache.get(hexKey);
      if (cached) {
        this.__internal__storageCacheHits++;
        return cached;
      }
    }
    const value = isNotFound ? null : found[1];
    const isEmpty = isNull(value);
    const input = isEmpty || isTreatAsHex(key) ? value : u8aToU8a(value);
    const codec = this._newType(registry, blockHash, key, input, isEmpty, entryIndex);
    this.__internal__storageCache.set(hexKey, codec);
    this.__internal__storageCacheSize++;
    return codec;
  }
  _newType(registry, blockHash, key, input, isEmpty, entryIndex = -1) {
    const type = key.outputType || "Raw";
    const meta = key.meta || EMPTY_META;
    const entryNum = entryIndex === -1 ? "" : ` entry ${entryIndex}:`;
    try {
      return registry.createTypeUnsafe(type, [
        isEmpty ? meta.fallback ? type.includes("Linkage<") ? u8aConcat(hexToU8a(meta.fallback.toHex()), new Uint8Array(2)) : hexToU8a(meta.fallback.toHex()) : void 0 : meta.modifier.isOptional ? registry.createTypeUnsafe(type, [input], { blockHash, isPedantic: this.__internal__isPedantic }) : input
      ], { blockHash, isFallback: isEmpty && !!meta.fallback, isOptional: meta.modifier.isOptional, isPedantic: this.__internal__isPedantic && !meta.modifier.isOptional });
    } catch (error2) {
      throw new Error(`Unable to decode storage ${key.section || "unknown"}.${key.method || "unknown"}:${entryNum}: ${error2.message}`);
    }
  }
}
function unwrapBlockNumber(hdr) {
  return isCompact(hdr.number) ? hdr.number.unwrap() : hdr.number;
}
function firstObservable(obs) {
  return obs.pipe(map$1(([a]) => a));
}
function firstMemo(fn) {
  return (instanceId, api) => memo(instanceId, (...args) => firstObservable(fn(api, ...args)));
}
function lazyDeriveSection(result, section2, getKeys2, creator) {
  lazyMethod(result, section2, () => lazyMethods({}, getKeys2(section2), (method) => creator(section2, method)));
}
function accountId(instanceId, api) {
  return memo(instanceId, (address) => {
    const decoded = isU8a(address) ? address : decodeAddress((address || "").toString());
    if (decoded.length > 8) {
      return of(api.registry.createType("AccountId", decoded));
    }
    const accountIndex = api.registry.createType("AccountIndex", decoded);
    return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map$1((a) => assertReturn(a, "Unable to retrieve accountId")));
  });
}
function parseFlags(address, [electionsMembers, councilMembers, technicalCommitteeMembers, societyMembers, sudoKey]) {
  const addrStr = address == null ? void 0 : address.toString();
  const isIncluded = (id) => id.toString() === addrStr;
  return {
    isCouncil: ((electionsMembers == null ? void 0 : electionsMembers.map((r) => Array.isArray(r) ? r[0] : r.who)) || councilMembers || []).some(isIncluded),
    isSociety: (societyMembers || []).some(isIncluded),
    isSudo: (sudoKey == null ? void 0 : sudoKey.toString()) === addrStr,
    isTechCommittee: (technicalCommitteeMembers || []).some(isIncluded)
  };
}
function _flags(instanceId, api) {
  return memo(instanceId, () => {
    var _a2, _b, _c, _d, _e;
    const results = [void 0, [], [], [], void 0];
    const calls = [
      (_a2 = api.query.elections || api.query["phragmenElection"] || api.query["electionsPhragmen"]) == null ? void 0 : _a2.members,
      (_b = api.query.council) == null ? void 0 : _b.members,
      (_c = api.query.technicalCommittee) == null ? void 0 : _c.members,
      (_d = api.query.society) == null ? void 0 : _d.members,
      (_e = api.query.sudo) == null ? void 0 : _e.key
    ];
    const filtered = calls.filter((c) => c);
    if (!filtered.length) {
      return of(results);
    }
    return api.queryMulti(filtered).pipe(map$1((values) => {
      let resultIndex = -1;
      for (let i = 0, count = calls.length; i < count; i++) {
        if (isFunction$1(calls[i])) {
          results[i] = values[++resultIndex];
        }
      }
      return results;
    }));
  });
}
function flags(instanceId, api) {
  return memo(instanceId, (address) => api.derive.accounts._flags().pipe(map$1((r) => parseFlags(address, r))));
}
function idAndIndex(instanceId, api) {
  return memo(instanceId, (address) => {
    try {
      const decoded = isU8a(address) ? address : decodeAddress((address || "").toString());
      if (decoded.length > 8) {
        const accountId2 = api.registry.createType("AccountId", decoded);
        return api.derive.accounts.idToIndex(accountId2).pipe(map$1((accountIndex2) => [accountId2, accountIndex2]));
      }
      const accountIndex = api.registry.createType("AccountIndex", decoded);
      return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map$1((accountId2) => [accountId2, accountIndex]));
    } catch {
      return of([void 0, void 0]);
    }
  });
}
const UNDEF_HEX = { toHex: () => void 0 };
function dataAsString(data) {
  return data.isRaw ? u8aToString(data.asRaw.toU8a(true)) : data.isNone ? void 0 : data.toHex();
}
function extractOther(additional) {
  return additional.reduce((other, [_key, _value]) => {
    const key = dataAsString(_key);
    const value = dataAsString(_value);
    if (key && value) {
      other[key] = value;
    }
    return other;
  }, {});
}
function extractIdentity(identityOfOpt, superOf) {
  if (!(identityOfOpt == null ? void 0 : identityOfOpt.isSome)) {
    return { judgements: [] };
  }
  const { info: info2, judgements } = identityOfOpt.unwrap();
  const topDisplay = dataAsString(info2.display);
  return {
    display: superOf && dataAsString(superOf[1]) || topDisplay,
    displayParent: superOf && topDisplay,
    email: dataAsString(info2.email),
    image: dataAsString(info2.image),
    judgements,
    legal: dataAsString(info2.legal),
    other: extractOther(info2.additional),
    parent: superOf == null ? void 0 : superOf[0],
    pgp: info2.pgpFingerprint.unwrapOr(UNDEF_HEX).toHex(),
    riot: dataAsString(info2.riot),
    twitter: dataAsString(info2.twitter),
    web: dataAsString(info2.web)
  };
}
function getParent(api, identityOfOpt, superOfOpt) {
  if (identityOfOpt == null ? void 0 : identityOfOpt.isSome) {
    return of([identityOfOpt, void 0]);
  } else if (superOfOpt == null ? void 0 : superOfOpt.isSome) {
    const superOf = superOfOpt.unwrap();
    return combineLatest([
      api.derive.accounts._identity(superOf[0]).pipe(map$1(([info2]) => info2)),
      of(superOf)
    ]);
  }
  return of([void 0, void 0]);
}
function _identity(instanceId, api) {
  return memo(instanceId, (accountId2) => {
    var _a2;
    return accountId2 && ((_a2 = api.query.identity) == null ? void 0 : _a2.identityOf) ? combineLatest([
      api.query.identity.identityOf(accountId2),
      api.query.identity.superOf(accountId2)
    ]) : of([void 0, void 0]);
  });
}
function identity(instanceId, api) {
  return memo(instanceId, (accountId2) => api.derive.accounts._identity(accountId2).pipe(switchMap(([identityOfOpt, superOfOpt]) => getParent(api, identityOfOpt, superOfOpt)), map$1(([identityOfOpt, superOf]) => extractIdentity(identityOfOpt, superOf))));
}
const hasIdentity = /* @__PURE__ */ firstMemo((api, accountId2) => api.derive.accounts.hasIdentityMulti([accountId2]));
function hasIdentityMulti(instanceId, api) {
  return memo(instanceId, (accountIds) => {
    var _a2;
    return ((_a2 = api.query.identity) == null ? void 0 : _a2.identityOf) ? combineLatest([
      api.query.identity.identityOf.multi(accountIds),
      api.query.identity.superOf.multi(accountIds)
    ]).pipe(map$1(([identities, supers]) => identities.map((identityOfOpt, index) => {
      const superOfOpt = supers[index];
      const parentId = superOfOpt && superOfOpt.isSome ? superOfOpt.unwrap()[0].toString() : void 0;
      let display;
      if (identityOfOpt && identityOfOpt.isSome) {
        const value = dataAsString(identityOfOpt.unwrap().info.display);
        if (value && !isHex(value)) {
          display = value;
        }
      }
      return { display, hasIdentity: !!(display || parentId), parentId };
    }))) : of(accountIds.map(() => ({ hasIdentity: false })));
  });
}
function idToIndex(instanceId, api) {
  return memo(instanceId, (accountId2) => api.derive.accounts.indexes().pipe(map$1((indexes2) => indexes2[accountId2.toString()])));
}
let indicesCache = null;
function queryAccounts(api) {
  return api.query.indices.accounts.entries().pipe(map$1((entries) => entries.reduce((indexes2, [key, idOpt]) => {
    if (idOpt.isSome) {
      indexes2[idOpt.unwrap()[0].toString()] = api.registry.createType("AccountIndex", key.args[0]);
    }
    return indexes2;
  }, {})));
}
function indexes(instanceId, api) {
  return memo(instanceId, () => indicesCache ? of(indicesCache) : (api.query.indices ? queryAccounts(api).pipe(startWith({})) : of({})).pipe(map$1((indices) => {
    indicesCache = indices;
    return indices;
  })));
}
function indexToId(instanceId, api) {
  return memo(instanceId, (accountIndex) => api.query.indices ? api.query.indices.accounts(accountIndex).pipe(map$1((optResult) => optResult.unwrapOr([])[0])) : of(void 0));
}
function retrieveNick(api, accountId2) {
  var _a2;
  return (accountId2 && ((_a2 = api.query["nicks"]) == null ? void 0 : _a2["nameOf"]) ? api.query["nicks"]["nameOf"](accountId2) : of(void 0)).pipe(map$1((nameOf) => (nameOf == null ? void 0 : nameOf.isSome) ? u8aToString(nameOf.unwrap()[0]).substring(0, api.consts["nicks"]["maxLength"].toNumber()) : void 0));
}
function info(instanceId, api) {
  return memo(instanceId, (address) => api.derive.accounts.idAndIndex(address).pipe(switchMap(([accountId2, accountIndex]) => combineLatest([
    of({ accountId: accountId2, accountIndex }),
    api.derive.accounts.identity(accountId2),
    retrieveNick(api, accountId2)
  ])), map$1(([{ accountId: accountId2, accountIndex }, identity2, nickname]) => ({
    accountId: accountId2,
    accountIndex,
    identity: identity2,
    nickname
  }))));
}
const accounts = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  _flags,
  _identity,
  accountId,
  flags,
  hasIdentity,
  hasIdentityMulti,
  idAndIndex,
  idToIndex,
  identity,
  indexToId,
  indexes,
  info
}, Symbol.toStringTag, { value: "Module" }));
const mockApiDerive = {};
const treasury = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: mockApiDerive
}, Symbol.toStringTag, { value: "Module" }));
const VESTING_ID = "0x76657374696e6720";
function calcLocked(api, bestNumber2, locks) {
  let lockedBalance = api.registry.createType("Balance");
  let lockedBreakdown = [];
  let vestingLocked = api.registry.createType("Balance");
  let allLocked = false;
  if (Array.isArray(locks)) {
    lockedBreakdown = locks.filter(({ until }) => !until || bestNumber2 && until.gt(bestNumber2));
    allLocked = lockedBreakdown.some(({ amount }) => amount && amount.isMax());
    vestingLocked = api.registry.createType("Balance", lockedBreakdown.filter(({ id }) => id.eq(VESTING_ID)).reduce((result, { amount }) => result.iadd(amount), new BN(0)));
    const notAll = lockedBreakdown.filter(({ amount }) => amount && !amount.isMax());
    if (notAll.length) {
      lockedBalance = api.registry.createType("Balance", bnMax(...notAll.map(({ amount }) => amount)));
    }
  }
  return { allLocked, lockedBalance, lockedBreakdown, vestingLocked };
}
function calcShared(api, bestNumber2, data, locks) {
  const { allLocked, lockedBalance, lockedBreakdown, vestingLocked } = calcLocked(api, bestNumber2, locks);
  return objectSpread({}, data, {
    availableBalance: api.registry.createType("Balance", allLocked ? 0 : bnMax(new BN(0), (data == null ? void 0 : data.freeBalance) ? data.freeBalance.sub(lockedBalance) : new BN(0))),
    lockedBalance,
    lockedBreakdown,
    vestingLocked
  });
}
function calcVesting(bestNumber2, shared, _vesting) {
  const vesting = _vesting || [];
  const isVesting = !shared.vestingLocked.isZero();
  const vestedBalances = vesting.map(({ locked, perBlock, startingBlock }) => bestNumber2.gt(startingBlock) ? bnMin(locked, perBlock.mul(bestNumber2.sub(startingBlock))) : BN_ZERO);
  const vestedBalance = vestedBalances.reduce((all2, value) => all2.iadd(value), new BN(0));
  const vestingTotal = vesting.reduce((all2, { locked }) => all2.iadd(locked), new BN(0));
  return {
    isVesting,
    vestedBalance,
    vestedClaimable: isVesting ? shared.vestingLocked.sub(vestingTotal.sub(vestedBalance)) : BN_ZERO,
    vesting: vesting.map(({ locked, perBlock, startingBlock }, index) => ({
      endBlock: locked.div(perBlock).iadd(startingBlock),
      locked,
      perBlock,
      startingBlock,
      vested: vestedBalances[index]
    })).filter(({ locked }) => !locked.isZero()),
    vestingTotal
  };
}
function calcBalances$1(api, result) {
  const [data, [vesting, allLocks, namedReserves], bestNumber2] = result;
  const shared = calcShared(api, bestNumber2, data, allLocks[0]);
  return objectSpread(shared, calcVesting(bestNumber2, shared, vesting), {
    accountId: data.accountId,
    accountNonce: data.accountNonce,
    additional: allLocks.slice(1).map((l2, index) => calcShared(api, bestNumber2, data.additional[index], l2)),
    namedReserves
  });
}
function queryOld(api, accountId2) {
  return combineLatest([
    api.query.balances.locks(accountId2),
    api.query.balances["vesting"](accountId2)
  ]).pipe(map$1(([locks, optVesting]) => {
    let vestingNew = null;
    if (optVesting.isSome) {
      const { offset: locked, perBlock, startingBlock } = optVesting.unwrap();
      vestingNew = api.registry.createType("VestingInfo", { locked, perBlock, startingBlock });
    }
    return [
      vestingNew ? [vestingNew] : null,
      [locks],
      []
    ];
  }));
}
const isNonNullable = (nullable) => !!nullable;
function createCalls(calls) {
  return [
    calls.map((c) => !c),
    calls.filter(isNonNullable)
  ];
}
function queryCurrent(api, accountId2, balanceInstances = ["balances"]) {
  var _a2;
  const [lockEmpty, lockQueries] = createCalls(balanceInstances.map((m2) => {
    var _a3, _b;
    return ((_a3 = api.derive[m2]) == null ? void 0 : _a3.customLocks) || ((_b = api.query[m2]) == null ? void 0 : _b.locks);
  }));
  const [reserveEmpty, reserveQueries] = createCalls(balanceInstances.map((m2) => {
    var _a3;
    return (_a3 = api.query[m2]) == null ? void 0 : _a3.reserves;
  }));
  return combineLatest([
    ((_a2 = api.query.vesting) == null ? void 0 : _a2.vesting) ? api.query.vesting.vesting(accountId2) : of(api.registry.createType("Option<VestingInfo>")),
    lockQueries.length ? combineLatest(lockQueries.map((c) => c(accountId2))) : of([]),
    reserveQueries.length ? combineLatest(reserveQueries.map((c) => c(accountId2))) : of([])
  ]).pipe(map$1(([opt, locks, reserves]) => {
    let offsetLock = -1;
    let offsetReserve = -1;
    const vesting = opt.unwrapOr(null);
    return [
      vesting ? Array.isArray(vesting) ? vesting : [vesting] : null,
      lockEmpty.map((e) => e ? api.registry.createType("Vec<BalanceLock>") : locks[++offsetLock]),
      reserveEmpty.map((e) => e ? api.registry.createType("Vec<PalletBalancesReserveData>") : reserves[++offsetReserve])
    ];
  }));
}
function all(instanceId, api) {
  const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, "balances");
  return memo(instanceId, (address) => {
    var _a2, _b;
    return combineLatest([
      api.derive.balances.account(address),
      isFunction$1((_a2 = api.query.system) == null ? void 0 : _a2.account) || isFunction$1((_b = api.query.balances) == null ? void 0 : _b.account) ? queryCurrent(api, address, balanceInstances) : queryOld(api, address)
    ]).pipe(switchMap(([account2, locks]) => combineLatest([
      of(account2),
      of(locks),
      api.derive.chain.bestNumber()
    ])), map$1((result) => calcBalances$1(api, result)));
  });
}
function zeroBalance(api) {
  return api.registry.createType("Balance");
}
function getBalance(api, [freeBalance, reservedBalance, frozenFee, frozenMisc]) {
  const votingBalance2 = api.registry.createType("Balance", freeBalance.toBn());
  return {
    freeBalance,
    frozenFee,
    frozenMisc,
    reservedBalance,
    votingBalance: votingBalance2
  };
}
function calcBalances(api, [accountId2, [accountNonce, [primary, ...additional]]]) {
  return objectSpread({
    accountId: accountId2,
    accountNonce,
    additional: additional.map((b) => getBalance(api, b))
  }, getBalance(api, primary));
}
function queryBalancesFree(api, accountId2) {
  return combineLatest([
    api.query.balances["freeBalance"](accountId2),
    api.query.balances["reservedBalance"](accountId2),
    api.query.system["accountNonce"](accountId2)
  ]).pipe(map$1(([freeBalance, reservedBalance, accountNonce]) => [
    accountNonce,
    [[freeBalance, reservedBalance, zeroBalance(api), zeroBalance(api)]]
  ]));
}
function queryNonceOnly(api, accountId2) {
  const fill = (nonce) => [
    nonce,
    [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]
  ];
  return isFunction$1(api.query.system.account) ? api.query.system.account(accountId2).pipe(map$1(({ nonce }) => fill(nonce))) : isFunction$1(api.query.system["accountNonce"]) ? api.query.system["accountNonce"](accountId2).pipe(map$1((nonce) => fill(nonce))) : of(fill(api.registry.createType("Index")));
}
function queryBalancesAccount(api, accountId2, modules = ["balances"]) {
  const balances2 = modules.map((m2) => {
    var _a2, _b;
    return ((_a2 = api.derive[m2]) == null ? void 0 : _a2.customAccount) || ((_b = api.query[m2]) == null ? void 0 : _b.account);
  }).filter((q) => isFunction$1(q));
  const extract = (nonce, data) => [
    nonce,
    data.map(({ feeFrozen, free, miscFrozen, reserved }) => [free, reserved, feeFrozen, miscFrozen])
  ];
  return balances2.length ? isFunction$1(api.query.system.account) ? combineLatest([
    api.query.system.account(accountId2),
    ...balances2.map((c) => c(accountId2))
  ]).pipe(map$1(([{ nonce }, ...balances3]) => extract(nonce, balances3))) : combineLatest([
    api.query.system["accountNonce"](accountId2),
    ...balances2.map((c) => c(accountId2))
  ]).pipe(map$1(([nonce, ...balances3]) => extract(nonce, balances3))) : queryNonceOnly(api, accountId2);
}
function querySystemAccount(api, accountId2) {
  return api.query.system.account(accountId2).pipe(map$1((infoOrTuple) => {
    const data = infoOrTuple.nonce ? infoOrTuple.data : infoOrTuple[1];
    const nonce = infoOrTuple.nonce || infoOrTuple[0];
    if (!data || data.isEmpty) {
      return [
        nonce,
        [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]
      ];
    }
    const { feeFrozen, free, miscFrozen, reserved } = data;
    return [
      nonce,
      [[free, reserved, feeFrozen, miscFrozen]]
    ];
  }));
}
function account(instanceId, api) {
  const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, "balances");
  const nonDefaultBalances = balanceInstances && balanceInstances[0] !== "balances";
  return memo(instanceId, (address) => api.derive.accounts.accountId(address).pipe(switchMap((accountId2) => {
    var _a2, _b, _c;
    return accountId2 ? combineLatest([
      of(accountId2),
      nonDefaultBalances ? queryBalancesAccount(api, accountId2, balanceInstances) : isFunction$1((_a2 = api.query.system) == null ? void 0 : _a2.account) ? querySystemAccount(api, accountId2) : isFunction$1((_b = api.query.balances) == null ? void 0 : _b.account) ? queryBalancesAccount(api, accountId2) : isFunction$1((_c = api.query.balances) == null ? void 0 : _c["freeBalance"]) ? queryBalancesFree(api, accountId2) : queryNonceOnly(api, accountId2)
    ]) : of([api.registry.createType("AccountId"), [
      api.registry.createType("Index"),
      [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]
    ]]);
  }), map$1((result) => calcBalances(api, result))));
}
function votingBalances(instanceId, api) {
  return memo(instanceId, (addresses) => !(addresses == null ? void 0 : addresses.length) ? of([]) : combineLatest(addresses.map((accountId2) => api.derive.balances.account(accountId2))));
}
const votingBalance = all;
const balances = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  account,
  all,
  votingBalance,
  votingBalances
}, Symbol.toStringTag, { value: "Module" }));
function createBlockNumberDerive(fn) {
  return (instanceId, api) => memo(instanceId, () => fn(api).pipe(map$1(unwrapBlockNumber)));
}
function getAuthorDetailsWithAt(header, queryAt) {
  var _a2, _b, _c, _d;
  const validators = ((_a2 = queryAt.session) == null ? void 0 : _a2.validators) ? queryAt.session.validators() : of(null);
  const { logs: [log2] } = header.digest;
  const loggedAuthor = log2 && (log2.isConsensus && log2.asConsensus[0].isNimbus && log2.asConsensus[1] || log2.isPreRuntime && log2.asPreRuntime[0].isNimbus && log2.asPreRuntime[1]);
  if (loggedAuthor) {
    if ((_b = queryAt["authorMapping"]) == null ? void 0 : _b["mappingWithDeposit"]) {
      return combineLatest([
        of(header),
        validators,
        queryAt["authorMapping"]["mappingWithDeposit"](loggedAuthor).pipe(map$1((o) => o.unwrapOr({ account: null }).account))
      ]);
    }
    if (((_c = queryAt["parachainStaking"]) == null ? void 0 : _c["selectedCandidates"]) && ((_d = queryAt.session) == null ? void 0 : _d.nextKeys)) {
      const loggedHex = loggedAuthor.toHex();
      return combineLatest([
        of(header),
        validators,
        queryAt["parachainStaking"]["selectedCandidates"]().pipe(mergeMap((selectedCandidates) => combineLatest([
          of(selectedCandidates),
          queryAt.session.nextKeys.multi(selectedCandidates).pipe(map$1((nextKeys) => nextKeys.findIndex((o) => o.unwrapOrDefault().nimbus.toHex() === loggedHex)))
        ])), map$1(([selectedCandidates, index]) => index === -1 ? null : selectedCandidates[index]))
      ]);
    }
  }
  return combineLatest([
    of(header),
    validators,
    of(null)
  ]);
}
function getAuthorDetails(api, header, blockHash) {
  return api.queryAt(header.parentHash.isEmpty ? blockHash || header.hash : header.parentHash).pipe(switchMap((queryAt) => getAuthorDetailsWithAt(header, queryAt)));
}
const bestNumber = /* @__PURE__ */ createBlockNumberDerive((api) => api.rpc.chain.subscribeNewHeads());
const bestNumberFinalized = /* @__PURE__ */ createBlockNumberDerive((api) => api.rpc.chain.subscribeFinalizedHeads());
function bestNumberLag(instanceId, api) {
  return memo(instanceId, () => combineLatest([
    api.derive.chain.bestNumber(),
    api.derive.chain.bestNumberFinalized()
  ]).pipe(map$1(([bestNumber2, bestNumberFinalized2]) => api.registry.createType("BlockNumber", bestNumber2.sub(bestNumberFinalized2)))));
}
function extractAuthor(digest, sessionValidators) {
  const [citem] = digest.logs.filter((e) => e.isConsensus);
  const [pitem] = digest.logs.filter((e) => e.isPreRuntime);
  const [sitem] = digest.logs.filter((e) => e.isSeal);
  let accountId2;
  try {
    if (pitem) {
      const [engine, data] = pitem.asPreRuntime;
      accountId2 = engine.extractAuthor(data, sessionValidators);
    }
    if (!accountId2 && citem) {
      const [engine, data] = citem.asConsensus;
      accountId2 = engine.extractAuthor(data, sessionValidators);
    }
    if (!accountId2 && sitem) {
      const [engine, data] = sitem.asSeal;
      accountId2 = engine.extractAuthor(data, sessionValidators);
    }
  } catch {
  }
  return accountId2;
}
function createHeaderExtended(registry, header, validators, author) {
  const HeaderBase = registry.createClass("Header");
  class Implementation extends HeaderBase {
    constructor(registry2, header2, validators2, author2) {
      super(registry2, header2);
      __publicField(this, "__internal__author");
      this.__internal__author = author2 || extractAuthor(this.digest, validators2 || []);
      this.createdAtHash = header2 == null ? void 0 : header2.createdAtHash;
    }
    /**
     * @description Convenience method, returns the author for the block
     */
    get author() {
      return this.__internal__author;
    }
  }
  return new Implementation(registry, header, validators, author);
}
function mapExtrinsics(extrinsics, records) {
  return extrinsics.map((extrinsic, index) => {
    let dispatchError;
    let dispatchInfo;
    const events2 = records.filter(({ phase }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index)).map(({ event }) => {
      if (event.section === "system") {
        if (event.method === "ExtrinsicSuccess") {
          dispatchInfo = event.data[0];
        } else if (event.method === "ExtrinsicFailed") {
          dispatchError = event.data[0];
          dispatchInfo = event.data[1];
        }
      }
      return event;
    });
    return { dispatchError, dispatchInfo, events: events2, extrinsic };
  });
}
function createSignedBlockExtended(registry, block, events2, validators, author) {
  const SignedBlockBase = registry.createClass("SignedBlock");
  class Implementation extends SignedBlockBase {
    constructor(registry2, block2, events3, validators2, author2) {
      super(registry2, block2);
      __publicField(this, "__internal__author");
      __publicField(this, "__internal__events");
      __publicField(this, "__internal__extrinsics");
      this.__internal__author = author2 || extractAuthor(this.block.header.digest, validators2 || []);
      this.__internal__events = events3 || [];
      this.__internal__extrinsics = mapExtrinsics(this.block.extrinsics, this.__internal__events);
      this.createdAtHash = block2 == null ? void 0 : block2.createdAtHash;
    }
    /**
     * @description Convenience method, returns the author for the block
     */
    get author() {
      return this.__internal__author;
    }
    /**
     * @description Convenience method, returns the events associated with the block
     */
    get events() {
      return this.__internal__events;
    }
    /**
     * @description Returns the extrinsics and their events, mapped
     */
    get extrinsics() {
      return this.__internal__extrinsics;
    }
  }
  return new Implementation(registry, block, events2, validators, author);
}
function getBlock(instanceId, api) {
  return memo(instanceId, (blockHash) => combineLatest([
    api.rpc.chain.getBlock(blockHash),
    api.queryAt(blockHash)
  ]).pipe(switchMap(([signedBlock, queryAt]) => combineLatest([
    of(signedBlock),
    queryAt.system.events(),
    getAuthorDetails(api, signedBlock.block.header, blockHash)
  ])), map$1(([signedBlock, events2, [, validators, author]]) => createSignedBlockExtended(events2.registry, signedBlock, events2, validators, author))));
}
function getBlockByNumber(instanceId, api) {
  return memo(instanceId, (blockNumber) => api.rpc.chain.getBlockHash(blockNumber).pipe(switchMap((h) => api.derive.chain.getBlock(h))));
}
function getHeader$1(instanceId, api) {
  return memo(instanceId, (blockHash) => api.rpc.chain.getHeader(blockHash).pipe(switchMap((header) => getAuthorDetails(api, header, blockHash)), map$1(([header, validators, author]) => createHeaderExtended((validators || header).registry, header, validators, author))));
}
function subscribeFinalizedBlocks(instanceId, api) {
  return memo(instanceId, () => api.derive.chain.subscribeFinalizedHeads().pipe(switchMap((header) => api.derive.chain.getBlock(header.createdAtHash || header.hash))));
}
function _getHeaderRange(instanceId, api) {
  return memo(instanceId, (startHash, endHash, prev2 = []) => api.rpc.chain.getHeader(startHash).pipe(switchMap((header) => header.parentHash.eq(endHash) ? of([header, ...prev2]) : api.derive.chain._getHeaderRange(header.parentHash, endHash, [header, ...prev2]))));
}
function subscribeFinalizedHeads(instanceId, api) {
  return memo(instanceId, () => {
    let prevHash = null;
    return api.rpc.chain.subscribeFinalizedHeads().pipe(switchMap((header) => {
      const endHash = prevHash;
      const startHash = header.parentHash;
      prevHash = header.createdAtHash = header.hash;
      return endHash === null || startHash.eq(endHash) ? of(header) : api.derive.chain._getHeaderRange(startHash, endHash, [header]).pipe(switchMap((headers) => from(headers)));
    }));
  });
}
function subscribeNewBlocks(instanceId, api) {
  return memo(instanceId, () => api.derive.chain.subscribeNewHeads().pipe(switchMap((header) => api.derive.chain.getBlock(header.createdAtHash || header.hash))));
}
function subscribeNewHeads(instanceId, api) {
  return memo(instanceId, () => api.rpc.chain.subscribeNewHeads().pipe(switchMap((header) => getAuthorDetails(api, header)), map$1(([header, validators, author]) => {
    header.createdAtHash = header.hash;
    return createHeaderExtended(header.registry, header, validators, author);
  })));
}
const chain = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  _getHeaderRange,
  bestNumber,
  bestNumberFinalized,
  bestNumberLag,
  getBlock,
  getBlockByNumber,
  getHeader: getHeader$1,
  subscribeFinalizedBlocks,
  subscribeFinalizedHeads,
  subscribeNewBlocks,
  subscribeNewHeads
}, Symbol.toStringTag, { value: "Module" }));
function queryConstants(api) {
  return of([
    // deprecated
    api.consts.contracts["callBaseFee"] || api.registry.createType("Balance"),
    api.consts.contracts["contractFee"] || api.registry.createType("Balance"),
    api.consts.contracts["creationFee"] || api.registry.createType("Balance"),
    api.consts.contracts["transactionBaseFee"] || api.registry.createType("Balance"),
    api.consts.contracts["transactionByteFee"] || api.registry.createType("Balance"),
    api.consts.contracts["transferFee"] || api.registry.createType("Balance"),
    // current
    api.consts.contracts["rentByteFee"] || api.registry.createType("Balance"),
    api.consts.contracts["rentDepositOffset"] || api.registry.createType("Balance"),
    api.consts.contracts["surchargeReward"] || api.registry.createType("Balance"),
    api.consts.contracts["tombstoneDeposit"] || api.registry.createType("Balance")
  ]);
}
function fees(instanceId, api) {
  return memo(instanceId, () => {
    return queryConstants(api).pipe(map$1(([callBaseFee, contractFee, creationFee, transactionBaseFee, transactionByteFee, transferFee, rentByteFee, rentDepositOffset, surchargeReward, tombstoneDeposit]) => ({
      callBaseFee,
      contractFee,
      creationFee,
      rentByteFee,
      rentDepositOffset,
      surchargeReward,
      tombstoneDeposit,
      transactionBaseFee,
      transactionByteFee,
      transferFee
    })));
  });
}
const contracts = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  fees
}, Symbol.toStringTag, { value: "Module" }));
function events(instanceId, api) {
  return memo(instanceId, (blockHash) => combineLatest([
    api.rpc.chain.getBlock(blockHash),
    api.queryAt(blockHash).pipe(switchMap((queryAt) => queryAt.system.events()))
  ]).pipe(map$1(([block, events2]) => ({ block, events: events2 }))));
}
const FALLBACK_MAX_HASH_COUNT = 250;
const FALLBACK_PERIOD = new BN(6 * 1e3);
const MAX_FINALITY_LAG = new BN(5);
const MORTAL_PERIOD = new BN(5 * 60 * 1e3);
function latestNonce(api, address) {
  return api.derive.balances.account(address).pipe(map$1(({ accountNonce }) => accountNonce));
}
function nextNonce(api, address) {
  var _a2;
  return ((_a2 = api.rpc.system) == null ? void 0 : _a2.accountNextIndex) ? api.rpc.system.accountNextIndex(address) : latestNonce(api, address);
}
function signingHeader(api) {
  return combineLatest([
    api.rpc.chain.getHeader().pipe(switchMap((header) => (
      // check for chains at genesis (until block 1 is produced, e.g. 6s), since
      // we do need to allow transactions at chain start (also dev/seal chains)
      header.parentHash.isEmpty ? of(header) : api.rpc.chain.getHeader(header.parentHash).pipe(catchError(() => of(header)))
    ))),
    api.rpc.chain.getFinalizedHead().pipe(switchMap((hash2) => api.rpc.chain.getHeader(hash2).pipe(catchError(() => of(null)))))
  ]).pipe(map$1(([current, finalized]) => (
    // determine the hash to use, current when lag > max, else finalized
    !finalized || unwrapBlockNumber(current).sub(unwrapBlockNumber(finalized)).gt(MAX_FINALITY_LAG) ? current : finalized
  )));
}
function signingInfo(_instanceId, api) {
  return (address, nonce, era) => combineLatest([
    // retrieve nonce if none was specified
    isUndefined(nonce) ? latestNonce(api, address) : nonce === -1 ? nextNonce(api, address) : of(api.registry.createType("Index", nonce)),
    // if no era (create) or era > 0 (mortal), do block retrieval
    isUndefined(era) || isNumber(era) && era > 0 ? signingHeader(api) : of(null)
  ]).pipe(map$1(([nonce2, header]) => {
    var _a2, _b, _c, _d;
    return {
      header,
      mortalLength: Math.min(((_b = (_a2 = api.consts.system) == null ? void 0 : _a2.blockHashCount) == null ? void 0 : _b.toNumber()) || FALLBACK_MAX_HASH_COUNT, MORTAL_PERIOD.div(((_c = api.consts.babe) == null ? void 0 : _c.expectedBlockTime) || ((_d = api.consts.timestamp) == null ? void 0 : _d.minimumPeriod.muln(2)) || FALLBACK_PERIOD).iadd(MAX_FINALITY_LAG).toNumber()),
      nonce: nonce2
    };
  }));
}
const tx$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  events,
  signingInfo
}, Symbol.toStringTag, { value: "Module" }));
const derive = { accounts, alliance: treasury, bagsList: treasury, balances, bounties: treasury, chain, contracts, council: treasury, crowdloan: treasury, democracy: treasury, elections: treasury, imOnline: treasury, membership: treasury, parachains: treasury, session: treasury, society: treasury, staking: treasury, technicalCommittee: treasury, treasury, tx: tx$1 };
const checks = {
  allianceMotion: {
    instances: ["allianceMotion"],
    methods: []
  },
  bagsList: {
    instances: ["voterBagsList", "voterList", "bagsList"],
    methods: [],
    withDetect: true
  },
  contracts: {
    instances: ["contracts"],
    methods: []
  },
  council: {
    instances: ["council"],
    methods: [],
    withDetect: true
  },
  crowdloan: {
    instances: ["crowdloan"],
    methods: []
  },
  democracy: {
    instances: ["democracy"],
    methods: []
  },
  elections: {
    instances: ["phragmenElection", "electionsPhragmen", "elections", "council"],
    methods: [],
    withDetect: true
  },
  imOnline: {
    instances: ["imOnline"],
    methods: []
  },
  membership: {
    instances: ["membership"],
    methods: []
  },
  parachains: {
    instances: ["parachains", "registrar"],
    methods: []
  },
  session: {
    instances: ["session"],
    methods: []
  },
  society: {
    instances: ["society"],
    methods: []
  },
  staking: {
    instances: ["staking"],
    methods: ["erasRewardPoints"]
  },
  technicalCommittee: {
    instances: ["technicalCommittee"],
    methods: [],
    withDetect: true
  },
  treasury: {
    instances: ["treasury"],
    methods: []
  }
};
function getModuleInstances(api, specName, moduleName) {
  return api.registry.getModuleInstances(specName, moduleName) || [];
}
function injectFunctions(instanceId, api, derives) {
  const result = {};
  const names = Object.keys(derives);
  const keys = Object.keys(api.query);
  const specName = api.runtimeVersion.specName;
  const filterKeys = (q) => keys.includes(q);
  const filterInstances = (q) => getModuleInstances(api, specName, q).some(filterKeys);
  const filterMethods = (all2) => (m2) => all2.some((q) => keys.includes(q) && api.query[q][m2]);
  const getKeys2 = (s) => Object.keys(derives[s]);
  const creator = (s, m2) => derives[s][m2](instanceId, api);
  const isIncluded = (c) => !checks[c] || (checks[c].instances.some(filterKeys) && (!checks[c].methods.length || checks[c].methods.every(filterMethods(checks[c].instances))) || checks[c].withDetect && checks[c].instances.some(filterInstances));
  for (let i = 0, count = names.length; i < count; i++) {
    const name = names[i];
    isIncluded(name) && lazyDeriveSection(result, name, getKeys2, creator);
  }
  return result;
}
function getAvailableDerives(instanceId, api, custom2 = {}) {
  return {
    ...injectFunctions(instanceId, api, derive),
    ...injectFunctions(instanceId, api, custom2)
  };
}
function evaluateThis(fn) {
  return fn("return this");
}
const xglobal = typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : evaluateThis(Function);
const UNKNOWN = -99999;
function extend(that, name, value) {
  Object.defineProperty(that, name, {
    configurable: true,
    enumerable: false,
    value
  });
}
class RpcError extends Error {
  constructor(message = "", code = UNKNOWN, data) {
    super();
    __publicField(this, "code");
    __publicField(this, "data");
    __publicField(this, "message");
    __publicField(this, "name");
    __publicField(this, "stack");
    extend(this, "message", String(message));
    extend(this, "name", this.constructor.name);
    extend(this, "data", data);
    extend(this, "code", code);
    if (isFunction$1(Error.captureStackTrace)) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      const { stack } = new Error(message);
      stack && extend(this, "stack", stack);
    }
  }
}
__publicField(RpcError, "CODES", {
  ASSERT: -90009,
  INVALID_JSONRPC: -99998,
  METHOD_NOT_FOUND: -32601,
  UNKNOWN
});
function formatErrorData(data) {
  if (isUndefined(data)) {
    return "";
  }
  const formatted = `: ${isString(data) ? data.replace(/Error\("/g, "").replace(/\("/g, "(").replace(/"\)/g, ")").replace(/\(/g, ", ").replace(/\)/g, "") : stringify$1(data)}`;
  return formatted.length <= 256 ? formatted : `${formatted.substring(0, 255)}…`;
}
function checkError(error2) {
  if (error2) {
    const { code, data, message } = error2;
    throw new RpcError(`${code}: ${message}${formatErrorData(data)}`, code, data);
  }
}
class RpcCoder {
  constructor() {
    __publicField(this, "__internal__id", 0);
  }
  decodeResponse(response) {
    if (!response || response.jsonrpc !== "2.0") {
      throw new Error("Invalid jsonrpc field in decoded object");
    }
    const isSubscription2 = !isUndefined(response.params) && !isUndefined(response.method);
    if (!isNumber(response.id) && (!isSubscription2 || !isNumber(response.params.subscription) && !isString(response.params.subscription))) {
      throw new Error("Invalid id field in decoded object");
    }
    checkError(response.error);
    if (response.result === void 0 && !isSubscription2) {
      throw new Error("No result found in jsonrpc response");
    }
    if (isSubscription2) {
      checkError(response.params.error);
      return response.params.result;
    }
    return response.result;
  }
  encodeJson(method, params) {
    const [id, data] = this.encodeObject(method, params);
    return [id, stringify$1(data)];
  }
  encodeObject(method, params) {
    const id = ++this.__internal__id;
    return [id, {
      id,
      jsonrpc: "2.0",
      method,
      params
    }];
  }
}
const HTTP_URL = "http://127.0.0.1:9933";
const WS_URL = "ws://127.0.0.1:9944";
const defaults$3 = {
  HTTP_URL,
  WS_URL
};
const DEFAULT_CAPACITY = 128;
class LRUNode {
  constructor(key) {
    __publicField(this, "key");
    __publicField(this, "next");
    __publicField(this, "prev");
    this.key = key;
    this.next = this.prev = this;
  }
}
class LRUCache {
  constructor(capacity = DEFAULT_CAPACITY) {
    __publicField(this, "capacity");
    __publicField(this, "__internal__data", /* @__PURE__ */ new Map());
    __publicField(this, "__internal__refs", /* @__PURE__ */ new Map());
    __publicField(this, "__internal__length", 0);
    __publicField(this, "__internal__head");
    __publicField(this, "__internal__tail");
    this.capacity = capacity;
    this.__internal__head = this.__internal__tail = new LRUNode("<empty>");
  }
  get length() {
    return this.__internal__length;
  }
  get lengthData() {
    return this.__internal__data.size;
  }
  get lengthRefs() {
    return this.__internal__refs.size;
  }
  entries() {
    const keys = this.keys();
    const count = keys.length;
    const entries = new Array(count);
    for (let i = 0; i < count; i++) {
      const key = keys[i];
      entries[i] = [key, this.__internal__data.get(key)];
    }
    return entries;
  }
  keys() {
    const keys = [];
    if (this.__internal__length) {
      let curr = this.__internal__head;
      while (curr !== this.__internal__tail) {
        keys.push(curr.key);
        curr = curr.next;
      }
      keys.push(curr.key);
    }
    return keys;
  }
  get(key) {
    const data = this.__internal__data.get(key);
    if (data) {
      this.__internal__toHead(key);
      return data;
    }
    return null;
  }
  set(key, value) {
    if (this.__internal__data.has(key)) {
      this.__internal__toHead(key);
    } else {
      const node2 = new LRUNode(key);
      this.__internal__refs.set(node2.key, node2);
      if (this.length === 0) {
        this.__internal__head = this.__internal__tail = node2;
      } else {
        this.__internal__head.prev = node2;
        node2.next = this.__internal__head;
        this.__internal__head = node2;
      }
      if (this.__internal__length === this.capacity) {
        this.__internal__data.delete(this.__internal__tail.key);
        this.__internal__refs.delete(this.__internal__tail.key);
        this.__internal__tail = this.__internal__tail.prev;
        this.__internal__tail.next = this.__internal__head;
      } else {
        this.__internal__length += 1;
      }
    }
    this.__internal__data.set(key, value);
  }
  __internal__toHead(key) {
    const ref = this.__internal__refs.get(key);
    if (ref && ref !== this.__internal__head) {
      ref.prev.next = ref.next;
      ref.next.prev = ref.prev;
      ref.next = this.__internal__head;
      this.__internal__head.prev = ref;
      this.__internal__head = ref;
    }
  }
}
var eventemitter3 = { exports: {} };
(function(module2) {
  var has = Object.prototype.hasOwnProperty, prefix2 = "~";
  function Events2() {
  }
  if (Object.create) {
    Events2.prototype = /* @__PURE__ */ Object.create(null);
    if (!new Events2().__proto__)
      prefix2 = false;
  }
  function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
  }
  function addListener(emitter, event, fn, context, once) {
    if (typeof fn !== "function") {
      throw new TypeError("The listener must be a function");
    }
    var listener = new EE(fn, context || emitter, once), evt = prefix2 ? prefix2 + event : event;
    if (!emitter._events[evt])
      emitter._events[evt] = listener, emitter._eventsCount++;
    else if (!emitter._events[evt].fn)
      emitter._events[evt].push(listener);
    else
      emitter._events[evt] = [emitter._events[evt], listener];
    return emitter;
  }
  function clearEvent(emitter, evt) {
    if (--emitter._eventsCount === 0)
      emitter._events = new Events2();
    else
      delete emitter._events[evt];
  }
  function EventEmitter2() {
    this._events = new Events2();
    this._eventsCount = 0;
  }
  EventEmitter2.prototype.eventNames = function eventNames() {
    var names = [], events2, name;
    if (this._eventsCount === 0)
      return names;
    for (name in events2 = this._events) {
      if (has.call(events2, name))
        names.push(prefix2 ? name.slice(1) : name);
    }
    if (Object.getOwnPropertySymbols) {
      return names.concat(Object.getOwnPropertySymbols(events2));
    }
    return names;
  };
  EventEmitter2.prototype.listeners = function listeners(event) {
    var evt = prefix2 ? prefix2 + event : event, handlers = this._events[evt];
    if (!handlers)
      return [];
    if (handlers.fn)
      return [handlers.fn];
    for (var i = 0, l2 = handlers.length, ee = new Array(l2); i < l2; i++) {
      ee[i] = handlers[i].fn;
    }
    return ee;
  };
  EventEmitter2.prototype.listenerCount = function listenerCount(event) {
    var evt = prefix2 ? prefix2 + event : event, listeners = this._events[evt];
    if (!listeners)
      return 0;
    if (listeners.fn)
      return 1;
    return listeners.length;
  };
  EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix2 ? prefix2 + event : event;
    if (!this._events[evt])
      return false;
    var listeners = this._events[evt], len = arguments.length, args, i;
    if (listeners.fn) {
      if (listeners.once)
        this.removeListener(event, listeners.fn, void 0, true);
      switch (len) {
        case 1:
          return listeners.fn.call(listeners.context), true;
        case 2:
          return listeners.fn.call(listeners.context, a1), true;
        case 3:
          return listeners.fn.call(listeners.context, a1, a2), true;
        case 4:
          return listeners.fn.call(listeners.context, a1, a2, a3), true;
        case 5:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
        case 6:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
      }
      for (i = 1, args = new Array(len - 1); i < len; i++) {
        args[i - 1] = arguments[i];
      }
      listeners.fn.apply(listeners.context, args);
    } else {
      var length2 = listeners.length, j;
      for (i = 0; i < length2; i++) {
        if (listeners[i].once)
          this.removeListener(event, listeners[i].fn, void 0, true);
        switch (len) {
          case 1:
            listeners[i].fn.call(listeners[i].context);
            break;
          case 2:
            listeners[i].fn.call(listeners[i].context, a1);
            break;
          case 3:
            listeners[i].fn.call(listeners[i].context, a1, a2);
            break;
          case 4:
            listeners[i].fn.call(listeners[i].context, a1, a2, a3);
            break;
          default:
            if (!args)
              for (j = 1, args = new Array(len - 1); j < len; j++) {
                args[j - 1] = arguments[j];
              }
            listeners[i].fn.apply(listeners[i].context, args);
        }
      }
    }
    return true;
  };
  EventEmitter2.prototype.on = function on(event, fn, context) {
    return addListener(this, event, fn, context, false);
  };
  EventEmitter2.prototype.once = function once(event, fn, context) {
    return addListener(this, event, fn, context, true);
  };
  EventEmitter2.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix2 ? prefix2 + event : event;
    if (!this._events[evt])
      return this;
    if (!fn) {
      clearEvent(this, evt);
      return this;
    }
    var listeners = this._events[evt];
    if (listeners.fn) {
      if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
        clearEvent(this, evt);
      }
    } else {
      for (var i = 0, events2 = [], length2 = listeners.length; i < length2; i++) {
        if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
          events2.push(listeners[i]);
        }
      }
      if (events2.length)
        this._events[evt] = events2.length === 1 ? events2[0] : events2;
      else
        clearEvent(this, evt);
    }
    return this;
  };
  EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
    var evt;
    if (event) {
      evt = prefix2 ? prefix2 + event : event;
      if (this._events[evt])
        clearEvent(this, evt);
    } else {
      this._events = new Events2();
      this._eventsCount = 0;
    }
    return this;
  };
  EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
  EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
  EventEmitter2.prefixed = prefix2;
  EventEmitter2.EventEmitter = EventEmitter2;
  {
    module2.exports = EventEmitter2;
  }
})(eventemitter3);
var eventemitter3Exports = eventemitter3.exports;
const EventEmitter$1 = /* @__PURE__ */ getDefaultExportFromCjs(eventemitter3Exports);
const WebSocket = xglobal.WebSocket;
const known = {
  1e3: "Normal Closure",
  1001: "Going Away",
  1002: "Protocol Error",
  1003: "Unsupported Data",
  1004: "(For future)",
  1005: "No Status Received",
  1006: "Abnormal Closure",
  1007: "Invalid frame payload data",
  1008: "Policy Violation",
  1009: "Message too big",
  1010: "Missing Extension",
  1011: "Internal Error",
  1012: "Service Restart",
  1013: "Try Again Later",
  1014: "Bad Gateway",
  1015: "TLS Handshake"
};
function getWSErrorString(code) {
  if (code >= 0 && code <= 999) {
    return "(Unused)";
  } else if (code >= 1016) {
    if (code <= 1999) {
      return "(For WebSocket standard)";
    } else if (code <= 2999) {
      return "(For WebSocket extensions)";
    } else if (code <= 3999) {
      return "(For libraries and frameworks)";
    } else if (code <= 4999) {
      return "(For applications)";
    }
  }
  return known[code] || "(Unknown)";
}
const ALIASES = {
  chain_finalisedHead: "chain_finalizedHead",
  chain_subscribeFinalisedHeads: "chain_subscribeFinalizedHeads",
  chain_unsubscribeFinalisedHeads: "chain_unsubscribeFinalizedHeads"
};
const RETRY_DELAY = 2500;
const DEFAULT_TIMEOUT_MS = 60 * 1e3;
const TIMEOUT_INTERVAL = 5e3;
const l$6 = logger("api-ws");
function eraseRecord(record, cb) {
  Object.keys(record).forEach((key) => {
    if (cb) {
      cb(record[key]);
    }
    delete record[key];
  });
}
function defaultEndpointStats() {
  return { bytesRecv: 0, bytesSent: 0, cached: 0, errors: 0, requests: 0, subscriptions: 0, timeout: 0 };
}
class WsProvider {
  /**
   * @param {string | string[]}  endpoint    The endpoint url. Usually `ws://ip:9944` or `wss://ip:9944`, may provide an array of endpoint strings.
   * @param {number | false} autoConnectMs Whether to connect automatically or not (default). Provided value is used as a delay between retries.
   * @param {Record<string, string>} headers The headers provided to the underlying WebSocket
   * @param {number} [timeout] Custom timeout value used per request . Defaults to `DEFAULT_TIMEOUT_MS`
   */
  constructor(endpoint = defaults$3.WS_URL, autoConnectMs = RETRY_DELAY, headers = {}, timeout) {
    __publicField(this, "__internal__callCache", new LRUCache());
    __publicField(this, "__internal__coder");
    __publicField(this, "__internal__endpoints");
    __publicField(this, "__internal__headers");
    __publicField(this, "__internal__eventemitter");
    __publicField(this, "__internal__handlers", {});
    __publicField(this, "__internal__isReadyPromise");
    __publicField(this, "__internal__stats");
    __publicField(this, "__internal__waitingForId", {});
    __publicField(this, "__internal__autoConnectMs");
    __publicField(this, "__internal__endpointIndex");
    __publicField(this, "__internal__endpointStats");
    __publicField(this, "__internal__isConnected", false);
    __publicField(this, "__internal__subscriptions", {});
    __publicField(this, "__internal__timeoutId", null);
    __publicField(this, "__internal__websocket");
    __publicField(this, "__internal__timeout");
    __publicField(this, "__internal__emit", (type, ...args) => {
      this.__internal__eventemitter.emit(type, ...args);
    });
    __publicField(this, "__internal__onSocketClose", (event) => {
      const error2 = new Error(`disconnected from ${this.endpoint}: ${event.code}:: ${event.reason || getWSErrorString(event.code)}`);
      if (this.__internal__autoConnectMs > 0) {
        l$6.error(error2.message);
      }
      this.__internal__isConnected = false;
      if (this.__internal__websocket) {
        this.__internal__websocket.onclose = null;
        this.__internal__websocket.onerror = null;
        this.__internal__websocket.onmessage = null;
        this.__internal__websocket.onopen = null;
        this.__internal__websocket = null;
      }
      if (this.__internal__timeoutId) {
        clearInterval(this.__internal__timeoutId);
        this.__internal__timeoutId = null;
      }
      eraseRecord(this.__internal__handlers, (h) => {
        try {
          h.callback(error2, void 0);
        } catch (err) {
          l$6.error(err);
        }
      });
      eraseRecord(this.__internal__waitingForId);
      this.__internal__endpointStats = defaultEndpointStats();
      this.__internal__emit("disconnected");
      if (this.__internal__autoConnectMs > 0) {
        setTimeout(() => {
          this.connectWithRetry().catch(noop$2);
        }, this.__internal__autoConnectMs);
      }
    });
    __publicField(this, "__internal__onSocketError", (error2) => {
      l$6.debug(() => ["socket error", error2]);
      this.__internal__emit("error", error2);
    });
    __publicField(this, "__internal__onSocketMessage", (message) => {
      l$6.debug(() => ["received", message.data]);
      const bytesRecv = message.data.length;
      this.__internal__endpointStats.bytesRecv += bytesRecv;
      this.__internal__stats.total.bytesRecv += bytesRecv;
      const response = JSON.parse(message.data);
      return isUndefined(response.method) ? this.__internal__onSocketMessageResult(response) : this.__internal__onSocketMessageSubscribe(response);
    });
    __publicField(this, "__internal__onSocketMessageResult", (response) => {
      const handler = this.__internal__handlers[response.id];
      if (!handler) {
        l$6.debug(() => `Unable to find handler for id=${response.id}`);
        return;
      }
      try {
        const { method, params, subscription } = handler;
        const result = this.__internal__coder.decodeResponse(response);
        handler.callback(null, result);
        if (subscription) {
          const subId = `${subscription.type}::${result}`;
          this.__internal__subscriptions[subId] = objectSpread({}, subscription, {
            method,
            params
          });
          if (this.__internal__waitingForId[subId]) {
            this.__internal__onSocketMessageSubscribe(this.__internal__waitingForId[subId]);
          }
        }
      } catch (error2) {
        this.__internal__endpointStats.errors++;
        this.__internal__stats.total.errors++;
        handler.callback(error2, void 0);
      }
      delete this.__internal__handlers[response.id];
    });
    __publicField(this, "__internal__onSocketMessageSubscribe", (response) => {
      if (!response.method) {
        throw new Error("No method found in JSONRPC response");
      }
      const method = ALIASES[response.method] || response.method;
      const subId = `${method}::${response.params.subscription}`;
      const handler = this.__internal__subscriptions[subId];
      if (!handler) {
        this.__internal__waitingForId[subId] = response;
        l$6.debug(() => `Unable to find handler for subscription=${subId}`);
        return;
      }
      delete this.__internal__waitingForId[subId];
      try {
        const result = this.__internal__coder.decodeResponse(response);
        handler.callback(null, result);
      } catch (error2) {
        this.__internal__endpointStats.errors++;
        this.__internal__stats.total.errors++;
        handler.callback(error2, void 0);
      }
    });
    __publicField(this, "__internal__onSocketOpen", () => {
      if (this.__internal__websocket === null) {
        throw new Error("WebSocket cannot be null in onOpen");
      }
      l$6.debug(() => ["connected to", this.endpoint]);
      this.__internal__isConnected = true;
      this.__internal__resubscribe();
      this.__internal__emit("connected");
      return true;
    });
    __publicField(this, "__internal__resubscribe", () => {
      const subscriptions = this.__internal__subscriptions;
      this.__internal__subscriptions = {};
      Promise.all(Object.keys(subscriptions).map(async (id) => {
        const { callback, method, params, type } = subscriptions[id];
        if (type.startsWith("author_")) {
          return;
        }
        try {
          await this.subscribe(type, method, params, callback);
        } catch (error2) {
          l$6.error(error2);
        }
      })).catch(l$6.error);
    });
    __publicField(this, "__internal__timeoutHandlers", () => {
      const now = Date.now();
      const ids = Object.keys(this.__internal__handlers);
      for (let i = 0, count = ids.length; i < count; i++) {
        const handler = this.__internal__handlers[ids[i]];
        if (now - handler.start > this.__internal__timeout) {
          try {
            handler.callback(new Error(`No response received from RPC endpoint in ${this.__internal__timeout / 1e3}s`), void 0);
          } catch {
          }
          this.__internal__endpointStats.timeout++;
          this.__internal__stats.total.timeout++;
          delete this.__internal__handlers[ids[i]];
        }
      }
    });
    const endpoints = Array.isArray(endpoint) ? endpoint : [endpoint];
    if (endpoints.length === 0) {
      throw new Error("WsProvider requires at least one Endpoint");
    }
    endpoints.forEach((endpoint2) => {
      if (!/^(wss|ws):\/\//.test(endpoint2)) {
        throw new Error(`Endpoint should start with 'ws://', received '${endpoint2}'`);
      }
    });
    this.__internal__eventemitter = new EventEmitter$1();
    this.__internal__autoConnectMs = autoConnectMs || 0;
    this.__internal__coder = new RpcCoder();
    this.__internal__endpointIndex = -1;
    this.__internal__endpoints = endpoints;
    this.__internal__headers = headers;
    this.__internal__websocket = null;
    this.__internal__stats = {
      active: { requests: 0, subscriptions: 0 },
      total: defaultEndpointStats()
    };
    this.__internal__endpointStats = defaultEndpointStats();
    this.__internal__timeout = timeout || DEFAULT_TIMEOUT_MS;
    if (autoConnectMs && autoConnectMs > 0) {
      this.connectWithRetry().catch(noop$2);
    }
    this.__internal__isReadyPromise = new Promise((resolve) => {
      this.__internal__eventemitter.once("connected", () => {
        resolve(this);
      });
    });
  }
  /**
   * @summary `true` when this provider supports subscriptions
   */
  get hasSubscriptions() {
    return true;
  }
  /**
   * @summary `true` when this provider supports clone()
   */
  get isClonable() {
    return true;
  }
  /**
   * @summary Whether the node is connected or not.
   * @return {boolean} true if connected
   */
  get isConnected() {
    return this.__internal__isConnected;
  }
  /**
   * @description Promise that resolves the first time we are connected and loaded
   */
  get isReady() {
    return this.__internal__isReadyPromise;
  }
  get endpoint() {
    return this.__internal__endpoints[this.__internal__endpointIndex];
  }
  /**
   * @description Returns a clone of the object
   */
  clone() {
    return new WsProvider(this.__internal__endpoints);
  }
  selectEndpointIndex(endpoints) {
    return (this.__internal__endpointIndex + 1) % endpoints.length;
  }
  /**
   * @summary Manually connect
   * @description The [[WsProvider]] connects automatically by default, however if you decided otherwise, you may
   * connect manually using this method.
   */
  // eslint-disable-next-line @typescript-eslint/require-await
  async connect() {
    if (this.__internal__websocket) {
      throw new Error("WebSocket is already connected");
    }
    try {
      this.__internal__endpointIndex = this.selectEndpointIndex(this.__internal__endpoints);
      this.__internal__websocket = typeof xglobal.WebSocket !== "undefined" && isChildClass(xglobal.WebSocket, WebSocket) ? new WebSocket(this.endpoint) : new WebSocket(this.endpoint, void 0, {
        headers: this.__internal__headers
      });
      if (this.__internal__websocket) {
        this.__internal__websocket.onclose = this.__internal__onSocketClose;
        this.__internal__websocket.onerror = this.__internal__onSocketError;
        this.__internal__websocket.onmessage = this.__internal__onSocketMessage;
        this.__internal__websocket.onopen = this.__internal__onSocketOpen;
      }
      this.__internal__timeoutId = setInterval(() => this.__internal__timeoutHandlers(), TIMEOUT_INTERVAL);
    } catch (error2) {
      l$6.error(error2);
      this.__internal__emit("error", error2);
      throw error2;
    }
  }
  /**
   * @description Connect, never throwing an error, but rather forcing a retry
   */
  async connectWithRetry() {
    if (this.__internal__autoConnectMs > 0) {
      try {
        await this.connect();
      } catch {
        setTimeout(() => {
          this.connectWithRetry().catch(noop$2);
        }, this.__internal__autoConnectMs);
      }
    }
  }
  /**
   * @description Manually disconnect from the connection, clearing auto-connect logic
   */
  // eslint-disable-next-line @typescript-eslint/require-await
  async disconnect() {
    this.__internal__autoConnectMs = 0;
    try {
      if (this.__internal__websocket) {
        this.__internal__websocket.close(1e3);
      }
    } catch (error2) {
      l$6.error(error2);
      this.__internal__emit("error", error2);
      throw error2;
    }
  }
  /**
   * @description Returns the connection stats
   */
  get stats() {
    return {
      active: {
        requests: Object.keys(this.__internal__handlers).length,
        subscriptions: Object.keys(this.__internal__subscriptions).length
      },
      total: this.__internal__stats.total
    };
  }
  get endpointStats() {
    return this.__internal__endpointStats;
  }
  /**
   * @summary Listens on events after having subscribed using the [[subscribe]] function.
   * @param  {ProviderInterfaceEmitted} type Event
   * @param  {ProviderInterfaceEmitCb}  sub  Callback
   * @return unsubscribe function
   */
  on(type, sub) {
    this.__internal__eventemitter.on(type, sub);
    return () => {
      this.__internal__eventemitter.removeListener(type, sub);
    };
  }
  /**
   * @summary Send JSON data using WebSockets to configured HTTP Endpoint or queue.
   * @param method The RPC methods to execute
   * @param params Encoded parameters as applicable for the method
   * @param subscription Subscription details (internally used)
   */
  send(method, params, isCacheable, subscription) {
    this.__internal__endpointStats.requests++;
    this.__internal__stats.total.requests++;
    const [id, body] = this.__internal__coder.encodeJson(method, params);
    let resultPromise = isCacheable ? this.__internal__callCache.get(body) : null;
    if (!resultPromise) {
      resultPromise = this.__internal__send(id, body, method, params, subscription);
      if (isCacheable) {
        this.__internal__callCache.set(body, resultPromise);
      }
    } else {
      this.__internal__endpointStats.cached++;
      this.__internal__stats.total.cached++;
    }
    return resultPromise;
  }
  async __internal__send(id, body, method, params, subscription) {
    return new Promise((resolve, reject) => {
      try {
        if (!this.isConnected || this.__internal__websocket === null) {
          throw new Error("WebSocket is not connected");
        }
        const callback = (error2, result) => {
          error2 ? reject(error2) : resolve(result);
        };
        l$6.debug(() => ["calling", method, body]);
        this.__internal__handlers[id] = {
          callback,
          method,
          params,
          start: Date.now(),
          subscription
        };
        const bytesSent = body.length;
        this.__internal__endpointStats.bytesSent += bytesSent;
        this.__internal__stats.total.bytesSent += bytesSent;
        this.__internal__websocket.send(body);
      } catch (error2) {
        this.__internal__endpointStats.errors++;
        this.__internal__stats.total.errors++;
        reject(error2);
      }
    });
  }
  /**
   * @name subscribe
   * @summary Allows subscribing to a specific event.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * const provider = new WsProvider('ws://127.0.0.1:9944');
   * const rpc = new Rpc(provider);
   *
   * rpc.state.subscribeStorage([[storage.system.account, <Address>]], (_, values) => {
   *   console.log(values)
   * }).then((subscriptionId) => {
   *   console.log('balance changes subscription id: ', subscriptionId)
   * })
   * ```
   */
  subscribe(type, method, params, callback) {
    this.__internal__endpointStats.subscriptions++;
    this.__internal__stats.total.subscriptions++;
    return this.send(method, params, false, { callback, type });
  }
  /**
   * @summary Allows unsubscribing to subscriptions made with [[subscribe]].
   */
  async unsubscribe(type, method, id) {
    const subscription = `${type}::${id}`;
    if (isUndefined(this.__internal__subscriptions[subscription])) {
      l$6.debug(() => `Unable to find active subscription=${subscription}`);
      return false;
    }
    delete this.__internal__subscriptions[subscription];
    try {
      return this.isConnected && !isNull(this.__internal__websocket) ? this.send(method, [id]) : true;
    } catch {
      return false;
    }
  }
}
const l$5 = /* @__PURE__ */ logger("api/util");
function filterEvents(txHash, { block: { extrinsics, header } }, allEvents, status) {
  for (const [txIndex, x] of extrinsics.entries()) {
    if (x.hash.eq(txHash)) {
      return {
        blockNumber: isCompact(header.number) ? header.number.unwrap() : header.number,
        events: allEvents.filter(({ phase }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eqn(txIndex)),
        txIndex
      };
    }
  }
  if (status.isInBlock) {
    const allHashes = extrinsics.map((x) => x.hash.toHex());
    l$5.warn(`block ${header.hash.toHex()}: Unable to find extrinsic ${txHash.toHex()} inside ${allHashes.join(", ")}`);
  }
  return {};
}
function isKeyringPair(account2) {
  return isFunction$1(account2.sign);
}
function decorateDeriveSections(decorateMethod, derives) {
  const getKeys2 = (s) => Object.keys(derives[s]);
  const creator = (s, m2) => decorateMethod(derives[s][m2]);
  const result = {};
  const names = Object.keys(derives);
  for (let i = 0, count = names.length; i < count; i++) {
    lazyDeriveSection(result, names[i], getKeys2, creator);
  }
  return result;
}
const recordIdentity = (record) => record;
function filterAndApply(events2, section2, methods, onFound) {
  return events2.filter(({ event }) => section2 === event.section && methods.includes(event.method)).map((record) => onFound(record));
}
function getDispatchError({ event: { data: [dispatchError] } }) {
  return dispatchError;
}
function getDispatchInfo({ event: { data, method } }) {
  return method === "ExtrinsicSuccess" ? data[0] : data[1];
}
function extractError(events2 = []) {
  return filterAndApply(events2, "system", ["ExtrinsicFailed"], getDispatchError)[0];
}
function extractInfo(events2 = []) {
  return filterAndApply(events2, "system", ["ExtrinsicFailed", "ExtrinsicSuccess"], getDispatchInfo)[0];
}
class SubmittableResult {
  constructor({ blockNumber, dispatchError, dispatchInfo, events: events2, internalError, status, txHash, txIndex }) {
    __publicField(this, "dispatchError");
    __publicField(this, "dispatchInfo");
    __publicField(this, "internalError");
    __publicField(this, "events");
    __publicField(this, "status");
    __publicField(this, "txHash");
    __publicField(this, "txIndex");
    __publicField(this, "blockNumber");
    this.dispatchError = dispatchError || extractError(events2);
    this.dispatchInfo = dispatchInfo || extractInfo(events2);
    this.events = events2 || [];
    this.internalError = internalError;
    this.status = status;
    this.txHash = txHash;
    this.txIndex = txIndex;
    this.blockNumber = blockNumber;
  }
  get isCompleted() {
    return this.isError || this.status.isInBlock || this.status.isFinalized;
  }
  get isError() {
    return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;
  }
  get isFinalized() {
    return this.status.isFinalized;
  }
  get isInBlock() {
    return this.status.isInBlock;
  }
  get isWarning() {
    return this.status.isRetracted;
  }
  /**
   * @description Filters EventRecords for the specified method & section (there could be multiple)
   */
  filterRecords(section2, method) {
    return filterAndApply(this.events, section2, Array.isArray(method) ? method : [method], recordIdentity);
  }
  /**
   * @description Finds an EventRecord for the specified method & section
   */
  findRecord(section2, method) {
    return this.filterRecords(section2, method)[0];
  }
  /**
   * @description Creates a human representation of the output
   */
  toHuman(isExtended) {
    var _a2, _b, _c;
    return {
      dispatchError: (_a2 = this.dispatchError) == null ? void 0 : _a2.toHuman(),
      dispatchInfo: (_b = this.dispatchInfo) == null ? void 0 : _b.toHuman(),
      events: this.events.map((e) => e.toHuman(isExtended)),
      internalError: (_c = this.internalError) == null ? void 0 : _c.message.toString(),
      status: this.status.toHuman(isExtended)
    };
  }
}
function makeEraOptions(api, registry, partialOptions, { header, mortalLength, nonce }) {
  if (!header) {
    if (partialOptions.era && !partialOptions.blockHash) {
      throw new Error("Expected blockHash to be passed alongside non-immortal era options");
    }
    if (isNumber(partialOptions.era)) {
      delete partialOptions.era;
      delete partialOptions.blockHash;
    }
    return makeSignOptions(api, partialOptions, { nonce });
  }
  return makeSignOptions(api, partialOptions, {
    blockHash: header.hash,
    era: registry.createTypeUnsafe("ExtrinsicEra", [{
      current: header.number,
      period: partialOptions.era || mortalLength
    }]),
    nonce
  });
}
function makeSignAndSendOptions(partialOptions, statusCb) {
  let options = {};
  if (isFunction$1(partialOptions)) {
    statusCb = partialOptions;
  } else {
    options = objectSpread({}, partialOptions);
  }
  return [options, statusCb];
}
function makeSignOptions(api, partialOptions, extras) {
  return objectSpread({ blockHash: api.genesisHash, genesisHash: api.genesisHash }, partialOptions, extras, { runtimeVersion: api.runtimeVersion, signedExtensions: api.registry.signedExtensions, version: api.extrinsicType });
}
function optionsOrNonce(partialOptions = {}) {
  return isBn(partialOptions) || isNumber(partialOptions) ? { nonce: partialOptions } : partialOptions;
}
function createClass({ api, apiType, blockHash, decorateMethod }) {
  const ExtrinsicBase2 = api.registry.createClass("Extrinsic");
  class Submittable extends ExtrinsicBase2 {
    constructor(registry, extrinsic) {
      super(registry, extrinsic, { version: api.extrinsicType });
      __publicField(this, "__internal__ignoreStatusCb");
      __publicField(this, "__internal__transformResult", identity$2);
      __publicField(this, "__internal__observeSign", (account2, partialOptions) => {
        const address = isKeyringPair(account2) ? account2.address : account2.toString();
        const options = optionsOrNonce(partialOptions);
        return api.derive.tx.signingInfo(address, options.nonce, options.era).pipe(first(), mergeMap(async (signingInfo2) => {
          const eraOptions = makeEraOptions(api, this.registry, options, signingInfo2);
          let updateId = -1;
          if (isKeyringPair(account2)) {
            this.sign(account2, eraOptions);
          } else {
            updateId = await this.__internal__signViaSigner(address, eraOptions, signingInfo2.header);
          }
          return { options: eraOptions, updateId };
        }));
      });
      __publicField(this, "__internal__observeStatus", (txHash, status) => {
        if (!status.isFinalized && !status.isInBlock) {
          return of(this.__internal__transformResult(new SubmittableResult({
            status,
            txHash
          })));
        }
        const blockHash2 = status.isInBlock ? status.asInBlock : status.asFinalized;
        return api.derive.tx.events(blockHash2).pipe(map$1(({ block, events: events2 }) => this.__internal__transformResult(new SubmittableResult({
          ...filterEvents(txHash, block, events2, status),
          status,
          txHash
        }))), catchError((internalError) => of(this.__internal__transformResult(new SubmittableResult({
          internalError,
          status,
          txHash
        })))));
      });
      __publicField(this, "__internal__observeSend", (info2) => {
        return api.rpc.author.submitExtrinsic(this).pipe(tap((hash2) => {
          this.__internal__updateSigner(hash2, info2);
        }));
      });
      __publicField(this, "__internal__observeSubscribe", (info2) => {
        const txHash = this.hash;
        return api.rpc.author.submitAndWatchExtrinsic(this).pipe(switchMap((status) => this.__internal__observeStatus(txHash, status)), tap((status) => {
          this.__internal__updateSigner(status, info2);
        }));
      });
      __publicField(this, "__internal__signViaSigner", async (address, options, header) => {
        const signer = options.signer || api.signer;
        if (!signer) {
          throw new Error("No signer specified, either via api.setSigner or via sign options. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.");
        }
        const payload = this.registry.createTypeUnsafe("SignerPayload", [objectSpread({}, options, {
          address,
          blockNumber: header ? header.number : 0,
          method: this.method
        })]);
        let result;
        if (isFunction$1(signer.signPayload)) {
          result = await signer.signPayload(payload.toPayload());
        } else if (isFunction$1(signer.signRaw)) {
          result = await signer.signRaw(payload.toRaw());
        } else {
          throw new Error("Invalid signer interface, it should implement either signPayload or signRaw (or both)");
        }
        super.addSignature(address, result.signature, payload.toPayload());
        return result.id;
      });
      __publicField(this, "__internal__updateSigner", (status, info2) => {
        if (info2 && info2.updateId !== -1) {
          const { options, updateId } = info2;
          const signer = options.signer || api.signer;
          if (signer && isFunction$1(signer.update)) {
            signer.update(updateId, status);
          }
        }
      });
      this.__internal__ignoreStatusCb = apiType === "rxjs";
    }
    get hasDryRun() {
      var _a2;
      return isFunction$1((_a2 = api.rpc.system) == null ? void 0 : _a2.dryRun);
    }
    get hasPaymentInfo() {
      var _a2;
      return isFunction$1((_a2 = api.call.transactionPaymentApi) == null ? void 0 : _a2.queryInfo);
    }
    // dry run an extrinsic
    dryRun(account2, optionsOrHash) {
      if (!this.hasDryRun) {
        throw new Error("The system.dryRun RPC call is not available in your environment");
      }
      if (blockHash || isString(optionsOrHash) || isU8a(optionsOrHash)) {
        return decorateMethod(() => api.rpc.system.dryRun(this.toHex(), blockHash || optionsOrHash));
      }
      return decorateMethod(() => this.__internal__observeSign(account2, optionsOrHash).pipe(switchMap(() => api.rpc.system.dryRun(this.toHex()))))();
    }
    // calculate the payment info for this transaction (if signed and submitted)
    paymentInfo(account2, optionsOrHash) {
      if (!this.hasPaymentInfo) {
        throw new Error("The transactionPaymentApi.queryInfo runtime call is not available in your environment");
      }
      if (blockHash || isString(optionsOrHash) || isU8a(optionsOrHash)) {
        return decorateMethod(() => api.callAt(blockHash || optionsOrHash).pipe(switchMap((callAt) => {
          const u8a = this.toU8a();
          return callAt.transactionPaymentApi.queryInfo(u8a, u8a.length);
        })));
      }
      const [allOptions] = makeSignAndSendOptions(optionsOrHash);
      const address = isKeyringPair(account2) ? account2.address : account2.toString();
      return decorateMethod(() => api.derive.tx.signingInfo(address, allOptions.nonce, allOptions.era).pipe(first(), switchMap((signingInfo2) => {
        const eraOptions = makeEraOptions(api, this.registry, allOptions, signingInfo2);
        const signOptions = makeSignOptions(api, eraOptions, {});
        const u8a = api.tx(this.toU8a()).signFake(address, signOptions).toU8a();
        return api.call.transactionPaymentApi.queryInfo(u8a, u8a.length);
      })))();
    }
    // send implementation for both immediate Hash and statusCb variants
    send(statusCb) {
      const isSubscription2 = api.hasSubscriptions && (this.__internal__ignoreStatusCb || !!statusCb);
      return decorateMethod(isSubscription2 ? this.__internal__observeSubscribe : this.__internal__observeSend)(statusCb);
    }
    /**
     * @description Signs a transaction, returning `this` to allow chaining. E.g.: `signAsync(...).send()`. Like `.signAndSend` this will retrieve the nonce and blockHash to send the tx with.
     */
    signAsync(account2, partialOptions) {
      return decorateMethod(() => this.__internal__observeSign(account2, partialOptions).pipe(map$1(() => this)))();
    }
    // signAndSend implementation for all 3 cases above
    signAndSend(account2, partialOptions, optionalStatusCb) {
      const [options, statusCb] = makeSignAndSendOptions(partialOptions, optionalStatusCb);
      const isSubscription2 = api.hasSubscriptions && (this.__internal__ignoreStatusCb || !!statusCb);
      return decorateMethod(
        () => this.__internal__observeSign(account2, options).pipe(switchMap((info2) => isSubscription2 ? this.__internal__observeSubscribe(info2) : this.__internal__observeSend(info2)))
        // FIXME This is wrong, SubmittableResult is _not_ a codec
      )(statusCb);
    }
    // adds a transform to the result, applied before result is returned
    withResultTransform(transform) {
      this.__internal__transformResult = transform;
      return this;
    }
  }
  return Submittable;
}
function createSubmittable(apiType, api, decorateMethod, registry, blockHash) {
  const Submittable = createClass({ api, apiType, blockHash, decorateMethod });
  return (extrinsic) => new Submittable(registry || api.registry, extrinsic);
}
const l$4 = logger("api/augment");
function logLength(type, values, and = []) {
  return values.length ? ` ${values.length} ${type}${and.length ? " and" : ""}` : "";
}
function logValues(type, values) {
  return values.length ? `
	${type.padStart(7)}: ${values.sort().join(", ")}` : "";
}
function warn(prefix2, type, [added, removed]) {
  if (added.length || removed.length) {
    l$4.warn(`api.${prefix2}: Found${logLength("added", added, removed)}${logLength("removed", removed)} ${type}:${logValues("added", added)}${logValues("removed", removed)}`);
  }
}
function findSectionExcludes(a, b) {
  return a.filter((s) => !b.includes(s));
}
function findSectionIncludes(a, b) {
  return a.filter((s) => b.includes(s));
}
function extractSections(src2, dst) {
  const srcSections = Object.keys(src2);
  const dstSections = Object.keys(dst);
  return [
    findSectionExcludes(srcSections, dstSections),
    findSectionExcludes(dstSections, srcSections)
  ];
}
function findMethodExcludes(src2, dst) {
  const srcSections = Object.keys(src2);
  const dstSections = findSectionIncludes(Object.keys(dst), srcSections);
  const excludes2 = [];
  for (let s = 0, scount = dstSections.length; s < scount; s++) {
    const section2 = dstSections[s];
    const srcMethods = Object.keys(src2[section2]);
    const dstMethods = Object.keys(dst[section2]);
    for (let d = 0, mcount = dstMethods.length; d < mcount; d++) {
      const method = dstMethods[d];
      if (!srcMethods.includes(method)) {
        excludes2.push(`${section2}.${method}`);
      }
    }
  }
  return excludes2;
}
function extractMethods(src2, dst) {
  return [
    findMethodExcludes(dst, src2),
    findMethodExcludes(src2, dst)
  ];
}
function augmentObject(prefix2, src2, dst, fromEmpty = false) {
  fromEmpty && objectClear(dst);
  if (prefix2 && Object.keys(dst).length) {
    warn(prefix2, "modules", extractSections(src2, dst));
    warn(prefix2, "calls", extractMethods(src2, dst));
  }
  const sections = Object.keys(src2);
  for (let i = 0, count = sections.length; i < count; i++) {
    const section2 = sections[i];
    const methods = src2[section2];
    if (!dst[section2]) {
      dst[section2] = {};
    }
    lazyMethods(dst[section2], Object.keys(methods), (m2) => methods[m2]);
  }
  return dst;
}
function sig({ lookup: lookup14 }, { method, section: section2 }, args) {
  return `${section2}.${method}(${args.map((a) => lookup14.getTypeDef(a).type).join(", ")})`;
}
function extractStorageArgs(registry, creator, _args) {
  const args = _args.filter((a) => !isUndefined(a));
  if (creator.meta.type.isPlain) {
    if (args.length !== 0) {
      throw new Error(`${sig(registry, creator, [])} does not take any arguments, ${args.length} found`);
    }
  } else {
    const { hashers, key } = creator.meta.type.asMap;
    const keys = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple.map((t) => t);
    if (args.length !== keys.length) {
      throw new Error(`${sig(registry, creator, keys)} is a map, requiring ${keys.length} arguments, ${args.length} found`);
    }
  }
  return [creator, args];
}
class Events {
  constructor() {
    __publicField(this, "__internal__eventemitter", new EventEmitter$1());
  }
  emit(type, ...args) {
    return this.__internal__eventemitter.emit(type, ...args);
  }
  /**
   * @description Attach an eventemitter handler to listen to a specific event
   *
   * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
   * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.on('connected', (): void => {
   *   console.log('API has been connected to the endpoint');
   * });
   *
   * api.on('disconnected', (): void => {
   *   console.log('API has been disconnected from the endpoint');
   * });
   * ```
   */
  on(type, handler) {
    this.__internal__eventemitter.on(type, handler);
    return this;
  }
  /**
   * @description Remove the given eventemitter handler
   *
   * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`
   * @param handler The callback to unregister.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * const handler = (): void => {
   *  console.log('Connected !);
   * };
   *
   * // Start listening
   * api.on('connected', handler);
   *
   * // Stop listening
   * api.off('connected', handler);
   * ```
   */
  off(type, handler) {
    this.__internal__eventemitter.removeListener(type, handler);
    return this;
  }
  /**
   * @description Attach an one-time eventemitter handler to listen to a specific event
   *
   * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
   * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.once('connected', (): void => {
   *   console.log('API has been connected to the endpoint');
   * });
   *
   * api.once('disconnected', (): void => {
   *   console.log('API has been disconnected from the endpoint');
   * });
   * ```
   */
  once(type, handler) {
    this.__internal__eventemitter.once(type, handler);
    return this;
  }
}
const PAGE_SIZE_K = 1e3;
const PAGE_SIZE_V = 250;
const PAGE_SIZE_Q = 50;
const l$3 = logger("api/init");
let instanceCounter = 0;
function getAtQueryFn(api, { method, section: section2 }) {
  return assertReturn(api.rx.query[section2] && api.rx.query[section2][method], () => `query.${section2}.${method} is not available in this version of the metadata`);
}
class Decorate extends Events {
  /**
   * @description Create an instance of the class
   *
   * @param options Options object to create API instance or a Provider instance
   *
   * @example
   * <BR>
   *
   * ```javascript
   * import Api from '@polkadot/api/promise';
   *
   * const api = new Api().isReady();
   *
   * api.rpc.subscribeNewHeads((header) => {
   *   console.log(`new block #${header.number.toNumber()}`);
   * });
   * ```
   */
  constructor(options, type, decorateMethod) {
    var _a2;
    super();
    __publicField(this, "__internal__instanceId");
    __publicField(this, "__internal__runtimeLog", {});
    __publicField(this, "__internal__registry");
    __publicField(this, "__internal__storageGetQ", []);
    __publicField(this, "__internal__storageSubQ", []);
    // HACK Use BN import so decorateDerive works... yes, wtf.
    __publicField(this, "__phantom", new BN(0));
    __publicField(this, "_type");
    __publicField(this, "_call", {});
    __publicField(this, "_consts", {});
    __publicField(this, "_derive");
    __publicField(this, "_errors", {});
    __publicField(this, "_events", {});
    __publicField(this, "_extrinsics");
    __publicField(this, "_extrinsicType", GenericExtrinsic.LATEST_EXTRINSIC_VERSION);
    __publicField(this, "_genesisHash");
    __publicField(this, "_isConnected");
    __publicField(this, "_isReady", false);
    __publicField(this, "_query", {});
    __publicField(this, "_queryMulti");
    __publicField(this, "_rpc");
    __publicField(this, "_rpcCore");
    __publicField(this, "_runtimeMap", {});
    __publicField(this, "_runtimeChain");
    __publicField(this, "_runtimeMetadata");
    __publicField(this, "_runtimeVersion");
    __publicField(this, "_rx", { call: {}, consts: {}, query: {}, tx: {} });
    __publicField(this, "_options");
    /**
     * This is the one and only method concrete children classes need to implement.
     * It's a higher-order function, which takes one argument
     * `method: Method extends (...args: any[]) => Observable<any>`
     * (and one optional `options`), and should return the user facing method.
     * For example:
     * - For ApiRx, `decorateMethod` should just be identity, because the input
     * function is already an Observable
     * - For ApiPromise, `decorateMethod` should return a function that takes all
     * the parameters from `method`, adds an optional `callback` argument, and
     * returns a Promise.
     *
     * We could easily imagine other user-facing interfaces, which are simply
     * implemented by transforming the Observable to Stream/Iterator/Kefir/Bacon
     * via `decorateMethod`.
     */
    __publicField(this, "_decorateMethod");
    /**
     * Put the `this.onCall` function of ApiRx here, because it is needed by
     * `api._rx`.
     */
    __publicField(this, "_rxDecorateMethod", (method) => {
      return method;
    });
    this.__internal__instanceId = `${++instanceCounter}`;
    this.__internal__registry = ((_a2 = options.source) == null ? void 0 : _a2.registry) || options.registry || new TypeRegistry();
    this._rx.callAt = (blockHash, knownVersion) => from(this.at(blockHash, knownVersion)).pipe(map$1((a) => a.rx.call));
    this._rx.queryAt = (blockHash, knownVersion) => from(this.at(blockHash, knownVersion)).pipe(map$1((a) => a.rx.query));
    this._rx.registry = this.__internal__registry;
    this._decorateMethod = decorateMethod;
    this._options = options;
    this._type = type;
    const provider = options.source ? options.source._rpcCore.provider.isClonable ? options.source._rpcCore.provider.clone() : options.source._rpcCore.provider : options.provider || new WsProvider();
    this._rpcCore = new RpcCore(this.__internal__instanceId, this.__internal__registry, {
      isPedantic: this._options.isPedantic,
      provider,
      userRpc: this._options.rpc
    });
    this._isConnected = new BehaviorSubject(this._rpcCore.provider.isConnected);
    this._rx.hasSubscriptions = this._rpcCore.provider.hasSubscriptions;
  }
  /**
   * @description Return the current used registry
   */
  get registry() {
    return this.__internal__registry;
  }
  /**
   * @description Creates an instance of a type as registered
   */
  createType(type, ...params) {
    return this.__internal__registry.createType(type, ...params);
  }
  /**
   * @description Register additional user-defined of chain-specific types in the type registry
   */
  registerTypes(types2) {
    types2 && this.__internal__registry.register(types2);
  }
  /**
   * @returns `true` if the API operates with subscriptions
   */
  get hasSubscriptions() {
    return this._rpcCore.provider.hasSubscriptions;
  }
  /**
   * @returns `true` if the API decorate multi-key queries
   */
  get supportMulti() {
    return this._rpcCore.provider.hasSubscriptions || !!this._rpcCore.state.queryStorageAt;
  }
  _emptyDecorated(registry, blockHash) {
    return {
      call: {},
      consts: {},
      errors: {},
      events: {},
      query: {},
      registry,
      rx: {
        call: {},
        query: {}
      },
      tx: createSubmittable(this._type, this._rx, this._decorateMethod, registry, blockHash)
    };
  }
  _createDecorated(registry, fromEmpty, decoratedApi, blockHash) {
    if (!decoratedApi) {
      decoratedApi = this._emptyDecorated(registry.registry, blockHash);
    }
    if (fromEmpty || !registry.decoratedMeta) {
      registry.decoratedMeta = expandMetadata(registry.registry, registry.metadata);
    }
    const runtime2 = this._decorateCalls(registry, this._decorateMethod, blockHash);
    const runtimeRx = this._decorateCalls(registry, this._rxDecorateMethod, blockHash);
    const storage2 = this._decorateStorage(registry.decoratedMeta, this._decorateMethod, blockHash);
    const storageRx = this._decorateStorage(registry.decoratedMeta, this._rxDecorateMethod, blockHash);
    augmentObject("consts", registry.decoratedMeta.consts, decoratedApi.consts, fromEmpty);
    augmentObject("errors", registry.decoratedMeta.errors, decoratedApi.errors, fromEmpty);
    augmentObject("events", registry.decoratedMeta.events, decoratedApi.events, fromEmpty);
    augmentObject("query", storage2, decoratedApi.query, fromEmpty);
    augmentObject("query", storageRx, decoratedApi.rx.query, fromEmpty);
    augmentObject("call", runtime2, decoratedApi.call, fromEmpty);
    augmentObject("call", runtimeRx, decoratedApi.rx.call, fromEmpty);
    decoratedApi.findCall = (callIndex) => findCall(registry.registry, callIndex);
    decoratedApi.findError = (errorIndex) => findError(registry.registry, errorIndex);
    decoratedApi.queryMulti = blockHash ? this._decorateMultiAt(decoratedApi, this._decorateMethod, blockHash) : this._decorateMulti(this._decorateMethod);
    decoratedApi.runtimeVersion = registry.runtimeVersion;
    return {
      createdAt: blockHash,
      decoratedApi,
      decoratedMeta: registry.decoratedMeta
    };
  }
  _injectMetadata(registry, fromEmpty = false) {
    if (fromEmpty || !registry.decoratedApi) {
      registry.decoratedApi = this._emptyDecorated(registry.registry);
    }
    const { decoratedApi, decoratedMeta } = this._createDecorated(registry, fromEmpty, registry.decoratedApi);
    this._call = decoratedApi.call;
    this._consts = decoratedApi.consts;
    this._errors = decoratedApi.errors;
    this._events = decoratedApi.events;
    this._query = decoratedApi.query;
    this._rx.call = decoratedApi.rx.call;
    this._rx.query = decoratedApi.rx.query;
    const tx2 = this._decorateExtrinsics(decoratedMeta, this._decorateMethod);
    const rxtx = this._decorateExtrinsics(decoratedMeta, this._rxDecorateMethod);
    if (fromEmpty || !this._extrinsics) {
      this._extrinsics = tx2;
      this._rx.tx = rxtx;
    } else {
      augmentObject("tx", tx2, this._extrinsics, false);
      augmentObject(null, rxtx, this._rx.tx, false);
    }
    augmentObject(null, decoratedMeta.consts, this._rx.consts, fromEmpty);
    this.emit("decorated");
  }
  /**
   * @deprecated
   * backwards compatible endpoint for metadata injection, may be removed in the future (However, it is still useful for testing injection)
   */
  injectMetadata(metadata, fromEmpty, registry) {
    this._injectMetadata({ counter: 0, metadata, registry: registry || this.__internal__registry, runtimeVersion: this.__internal__registry.createType("RuntimeVersionPartial") }, fromEmpty);
  }
  _decorateFunctionMeta(input, output3) {
    output3.meta = input.meta;
    output3.method = input.method;
    output3.section = input.section;
    output3.toJSON = input.toJSON;
    if (input.callIndex) {
      output3.callIndex = input.callIndex;
    }
    return output3;
  }
  // Filter all RPC methods based on the results of the rpc_methods call. We do this in the following
  // manner to cater for both old and new:
  //   - when the number of entries are 0, only remove the ones with isOptional (account & contracts)
  //   - when non-zero, remove anything that is not in the array (we don't do this)
  _filterRpc(methods, additional) {
    if (Object.keys(additional).length !== 0) {
      this._rpcCore.addUserInterfaces(additional);
      this._decorateRpc(this._rpcCore, this._decorateMethod, this._rpc);
      this._decorateRpc(this._rpcCore, this._rxDecorateMethod, this._rx.rpc);
    }
    const sectionMap = {};
    for (let i = 0, count = methods.length; i < count; i++) {
      const [section2] = methods[i].split("_");
      sectionMap[section2] = true;
    }
    const sections = Object.keys(sectionMap);
    for (let i = 0, count = sections.length; i < count; i++) {
      const nameA = stringUpperFirst(sections[i]);
      const nameB = `${nameA}Api`;
      this._runtimeMap[blake2AsHex(nameA, 64)] = nameA;
      this._runtimeMap[blake2AsHex(nameB, 64)] = nameB;
    }
    this._filterRpcMethods(methods);
  }
  _filterRpcMethods(exposed) {
    const hasResults = exposed.length !== 0;
    const allKnown2 = [...this._rpcCore.mapping.entries()];
    const allKeys = [];
    const count = allKnown2.length;
    for (let i = 0; i < count; i++) {
      const [, { alias: alias2, endpoint, method, pubsub, section: section2 }] = allKnown2[i];
      allKeys.push(`${section2}_${method}`);
      if (pubsub) {
        allKeys.push(`${section2}_${pubsub[1]}`);
        allKeys.push(`${section2}_${pubsub[2]}`);
      }
      if (alias2) {
        allKeys.push(...alias2);
      }
      if (endpoint) {
        allKeys.push(endpoint);
      }
    }
    const unknown = exposed.filter((k) => !allKeys.includes(k) && !k.includes("_unstable_"));
    if (unknown.length && !this._options.noInitWarn) {
      l$3.warn(`RPC methods not decorated: ${unknown.join(", ")}`);
    }
    for (let i = 0; i < count; i++) {
      const [k, { method, section: section2 }] = allKnown2[i];
      if (hasResults && !exposed.includes(k) && k !== "rpc_methods") {
        if (this._rpc[section2]) {
          delete this._rpc[section2][method];
          delete this._rx.rpc[section2][method];
        }
      }
    }
  }
  _rpcSubmitter(decorateMethod) {
    const method = (method2, ...params) => {
      return from(this._rpcCore.provider.send(method2, params));
    };
    return decorateMethod(method);
  }
  _decorateRpc(rpc2, decorateMethod, input = this._rpcSubmitter(decorateMethod)) {
    const out = input;
    const decorateFn = (section2, method) => {
      const source = rpc2[section2][method];
      const fn = decorateMethod(source, { methodName: method });
      fn.meta = source.meta;
      fn.raw = decorateMethod(source.raw, { methodName: method });
      return fn;
    };
    for (let s = 0, scount = rpc2.sections.length; s < scount; s++) {
      const section2 = rpc2.sections[s];
      if (!Object.prototype.hasOwnProperty.call(out, section2)) {
        const methods = Object.keys(rpc2[section2]);
        const decorateInternal = (method) => decorateFn(section2, method);
        for (let m2 = 0, mcount = methods.length; m2 < mcount; m2++) {
          const method = methods[m2];
          if (this.hasSubscriptions || !(method.startsWith("subscribe") || method.startsWith("unsubscribe"))) {
            if (!Object.prototype.hasOwnProperty.call(out, section2)) {
              out[section2] = {};
            }
            lazyMethod(out[section2], method, decorateInternal);
          }
        }
      }
    }
    return out;
  }
  // add all definition entries
  _addRuntimeDef(result, additional) {
    if (!additional) {
      return;
    }
    const entries = Object.entries(additional);
    for (let j = 0, ecount = entries.length; j < ecount; j++) {
      const [key, defs] = entries[j];
      if (result[key]) {
        for (let k = 0, dcount = defs.length; k < dcount; k++) {
          const def = defs[k];
          const prev2 = result[key].find(({ version: version2 }) => def.version === version2);
          if (prev2) {
            objectSpread(prev2.methods, def.methods);
          } else {
            result[key].push(def);
          }
        }
      } else {
        result[key] = defs;
      }
    }
  }
  // extract all runtime definitions
  _getRuntimeDefs(registry, specName, chain2 = "") {
    const result = {};
    const defValues = Object.values(typeDefinitions);
    for (let i = 0, count = defValues.length; i < count; i++) {
      this._addRuntimeDef(result, defValues[i].runtime);
    }
    this._addRuntimeDef(result, getSpecRuntime(registry, chain2, specName));
    this._addRuntimeDef(result, this._options.runtime);
    return Object.entries(result);
  }
  // pre-metadata decoration
  _decorateCalls({ registry, runtimeVersion: { apis, specName, specVersion } }, decorateMethod, blockHash) {
    const result = {};
    const named = {};
    const hashes = {};
    const sections = this._getRuntimeDefs(registry, specName, this._runtimeChain);
    const older = [];
    const implName = `${specName.toString()}/${specVersion.toString()}`;
    const hasLogged = this.__internal__runtimeLog[implName] || false;
    this.__internal__runtimeLog[implName] = true;
    for (let i = 0, scount = sections.length; i < scount; i++) {
      const [_section, secs] = sections[i];
      const sectionHash = blake2AsHex(_section, 64);
      const rtApi = apis.find(([a]) => a.eq(sectionHash));
      hashes[sectionHash] = true;
      if (rtApi) {
        const all2 = secs.map(({ version: version2 }) => version2).sort();
        const sec = secs.find(({ version: version2 }) => rtApi[1].eq(version2));
        if (sec) {
          const section2 = stringCamelCase(_section);
          const methods = Object.entries(sec.methods);
          if (methods.length) {
            if (!named[section2]) {
              named[section2] = {};
            }
            for (let m2 = 0, mcount = methods.length; m2 < mcount; m2++) {
              const [_method, def] = methods[m2];
              const method = stringCamelCase(_method);
              named[section2][method] = objectSpread({ method, name: `${_section}_${_method}`, section: section2, sectionHash }, def);
            }
          }
        } else {
          older.push(`${_section}/${rtApi[1].toString()} (${all2.join("/")} known)`);
        }
      }
    }
    const notFound = apis.map(([a, v]) => [a.toHex(), v.toString()]).filter(([a]) => !hashes[a]).map(([a, v]) => `${this._runtimeMap[a] || a}/${v}`);
    if (!this._options.noInitWarn && !hasLogged) {
      if (older.length) {
        l$3.warn(`${implName}: Not decorating runtime apis without matching versions: ${older.join(", ")}`);
      }
      if (notFound.length) {
        l$3.warn(`${implName}: Not decorating unknown runtime apis: ${notFound.join(", ")}`);
      }
    }
    const stateCall = blockHash ? (name, bytes2) => this._rpcCore.state.call(name, bytes2, blockHash) : (name, bytes2) => this._rpcCore.state.call(name, bytes2);
    const lazySection = (section2) => lazyMethods({}, Object.keys(named[section2]), (method) => this._decorateCall(registry, named[section2][method], stateCall, decorateMethod));
    const modules = Object.keys(named);
    for (let i = 0, count = modules.length; i < count; i++) {
      lazyMethod(result, modules[i], lazySection);
    }
    return result;
  }
  _decorateCall(registry, def, stateCall, decorateMethod) {
    const decorated = decorateMethod((...args) => {
      if (args.length !== def.params.length) {
        throw new Error(`${def.name}:: Expected ${def.params.length} arguments, found ${args.length}`);
      }
      const bytes2 = registry.createType("Raw", u8aConcatStrict(args.map((a, i) => registry.createTypeUnsafe(def.params[i].type, [a]).toU8a())));
      return stateCall(def.name, bytes2).pipe(map$1((r) => registry.createTypeUnsafe(def.type, [r])));
    });
    decorated.meta = def;
    return decorated;
  }
  // only be called if supportMulti is true
  _decorateMulti(decorateMethod) {
    return decorateMethod((keys) => keys.length ? (this.hasSubscriptions ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt)(keys.map((args) => Array.isArray(args) ? args[0].creator.meta.type.isPlain ? [args[0].creator] : args[0].creator.meta.type.asMap.hashers.length === 1 ? [args[0].creator, args.slice(1)] : [args[0].creator, ...args.slice(1)] : [args.creator])) : of([]));
  }
  _decorateMultiAt(atApi, decorateMethod, blockHash) {
    return decorateMethod((calls) => calls.length ? this._rpcCore.state.queryStorageAt(calls.map((args) => {
      if (Array.isArray(args)) {
        const { creator } = getAtQueryFn(atApi, args[0].creator);
        return creator.meta.type.isPlain ? [creator] : creator.meta.type.asMap.hashers.length === 1 ? [creator, args.slice(1)] : [creator, ...args.slice(1)];
      }
      return [getAtQueryFn(atApi, args.creator).creator];
    }), blockHash) : of([]));
  }
  _decorateExtrinsics({ tx: tx2 }, decorateMethod) {
    const result = createSubmittable(this._type, this._rx, decorateMethod);
    const lazySection = (section2) => lazyMethods({}, Object.keys(tx2[section2]), (method) => method.startsWith("$") ? tx2[section2][method] : this._decorateExtrinsicEntry(tx2[section2][method], result));
    const sections = Object.keys(tx2);
    for (let i = 0, count = sections.length; i < count; i++) {
      lazyMethod(result, sections[i], lazySection);
    }
    return result;
  }
  _decorateExtrinsicEntry(method, creator) {
    const decorated = (...params) => creator(method(...params));
    decorated.is = (other) => method.is(other);
    return this._decorateFunctionMeta(method, decorated);
  }
  _decorateStorage({ query: query2, registry }, decorateMethod, blockHash) {
    const result = {};
    const lazySection = (section2) => lazyMethods({}, Object.keys(query2[section2]), (method) => blockHash ? this._decorateStorageEntryAt(registry, query2[section2][method], decorateMethod, blockHash) : this._decorateStorageEntry(query2[section2][method], decorateMethod));
    const sections = Object.keys(query2);
    for (let i = 0, count = sections.length; i < count; i++) {
      lazyMethod(result, sections[i], lazySection);
    }
    return result;
  }
  _decorateStorageEntry(creator, decorateMethod) {
    const getArgs = (args, registry) => extractStorageArgs(registry || this.__internal__registry, creator, args);
    const getQueryAt = (blockHash) => from(this.at(blockHash)).pipe(map$1((api) => getAtQueryFn(api, creator)));
    const decorated = this._decorateStorageCall(creator, decorateMethod);
    decorated.creator = creator;
    decorated.at = decorateMethod((blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => q(...args))));
    decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args)));
    decorated.is = (key) => key.section === creator.section && key.method === creator.method;
    decorated.key = (...args) => u8aToHex(compactStripLength(creator(...args))[1]);
    decorated.keyPrefix = (...args) => u8aToHex(creator.keyPrefix(...args));
    decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args)));
    decorated.sizeAt = decorateMethod((blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => this._rpcCore.state.getStorageSize(getArgs(args, q.creator.meta.registry), blockHash))));
    if (creator.iterKey && creator.meta.type.isMap) {
      decorated.entries = decorateMethod(memo(this.__internal__instanceId, (...args) => this._retrieveMapEntries(creator, null, args)));
      decorated.entriesAt = decorateMethod(memo(this.__internal__instanceId, (blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => this._retrieveMapEntries(q.creator, blockHash, args)))));
      decorated.entriesPaged = decorateMethod(memo(this.__internal__instanceId, (opts) => this._retrieveMapEntriesPaged(creator, void 0, opts)));
      decorated.keys = decorateMethod(memo(this.__internal__instanceId, (...args) => this._retrieveMapKeys(creator, null, args)));
      decorated.keysAt = decorateMethod(memo(this.__internal__instanceId, (blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => this._retrieveMapKeys(q.creator, blockHash, args)))));
      decorated.keysPaged = decorateMethod(memo(this.__internal__instanceId, (opts) => this._retrieveMapKeysPaged(creator, void 0, opts)));
    }
    if (this.supportMulti && creator.meta.type.isMap) {
      decorated.multi = decorateMethod((args) => creator.meta.type.asMap.hashers.length === 1 ? this._retrieveMulti(args.map((a) => [creator, [a]])) : this._retrieveMulti(args.map((a) => [creator, a])));
    }
    return this._decorateFunctionMeta(creator, decorated);
  }
  _decorateStorageEntryAt(registry, creator, decorateMethod, blockHash) {
    const getArgs = (args) => extractStorageArgs(registry, creator, args);
    const decorated = decorateMethod((...args) => this._rpcCore.state.getStorage(getArgs(args), blockHash));
    decorated.creator = creator;
    decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args), blockHash));
    decorated.is = (key) => key.section === creator.section && key.method === creator.method;
    decorated.key = (...args) => u8aToHex(compactStripLength(creator(...args))[1]);
    decorated.keyPrefix = (...keys) => u8aToHex(creator.keyPrefix(...keys));
    decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args), blockHash));
    if (creator.iterKey && creator.meta.type.isMap) {
      decorated.entries = decorateMethod(memo(this.__internal__instanceId, (...args) => this._retrieveMapEntries(creator, blockHash, args)));
      decorated.entriesPaged = decorateMethod(memo(this.__internal__instanceId, (opts) => this._retrieveMapEntriesPaged(creator, blockHash, opts)));
      decorated.keys = decorateMethod(memo(this.__internal__instanceId, (...args) => this._retrieveMapKeys(creator, blockHash, args)));
      decorated.keysPaged = decorateMethod(memo(this.__internal__instanceId, (opts) => this._retrieveMapKeysPaged(creator, blockHash, opts)));
    }
    if (this.supportMulti && creator.meta.type.isMap) {
      decorated.multi = decorateMethod((args) => creator.meta.type.asMap.hashers.length === 1 ? this._retrieveMulti(args.map((a) => [creator, [a]]), blockHash) : this._retrieveMulti(args.map((a) => [creator, a]), blockHash));
    }
    return this._decorateFunctionMeta(creator, decorated);
  }
  _queueStorage(call, queue2) {
    const query2 = queue2 === this.__internal__storageSubQ ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt;
    let queueIdx = queue2.length - 1;
    let valueIdx = 0;
    let valueObs;
    if (queueIdx === -1 || !queue2[queueIdx] || queue2[queueIdx][1].length === PAGE_SIZE_Q) {
      queueIdx++;
      valueObs = from(
        // we delay the execution until the next tick, this allows
        // any queries made in this timeframe to be added to the same
        // queue for a single query
        new Promise((resolve) => {
          nextTick(() => {
            const calls = queue2[queueIdx][1];
            delete queue2[queueIdx];
            resolve(calls);
          });
        })
      ).pipe(switchMap((calls) => query2(calls)));
      queue2.push([valueObs, [call]]);
    } else {
      valueObs = queue2[queueIdx][0];
      valueIdx = queue2[queueIdx][1].length;
      queue2[queueIdx][1].push(call);
    }
    return valueObs.pipe(
      // return the single value at this index
      map$1((values) => values[valueIdx])
    );
  }
  // Decorate the base storage call. In the case or rxjs or promise-without-callback (await)
  // we make a subscription, alternatively we push this through a single-shot query
  _decorateStorageCall(creator, decorateMethod) {
    const memoed = memo(this.__internal__instanceId, (...args) => {
      const call = extractStorageArgs(this.__internal__registry, creator, args);
      if (!this.hasSubscriptions) {
        return this._rpcCore.state.getStorage(call);
      }
      return this._queueStorage(call, this.__internal__storageSubQ);
    });
    return decorateMethod(memoed, {
      methodName: creator.method,
      overrideNoSub: (...args) => this._queueStorage(extractStorageArgs(this.__internal__registry, creator, args), this.__internal__storageGetQ)
    });
  }
  // retrieve a set of values for a specific set of keys - here we chunk the keys into PAGE_SIZE sizes
  _retrieveMulti(keys, blockHash) {
    if (!keys.length) {
      return of([]);
    }
    const query2 = this.hasSubscriptions && !blockHash ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt;
    if (keys.length <= PAGE_SIZE_V) {
      return blockHash ? query2(keys, blockHash) : query2(keys);
    }
    return combineLatest(arrayChunk(keys, PAGE_SIZE_V).map((k) => blockHash ? query2(k, blockHash) : query2(k))).pipe(map$1(arrayFlatten));
  }
  _retrieveMapKeys({ iterKey, meta, method, section: section2 }, at2, args) {
    if (!iterKey || !meta.type.isMap) {
      throw new Error("keys can only be retrieved on maps");
    }
    const headKey = iterKey(...args).toHex();
    const startSubject = new BehaviorSubject(headKey);
    const query2 = at2 ? (startKey) => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K, startKey, at2) : (startKey) => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K, startKey);
    const setMeta = (key) => key.setMeta(meta, section2, method);
    return startSubject.pipe(
      switchMap(query2),
      map$1((keys) => keys.map(setMeta)),
      tap((keys) => nextTick(() => {
        keys.length === PAGE_SIZE_K ? startSubject.next(keys[PAGE_SIZE_K - 1].toHex()) : startSubject.complete();
      })),
      toArray(),
      // toArray since we want to startSubject to be completed
      map$1(arrayFlatten)
    );
  }
  _retrieveMapKeysPaged({ iterKey, meta, method, section: section2 }, at2, opts) {
    if (!iterKey || !meta.type.isMap) {
      throw new Error("keys can only be retrieved on maps");
    }
    const setMeta = (key) => key.setMeta(meta, section2, method);
    const query2 = at2 ? (headKey) => this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey, at2) : (headKey) => this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey);
    return query2(iterKey(...opts.args).toHex()).pipe(map$1((keys) => keys.map(setMeta)));
  }
  _retrieveMapEntries(entry, at2, args) {
    const query2 = at2 ? (keys) => this._rpcCore.state.queryStorageAt(keys, at2) : (keys) => this._rpcCore.state.queryStorageAt(keys);
    return this._retrieveMapKeys(entry, at2, args).pipe(switchMap((keys) => keys.length ? combineLatest(arrayChunk(keys, PAGE_SIZE_V).map(query2)).pipe(map$1((valsArr) => arrayFlatten(valsArr).map((value, index) => [keys[index], value]))) : of([])));
  }
  _retrieveMapEntriesPaged(entry, at2, opts) {
    const query2 = at2 ? (keys) => this._rpcCore.state.queryStorageAt(keys, at2) : (keys) => this._rpcCore.state.queryStorageAt(keys);
    return this._retrieveMapKeysPaged(entry, at2, opts).pipe(switchMap((keys) => keys.length ? query2(keys).pipe(map$1((valsArr) => valsArr.map((value, index) => [keys[index], value]))) : of([])));
  }
  _decorateDeriveRx(decorateMethod) {
    var _a2, _b, _c, _d;
    const specName = (_a2 = this._runtimeVersion) == null ? void 0 : _a2.specName.toString();
    const available = getAvailableDerives(this.__internal__instanceId, this._rx, objectSpread({}, this._options.derives, (_d = (_c = (_b = this._options.typesBundle) == null ? void 0 : _b.spec) == null ? void 0 : _c[specName || ""]) == null ? void 0 : _d.derives));
    return decorateDeriveSections(decorateMethod, available);
  }
  _decorateDerive(decorateMethod) {
    return decorateDeriveSections(decorateMethod, this._rx.derive);
  }
}
const KEEPALIVE_INTERVAL = 1e4;
const l$2 = logger("api/init");
function textToString(t) {
  return t.toString();
}
class Init extends Decorate {
  constructor(options, type, decorateMethod) {
    super(options, type, decorateMethod);
    __publicField(this, "__internal__atLast", null);
    __publicField(this, "__internal__healthTimer", null);
    __publicField(this, "__internal__registries", []);
    __publicField(this, "__internal__updateSub", null);
    __publicField(this, "__internal__waitingRegistries", {});
    this.registry.setKnownTypes(options);
    if (!options.source) {
      this.registerTypes(options.types);
    } else {
      this.__internal__registries = options.source.__internal__registries;
    }
    this._rpc = this._decorateRpc(this._rpcCore, this._decorateMethod);
    this._rx.rpc = this._decorateRpc(this._rpcCore, this._rxDecorateMethod);
    if (this.supportMulti) {
      this._queryMulti = this._decorateMulti(this._decorateMethod);
      this._rx.queryMulti = this._decorateMulti(this._rxDecorateMethod);
    }
    this._rx.signer = options.signer;
    this._rpcCore.setRegistrySwap((blockHash) => this.getBlockRegistry(blockHash));
    this._rpcCore.setResolveBlockHash((blockNumber) => firstValueFrom(this._rpcCore.chain.getBlockHash(blockNumber)));
    if (this.hasSubscriptions) {
      this._rpcCore.provider.on("disconnected", () => this.__internal__onProviderDisconnect());
      this._rpcCore.provider.on("error", (e) => this.__internal__onProviderError(e));
      this._rpcCore.provider.on("connected", () => this.__internal__onProviderConnect());
    } else if (!this._options.noInitWarn) {
      l$2.warn("Api will be available in a limited mode since the provider does not support subscriptions");
    }
    if (this._rpcCore.provider.isConnected) {
      this.__internal__onProviderConnect().catch(noop$2);
    }
  }
  /**
   * @description Decorates a registry based on the runtime version
   */
  _initRegistry(registry, chain2, version2, metadata, chainProps) {
    registry.clearCache();
    registry.setChainProperties(chainProps || this.registry.getChainProperties());
    registry.setKnownTypes(this._options);
    registry.register(getSpecTypes(registry, chain2, version2.specName, version2.specVersion));
    registry.setHasher(getSpecHasher(registry, chain2, version2.specName));
    if (registry.knownTypes.typesBundle) {
      registry.knownTypes.typesAlias = getSpecAlias(registry, chain2, version2.specName);
    }
    registry.setMetadata(metadata, void 0, objectSpread({}, getSpecExtensions(registry, chain2, version2.specName), this._options.signedExtensions), this._options.noInitWarn);
  }
  /**
   * @description Returns the default versioned registry
   */
  _getDefaultRegistry() {
    return assertReturn(this.__internal__registries.find(({ isDefault }) => isDefault), "Initialization error, cannot find the default registry");
  }
  /**
   * @description Returns a decorated API instance at a specific point in time
   */
  async at(blockHash, knownVersion) {
    const u8aHash = u8aToU8a(blockHash);
    const u8aHex = u8aToHex(u8aHash);
    const registry = await this.getBlockRegistry(u8aHash, knownVersion);
    if (!this.__internal__atLast || this.__internal__atLast[0] !== u8aHex) {
      this.__internal__atLast = [u8aHex, this._createDecorated(registry, true, null, u8aHash).decoratedApi];
    }
    return this.__internal__atLast[1];
  }
  async _createBlockRegistry(blockHash, header, version2) {
    const registry = new TypeRegistry(blockHash);
    const metadata = new Metadata(registry, await firstValueFrom(this._rpcCore.state.getMetadata.raw(header.parentHash)));
    const runtimeChain = this._runtimeChain;
    if (!runtimeChain) {
      throw new Error("Invalid initializion order, runtimeChain is not available");
    }
    this._initRegistry(registry, runtimeChain, version2, metadata);
    const result = { counter: 0, lastBlockHash: blockHash, metadata, registry, runtimeVersion: version2 };
    this.__internal__registries.push(result);
    return result;
  }
  _cacheBlockRegistryProgress(key, creator) {
    let waiting = this.__internal__waitingRegistries[key];
    if (isUndefined(waiting)) {
      waiting = this.__internal__waitingRegistries[key] = new Promise((resolve, reject) => {
        creator().then((registry) => {
          delete this.__internal__waitingRegistries[key];
          resolve(registry);
        }).catch((error2) => {
          delete this.__internal__waitingRegistries[key];
          reject(error2);
        });
      });
    }
    return waiting;
  }
  _getBlockRegistryViaVersion(blockHash, version2) {
    if (version2) {
      const existingViaVersion = this.__internal__registries.find(({ runtimeVersion: { specName, specVersion } }) => specName.eq(version2.specName) && specVersion.eq(version2.specVersion));
      if (existingViaVersion) {
        existingViaVersion.counter++;
        existingViaVersion.lastBlockHash = blockHash;
        return existingViaVersion;
      }
    }
    return null;
  }
  async _getBlockRegistryViaHash(blockHash) {
    if (!this._genesisHash || !this._runtimeVersion) {
      throw new Error("Cannot retrieve data on an uninitialized chain");
    }
    const header = this.registry.createType("HeaderPartial", this._genesisHash.eq(blockHash) ? { number: BN_ZERO, parentHash: this._genesisHash } : await firstValueFrom(this._rpcCore.chain.getHeader.raw(blockHash)));
    if (header.parentHash.isEmpty) {
      throw new Error("Unable to retrieve header and parent from supplied hash");
    }
    getUpgradeVersion(this._genesisHash, header.number);
    const version2 = this.registry.createType("RuntimeVersionPartial", await firstValueFrom(this._rpcCore.state.getRuntimeVersion.raw(header.parentHash)));
    return (
      // try to find via version
      this._getBlockRegistryViaVersion(blockHash, version2) || // return new or in-flight result
      await this._cacheBlockRegistryProgress(version2.toHex(), () => this._createBlockRegistry(blockHash, header, version2))
    );
  }
  /**
   * @description Sets up a registry based on the block hash defined
   */
  async getBlockRegistry(blockHash, knownVersion) {
    return (
      // try to find via blockHash
      this.__internal__registries.find(({ lastBlockHash }) => lastBlockHash && u8aEq(lastBlockHash, blockHash)) || // try to find via version
      this._getBlockRegistryViaVersion(blockHash, knownVersion) || // return new or in-flight result
      await this._cacheBlockRegistryProgress(u8aToHex(blockHash), () => this._getBlockRegistryViaHash(blockHash))
    );
  }
  async _loadMeta() {
    var _a2;
    if (this._isReady) {
      return true;
    }
    this._unsubscribeUpdates();
    [this._genesisHash, this._runtimeMetadata] = ((_a2 = this._options.source) == null ? void 0 : _a2._isReady) ? await this._metaFromSource(this._options.source) : await this._metaFromChain(this._options.metadata);
    return this._initFromMeta(this._runtimeMetadata);
  }
  // eslint-disable-next-line @typescript-eslint/require-await
  async _metaFromSource(source) {
    this._extrinsicType = source.extrinsicVersion;
    this._runtimeChain = source.runtimeChain;
    this._runtimeVersion = source.runtimeVersion;
    const sections = Object.keys(source.rpc);
    const rpcs = [];
    for (let s = 0, scount = sections.length; s < scount; s++) {
      const section2 = sections[s];
      const methods = Object.keys(source.rpc[section2]);
      for (let m2 = 0, mcount = methods.length; m2 < mcount; m2++) {
        rpcs.push(`${section2}_${methods[m2]}`);
      }
    }
    this._filterRpc(rpcs, getSpecRpc(this.registry, source.runtimeChain, source.runtimeVersion.specName));
    return [source.genesisHash, source.runtimeMetadata];
  }
  // subscribe to metadata updates, inject the types on changes
  _subscribeUpdates() {
    if (this.__internal__updateSub || !this.hasSubscriptions) {
      return;
    }
    this.__internal__updateSub = this._rpcCore.state.subscribeRuntimeVersion().pipe(switchMap((version2) => {
      var _a2;
      return (
        // only retrieve the metadata when the on-chain version has been changed
        ((_a2 = this._runtimeVersion) == null ? void 0 : _a2.specVersion.eq(version2.specVersion)) ? of(false) : this._rpcCore.state.getMetadata().pipe(map$1((metadata) => {
          l$2.log(`Runtime version updated to spec=${version2.specVersion.toString()}, tx=${version2.transactionVersion.toString()}`);
          this._runtimeMetadata = metadata;
          this._runtimeVersion = version2;
          this._rx.runtimeVersion = version2;
          const thisRegistry = this._getDefaultRegistry();
          const runtimeChain = this._runtimeChain;
          if (!runtimeChain) {
            throw new Error("Invalid initializion order, runtimeChain is not available");
          }
          thisRegistry.metadata = metadata;
          thisRegistry.runtimeVersion = version2;
          this._initRegistry(this.registry, runtimeChain, version2, metadata);
          this._injectMetadata(thisRegistry, true);
          return true;
        }))
      );
    })).subscribe();
  }
  async _metaFromChain(optMetadata) {
    const [genesisHash, runtimeVersion, chain2, chainProps, rpcMethods, chainMetadata] = await Promise.all([
      firstValueFrom(this._rpcCore.chain.getBlockHash(0)),
      firstValueFrom(this._rpcCore.state.getRuntimeVersion()),
      firstValueFrom(this._rpcCore.system.chain()),
      firstValueFrom(this._rpcCore.system.properties()),
      firstValueFrom(this._rpcCore.rpc.methods()),
      optMetadata ? Promise.resolve(null) : firstValueFrom(this._rpcCore.state.getMetadata())
    ]);
    this._runtimeChain = chain2;
    this._runtimeVersion = runtimeVersion;
    this._rx.runtimeVersion = runtimeVersion;
    const metadataKey = `${genesisHash.toHex() || "0x"}-${runtimeVersion.specVersion.toString()}`;
    const metadata = chainMetadata || ((optMetadata == null ? void 0 : optMetadata[metadataKey]) ? new Metadata(this.registry, optMetadata[metadataKey]) : await firstValueFrom(this._rpcCore.state.getMetadata()));
    this._initRegistry(this.registry, chain2, runtimeVersion, metadata, chainProps);
    this._filterRpc(rpcMethods.methods.map(textToString), getSpecRpc(this.registry, chain2, runtimeVersion.specName));
    this._subscribeUpdates();
    if (!this.__internal__registries.length) {
      this.__internal__registries.push({ counter: 0, isDefault: true, metadata, registry: this.registry, runtimeVersion });
    }
    metadata.getUniqTypes(this._options.throwOnUnknown || false);
    return [genesisHash, metadata];
  }
  _initFromMeta(metadata) {
    const runtimeVersion = this._runtimeVersion;
    if (!runtimeVersion) {
      throw new Error("Invalid initializion order, runtimeVersion is not available");
    }
    this._extrinsicType = metadata.asLatest.extrinsic.version.toNumber();
    this._rx.extrinsicType = this._extrinsicType;
    this._rx.genesisHash = this._genesisHash;
    this._rx.runtimeVersion = runtimeVersion;
    this._injectMetadata(this._getDefaultRegistry(), true);
    this._rx.derive = this._decorateDeriveRx(this._rxDecorateMethod);
    this._derive = this._decorateDerive(this._decorateMethod);
    return true;
  }
  _subscribeHealth() {
    this._unsubscribeHealth();
    this.__internal__healthTimer = this.hasSubscriptions ? setInterval(() => {
      firstValueFrom(this._rpcCore.system.health.raw()).catch(noop$2);
    }, KEEPALIVE_INTERVAL) : null;
  }
  _unsubscribeHealth() {
    if (this.__internal__healthTimer) {
      clearInterval(this.__internal__healthTimer);
      this.__internal__healthTimer = null;
    }
  }
  _unsubscribeUpdates() {
    if (this.__internal__updateSub) {
      this.__internal__updateSub.unsubscribe();
      this.__internal__updateSub = null;
    }
  }
  _unsubscribe() {
    this._unsubscribeHealth();
    this._unsubscribeUpdates();
  }
  async __internal__onProviderConnect() {
    this._isConnected.next(true);
    this.emit("connected");
    try {
      const cryptoReady = this._options.initWasm === false ? true : await cryptoWaitReady();
      const hasMeta = await this._loadMeta();
      this._subscribeHealth();
      if (hasMeta && !this._isReady && cryptoReady) {
        this._isReady = true;
        this.emit("ready", this);
      }
    } catch (_error) {
      const error2 = new Error(`FATAL: Unable to initialize the API: ${_error.message}`);
      l$2.error(error2);
      this.emit("error", error2);
    }
  }
  __internal__onProviderDisconnect() {
    this._isConnected.next(false);
    this._unsubscribe();
    this.emit("disconnected");
  }
  __internal__onProviderError(error2) {
    this.emit("error", error2);
  }
}
function assertResult(value) {
  if (value === void 0) {
    throw new Error("Api interfaces needs to be initialized before using, wait for 'isReady'");
  }
  return value;
}
class Getters extends Init {
  /**
   * @description Runtime call interfaces (currently untyped, only decorated via API options)
   */
  get call() {
    return assertResult(this._call);
  }
  /**
   * @description Contains the parameter types (constants) of all modules.
   *
   * The values are instances of the appropriate type and are accessible using `section`.`constantName`,
   *
   * @example
   * <BR>
   *
   * ```javascript
   * console.log(api.consts.democracy.enactmentPeriod.toString())
   * ```
   */
  get consts() {
    return assertResult(this._consts);
  }
  /**
   * @description Derived results that are injected into the API, allowing for combinations of various query results.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.derive.chain.bestNumber((number) => {
   *   console.log('best number', number);
   * });
   * ```
   */
  get derive() {
    return assertResult(this._derive);
  }
  /**
   * @description Errors from metadata
   */
  get errors() {
    return assertResult(this._errors);
  }
  /**
   * @description Events from metadata
   */
  get events() {
    return assertResult(this._events);
  }
  /**
   * @description  Returns the version of extrinsics in-use on this chain
   */
  get extrinsicVersion() {
    return this._extrinsicType;
  }
  /**
   * @description Contains the genesis Hash of the attached chain. Apart from being useful to determine the actual chain, it can also be used to sign immortal transactions.
   */
  get genesisHash() {
    return assertResult(this._genesisHash);
  }
  /**
   * @description true is the underlying provider is connected
   */
  get isConnected() {
    return this._isConnected.getValue();
  }
  /**
   * @description The library information name & version (from package.json)
   */
  get libraryInfo() {
    return `${packageInfo.name} v${packageInfo.version}`;
  }
  /**
   * @description Contains all the chain state modules and their subsequent methods in the API. These are attached dynamically from the runtime metadata.
   *
   * All calls inside the namespace, is denoted by `section`.`method` and may take an optional query parameter. As an example, `api.query.timestamp.now()` (current block timestamp) does not take parameters, while `api.query.system.account(<accountId>)` (retrieving the associated nonce & balances for an account), takes the `AccountId` as a parameter.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.query.system.account(<accountId>, ([nonce, balance]) => {
   *   console.log('new free balance', balance.free, 'new nonce', nonce);
   * });
   * ```
   */
  get query() {
    return assertResult(this._query);
  }
  /**
   * @description Allows for the querying of multiple storage entries and the combination thereof into a single result. This is a very optimal way to make multiple queries since it only makes a single connection to the node and retrieves the data over one subscription.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * const unsub = await api.queryMulti(
   *   [
   *     // you can include the storage without any parameters
   *     api.query.balances.totalIssuance,
   *     // or you can pass parameters to the storage query
   *     [api.query.system.account, '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY']
   *   ],
   *   ([existential, [, { free }]]) => {
   *     console.log(`You have ${free.sub(existential)} more than the existential deposit`);
   *
   *     unsub();
   *   }
   * );
   * ```
   */
  get queryMulti() {
    return assertResult(this._queryMulti);
  }
  /**
   * @description Contains all the raw rpc sections and their subsequent methods in the API as defined by the jsonrpc interface definitions. Unlike the dynamic `api.query` and `api.tx` sections, these methods are fixed (although extensible with node upgrades) and not determined by the runtime.
   *
   * RPC endpoints available here allow for the query of chain, node and system information, in addition to providing interfaces for the raw queries of state (using known keys) and the submission of transactions.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.rpc.chain.subscribeNewHeads((header) => {
   *   console.log('new header', header);
   * });
   * ```
   */
  get rpc() {
    return assertResult(this._rpc);
  }
  /**
   * @description Contains the chain information for the current node.
   */
  get runtimeChain() {
    return assertResult(this._runtimeChain);
  }
  /**
   * @description Yields the current attached runtime metadata. Generally this is only used to construct extrinsics & storage, but is useful for current runtime inspection.
   */
  get runtimeMetadata() {
    return assertResult(this._runtimeMetadata);
  }
  /**
   * @description Contains the version information for the current runtime.
   */
  get runtimeVersion() {
    return assertResult(this._runtimeVersion);
  }
  /**
   * @description The underlying Rx API interface
   */
  get rx() {
    return assertResult(this._rx);
  }
  /**
   * @description Returns the underlying provider stats
   */
  get stats() {
    return this._rpcCore.stats;
  }
  /**
   * @description The type of this API instance, either 'rxjs' or 'promise'
   */
  get type() {
    return this._type;
  }
  /**
   * @description Contains all the extrinsic modules and their subsequent methods in the API. It allows for the construction of transactions and the submission thereof. These are attached dynamically from the runtime metadata.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.tx.balances
   *   .transferAllowDeath(<recipientId>, <balance>)
   *   .signAndSend(<keyPair>, ({status}) => {
   *     console.log('tx status', status.asFinalized.toHex());
   *   });
   * ```
   */
  get tx() {
    return assertResult(this._extrinsics);
  }
  /**
   * @description Finds the definition for a specific [[CallFunction]] based on the index supplied
   */
  findCall(callIndex) {
    return findCall(this.registry, callIndex);
  }
  /**
   * @description Finds the definition for a specific [[RegistryError]] based on the index supplied
   */
  findError(errorIndex) {
    return findError(this.registry, errorIndex);
  }
}
class ApiBase extends Getters {
  /**
   * @description Create an instance of the class
   *
   * @param options Options object to create API instance or a Provider instance
   *
   * @example
   * <BR>
   *
   * ```javascript
   * import Api from '@polkadot/api/promise';
   *
   * const api = new Api().isReady();
   *
   * api.rpc.subscribeNewHeads((header) => {
   *   console.log(`new block #${header.number.toNumber()}`);
   * });
   * ```
   */
  constructor(options = {}, type, decorateMethod) {
    super(options, type, decorateMethod);
  }
  /**
   * @description Connect from the underlying provider, halting all network traffic
   */
  connect() {
    return this._rpcCore.connect();
  }
  /**
   * @description Disconnect from the underlying provider, halting all network traffic
   */
  disconnect() {
    this._unsubscribe();
    return this._rpcCore.disconnect();
  }
  /**
   * @description Set an external signer which will be used to sign extrinsic when account passed in is not KeyringPair
   */
  setSigner(signer) {
    this._rx.signer = signer;
  }
  /**
   * @description Signs a raw signer payload, string or Uint8Array
   */
  async sign(address, data, { signer } = {}) {
    if (isString(address)) {
      const _signer = signer || this._rx.signer;
      if (!(_signer == null ? void 0 : _signer.signRaw)) {
        throw new Error("No signer exists with a signRaw interface. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.");
      }
      return (await _signer.signRaw(objectSpread({ type: "bytes" }, data, { address }))).signature;
    }
    return u8aToHex(address.sign(u8aToU8a(data.data)));
  }
}
class Combinator {
  constructor(fns, callback) {
    __publicField(this, "__internal__allHasFired", false);
    __publicField(this, "__internal__callback");
    __publicField(this, "__internal__fired", []);
    __publicField(this, "__internal__fns", []);
    __publicField(this, "__internal__isActive", true);
    __publicField(this, "__internal__results", []);
    __publicField(this, "__internal__subscriptions", []);
    this.__internal__callback = callback;
    this.__internal__subscriptions = fns.map(async (input, index) => {
      const [fn, ...args] = Array.isArray(input) ? input : [input];
      this.__internal__fired.push(false);
      this.__internal__fns.push(fn);
      return fn(...args, this._createCallback(index));
    });
  }
  _allHasFired() {
    this.__internal__allHasFired || (this.__internal__allHasFired = this.__internal__fired.filter((hasFired) => !hasFired).length === 0);
    return this.__internal__allHasFired;
  }
  _createCallback(index) {
    return (value) => {
      this.__internal__fired[index] = true;
      this.__internal__results[index] = value;
      this._triggerUpdate();
    };
  }
  _triggerUpdate() {
    if (!this.__internal__isActive || !isFunction$1(this.__internal__callback) || !this._allHasFired()) {
      return;
    }
    try {
      Promise.resolve(this.__internal__callback(this.__internal__results)).catch(noop$2);
    } catch {
    }
  }
  unsubscribe() {
    if (!this.__internal__isActive) {
      return;
    }
    this.__internal__isActive = false;
    this.__internal__subscriptions.map(async (subscription) => {
      try {
        const unsubscribe = await subscription;
        if (isFunction$1(unsubscribe)) {
          unsubscribe();
        }
      } catch {
      }
    });
  }
}
function promiseTracker(resolve, reject) {
  let isCompleted = false;
  return {
    reject: (error2) => {
      if (!isCompleted) {
        isCompleted = true;
        reject(error2);
      }
      return EMPTY;
    },
    resolve: (value) => {
      if (!isCompleted) {
        isCompleted = true;
        resolve(value);
      }
    }
  };
}
function extractArgs(args, needsCallback) {
  const actualArgs = args.slice();
  const callback = args.length && isFunction$1(args[args.length - 1]) ? actualArgs.pop() : void 0;
  if (needsCallback && !isFunction$1(callback)) {
    throw new Error("Expected a callback to be passed with subscriptions");
  }
  return [actualArgs, callback];
}
function decorateCall(method, args) {
  return new Promise((resolve, reject) => {
    const tracker = promiseTracker(resolve, reject);
    const subscription = method(...args).pipe(catchError((error2) => tracker.reject(error2))).subscribe((result) => {
      tracker.resolve(result);
      nextTick(() => subscription.unsubscribe());
    });
  });
}
function decorateSubscribe(method, args, resultCb) {
  return new Promise((resolve, reject) => {
    const tracker = promiseTracker(resolve, reject);
    const subscription = method(...args).pipe(catchError((error2) => tracker.reject(error2)), tap(() => tracker.resolve(() => subscription.unsubscribe()))).subscribe((result) => {
      nextTick(() => resultCb(result));
    });
  });
}
function toPromiseMethod(method, options) {
  const needsCallback = !!((options == null ? void 0 : options.methodName) && options.methodName.includes("subscribe"));
  return function(...args) {
    const [actualArgs, resultCb] = extractArgs(args, needsCallback);
    return resultCb ? decorateSubscribe(method, actualArgs, resultCb) : decorateCall((options == null ? void 0 : options.overrideNoSub) || method, actualArgs);
  };
}
class ApiPromise extends ApiBase {
  /**
   * @description Creates an instance of the ApiPromise class
   * @param options Options to create an instance. This can be either [[ApiOptions]] or
   * an [[WsProvider]].
   * @example
   * <BR>
   *
   * ```javascript
   * import Api from '@polkadot/api/promise';
   *
   * new Api().isReady.then((api) => {
   *   api.rpc.subscribeNewHeads((header) => {
   *     console.log(`new block #${header.number.toNumber()}`);
   *   });
   * });
   * ```
   */
  constructor(options) {
    super(options, "promise", toPromiseMethod);
    __publicField(this, "__internal__isReadyPromise");
    __publicField(this, "__internal__isReadyOrErrorPromise");
    this.__internal__isReadyPromise = new Promise((resolve) => {
      super.once("ready", () => resolve(this));
    });
    this.__internal__isReadyOrErrorPromise = new Promise((resolve, reject) => {
      const tracker = promiseTracker(resolve, reject);
      super.once("ready", () => tracker.resolve(this));
      super.once("error", (error2) => tracker.reject(error2));
    });
  }
  /**
   * @description Creates an ApiPromise instance using the supplied provider. Returns an Promise containing the actual Api instance.
   * @param options options that is passed to the class contructor. Can be either [[ApiOptions]] or a
   * provider (see the constructor arguments)
   * @example
   * <BR>
   *
   * ```javascript
   * import Api from '@polkadot/api/promise';
   *
   * Api.create().then(async (api) => {
   *   const timestamp = await api.query.timestamp.now();
   *
   *   console.log(`lastest block timestamp ${timestamp}`);
   * });
   * ```
   */
  static create(options) {
    const instance2 = new ApiPromise(options);
    if (options && options.throwOnConnect) {
      return instance2.isReadyOrError;
    }
    instance2.isReadyOrError.catch(noop$2);
    return instance2.isReady;
  }
  /**
   * @description Promise that resolves the first time we are connected and loaded
   */
  get isReady() {
    return this.__internal__isReadyPromise;
  }
  /**
   * @description Promise that resolves if we can connect, or reject if there is an error
   */
  get isReadyOrError() {
    return this.__internal__isReadyOrErrorPromise;
  }
  /**
   * @description Returns a clone of this ApiPromise instance (new underlying provider connection)
   */
  clone() {
    return new ApiPromise(objectSpread({}, this._options, { source: this }));
  }
  /**
   * @description Creates a combinator that can be used to combine the latest results from multiple subscriptions
   * @param fns An array of function to combine, each in the form of `(cb: (value: void)) => void`
   * @param callback A callback that will return an Array of all the values this combinator has been applied to
   * @example
   * <BR>
   *
   * ```javascript
   * const address = '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFacT7';
   *
   * // combines values from balance & nonce as it updates
   * api.combineLatest([
   *   api.rpc.chain.subscribeNewHeads,
   *   (cb) => api.query.system.account(address, cb)
   * ], ([head, [balance, nonce]]) => {
   *   console.log(`#${head.number}: You have ${balance.free} units, with ${nonce} transactions sent`);
   * });
   * ```
   */
  // eslint-disable-next-line @typescript-eslint/require-await
  async combineLatest(fns, callback) {
    const combinator = new Combinator(fns, callback);
    return () => {
      combinator.unsubscribe();
    };
  }
}
class AccountNotFoundError extends Error {
  constructor(msg) {
    super(msg || "No account found");
  }
}
class ExtensionNotFoundError extends Error {
  constructor(msg) {
    super(msg || "No extensions found");
  }
}
function documentReadyPromise(creator) {
  return new Promise((resolve) => {
    if (document.readyState === "complete") {
      resolve(creator());
    } else {
      window.addEventListener("load", () => resolve(creator()));
    }
  });
}
const win = window;
win.injectedWeb3 = win.injectedWeb3 || {};
web3IsInjected();
let web3EnablePromise = null;
function web3IsInjected() {
  return Object.values(win.injectedWeb3).filter(({ connect: connect2, enable }) => !!(connect2 || enable)).length !== 0;
}
function getWindowExtensions(originName) {
  return Promise.all(Object.entries(win.injectedWeb3).map(([nameOrHash, { connect: connect2, enable, version: version2 }]) => Promise.resolve().then(() => connect2 ? connect2(originName) : enable ? enable(originName).then((e) => objectSpread({ name: nameOrHash, version: version2 || "unknown" }, e)) : Promise.reject(new Error("No connect(..) or enable(...) hook found"))).catch(({ message }) => {
    console.error(`Error initializing ${nameOrHash}: ${message}`);
  }))).then((exts) => exts.filter((e) => !!e));
}
function web3Enable(originName, compatInits = []) {
  if (!originName) {
    throw new Error("You must pass a name for your app to the web3Enable function");
  }
  const initCompat = compatInits.length ? Promise.all(compatInits.map((c) => c().catch(() => false))) : Promise.resolve([true]);
  web3EnablePromise = documentReadyPromise(() => initCompat.then(() => getWindowExtensions(originName).then((values) => values.map((e) => {
    if (!e.accounts.subscribe) {
      e.accounts.subscribe = (cb) => {
        e.accounts.get().then(cb).catch(console.error);
        return () => {
        };
      };
    }
    return e;
  })).catch(() => []).then((values) => {
    const names = values.map(({ name, version: version2 }) => `${name}/${version2}`);
    web3IsInjected();
    console.info(`web3Enable: Enabled ${values.length} extension${values.length !== 1 ? "s" : ""}: ${names.join(", ")}`);
    return values;
  })));
  return web3EnablePromise;
}
class Extension {
}
class ExtWeb3 extends Extension {
  async getAccount(config2) {
    const { dappName, userAccountAddress: address } = config2;
    if (!address) {
      throw new AccountNotFoundError("No account address provided");
    }
    const extensions = await web3Enable(dappName);
    if (extensions.length === 0) {
      throw new ExtensionNotFoundError();
    }
    for (const extension of extensions) {
      const accounts2 = await extension.accounts.get();
      const account2 = accounts2.find((account3) => account3.address === address);
      if (account2) {
        return { account: account2, extension };
      }
    }
    throw new AccountNotFoundError("No account found matching " + address);
  }
}
const PKCS8_DIVIDER = new Uint8Array([161, 35, 3, 33, 0]);
const PKCS8_HEADER = new Uint8Array([48, 83, 2, 1, 1, 48, 5, 6, 3, 43, 101, 112, 4, 34, 4, 32]);
const PUB_LENGTH = 32;
const SEC_LENGTH = 64;
const SEED_LENGTH = 32;
const SEED_OFFSET = PKCS8_HEADER.length;
function decodePair(passphrase, encrypted, _encType) {
  const encType = Array.isArray(_encType) || _encType === void 0 ? _encType : [_encType];
  const decrypted = jsonDecryptData(encrypted, passphrase, encType);
  const header = decrypted.subarray(0, PKCS8_HEADER.length);
  if (!u8aEq(header, PKCS8_HEADER)) {
    throw new Error("Invalid Pkcs8 header found in body");
  }
  let secretKey = decrypted.subarray(SEED_OFFSET, SEED_OFFSET + SEC_LENGTH);
  let divOffset = SEED_OFFSET + SEC_LENGTH;
  let divider = decrypted.subarray(divOffset, divOffset + PKCS8_DIVIDER.length);
  if (!u8aEq(divider, PKCS8_DIVIDER)) {
    divOffset = SEED_OFFSET + SEED_LENGTH;
    secretKey = decrypted.subarray(SEED_OFFSET, divOffset);
    divider = decrypted.subarray(divOffset, divOffset + PKCS8_DIVIDER.length);
    if (!u8aEq(divider, PKCS8_DIVIDER)) {
      throw new Error("Invalid Pkcs8 divider found in body");
    }
  }
  const pubOffset = divOffset + PKCS8_DIVIDER.length;
  const publicKey = decrypted.subarray(pubOffset, pubOffset + PUB_LENGTH);
  return {
    publicKey,
    secretKey
  };
}
function encodePair({ publicKey, secretKey }, passphrase) {
  if (!secretKey) {
    throw new Error("Expected a valid secretKey to be passed to encode");
  }
  const encoded = u8aConcat(PKCS8_HEADER, secretKey, PKCS8_DIVIDER, publicKey);
  if (!passphrase) {
    return encoded;
  }
  const { params, password, salt } = scryptEncode(passphrase);
  const { encrypted, nonce } = naclEncrypt(encoded, password.subarray(0, 32));
  return u8aConcat(scryptToU8a(salt, params), nonce, encrypted);
}
function pairToJson(type, { address, meta }, encoded, isEncrypted) {
  return objectSpread(jsonEncryptFormat(encoded, ["pkcs8", type], isEncrypted), {
    address,
    meta
  });
}
const SIG_TYPE_NONE = new Uint8Array();
const TYPE_FROM_SEED = {
  ecdsa: secp256k1PairFromSeed,
  ed25519: ed25519PairFromSeed,
  ethereum: secp256k1PairFromSeed,
  sr25519: sr25519PairFromSeed
};
const TYPE_PREFIX = {
  ecdsa: new Uint8Array([2]),
  ed25519: new Uint8Array([0]),
  ethereum: new Uint8Array([2]),
  sr25519: new Uint8Array([1])
};
const TYPE_SIGNATURE = {
  ecdsa: (m2, p) => secp256k1Sign(m2, p, "blake2"),
  ed25519: ed25519Sign,
  ethereum: (m2, p) => secp256k1Sign(m2, p, "keccak"),
  sr25519: sr25519Sign
};
const TYPE_ADDRESS = {
  ecdsa: (p) => p.length > 32 ? blake2AsU8a(p) : p,
  ed25519: (p) => p,
  ethereum: (p) => p.length === 20 ? p : keccakAsU8a(secp256k1Expand(p)),
  sr25519: (p) => p
};
function isLocked(secretKey) {
  return !secretKey || u8aEmpty(secretKey);
}
function vrfHash(proof, context, extra) {
  return blake2AsU8a(u8aConcat(context || "", extra || "", proof));
}
function createPair({ toSS58, type }, { publicKey, secretKey }, meta = {}, encoded = null, encTypes) {
  const decodePkcs8 = (passphrase, userEncoded) => {
    const decoded = decodePair(passphrase, userEncoded || encoded, encTypes);
    if (decoded.secretKey.length === 64) {
      publicKey = decoded.publicKey;
      secretKey = decoded.secretKey;
    } else {
      const pair = TYPE_FROM_SEED[type](decoded.secretKey);
      publicKey = pair.publicKey;
      secretKey = pair.secretKey;
    }
  };
  const recode = (passphrase) => {
    isLocked(secretKey) && encoded && decodePkcs8(passphrase, encoded);
    encoded = encodePair({ publicKey, secretKey }, passphrase);
    encTypes = void 0;
    return encoded;
  };
  const encodeAddress2 = () => {
    const raw = TYPE_ADDRESS[type](publicKey);
    return type === "ethereum" ? ethereumEncode(raw) : toSS58(raw);
  };
  return {
    get address() {
      return encodeAddress2();
    },
    get addressRaw() {
      const raw = TYPE_ADDRESS[type](publicKey);
      return type === "ethereum" ? raw.slice(-20) : raw;
    },
    get isLocked() {
      return isLocked(secretKey);
    },
    get meta() {
      return meta;
    },
    get publicKey() {
      return publicKey;
    },
    get type() {
      return type;
    },
    // eslint-disable-next-line sort-keys
    decodePkcs8,
    derive: (suri, meta2) => {
      if (type === "ethereum") {
        throw new Error("Unable to derive on this keypair");
      } else if (isLocked(secretKey)) {
        throw new Error("Cannot derive on a locked keypair");
      }
      const { path: path2 } = keyExtractPath(suri);
      const derived = keyFromPath({ publicKey, secretKey }, path2, type);
      return createPair({ toSS58, type }, derived, meta2, null);
    },
    encodePkcs8: (passphrase) => {
      return recode(passphrase);
    },
    lock: () => {
      secretKey = new Uint8Array();
    },
    setMeta: (additional) => {
      meta = objectSpread({}, meta, additional);
    },
    sign: (message, options = {}) => {
      if (isLocked(secretKey)) {
        throw new Error("Cannot sign with a locked key pair");
      }
      return u8aConcat(options.withType ? TYPE_PREFIX[type] : SIG_TYPE_NONE, TYPE_SIGNATURE[type](u8aToU8a(message), { publicKey, secretKey }));
    },
    toJson: (passphrase) => {
      const address = ["ecdsa", "ethereum"].includes(type) ? publicKey.length === 20 ? u8aToHex(publicKey) : u8aToHex(secp256k1Compress(publicKey)) : encodeAddress2();
      return pairToJson(type, { address, meta }, recode(passphrase), !!passphrase);
    },
    unlock: (passphrase) => {
      return decodePkcs8(passphrase);
    },
    verify: (message, signature, signerPublic) => {
      return signatureVerify(message, signature, TYPE_ADDRESS[type](u8aToU8a(signerPublic))).isValid;
    },
    vrfSign: (message, context, extra) => {
      if (isLocked(secretKey)) {
        throw new Error("Cannot sign with a locked key pair");
      }
      if (type === "sr25519") {
        return sr25519VrfSign(message, { secretKey }, context, extra);
      }
      const proof = TYPE_SIGNATURE[type](u8aToU8a(message), { publicKey, secretKey });
      return u8aConcat(vrfHash(proof, context, extra), proof);
    },
    vrfVerify: (message, vrfResult, signerPublic, context, extra) => {
      if (type === "sr25519") {
        return sr25519VrfVerify(message, vrfResult, publicKey, context, extra);
      }
      const result = signatureVerify(message, u8aConcat(TYPE_PREFIX[type], vrfResult.subarray(32)), TYPE_ADDRESS[type](u8aToU8a(signerPublic)));
      return result.isValid && u8aEq(vrfResult.subarray(0, 32), vrfHash(vrfResult.subarray(32), context, extra));
    }
  };
}
const DEV_PHRASE = "bottom drive obey lake curtain smoke basket hold race lonely fit walk";
class Pairs {
  constructor() {
    __publicField(this, "__internal__map", {});
  }
  add(pair) {
    this.__internal__map[decodeAddress(pair.address).toString()] = pair;
    return pair;
  }
  all() {
    return Object.values(this.__internal__map);
  }
  get(address) {
    const pair = this.__internal__map[decodeAddress(address).toString()];
    if (!pair) {
      throw new Error(`Unable to retrieve keypair '${isU8a(address) || isHex(address) ? u8aToHex(u8aToU8a(address)) : address}'`);
    }
    return pair;
  }
  remove(address) {
    delete this.__internal__map[decodeAddress(address).toString()];
  }
}
const PairFromSeed = {
  ecdsa: (seed) => secp256k1PairFromSeed(seed),
  ed25519: (seed) => ed25519PairFromSeed(seed),
  ethereum: (seed) => secp256k1PairFromSeed(seed),
  sr25519: (seed) => sr25519PairFromSeed(seed)
};
function pairToPublic({ publicKey }) {
  return publicKey;
}
class Keyring {
  constructor(options = {}) {
    __publicField(this, "__internal__pairs");
    __publicField(this, "__internal__type");
    __publicField(this, "__internal__ss58");
    __publicField(this, "decodeAddress", decodeAddress);
    /**
     * @name encodeAddress
     * @description Encodes the input into an ss58 representation
     */
    __publicField(this, "encodeAddress", (address, ss58Format) => {
      return this.type === "ethereum" ? ethereumEncode(address) : encodeAddress(address, ss58Format ?? this.__internal__ss58);
    });
    options.type = options.type || "ed25519";
    if (!["ecdsa", "ethereum", "ed25519", "sr25519"].includes(options.type || "undefined")) {
      throw new Error(`Expected a keyring type of either 'ed25519', 'sr25519', 'ethereum' or 'ecdsa', found '${options.type || "unknown"}`);
    }
    this.__internal__pairs = new Pairs();
    this.__internal__ss58 = options.ss58Format;
    this.__internal__type = options.type;
  }
  /**
   * @description retrieve the pairs (alias for getPairs)
   */
  get pairs() {
    return this.getPairs();
  }
  /**
   * @description retrieve the publicKeys (alias for getPublicKeys)
   */
  get publicKeys() {
    return this.getPublicKeys();
  }
  /**
   * @description Returns the type of the keyring, ed25519, sr25519 or ecdsa
   */
  get type() {
    return this.__internal__type;
  }
  /**
   * @name addPair
   * @summary Stores an account, given a keyring pair, as a Key/Value (public key, pair) in Keyring Pair Dictionary
   */
  addPair(pair) {
    return this.__internal__pairs.add(pair);
  }
  /**
   * @name addFromAddress
   * @summary Stores an account, given an account address, as a Key/Value (public key, pair) in Keyring Pair Dictionary
   * @description Allows user to explicitly provide separate inputs including account address or public key, and optionally
   * the associated account metadata, and the default encoded value as arguments (that may be obtained from the json file
   * of an account backup), and then generates a keyring pair from them that it passes to
   * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
   */
  addFromAddress(address, meta = {}, encoded = null, type = this.type, ignoreChecksum, encType) {
    const publicKey = this.decodeAddress(address, ignoreChecksum);
    return this.addPair(createPair({ toSS58: this.encodeAddress, type }, { publicKey, secretKey: new Uint8Array() }, meta, encoded, encType));
  }
  /**
   * @name addFromJson
   * @summary Stores an account, given JSON data, as a Key/Value (public key, pair) in Keyring Pair Dictionary
   * @description Allows user to provide a json object argument that contains account information (that may be obtained from the json file
   * of an account backup), and then generates a keyring pair from it that it passes to
   * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
   */
  addFromJson(json, ignoreChecksum) {
    return this.addPair(this.createFromJson(json, ignoreChecksum));
  }
  /**
   * @name addFromMnemonic
   * @summary Stores an account, given a mnemonic, as a Key/Value (public key, pair) in Keyring Pair Dictionary
   * @description Allows user to provide a mnemonic (seed phrase that is provided when account is originally created)
   * argument and a metadata argument that contains account information (that may be obtained from the json file
   * of an account backup), and then generates a keyring pair from it that it passes to
   * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
   */
  addFromMnemonic(mnemonic, meta = {}, type = this.type) {
    return this.addFromUri(mnemonic, meta, type);
  }
  /**
   * @name addFromPair
   * @summary Stores an account created from an explicit publicKey/secreteKey combination
   */
  addFromPair(pair, meta = {}, type = this.type) {
    return this.addPair(this.createFromPair(pair, meta, type));
  }
  /**
   * @name addFromSeed
   * @summary Stores an account, given seed data, as a Key/Value (public key, pair) in Keyring Pair Dictionary
   * @description Stores in a keyring pair dictionary the public key of the pair as a key and the pair as the associated value.
   * Allows user to provide the account seed as an argument, and then generates a keyring pair from it that it passes to
   * `addPair` to store in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
   */
  addFromSeed(seed, meta = {}, type = this.type) {
    return this.addPair(createPair({ toSS58: this.encodeAddress, type }, PairFromSeed[type](seed), meta, null));
  }
  /**
   * @name addFromUri
   * @summary Creates an account via an suri
   * @description Extracts the phrase, path and password from a SURI format for specifying secret keys `<secret>/<soft-key>//<hard-key>///<password>` (the `///password` may be omitted, and `/<soft-key>` and `//<hard-key>` maybe repeated and mixed). The secret can be a hex string, mnemonic phrase or a string (to be padded)
   */
  addFromUri(suri, meta = {}, type = this.type) {
    return this.addPair(this.createFromUri(suri, meta, type));
  }
  /**
   * @name createFromJson
   * @description Creates a pair from a JSON keyfile
   */
  createFromJson({ address, encoded, encoding: { content, type, version: version2 }, meta }, ignoreChecksum) {
    if (version2 === "3" && content[0] !== "pkcs8") {
      throw new Error(`Unable to decode non-pkcs8 type, [${content.join(",")}] found}`);
    }
    const cryptoType = version2 === "0" || !Array.isArray(content) ? this.type : content[1];
    const encType = !Array.isArray(type) ? [type] : type;
    if (!["ed25519", "sr25519", "ecdsa", "ethereum"].includes(cryptoType)) {
      throw new Error(`Unknown crypto type ${cryptoType}`);
    }
    const publicKey = isHex(address) ? hexToU8a(address) : this.decodeAddress(address, ignoreChecksum);
    const decoded = isHex(encoded) ? hexToU8a(encoded) : base64Decode(encoded);
    return createPair({ toSS58: this.encodeAddress, type: cryptoType }, { publicKey, secretKey: new Uint8Array() }, meta, decoded, encType);
  }
  /**
   * @name createFromPair
   * @summary Creates a pair from an explicit publicKey/secreteKey combination
   */
  createFromPair(pair, meta = {}, type = this.type) {
    return createPair({ toSS58: this.encodeAddress, type }, pair, meta, null);
  }
  /**
   * @name createFromUri
   * @summary Creates a Keypair from an suri
   * @description This creates a pair from the suri, but does not add it to the keyring
   */
  createFromUri(_suri, meta = {}, type = this.type) {
    const suri = _suri.startsWith("//") ? `${DEV_PHRASE}${_suri}` : _suri;
    const { derivePath, password, path: path2, phrase } = keyExtractSuri(suri);
    let seed;
    const isPhraseHex = isHex(phrase, 256);
    if (isPhraseHex) {
      seed = hexToU8a(phrase);
    } else {
      const parts = phrase.split(" ");
      if ([12, 15, 18, 21, 24].includes(parts.length)) {
        seed = type === "ethereum" ? mnemonicToLegacySeed(phrase, "", false, 64) : mnemonicToMiniSecret(phrase, password);
      } else {
        if (phrase.length > 32) {
          throw new Error("specified phrase is not a valid mnemonic and is invalid as a raw seed at > 32 bytes");
        }
        seed = stringToU8a(phrase.padEnd(32));
      }
    }
    const derived = type === "ethereum" ? isPhraseHex ? PairFromSeed[type](seed) : hdEthereum(seed, derivePath.substring(1)) : keyFromPath(PairFromSeed[type](seed), path2, type);
    return createPair({ toSS58: this.encodeAddress, type }, derived, meta, null);
  }
  /**
   * @name getPair
   * @summary Retrieves an account keyring pair from the Keyring Pair Dictionary, given an account address
   * @description Returns a keyring pair value from the keyring pair dictionary by performing
   * a key lookup using the provided account address or public key (after decoding it).
   */
  getPair(address) {
    return this.__internal__pairs.get(address);
  }
  /**
   * @name getPairs
   * @summary Retrieves all account keyring pairs from the Keyring Pair Dictionary
   * @description Returns an array list of all the keyring pair values that are stored in the keyring pair dictionary.
   */
  getPairs() {
    return this.__internal__pairs.all();
  }
  /**
   * @name getPublicKeys
   * @summary Retrieves Public Keys of all Keyring Pairs stored in the Keyring Pair Dictionary
   * @description Returns an array list of all the public keys associated with each of the keyring pair values that are stored in the keyring pair dictionary.
   */
  getPublicKeys() {
    return this.__internal__pairs.all().map(pairToPublic);
  }
  /**
   * @name removePair
   * @description Deletes the provided input address or public key from the stored Keyring Pair Dictionary.
   */
  removePair(address) {
    this.__internal__pairs.remove(address);
  }
  /**
   * @name setSS58Format;
   * @description Sets the ss58 format for the keyring
   */
  setSS58Format(ss58) {
    this.__internal__ss58 = ss58;
  }
  /**
   * @name toJson
   * @summary Returns a JSON object associated with the input argument that contains metadata assocated with an account
   * @description Returns a JSON object containing the metadata associated with an account
   * when valid address or public key and when the account passphrase is provided if the account secret
   * is not already unlocked and available in memory. Note that in [Polkadot-JS Apps](https://github.com/polkadot-js/apps) the user
   * may backup their account to a JSON file that contains this information.
   */
  toJson(address, passphrase) {
    return this.__internal__pairs.get(address).toJson(passphrase);
  }
}
class HttpError extends Error {
  constructor(status, statusText, url) {
    super(`HTTP error! status: ${status} (${statusText}) for URL: ${url}`);
    this.status = status;
    this.statusText = statusText;
    this.url = url;
    this.name = "HttpError";
  }
}
class HttpClientBase {
  constructor(baseURL, prefix2 = "") {
    this.baseURL = baseURL + prefix2;
  }
  async fetch(input, init3) {
    try {
      const response = await fetch(this.baseURL + input, init3);
      if (!response.ok) {
        throw new HttpError(response.status, response.statusText, response.url);
      }
      return this.responseHandler(response);
    } catch (error2) {
      return this.errorHandler(error2);
    }
  }
  async post(input, body, init3) {
    const headers = { "Content-Type": "application/json", ...(init3 == null ? void 0 : init3.headers) || {} };
    try {
      const response = await fetch(this.baseURL + input, {
        method: "POST",
        body: JSON.stringify(body),
        headers,
        ...init3
      });
      if (!response.ok) {
        throw new HttpError(response.status, response.statusText, response.url);
      }
      return this.responseHandler(response);
    } catch (error2) {
      return this.errorHandler(error2);
    }
  }
  async responseHandler(response) {
    try {
      return await response.json();
    } catch (error2) {
      console.error("Error parsing JSON:", error2);
      throw error2;
    }
  }
  errorHandler(error2) {
    if (error2 instanceof HttpError) {
      console.error("HTTP error:", error2);
    } else {
      console.error("API request error:", error2);
    }
    return Promise.reject(error2);
  }
}
const HttpClientBase$1 = HttpClientBase;
class ProviderApi extends HttpClientBase$1 {
  constructor(network, providerUrl, account2) {
    if (!providerUrl.startsWith("http")) {
      providerUrl = `https://${providerUrl}`;
    }
    console.log("ProviderApi", providerUrl);
    super(providerUrl);
    this.network = network;
    this.account = account2;
  }
  getCaptchaChallenge(userAccount, randomProvider) {
    const { provider, blockNumber } = randomProvider;
    const dappAccount = this.account;
    const url = `${ApiPaths.GetCaptchaChallenge}/${provider.datasetId}/${userAccount}/${dappAccount}/${blockNumber.toString().replace(/,/g, "")}`;
    console.log(url);
    return this.fetch(url);
  }
  submitCaptchaSolution(captchas, requestHash, userAccount, salt, signature) {
    const captchaSolutionBody = CaptchaSolutionBody.parse({
      captchas,
      requestHash,
      user: userAccount,
      dapp: this.account,
      salt,
      signature
    });
    return this.post(ApiPaths.SubmitCaptchaSolution, captchaSolutionBody);
  }
  verifyDappUser(dapp, userAccount, commitmentId, maxVerifiedTime) {
    const payload = { dapp, user: userAccount };
    if (commitmentId) {
      payload["commitmentId"] = commitmentId;
    }
    if (maxVerifiedTime) {
      payload["maxVerifiedTime"] = maxVerifiedTime;
    }
    return this.post(ApiPaths.VerifyCaptchaSolution, payload);
  }
  getPowCaptchaChallenge(userAccount, dappAccount) {
    return this.post(ApiPaths.GetPowCaptchaChallenge, { userAccount, dappAccount });
  }
  submitPowCaptchaSolution(challenge, userAccount, dappAccount, randomProvider, nonce) {
    const { provider, blockNumber } = randomProvider;
    return this.post(ApiPaths.SubmitPowCaptchaSolution, {
      blockNumber,
      challenge: challenge.challenge,
      difficulty: challenge.difficulty,
      signature: challenge.signature,
      userAccount,
      dappAccount,
      provider,
      nonce
    });
  }
  submitUserEvents(events2, accountId2) {
    return this.post(ApiPaths.SubmitUserEvents, { events: events2, accountId: accountId2 });
  }
  getProviderStatus() {
    return this.fetch(ApiPaths.GetProviderStatus);
  }
  getProviderDetails() {
    return this.fetch(ApiPaths.GetProviderDetails);
  }
}
var arr$2 = [];
var each$2 = arr$2.forEach;
var slice$2 = arr$2.slice;
function defaults$2(obj) {
  each$2.call(slice$2.call(arguments, 1), function(source) {
    if (source) {
      for (var prop in source) {
        if (obj[prop] === void 0)
          obj[prop] = source[prop];
      }
    }
  });
  return obj;
}
var fieldContentRegExp$1 = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
var serializeCookie$1 = function serializeCookie(name, val, options) {
  var opt = options || {};
  opt.path = opt.path || "/";
  var value = encodeURIComponent(val);
  var str = name + "=" + value;
  if (opt.maxAge > 0) {
    var maxAge = opt.maxAge - 0;
    if (isNaN(maxAge))
      throw new Error("maxAge should be a Number");
    str += "; Max-Age=" + Math.floor(maxAge);
  }
  if (opt.domain) {
    if (!fieldContentRegExp$1.test(opt.domain)) {
      throw new TypeError("option domain is invalid");
    }
    str += "; Domain=" + opt.domain;
  }
  if (opt.path) {
    if (!fieldContentRegExp$1.test(opt.path)) {
      throw new TypeError("option path is invalid");
    }
    str += "; Path=" + opt.path;
  }
  if (opt.expires) {
    if (typeof opt.expires.toUTCString !== "function") {
      throw new TypeError("option expires is invalid");
    }
    str += "; Expires=" + opt.expires.toUTCString();
  }
  if (opt.httpOnly)
    str += "; HttpOnly";
  if (opt.secure)
    str += "; Secure";
  if (opt.sameSite) {
    var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
    switch (sameSite) {
      case true:
        str += "; SameSite=Strict";
        break;
      case "lax":
        str += "; SameSite=Lax";
        break;
      case "strict":
        str += "; SameSite=Strict";
        break;
      case "none":
        str += "; SameSite=None";
        break;
      default:
        throw new TypeError("option sameSite is invalid");
    }
  }
  return str;
};
const cookieLookup = {
  name: "cookie",
  lookup: function lookup(req, res, options) {
    var found;
    if (options.lookupCookie && typeof req !== "undefined") {
      var cookies = options.getCookies(req);
      if (cookies)
        found = cookies[options.lookupCookie];
    }
    return found;
  },
  cacheUserLanguage: function cacheUserLanguage(req, res, lng) {
    var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    if (options.lookupCookie && req !== "undefined") {
      var expirationDate = options.cookieExpirationDate;
      if (!expirationDate) {
        expirationDate = /* @__PURE__ */ new Date();
        expirationDate.setFullYear(expirationDate.getFullYear() + 1);
      }
      var cookieOptions = {
        expires: expirationDate,
        domain: options.cookieDomain,
        path: options.cookiePath,
        httpOnly: false,
        overwrite: true,
        sameSite: options.cookieSameSite
      };
      if (options.cookieSecure)
        cookieOptions.secure = options.cookieSecure;
      var existingCookie = options.getHeader(res, "set-cookie") || options.getHeader(res, "Set-Cookie") || [];
      if (typeof existingCookie === "string")
        existingCookie = [existingCookie];
      if (!Array.isArray(existingCookie))
        existingCookie = [];
      existingCookie = existingCookie.filter(function(c) {
        return c.indexOf("".concat(options.lookupCookie, "=")) !== 0;
      });
      existingCookie.push(serializeCookie$1(options.lookupCookie, lng, cookieOptions));
      options.setHeader(res, "Set-Cookie", existingCookie.length === 1 ? existingCookie[0] : existingCookie);
    }
  }
};
const querystringLookup = {
  name: "querystring",
  lookup: function lookup2(req, res, options) {
    var found;
    if (options.lookupQuerystring !== void 0 && typeof req !== "undefined") {
      if (options.getQuery(req)) {
        found = options.getQuery(req)[options.lookupQuerystring];
      }
      if (!found && options.getUrl(req) && options.getUrl(req).indexOf("?")) {
        var lastPartOfUri = options.getUrl(req).substring(options.getUrl(req).indexOf("?"));
        if (typeof URLSearchParams !== "undefined") {
          var urlParams = new URLSearchParams(lastPartOfUri);
          found = urlParams.get(options.lookupQuerystring);
        } else {
          var indexOfQsStart = lastPartOfUri.indexOf("".concat(options.lookupQuerystring, "="));
          if (indexOfQsStart > -1) {
            var restOfUri = lastPartOfUri.substring(options.lookupQuerystring.length + 2);
            if (restOfUri.indexOf("&") < 0) {
              found = restOfUri;
            } else {
              found = restOfUri.substring(0, restOfUri.indexOf("&"));
            }
          }
        }
      }
    }
    return found;
  }
};
const pathLookup = {
  name: "path",
  lookup: function lookup3(req, res, options) {
    var found;
    if (req === void 0) {
      return found;
    }
    if (options.lookupPath !== void 0 && req.params) {
      found = options.getParams(req)[options.lookupPath];
    }
    if (!found && typeof options.lookupFromPathIndex === "number" && options.getOriginalUrl(req)) {
      var path2 = options.getOriginalUrl(req).split("?")[0];
      var parts = path2.split("/");
      if (parts[0] === "") {
        parts.shift();
      }
      if (parts.length > options.lookupFromPathIndex) {
        found = parts[options.lookupFromPathIndex];
      }
    }
    return found;
  }
};
var specialCases = ["hans", "hant", "latn", "cyrl", "cans", "mong", "arab", "419"];
const headerLookup = {
  name: "header",
  lookup: function lookup4(req, res, options) {
    var found;
    if (typeof req !== "undefined") {
      var headers = options.getHeaders(req);
      if (!headers)
        return found;
      var locales = [];
      var acceptLanguage = options.lookupHeader ? headers[options.lookupHeader] : headers["accept-language"];
      if (acceptLanguage) {
        var lookupRegex = /(([a-z]{2,3})-?([A-Z]{2})?)\s*;?\s*(q=([0-9.]+))?/gi;
        if (acceptLanguage.indexOf("-") > 0) {
          var foundSpecialCase = specialCases.find(function(s) {
            return acceptLanguage.toLowerCase().indexOf("-".concat(s)) > 0;
          });
          if (foundSpecialCase)
            lookupRegex = /(([a-z]{2,3})-?([A-Z0-9]{2,4})?)\s*;?\s*(q=([0-9.]+))?/gi;
        }
        var lngs = [];
        var i;
        var m2;
        var rgx = options.lookupHeaderRegex || lookupRegex;
        do {
          m2 = rgx.exec(acceptLanguage);
          if (m2) {
            var lng = m2[1];
            var weight = m2[5] || "1";
            var q = Number(weight);
            if (lng && !isNaN(q)) {
              lngs.push({
                lng,
                q
              });
            }
          }
        } while (m2);
        lngs.sort(function(a, b) {
          return b.q - a.q;
        });
        for (i = 0; i < lngs.length; i++) {
          locales.push(lngs[i].lng);
        }
        if (locales.length)
          found = locales;
      }
    }
    return found;
  }
};
function _typeof$4(o) {
  "@babel/helpers - typeof";
  return _typeof$4 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof$4(o);
}
const sessionLookup = {
  name: "session",
  lookup: function lookup5(req, res, options) {
    var found;
    if (options.lookupSession !== void 0 && _typeof$4(req) && options.getSession(req)) {
      found = options.getSession(req)[options.lookupSession];
    }
    return found;
  },
  cacheUserLanguage: function cacheUserLanguage2(req, res, lng) {
    var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    if (options.lookupSession && req && options.getSession(req)) {
      options.getSession(req)[options.lookupSession] = lng;
    }
  }
};
var getPath$1 = function getPath(req) {
  if (req.path)
    return req.path;
  if (req.raw && req.raw.path)
    return req.raw.path;
  if (req.url)
    return req.url;
  console.log("no possibility found to get path");
};
var getUrl = function getUrl2(req) {
  if (req.url && req.url.href)
    return req.url.href;
  if (req.url)
    return req.url;
  if (req.raw && req.raw.url)
    return req.raw.url;
  console.log("no possibility found to get url");
};
var setUrl = function setUrl2(req, url) {
  if (req.url) {
    req.url = url;
    return;
  }
  console.log("no possibility found to get url");
};
var getOriginalUrl = function getOriginalUrl2(req) {
  if (req.originalUrl)
    return req.originalUrl;
  if (req.raw && req.raw.originalUrl)
    return req.raw.originalUrl;
  return getUrl(req);
};
var getQuery = function getQuery2(req) {
  if (req.query && typeof req.query.entries === "function" && typeof Object.fromEntries === "function" && typeof req.query[Symbol.iterator] === "function") {
    return Object.fromEntries(req.query);
  }
  if (req.query)
    return req.query;
  if (req.searchParams)
    return req.searchParams;
  if (req.raw && req.raw.query)
    return req.raw.query;
  if (req.ctx && req.ctx.queryParams)
    return req.ctx.queryParams;
  if (req.url && req.url.searchParams)
    return req.url.searchParams;
  var url = req.url || req.raw && req.raw.url;
  if (url && url.indexOf("?") < 0)
    return {};
  console.log("no possibility found to get query");
  return {};
};
var getParams = function getParams2(req) {
  if (req.params)
    return req.params;
  if (req.raw && req.raw.params)
    return req.raw.params;
  if (req.ctx && req.ctx.params)
    return req.ctx.params;
  console.log("no possibility found to get params");
  return {};
};
var getHeaders = function getHeaders2(req) {
  if (req.headers)
    return req.headers;
  console.log("no possibility found to get headers");
};
var getCookies = function getCookies2(req) {
  if (req.cookies)
    return req.cookies;
  if (getHeaders(req)) {
    var list = {};
    var rc = getHeaders(req).cookie;
    rc && rc.split(";").forEach(function(cookie2) {
      var parts = cookie2.split("=");
      list[parts.shift().trim()] = decodeURI(encodeURI(parts.join("=")));
    });
    return list;
  }
  console.log("no possibility found to get cookies");
};
var getBody = function getBody2(req) {
  if (req.ctx && typeof req.ctx.body === "function") {
    return req.ctx.body.bind(req.ctx);
  }
  if (req.ctx && req.ctx.body)
    return req.ctx.body;
  if (req.json)
    return req.json;
  if (req.body)
    return req.body;
  if (req.payload)
    return req.payload;
  if (req.request && req.request.body)
    return req.request.body;
  console.log("no possibility found to get body");
  return {};
};
var getHeader = function getHeader2(res, name) {
  if (res.getHeader)
    return res.getHeader(name);
  if (res.headers)
    return res.headers[name];
  if (getHeaders(res) && getHeaders(res)[name])
    return getHeaders(res)[name];
  console.log("no possibility found to get header");
  return void 0;
};
var setHeader = function setHeader2(res, name, value) {
  if (res._headerSent || res.headersSent)
    return;
  if (typeof res.setHeader === "function")
    return res.setHeader(name, value);
  if (typeof res.header === "function")
    return res.header(name, value);
  if (res.responseHeaders && typeof res.responseHeaders.set === "function") {
    return res.responseHeaders.set(name, value);
  }
  if (res.headers && typeof res.headers.set === "function") {
    return res.headers.set(name, value);
  }
  if (typeof res.set === "function") {
    return res.set(name, value);
  }
  console.log("no possibility found to set header");
};
var setContentType = function setContentType2(res, type) {
  if (typeof res.contentType === "function")
    return res.contentType(type);
  if (typeof res.type === "function")
    return res.type(type);
  setHeader(res, "Content-Type", type);
};
var setStatus = function setStatus2(res, code) {
  if (typeof res.status === "function")
    return res.status(code);
  if (res.status)
    return res.status = code;
  console.log("no possibility found to set status");
};
var send = function send2(res, body) {
  if (typeof res.send === "function")
    return res.send(body);
  if (res.request && res.response && res.app)
    res.body = body;
  return body;
};
var getSession = function getSession2(req) {
  if (req.session)
    return req.session;
  if (req.raw && req.raw.session)
    return req.raw.session;
  console.log("no possibility found to get session");
};
var extendOptionsWithDefaults = function extendOptionsWithDefaults2() {
  var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  options.getPath = options.getPath || getPath$1;
  options.getOriginalUrl = options.getOriginalUrl || getOriginalUrl;
  options.getUrl = options.getUrl || getUrl;
  options.setUrl = options.setUrl || setUrl;
  options.getParams = options.getParams || getParams;
  options.getSession = options.getSession || getSession;
  options.getQuery = options.getQuery || getQuery;
  options.getCookies = options.getCookies || getCookies;
  options.getBody = options.getBody || getBody;
  options.getHeaders = options.getHeaders || getHeaders;
  options.getHeader = options.getHeader || getHeader;
  options.setHeader = options.setHeader || setHeader;
  options.setContentType = options.setContentType || setContentType;
  options.setStatus = options.setStatus || setStatus;
  options.send = options.send || send;
  return options;
};
function _typeof$3(o) {
  "@babel/helpers - typeof";
  return _typeof$3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof$3(o);
}
function _classCallCheck$2(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$2(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass$2(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$2(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$2(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof$3(key) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof$3(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof$3(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function getDefaults$3() {
  return extendOptionsWithDefaults({
    order: ["querystring", "cookie", "header"],
    lookupQuerystring: "lng",
    lookupCookie: "i18next",
    lookupSession: "lng",
    lookupFromPathIndex: 0,
    caches: false,
    cookieSameSite: "strict",
    ignoreCase: true
  });
}
var LanguageDetector$1 = function() {
  function LanguageDetector2(services) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var allOptions = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    _classCallCheck$2(this, LanguageDetector2);
    this.type = "languageDetector";
    this.detectors = {};
    this.init(services, options, allOptions);
  }
  _createClass$2(LanguageDetector2, [{
    key: "init",
    value: function init3(services) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var allOptions = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      this.services = services;
      this.options = defaults$2(options, this.options || {}, getDefaults$3());
      this.allOptions = allOptions;
      this.addDetector(cookieLookup);
      this.addDetector(querystringLookup);
      this.addDetector(pathLookup);
      this.addDetector(headerLookup);
      this.addDetector(sessionLookup);
    }
  }, {
    key: "addDetector",
    value: function addDetector(detector) {
      this.detectors[detector.name] = detector;
    }
  }, {
    key: "detect",
    value: function detect(req, res, detectionOrder) {
      var _this = this;
      if (arguments.length < 2)
        return;
      if (!detectionOrder)
        detectionOrder = this.options.order;
      var found;
      detectionOrder.forEach(function(detectorName) {
        if (found || !_this.detectors[detectorName])
          return;
        var detections = _this.detectors[detectorName].lookup(req, res, _this.options);
        if (!detections)
          return;
        if (!Array.isArray(detections))
          detections = [detections];
        detections = detections.filter(function(d) {
          return d !== void 0 && d !== null;
        });
        if (_this.services.languageUtils.getBestMatchFromCodes) {
          found = _this.services.languageUtils.getBestMatchFromCodes(detections);
          if (found) {
            if (_this.options.ignoreCase) {
              if (detections.map(function(d) {
                return d.toLowerCase();
              }).indexOf(found.toLowerCase()) < 0)
                found = void 0;
            } else {
              if (detections.indexOf(found) < 0)
                found = void 0;
            }
          }
          if (found)
            req.i18nextLookupName = detectorName;
        } else {
          found = detections.length > 0 ? detections[0] : null;
        }
      });
      if (!found) {
        var fallbacks = this.allOptions.fallbackLng;
        if (typeof fallbacks === "function")
          fallbacks = fallbacks();
        if (typeof fallbacks === "string")
          fallbacks = [fallbacks];
        if (!fallbacks)
          fallbacks = [];
        if (Object.prototype.toString.apply(fallbacks) === "[object Array]") {
          found = fallbacks[0];
        } else {
          found = fallbacks[0] || fallbacks.default && fallbacks.default[0];
        }
      }
      return found;
    }
  }, {
    key: "cacheUserLanguage",
    value: function cacheUserLanguage6(req, res, lng, caches) {
      var _this2 = this;
      if (arguments.length < 3)
        return;
      if (!caches)
        caches = this.options.caches;
      if (!caches)
        return;
      caches.forEach(function(cacheName) {
        if (_this2.detectors[cacheName] && _this2.detectors[cacheName].cacheUserLanguage && res.cachedUserLanguage !== lng) {
          _this2.detectors[cacheName].cacheUserLanguage(req, res, lng, _this2.options);
          res.cachedUserLanguage = lng;
        }
      });
    }
  }]);
  return LanguageDetector2;
}();
LanguageDetector$1.type = "languageDetector";
var LanguageDetector = LanguageDetector$1;
function _typeof$2(o) {
  "@babel/helpers - typeof";
  return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof$2(o);
}
function toPrimitive(t, r) {
  if ("object" != _typeof$2(t) || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof$2(i))
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function toPropertyKey(t) {
  var i = toPrimitive(t, "string");
  return "symbol" == _typeof$2(i) ? i : String(i);
}
function _defineProperty$1(obj, key, value) {
  key = toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _classCallCheck$1(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass$1(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
var matchHtmlEntity = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34|nbsp|#160|copy|#169|reg|#174|hellip|#8230|#x2F|#47);/g;
var htmlEntities = {
  "&amp;": "&",
  "&#38;": "&",
  "&lt;": "<",
  "&#60;": "<",
  "&gt;": ">",
  "&#62;": ">",
  "&apos;": "'",
  "&#39;": "'",
  "&quot;": '"',
  "&#34;": '"',
  "&nbsp;": " ",
  "&#160;": " ",
  "&copy;": "©",
  "&#169;": "©",
  "&reg;": "®",
  "&#174;": "®",
  "&hellip;": "…",
  "&#8230;": "…",
  "&#x2F;": "/",
  "&#47;": "/"
};
var unescapeHtmlEntity = function unescapeHtmlEntity2(m2) {
  return htmlEntities[m2];
};
var unescape = function unescape2(text) {
  return text.replace(matchHtmlEntity, unescapeHtmlEntity);
};
function ownKeys$7(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$7(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$7(Object(source), true).forEach(function(key) {
        _defineProperty$1(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$7(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
var defaultOptions = {
  bindI18n: "languageChanged",
  bindI18nStore: "",
  transEmptyNodeValue: "",
  transSupportBasicHtmlNodes: true,
  transWrapTextNodes: "",
  transKeepBasicHtmlNodesFor: ["br", "strong", "i", "p"],
  useSuspense: true,
  unescape
};
var i18nInstance;
var I18nContext = reactExports.createContext();
function setDefaults() {
  var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  defaultOptions = _objectSpread$7(_objectSpread$7({}, defaultOptions), options);
}
function getDefaults$2() {
  return defaultOptions;
}
var ReportNamespaces = function() {
  function ReportNamespaces2() {
    _classCallCheck$1(this, ReportNamespaces2);
    this.usedNamespaces = {};
  }
  _createClass$1(ReportNamespaces2, [{
    key: "addUsedNamespaces",
    value: function addUsedNamespaces(namespaces) {
      var _this = this;
      namespaces.forEach(function(ns) {
        if (!_this.usedNamespaces[ns])
          _this.usedNamespaces[ns] = true;
      });
    }
  }, {
    key: "getUsedNamespaces",
    value: function getUsedNamespaces() {
      return Object.keys(this.usedNamespaces);
    }
  }]);
  return ReportNamespaces2;
}();
function setI18n(instance2) {
  i18nInstance = instance2;
}
function getI18n() {
  return i18nInstance;
}
var initReactI18next = {
  type: "3rdParty",
  init: function init2(instance2) {
    setDefaults(instance2.options.react);
    setI18n(instance2);
  }
};
function _arrayWithHoles(arr2) {
  if (Array.isArray(arr2))
    return arr2;
}
function _arrayLikeToArray(arr2, len) {
  if (len == null || len > arr2.length)
    len = arr2.length;
  for (var i = 0, arr22 = new Array(len); i < len; i++)
    arr22[i] = arr2[i];
  return arr22;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
class ProsopoBaseError extends Error {
  constructor(error2, options) {
    const logger2 = (options == null ? void 0 : options.logger) || getLoggerDefault();
    const logLevel = (options == null ? void 0 : options.logLevel) || "error";
    if (error2 instanceof Error) {
      super(error2.message);
      this.translationKey = options == null ? void 0 : options.translationKey;
      this.context = {
        ...options == null ? void 0 : options.context,
        ...(options == null ? void 0 : options.translationKey) ? { translationMessage: i18n.t(options.translationKey) } : {}
      };
    } else {
      super(i18n.t(error2));
      this.translationKey = error2;
      this.context = options == null ? void 0 : options.context;
    }
    if (options == null ? void 0 : options.silent)
      this.logError(logger2, logLevel);
  }
  logError(logger2, logLevel) {
    const errorFormatter = "\n*************** ERROR ***************\n";
    const errorName = `Error Type: ${this.name}
`;
    const errorParams = JSON.stringify({ error: this.message, context: this.context });
    const errorMessage = `${errorFormatter}${errorName}${errorParams}`;
    logger2[logLevel](errorMessage);
  }
}
class ProsopoError extends ProsopoBaseError {
  constructor(error2, options) {
    const errorName = (options == null ? void 0 : options.name) || "ProsopoError";
    options = { ...options, name: errorName };
    super(error2, options);
  }
}
class ProsopoEnvError extends ProsopoBaseError {
  constructor(error2, options) {
    const errorName = (options == null ? void 0 : options.name) || "ProsopoEnvError";
    options = { ...options, name: errorName };
    super(error2, options);
  }
}
class ProsopoContractError extends ProsopoBaseError {
  constructor(error2, options) {
    const errorName = (options == null ? void 0 : options.name) || "ProsopoContractError";
    options = { ...options, name: errorName };
    super(error2, options);
  }
}
class ProsopoDatasetError extends ProsopoBaseError {
  constructor(error2, options) {
    const errorName = (options == null ? void 0 : options.name) || "ProsopoDatasetError";
    options = { ...options, name: errorName };
    super(error2, options);
  }
}
class ProsopoApiError extends ProsopoBaseError {
  constructor(error2, options) {
    var _a2;
    const errorName = (options == null ? void 0 : options.name) || "ProsopoApiError";
    const errorCode = ((_a2 = options == null ? void 0 : options.context) == null ? void 0 : _a2.code) || 500;
    options = { ...options, name: errorName, context: { ...options == null ? void 0 : options.context, errorCode } };
    super(error2, options);
    this.code = errorCode;
  }
}
const WIDGET = {
  SELECT_ALL: "Select all images containing a",
  NEXT: "Next",
  SUBMIT: "Submit",
  CANCEL: "Cancel",
  SELECT_ACCOUNT: "Select account",
  NO_ACCOUNTS_FOUND: "No accounts found",
  ACCOUNT_NOT_FOUND: "Account not found",
  NO_EXTENSION_FOUND: "No extension found",
  EXTENSION_NOT_FOUND: "Extension not found",
  CANVAS: "Error with Captcha canvas"
};
const GENERAL = {
  BAD_SURI: "Bad SURI",
  CANNOT_FIND_CONFIG_FILE: "prosopo.config.js / prosopo.config.ts cannot be found.",
  JSON_LOAD_FAILED: "Failed to load JSON file",
  CREATE_JSON_FILE_FAILED: "Failed to create JSON file",
  ASSERT_ERROR: "AssertionError",
  GENERATE_CPATCHAS_JSON_FAILED: "Something went wrong while creating captchas json file",
  CALCULATE_CAPTCHA_SOLUTION: "Something went wrong while calculating captcha solutions",
  MNEMONIC_UNDEFINED: "Mnemonic Undefined. Please set the mnemonic in environment variables",
  NO_MNEMONIC_OR_SEED: "No mnemonic or seed provided",
  ASYNC_FACTORY_CREATE: "Use `create` factory method",
  CANT_FIND_KEYRINGPAIR: "Can't find the keyringpair for {{address}}",
  ENVIRONMENT_NOT_READY: "Environment not ready",
  INVALID_SIGNATURE: "Invalid signature",
  PAIR_TYPE_UNDEFINED: "Pair type undefined",
  NOT_IMPLEMENTED: "Not implemented",
  NO_PAIR_TYPE_OR_SS58_FORMAT: "No pair type or ss58 format provided",
  SITE_KEY_MISSING: "SITE KEY missing",
  ACCOUNT_NOT_FOUND: "Account not found"
};
const CONTRACT = {
  INVALID_METHOD: "Invalid contract method",
  TX_ERROR: "Error making tx",
  QUERY_ERROR: "Error making query",
  INVALID_ADDRESS: "Failed to encode invalid address",
  INVALID_STORAGE_NAME: "Failed to find given storage name",
  CAPTCHA_SOLUTION_COMMITMENT_DOES_NOT_EXIST: "Captcha solution commitment does not exist",
  DAPP_NOT_ACTIVE: "Dapp is not active",
  CONTRACT_UNDEFINED: "Contract undefined",
  SIGNER_UNDEFINED: "Signer undefined",
  SIGNER_NOT_SUPPORTED: "Signer is not supported. Use connect instead, e.g. contract.connect(signer)",
  CANNOT_FIND_KEYPAIR: "Cannot find keypair",
  INVALID_TYPE: "Invalid type",
  INVALID_ABI: "Invalid ABI",
  NOT_HANDLED: "Not handled",
  INVALID_STORAGE_TYPE: "Invalid storage type",
  INTERRUPTED_EVENT: "Event interrupted",
  TOO_MANY_CALLS: "Too many calls",
  UNKNOWN_ERROR: "Unknown error",
  CHAIN_DECIMALS_UNDEFINED: "Chain decimals are not defined",
  INVALID_DATA_FORMAT: "Invalid data format",
  INVALID_BLOCKHASH: "Invalid blockhash"
};
const CONFIG = {
  UNKNOWN_ENVIRONMENT: "Unknown environment requested",
  INVALID_CAPTCHA_NUMBER: "Please configure captchas configurations correctly",
  CONFIGURATIONS_LOAD_FAILED: "Prosopo configurations load failed",
  INVALID_LOG_LEVEL: "Invalid log level",
  INVALID_PACKAGE_DIR: "Invalid package directory"
};
const DATASET = {
  DATASET_PARSE_ERROR: "Error parsing dataset",
  SOLUTION_PARSE_ERROR: "Error parsing dataset",
  HASH_ERROR: "Error hashing dataset",
  INVALID_DATASET_ID: "Invalid dataset id",
  DATASET_ID_UNDEFINED: "Dataset id undefined",
  NOT_ENOUGH_LABELS: "Not enough labels",
  NOT_ENOUGH_IMAGES: "Not enough images",
  CAPTCHAS_COUNT_LESS_THAN_CONFIGURED: "Number of captchas in dataset is less than configured number of captchas",
  SOLUTIONS_COUNT_LESS_THAN_CONFIGURED: "Number of solutions in dataset is less than configured number of solutions",
  DUPLICATE_IMAGE: "duplicate image detected",
  MERKLE_ERROR: "Error creating merkle tree"
};
const DATABASE = {
  CONNECT_ERROR: "Failed to connect",
  DATABASE_IMPORT_FAILED: "Failed to import database engine",
  DATABASE_UNDEFINED: "Database client is not connected",
  DATABASE_HOST_UNDEFINED: "Database host address is not defined",
  COLLECTION_UNDEFINED: "Database collection is not available",
  DATASET_LOAD_FAILED: "Data set load failed",
  DATASET_GET_FAILED: "Failed to get dataset",
  CAPTCHA_GET_FAILED: "Failed to get captcha",
  CAPTCHA_UPDATE_FAILED: "Failed to update captcha",
  IMAGE_GET_FAILED: "Failed to get image",
  NO_CAPTCHAS_FOUND: "No captcha matching datasetId",
  PENDING_RECORD_NOT_FOUND: "No pending record found",
  INVALID_HASH: "Invalid hash",
  SOLUTION_GET_FAILED: "Failed to get solution",
  DATASET_WITH_SOLUTIONS_GET_FAILED: "No datasets found with required number of solutions",
  SOLUTION_APPROVE_FAILED: "Failed to approve solution",
  SOLUTION_FLAG_FAILED: "Failed to flag solution as processed",
  COMMITMENT_FLAG_FAILED: "Failed to flag commitment as processed"
};
const CAPTCHA = {
  PARSE_ERROR: "Error parsing captcha",
  INVALID_CAPTCHA_ID: "Invalid captcha id",
  SOLUTION_HASH_ERROR: "Error hashing solution",
  INVALID_ITEM_FORMAT: "Only image and text item types allowed",
  INVALID_SOLUTION_TYPE: "Invalid solution type",
  INVALID_ITEM_HASH: "Invalid item hash",
  DIFFERENT_DATASET_IDS: "Dataset ids do not match",
  INVALID_BLOCK_NO: "Invalid block number",
  ID_MISMATCH: "captcha id mismatch",
  MISSING_ITEM_HASH: "missing item hash",
  INVALID_LEAF_HASH: "Invalid leaf hash",
  INVALID_CAPTCHA_CHALLENGE: "Invalid captcha challenge",
  INVALID_DATASET_CONTENT_ID: "Invalid dataset content id",
  DAPP_USER_SOLUTION_NOT_FOUND: "Dapp user solution not found",
  INVALID_PROVIDER_URL: "Invalid provider url",
  NO_CAPTCHA: "No captcha found"
};
const API = {
  BODY_UNDEFINED: "Body must be defined in API POST call",
  PARAMETER_UNDEFINED: "Parameters must be defined in API POST call",
  CAPTCHA_FAILED: "You answered one or more captchas incorrectly. Please try again",
  CAPTCHA_PENDING: "Captcha solutions submitted and awaiting approval",
  CAPTCHA_PASSED: "You correctly answered the captchas",
  BAD_REQUEST: "BadRequest",
  PAYMENT_INFO_NOT_FOUND: "Payment info not found for given block and transaction hashes",
  USER_VERIFIED: "User verified",
  USER_NOT_VERIFIED: "User not verified",
  UNKNOWN: "Unknown API error"
};
const CLI = {
  PARAMETER_ERROR: "Invalid parameter"
};
const DEVELOPER = {
  PROSOPO_SITE_KEY_MISSING: "PROSOPO_SITE_KEY is not set in .env file.",
  BALANCE_TOO_LOW: "{{mnemonic}} balance too low: {{balance}}",
  CAPTCHA_ID_MISSING: "Cannot find captcha data id",
  COMMITMENT_ID_MISSING: "Commitment id missing",
  PROVIDER_NOT_FOUND: "Provider not found",
  PROVIDER_NO_CAPTCHA: "No captchas returned from provider",
  CREATE_ACCOUNT_FAILED: "Could not create an account!",
  CREATE_ACCOUNT_FAILED_OUT_OF_FUNDS: "Could not create an account as there are no funds. Restart the substrate node.",
  NO_MOCK_ENV: "MockEnvironment not set up",
  ACCOUNT_TYPE_MISSING: "{{accountType}} not created by databasePopulator",
  FUNDING_FAILED: "Funding failed",
  MISSING_PROVIDER_PAIR: "Missing provider pair",
  NETWORK_NOT_FOUND: "Network not found",
  MISSING_ENV_VARIABLE: "Missing environment variable",
  GENERAL: "General Dev Error, see context",
  MISSING_SECRET_KEY: "Missing secret key",
  KEY_ERROR: "Key error",
  METHOD_NOT_IMPLEMENTED: "Method not implemented"
};
const FS = {
  DIRECTORY_NOT_FOUND: "Directory not found",
  FILE_NOT_FOUND: "File not found",
  FILE_ALREADY_EXISTS: "File already exists",
  DIRECTORY_ALREADY_EXISTS: "Directory already exists",
  SAME_FILE: "Same file",
  INVALID_DIR_FORMAT: "Invalid directory format"
};
const PROGUI = {
  NO_STATE_PROVIDER: "useGlobalState must be used within a GlobalStateProvider",
  NO_POLKADOT_EXTENSION: "Polkadot extension not found"
};
const translationEn = {
  WIDGET,
  GENERAL,
  CONTRACT,
  CONFIG,
  DATASET,
  DATABASE,
  CAPTCHA,
  API,
  CLI,
  DEVELOPER,
  FS,
  PROGUI
};
function isClientSide() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
function getLeafFieldPath(obj) {
  if (typeof obj === "string") {
    return [obj];
  }
  return Object.keys(obj).reduce((arr2, key) => {
    const value = obj[key];
    if (value === void 0) {
      throw new ProsopoError("DEVELOPER.KEY_ERROR", { context: { error: `Undefined value for key ${key}` } });
    }
    const children = getLeafFieldPath(value);
    return arr2.concat(children.map((child) => {
      return `${key}.${child}`;
    }));
  }, []);
}
getLeafFieldPath(translationEn);
const trimProviderUrl = (url) => {
  return hexToString(url).replace(/\0/g, "");
};
function snakeToCamelCase(str) {
  return str.replace(/([-_][a-z])/g, (group) => group.toUpperCase().replace("-", "").replace("_", ""));
}
function reverseHexString(str) {
  var _a2;
  return `0x${((_a2 = str.match(/.{1,2}/g)) == null ? void 0 : _a2.reverse().join("")) || ""}`;
}
function _typeof$1(obj) {
  "@babel/helpers - typeof";
  return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$1(obj);
}
var arr$1 = [];
var each$1 = arr$1.forEach;
var slice$1 = arr$1.slice;
function defaults$1(obj) {
  each$1.call(slice$1.call(arguments, 1), function(source) {
    if (source) {
      for (var prop in source) {
        if (obj[prop] === void 0)
          obj[prop] = source[prop];
      }
    }
  });
  return obj;
}
function hasXMLHttpRequest() {
  return typeof XMLHttpRequest === "function" || (typeof XMLHttpRequest === "undefined" ? "undefined" : _typeof$1(XMLHttpRequest)) === "object";
}
function isPromise$1(maybePromise) {
  return !!maybePromise && typeof maybePromise.then === "function";
}
function makePromise(maybePromise) {
  if (isPromise$1(maybePromise)) {
    return maybePromise;
  }
  return Promise.resolve(maybePromise);
}
var getFetch$1 = { exports: {} };
var browserPonyfill = { exports: {} };
var hasRequiredBrowserPonyfill;
function requireBrowserPonyfill() {
  if (hasRequiredBrowserPonyfill)
    return browserPonyfill.exports;
  hasRequiredBrowserPonyfill = 1;
  (function(module2, exports) {
    var global2 = typeof self !== "undefined" ? self : commonjsGlobal;
    var __self__ = function() {
      function F() {
        this.fetch = false;
        this.DOMException = global2.DOMException;
      }
      F.prototype = global2;
      return new F();
    }();
    (function(self2) {
      (function(exports2) {
        var support = {
          searchParams: "URLSearchParams" in self2,
          iterable: "Symbol" in self2 && "iterator" in Symbol,
          blob: "FileReader" in self2 && "Blob" in self2 && function() {
            try {
              new Blob();
              return true;
            } catch (e) {
              return false;
            }
          }(),
          formData: "FormData" in self2,
          arrayBuffer: "ArrayBuffer" in self2
        };
        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
          var viewClasses = [
            "[object Int8Array]",
            "[object Uint8Array]",
            "[object Uint8ClampedArray]",
            "[object Int16Array]",
            "[object Uint16Array]",
            "[object Int32Array]",
            "[object Uint32Array]",
            "[object Float32Array]",
            "[object Float64Array]"
          ];
          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }
        function normalizeName(name) {
          if (typeof name !== "string") {
            name = String(name);
          }
          if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
            throw new TypeError("Invalid character in header field name");
          }
          return name.toLowerCase();
        }
        function normalizeValue(value) {
          if (typeof value !== "string") {
            value = String(value);
          }
          return value;
        }
        function iteratorFor(items) {
          var iterator2 = {
            next: function() {
              var value = items.shift();
              return { done: value === void 0, value };
            }
          };
          if (support.iterable) {
            iterator2[Symbol.iterator] = function() {
              return iterator2;
            };
          }
          return iterator2;
        }
        function Headers(headers) {
          this.map = {};
          if (headers instanceof Headers) {
            headers.forEach(function(value, name) {
              this.append(name, value);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name) {
              this.append(name, headers[name]);
            }, this);
          }
        }
        Headers.prototype.append = function(name, value) {
          name = normalizeName(name);
          value = normalizeValue(value);
          var oldValue = this.map[name];
          this.map[name] = oldValue ? oldValue + ", " + value : value;
        };
        Headers.prototype["delete"] = function(name) {
          delete this.map[normalizeName(name)];
        };
        Headers.prototype.get = function(name) {
          name = normalizeName(name);
          return this.has(name) ? this.map[name] : null;
        };
        Headers.prototype.has = function(name) {
          return this.map.hasOwnProperty(normalizeName(name));
        };
        Headers.prototype.set = function(name, value) {
          this.map[normalizeName(name)] = normalizeValue(value);
        };
        Headers.prototype.forEach = function(callback, thisArg) {
          for (var name in this.map) {
            if (this.map.hasOwnProperty(name)) {
              callback.call(thisArg, this.map[name], name, this);
            }
          }
        };
        Headers.prototype.keys = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push(name);
          });
          return iteratorFor(items);
        };
        Headers.prototype.values = function() {
          var items = [];
          this.forEach(function(value) {
            items.push(value);
          });
          return iteratorFor(items);
        };
        Headers.prototype.entries = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push([name, value]);
          });
          return iteratorFor(items);
        };
        if (support.iterable) {
          Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
        }
        function consumed(body) {
          if (body.bodyUsed) {
            return Promise.reject(new TypeError("Already read"));
          }
          body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
          return new Promise(function(resolve, reject) {
            reader.onload = function() {
              resolve(reader.result);
            };
            reader.onerror = function() {
              reject(reader.error);
            };
          });
        }
        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise;
        }
        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsText(blob);
          return promise;
        }
        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars2 = new Array(view.length);
          for (var i = 0; i < view.length; i++) {
            chars2[i] = String.fromCharCode(view[i]);
          }
          return chars2.join("");
        }
        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }
        function Body() {
          this.bodyUsed = false;
          this._initBody = function(body) {
            this._bodyInit = body;
            if (!body) {
              this._bodyText = "";
            } else if (typeof body === "string") {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer);
              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get("content-type")) {
              if (typeof body === "string") {
                this.headers.set("content-type", "text/plain;charset=UTF-8");
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set("content-type", this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
            }
          };
          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as blob");
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };
            this.arrayBuffer = function() {
              if (this._bodyArrayBuffer) {
                return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
              } else {
                return this.blob().then(readBlobAsArrayBuffer);
              }
            };
          }
          this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as text");
            } else {
              return Promise.resolve(this._bodyText);
            }
          };
          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode2);
            };
          }
          this.json = function() {
            return this.text().then(JSON.parse);
          };
          return this;
        }
        var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }
        function Request(input, options) {
          options = options || {};
          var body = options.body;
          if (input instanceof Request) {
            if (input.bodyUsed) {
              throw new TypeError("Already read");
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
              this.headers = new Headers(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }
          this.credentials = options.credentials || this.credentials || "same-origin";
          if (options.headers || !this.headers) {
            this.headers = new Headers(options.headers);
          }
          this.method = normalizeMethod(options.method || this.method || "GET");
          this.mode = options.mode || this.mode || null;
          this.signal = options.signal || this.signal;
          this.referrer = null;
          if ((this.method === "GET" || this.method === "HEAD") && body) {
            throw new TypeError("Body not allowed for GET or HEAD requests");
          }
          this._initBody(body);
        }
        Request.prototype.clone = function() {
          return new Request(this, { body: this._bodyInit });
        };
        function decode2(body) {
          var form = new FormData();
          body.trim().split("&").forEach(function(bytes2) {
            if (bytes2) {
              var split2 = bytes2.split("=");
              var name = split2.shift().replace(/\+/g, " ");
              var value = split2.join("=").replace(/\+/g, " ");
              form.append(decodeURIComponent(name), decodeURIComponent(value));
            }
          });
          return form;
        }
        function parseHeaders(rawHeaders) {
          var headers = new Headers();
          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
          preProcessedHeaders.split(/\r?\n/).forEach(function(line2) {
            var parts = line2.split(":");
            var key = parts.shift().trim();
            if (key) {
              var value = parts.join(":").trim();
              headers.append(key, value);
            }
          });
          return headers;
        }
        Body.call(Request.prototype);
        function Response(bodyInit, options) {
          if (!options) {
            options = {};
          }
          this.type = "default";
          this.status = options.status === void 0 ? 200 : options.status;
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = "statusText" in options ? options.statusText : "OK";
          this.headers = new Headers(options.headers);
          this.url = options.url || "";
          this._initBody(bodyInit);
        }
        Body.call(Response.prototype);
        Response.prototype.clone = function() {
          return new Response(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers(this.headers),
            url: this.url
          });
        };
        Response.error = function() {
          var response = new Response(null, { status: 0, statusText: "" });
          response.type = "error";
          return response;
        };
        var redirectStatuses = [301, 302, 303, 307, 308];
        Response.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError("Invalid status code");
          }
          return new Response(null, { status, headers: { location: url } });
        };
        exports2.DOMException = self2.DOMException;
        try {
          new exports2.DOMException();
        } catch (err) {
          exports2.DOMException = function(message, name) {
            this.message = message;
            this.name = name;
            var error2 = Error(message);
            this.stack = error2.stack;
          };
          exports2.DOMException.prototype = Object.create(Error.prototype);
          exports2.DOMException.prototype.constructor = exports2.DOMException;
        }
        function fetch2(input, init3) {
          return new Promise(function(resolve, reject) {
            var request3 = new Request(input, init3);
            if (request3.signal && request3.signal.aborted) {
              return reject(new exports2.DOMException("Aborted", "AbortError"));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
              xhr.abort();
            }
            xhr.onload = function() {
              var options = {
                status: xhr.status,
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || "")
              };
              options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
              var body = "response" in xhr ? xhr.response : xhr.responseText;
              resolve(new Response(body, options));
            };
            xhr.onerror = function() {
              reject(new TypeError("Network request failed"));
            };
            xhr.ontimeout = function() {
              reject(new TypeError("Network request failed"));
            };
            xhr.onabort = function() {
              reject(new exports2.DOMException("Aborted", "AbortError"));
            };
            xhr.open(request3.method, request3.url, true);
            if (request3.credentials === "include") {
              xhr.withCredentials = true;
            } else if (request3.credentials === "omit") {
              xhr.withCredentials = false;
            }
            if ("responseType" in xhr && support.blob) {
              xhr.responseType = "blob";
            }
            request3.headers.forEach(function(value, name) {
              xhr.setRequestHeader(name, value);
            });
            if (request3.signal) {
              request3.signal.addEventListener("abort", abortXhr);
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                  request3.signal.removeEventListener("abort", abortXhr);
                }
              };
            }
            xhr.send(typeof request3._bodyInit === "undefined" ? null : request3._bodyInit);
          });
        }
        fetch2.polyfill = true;
        if (!self2.fetch) {
          self2.fetch = fetch2;
          self2.Headers = Headers;
          self2.Request = Request;
          self2.Response = Response;
        }
        exports2.Headers = Headers;
        exports2.Request = Request;
        exports2.Response = Response;
        exports2.fetch = fetch2;
        Object.defineProperty(exports2, "__esModule", { value: true });
        return exports2;
      })({});
    })(__self__);
    __self__.fetch.ponyfill = true;
    delete __self__.fetch.polyfill;
    var ctx = __self__;
    exports = ctx.fetch;
    exports.default = ctx.fetch;
    exports.fetch = ctx.fetch;
    exports.Headers = ctx.Headers;
    exports.Request = ctx.Request;
    exports.Response = ctx.Response;
    module2.exports = exports;
  })(browserPonyfill, browserPonyfill.exports);
  return browserPonyfill.exports;
}
(function(module2, exports) {
  var fetchApi2;
  if (typeof fetch === "function") {
    if (typeof commonjsGlobal !== "undefined" && commonjsGlobal.fetch) {
      fetchApi2 = commonjsGlobal.fetch;
    } else if (typeof window !== "undefined" && window.fetch) {
      fetchApi2 = window.fetch;
    } else {
      fetchApi2 = fetch;
    }
  }
  if (typeof commonjsRequire !== "undefined" && (typeof window === "undefined" || typeof window.document === "undefined")) {
    var f = fetchApi2 || requireBrowserPonyfill();
    if (f.default)
      f = f.default;
    exports.default = f;
    module2.exports = exports.default;
  }
})(getFetch$1, getFetch$1.exports);
var getFetchExports = getFetch$1.exports;
const getFetch = /* @__PURE__ */ getDefaultExportFromCjs(getFetchExports);
const fetchNode = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: getFetch
}, [getFetchExports]);
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
var fetchApi;
if (typeof fetch === "function") {
  if (typeof global !== "undefined" && global.fetch) {
    fetchApi = global.fetch;
  } else if (typeof window !== "undefined" && window.fetch) {
    fetchApi = window.fetch;
  } else {
    fetchApi = fetch;
  }
}
var XmlHttpRequestApi;
if (hasXMLHttpRequest()) {
  if (typeof global !== "undefined" && global.XMLHttpRequest) {
    XmlHttpRequestApi = global.XMLHttpRequest;
  } else if (typeof window !== "undefined" && window.XMLHttpRequest) {
    XmlHttpRequestApi = window.XMLHttpRequest;
  }
}
var ActiveXObjectApi;
if (typeof ActiveXObject === "function") {
  if (typeof global !== "undefined" && global.ActiveXObject) {
    ActiveXObjectApi = global.ActiveXObject;
  } else if (typeof window !== "undefined" && window.ActiveXObject) {
    ActiveXObjectApi = window.ActiveXObject;
  }
}
if (!fetchApi && fetchNode && !XmlHttpRequestApi && !ActiveXObjectApi)
  fetchApi = getFetch || fetchNode;
if (typeof fetchApi !== "function")
  fetchApi = void 0;
var addQueryString = function addQueryString2(url, params) {
  if (params && _typeof(params) === "object") {
    var queryString = "";
    for (var paramName in params) {
      queryString += "&" + encodeURIComponent(paramName) + "=" + encodeURIComponent(params[paramName]);
    }
    if (!queryString)
      return url;
    url = url + (url.indexOf("?") !== -1 ? "&" : "?") + queryString.slice(1);
  }
  return url;
};
var fetchIt = function fetchIt2(url, fetchOptions, callback) {
  fetchApi(url, fetchOptions).then(function(response) {
    if (!response.ok)
      return callback(response.statusText || "Error", {
        status: response.status
      });
    response.text().then(function(data) {
      callback(null, {
        status: response.status,
        data
      });
    }).catch(callback);
  }).catch(callback);
};
var omitFetchOptions = false;
var requestWithFetch = function requestWithFetch2(options, url, payload, callback) {
  if (options.queryStringParams) {
    url = addQueryString(url, options.queryStringParams);
  }
  var headers = defaults$1({}, typeof options.customHeaders === "function" ? options.customHeaders() : options.customHeaders);
  if (payload)
    headers["Content-Type"] = "application/json";
  var reqOptions = typeof options.requestOptions === "function" ? options.requestOptions(payload) : options.requestOptions;
  var fetchOptions = defaults$1({
    method: payload ? "POST" : "GET",
    body: payload ? options.stringify(payload) : void 0,
    headers
  }, omitFetchOptions ? {} : reqOptions);
  try {
    fetchIt(url, fetchOptions, callback);
  } catch (e) {
    if (!reqOptions || Object.keys(reqOptions).length === 0 || !e.message || e.message.indexOf("not implemented") < 0) {
      return callback(e);
    }
    try {
      Object.keys(reqOptions).forEach(function(opt) {
        delete fetchOptions[opt];
      });
      fetchIt(url, fetchOptions, callback);
      omitFetchOptions = true;
    } catch (err) {
      callback(err);
    }
  }
};
var requestWithXmlHttpRequest = function requestWithXmlHttpRequest2(options, url, payload, callback) {
  if (payload && _typeof(payload) === "object") {
    payload = addQueryString("", payload).slice(1);
  }
  if (options.queryStringParams) {
    url = addQueryString(url, options.queryStringParams);
  }
  try {
    var x;
    if (XmlHttpRequestApi) {
      x = new XmlHttpRequestApi();
    } else {
      x = new ActiveXObjectApi("MSXML2.XMLHTTP.3.0");
    }
    x.open(payload ? "POST" : "GET", url, 1);
    if (!options.crossDomain) {
      x.setRequestHeader("X-Requested-With", "XMLHttpRequest");
    }
    x.withCredentials = !!options.withCredentials;
    if (payload) {
      x.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    }
    if (x.overrideMimeType) {
      x.overrideMimeType("application/json");
    }
    var h = options.customHeaders;
    h = typeof h === "function" ? h() : h;
    if (h) {
      for (var i in h) {
        x.setRequestHeader(i, h[i]);
      }
    }
    x.onreadystatechange = function() {
      x.readyState > 3 && callback(x.status >= 400 ? x.statusText : null, {
        status: x.status,
        data: x.responseText
      });
    };
    x.send(payload);
  } catch (e) {
    console && console.log(e);
  }
};
var request = function request2(options, url, payload, callback) {
  if (typeof payload === "function") {
    callback = payload;
    payload = void 0;
  }
  callback = callback || function() {
  };
  if (fetchApi) {
    return requestWithFetch(options, url, payload, callback);
  }
  if (hasXMLHttpRequest() || typeof ActiveXObject === "function") {
    return requestWithXmlHttpRequest(options, url, payload, callback);
  }
  callback(new Error("No fetch and no xhr implementation found!"));
};
function _classCallCheck(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var getDefaults$1 = function getDefaults() {
  return {
    loadPath: "/locales/{{lng}}/{{ns}}.json",
    addPath: "/locales/add/{{lng}}/{{ns}}",
    allowMultiLoading: false,
    parse: function parse2(data) {
      return JSON.parse(data);
    },
    stringify: JSON.stringify,
    parsePayload: function parsePayload(namespace, key, fallbackValue) {
      return _defineProperty({}, key, fallbackValue || "");
    },
    request,
    reloadInterval: typeof window !== "undefined" ? false : 60 * 60 * 1e3,
    customHeaders: {},
    queryStringParams: {},
    crossDomain: false,
    withCredentials: false,
    overrideMimeType: false,
    requestOptions: {
      mode: "cors",
      credentials: "same-origin",
      cache: "default"
    }
  };
};
var Backend = function() {
  function Backend2(services) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var allOptions = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    _classCallCheck(this, Backend2);
    this.services = services;
    this.options = options;
    this.allOptions = allOptions;
    this.type = "backend";
    this.init(services, options, allOptions);
  }
  _createClass(Backend2, [{
    key: "init",
    value: function init3(services) {
      var _this = this;
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var allOptions = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      this.services = services;
      this.options = defaults$1(options, this.options || {}, getDefaults$1());
      this.allOptions = allOptions;
      if (this.services && this.options.reloadInterval) {
        setInterval(function() {
          return _this.reload();
        }, this.options.reloadInterval);
      }
    }
  }, {
    key: "readMulti",
    value: function readMulti(languages, namespaces, callback) {
      this._readAny(languages, languages, namespaces, namespaces, callback);
    }
  }, {
    key: "read",
    value: function read2(language, namespace, callback) {
      this._readAny([language], language, [namespace], namespace, callback);
    }
  }, {
    key: "_readAny",
    value: function _readAny(languages, loadUrlLanguages, namespaces, loadUrlNamespaces, callback) {
      var _this2 = this;
      var loadPath = this.options.loadPath;
      if (typeof this.options.loadPath === "function") {
        loadPath = this.options.loadPath(languages, namespaces);
      }
      loadPath = makePromise(loadPath);
      loadPath.then(function(resolvedLoadPath) {
        if (!resolvedLoadPath)
          return callback(null, {});
        var url = _this2.services.interpolator.interpolate(resolvedLoadPath, {
          lng: languages.join("+"),
          ns: namespaces.join("+")
        });
        _this2.loadUrl(url, callback, loadUrlLanguages, loadUrlNamespaces);
      });
    }
  }, {
    key: "loadUrl",
    value: function loadUrl(url, callback, languages, namespaces) {
      var _this3 = this;
      this.options.request(this.options, url, void 0, function(err, res) {
        if (res && (res.status >= 500 && res.status < 600 || !res.status))
          return callback("failed loading " + url + "; status code: " + res.status, true);
        if (res && res.status >= 400 && res.status < 500)
          return callback("failed loading " + url + "; status code: " + res.status, false);
        if (!res && err && err.message && err.message.indexOf("Failed to fetch") > -1)
          return callback("failed loading " + url + ": " + err.message, true);
        if (err)
          return callback(err, false);
        var ret, parseErr;
        try {
          if (typeof res.data === "string") {
            ret = _this3.options.parse(res.data, languages, namespaces);
          } else {
            ret = res.data;
          }
        } catch (e) {
          parseErr = "failed parsing " + url + " to json";
        }
        if (parseErr)
          return callback(parseErr, false);
        callback(null, ret);
      });
    }
  }, {
    key: "create",
    value: function create2(languages, namespace, key, fallbackValue, callback) {
      var _this4 = this;
      if (!this.options.addPath)
        return;
      if (typeof languages === "string")
        languages = [languages];
      var payload = this.options.parsePayload(namespace, key, fallbackValue);
      var finished = 0;
      var dataArray = [];
      var resArray = [];
      languages.forEach(function(lng) {
        var addPath = _this4.options.addPath;
        if (typeof _this4.options.addPath === "function") {
          addPath = _this4.options.addPath(lng, namespace);
        }
        var url = _this4.services.interpolator.interpolate(addPath, {
          lng,
          ns: namespace
        });
        _this4.options.request(_this4.options, url, payload, function(data, res) {
          finished += 1;
          dataArray.push(data);
          resArray.push(res);
          if (finished === languages.length) {
            if (callback)
              callback(dataArray, resArray);
          }
        });
      });
    }
  }, {
    key: "reload",
    value: function reload() {
      var _this5 = this;
      var _this$services = this.services, backendConnector = _this$services.backendConnector, languageUtils = _this$services.languageUtils, logger2 = _this$services.logger;
      var currentLanguage = backendConnector.language;
      if (currentLanguage && currentLanguage.toLowerCase() === "cimode")
        return;
      var toLoad = [];
      var append2 = function append3(lng) {
        var lngs = languageUtils.toResolveHierarchy(lng);
        lngs.forEach(function(l2) {
          if (toLoad.indexOf(l2) < 0)
            toLoad.push(l2);
        });
      };
      append2(currentLanguage);
      if (this.allOptions.preload)
        this.allOptions.preload.forEach(function(l2) {
          return append2(l2);
        });
      toLoad.forEach(function(lng) {
        _this5.allOptions.ns.forEach(function(ns) {
          backendConnector.read(lng, ns, "read", null, null, function(err, data) {
            if (err)
              logger2.warn("loading namespace ".concat(ns, " for language ").concat(lng, " failed"), err);
            if (!err && data)
              logger2.log("loaded namespace ".concat(ns, " for language ").concat(lng), data);
            backendConnector.loaded("".concat(lng, "|").concat(ns), err, data);
          });
        });
      });
    }
  }]);
  return Backend2;
}();
Backend.type = "backend";
var arr = [];
var each = arr.forEach;
var slice = arr.slice;
function defaults(obj) {
  each.call(slice.call(arguments, 1), function(source) {
    if (source) {
      for (var prop in source) {
        if (obj[prop] === void 0)
          obj[prop] = source[prop];
      }
    }
  });
  return obj;
}
var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
var serializeCookie2 = function serializeCookie3(name, val, options) {
  var opt = options || {};
  opt.path = opt.path || "/";
  var value = encodeURIComponent(val);
  var str = "".concat(name, "=").concat(value);
  if (opt.maxAge > 0) {
    var maxAge = opt.maxAge - 0;
    if (Number.isNaN(maxAge))
      throw new Error("maxAge should be a Number");
    str += "; Max-Age=".concat(Math.floor(maxAge));
  }
  if (opt.domain) {
    if (!fieldContentRegExp.test(opt.domain)) {
      throw new TypeError("option domain is invalid");
    }
    str += "; Domain=".concat(opt.domain);
  }
  if (opt.path) {
    if (!fieldContentRegExp.test(opt.path)) {
      throw new TypeError("option path is invalid");
    }
    str += "; Path=".concat(opt.path);
  }
  if (opt.expires) {
    if (typeof opt.expires.toUTCString !== "function") {
      throw new TypeError("option expires is invalid");
    }
    str += "; Expires=".concat(opt.expires.toUTCString());
  }
  if (opt.httpOnly)
    str += "; HttpOnly";
  if (opt.secure)
    str += "; Secure";
  if (opt.sameSite) {
    var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
    switch (sameSite) {
      case true:
        str += "; SameSite=Strict";
        break;
      case "lax":
        str += "; SameSite=Lax";
        break;
      case "strict":
        str += "; SameSite=Strict";
        break;
      case "none":
        str += "; SameSite=None";
        break;
      default:
        throw new TypeError("option sameSite is invalid");
    }
  }
  return str;
};
var cookie = {
  create: function create(name, value, minutes, domain) {
    var cookieOptions = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
      path: "/",
      sameSite: "strict"
    };
    if (minutes) {
      cookieOptions.expires = /* @__PURE__ */ new Date();
      cookieOptions.expires.setTime(cookieOptions.expires.getTime() + minutes * 60 * 1e3);
    }
    if (domain)
      cookieOptions.domain = domain;
    document.cookie = serializeCookie2(name, encodeURIComponent(value), cookieOptions);
  },
  read: function read(name) {
    var nameEQ = "".concat(name, "=");
    var ca = document.cookie.split(";");
    for (var i = 0; i < ca.length; i++) {
      var c = ca[i];
      while (c.charAt(0) === " ")
        c = c.substring(1, c.length);
      if (c.indexOf(nameEQ) === 0)
        return c.substring(nameEQ.length, c.length);
    }
    return null;
  },
  remove: function remove(name) {
    this.create(name, "", -1);
  }
};
var cookie$1 = {
  name: "cookie",
  lookup: function lookup6(options) {
    var found;
    if (options.lookupCookie && typeof document !== "undefined") {
      var c = cookie.read(options.lookupCookie);
      if (c)
        found = c;
    }
    return found;
  },
  cacheUserLanguage: function cacheUserLanguage3(lng, options) {
    if (options.lookupCookie && typeof document !== "undefined") {
      cookie.create(options.lookupCookie, lng, options.cookieMinutes, options.cookieDomain, options.cookieOptions);
    }
  }
};
var querystring = {
  name: "querystring",
  lookup: function lookup7(options) {
    var found;
    if (typeof window !== "undefined") {
      var search = window.location.search;
      if (!window.location.search && window.location.hash && window.location.hash.indexOf("?") > -1) {
        search = window.location.hash.substring(window.location.hash.indexOf("?"));
      }
      var query2 = search.substring(1);
      var params = query2.split("&");
      for (var i = 0; i < params.length; i++) {
        var pos = params[i].indexOf("=");
        if (pos > 0) {
          var key = params[i].substring(0, pos);
          if (key === options.lookupQuerystring) {
            found = params[i].substring(pos + 1);
          }
        }
      }
    }
    return found;
  }
};
var hasLocalStorageSupport = null;
var localStorageAvailable = function localStorageAvailable2() {
  if (hasLocalStorageSupport !== null)
    return hasLocalStorageSupport;
  try {
    hasLocalStorageSupport = window !== "undefined" && window.localStorage !== null;
    var testKey = "i18next.translate.boo";
    window.localStorage.setItem(testKey, "foo");
    window.localStorage.removeItem(testKey);
  } catch (e) {
    hasLocalStorageSupport = false;
  }
  return hasLocalStorageSupport;
};
var localStorage$1 = {
  name: "localStorage",
  lookup: function lookup8(options) {
    var found;
    if (options.lookupLocalStorage && localStorageAvailable()) {
      var lng = window.localStorage.getItem(options.lookupLocalStorage);
      if (lng)
        found = lng;
    }
    return found;
  },
  cacheUserLanguage: function cacheUserLanguage4(lng, options) {
    if (options.lookupLocalStorage && localStorageAvailable()) {
      window.localStorage.setItem(options.lookupLocalStorage, lng);
    }
  }
};
var hasSessionStorageSupport = null;
var sessionStorageAvailable = function sessionStorageAvailable2() {
  if (hasSessionStorageSupport !== null)
    return hasSessionStorageSupport;
  try {
    hasSessionStorageSupport = window !== "undefined" && window.sessionStorage !== null;
    var testKey = "i18next.translate.boo";
    window.sessionStorage.setItem(testKey, "foo");
    window.sessionStorage.removeItem(testKey);
  } catch (e) {
    hasSessionStorageSupport = false;
  }
  return hasSessionStorageSupport;
};
var sessionStorage = {
  name: "sessionStorage",
  lookup: function lookup9(options) {
    var found;
    if (options.lookupSessionStorage && sessionStorageAvailable()) {
      var lng = window.sessionStorage.getItem(options.lookupSessionStorage);
      if (lng)
        found = lng;
    }
    return found;
  },
  cacheUserLanguage: function cacheUserLanguage5(lng, options) {
    if (options.lookupSessionStorage && sessionStorageAvailable()) {
      window.sessionStorage.setItem(options.lookupSessionStorage, lng);
    }
  }
};
var navigator$1 = {
  name: "navigator",
  lookup: function lookup10(options) {
    var found = [];
    if (typeof navigator !== "undefined") {
      if (navigator.languages) {
        for (var i = 0; i < navigator.languages.length; i++) {
          found.push(navigator.languages[i]);
        }
      }
      if (navigator.userLanguage) {
        found.push(navigator.userLanguage);
      }
      if (navigator.language) {
        found.push(navigator.language);
      }
    }
    return found.length > 0 ? found : void 0;
  }
};
var htmlTag = {
  name: "htmlTag",
  lookup: function lookup11(options) {
    var found;
    var htmlTag2 = options.htmlTag || (typeof document !== "undefined" ? document.documentElement : null);
    if (htmlTag2 && typeof htmlTag2.getAttribute === "function") {
      found = htmlTag2.getAttribute("lang");
    }
    return found;
  }
};
var path = {
  name: "path",
  lookup: function lookup12(options) {
    var found;
    if (typeof window !== "undefined") {
      var language = window.location.pathname.match(/\/([a-zA-Z-]*)/g);
      if (language instanceof Array) {
        if (typeof options.lookupFromPathIndex === "number") {
          if (typeof language[options.lookupFromPathIndex] !== "string") {
            return void 0;
          }
          found = language[options.lookupFromPathIndex].replace("/", "");
        } else {
          found = language[0].replace("/", "");
        }
      }
    }
    return found;
  }
};
var subdomain = {
  name: "subdomain",
  lookup: function lookup13(options) {
    var lookupFromSubdomainIndex = typeof options.lookupFromSubdomainIndex === "number" ? options.lookupFromSubdomainIndex + 1 : 1;
    var language = typeof window !== "undefined" && window.location && window.location.hostname && window.location.hostname.match(/^(\w{2,5})\.(([a-z0-9-]{1,63}\.[a-z]{2,6})|localhost)/i);
    if (!language)
      return void 0;
    return language[lookupFromSubdomainIndex];
  }
};
function getDefaults2() {
  return {
    order: ["querystring", "cookie", "localStorage", "sessionStorage", "navigator", "htmlTag"],
    lookupQuerystring: "lng",
    lookupCookie: "i18next",
    lookupLocalStorage: "i18nextLng",
    lookupSessionStorage: "i18nextLng",
    // cache user language
    caches: ["localStorage"],
    excludeCacheFor: ["cimode"],
    // cookieMinutes: 10,
    // cookieDomain: 'myDomain'
    convertDetectedLanguage: function convertDetectedLanguage(l2) {
      return l2;
    }
  };
}
var Browser = /* @__PURE__ */ function() {
  function Browser2(services) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    _classCallCheck$1(this, Browser2);
    this.type = "languageDetector";
    this.detectors = {};
    this.init(services, options);
  }
  _createClass$1(Browser2, [{
    key: "init",
    value: function init3(services) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var i18nOptions = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      this.services = services || {
        languageUtils: {}
      };
      this.options = defaults(options, this.options || {}, getDefaults2());
      if (typeof this.options.convertDetectedLanguage === "string" && this.options.convertDetectedLanguage.indexOf("15897") > -1) {
        this.options.convertDetectedLanguage = function(l2) {
          return l2.replace("-", "_");
        };
      }
      if (this.options.lookupFromUrlIndex)
        this.options.lookupFromPathIndex = this.options.lookupFromUrlIndex;
      this.i18nOptions = i18nOptions;
      this.addDetector(cookie$1);
      this.addDetector(querystring);
      this.addDetector(localStorage$1);
      this.addDetector(sessionStorage);
      this.addDetector(navigator$1);
      this.addDetector(htmlTag);
      this.addDetector(path);
      this.addDetector(subdomain);
    }
  }, {
    key: "addDetector",
    value: function addDetector(detector) {
      this.detectors[detector.name] = detector;
    }
  }, {
    key: "detect",
    value: function detect(detectionOrder) {
      var _this = this;
      if (!detectionOrder)
        detectionOrder = this.options.order;
      var detected = [];
      detectionOrder.forEach(function(detectorName) {
        if (_this.detectors[detectorName]) {
          var lookup14 = _this.detectors[detectorName].lookup(_this.options);
          if (lookup14 && typeof lookup14 === "string")
            lookup14 = [lookup14];
          if (lookup14)
            detected = detected.concat(lookup14);
        }
      });
      detected = detected.map(function(d) {
        return _this.options.convertDetectedLanguage(d);
      });
      if (this.services.languageUtils.getBestMatchFromCodes)
        return detected;
      return detected.length > 0 ? detected[0] : null;
    }
  }, {
    key: "cacheUserLanguage",
    value: function cacheUserLanguage6(lng, caches) {
      var _this2 = this;
      if (!caches)
        caches = this.options.caches;
      if (!caches)
        return;
      if (this.options.excludeCacheFor && this.options.excludeCacheFor.indexOf(lng) > -1)
        return;
      caches.forEach(function(cacheName) {
        if (_this2.detectors[cacheName])
          _this2.detectors[cacheName].cacheUserLanguage(lng, _this2.options);
      });
    }
  }]);
  return Browser2;
}();
Browser.type = "languageDetector";
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _possibleConstructorReturn(self2, call) {
  if (call && (_typeof$2(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self2);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _toArray(arr2) {
  return _arrayWithHoles(arr2) || _iterableToArray(arr2) || _unsupportedIterableToArray(arr2) || _nonIterableRest();
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty$1(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
var consoleLogger = {
  type: "logger",
  log: function log(args) {
    this.output("log", args);
  },
  warn: function warn2(args) {
    this.output("warn", args);
  },
  error: function error(args) {
    this.output("error", args);
  },
  output: function output2(type, args) {
    if (console && console[type])
      console[type].apply(console, args);
  }
};
var Logger = function() {
  function Logger2(concreteLogger) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    _classCallCheck$1(this, Logger2);
    this.init(concreteLogger, options);
  }
  _createClass$1(Logger2, [{
    key: "init",
    value: function init3(concreteLogger) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      this.prefix = options.prefix || "i18next:";
      this.logger = concreteLogger || consoleLogger;
      this.options = options;
      this.debug = options.debug;
    }
  }, {
    key: "setDebug",
    value: function setDebug(bool2) {
      this.debug = bool2;
    }
  }, {
    key: "log",
    value: function log2() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return this.forward(args, "log", "", true);
    }
  }, {
    key: "warn",
    value: function warn3() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return this.forward(args, "warn", "", true);
    }
  }, {
    key: "error",
    value: function error2() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      return this.forward(args, "error", "");
    }
  }, {
    key: "deprecate",
    value: function deprecate() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      return this.forward(args, "warn", "WARNING DEPRECATED: ", true);
    }
  }, {
    key: "forward",
    value: function forward(args, lvl, prefix2, debugOnly) {
      if (debugOnly && !this.debug)
        return null;
      if (typeof args[0] === "string")
        args[0] = "".concat(prefix2).concat(this.prefix, " ").concat(args[0]);
      return this.logger[lvl](args);
    }
  }, {
    key: "create",
    value: function create2(moduleName) {
      return new Logger2(this.logger, _objectSpread(_objectSpread({}, {
        prefix: "".concat(this.prefix, ":").concat(moduleName, ":")
      }), this.options));
    }
  }, {
    key: "clone",
    value: function clone(options) {
      options = options || this.options;
      options.prefix = options.prefix || this.prefix;
      return new Logger2(this.logger, options);
    }
  }]);
  return Logger2;
}();
var baseLogger = new Logger();
var EventEmitter = function() {
  function EventEmitter2() {
    _classCallCheck$1(this, EventEmitter2);
    this.observers = {};
  }
  _createClass$1(EventEmitter2, [{
    key: "on",
    value: function on(events2, listener) {
      var _this = this;
      events2.split(" ").forEach(function(event) {
        _this.observers[event] = _this.observers[event] || [];
        _this.observers[event].push(listener);
      });
      return this;
    }
  }, {
    key: "off",
    value: function off(event, listener) {
      if (!this.observers[event])
        return;
      if (!listener) {
        delete this.observers[event];
        return;
      }
      this.observers[event] = this.observers[event].filter(function(l2) {
        return l2 !== listener;
      });
    }
  }, {
    key: "emit",
    value: function emit(event) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      if (this.observers[event]) {
        var cloned = [].concat(this.observers[event]);
        cloned.forEach(function(observer) {
          observer.apply(void 0, args);
        });
      }
      if (this.observers["*"]) {
        var _cloned = [].concat(this.observers["*"]);
        _cloned.forEach(function(observer) {
          observer.apply(observer, [event].concat(args));
        });
      }
    }
  }]);
  return EventEmitter2;
}();
function defer() {
  var res;
  var rej;
  var promise = new Promise(function(resolve, reject) {
    res = resolve;
    rej = reject;
  });
  promise.resolve = res;
  promise.reject = rej;
  return promise;
}
function makeString(object) {
  if (object == null)
    return "";
  return "" + object;
}
function copy(a, s, t) {
  a.forEach(function(m2) {
    if (s[m2])
      t[m2] = s[m2];
  });
}
function getLastOfPath(object, path2, Empty) {
  function cleanKey(key2) {
    return key2 && key2.indexOf("###") > -1 ? key2.replace(/###/g, ".") : key2;
  }
  function canNotTraverseDeeper() {
    return !object || typeof object === "string";
  }
  var stack = typeof path2 !== "string" ? [].concat(path2) : path2.split(".");
  while (stack.length > 1) {
    if (canNotTraverseDeeper())
      return {};
    var key = cleanKey(stack.shift());
    if (!object[key] && Empty)
      object[key] = new Empty();
    if (Object.prototype.hasOwnProperty.call(object, key)) {
      object = object[key];
    } else {
      object = {};
    }
  }
  if (canNotTraverseDeeper())
    return {};
  return {
    obj: object,
    k: cleanKey(stack.shift())
  };
}
function setPath(object, path2, newValue) {
  var _getLastOfPath = getLastOfPath(object, path2, Object), obj = _getLastOfPath.obj, k = _getLastOfPath.k;
  obj[k] = newValue;
}
function pushPath(object, path2, newValue, concat2) {
  var _getLastOfPath2 = getLastOfPath(object, path2, Object), obj = _getLastOfPath2.obj, k = _getLastOfPath2.k;
  obj[k] = obj[k] || [];
  if (concat2)
    obj[k] = obj[k].concat(newValue);
  if (!concat2)
    obj[k].push(newValue);
}
function getPath2(object, path2) {
  var _getLastOfPath3 = getLastOfPath(object, path2), obj = _getLastOfPath3.obj, k = _getLastOfPath3.k;
  if (!obj)
    return void 0;
  return obj[k];
}
function getPathWithDefaults(data, defaultData, key) {
  var value = getPath2(data, key);
  if (value !== void 0) {
    return value;
  }
  return getPath2(defaultData, key);
}
function deepExtend(target, source, overwrite) {
  for (var prop in source) {
    if (prop !== "__proto__" && prop !== "constructor") {
      if (prop in target) {
        if (typeof target[prop] === "string" || target[prop] instanceof String || typeof source[prop] === "string" || source[prop] instanceof String) {
          if (overwrite)
            target[prop] = source[prop];
        } else {
          deepExtend(target[prop], source[prop], overwrite);
        }
      } else {
        target[prop] = source[prop];
      }
    }
  }
  return target;
}
function regexEscape(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}
var _entityMap = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;",
  "/": "&#x2F;"
};
function escape(data) {
  if (typeof data === "string") {
    return data.replace(/[&<>"'\/]/g, function(s) {
      return _entityMap[s];
    });
  }
  return data;
}
var isIE10 = typeof window !== "undefined" && window.navigator && typeof window.navigator.userAgentData === "undefined" && window.navigator.userAgent && window.navigator.userAgent.indexOf("MSIE") > -1;
var chars = [" ", ",", "?", "!", ";"];
function looksLikeObjectPath(key, nsSeparator, keySeparator) {
  nsSeparator = nsSeparator || "";
  keySeparator = keySeparator || "";
  var possibleChars = chars.filter(function(c) {
    return nsSeparator.indexOf(c) < 0 && keySeparator.indexOf(c) < 0;
  });
  if (possibleChars.length === 0)
    return true;
  var r = new RegExp("(".concat(possibleChars.map(function(c) {
    return c === "?" ? "\\?" : c;
  }).join("|"), ")"));
  var matched = !r.test(key);
  if (!matched) {
    var ki = key.indexOf(keySeparator);
    if (ki > 0 && !r.test(key.substring(0, ki))) {
      matched = true;
    }
  }
  return matched;
}
function ownKeys$1(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$1(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$1(Object(source), true).forEach(function(key) {
        _defineProperty$1(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$1(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function deepFind(obj, path2) {
  var keySeparator = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ".";
  if (!obj)
    return void 0;
  if (obj[path2])
    return obj[path2];
  var paths = path2.split(keySeparator);
  var current = obj;
  for (var i = 0; i < paths.length; ++i) {
    if (!current)
      return void 0;
    if (typeof current[paths[i]] === "string" && i + 1 < paths.length) {
      return void 0;
    }
    if (current[paths[i]] === void 0) {
      var j = 2;
      var p = paths.slice(i, i + j).join(keySeparator);
      var mix = current[p];
      while (mix === void 0 && paths.length > i + j) {
        j++;
        p = paths.slice(i, i + j).join(keySeparator);
        mix = current[p];
      }
      if (mix === void 0)
        return void 0;
      if (mix === null)
        return null;
      if (path2.endsWith(p)) {
        if (typeof mix === "string")
          return mix;
        if (p && typeof mix[p] === "string")
          return mix[p];
      }
      var joinedPath = paths.slice(i + j).join(keySeparator);
      if (joinedPath)
        return deepFind(mix, joinedPath, keySeparator);
      return void 0;
    }
    current = current[paths[i]];
  }
  return current;
}
var ResourceStore = function(_EventEmitter) {
  _inherits(ResourceStore2, _EventEmitter);
  var _super = _createSuper(ResourceStore2);
  function ResourceStore2(data) {
    var _this;
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      ns: ["translation"],
      defaultNS: "translation"
    };
    _classCallCheck$1(this, ResourceStore2);
    _this = _super.call(this);
    if (isIE10) {
      EventEmitter.call(_assertThisInitialized(_this));
    }
    _this.data = data || {};
    _this.options = options;
    if (_this.options.keySeparator === void 0) {
      _this.options.keySeparator = ".";
    }
    if (_this.options.ignoreJSONStructure === void 0) {
      _this.options.ignoreJSONStructure = true;
    }
    return _this;
  }
  _createClass$1(ResourceStore2, [{
    key: "addNamespaces",
    value: function addNamespaces(ns) {
      if (this.options.ns.indexOf(ns) < 0) {
        this.options.ns.push(ns);
      }
    }
  }, {
    key: "removeNamespaces",
    value: function removeNamespaces(ns) {
      var index = this.options.ns.indexOf(ns);
      if (index > -1) {
        this.options.ns.splice(index, 1);
      }
    }
  }, {
    key: "getResource",
    value: function getResource(lng, ns, key) {
      var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
      var keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
      var ignoreJSONStructure = options.ignoreJSONStructure !== void 0 ? options.ignoreJSONStructure : this.options.ignoreJSONStructure;
      var path2 = [lng, ns];
      if (key && typeof key !== "string")
        path2 = path2.concat(key);
      if (key && typeof key === "string")
        path2 = path2.concat(keySeparator ? key.split(keySeparator) : key);
      if (lng.indexOf(".") > -1) {
        path2 = lng.split(".");
      }
      var result = getPath2(this.data, path2);
      if (result || !ignoreJSONStructure || typeof key !== "string")
        return result;
      return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);
    }
  }, {
    key: "addResource",
    value: function addResource(lng, ns, key, value) {
      var options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
        silent: false
      };
      var keySeparator = this.options.keySeparator;
      if (keySeparator === void 0)
        keySeparator = ".";
      var path2 = [lng, ns];
      if (key)
        path2 = path2.concat(keySeparator ? key.split(keySeparator) : key);
      if (lng.indexOf(".") > -1) {
        path2 = lng.split(".");
        value = ns;
        ns = path2[1];
      }
      this.addNamespaces(ns);
      setPath(this.data, path2, value);
      if (!options.silent)
        this.emit("added", lng, ns, key, value);
    }
  }, {
    key: "addResources",
    value: function addResources(lng, ns, resources) {
      var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
        silent: false
      };
      for (var m2 in resources) {
        if (typeof resources[m2] === "string" || Object.prototype.toString.apply(resources[m2]) === "[object Array]")
          this.addResource(lng, ns, m2, resources[m2], {
            silent: true
          });
      }
      if (!options.silent)
        this.emit("added", lng, ns, resources);
    }
  }, {
    key: "addResourceBundle",
    value: function addResourceBundle(lng, ns, resources, deep, overwrite) {
      var options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {
        silent: false
      };
      var path2 = [lng, ns];
      if (lng.indexOf(".") > -1) {
        path2 = lng.split(".");
        deep = resources;
        resources = ns;
        ns = path2[1];
      }
      this.addNamespaces(ns);
      var pack = getPath2(this.data, path2) || {};
      if (deep) {
        deepExtend(pack, resources, overwrite);
      } else {
        pack = _objectSpread$1(_objectSpread$1({}, pack), resources);
      }
      setPath(this.data, path2, pack);
      if (!options.silent)
        this.emit("added", lng, ns, resources);
    }
  }, {
    key: "removeResourceBundle",
    value: function removeResourceBundle(lng, ns) {
      if (this.hasResourceBundle(lng, ns)) {
        delete this.data[lng][ns];
      }
      this.removeNamespaces(ns);
      this.emit("removed", lng, ns);
    }
  }, {
    key: "hasResourceBundle",
    value: function hasResourceBundle(lng, ns) {
      return this.getResource(lng, ns) !== void 0;
    }
  }, {
    key: "getResourceBundle",
    value: function getResourceBundle(lng, ns) {
      if (!ns)
        ns = this.options.defaultNS;
      if (this.options.compatibilityAPI === "v1")
        return _objectSpread$1(_objectSpread$1({}, {}), this.getResource(lng, ns));
      return this.getResource(lng, ns);
    }
  }, {
    key: "getDataByLanguage",
    value: function getDataByLanguage(lng) {
      return this.data[lng];
    }
  }, {
    key: "hasLanguageSomeTranslations",
    value: function hasLanguageSomeTranslations(lng) {
      var data = this.getDataByLanguage(lng);
      var n = data && Object.keys(data) || [];
      return !!n.find(function(v) {
        return data[v] && Object.keys(data[v]).length > 0;
      });
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.data;
    }
  }]);
  return ResourceStore2;
}(EventEmitter);
var postProcessor = {
  processors: {},
  addPostProcessor: function addPostProcessor(module2) {
    this.processors[module2.name] = module2;
  },
  handle: function handle(processors, value, key, options, translator) {
    var _this = this;
    processors.forEach(function(processor) {
      if (_this.processors[processor])
        value = _this.processors[processor].process(value, key, options, translator);
    });
    return value;
  }
};
function ownKeys$2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$2(Object(source), true).forEach(function(key) {
        _defineProperty$1(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper$1(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$1() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var checkedLoadedFor = {};
var Translator = function(_EventEmitter) {
  _inherits(Translator2, _EventEmitter);
  var _super = _createSuper$1(Translator2);
  function Translator2(services) {
    var _this;
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    _classCallCheck$1(this, Translator2);
    _this = _super.call(this);
    if (isIE10) {
      EventEmitter.call(_assertThisInitialized(_this));
    }
    copy(["resourceStore", "languageUtils", "pluralResolver", "interpolator", "backendConnector", "i18nFormat", "utils"], services, _assertThisInitialized(_this));
    _this.options = options;
    if (_this.options.keySeparator === void 0) {
      _this.options.keySeparator = ".";
    }
    _this.logger = baseLogger.create("translator");
    return _this;
  }
  _createClass$1(Translator2, [{
    key: "changeLanguage",
    value: function changeLanguage(lng) {
      if (lng)
        this.language = lng;
    }
  }, {
    key: "exists",
    value: function exists2(key) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        interpolation: {}
      };
      if (key === void 0 || key === null) {
        return false;
      }
      var resolved2 = this.resolve(key, options);
      return resolved2 && resolved2.res !== void 0;
    }
  }, {
    key: "extractFromKey",
    value: function extractFromKey(key, options) {
      var nsSeparator = options.nsSeparator !== void 0 ? options.nsSeparator : this.options.nsSeparator;
      if (nsSeparator === void 0)
        nsSeparator = ":";
      var keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
      var namespaces = options.ns || this.options.defaultNS || [];
      var wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
      var seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options.keySeparator && !this.options.userDefinedNsSeparator && !options.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);
      if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
        var m2 = key.match(this.interpolator.nestingRegexp);
        if (m2 && m2.length > 0) {
          return {
            key,
            namespaces
          };
        }
        var parts = key.split(nsSeparator);
        if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1)
          namespaces = parts.shift();
        key = parts.join(keySeparator);
      }
      if (typeof namespaces === "string")
        namespaces = [namespaces];
      return {
        key,
        namespaces
      };
    }
  }, {
    key: "translate",
    value: function translate(keys, options, lastKey) {
      var _this2 = this;
      if (_typeof$2(options) !== "object" && this.options.overloadTranslationOptionHandler) {
        options = this.options.overloadTranslationOptionHandler(arguments);
      }
      if (!options)
        options = {};
      if (keys === void 0 || keys === null)
        return "";
      if (!Array.isArray(keys))
        keys = [String(keys)];
      var returnDetails = options.returnDetails !== void 0 ? options.returnDetails : this.options.returnDetails;
      var keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
      var _this$extractFromKey = this.extractFromKey(keys[keys.length - 1], options), key = _this$extractFromKey.key, namespaces = _this$extractFromKey.namespaces;
      var namespace = namespaces[namespaces.length - 1];
      var lng = options.lng || this.language;
      var appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
      if (lng && lng.toLowerCase() === "cimode") {
        if (appendNamespaceToCIMode) {
          var nsSeparator = options.nsSeparator || this.options.nsSeparator;
          if (returnDetails) {
            resolved2.res = "".concat(namespace).concat(nsSeparator).concat(key);
            return resolved2;
          }
          return "".concat(namespace).concat(nsSeparator).concat(key);
        }
        if (returnDetails) {
          resolved2.res = key;
          return resolved2;
        }
        return key;
      }
      var resolved2 = this.resolve(keys, options);
      var res = resolved2 && resolved2.res;
      var resUsedKey = resolved2 && resolved2.usedKey || key;
      var resExactUsedKey = resolved2 && resolved2.exactUsedKey || key;
      var resType = Object.prototype.toString.apply(res);
      var noObject = ["[object Number]", "[object Function]", "[object RegExp]"];
      var joinArrays = options.joinArrays !== void 0 ? options.joinArrays : this.options.joinArrays;
      var handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
      var handleAsObject = typeof res !== "string" && typeof res !== "boolean" && typeof res !== "number";
      if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === "string" && resType === "[object Array]")) {
        if (!options.returnObjects && !this.options.returnObjects) {
          if (!this.options.returnedObjectHandler) {
            this.logger.warn("accessing an object - but returnObjects options is not enabled!");
          }
          var r = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, _objectSpread$2(_objectSpread$2({}, options), {}, {
            ns: namespaces
          })) : "key '".concat(key, " (").concat(this.language, ")' returned an object instead of string.");
          if (returnDetails) {
            resolved2.res = r;
            return resolved2;
          }
          return r;
        }
        if (keySeparator) {
          var resTypeIsArray = resType === "[object Array]";
          var copy2 = resTypeIsArray ? [] : {};
          var newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
          for (var m2 in res) {
            if (Object.prototype.hasOwnProperty.call(res, m2)) {
              var deepKey = "".concat(newKeyToUse).concat(keySeparator).concat(m2);
              copy2[m2] = this.translate(deepKey, _objectSpread$2(_objectSpread$2({}, options), {
                joinArrays: false,
                ns: namespaces
              }));
              if (copy2[m2] === deepKey)
                copy2[m2] = res[m2];
            }
          }
          res = copy2;
        }
      } else if (handleAsObjectInI18nFormat && typeof joinArrays === "string" && resType === "[object Array]") {
        res = res.join(joinArrays);
        if (res)
          res = this.extendTranslation(res, keys, options, lastKey);
      } else {
        var usedDefault = false;
        var usedKey = false;
        var needsPluralHandling = options.count !== void 0 && typeof options.count !== "string";
        var hasDefaultValue = Translator2.hasDefaultValue(options);
        var defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, options) : "";
        var defaultValue = options["defaultValue".concat(defaultValueSuffix)] || options.defaultValue;
        if (!this.isValidLookup(res) && hasDefaultValue) {
          usedDefault = true;
          res = defaultValue;
        }
        if (!this.isValidLookup(res)) {
          usedKey = true;
          res = key;
        }
        var missingKeyNoValueFallbackToKey = options.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
        var resForMissing = missingKeyNoValueFallbackToKey && usedKey ? void 0 : res;
        var updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;
        if (usedKey || usedDefault || updateMissing) {
          this.logger.log(updateMissing ? "updateKey" : "missingKey", lng, namespace, key, updateMissing ? defaultValue : res);
          if (keySeparator) {
            var fk = this.resolve(key, _objectSpread$2(_objectSpread$2({}, options), {}, {
              keySeparator: false
            }));
            if (fk && fk.res)
              this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.");
          }
          var lngs = [];
          var fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);
          if (this.options.saveMissingTo === "fallback" && fallbackLngs && fallbackLngs[0]) {
            for (var i = 0; i < fallbackLngs.length; i++) {
              lngs.push(fallbackLngs[i]);
            }
          } else if (this.options.saveMissingTo === "all") {
            lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
          } else {
            lngs.push(options.lng || this.language);
          }
          var send3 = function send4(l2, k, specificDefaultValue) {
            var defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;
            if (_this2.options.missingKeyHandler) {
              _this2.options.missingKeyHandler(l2, namespace, k, defaultForMissing, updateMissing, options);
            } else if (_this2.backendConnector && _this2.backendConnector.saveMissing) {
              _this2.backendConnector.saveMissing(l2, namespace, k, defaultForMissing, updateMissing, options);
            }
            _this2.emit("missingKey", l2, namespace, k, res);
          };
          if (this.options.saveMissing) {
            if (this.options.saveMissingPlurals && needsPluralHandling) {
              lngs.forEach(function(language) {
                _this2.pluralResolver.getSuffixes(language, options).forEach(function(suffix) {
                  send3([language], key + suffix, options["defaultValue".concat(suffix)] || defaultValue);
                });
              });
            } else {
              send3(lngs, key, defaultValue);
            }
          }
        }
        res = this.extendTranslation(res, keys, options, resolved2, lastKey);
        if (usedKey && res === key && this.options.appendNamespaceToMissingKey)
          res = "".concat(namespace, ":").concat(key);
        if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {
          if (this.options.compatibilityAPI !== "v1") {
            res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? "".concat(namespace, ":").concat(key) : key, usedDefault ? res : void 0);
          } else {
            res = this.options.parseMissingKeyHandler(res);
          }
        }
      }
      if (returnDetails) {
        resolved2.res = res;
        return resolved2;
      }
      return res;
    }
  }, {
    key: "extendTranslation",
    value: function extendTranslation(res, key, options, resolved2, lastKey) {
      var _this3 = this;
      if (this.i18nFormat && this.i18nFormat.parse) {
        res = this.i18nFormat.parse(res, _objectSpread$2(_objectSpread$2({}, this.options.interpolation.defaultVariables), options), resolved2.usedLng, resolved2.usedNS, resolved2.usedKey, {
          resolved: resolved2
        });
      } else if (!options.skipInterpolation) {
        if (options.interpolation)
          this.interpolator.init(_objectSpread$2(_objectSpread$2({}, options), {
            interpolation: _objectSpread$2(_objectSpread$2({}, this.options.interpolation), options.interpolation)
          }));
        var skipOnVariables = typeof res === "string" && (options && options.interpolation && options.interpolation.skipOnVariables !== void 0 ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
        var nestBef;
        if (skipOnVariables) {
          var nb = res.match(this.interpolator.nestingRegexp);
          nestBef = nb && nb.length;
        }
        var data = options.replace && typeof options.replace !== "string" ? options.replace : options;
        if (this.options.interpolation.defaultVariables)
          data = _objectSpread$2(_objectSpread$2({}, this.options.interpolation.defaultVariables), data);
        res = this.interpolator.interpolate(res, data, options.lng || this.language, options);
        if (skipOnVariables) {
          var na = res.match(this.interpolator.nestingRegexp);
          var nestAft = na && na.length;
          if (nestBef < nestAft)
            options.nest = false;
        }
        if (options.nest !== false)
          res = this.interpolator.nest(res, function() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            if (lastKey && lastKey[0] === args[0] && !options.context) {
              _this3.logger.warn("It seems you are nesting recursively key: ".concat(args[0], " in key: ").concat(key[0]));
              return null;
            }
            return _this3.translate.apply(_this3, args.concat([key]));
          }, options);
        if (options.interpolation)
          this.interpolator.reset();
      }
      var postProcess = options.postProcess || this.options.postProcess;
      var postProcessorNames = typeof postProcess === "string" ? [postProcess] : postProcess;
      if (res !== void 0 && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
        res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? _objectSpread$2({
          i18nResolved: resolved2
        }, options) : options, this);
      }
      return res;
    }
  }, {
    key: "resolve",
    value: function resolve(keys) {
      var _this4 = this;
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var found;
      var usedKey;
      var exactUsedKey;
      var usedLng;
      var usedNS;
      if (typeof keys === "string")
        keys = [keys];
      keys.forEach(function(k) {
        if (_this4.isValidLookup(found))
          return;
        var extracted = _this4.extractFromKey(k, options);
        var key = extracted.key;
        usedKey = key;
        var namespaces = extracted.namespaces;
        if (_this4.options.fallbackNS)
          namespaces = namespaces.concat(_this4.options.fallbackNS);
        var needsPluralHandling = options.count !== void 0 && typeof options.count !== "string";
        var needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && _this4.pluralResolver.shouldUseIntlApi();
        var needsContextHandling = options.context !== void 0 && (typeof options.context === "string" || typeof options.context === "number") && options.context !== "";
        var codes = options.lngs ? options.lngs : _this4.languageUtils.toResolveHierarchy(options.lng || _this4.language, options.fallbackLng);
        namespaces.forEach(function(ns) {
          if (_this4.isValidLookup(found))
            return;
          usedNS = ns;
          if (!checkedLoadedFor["".concat(codes[0], "-").concat(ns)] && _this4.utils && _this4.utils.hasLoadedNamespace && !_this4.utils.hasLoadedNamespace(usedNS)) {
            checkedLoadedFor["".concat(codes[0], "-").concat(ns)] = true;
            _this4.logger.warn('key "'.concat(usedKey, '" for languages "').concat(codes.join(", "), `" won't get resolved as namespace "`).concat(usedNS, '" was not yet loaded'), "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
          }
          codes.forEach(function(code) {
            if (_this4.isValidLookup(found))
              return;
            usedLng = code;
            var finalKeys = [key];
            if (_this4.i18nFormat && _this4.i18nFormat.addLookupKeys) {
              _this4.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);
            } else {
              var pluralSuffix;
              if (needsPluralHandling)
                pluralSuffix = _this4.pluralResolver.getSuffix(code, options.count, options);
              var zeroSuffix = "".concat(_this4.options.pluralSeparator, "zero");
              if (needsPluralHandling) {
                finalKeys.push(key + pluralSuffix);
                if (needsZeroSuffixLookup) {
                  finalKeys.push(key + zeroSuffix);
                }
              }
              if (needsContextHandling) {
                var contextKey = "".concat(key).concat(_this4.options.contextSeparator).concat(options.context);
                finalKeys.push(contextKey);
                if (needsPluralHandling) {
                  finalKeys.push(contextKey + pluralSuffix);
                  if (needsZeroSuffixLookup) {
                    finalKeys.push(contextKey + zeroSuffix);
                  }
                }
              }
            }
            var possibleKey;
            while (possibleKey = finalKeys.pop()) {
              if (!_this4.isValidLookup(found)) {
                exactUsedKey = possibleKey;
                found = _this4.getResource(code, ns, possibleKey, options);
              }
            }
          });
        });
      });
      return {
        res: found,
        usedKey,
        exactUsedKey,
        usedLng,
        usedNS
      };
    }
  }, {
    key: "isValidLookup",
    value: function isValidLookup(res) {
      return res !== void 0 && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === "");
    }
  }, {
    key: "getResource",
    value: function getResource(code, ns, key) {
      var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
      if (this.i18nFormat && this.i18nFormat.getResource)
        return this.i18nFormat.getResource(code, ns, key, options);
      return this.resourceStore.getResource(code, ns, key, options);
    }
  }], [{
    key: "hasDefaultValue",
    value: function hasDefaultValue(options) {
      var prefix2 = "defaultValue";
      for (var option in options) {
        if (Object.prototype.hasOwnProperty.call(options, option) && prefix2 === option.substring(0, prefix2.length) && void 0 !== options[option]) {
          return true;
        }
      }
      return false;
    }
  }]);
  return Translator2;
}(EventEmitter);
function capitalize(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
var LanguageUtil = function() {
  function LanguageUtil2(options) {
    _classCallCheck$1(this, LanguageUtil2);
    this.options = options;
    this.supportedLngs = this.options.supportedLngs || false;
    this.logger = baseLogger.create("languageUtils");
  }
  _createClass$1(LanguageUtil2, [{
    key: "getScriptPartFromCode",
    value: function getScriptPartFromCode(code) {
      if (!code || code.indexOf("-") < 0)
        return null;
      var p = code.split("-");
      if (p.length === 2)
        return null;
      p.pop();
      if (p[p.length - 1].toLowerCase() === "x")
        return null;
      return this.formatLanguageCode(p.join("-"));
    }
  }, {
    key: "getLanguagePartFromCode",
    value: function getLanguagePartFromCode(code) {
      if (!code || code.indexOf("-") < 0)
        return code;
      var p = code.split("-");
      return this.formatLanguageCode(p[0]);
    }
  }, {
    key: "formatLanguageCode",
    value: function formatLanguageCode(code) {
      if (typeof code === "string" && code.indexOf("-") > -1) {
        var specialCases2 = ["hans", "hant", "latn", "cyrl", "cans", "mong", "arab"];
        var p = code.split("-");
        if (this.options.lowerCaseLng) {
          p = p.map(function(part) {
            return part.toLowerCase();
          });
        } else if (p.length === 2) {
          p[0] = p[0].toLowerCase();
          p[1] = p[1].toUpperCase();
          if (specialCases2.indexOf(p[1].toLowerCase()) > -1)
            p[1] = capitalize(p[1].toLowerCase());
        } else if (p.length === 3) {
          p[0] = p[0].toLowerCase();
          if (p[1].length === 2)
            p[1] = p[1].toUpperCase();
          if (p[0] !== "sgn" && p[2].length === 2)
            p[2] = p[2].toUpperCase();
          if (specialCases2.indexOf(p[1].toLowerCase()) > -1)
            p[1] = capitalize(p[1].toLowerCase());
          if (specialCases2.indexOf(p[2].toLowerCase()) > -1)
            p[2] = capitalize(p[2].toLowerCase());
        }
        return p.join("-");
      }
      return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
    }
  }, {
    key: "isSupportedCode",
    value: function isSupportedCode(code) {
      if (this.options.load === "languageOnly" || this.options.nonExplicitSupportedLngs) {
        code = this.getLanguagePartFromCode(code);
      }
      return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
    }
  }, {
    key: "getBestMatchFromCodes",
    value: function getBestMatchFromCodes(codes) {
      var _this = this;
      if (!codes)
        return null;
      var found;
      codes.forEach(function(code) {
        if (found)
          return;
        var cleanedLng = _this.formatLanguageCode(code);
        if (!_this.options.supportedLngs || _this.isSupportedCode(cleanedLng))
          found = cleanedLng;
      });
      if (!found && this.options.supportedLngs) {
        codes.forEach(function(code) {
          if (found)
            return;
          var lngOnly = _this.getLanguagePartFromCode(code);
          if (_this.isSupportedCode(lngOnly))
            return found = lngOnly;
          found = _this.options.supportedLngs.find(function(supportedLng) {
            if (supportedLng.indexOf(lngOnly) === 0)
              return supportedLng;
          });
        });
      }
      if (!found)
        found = this.getFallbackCodes(this.options.fallbackLng)[0];
      return found;
    }
  }, {
    key: "getFallbackCodes",
    value: function getFallbackCodes(fallbacks, code) {
      if (!fallbacks)
        return [];
      if (typeof fallbacks === "function")
        fallbacks = fallbacks(code);
      if (typeof fallbacks === "string")
        fallbacks = [fallbacks];
      if (Object.prototype.toString.apply(fallbacks) === "[object Array]")
        return fallbacks;
      if (!code)
        return fallbacks["default"] || [];
      var found = fallbacks[code];
      if (!found)
        found = fallbacks[this.getScriptPartFromCode(code)];
      if (!found)
        found = fallbacks[this.formatLanguageCode(code)];
      if (!found)
        found = fallbacks[this.getLanguagePartFromCode(code)];
      if (!found)
        found = fallbacks["default"];
      return found || [];
    }
  }, {
    key: "toResolveHierarchy",
    value: function toResolveHierarchy(code, fallbackCode) {
      var _this2 = this;
      var fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
      var codes = [];
      var addCode = function addCode2(c) {
        if (!c)
          return;
        if (_this2.isSupportedCode(c)) {
          codes.push(c);
        } else {
          _this2.logger.warn("rejecting language code not found in supportedLngs: ".concat(c));
        }
      };
      if (typeof code === "string" && code.indexOf("-") > -1) {
        if (this.options.load !== "languageOnly")
          addCode(this.formatLanguageCode(code));
        if (this.options.load !== "languageOnly" && this.options.load !== "currentOnly")
          addCode(this.getScriptPartFromCode(code));
        if (this.options.load !== "currentOnly")
          addCode(this.getLanguagePartFromCode(code));
      } else if (typeof code === "string") {
        addCode(this.formatLanguageCode(code));
      }
      fallbackCodes.forEach(function(fc) {
        if (codes.indexOf(fc) < 0)
          addCode(_this2.formatLanguageCode(fc));
      });
      return codes;
    }
  }]);
  return LanguageUtil2;
}();
var sets = [{
  lngs: ["ach", "ak", "am", "arn", "br", "fil", "gun", "ln", "mfe", "mg", "mi", "oc", "pt", "pt-BR", "tg", "tl", "ti", "tr", "uz", "wa"],
  nr: [1, 2],
  fc: 1
}, {
  lngs: ["af", "an", "ast", "az", "bg", "bn", "ca", "da", "de", "dev", "el", "en", "eo", "es", "et", "eu", "fi", "fo", "fur", "fy", "gl", "gu", "ha", "hi", "hu", "hy", "ia", "it", "kk", "kn", "ku", "lb", "mai", "ml", "mn", "mr", "nah", "nap", "nb", "ne", "nl", "nn", "no", "nso", "pa", "pap", "pms", "ps", "pt-PT", "rm", "sco", "se", "si", "so", "son", "sq", "sv", "sw", "ta", "te", "tk", "ur", "yo"],
  nr: [1, 2],
  fc: 2
}, {
  lngs: ["ay", "bo", "cgg", "fa", "ht", "id", "ja", "jbo", "ka", "km", "ko", "ky", "lo", "ms", "sah", "su", "th", "tt", "ug", "vi", "wo", "zh"],
  nr: [1],
  fc: 3
}, {
  lngs: ["be", "bs", "cnr", "dz", "hr", "ru", "sr", "uk"],
  nr: [1, 2, 5],
  fc: 4
}, {
  lngs: ["ar"],
  nr: [0, 1, 2, 3, 11, 100],
  fc: 5
}, {
  lngs: ["cs", "sk"],
  nr: [1, 2, 5],
  fc: 6
}, {
  lngs: ["csb", "pl"],
  nr: [1, 2, 5],
  fc: 7
}, {
  lngs: ["cy"],
  nr: [1, 2, 3, 8],
  fc: 8
}, {
  lngs: ["fr"],
  nr: [1, 2],
  fc: 9
}, {
  lngs: ["ga"],
  nr: [1, 2, 3, 7, 11],
  fc: 10
}, {
  lngs: ["gd"],
  nr: [1, 2, 3, 20],
  fc: 11
}, {
  lngs: ["is"],
  nr: [1, 2],
  fc: 12
}, {
  lngs: ["jv"],
  nr: [0, 1],
  fc: 13
}, {
  lngs: ["kw"],
  nr: [1, 2, 3, 4],
  fc: 14
}, {
  lngs: ["lt"],
  nr: [1, 2, 10],
  fc: 15
}, {
  lngs: ["lv"],
  nr: [1, 2, 0],
  fc: 16
}, {
  lngs: ["mk"],
  nr: [1, 2],
  fc: 17
}, {
  lngs: ["mnk"],
  nr: [0, 1, 2],
  fc: 18
}, {
  lngs: ["mt"],
  nr: [1, 2, 11, 20],
  fc: 19
}, {
  lngs: ["or"],
  nr: [2, 1],
  fc: 2
}, {
  lngs: ["ro"],
  nr: [1, 2, 20],
  fc: 20
}, {
  lngs: ["sl"],
  nr: [5, 1, 2, 3],
  fc: 21
}, {
  lngs: ["he", "iw"],
  nr: [1, 2, 20, 21],
  fc: 22
}];
var _rulesPluralsTypes = {
  1: function _(n) {
    return Number(n > 1);
  },
  2: function _2(n) {
    return Number(n != 1);
  },
  3: function _3(n) {
    return 0;
  },
  4: function _4(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  5: function _5(n) {
    return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);
  },
  6: function _6(n) {
    return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);
  },
  7: function _7(n) {
    return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  8: function _8(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);
  },
  9: function _9(n) {
    return Number(n >= 2);
  },
  10: function _10(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);
  },
  11: function _11(n) {
    return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);
  },
  12: function _12(n) {
    return Number(n % 10 != 1 || n % 100 == 11);
  },
  13: function _13(n) {
    return Number(n !== 0);
  },
  14: function _14(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);
  },
  15: function _15(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  16: function _16(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);
  },
  17: function _17(n) {
    return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);
  },
  18: function _18(n) {
    return Number(n == 0 ? 0 : n == 1 ? 1 : 2);
  },
  19: function _19(n) {
    return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);
  },
  20: function _20(n) {
    return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);
  },
  21: function _21(n) {
    return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);
  },
  22: function _22(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);
  }
};
var deprecatedJsonVersions = ["v1", "v2", "v3"];
var suffixesOrder = {
  zero: 0,
  one: 1,
  two: 2,
  few: 3,
  many: 4,
  other: 5
};
function createRules() {
  var rules = {};
  sets.forEach(function(set) {
    set.lngs.forEach(function(l2) {
      rules[l2] = {
        numbers: set.nr,
        plurals: _rulesPluralsTypes[set.fc]
      };
    });
  });
  return rules;
}
var PluralResolver = function() {
  function PluralResolver2(languageUtils) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    _classCallCheck$1(this, PluralResolver2);
    this.languageUtils = languageUtils;
    this.options = options;
    this.logger = baseLogger.create("pluralResolver");
    if ((!this.options.compatibilityJSON || this.options.compatibilityJSON === "v4") && (typeof Intl === "undefined" || !Intl.PluralRules)) {
      this.options.compatibilityJSON = "v3";
      this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.");
    }
    this.rules = createRules();
  }
  _createClass$1(PluralResolver2, [{
    key: "addRule",
    value: function addRule(lng, obj) {
      this.rules[lng] = obj;
    }
  }, {
    key: "getRule",
    value: function getRule(code) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (this.shouldUseIntlApi()) {
        try {
          return new Intl.PluralRules(code, {
            type: options.ordinal ? "ordinal" : "cardinal"
          });
        } catch (_unused) {
          return;
        }
      }
      return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
    }
  }, {
    key: "needsPlural",
    value: function needsPlural(code) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var rule = this.getRule(code, options);
      if (this.shouldUseIntlApi()) {
        return rule && rule.resolvedOptions().pluralCategories.length > 1;
      }
      return rule && rule.numbers.length > 1;
    }
  }, {
    key: "getPluralFormsOfKey",
    value: function getPluralFormsOfKey(code, key) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      return this.getSuffixes(code, options).map(function(suffix) {
        return "".concat(key).concat(suffix);
      });
    }
  }, {
    key: "getSuffixes",
    value: function getSuffixes(code) {
      var _this = this;
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var rule = this.getRule(code, options);
      if (!rule) {
        return [];
      }
      if (this.shouldUseIntlApi()) {
        return rule.resolvedOptions().pluralCategories.sort(function(pluralCategory1, pluralCategory2) {
          return suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2];
        }).map(function(pluralCategory) {
          return "".concat(_this.options.prepend).concat(pluralCategory);
        });
      }
      return rule.numbers.map(function(number2) {
        return _this.getSuffix(code, number2, options);
      });
    }
  }, {
    key: "getSuffix",
    value: function getSuffix(code, count) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var rule = this.getRule(code, options);
      if (rule) {
        if (this.shouldUseIntlApi()) {
          return "".concat(this.options.prepend).concat(rule.select(count));
        }
        return this.getSuffixRetroCompatible(rule, count);
      }
      this.logger.warn("no plural rule found for: ".concat(code));
      return "";
    }
  }, {
    key: "getSuffixRetroCompatible",
    value: function getSuffixRetroCompatible(rule, count) {
      var _this2 = this;
      var idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
      var suffix = rule.numbers[idx];
      if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
        if (suffix === 2) {
          suffix = "plural";
        } else if (suffix === 1) {
          suffix = "";
        }
      }
      var returnSuffix = function returnSuffix2() {
        return _this2.options.prepend && suffix.toString() ? _this2.options.prepend + suffix.toString() : suffix.toString();
      };
      if (this.options.compatibilityJSON === "v1") {
        if (suffix === 1)
          return "";
        if (typeof suffix === "number")
          return "_plural_".concat(suffix.toString());
        return returnSuffix();
      } else if (this.options.compatibilityJSON === "v2") {
        return returnSuffix();
      } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
        return returnSuffix();
      }
      return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
    }
  }, {
    key: "shouldUseIntlApi",
    value: function shouldUseIntlApi() {
      return !deprecatedJsonVersions.includes(this.options.compatibilityJSON);
    }
  }]);
  return PluralResolver2;
}();
function ownKeys$3(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$3(Object(source), true).forEach(function(key) {
        _defineProperty$1(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$3(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
var Interpolator = function() {
  function Interpolator2() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    _classCallCheck$1(this, Interpolator2);
    this.logger = baseLogger.create("interpolator");
    this.options = options;
    this.format = options.interpolation && options.interpolation.format || function(value) {
      return value;
    };
    this.init(options);
  }
  _createClass$1(Interpolator2, [{
    key: "init",
    value: function init3() {
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      if (!options.interpolation)
        options.interpolation = {
          escapeValue: true
        };
      var iOpts = options.interpolation;
      this.escape = iOpts.escape !== void 0 ? iOpts.escape : escape;
      this.escapeValue = iOpts.escapeValue !== void 0 ? iOpts.escapeValue : true;
      this.useRawValueToEscape = iOpts.useRawValueToEscape !== void 0 ? iOpts.useRawValueToEscape : false;
      this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || "{{";
      this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || "}}";
      this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ",";
      this.unescapePrefix = iOpts.unescapeSuffix ? "" : iOpts.unescapePrefix || "-";
      this.unescapeSuffix = this.unescapePrefix ? "" : iOpts.unescapeSuffix || "";
      this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape("$t(");
      this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(")");
      this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || ",";
      this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1e3;
      this.alwaysFormat = iOpts.alwaysFormat !== void 0 ? iOpts.alwaysFormat : false;
      this.resetRegExp();
    }
  }, {
    key: "reset",
    value: function reset() {
      if (this.options)
        this.init(this.options);
    }
  }, {
    key: "resetRegExp",
    value: function resetRegExp() {
      var regexpStr = "".concat(this.prefix, "(.+?)").concat(this.suffix);
      this.regexp = new RegExp(regexpStr, "g");
      var regexpUnescapeStr = "".concat(this.prefix).concat(this.unescapePrefix, "(.+?)").concat(this.unescapeSuffix).concat(this.suffix);
      this.regexpUnescape = new RegExp(regexpUnescapeStr, "g");
      var nestingRegexpStr = "".concat(this.nestingPrefix, "(.+?)").concat(this.nestingSuffix);
      this.nestingRegexp = new RegExp(nestingRegexpStr, "g");
    }
  }, {
    key: "interpolate",
    value: function interpolate(str, data, lng, options) {
      var _this = this;
      var match2;
      var value;
      var replaces;
      var defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
      function regexSafe(val) {
        return val.replace(/\$/g, "$$$$");
      }
      var handleFormat = function handleFormat2(key) {
        if (key.indexOf(_this.formatSeparator) < 0) {
          var path2 = getPathWithDefaults(data, defaultData, key);
          return _this.alwaysFormat ? _this.format(path2, void 0, lng, _objectSpread$3(_objectSpread$3(_objectSpread$3({}, options), data), {}, {
            interpolationkey: key
          })) : path2;
        }
        var p = key.split(_this.formatSeparator);
        var k = p.shift().trim();
        var f = p.join(_this.formatSeparator).trim();
        return _this.format(getPathWithDefaults(data, defaultData, k), f, lng, _objectSpread$3(_objectSpread$3(_objectSpread$3({}, options), data), {}, {
          interpolationkey: k
        }));
      };
      this.resetRegExp();
      var missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
      var skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables !== void 0 ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
      var todos = [{
        regex: this.regexpUnescape,
        safeValue: function safeValue(val) {
          return regexSafe(val);
        }
      }, {
        regex: this.regexp,
        safeValue: function safeValue(val) {
          return _this.escapeValue ? regexSafe(_this.escape(val)) : regexSafe(val);
        }
      }];
      todos.forEach(function(todo) {
        replaces = 0;
        while (match2 = todo.regex.exec(str)) {
          var matchedVar = match2[1].trim();
          value = handleFormat(matchedVar);
          if (value === void 0) {
            if (typeof missingInterpolationHandler === "function") {
              var temp = missingInterpolationHandler(str, match2, options);
              value = typeof temp === "string" ? temp : "";
            } else if (options && options.hasOwnProperty(matchedVar)) {
              value = "";
            } else if (skipOnVariables) {
              value = match2[0];
              continue;
            } else {
              _this.logger.warn("missed to pass in variable ".concat(matchedVar, " for interpolating ").concat(str));
              value = "";
            }
          } else if (typeof value !== "string" && !_this.useRawValueToEscape) {
            value = makeString(value);
          }
          var safeValue = todo.safeValue(value);
          str = str.replace(match2[0], safeValue);
          if (skipOnVariables) {
            todo.regex.lastIndex += value.length;
            todo.regex.lastIndex -= match2[0].length;
          } else {
            todo.regex.lastIndex = 0;
          }
          replaces++;
          if (replaces >= _this.maxReplaces) {
            break;
          }
        }
      });
      return str;
    }
  }, {
    key: "nest",
    value: function nest(str, fc) {
      var _this2 = this;
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var match2;
      var value;
      var clonedOptions = _objectSpread$3({}, options);
      clonedOptions.applyPostProcessor = false;
      delete clonedOptions.defaultValue;
      function handleHasOptions(key, inheritedOptions) {
        var sep = this.nestingOptionsSeparator;
        if (key.indexOf(sep) < 0)
          return key;
        var c = key.split(new RegExp("".concat(sep, "[ ]*{")));
        var optionsString = "{".concat(c[1]);
        key = c[0];
        optionsString = this.interpolate(optionsString, clonedOptions);
        var matchedSingleQuotes = optionsString.match(/'/g);
        var matchedDoubleQuotes = optionsString.match(/"/g);
        if (matchedSingleQuotes && matchedSingleQuotes.length % 2 === 0 && !matchedDoubleQuotes || matchedDoubleQuotes.length % 2 !== 0) {
          optionsString = optionsString.replace(/'/g, '"');
        }
        try {
          clonedOptions = JSON.parse(optionsString);
          if (inheritedOptions)
            clonedOptions = _objectSpread$3(_objectSpread$3({}, inheritedOptions), clonedOptions);
        } catch (e) {
          this.logger.warn("failed parsing options string in nesting for key ".concat(key), e);
          return "".concat(key).concat(sep).concat(optionsString);
        }
        delete clonedOptions.defaultValue;
        return key;
      }
      while (match2 = this.nestingRegexp.exec(str)) {
        var formatters = [];
        var doReduce = false;
        if (match2[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match2[1])) {
          var r = match2[1].split(this.formatSeparator).map(function(elem) {
            return elem.trim();
          });
          match2[1] = r.shift();
          formatters = r;
          doReduce = true;
        }
        value = fc(handleHasOptions.call(this, match2[1].trim(), clonedOptions), clonedOptions);
        if (value && match2[0] === str && typeof value !== "string")
          return value;
        if (typeof value !== "string")
          value = makeString(value);
        if (!value) {
          this.logger.warn("missed to resolve ".concat(match2[1], " for nesting ").concat(str));
          value = "";
        }
        if (doReduce) {
          value = formatters.reduce(function(v, f) {
            return _this2.format(v, f, options.lng, _objectSpread$3(_objectSpread$3({}, options), {}, {
              interpolationkey: match2[1].trim()
            }));
          }, value.trim());
        }
        str = str.replace(match2[0], value);
        this.regexp.lastIndex = 0;
      }
      return str;
    }
  }]);
  return Interpolator2;
}();
function ownKeys$4(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$4(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$4(Object(source), true).forEach(function(key) {
        _defineProperty$1(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$4(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function parseFormatStr(formatStr) {
  var formatName = formatStr.toLowerCase().trim();
  var formatOptions = {};
  if (formatStr.indexOf("(") > -1) {
    var p = formatStr.split("(");
    formatName = p[0].toLowerCase().trim();
    var optStr = p[1].substring(0, p[1].length - 1);
    if (formatName === "currency" && optStr.indexOf(":") < 0) {
      if (!formatOptions.currency)
        formatOptions.currency = optStr.trim();
    } else if (formatName === "relativetime" && optStr.indexOf(":") < 0) {
      if (!formatOptions.range)
        formatOptions.range = optStr.trim();
    } else {
      var opts = optStr.split(";");
      opts.forEach(function(opt) {
        if (!opt)
          return;
        var _opt$split = opt.split(":"), _opt$split2 = _toArray(_opt$split), key = _opt$split2[0], rest = _opt$split2.slice(1);
        var val = rest.join(":").trim().replace(/^'+|'+$/g, "");
        if (!formatOptions[key.trim()])
          formatOptions[key.trim()] = val;
        if (val === "false")
          formatOptions[key.trim()] = false;
        if (val === "true")
          formatOptions[key.trim()] = true;
        if (!isNaN(val))
          formatOptions[key.trim()] = parseInt(val, 10);
      });
    }
  }
  return {
    formatName,
    formatOptions
  };
}
function createCachedFormatter(fn) {
  var cache = {};
  return function invokeFormatter(val, lng, options) {
    var key = lng + JSON.stringify(options);
    var formatter = cache[key];
    if (!formatter) {
      formatter = fn(lng, options);
      cache[key] = formatter;
    }
    return formatter(val);
  };
}
var Formatter = function() {
  function Formatter2() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    _classCallCheck$1(this, Formatter2);
    this.logger = baseLogger.create("formatter");
    this.options = options;
    this.formats = {
      number: createCachedFormatter(function(lng, options2) {
        var formatter = new Intl.NumberFormat(lng, options2);
        return function(val) {
          return formatter.format(val);
        };
      }),
      currency: createCachedFormatter(function(lng, options2) {
        var formatter = new Intl.NumberFormat(lng, _objectSpread$4(_objectSpread$4({}, options2), {}, {
          style: "currency"
        }));
        return function(val) {
          return formatter.format(val);
        };
      }),
      datetime: createCachedFormatter(function(lng, options2) {
        var formatter = new Intl.DateTimeFormat(lng, _objectSpread$4({}, options2));
        return function(val) {
          return formatter.format(val);
        };
      }),
      relativetime: createCachedFormatter(function(lng, options2) {
        var formatter = new Intl.RelativeTimeFormat(lng, _objectSpread$4({}, options2));
        return function(val) {
          return formatter.format(val, options2.range || "day");
        };
      }),
      list: createCachedFormatter(function(lng, options2) {
        var formatter = new Intl.ListFormat(lng, _objectSpread$4({}, options2));
        return function(val) {
          return formatter.format(val);
        };
      })
    };
    this.init(options);
  }
  _createClass$1(Formatter2, [{
    key: "init",
    value: function init3(services) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        interpolation: {}
      };
      var iOpts = options.interpolation;
      this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ",";
    }
  }, {
    key: "add",
    value: function add2(name, fc) {
      this.formats[name.toLowerCase().trim()] = fc;
    }
  }, {
    key: "addCached",
    value: function addCached(name, fc) {
      this.formats[name.toLowerCase().trim()] = createCachedFormatter(fc);
    }
  }, {
    key: "format",
    value: function format(value, _format, lng, options) {
      var _this = this;
      var formats = _format.split(this.formatSeparator);
      var result = formats.reduce(function(mem, f) {
        var _parseFormatStr = parseFormatStr(f), formatName = _parseFormatStr.formatName, formatOptions = _parseFormatStr.formatOptions;
        if (_this.formats[formatName]) {
          var formatted = mem;
          try {
            var valOptions = options && options.formatParams && options.formatParams[options.interpolationkey] || {};
            var l2 = valOptions.locale || valOptions.lng || options.locale || options.lng || lng;
            formatted = _this.formats[formatName](mem, l2, _objectSpread$4(_objectSpread$4(_objectSpread$4({}, formatOptions), options), valOptions));
          } catch (error2) {
            _this.logger.warn(error2);
          }
          return formatted;
        } else {
          _this.logger.warn("there was no format function for ".concat(formatName));
        }
        return mem;
      }, value);
      return result;
    }
  }]);
  return Formatter2;
}();
function ownKeys$5(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$5(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$5(Object(source), true).forEach(function(key) {
        _defineProperty$1(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$5(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper$2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$2() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function removePending(q, name) {
  if (q.pending[name] !== void 0) {
    delete q.pending[name];
    q.pendingCount--;
  }
}
var Connector = function(_EventEmitter) {
  _inherits(Connector2, _EventEmitter);
  var _super = _createSuper$2(Connector2);
  function Connector2(backend, store, services) {
    var _this;
    var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    _classCallCheck$1(this, Connector2);
    _this = _super.call(this);
    if (isIE10) {
      EventEmitter.call(_assertThisInitialized(_this));
    }
    _this.backend = backend;
    _this.store = store;
    _this.services = services;
    _this.languageUtils = services.languageUtils;
    _this.options = options;
    _this.logger = baseLogger.create("backendConnector");
    _this.waitingReads = [];
    _this.maxParallelReads = options.maxParallelReads || 10;
    _this.readingCalls = 0;
    _this.maxRetries = options.maxRetries >= 0 ? options.maxRetries : 5;
    _this.retryTimeout = options.retryTimeout >= 1 ? options.retryTimeout : 350;
    _this.state = {};
    _this.queue = [];
    if (_this.backend && _this.backend.init) {
      _this.backend.init(services, options.backend, options);
    }
    return _this;
  }
  _createClass$1(Connector2, [{
    key: "queueLoad",
    value: function queueLoad(languages, namespaces, options, callback) {
      var _this2 = this;
      var toLoad = {};
      var pending = {};
      var toLoadLanguages = {};
      var toLoadNamespaces = {};
      languages.forEach(function(lng) {
        var hasAllNamespaces = true;
        namespaces.forEach(function(ns) {
          var name = "".concat(lng, "|").concat(ns);
          if (!options.reload && _this2.store.hasResourceBundle(lng, ns)) {
            _this2.state[name] = 2;
          } else if (_this2.state[name] < 0)
            ;
          else if (_this2.state[name] === 1) {
            if (pending[name] === void 0)
              pending[name] = true;
          } else {
            _this2.state[name] = 1;
            hasAllNamespaces = false;
            if (pending[name] === void 0)
              pending[name] = true;
            if (toLoad[name] === void 0)
              toLoad[name] = true;
            if (toLoadNamespaces[ns] === void 0)
              toLoadNamespaces[ns] = true;
          }
        });
        if (!hasAllNamespaces)
          toLoadLanguages[lng] = true;
      });
      if (Object.keys(toLoad).length || Object.keys(pending).length) {
        this.queue.push({
          pending,
          pendingCount: Object.keys(pending).length,
          loaded: {},
          errors: [],
          callback
        });
      }
      return {
        toLoad: Object.keys(toLoad),
        pending: Object.keys(pending),
        toLoadLanguages: Object.keys(toLoadLanguages),
        toLoadNamespaces: Object.keys(toLoadNamespaces)
      };
    }
  }, {
    key: "loaded",
    value: function loaded(name, err, data) {
      var s = name.split("|");
      var lng = s[0];
      var ns = s[1];
      if (err)
        this.emit("failedLoading", lng, ns, err);
      if (data) {
        this.store.addResourceBundle(lng, ns, data);
      }
      this.state[name] = err ? -1 : 2;
      var loaded2 = {};
      this.queue.forEach(function(q) {
        pushPath(q.loaded, [lng], ns);
        removePending(q, name);
        if (err)
          q.errors.push(err);
        if (q.pendingCount === 0 && !q.done) {
          Object.keys(q.loaded).forEach(function(l2) {
            if (!loaded2[l2])
              loaded2[l2] = {};
            var loadedKeys = q.loaded[l2];
            if (loadedKeys.length) {
              loadedKeys.forEach(function(ns2) {
                if (loaded2[l2][ns2] === void 0)
                  loaded2[l2][ns2] = true;
              });
            }
          });
          q.done = true;
          if (q.errors.length) {
            q.callback(q.errors);
          } else {
            q.callback();
          }
        }
      });
      this.emit("loaded", loaded2);
      this.queue = this.queue.filter(function(q) {
        return !q.done;
      });
    }
  }, {
    key: "read",
    value: function read2(lng, ns, fcName) {
      var _this3 = this;
      var tried = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
      var wait2 = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : this.retryTimeout;
      var callback = arguments.length > 5 ? arguments[5] : void 0;
      if (!lng.length)
        return callback(null, {});
      if (this.readingCalls >= this.maxParallelReads) {
        this.waitingReads.push({
          lng,
          ns,
          fcName,
          tried,
          wait: wait2,
          callback
        });
        return;
      }
      this.readingCalls++;
      return this.backend[fcName](lng, ns, function(err, data) {
        _this3.readingCalls--;
        if (_this3.waitingReads.length > 0) {
          var next2 = _this3.waitingReads.shift();
          _this3.read(next2.lng, next2.ns, next2.fcName, next2.tried, next2.wait, next2.callback);
        }
        if (err && data && tried < _this3.maxRetries) {
          setTimeout(function() {
            _this3.read.call(_this3, lng, ns, fcName, tried + 1, wait2 * 2, callback);
          }, wait2);
          return;
        }
        callback(err, data);
      });
    }
  }, {
    key: "prepareLoading",
    value: function prepareLoading(languages, namespaces) {
      var _this4 = this;
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var callback = arguments.length > 3 ? arguments[3] : void 0;
      if (!this.backend) {
        this.logger.warn("No backend was added via i18next.use. Will not load resources.");
        return callback && callback();
      }
      if (typeof languages === "string")
        languages = this.languageUtils.toResolveHierarchy(languages);
      if (typeof namespaces === "string")
        namespaces = [namespaces];
      var toLoad = this.queueLoad(languages, namespaces, options, callback);
      if (!toLoad.toLoad.length) {
        if (!toLoad.pending.length)
          callback();
        return null;
      }
      toLoad.toLoad.forEach(function(name) {
        _this4.loadOne(name);
      });
    }
  }, {
    key: "load",
    value: function load2(languages, namespaces, callback) {
      this.prepareLoading(languages, namespaces, {}, callback);
    }
  }, {
    key: "reload",
    value: function reload(languages, namespaces, callback) {
      this.prepareLoading(languages, namespaces, {
        reload: true
      }, callback);
    }
  }, {
    key: "loadOne",
    value: function loadOne(name) {
      var _this5 = this;
      var prefix2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      var s = name.split("|");
      var lng = s[0];
      var ns = s[1];
      this.read(lng, ns, "read", void 0, void 0, function(err, data) {
        if (err)
          _this5.logger.warn("".concat(prefix2, "loading namespace ").concat(ns, " for language ").concat(lng, " failed"), err);
        if (!err && data)
          _this5.logger.log("".concat(prefix2, "loaded namespace ").concat(ns, " for language ").concat(lng), data);
        _this5.loaded(name, err, data);
      });
    }
  }, {
    key: "saveMissing",
    value: function saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
      var options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
      if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
        this.logger.warn('did not save key "'.concat(key, '" as the namespace "').concat(namespace, '" was not yet loaded'), "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
        return;
      }
      if (key === void 0 || key === null || key === "")
        return;
      if (this.backend && this.backend.create) {
        this.backend.create(languages, namespace, key, fallbackValue, null, _objectSpread$5(_objectSpread$5({}, options), {}, {
          isUpdate
        }));
      }
      if (!languages || !languages[0])
        return;
      this.store.addResource(languages[0], namespace, key, fallbackValue);
    }
  }]);
  return Connector2;
}(EventEmitter);
function get$1() {
  return {
    debug: false,
    initImmediate: true,
    ns: ["translation"],
    defaultNS: ["translation"],
    fallbackLng: ["dev"],
    fallbackNS: false,
    supportedLngs: false,
    nonExplicitSupportedLngs: false,
    load: "all",
    preload: false,
    simplifyPluralSuffix: true,
    keySeparator: ".",
    nsSeparator: ":",
    pluralSeparator: "_",
    contextSeparator: "_",
    partialBundledLanguages: false,
    saveMissing: false,
    updateMissing: false,
    saveMissingTo: "fallback",
    saveMissingPlurals: true,
    missingKeyHandler: false,
    missingInterpolationHandler: false,
    postProcess: false,
    postProcessPassResolved: false,
    returnNull: true,
    returnEmptyString: true,
    returnObjects: false,
    joinArrays: false,
    returnedObjectHandler: false,
    parseMissingKeyHandler: false,
    appendNamespaceToMissingKey: false,
    appendNamespaceToCIMode: false,
    overloadTranslationOptionHandler: function handle2(args) {
      var ret = {};
      if (_typeof$2(args[1]) === "object")
        ret = args[1];
      if (typeof args[1] === "string")
        ret.defaultValue = args[1];
      if (typeof args[2] === "string")
        ret.tDescription = args[2];
      if (_typeof$2(args[2]) === "object" || _typeof$2(args[3]) === "object") {
        var options = args[3] || args[2];
        Object.keys(options).forEach(function(key) {
          ret[key] = options[key];
        });
      }
      return ret;
    },
    interpolation: {
      escapeValue: true,
      format: function format(value, _format, lng, options) {
        return value;
      },
      prefix: "{{",
      suffix: "}}",
      formatSeparator: ",",
      unescapePrefix: "-",
      nestingPrefix: "$t(",
      nestingSuffix: ")",
      nestingOptionsSeparator: ",",
      maxReplaces: 1e3,
      skipOnVariables: true
    }
  };
}
function transformOptions(options) {
  if (typeof options.ns === "string")
    options.ns = [options.ns];
  if (typeof options.fallbackLng === "string")
    options.fallbackLng = [options.fallbackLng];
  if (typeof options.fallbackNS === "string")
    options.fallbackNS = [options.fallbackNS];
  if (options.supportedLngs && options.supportedLngs.indexOf("cimode") < 0) {
    options.supportedLngs = options.supportedLngs.concat(["cimode"]);
  }
  return options;
}
function ownKeys$6(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$6(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$6(Object(source), true).forEach(function(key) {
        _defineProperty$1(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$6(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper$3(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$3();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$3() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function noop() {
}
function bindMemberFunctions(inst) {
  var mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));
  mems.forEach(function(mem) {
    if (typeof inst[mem] === "function") {
      inst[mem] = inst[mem].bind(inst);
    }
  });
}
var I18n = function(_EventEmitter) {
  _inherits(I18n2, _EventEmitter);
  var _super = _createSuper$3(I18n2);
  function I18n2() {
    var _this;
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var callback = arguments.length > 1 ? arguments[1] : void 0;
    _classCallCheck$1(this, I18n2);
    _this = _super.call(this);
    if (isIE10) {
      EventEmitter.call(_assertThisInitialized(_this));
    }
    _this.options = transformOptions(options);
    _this.services = {};
    _this.logger = baseLogger;
    _this.modules = {
      external: []
    };
    bindMemberFunctions(_assertThisInitialized(_this));
    if (callback && !_this.isInitialized && !options.isClone) {
      if (!_this.options.initImmediate) {
        _this.init(options, callback);
        return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
      }
      setTimeout(function() {
        _this.init(options, callback);
      }, 0);
    }
    return _this;
  }
  _createClass$1(I18n2, [{
    key: "init",
    value: function init3() {
      var _this2 = this;
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : void 0;
      if (typeof options === "function") {
        callback = options;
        options = {};
      }
      if (!options.defaultNS && options.defaultNS !== false && options.ns) {
        if (typeof options.ns === "string") {
          options.defaultNS = options.ns;
        } else if (options.ns.indexOf("translation") < 0) {
          options.defaultNS = options.ns[0];
        }
      }
      var defOpts = get$1();
      this.options = _objectSpread$6(_objectSpread$6(_objectSpread$6({}, defOpts), this.options), transformOptions(options));
      if (this.options.compatibilityAPI !== "v1") {
        this.options.interpolation = _objectSpread$6(_objectSpread$6({}, defOpts.interpolation), this.options.interpolation);
      }
      if (options.keySeparator !== void 0) {
        this.options.userDefinedKeySeparator = options.keySeparator;
      }
      if (options.nsSeparator !== void 0) {
        this.options.userDefinedNsSeparator = options.nsSeparator;
      }
      function createClassOnDemand(ClassOrObject) {
        if (!ClassOrObject)
          return null;
        if (typeof ClassOrObject === "function")
          return new ClassOrObject();
        return ClassOrObject;
      }
      if (!this.options.isClone) {
        if (this.modules.logger) {
          baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
        } else {
          baseLogger.init(null, this.options);
        }
        var formatter;
        if (this.modules.formatter) {
          formatter = this.modules.formatter;
        } else if (typeof Intl !== "undefined") {
          formatter = Formatter;
        }
        var lu = new LanguageUtil(this.options);
        this.store = new ResourceStore(this.options.resources, this.options);
        var s = this.services;
        s.logger = baseLogger;
        s.resourceStore = this.store;
        s.languageUtils = lu;
        s.pluralResolver = new PluralResolver(lu, {
          prepend: this.options.pluralSeparator,
          compatibilityJSON: this.options.compatibilityJSON,
          simplifyPluralSuffix: this.options.simplifyPluralSuffix
        });
        if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {
          s.formatter = createClassOnDemand(formatter);
          s.formatter.init(s, this.options);
          this.options.interpolation.format = s.formatter.format.bind(s.formatter);
        }
        s.interpolator = new Interpolator(this.options);
        s.utils = {
          hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
        };
        s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
        s.backendConnector.on("*", function(event) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          _this2.emit.apply(_this2, [event].concat(args));
        });
        if (this.modules.languageDetector) {
          s.languageDetector = createClassOnDemand(this.modules.languageDetector);
          s.languageDetector.init(s, this.options.detection, this.options);
        }
        if (this.modules.i18nFormat) {
          s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
          if (s.i18nFormat.init)
            s.i18nFormat.init(this);
        }
        this.translator = new Translator(this.services, this.options);
        this.translator.on("*", function(event) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          _this2.emit.apply(_this2, [event].concat(args));
        });
        this.modules.external.forEach(function(m2) {
          if (m2.init)
            m2.init(_this2);
        });
      }
      this.format = this.options.interpolation.format;
      if (!callback)
        callback = noop;
      if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
        var codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
        if (codes.length > 0 && codes[0] !== "dev")
          this.options.lng = codes[0];
      }
      if (!this.services.languageDetector && !this.options.lng) {
        this.logger.warn("init: no languageDetector is used and no lng is defined");
      }
      var storeApi = ["getResource", "hasResourceBundle", "getResourceBundle", "getDataByLanguage"];
      storeApi.forEach(function(fcName) {
        _this2[fcName] = function() {
          var _this2$store;
          return (_this2$store = _this2.store)[fcName].apply(_this2$store, arguments);
        };
      });
      var storeApiChained = ["addResource", "addResources", "addResourceBundle", "removeResourceBundle"];
      storeApiChained.forEach(function(fcName) {
        _this2[fcName] = function() {
          var _this2$store2;
          (_this2$store2 = _this2.store)[fcName].apply(_this2$store2, arguments);
          return _this2;
        };
      });
      var deferred = defer();
      var load2 = function load3() {
        var finish = function finish2(err, t) {
          if (_this2.isInitialized && !_this2.initializedStoreOnce)
            _this2.logger.warn("init: i18next is already initialized. You should call init just once!");
          _this2.isInitialized = true;
          if (!_this2.options.isClone)
            _this2.logger.log("initialized", _this2.options);
          _this2.emit("initialized", _this2.options);
          deferred.resolve(t);
          callback(err, t);
        };
        if (_this2.languages && _this2.options.compatibilityAPI !== "v1" && !_this2.isInitialized)
          return finish(null, _this2.t.bind(_this2));
        _this2.changeLanguage(_this2.options.lng, finish);
      };
      if (this.options.resources || !this.options.initImmediate) {
        load2();
      } else {
        setTimeout(load2, 0);
      }
      return deferred;
    }
  }, {
    key: "loadResources",
    value: function loadResources(language) {
      var _this3 = this;
      var callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
      var usedCallback = callback;
      var usedLng = typeof language === "string" ? language : this.language;
      if (typeof language === "function")
        usedCallback = language;
      if (!this.options.resources || this.options.partialBundledLanguages) {
        if (usedLng && usedLng.toLowerCase() === "cimode")
          return usedCallback();
        var toLoad = [];
        var append2 = function append3(lng) {
          if (!lng)
            return;
          var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);
          lngs.forEach(function(l2) {
            if (toLoad.indexOf(l2) < 0)
              toLoad.push(l2);
          });
        };
        if (!usedLng) {
          var fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
          fallbacks.forEach(function(l2) {
            return append2(l2);
          });
        } else {
          append2(usedLng);
        }
        if (this.options.preload) {
          this.options.preload.forEach(function(l2) {
            return append2(l2);
          });
        }
        this.services.backendConnector.load(toLoad, this.options.ns, function(e) {
          if (!e && !_this3.resolvedLanguage && _this3.language)
            _this3.setResolvedLanguage(_this3.language);
          usedCallback(e);
        });
      } else {
        usedCallback(null);
      }
    }
  }, {
    key: "reloadResources",
    value: function reloadResources(lngs, ns, callback) {
      var deferred = defer();
      if (!lngs)
        lngs = this.languages;
      if (!ns)
        ns = this.options.ns;
      if (!callback)
        callback = noop;
      this.services.backendConnector.reload(lngs, ns, function(err) {
        deferred.resolve();
        callback(err);
      });
      return deferred;
    }
  }, {
    key: "use",
    value: function use(module2) {
      if (!module2)
        throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");
      if (!module2.type)
        throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");
      if (module2.type === "backend") {
        this.modules.backend = module2;
      }
      if (module2.type === "logger" || module2.log && module2.warn && module2.error) {
        this.modules.logger = module2;
      }
      if (module2.type === "languageDetector") {
        this.modules.languageDetector = module2;
      }
      if (module2.type === "i18nFormat") {
        this.modules.i18nFormat = module2;
      }
      if (module2.type === "postProcessor") {
        postProcessor.addPostProcessor(module2);
      }
      if (module2.type === "formatter") {
        this.modules.formatter = module2;
      }
      if (module2.type === "3rdParty") {
        this.modules.external.push(module2);
      }
      return this;
    }
  }, {
    key: "setResolvedLanguage",
    value: function setResolvedLanguage(l2) {
      if (!l2 || !this.languages)
        return;
      if (["cimode", "dev"].indexOf(l2) > -1)
        return;
      for (var li = 0; li < this.languages.length; li++) {
        var lngInLngs = this.languages[li];
        if (["cimode", "dev"].indexOf(lngInLngs) > -1)
          continue;
        if (this.store.hasLanguageSomeTranslations(lngInLngs)) {
          this.resolvedLanguage = lngInLngs;
          break;
        }
      }
    }
  }, {
    key: "changeLanguage",
    value: function changeLanguage(lng, callback) {
      var _this4 = this;
      this.isLanguageChangingTo = lng;
      var deferred = defer();
      this.emit("languageChanging", lng);
      var setLngProps = function setLngProps2(l2) {
        _this4.language = l2;
        _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l2);
        _this4.resolvedLanguage = void 0;
        _this4.setResolvedLanguage(l2);
      };
      var done = function done2(err, l2) {
        if (l2) {
          setLngProps(l2);
          _this4.translator.changeLanguage(l2);
          _this4.isLanguageChangingTo = void 0;
          _this4.emit("languageChanged", l2);
          _this4.logger.log("languageChanged", l2);
        } else {
          _this4.isLanguageChangingTo = void 0;
        }
        deferred.resolve(function() {
          return _this4.t.apply(_this4, arguments);
        });
        if (callback)
          callback(err, function() {
            return _this4.t.apply(_this4, arguments);
          });
      };
      var setLng = function setLng2(lngs) {
        if (!lng && !lngs && _this4.services.languageDetector)
          lngs = [];
        var l2 = typeof lngs === "string" ? lngs : _this4.services.languageUtils.getBestMatchFromCodes(lngs);
        if (l2) {
          if (!_this4.language) {
            setLngProps(l2);
          }
          if (!_this4.translator.language)
            _this4.translator.changeLanguage(l2);
          if (_this4.services.languageDetector)
            _this4.services.languageDetector.cacheUserLanguage(l2);
        }
        _this4.loadResources(l2, function(err) {
          done(err, l2);
        });
      };
      if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
        setLng(this.services.languageDetector.detect());
      } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
        this.services.languageDetector.detect(setLng);
      } else {
        setLng(lng);
      }
      return deferred;
    }
  }, {
    key: "getFixedT",
    value: function getFixedT(lng, ns, keyPrefix) {
      var _this5 = this;
      var fixedT = function fixedT2(key, opts) {
        var options;
        if (_typeof$2(opts) !== "object") {
          for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
            rest[_key3 - 2] = arguments[_key3];
          }
          options = _this5.options.overloadTranslationOptionHandler([key, opts].concat(rest));
        } else {
          options = _objectSpread$6({}, opts);
        }
        options.lng = options.lng || fixedT2.lng;
        options.lngs = options.lngs || fixedT2.lngs;
        options.ns = options.ns || fixedT2.ns;
        options.keyPrefix = options.keyPrefix || keyPrefix || fixedT2.keyPrefix;
        var keySeparator = _this5.options.keySeparator || ".";
        var resultKey = options.keyPrefix ? "".concat(options.keyPrefix).concat(keySeparator).concat(key) : key;
        return _this5.t(resultKey, options);
      };
      if (typeof lng === "string") {
        fixedT.lng = lng;
      } else {
        fixedT.lngs = lng;
      }
      fixedT.ns = ns;
      fixedT.keyPrefix = keyPrefix;
      return fixedT;
    }
  }, {
    key: "t",
    value: function t() {
      var _this$translator;
      return this.translator && (_this$translator = this.translator).translate.apply(_this$translator, arguments);
    }
  }, {
    key: "exists",
    value: function exists2() {
      var _this$translator2;
      return this.translator && (_this$translator2 = this.translator).exists.apply(_this$translator2, arguments);
    }
  }, {
    key: "setDefaultNamespace",
    value: function setDefaultNamespace(ns) {
      this.options.defaultNS = ns;
    }
  }, {
    key: "hasLoadedNamespace",
    value: function hasLoadedNamespace(ns) {
      var _this6 = this;
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (!this.isInitialized) {
        this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages);
        return false;
      }
      if (!this.languages || !this.languages.length) {
        this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages);
        return false;
      }
      var lng = this.resolvedLanguage || this.languages[0];
      var fallbackLng = this.options ? this.options.fallbackLng : false;
      var lastLng = this.languages[this.languages.length - 1];
      if (lng.toLowerCase() === "cimode")
        return true;
      var loadNotPending = function loadNotPending2(l2, n) {
        var loadState = _this6.services.backendConnector.state["".concat(l2, "|").concat(n)];
        return loadState === -1 || loadState === 2;
      };
      if (options.precheck) {
        var preResult = options.precheck(this, loadNotPending);
        if (preResult !== void 0)
          return preResult;
      }
      if (this.hasResourceBundle(lng, ns))
        return true;
      if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages)
        return true;
      if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns)))
        return true;
      return false;
    }
  }, {
    key: "loadNamespaces",
    value: function loadNamespaces(ns, callback) {
      var _this7 = this;
      var deferred = defer();
      if (!this.options.ns) {
        callback && callback();
        return Promise.resolve();
      }
      if (typeof ns === "string")
        ns = [ns];
      ns.forEach(function(n) {
        if (_this7.options.ns.indexOf(n) < 0)
          _this7.options.ns.push(n);
      });
      this.loadResources(function(err) {
        deferred.resolve();
        if (callback)
          callback(err);
      });
      return deferred;
    }
  }, {
    key: "loadLanguages",
    value: function loadLanguages(lngs, callback) {
      var deferred = defer();
      if (typeof lngs === "string")
        lngs = [lngs];
      var preloaded = this.options.preload || [];
      var newLngs = lngs.filter(function(lng) {
        return preloaded.indexOf(lng) < 0;
      });
      if (!newLngs.length) {
        if (callback)
          callback();
        return Promise.resolve();
      }
      this.options.preload = preloaded.concat(newLngs);
      this.loadResources(function(err) {
        deferred.resolve();
        if (callback)
          callback(err);
      });
      return deferred;
    }
  }, {
    key: "dir",
    value: function dir(lng) {
      if (!lng)
        lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);
      if (!lng)
        return "rtl";
      var rtlLngs = ["ar", "shu", "sqr", "ssh", "xaa", "yhd", "yud", "aao", "abh", "abv", "acm", "acq", "acw", "acx", "acy", "adf", "ads", "aeb", "aec", "afb", "ajp", "apc", "apd", "arb", "arq", "ars", "ary", "arz", "auz", "avl", "ayh", "ayl", "ayn", "ayp", "bbz", "pga", "he", "iw", "ps", "pbt", "pbu", "pst", "prp", "prd", "ug", "ur", "ydd", "yds", "yih", "ji", "yi", "hbo", "men", "xmn", "fa", "jpr", "peo", "pes", "prs", "dv", "sam", "ckb"];
      return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf("-arab") > 1 ? "rtl" : "ltr";
    }
  }, {
    key: "cloneInstance",
    value: function cloneInstance() {
      var _this8 = this;
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
      var mergedOptions = _objectSpread$6(_objectSpread$6(_objectSpread$6({}, this.options), options), {
        isClone: true
      });
      var clone = new I18n2(mergedOptions);
      if (options.debug !== void 0 || options.prefix !== void 0) {
        clone.logger = clone.logger.clone(options);
      }
      var membersToCopy = ["store", "services", "language"];
      membersToCopy.forEach(function(m2) {
        clone[m2] = _this8[m2];
      });
      clone.services = _objectSpread$6({}, this.services);
      clone.services.utils = {
        hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
      };
      clone.translator = new Translator(clone.services, clone.options);
      clone.translator.on("*", function(event) {
        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          args[_key4 - 1] = arguments[_key4];
        }
        clone.emit.apply(clone, [event].concat(args));
      });
      clone.init(mergedOptions, callback);
      clone.translator.options = clone.options;
      clone.translator.backendConnector.services.utils = {
        hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
      };
      return clone;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        options: this.options,
        store: this.store,
        language: this.language,
        languages: this.languages,
        resolvedLanguage: this.resolvedLanguage
      };
    }
  }]);
  return I18n2;
}(EventEmitter);
_defineProperty$1(I18n, "createInstance", function() {
  var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var callback = arguments.length > 1 ? arguments[1] : void 0;
  return new I18n(options, callback);
});
var instance = I18n.createInstance();
instance.createInstance = I18n.createInstance;
const i18n = instance;
const commonOptions = {
  debug: false,
  fallbackLng: "en",
  resources: {
    en: {
      translation: translationEn
    }
  }
};
const reactOptions = {
  react: {
    useSuspense: false
  }
};
const nodeOptions = {};
if (isClientSide()) {
  i18n.use(Browser).use(initReactI18next).init({ ...commonOptions, ...reactOptions });
} else {
  i18n.use(Backend).use(LanguageDetector).init({ ...commonOptions, ...nodeOptions });
}
const LogLevels = {
  silent: Number.NEGATIVE_INFINITY,
  fatal: 0,
  error: 0,
  warn: 1,
  log: 2,
  info: 3,
  success: 3,
  fail: 3,
  ready: 3,
  start: 3,
  box: 3,
  debug: 4,
  trace: 5,
  verbose: Number.POSITIVE_INFINITY
};
const LogTypes = {
  // Silent
  silent: {
    level: -1
  },
  // Level 0
  fatal: {
    level: LogLevels.fatal
  },
  error: {
    level: LogLevels.error
  },
  // Level 1
  warn: {
    level: LogLevels.warn
  },
  // Level 2
  log: {
    level: LogLevels.log
  },
  // Level 3
  info: {
    level: LogLevels.info
  },
  success: {
    level: LogLevels.success
  },
  fail: {
    level: LogLevels.fail
  },
  ready: {
    level: LogLevels.info
  },
  start: {
    level: LogLevels.info
  },
  box: {
    level: LogLevels.info
  },
  // Level 4
  debug: {
    level: LogLevels.debug
  },
  // Level 5
  trace: {
    level: LogLevels.trace
  },
  // Verbose
  verbose: {
    level: LogLevels.verbose
  }
};
function isObject(value) {
  return value !== null && typeof value === "object";
}
function _defu(baseObject, defaults2, namespace = ".", merger) {
  if (!isObject(defaults2)) {
    return _defu(baseObject, {}, namespace, merger);
  }
  const object = Object.assign({}, defaults2);
  for (const key in baseObject) {
    if (key === "__proto__" || key === "constructor") {
      continue;
    }
    const value = baseObject[key];
    if (value === null || value === void 0) {
      continue;
    }
    if (merger && merger(object, key, value, namespace)) {
      continue;
    }
    if (Array.isArray(value) && Array.isArray(object[key])) {
      object[key] = [...value, ...object[key]];
    } else if (isObject(value) && isObject(object[key])) {
      object[key] = _defu(
        value,
        object[key],
        (namespace ? `${namespace}.` : "") + key.toString(),
        merger
      );
    } else {
      object[key] = value;
    }
  }
  return object;
}
function createDefu(merger) {
  return (...arguments_) => (
    // eslint-disable-next-line unicorn/no-array-reduce
    arguments_.reduce((p, c) => _defu(p, c, "", merger), {})
  );
}
const defu = createDefu();
function isPlainObject(obj) {
  return Object.prototype.toString.call(obj) === "[object Object]";
}
function isLogObj(arg) {
  if (!isPlainObject(arg)) {
    return false;
  }
  if (!arg.message && !arg.args) {
    return false;
  }
  if (arg.stack) {
    return false;
  }
  return true;
}
let paused = false;
const queue = [];
class Consola {
  constructor(options = {}) {
    const types2 = options.types || LogTypes;
    this.options = defu(
      {
        ...options,
        defaults: { ...options.defaults },
        level: _normalizeLogLevel(options.level, types2),
        reporters: [...options.reporters || []]
      },
      {
        types: LogTypes,
        throttle: 1e3,
        throttleMin: 5,
        formatOptions: {
          date: true,
          colors: false,
          compact: true
        }
      }
    );
    for (const type in types2) {
      const defaults2 = {
        type,
        ...this.options.defaults,
        ...types2[type]
      };
      this[type] = this._wrapLogFn(defaults2);
      this[type].raw = this._wrapLogFn(
        defaults2,
        true
      );
    }
    if (this.options.mockFn) {
      this.mockTypes();
    }
    this._lastLog = {};
  }
  get level() {
    return this.options.level;
  }
  set level(level) {
    this.options.level = _normalizeLogLevel(
      level,
      this.options.types,
      this.options.level
    );
  }
  prompt(message, opts) {
    if (!this.options.prompt) {
      throw new Error("prompt is not supported!");
    }
    return this.options.prompt(message, opts);
  }
  create(options) {
    const instance2 = new Consola({
      ...this.options,
      ...options
    });
    if (this._mockFn) {
      instance2.mockTypes(this._mockFn);
    }
    return instance2;
  }
  withDefaults(defaults2) {
    return this.create({
      ...this.options,
      defaults: {
        ...this.options.defaults,
        ...defaults2
      }
    });
  }
  withTag(tag) {
    return this.withDefaults({
      tag: this.options.defaults.tag ? this.options.defaults.tag + ":" + tag : tag
    });
  }
  addReporter(reporter) {
    this.options.reporters.push(reporter);
    return this;
  }
  removeReporter(reporter) {
    if (reporter) {
      const i = this.options.reporters.indexOf(reporter);
      if (i >= 0) {
        return this.options.reporters.splice(i, 1);
      }
    } else {
      this.options.reporters.splice(0);
    }
    return this;
  }
  setReporters(reporters) {
    this.options.reporters = Array.isArray(reporters) ? reporters : [reporters];
    return this;
  }
  wrapAll() {
    this.wrapConsole();
    this.wrapStd();
  }
  restoreAll() {
    this.restoreConsole();
    this.restoreStd();
  }
  wrapConsole() {
    for (const type in this.options.types) {
      if (!console["__" + type]) {
        console["__" + type] = console[type];
      }
      console[type] = this[type].raw;
    }
  }
  restoreConsole() {
    for (const type in this.options.types) {
      if (console["__" + type]) {
        console[type] = console["__" + type];
        delete console["__" + type];
      }
    }
  }
  wrapStd() {
    this._wrapStream(this.options.stdout, "log");
    this._wrapStream(this.options.stderr, "log");
  }
  _wrapStream(stream, type) {
    if (!stream) {
      return;
    }
    if (!stream.__write) {
      stream.__write = stream.write;
    }
    stream.write = (data) => {
      this[type].raw(String(data).trim());
    };
  }
  restoreStd() {
    this._restoreStream(this.options.stdout);
    this._restoreStream(this.options.stderr);
  }
  _restoreStream(stream) {
    if (!stream) {
      return;
    }
    if (stream.__write) {
      stream.write = stream.__write;
      delete stream.__write;
    }
  }
  pauseLogs() {
    paused = true;
  }
  resumeLogs() {
    paused = false;
    const _queue = queue.splice(0);
    for (const item of _queue) {
      item[0]._logFn(item[1], item[2]);
    }
  }
  mockTypes(mockFn) {
    const _mockFn = mockFn || this.options.mockFn;
    this._mockFn = _mockFn;
    if (typeof _mockFn !== "function") {
      return;
    }
    for (const type in this.options.types) {
      this[type] = _mockFn(type, this.options.types[type]) || this[type];
      this[type].raw = this[type];
    }
  }
  _wrapLogFn(defaults2, isRaw) {
    return (...args) => {
      if (paused) {
        queue.push([this, defaults2, args, isRaw]);
        return;
      }
      return this._logFn(defaults2, args, isRaw);
    };
  }
  _logFn(defaults2, args, isRaw) {
    if ((defaults2.level || 0) > this.level) {
      return false;
    }
    const logObj = {
      date: /* @__PURE__ */ new Date(),
      args: [],
      ...defaults2,
      level: _normalizeLogLevel(defaults2.level, this.options.types)
    };
    if (!isRaw && args.length === 1 && isLogObj(args[0])) {
      Object.assign(logObj, args[0]);
    } else {
      logObj.args = [...args];
    }
    if (logObj.message) {
      logObj.args.unshift(logObj.message);
      delete logObj.message;
    }
    if (logObj.additional) {
      if (!Array.isArray(logObj.additional)) {
        logObj.additional = logObj.additional.split("\n");
      }
      logObj.args.push("\n" + logObj.additional.join("\n"));
      delete logObj.additional;
    }
    logObj.type = typeof logObj.type === "string" ? logObj.type.toLowerCase() : "log";
    logObj.tag = typeof logObj.tag === "string" ? logObj.tag : "";
    const resolveLog = (newLog = false) => {
      const repeated = (this._lastLog.count || 0) - this.options.throttleMin;
      if (this._lastLog.object && repeated > 0) {
        const args2 = [...this._lastLog.object.args];
        if (repeated > 1) {
          args2.push(`(repeated ${repeated} times)`);
        }
        this._log({ ...this._lastLog.object, args: args2 });
        this._lastLog.count = 1;
      }
      if (newLog) {
        this._lastLog.object = logObj;
        this._log(logObj);
      }
    };
    clearTimeout(this._lastLog.timeout);
    const diffTime = this._lastLog.time && logObj.date ? logObj.date.getTime() - this._lastLog.time.getTime() : 0;
    this._lastLog.time = logObj.date;
    if (diffTime < this.options.throttle) {
      try {
        const serializedLog = JSON.stringify([
          logObj.type,
          logObj.tag,
          logObj.args
        ]);
        const isSameLog = this._lastLog.serialized === serializedLog;
        this._lastLog.serialized = serializedLog;
        if (isSameLog) {
          this._lastLog.count = (this._lastLog.count || 0) + 1;
          if (this._lastLog.count > this.options.throttleMin) {
            this._lastLog.timeout = setTimeout(
              resolveLog,
              this.options.throttle
            );
            return;
          }
        }
      } catch {
      }
    }
    resolveLog(true);
  }
  _log(logObj) {
    for (const reporter of this.options.reporters) {
      reporter.log(logObj, {
        options: this.options
      });
    }
  }
}
function _normalizeLogLevel(input, types2 = {}, defaultLevel = 3) {
  if (input === void 0) {
    return defaultLevel;
  }
  if (typeof input === "number") {
    return input;
  }
  if (types2[input] && types2[input].level !== void 0) {
    return types2[input].level;
  }
  return defaultLevel;
}
Consola.prototype.add = Consola.prototype.addReporter;
Consola.prototype.remove = Consola.prototype.removeReporter;
Consola.prototype.clear = Consola.prototype.removeReporter;
Consola.prototype.withScope = Consola.prototype.withTag;
Consola.prototype.mock = Consola.prototype.mockTypes;
Consola.prototype.pause = Consola.prototype.pauseLogs;
Consola.prototype.resume = Consola.prototype.resumeLogs;
function createConsola$1(options = {}) {
  return new Consola(options);
}
class BrowserReporter {
  constructor(options) {
    this.options = { ...options };
    this.defaultColor = "#7f8c8d";
    this.levelColorMap = {
      0: "#c0392b",
      // Red
      1: "#f39c12",
      // Yellow
      3: "#00BCD4"
      // Cyan
    };
    this.typeColorMap = {
      success: "#2ecc71"
      // Green
    };
  }
  _getLogFn(level) {
    if (level < 1) {
      return console.__error || console.error;
    }
    if (level === 1) {
      return console.__warn || console.warn;
    }
    return console.__log || console.log;
  }
  log(logObj) {
    const consoleLogFn = this._getLogFn(logObj.level);
    const type = logObj.type === "log" ? "" : logObj.type;
    const tag = logObj.tag || "";
    const color = this.typeColorMap[logObj.type] || this.levelColorMap[logObj.level] || this.defaultColor;
    const style = `
      background: ${color};
      border-radius: 0.5em;
      color: white;
      font-weight: bold;
      padding: 2px 0.5em;
    `;
    const badge = `%c${[tag, type].filter(Boolean).join(":")}`;
    if (typeof logObj.args[0] === "string") {
      consoleLogFn(
        `${badge}%c ${logObj.args[0]}`,
        style,
        // Empty string as style resets to default console style
        "",
        ...logObj.args.slice(1)
      );
    } else {
      consoleLogFn(badge, style, ...logObj.args);
    }
  }
}
function createConsola(options = {}) {
  const consola2 = createConsola$1({
    reporters: options.reporters || [new BrowserReporter({})],
    prompt(message, options2 = {}) {
      if (options2.type === "confirm") {
        return Promise.resolve(confirm(message));
      }
      return Promise.resolve(prompt(message));
    },
    ...options
  });
  return consola2;
}
createConsola();
const LogLevel = enumType(["trace", "debug", "info", "warn", "error", "fatal", "log"]);
function getLogger(logLevel, scope) {
  return getLoggerAdapterConsola(getLogLevel(logLevel), scope);
}
function getLoggerDefault() {
  return defaultLogger;
}
const getLoggerAdapterConsola = (logLevel, scope) => {
  const logger2 = createConsola({}).withTag(scope);
  let currentLevel = logLevel;
  const result = {
    log: logger2.log,
    info: logger2.info,
    debug: logger2.debug,
    trace: logger2.trace,
    warn: logger2.warn,
    error: logger2.error,
    fatal: logger2.fatal,
    setLogLevel: (level) => {
      let logLevel2 = NaN;
      level = getLogLevel(level);
      switch (level) {
        case LogLevel.enum.trace:
          logLevel2 = LogLevels.trace;
          break;
        case LogLevel.enum.debug:
          logLevel2 = LogLevels.debug;
          break;
        case LogLevel.enum.info:
          logLevel2 = LogLevels.info;
          break;
        case LogLevel.enum.warn:
          logLevel2 = LogLevels.warn;
          break;
        case LogLevel.enum.error:
          logLevel2 = LogLevels.error;
          break;
        case LogLevel.enum.fatal:
          logLevel2 = LogLevels.fatal;
          break;
        case LogLevel.enum.log:
          logLevel2 = LogLevels.log;
          break;
        default:
          throw new Error(`Invalid log level translation to consola's log level: ${level}`);
      }
      logger2.level = logLevel2;
      currentLevel = level;
    },
    getLogLevel: () => {
      return currentLevel;
    }
  };
  result.setLogLevel(logLevel);
  return result;
};
function getLogLevel(logLevel) {
  logLevel = logLevel || process.env.PROSOPO_LOG_LEVEL || "Info";
  logLevel = logLevel.toString().toLowerCase();
  try {
    return LogLevel.parse(logLevel);
  } catch (e) {
    throw new ProsopoEnvError("CONFIG.INVALID_LOG_LEVEL", { context: { logLevel } });
  }
}
const defaultLogger = getLoggerAdapterConsola(LogLevel.enum.info, "global");
const ARRAY_JOINER = "";
function arrayJoin(arr2, joiner) {
  return arr2.join(joiner ? joiner : ARRAY_JOINER);
}
function hexHash(data, bitLength) {
  return blake2AsHex(data, bitLength);
}
function hexHashArray(arr2) {
  return hexHash(arrayJoin(arr2));
}
function getPair(networkConfig, secret, account2, pairType, ss58Format) {
  if (networkConfig) {
    pairType = networkConfig.pairType;
    ss58Format = networkConfig.ss58Format;
  } else if (!pairType || !ss58Format) {
    throw new ProsopoEnvError("GENERAL.NO_PAIR_TYPE_OR_SS58_FORMAT");
  }
  const keyring = new Keyring({ type: pairType, ss58Format });
  if (!secret && account2) {
    return keyring.addFromAddress(account2);
  } else if (secret) {
    if (mnemonicValidate(secret)) {
      return keyring.addFromUri(secret);
    }
    if (isHex(secret)) {
      return keyring.addFromSeed(hexToU8a(secret));
    }
    if (secret.startsWith("//")) {
      return keyring.addFromUri(secret);
    }
    try {
      const json = JSON.parse(secret);
      const { encoding: { content } } = json;
      const keyring2 = new Keyring({ type: content[1], ss58Format });
      return keyring2.addFromJson(json);
    } catch (e) {
      throw new ProsopoEnvError("GENERAL.NO_MNEMONIC_OR_SEED");
    }
  } else {
    throw new ProsopoEnvError("GENERAL.NO_MNEMONIC_OR_SEED");
  }
}
function getReadOnlyPair(api, userAccount) {
  return getPair(void 0, void 0, userAccount || getZeroAddress(api).toHex(), NetworkPairTypeSchema.parse("sr25519"), api.registry.chainSS58);
}
function getZeroAddress(api) {
  return api.registry.createType("AccountId", new Uint8Array(new Array(32).fill(0)));
}
var dist = {};
var src = {};
var query = {};
var types = {};
var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod2) {
  return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
};
Object.defineProperty(types, "__esModule", { value: true });
types.ReturnNumber = types.ResultBuilder = types.Result = void 0;
var bn_js_1$1 = __importDefault(bnExports);
var Result2 = (
  /** @class */
  function() {
    function Result3(ok, err) {
      this.ok = ok;
      this.err = err;
    }
    Result3.prototype.unwrap = function() {
      if (this.ok) {
        return this.ok;
      }
      throw this.err;
    };
    Result3.prototype.unwrapRecursively = function() {
      if (this.ok) {
        if (this.ok instanceof Result3) {
          return this.ok.unwrapRecursively();
        }
        return this.ok;
      }
      if (this.err)
        throw this.err;
      return this.ok;
    };
    Result3.prototype.unwrapErr = function() {
      if (this.err) {
        return this.err;
      }
      return void 0;
    };
    return Result3;
  }()
);
types.Result = Result2;
var ResultBuilder = (
  /** @class */
  function() {
    function ResultBuilder2() {
    }
    ResultBuilder2.Ok = function(value) {
      return new Result2(value, void 0);
    };
    ResultBuilder2.Err = function(error2) {
      return new Result2(void 0, error2);
    };
    return ResultBuilder2;
  }()
);
types.ResultBuilder = ResultBuilder;
var ReturnNumber = (
  /** @class */
  function() {
    function ReturnNumber2(value) {
      if (typeof value == "string") {
        this.rawNumber = new bn_js_1$1.default(value.substring(2), 16);
      } else {
        this.rawNumber = new bn_js_1$1.default(value);
      }
    }
    ReturnNumber2.prototype.toString = function() {
      return this.rawNumber.toString();
    };
    ReturnNumber2.prototype.toHuman = function() {
      return this.toString();
    };
    ReturnNumber2.prototype.toNumber = function() {
      return this.rawNumber.toNumber();
    };
    ReturnNumber2.ToBN = function(value) {
      return new ReturnNumber2(value).rawNumber;
    };
    return ReturnNumber2;
  }()
);
types.ReturnNumber = ReturnNumber;
const require$$1 = /* @__PURE__ */ getAugmentedNamespace(util$1);
const EMPTY_SALT = new Uint8Array();
function withMeta(meta, creator) {
  creator.meta = meta;
  return creator;
}
function createBluePrintTx(meta, fn) {
  return withMeta(meta, (options, ...params) => fn(options, params));
}
function createBluePrintWithId(fn) {
  return (constructorOrId, options, ...params) => fn(constructorOrId, options, params);
}
function encodeSalt(salt = randomAsU8a()) {
  return salt instanceof Bytes ? salt : (salt == null ? void 0 : salt.length) ? compactAddLength(u8aToU8a(salt)) : EMPTY_SALT;
}
function convertWeight(weight) {
  const [refTime, proofSize] = isWeightV2(weight) ? [weight.refTime.toBn(), weight.proofSize.toBn()] : [bnToBn(weight), void 0];
  return {
    v1Weight: refTime,
    v2Weight: { proofSize, refTime }
  };
}
function isWeightV2(weight) {
  return !!weight.proofSize;
}
const util = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  EMPTY_SALT,
  convertWeight,
  createBluePrintTx,
  createBluePrintWithId,
  encodeSalt,
  isWeightV2,
  withMeta
}, Symbol.toStringTag, { value: "Module" }));
const require$$3 = /* @__PURE__ */ getAugmentedNamespace(util);
var __awaiter$1 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$1 = commonjsGlobal && commonjsGlobal.__generator || function(thisArg, body) {
  var _23 = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_23 = 0)), _23)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _23.label++;
            return { value: op[1], done: false };
          case 5:
            _23.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _23.ops.pop();
            _23.trys.pop();
            continue;
          default:
            if (!(t = _23.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _23 = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _23.label = op[1];
              break;
            }
            if (op[0] === 6 && _23.label < t[1]) {
              _23.label = t[1];
              t = op;
              break;
            }
            if (t && _23.label < t[2]) {
              _23.label = t[2];
              _23.ops.push(op);
              break;
            }
            if (t[2])
              _23.ops.pop();
            _23.trys.pop();
            continue;
        }
        op = body.call(thisArg, _23);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __spreadArray$1 = commonjsGlobal && commonjsGlobal.__spreadArray || function(to, from2, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l2 = from2.length, ar; i < l2; i++) {
      if (ar || !(i in from2)) {
        if (!ar)
          ar = Array.prototype.slice.call(from2, 0, i);
        ar[i] = from2[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from2));
};
Object.defineProperty(query, "__esModule", { value: true });
query.handleEventReturn = query.handleReturnType = query.queryOutput = query.queryOkJSON = query.queryJSON = query._genValidGasLimitAndValue = void 0;
var types_1 = types;
var util_1$1 = require$$1;
var bn_js_1 = bnExports;
var util_2 = require$$3;
var MAX_CALL_GAS$1 = new bn_js_1.BN(5e12).isub(util_1$1.BN_ONE);
function queryJSON(api, nativeContract, callerAddress, title, args, gasLimitAndValue, handler) {
  if (handler === void 0) {
    handler = function(json) {
      return json;
    };
  }
  return __awaiter$1(this, void 0, void 0, function() {
    var _a2, output3, gasConsumed, gasRequired, _value, error2;
    return __generator$1(this, function(_b) {
      switch (_b.label) {
        case 0:
          return [4, queryOutput(api, nativeContract, callerAddress, title, args, gasLimitAndValue)];
        case 1:
          _a2 = _b.sent(), output3 = _a2.output, gasConsumed = _a2.gasConsumed, gasRequired = _a2.gasRequired;
          _value = output3.toJSON();
          if (_value && typeof _value === "object") {
            if ("err" in _value) {
              error2 = {
                issue: "READ_ERR_IN_BODY",
                _err: _value.err
              };
              throw error2;
            }
            if ("ok" in _value)
              _value = _value.ok;
          }
          return [2, {
            value: handler(output3.toJSON()),
            gasConsumed,
            gasRequired
          }];
      }
    });
  });
}
query.queryJSON = queryJSON;
function queryOkJSON(api, nativeContract, callerAddress, title, args, gasLimitAndValue, handler) {
  if (handler === void 0) {
    handler = function(json) {
      return json;
    };
  }
  return __awaiter$1(this, void 0, void 0, function() {
    var _a2, output3, gasConsumed, gasRequired, _value, error2;
    return __generator$1(this, function(_b) {
      switch (_b.label) {
        case 0:
          return [4, queryOutput(api, nativeContract, callerAddress, title, args, gasLimitAndValue)];
        case 1:
          _a2 = _b.sent(), output3 = _a2.output, gasConsumed = _a2.gasConsumed, gasRequired = _a2.gasRequired;
          _value = output3.toJSON();
          if (_value == null || typeof _value !== "object") {
            error2 = {
              issue: "BODY_ISNT_OKERR",
              value: _value
            };
            throw error2;
          }
          return [2, {
            value: handler(_value),
            gasConsumed,
            gasRequired
          }];
      }
    });
  });
}
query.queryOkJSON = queryOkJSON;
function queryOutput(api, nativeContract, callerAddress, title, args, gasLimitAndValue) {
  return __awaiter$1(this, void 0, void 0, function() {
    var error_1, _args, _gasLimitAndValue, response, error2, caughtError_1, gasConsumed, result, output3, gasRequired;
    var _a2;
    return __generator$1(this, function(_b) {
      switch (_b.label) {
        case 0:
          nativeContract.address.toString();
          if (nativeContract.query[title] == null) {
            error_1 = {
              issue: "METHOD_DOESNT_EXIST",
              texts: ["Method name: '".concat(title, "'")]
            };
            throw error_1;
          }
          _args = args || [];
          return [4, _genValidGasLimitAndValue(api, gasLimitAndValue)];
        case 1:
          _gasLimitAndValue = _b.sent();
          _b.label = 2;
        case 2:
          _b.trys.push([2, 4, , 5]);
          return [4, (_a2 = nativeContract.query)[title].apply(_a2, __spreadArray$1([
            callerAddress,
            _gasLimitAndValue
          ], _args, false))];
        case 3:
          response = _b.sent();
          return [3, 5];
        case 4:
          caughtError_1 = _b.sent();
          error2 = {
            issue: "FAIL_AT_CALL",
            caughtError: caughtError_1
          };
          console.error("\nContract.queryString(".concat(title, ") error:"), "\n > error:", error2, "\n");
          throw error2;
        case 5:
          gasConsumed = response.gasConsumed, result = response.result, output3 = response.output, gasRequired = response.gasRequired;
          output3 ? output3.toString() : null;
          output3 ? output3.toJSON() : null;
          if (result.isErr)
            error2 = {
              issue: "FAIL_AFTER_CALL::IS_ERROR",
              _resultIsOk: result.isOk,
              _asError: result.isErr ? result.asErr : void 0
            };
          if (result.isOk === false)
            error2 = {
              issue: "FAIL_AFTER_CALL::RESULT_NOT_OK",
              _asError: result.isErr ? result.asErr : void 0
            };
          if (error2)
            throw error2;
          return [2, {
            output: output3,
            gasConsumed,
            gasRequired
          }];
      }
    });
  });
}
query.queryOutput = queryOutput;
function _genValidGasLimitAndValue(api, gasLimitAndValue) {
  return __awaiter$1(this, void 0, void 0, function() {
    var value, gasLimit;
    return __generator$1(this, function(_a2) {
      if (gasLimitAndValue == null) {
        return [2, {
          // eslint-disable-next-line @typescript-eslint/ban-ts-comment
          // @ts-ignore
          gasLimit: api.registry.createType("WeightV2", {
            refTime: (0, util_2.convertWeight)(api.consts.system.blockWeights ? api.consts.system.blockWeights.maxBlock : api.consts.system.maximumBlockWeight).v1Weight.muln(64).div(util_1$1.BN_HUNDRED),
            proofSize: MAX_CALL_GAS$1
          }),
          value: util_1$1.BN_ZERO
        }];
      }
      value = gasLimitAndValue.value, gasLimit = gasLimitAndValue.gasLimit;
      if (!value)
        value = util_1$1.BN_ZERO;
      if (gasLimit == null)
        gasLimit = api.registry.createType("WeightV2", {
          refTime: (0, util_2.convertWeight)(api.consts.system.blockWeights ? api.consts.system.blockWeights.maxBlock : api.consts.system.maximumBlockWeight).v1Weight.muln(64).div(util_1$1.BN_HUNDRED),
          proofSize: MAX_CALL_GAS$1
        });
      return [2, { value, gasLimit }];
    });
  });
}
query._genValidGasLimitAndValue = _genValidGasLimitAndValue;
function handleReturnType(result, typeDescription) {
  if (typeof result === "undefined" || typeof typeDescription === "undefined")
    return result;
  if (result === null || typeDescription == null)
    return result;
  if (typeDescription.isResult) {
    return new types_1.Result(handleReturnType(result.ok, typeDescription.body.ok), handleReturnType(result.err, typeDescription.body.err));
  }
  if (typeDescription.name === "ReturnNumber")
    return new types_1.ReturnNumber(result);
  if (typeof result !== "object" || typeof typeDescription !== "object" || typeDescription.isPrimitive)
    return result;
  if (typeDescription.name === "Array") {
    Object.entries(result).forEach(function(_a2) {
      var key = _a2[0], value = _a2[1];
      result[key] = handleReturnType(value, typeDescription.body[0]);
    });
    return result;
  }
  Object.entries(result).forEach(function(obj) {
    result[obj[0]] = handleReturnType(obj[1], typeDescription.body[obj[0]]);
  });
  return result;
}
query.handleReturnType = handleReturnType;
function handleEventReturn(result, eventDescription) {
  if (typeof result === "undefined")
    return result;
  Object.entries(result).forEach(function(obj) {
    result[obj[0]] = handleReturnType(obj[1], eventDescription.body[obj[0]]);
  });
  return result;
}
query.handleEventReturn = handleEventReturn;
var tx = {};
var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = commonjsGlobal && commonjsGlobal.__generator || function(thisArg, body) {
  var _23 = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_23 = 0)), _23)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _23.label++;
            return { value: op[1], done: false };
          case 5:
            _23.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _23.ops.pop();
            _23.trys.pop();
            continue;
          default:
            if (!(t = _23.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _23 = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _23.label = op[1];
              break;
            }
            if (op[0] === 6 && _23.label < t[1]) {
              _23.label = t[1];
              t = op;
              break;
            }
            if (t && _23.label < t[2]) {
              _23.label = t[2];
              _23.ops.push(op);
              break;
            }
            if (t[2])
              _23.ops.pop();
            _23.trys.pop();
            continue;
        }
        op = body.call(thisArg, _23);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __spreadArray = commonjsGlobal && commonjsGlobal.__spreadArray || function(to, from2, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l2 = from2.length, ar; i < l2; i++) {
      if (ar || !(i in from2)) {
        if (!ar)
          ar = Array.prototype.slice.call(from2, 0, i);
        ar[i] = from2[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from2));
};
Object.defineProperty(tx, "__esModule", { value: true });
tx._signAndSend = tx.buildSubmittableExtrinsic = tx.txSignAndSend = void 0;
var query_1 = query;
var util_1 = require$$1;
function txSignAndSend(nativeAPI, nativeContract, keyringPair, title, eventHandler, args, gasLimitAndValue) {
  return __awaiter(this, void 0, void 0, function() {
    var _gasLimitAndValue, _realGasLimit, estimatedGasLimit, estimatedGasLimitAndValue, submittableExtrinsic;
    var _a2;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          return [4, (0, query_1._genValidGasLimitAndValue)(nativeAPI, gasLimitAndValue)];
        case 1:
          _gasLimitAndValue = _b.sent();
          _realGasLimit = gasLimitAndValue || { gasLimit: void 0, value: void 0 };
          return [4, (_a2 = nativeContract.query)[title].apply(_a2, __spreadArray([
            keyringPair.address,
            _gasLimitAndValue
          ], args, false))];
        case 2:
          estimatedGasLimit = _b.sent().gasRequired;
          estimatedGasLimitAndValue = {
            gasLimit: _realGasLimit.gasLimit || estimatedGasLimit,
            value: _realGasLimit.value || util_1.BN_ZERO
          };
          submittableExtrinsic = buildSubmittableExtrinsic(nativeAPI, nativeContract, title, args, estimatedGasLimitAndValue);
          return [2, _signAndSend(nativeAPI.registry, submittableExtrinsic, keyringPair, eventHandler)];
      }
    });
  });
}
tx.txSignAndSend = txSignAndSend;
function buildSubmittableExtrinsic(api, nativeContract, title, args, gasLimitAndValue) {
  var _a2;
  if (nativeContract.tx[title] == null) {
    var error2 = {
      issue: "METHOD_DOESNT_EXIST",
      texts: ["Method name: '".concat(title, "'")]
    };
    throw error2;
  }
  var _args = args || [];
  var submittableExtrinsic = (_a2 = nativeContract.tx)[title].apply(_a2, __spreadArray([gasLimitAndValue], _args, false));
  return submittableExtrinsic;
}
tx.buildSubmittableExtrinsic = buildSubmittableExtrinsic;
function _signAndSend(registry, extrinsic, signer, eventHandler) {
  return __awaiter(this, void 0, void 0, function() {
    var signerAddress;
    return __generator(this, function(_a2) {
      signerAddress = signer.address;
      return [2, new Promise(function(resolve, reject) {
        var actionStatus = {
          from: signerAddress.toString(),
          txHash: extrinsic.hash.toHex()
        };
        extrinsic.signAndSend(signer, function(result) {
          if (result.status.isInBlock) {
            actionStatus.blockHash = result.status.asInBlock.toHex();
          }
          if (result.status.isFinalized || result.status.isInBlock) {
            actionStatus.events = eventHandler(result.events);
            result.events.filter(function(_a3) {
              var section2 = _a3.event.section;
              return section2 === "system";
            }).forEach(function(event) {
              var _a3 = event.event, data = _a3.data, method = _a3.method;
              if (method === "ExtrinsicFailed") {
                var dispatchError = data[0];
                var message = dispatchError.type;
                if (dispatchError.isModule) {
                  try {
                    var mod2 = dispatchError.asModule;
                    var error2 = registry.findMetaError(new Uint8Array([
                      mod2.index.toNumber(),
                      mod2.error.toNumber()
                    ]));
                    message = "".concat(error2.section, ".").concat(error2.name).concat(Array.isArray(error2.docs) ? "(".concat(error2.docs.join(""), ")") : error2.docs || "");
                  } catch (error3) {
                  }
                }
                actionStatus.error = {
                  message
                };
                reject(actionStatus);
              } else if (method === "ExtrinsicSuccess") {
                actionStatus.result = result;
                resolve(actionStatus);
              }
            });
          } else if (result.isError) {
            actionStatus.error = {
              data: result
            };
            actionStatus.events = void 0;
            reject(actionStatus);
          }
        }).catch(function(error2) {
          actionStatus.error = {
            message: error2.message
          };
          reject(actionStatus);
        });
      })];
    });
  });
}
tx._signAndSend = _signAndSend;
(function(exports) {
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m2, k, k2) {
    if (k2 === void 0)
      k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m2, k);
    if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m2[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m2, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m2[k];
  });
  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports2) {
    for (var p in m2)
      if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
        __createBinding(exports2, m2, p);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  __exportStar(query, exports);
  __exportStar(tx, exports);
  __exportStar(types, exports);
})(src);
/* @__PURE__ */ getDefaultExportFromCjs(src);
(function(exports) {
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m2, k, k2) {
    if (k2 === void 0)
      k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m2, k);
    if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m2[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m2, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m2[k];
  });
  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports2) {
    for (var p in m2)
      if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
        __createBinding(exports2, m2, p);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  __exportStar(src, exports);
})(dist);
/* @__PURE__ */ getDefaultExportFromCjs(dist);
let Methods$3 = class Methods {
  constructor(nativeContract, apiPromise) {
    this.__nativeContract = nativeContract;
    this.__apiPromise = apiPromise;
  }
  getGitCommitId(__options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getGitCommitId", [], __options);
  }
  getAdmin(__options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getAdmin", [], __options);
  }
  getPayees(__options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getPayees", [], __options);
  }
  getDappPayees(__options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getDappPayees", [], __options);
  }
  getStatuses(__options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getStatuses", [], __options);
  }
  getProviderStakeThreshold(__options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getProviderStakeThreshold", [], __options);
  }
  getDappStakeThreshold(__options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getDappStakeThreshold", [], __options);
  }
  getMaxProviderFee(__options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getMaxProviderFee", [], __options);
  }
  getMinNumActiveProviders(__options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getMinNumActiveProviders", [], __options);
  }
  getBlockTime(__options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getBlockTime", [], __options);
  }
  getMaxUserHistoryAgeSeconds(__options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getMaxUserHistoryAgeSeconds", [], __options);
  }
  getMaxUserHistoryLen(__options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getMaxUserHistoryLen", [], __options);
  }
  getMaxUserHistoryAgeBlocks(__options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getMaxUserHistoryAgeBlocks", [], __options);
  }
  providerRegister(url, fee, payee, __options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "providerRegister", [url, fee, payee], __options);
  }
  providerUpdate(url, fee, payee, __options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "providerUpdate", [url, fee, payee], __options);
  }
  providerDeactivate(__options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "providerDeactivate", [], __options);
  }
  providerDeregister(__options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "providerDeregister", [], __options);
  }
  getProvider(account2, __options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getProvider", [account2], __options);
  }
  providerFund(__options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "providerFund", [], __options);
  }
  providerSetDataset(datasetId, datasetIdContent, __options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "providerSetDataset", [datasetId, datasetIdContent], __options);
  }
  getDapp(contract, __options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getDapp", [contract], __options);
  }
  dappRegister(contract, payee, __options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "dappRegister", [contract, payee], __options);
  }
  dappUpdate(contract, payee, owner, __options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "dappUpdate", [contract, payee, owner], __options);
  }
  dappFund(contract, __options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "dappFund", [contract], __options);
  }
  dappDeregister(contract, __options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "dappDeregister", [contract], __options);
  }
  dappDeactivate(contract, __options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "dappDeactivate", [contract], __options);
  }
  getUserHistorySummary(userAccount, __options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getUserHistorySummary", [userAccount], __options);
  }
  providerCommit(commit, __options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "providerCommit", [commit], __options);
  }
  providerCommitMany(commits, __options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "providerCommitMany", [commits], __options);
  }
  dappOperatorIsHumanUser(userAccount, threshold, __options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "dappOperatorIsHumanUser", [userAccount, threshold], __options);
  }
  dappOperatorLastCorrectCaptcha(userAccount, __options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "dappOperatorLastCorrectCaptcha", [userAccount], __options);
  }
  getUser(userAccount, __options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getUser", [userAccount], __options);
  }
  getCommit(commitId, __options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getCommit", [commitId], __options);
  }
  listProvidersByAccounts(providerAccounts, __options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "listProvidersByAccounts", [providerAccounts], __options);
  }
  listProvidersByStatus(statuses, __options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "listProvidersByStatus", [statuses], __options);
  }
  getRandomActiveProvider(userAccount, dappContract, __options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getRandomActiveProvider", [userAccount, dappContract], __options);
  }
  getAllProviderAccounts(__options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getAllProviderAccounts", [], __options);
  }
  getRandomNumber(len, userAccount, dappContract, __options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getRandomNumber", [len, userAccount, dappContract], __options);
  }
  terminate(__options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "terminate", [], __options);
  }
  withdraw(amount, __options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "withdraw", [amount], __options);
  }
  setCodeHash(codeHash, __options) {
    return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "setCodeHash", [codeHash], __options);
  }
};
const ContractAbi = `{"source":{"hash":"0x891f991baa16b64eb504aad95e630d2254e3b1b50625cb659cac93e87f7cf5cf","language":"ink! 4.3.0","compiler":"rustc 1.69.0","build_info":{"build_mode":"Debug","cargo_contract_version":"3.0.1","rust_toolchain":"stable-x86_64-unknown-linux-gnu","wasm_opt_settings":{"keep_debug_symbols":false,"optimization_passes":"Z"}}},"contract":{"name":"captcha","version":"0.2.30","authors":["Chris Taylor <chris@prosopo.io>","George Oastler <george@prosopo.io>","Vincenzo Ferrara","Siniša Čanak"]},"spec":{"constructors":[{"args":[],"default":false,"docs":["Constructor"],"label":"new","payable":true,"returnType":{"displayName":["ink_primitives","ConstructorResult"],"type":10},"selector":"0x9bae9d5e"},{"args":[],"default":false,"docs":[],"label":"new_panic","payable":false,"returnType":{"displayName":["ink_primitives","ConstructorResult"],"type":15},"selector":"0x794560e8"}],"docs":[],"environment":{"accountId":{"displayName":["AccountId"],"type":7},"balance":{"displayName":["Balance"],"type":0},"blockNumber":{"displayName":["BlockNumber"],"type":1},"chainExtension":{"displayName":["ChainExtension"],"type":65},"hash":{"displayName":["Hash"],"type":4},"maxEventTopics":4,"timestamp":{"displayName":["Timestamp"],"type":64}},"events":[],"lang_error":{"displayName":["ink","LangError"],"type":14},"messages":[{"args":[],"default":false,"docs":[" Get the git commit id from when this contract was built"],"label":"get_git_commit_id","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":16},"selector":"0x3685e994"},{"args":[],"default":false,"docs":[" the admin which can control this contract. set to author/instantiator by default"],"label":"get_admin","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":18},"selector":"0x57b8a8a7"},{"args":[],"default":false,"docs":[" Get all payee options"],"label":"get_payees","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":19},"selector":"0xf334a6d7"},{"args":[],"default":false,"docs":[" Get all dapp payee options"],"label":"get_dapp_payees","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":22},"selector":"0xcce851af"},{"args":[],"default":false,"docs":[" Get all status options"],"label":"get_statuses","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":25},"selector":"0xd39608f0"},{"args":[],"default":false,"docs":[" Get contract provider minimum stake default."],"label":"get_provider_stake_threshold","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":28},"selector":"0x3e7e8941"},{"args":[],"default":false,"docs":[" Get contract dapp minimum stake default."],"label":"get_dapp_stake_threshold","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":28},"selector":"0xc9834fee"},{"args":[],"default":false,"docs":[" the maximum fee a provider can charge for a commit"],"label":"get_max_provider_fee","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":29},"selector":"0xd799cf93"},{"args":[],"default":false,"docs":[" the minimum number of providers needed for the contract to function"],"label":"get_min_num_active_providers","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":30},"selector":"0xa200bea1"},{"args":[],"default":false,"docs":[" the time to complete a block, 6 seconds by default"],"label":"get_block_time","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":30},"selector":"0x8d3f151d"},{"args":[],"default":false,"docs":[" the max age of a commit for a user before it is removed from the history, in seconds"],"label":"get_max_user_history_age_seconds","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":29},"selector":"0xcab4fa0a"},{"args":[],"default":false,"docs":[" the max number of commits stored for a single user"],"label":"get_max_user_history_len","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":30},"selector":"0xfb715e71"},{"args":[],"default":false,"docs":[" the max age of a commit for a user before it is removed from the history, in blocks"],"label":"get_max_user_history_age_blocks","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":29},"selector":"0x6f3337c3"},{"args":[{"label":"url","type":{"displayName":["Vec"],"type":2}},{"label":"fee","type":{"displayName":["u32"],"type":1}},{"label":"payee","type":{"displayName":["Payee"],"type":21}}],"default":false,"docs":[" Register a provider, their url and fee"],"label":"provider_register","mutates":true,"payable":true,"returnType":{"displayName":["ink","MessageResult"],"type":10},"selector":"0xc66f9a2a"},{"args":[{"label":"url","type":{"displayName":["Vec"],"type":2}},{"label":"fee","type":{"displayName":["u32"],"type":1}},{"label":"payee","type":{"displayName":["Payee"],"type":21}}],"default":false,"docs":[" Update an existing provider, their url, fee and deposit funds"],"label":"provider_update","mutates":true,"payable":true,"returnType":{"displayName":["ink","MessageResult"],"type":10},"selector":"0xd2f70de8"},{"args":[],"default":false,"docs":[" De-activate a provider by setting their status to Deactivated"],"label":"provider_deactivate","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":10},"selector":"0xa65232da"},{"args":[],"default":false,"docs":[" Unstake and deactivate the provider's service, returning stake"],"label":"provider_deregister","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":10},"selector":"0x5eff53cf"},{"args":[{"label":"account","type":{"displayName":["AccountId"],"type":7}}],"default":false,"docs":[" Get an existing provider"],"label":"get_provider","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":32},"selector":"0x457c7444"},{"args":[],"default":false,"docs":[" Fund a provider"],"label":"provider_fund","mutates":true,"payable":true,"returnType":{"displayName":["ink","MessageResult"],"type":10},"selector":"0x54ee83bb"},{"args":[{"label":"dataset_id","type":{"displayName":["Hash"],"type":4}},{"label":"dataset_id_content","type":{"displayName":["Hash"],"type":4}}],"default":false,"docs":[" Add a new data set"],"label":"provider_set_dataset","mutates":true,"payable":true,"returnType":{"displayName":["ink","MessageResult"],"type":10},"selector":"0xb0e7ab99"},{"args":[{"label":"contract","type":{"displayName":["AccountId"],"type":7}}],"default":false,"docs":[" Get an existing dapp"],"label":"get_dapp","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":35},"selector":"0xf96477c0"},{"args":[{"label":"contract","type":{"displayName":["AccountId"],"type":7}},{"label":"payee","type":{"displayName":["DappPayee"],"type":24}}],"default":false,"docs":[" Register a dapp"],"label":"dapp_register","mutates":true,"payable":true,"returnType":{"displayName":["ink","MessageResult"],"type":10},"selector":"0x42b45efa"},{"args":[{"label":"contract","type":{"displayName":["AccountId"],"type":7}},{"label":"payee","type":{"displayName":["DappPayee"],"type":24}},{"label":"owner","type":{"displayName":["AccountId"],"type":7}}],"default":false,"docs":[" Update a dapp with new funds, setting status as appropriate"],"label":"dapp_update","mutates":true,"payable":true,"returnType":{"displayName":["ink","MessageResult"],"type":10},"selector":"0x5dbfa904"},{"args":[{"label":"contract","type":{"displayName":["AccountId"],"type":7}}],"default":false,"docs":[" Fund dapp account to pay for services, if the Dapp caller is registered in self.dapps"],"label":"dapp_fund","mutates":true,"payable":true,"returnType":{"displayName":["ink","MessageResult"],"type":10},"selector":"0x55da62a9"},{"args":[{"label":"contract","type":{"displayName":["AccountId"],"type":7}}],"default":false,"docs":[" Cancel services as a dapp, returning remaining tokens"],"label":"dapp_deregister","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":10},"selector":"0xdc7da4d5"},{"args":[{"label":"contract","type":{"displayName":["AccountId"],"type":7}}],"default":false,"docs":[" Deactivate a dapp, leaving stake intact"],"label":"dapp_deactivate","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":10},"selector":"0x94718d6f"},{"args":[{"label":"user_account","type":{"displayName":["AccountId"],"type":7}}],"default":false,"docs":[],"label":"get_user_history_summary","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":38},"selector":"0x3be12ad6"},{"args":[{"label":"commit","type":{"displayName":["Commit"],"type":41}}],"default":false,"docs":[" Provider submits a captcha solution commitment"],"label":"provider_commit","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":10},"selector":"0x57876316"},{"args":[{"label":"commits","type":{"displayName":["Vec"],"type":44}}],"default":false,"docs":[" Provider submits 0-many captcha solution commitments"],"label":"provider_commit_many","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":10},"selector":"0xc8d4b3b2"},{"args":[{"label":"user_account","type":{"displayName":["AccountId"],"type":7}},{"label":"threshold","type":{"displayName":["u8"],"type":3}}],"default":false,"docs":[" Checks if the user is a human (true) as they have a solution rate higher than a % threshold or a bot (false)"," Threshold is decided by the calling user"," Threshold is between 0-200, i.e. 0-100% in 0.5% increments. E.g. 100 = 50%, 200 = 100%, 0 = 0%, 50 = 25%, etc."],"label":"dapp_operator_is_human_user","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":45},"selector":"0xbe7b6ef9"},{"args":[{"label":"user_account","type":{"displayName":["AccountId"],"type":7}}],"default":false,"docs":[" Get the last correct captcha for a user"],"label":"dapp_operator_last_correct_captcha","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":48},"selector":"0xbe930f18"},{"args":[{"label":"user_account","type":{"displayName":["AccountId"],"type":7}}],"default":false,"docs":[" Get a dapp user",""," Returns an error if the user does not exist"],"label":"get_user","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":51},"selector":"0xa4ca534e"},{"args":[{"label":"commit_id","type":{"displayName":["Hash"],"type":4}}],"default":false,"docs":[" Get a solution commitment",""," Returns an error if the commitment does not exist"],"label":"get_commit","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":54},"selector":"0x5329f551"},{"args":[{"label":"provider_accounts","type":{"displayName":["Vec"],"type":8}}],"default":false,"docs":[" List providers given an array of account id",""," Returns empty if none were matched"],"label":"list_providers_by_accounts","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":56},"selector":"0x52f0d2cb"},{"args":[{"label":"statuses","type":{"displayName":["Vec"],"type":26}}],"default":false,"docs":[" List providers given an array of status",""," Returns empty if none were matched"],"label":"list_providers_by_status","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":56},"selector":"0x54b28ab4"},{"args":[{"label":"user_account","type":{"displayName":["AccountId"],"type":7}},{"label":"dapp_contract","type":{"displayName":["AccountId"],"type":7}}],"default":false,"docs":[" Get a random active provider",""," Returns error if no active provider is found"],"label":"get_random_active_provider","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":59},"selector":"0x4aee5bad"},{"args":[],"default":false,"docs":[" Get the AccountIds of all Providers ever registered",""," Returns {Vec<AccountId>}"],"label":"get_all_provider_accounts","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":62},"selector":"0x5052021f"},{"args":[{"label":"len","type":{"displayName":["u128"],"type":0}},{"label":"user_account","type":{"displayName":["AccountId"],"type":7}},{"label":"dapp_contract","type":{"displayName":["AccountId"],"type":7}}],"default":false,"docs":[" Get a random number from 0 to \`len\` - 1 inclusive. The user account is added to the seed for additional random entropy."],"label":"get_random_number","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":28},"selector":"0x2306aecd"},{"args":[],"default":false,"docs":[" Terminate this contract and return any/all funds in this contract to the destination"],"label":"terminate","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":10},"selector":"0x476d839f"},{"args":[{"label":"amount","type":{"displayName":["Balance"],"type":0}}],"default":false,"docs":[" Withdraw some funds from the contract to the specified destination"],"label":"withdraw","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":10},"selector":"0x410fcc9d"},{"args":[{"label":"code_hash","type":{"displayName":[],"type":5}}],"default":false,"docs":[" Set the code hash for this contract"],"label":"set_code_hash","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":10},"selector":"0x9e5c5758"}]},"storage":{"root":{"layout":{"struct":{"fields":[{"layout":{"root":{"layout":{"struct":{"fields":[{"layout":{"enum":{"dispatchKey":"0x31f906a7","name":"GovernanceStatus","variants":{"0":{"fields":[],"name":"Active"},"1":{"fields":[],"name":"Inactive"}}}},"name":"status"},{"layout":{"leaf":{"key":"0x31f906a7","ty":0}},"name":"balance"},{"layout":{"leaf":{"key":"0x31f906a7","ty":1}},"name":"fee"},{"layout":{"enum":{"dispatchKey":"0x31f906a7","name":"Payee","variants":{"0":{"fields":[],"name":"Provider"},"1":{"fields":[],"name":"Dapp"}}}},"name":"payee"},{"layout":{"leaf":{"key":"0x31f906a7","ty":2}},"name":"url"},{"layout":{"leaf":{"key":"0x31f906a7","ty":4}},"name":"dataset_id"},{"layout":{"leaf":{"key":"0x31f906a7","ty":4}},"name":"dataset_id_content"}],"name":"Provider"}},"root_key":"0x31f906a7"}},"name":"providers"},{"layout":{"root":{"layout":{"leaf":{"key":"0x25c2603c","ty":6}},"root_key":"0x25c2603c"}},"name":"provider_accounts"},{"layout":{"root":{"layout":{"leaf":{"key":"0xd1b08cc7","ty":7}},"root_key":"0xd1b08cc7"}},"name":"urls"},{"layout":{"root":{"layout":{"struct":{"fields":[{"layout":{"enum":{"dispatchKey":"0x14493d1d","name":"GovernanceStatus","variants":{"0":{"fields":[],"name":"Active"},"1":{"fields":[],"name":"Inactive"}}}},"name":"status"},{"layout":{"leaf":{"key":"0x14493d1d","ty":0}},"name":"balance"},{"layout":{"leaf":{"key":"0x14493d1d","ty":7}},"name":"owner"},{"layout":{"enum":{"dispatchKey":"0x14493d1d","name":"DappPayee","variants":{"0":{"fields":[],"name":"Provider"},"1":{"fields":[],"name":"Dapp"},"2":{"fields":[],"name":"Any"}}}},"name":"payee"}],"name":"Dapp"}},"root_key":"0x14493d1d"}},"name":"dapps"},{"layout":{"root":{"layout":{"leaf":{"key":"0x455ca62f","ty":6}},"root_key":"0x455ca62f"}},"name":"dapp_contracts"},{"layout":{"root":{"layout":{"struct":{"fields":[{"layout":{"leaf":{"key":"0x81a766df","ty":4}},"name":"id"},{"layout":{"leaf":{"key":"0x81a766df","ty":7}},"name":"user_account"},{"layout":{"leaf":{"key":"0x81a766df","ty":4}},"name":"dataset_id"},{"layout":{"enum":{"dispatchKey":"0x81a766df","name":"CaptchaStatus","variants":{"0":{"fields":[],"name":"Pending"},"1":{"fields":[],"name":"Approved"},"2":{"fields":[],"name":"Disapproved"}}}},"name":"status"},{"layout":{"leaf":{"key":"0x81a766df","ty":7}},"name":"dapp_contract"},{"layout":{"leaf":{"key":"0x81a766df","ty":7}},"name":"provider_account"},{"layout":{"leaf":{"key":"0x81a766df","ty":1}},"name":"requested_at"},{"layout":{"leaf":{"key":"0x81a766df","ty":1}},"name":"completed_at"},{"layout":{"array":{"layout":{"leaf":{"key":"0x81a766df","ty":3}},"len":64,"offset":"0x81a766df"}},"name":"user_signature"}],"name":"Commit"}},"root_key":"0x81a766df"}},"name":"commits"},{"layout":{"root":{"layout":{"struct":{"fields":[{"layout":{"leaf":{"key":"0x5a3119c3","ty":9}},"name":"history"}],"name":"User"}},"root_key":"0x5a3119c3"}},"name":"users"},{"layout":{"root":{"layout":{"leaf":{"key":"0x43f9649b","ty":6}},"root_key":"0x43f9649b"}},"name":"user_accounts"}],"name":"Captcha"}},"root_key":"0xabcdef01"}},"types":[{"id":0,"type":{"def":{"primitive":"u128"}}},{"id":1,"type":{"def":{"primitive":"u32"}}},{"id":2,"type":{"def":{"sequence":{"type":3}}}},{"id":3,"type":{"def":{"primitive":"u8"}}},{"id":4,"type":{"def":{"composite":{"fields":[{"type":5,"typeName":"[u8; 32]"}]}},"path":["ink_primitives","types","Hash"]}},{"id":5,"type":{"def":{"array":{"len":32,"type":3}}}},{"id":6,"type":{"def":{"composite":{"fields":[{"type":8}]}},"params":[{"name":"T","type":7}],"path":["BTreeSet"]}},{"id":7,"type":{"def":{"composite":{"fields":[{"type":5,"typeName":"[u8; 32]"}]}},"path":["ink_primitives","types","AccountId"]}},{"id":8,"type":{"def":{"sequence":{"type":7}}}},{"id":9,"type":{"def":{"sequence":{"type":4}}}},{"id":10,"type":{"def":{"variant":{"variants":[{"fields":[{"type":11}],"index":0,"name":"Ok"},{"fields":[{"type":14}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":11},{"name":"E","type":14}],"path":["Result"]}},{"id":11,"type":{"def":{"variant":{"variants":[{"fields":[{"type":12}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":12},{"name":"E","type":13}],"path":["Result"]}},{"id":12,"type":{"def":{"tuple":[]}}},{"id":13,"type":{"def":{"variant":{"variants":[{"index":0,"name":"NotAuthorised"},{"index":1,"name":"TransferFailed"},{"index":2,"name":"SetCodeHashFailed"},{"index":3,"name":"InvalidDestination"},{"index":4,"name":"UnknownMessage"},{"index":5,"name":"ProviderAccountExists"},{"index":6,"name":"ProviderExists"},{"index":7,"name":"ProviderAccountDoesNotExist"},{"index":8,"name":"ProviderDoesNotExist"},{"index":9,"name":"ProviderInsufficientFunds"},{"index":10,"name":"ProviderInactive"},{"index":11,"name":"ProviderUrlUsed"},{"index":12,"name":"DappExists"},{"index":13,"name":"DappDoesNotExist"},{"index":14,"name":"DappInactive"},{"index":15,"name":"DappInsufficientFunds"},{"index":16,"name":"CaptchaDataDoesNotExist"},{"index":17,"name":"CommitDoesNotExist"},{"index":18,"name":"DappUserDoesNotExist"},{"index":19,"name":"NoActiveProviders"},{"index":20,"name":"DatasetIdSolutionsSame"},{"index":21,"name":"CodeNotFound"},{"index":22,"name":"Unknown"},{"index":23,"name":"InvalidContract"},{"index":24,"name":"InvalidPayee"},{"index":25,"name":"InvalidCaptchaStatus"},{"index":26,"name":"NoCorrectCaptcha"},{"index":27,"name":"NotEnoughActiveProviders"},{"index":28,"name":"ProviderFeeTooHigh"},{"index":29,"name":"CommitAlreadyExists"},{"index":30,"name":"NotAuthor"},{"index":31,"name":"Math"}]}},"path":["common","common","Error"]}},{"id":14,"type":{"def":{"variant":{"variants":[{"index":1,"name":"CouldNotReadInput"}]}},"path":["ink_primitives","LangError"]}},{"id":15,"type":{"def":{"variant":{"variants":[{"fields":[{"type":12}],"index":0,"name":"Ok"},{"fields":[{"type":14}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":12},{"name":"E","type":14}],"path":["Result"]}},{"id":16,"type":{"def":{"variant":{"variants":[{"fields":[{"type":17}],"index":0,"name":"Ok"},{"fields":[{"type":14}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":17},{"name":"E","type":14}],"path":["Result"]}},{"id":17,"type":{"def":{"array":{"len":20,"type":3}}}},{"id":18,"type":{"def":{"variant":{"variants":[{"fields":[{"type":7}],"index":0,"name":"Ok"},{"fields":[{"type":14}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":7},{"name":"E","type":14}],"path":["Result"]}},{"id":19,"type":{"def":{"variant":{"variants":[{"fields":[{"type":20}],"index":0,"name":"Ok"},{"fields":[{"type":14}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":20},{"name":"E","type":14}],"path":["Result"]}},{"id":20,"type":{"def":{"sequence":{"type":21}}}},{"id":21,"type":{"def":{"variant":{"variants":[{"index":0,"name":"Provider"},{"index":1,"name":"Dapp"}]}},"path":["captcha","captcha","Payee"]}},{"id":22,"type":{"def":{"variant":{"variants":[{"fields":[{"type":23}],"index":0,"name":"Ok"},{"fields":[{"type":14}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":23},{"name":"E","type":14}],"path":["Result"]}},{"id":23,"type":{"def":{"sequence":{"type":24}}}},{"id":24,"type":{"def":{"variant":{"variants":[{"index":0,"name":"Provider"},{"index":1,"name":"Dapp"},{"index":2,"name":"Any"}]}},"path":["captcha","captcha","DappPayee"]}},{"id":25,"type":{"def":{"variant":{"variants":[{"fields":[{"type":26}],"index":0,"name":"Ok"},{"fields":[{"type":14}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":26},{"name":"E","type":14}],"path":["Result"]}},{"id":26,"type":{"def":{"sequence":{"type":27}}}},{"id":27,"type":{"def":{"variant":{"variants":[{"index":0,"name":"Active"},{"index":1,"name":"Inactive"}]}},"path":["captcha","captcha","GovernanceStatus"]}},{"id":28,"type":{"def":{"variant":{"variants":[{"fields":[{"type":0}],"index":0,"name":"Ok"},{"fields":[{"type":14}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":0},{"name":"E","type":14}],"path":["Result"]}},{"id":29,"type":{"def":{"variant":{"variants":[{"fields":[{"type":1}],"index":0,"name":"Ok"},{"fields":[{"type":14}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":1},{"name":"E","type":14}],"path":["Result"]}},{"id":30,"type":{"def":{"variant":{"variants":[{"fields":[{"type":31}],"index":0,"name":"Ok"},{"fields":[{"type":14}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":31},{"name":"E","type":14}],"path":["Result"]}},{"id":31,"type":{"def":{"primitive":"u16"}}},{"id":32,"type":{"def":{"variant":{"variants":[{"fields":[{"type":33}],"index":0,"name":"Ok"},{"fields":[{"type":14}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":33},{"name":"E","type":14}],"path":["Result"]}},{"id":33,"type":{"def":{"variant":{"variants":[{"fields":[{"type":34}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":34},{"name":"E","type":13}],"path":["Result"]}},{"id":34,"type":{"def":{"composite":{"fields":[{"name":"status","type":27,"typeName":"GovernanceStatus"},{"name":"balance","type":0,"typeName":"Balance"},{"name":"fee","type":1,"typeName":"u32"},{"name":"payee","type":21,"typeName":"Payee"},{"name":"url","type":2,"typeName":"Vec<u8>"},{"name":"dataset_id","type":4,"typeName":"Hash"},{"name":"dataset_id_content","type":4,"typeName":"Hash"}]}},"path":["captcha","captcha","Provider"]}},{"id":35,"type":{"def":{"variant":{"variants":[{"fields":[{"type":36}],"index":0,"name":"Ok"},{"fields":[{"type":14}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":36},{"name":"E","type":14}],"path":["Result"]}},{"id":36,"type":{"def":{"variant":{"variants":[{"fields":[{"type":37}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":37},{"name":"E","type":13}],"path":["Result"]}},{"id":37,"type":{"def":{"composite":{"fields":[{"name":"status","type":27,"typeName":"GovernanceStatus"},{"name":"balance","type":0,"typeName":"Balance"},{"name":"owner","type":7,"typeName":"AccountId"},{"name":"payee","type":24,"typeName":"DappPayee"}]}},"path":["captcha","captcha","Dapp"]}},{"id":38,"type":{"def":{"variant":{"variants":[{"fields":[{"type":39}],"index":0,"name":"Ok"},{"fields":[{"type":14}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":39},{"name":"E","type":14}],"path":["Result"]}},{"id":39,"type":{"def":{"variant":{"variants":[{"fields":[{"type":40}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":40},{"name":"E","type":13}],"path":["Result"]}},{"id":40,"type":{"def":{"composite":{"fields":[{"name":"correct","type":31,"typeName":"u16"},{"name":"incorrect","type":31,"typeName":"u16"},{"name":"score","type":3,"typeName":"u8"}]}},"path":["captcha","captcha","UserHistorySummary"]}},{"id":41,"type":{"def":{"composite":{"fields":[{"name":"id","type":4,"typeName":"Hash"},{"name":"user_account","type":7,"typeName":"AccountId"},{"name":"dataset_id","type":4,"typeName":"Hash"},{"name":"status","type":42,"typeName":"CaptchaStatus"},{"name":"dapp_contract","type":7,"typeName":"AccountId"},{"name":"provider_account","type":7,"typeName":"AccountId"},{"name":"requested_at","type":1,"typeName":"BlockNumber"},{"name":"completed_at","type":1,"typeName":"BlockNumber"},{"name":"user_signature","type":43,"typeName":"[u8; 64]"}]}},"path":["captcha","captcha","Commit"]}},{"id":42,"type":{"def":{"variant":{"variants":[{"index":0,"name":"Pending"},{"index":1,"name":"Approved"},{"index":2,"name":"Disapproved"}]}},"path":["captcha","captcha","CaptchaStatus"]}},{"id":43,"type":{"def":{"array":{"len":64,"type":3}}}},{"id":44,"type":{"def":{"sequence":{"type":41}}}},{"id":45,"type":{"def":{"variant":{"variants":[{"fields":[{"type":46}],"index":0,"name":"Ok"},{"fields":[{"type":14}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":46},{"name":"E","type":14}],"path":["Result"]}},{"id":46,"type":{"def":{"variant":{"variants":[{"fields":[{"type":47}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":47},{"name":"E","type":13}],"path":["Result"]}},{"id":47,"type":{"def":{"primitive":"bool"}}},{"id":48,"type":{"def":{"variant":{"variants":[{"fields":[{"type":49}],"index":0,"name":"Ok"},{"fields":[{"type":14}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":49},{"name":"E","type":14}],"path":["Result"]}},{"id":49,"type":{"def":{"variant":{"variants":[{"fields":[{"type":50}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":50},{"name":"E","type":13}],"path":["Result"]}},{"id":50,"type":{"def":{"composite":{"fields":[{"name":"before","type":1,"typeName":"BlockNumber"},{"name":"dapp_contract","type":7,"typeName":"AccountId"}]}},"path":["captcha","captcha","LastCorrectCaptcha"]}},{"id":51,"type":{"def":{"variant":{"variants":[{"fields":[{"type":52}],"index":0,"name":"Ok"},{"fields":[{"type":14}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":52},{"name":"E","type":14}],"path":["Result"]}},{"id":52,"type":{"def":{"variant":{"variants":[{"fields":[{"type":53}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":53},{"name":"E","type":13}],"path":["Result"]}},{"id":53,"type":{"def":{"composite":{"fields":[{"name":"history","type":9,"typeName":"Vec<Hash>"}]}},"path":["captcha","captcha","User"]}},{"id":54,"type":{"def":{"variant":{"variants":[{"fields":[{"type":55}],"index":0,"name":"Ok"},{"fields":[{"type":14}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":55},{"name":"E","type":14}],"path":["Result"]}},{"id":55,"type":{"def":{"variant":{"variants":[{"fields":[{"type":41}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":41},{"name":"E","type":13}],"path":["Result"]}},{"id":56,"type":{"def":{"variant":{"variants":[{"fields":[{"type":57}],"index":0,"name":"Ok"},{"fields":[{"type":14}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":57},{"name":"E","type":14}],"path":["Result"]}},{"id":57,"type":{"def":{"variant":{"variants":[{"fields":[{"type":58}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":58},{"name":"E","type":13}],"path":["Result"]}},{"id":58,"type":{"def":{"sequence":{"type":34}}}},{"id":59,"type":{"def":{"variant":{"variants":[{"fields":[{"type":60}],"index":0,"name":"Ok"},{"fields":[{"type":14}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":60},{"name":"E","type":14}],"path":["Result"]}},{"id":60,"type":{"def":{"variant":{"variants":[{"fields":[{"type":61}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":61},{"name":"E","type":13}],"path":["Result"]}},{"id":61,"type":{"def":{"composite":{"fields":[{"name":"provider_account","type":7,"typeName":"AccountId"},{"name":"provider","type":34,"typeName":"Provider"},{"name":"block_number","type":1,"typeName":"BlockNumber"}]}},"path":["captcha","captcha","RandomProvider"]}},{"id":62,"type":{"def":{"variant":{"variants":[{"fields":[{"type":63}],"index":0,"name":"Ok"},{"fields":[{"type":14}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":63},{"name":"E","type":14}],"path":["Result"]}},{"id":63,"type":{"def":{"variant":{"variants":[{"fields":[{"type":8}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":8},{"name":"E","type":13}],"path":["Result"]}},{"id":64,"type":{"def":{"primitive":"u64"}}},{"id":65,"type":{"def":{"variant":{}},"path":["ink_env","types","NoChainExtension"]}}],"version":"4"}`;
function v0ToV1Names(all2) {
  return all2.map((e) => objectSpread({}, e, {
    name: Array.isArray(e.name) ? e.name : [e.name]
  }));
}
function v0ToV1(registry, v02) {
  if (!v02.metadataVersion.length) {
    throw new Error("Invalid format for V0 (detected) contract metadata");
  }
  return registry.createType("ContractMetadataV1", objectSpread({}, v02, {
    spec: objectSpread({}, v02.spec, {
      constructors: v0ToV1Names(v02.spec.constructors),
      messages: v0ToV1Names(v02.spec.messages)
    }),
    types: toV1(registry, v02.types)
  }));
}
const ARG_TYPES = {
  ContractConstructorSpec: "ContractMessageParamSpecV2",
  ContractEventSpec: "ContractEventParamSpecV2",
  ContractMessageSpec: "ContractMessageParamSpecV2"
};
function v1ToV2Label(entry) {
  return objectSpread({}, entry, {
    label: Array.isArray(entry.name) ? entry.name.join("::") : entry.name
  });
}
function v1ToV2Labels(registry, outType, all2) {
  return all2.map((e) => registry.createType(`${outType}V2`, objectSpread(v1ToV2Label(e), {
    args: e.args.map((a) => registry.createType(ARG_TYPES[outType], v1ToV2Label(a)))
  })));
}
function v1ToV2(registry, v16) {
  return registry.createType("ContractMetadataV2", objectSpread({}, v16, {
    spec: objectSpread({}, v16.spec, {
      constructors: v1ToV2Labels(registry, "ContractConstructorSpec", v16.spec.constructors),
      events: v1ToV2Labels(registry, "ContractEventSpec", v16.spec.events),
      messages: v1ToV2Labels(registry, "ContractMessageSpec", v16.spec.messages)
    })
  }));
}
function v2ToV3(registry, v2) {
  return registry.createType("ContractMetadataV3", objectSpread({}, v2, {
    spec: objectSpread({}, v2.spec, {
      constructors: v2.spec.constructors.map((c) => (
        // V3 introduces the payable flag on constructors, for <V3, it is always true
        registry.createType("ContractConstructorSpecV3", objectSpread({}, c, { payable: true }))
      ))
    })
  }));
}
function v3ToV4(registry, v3) {
  return registry.createType("ContractMetadataV4", objectSpread({}, v3, {
    spec: objectSpread({}, v3.spec, {
      constructors: v3.spec.constructors.map((c) => registry.createType("ContractConstructorSpecV4", objectSpread({}, c))),
      messages: v3.spec.messages.map((m2) => registry.createType("ContractMessageSpecV3", objectSpread({}, m2)))
    })
  }));
}
const enumVersions = ["V4", "V3", "V2", "V1"];
function createConverter(next2, step) {
  return (registry, input) => next2(registry, step(registry, input));
}
function v4ToLatest(_registry, v42) {
  return v42;
}
const v3ToLatest = /* @__PURE__ */ createConverter(v4ToLatest, v3ToV4);
const v2ToLatest = /* @__PURE__ */ createConverter(v3ToLatest, v2ToV3);
const v1ToLatest = /* @__PURE__ */ createConverter(v2ToLatest, v1ToV2);
const v0ToLatest = /* @__PURE__ */ createConverter(v1ToLatest, v0ToV1);
const convertVersions = [
  ["V4", v4ToLatest],
  ["V3", v3ToLatest],
  ["V2", v2ToLatest],
  ["V1", v1ToLatest],
  ["V0", v0ToLatest]
];
const l$1 = logger("Abi");
const PRIMITIVE_ALWAYS = ["AccountId", "AccountIndex", "Address", "Balance"];
function findMessage(list, messageOrId) {
  const message = isNumber(messageOrId) ? list[messageOrId] : isString(messageOrId) ? list.find(({ identifier: identifier2 }) => [identifier2, stringCamelCase(identifier2)].includes(messageOrId.toString())) : messageOrId;
  return assertReturn(message, () => `Attempted to call an invalid contract interface, ${stringify$1(messageOrId)}`);
}
function getLatestMeta(registry, json) {
  const vx = enumVersions.find((v) => isObject$1(json[v]));
  const jsonVersion = json.version;
  if (!vx && jsonVersion && !enumVersions.find((v) => v === `V${jsonVersion}`)) {
    throw new Error(`Unable to handle version ${jsonVersion}`);
  }
  const metadata = registry.createType("ContractMetadata", vx ? { [vx]: json[vx] } : jsonVersion ? { [`V${jsonVersion}`]: json } : { V0: json });
  const converter2 = convertVersions.find(([v]) => metadata[`is${v}`]);
  if (!converter2) {
    throw new Error(`Unable to convert ABI with version ${metadata.type} to latest`);
  }
  return converter2[1](registry, metadata[`as${converter2[0]}`]);
}
function parseJson(json, chainProperties) {
  const registry = new TypeRegistry();
  const info2 = registry.createType("ContractProjectInfo", json);
  const latest2 = getLatestMeta(registry, json);
  const lookup14 = registry.createType("PortableRegistry", { types: latest2.types }, true);
  registry.setLookup(lookup14);
  if (chainProperties) {
    registry.setChainProperties(chainProperties);
  }
  lookup14.types.forEach(({ id }) => lookup14.getTypeDef(id));
  return [json, registry, latest2, info2];
}
function isTypeSpec(value) {
  return !!value && value instanceof Map && !isUndefined(value.type) && !isUndefined(value.displayName);
}
function isOption(value) {
  return !!value && value instanceof Option;
}
class Abi {
  constructor(abiJson, chainProperties) {
    __publicField(this, "events");
    __publicField(this, "constructors");
    __publicField(this, "info");
    __publicField(this, "json");
    __publicField(this, "messages");
    __publicField(this, "metadata");
    __publicField(this, "registry");
    __publicField(this, "environment", /* @__PURE__ */ new Map());
    __publicField(this, "__internal__createArgs", (args, spec2) => {
      return args.map(({ label, type }, index) => {
        try {
          if (!isObject$1(type)) {
            throw new Error("Invalid type definition found");
          }
          const displayName = type.displayName.length ? type.displayName[type.displayName.length - 1].toString() : void 0;
          const camelName = stringCamelCase(label);
          if (displayName && PRIMITIVE_ALWAYS.includes(displayName)) {
            return {
              name: camelName,
              type: {
                info: TypeDefInfo.Plain,
                type: displayName
              }
            };
          }
          const typeDef = this.registry.lookup.getTypeDef(type.type);
          return {
            name: camelName,
            type: displayName && !typeDef.type.startsWith(displayName) ? { displayName, ...typeDef } : typeDef
          };
        } catch (error2) {
          l$1.error(`Error expanding argument ${index} in ${stringify$1(spec2)}`);
          throw error2;
        }
      });
    });
    __publicField(this, "__internal__createEvent", (spec2, index) => {
      const args = this.__internal__createArgs(spec2.args, spec2);
      const event = {
        args,
        docs: spec2.docs.map((d) => d.toString()),
        fromU8a: (data) => ({
          args: this.__internal__decodeArgs(args, data),
          event
        }),
        identifier: spec2.label.toString(),
        index
      };
      return event;
    });
    __publicField(this, "__internal__createMessage", (spec2, index, add2 = {}) => {
      const args = this.__internal__createArgs(spec2.args, spec2);
      const identifier2 = spec2.label.toString();
      const message = {
        ...add2,
        args,
        docs: spec2.docs.map((d) => d.toString()),
        fromU8a: (data) => ({
          args: this.__internal__decodeArgs(args, data),
          message
        }),
        identifier: identifier2,
        index,
        isDefault: spec2.default.isTrue,
        method: stringCamelCase(identifier2),
        path: identifier2.split("::").map((s) => stringCamelCase(s)),
        selector: spec2.selector,
        toU8a: (params) => this.__internal__encodeArgs(spec2, args, params)
      };
      return message;
    });
    __publicField(this, "__internal__decodeArgs", (args, data) => {
      let offset = 0;
      return args.map(({ type: { lookupName, type } }) => {
        const value = this.registry.createType(lookupName || type, data.subarray(offset));
        offset += value.encodedLength;
        return value;
      });
    });
    __publicField(this, "__internal__decodeMessage", (type, list, data) => {
      const [, trimmed] = compactStripLength(data);
      const selector = trimmed.subarray(0, 4);
      const message = list.find((m2) => m2.selector.eq(selector));
      if (!message) {
        throw new Error(`Unable to find ${type} with selector ${u8aToHex(selector)}`);
      }
      return message.fromU8a(trimmed.subarray(4));
    });
    __publicField(this, "__internal__encodeArgs", ({ label, selector }, args, data) => {
      if (data.length !== args.length) {
        throw new Error(`Expected ${args.length} arguments to contract message '${label.toString()}', found ${data.length}`);
      }
      return compactAddLength(u8aConcat(this.registry.createType("ContractSelector", selector).toU8a(), ...args.map(({ type: { lookupName, type } }, index) => this.registry.createType(lookupName || type, data[index]).toU8a())));
    });
    [this.json, this.registry, this.metadata, this.info] = parseJson(isString(abiJson) ? JSON.parse(abiJson) : abiJson, chainProperties);
    this.constructors = this.metadata.spec.constructors.map((spec2, index) => this.__internal__createMessage(spec2, index, {
      isConstructor: true,
      isDefault: spec2.default.isTrue,
      isPayable: spec2.payable.isTrue,
      returnType: spec2.returnType.isSome ? this.registry.lookup.getTypeDef(spec2.returnType.unwrap().type) : null
    }));
    this.events = this.metadata.spec.events.map((spec2, index) => this.__internal__createEvent(spec2, index));
    this.messages = this.metadata.spec.messages.map((spec2, index) => this.__internal__createMessage(spec2, index, {
      isDefault: spec2.default.isTrue,
      isMutating: spec2.mutates.isTrue,
      isPayable: spec2.payable.isTrue,
      returnType: spec2.returnType.isSome ? this.registry.lookup.getTypeDef(spec2.returnType.unwrap().type) : null
    }));
    for (const [key, opt] of this.metadata.spec.environment.entries()) {
      if (isOption(opt)) {
        if (opt.isSome) {
          const value = opt.unwrap();
          if (isBn(value)) {
            this.environment.set(key, value);
          } else if (isTypeSpec(value)) {
            this.environment.set(key, this.registry.lookup.getTypeDef(value.type));
          } else {
            throw new Error(`Invalid environment definition for ${key}:: Expected either Number or ContractTypeSpec`);
          }
        }
      } else {
        throw new Error(`Expected Option<*> definition for ${key} in ContractEnvironment`);
      }
    }
  }
  /**
   * Warning: Unstable API, bound to change
   */
  decodeEvent(data) {
    const index = data[0];
    const event = this.events[index];
    if (!event) {
      throw new Error(`Unable to find event with index ${index}`);
    }
    return event.fromU8a(data.subarray(1));
  }
  /**
   * Warning: Unstable API, bound to change
   */
  decodeConstructor(data) {
    return this.__internal__decodeMessage("message", this.constructors, data);
  }
  /**
   * Warning: Unstable API, bound to change
   */
  decodeMessage(data) {
    return this.__internal__decodeMessage("message", this.messages, data);
  }
  findConstructor(constructorOrId) {
    return findMessage(this.constructors, constructorOrId);
  }
  findMessage(messageOrId) {
    return findMessage(this.messages, messageOrId);
  }
}
function applyOnEvent(result, types2, fn) {
  if (result.isInBlock || result.isFinalized) {
    const records = result.filterRecords("contracts", types2);
    if (records.length) {
      return fn(records);
    }
  }
  return void 0;
}
class Base {
  constructor(api, abi, decorateMethod) {
    __publicField(this, "abi");
    __publicField(this, "api");
    __publicField(this, "_decorateMethod");
    __publicField(this, "_isWeightV1");
    if (!api || !api.isConnected || !api.tx) {
      throw new Error("Your API has not been initialized correctly and is not connected to a chain");
    } else if (!api.tx.contracts || !isFunction$1(api.tx.contracts.instantiateWithCode) || api.tx.contracts.instantiateWithCode.meta.args.length !== 6) {
      throw new Error("The runtime does not expose api.tx.contracts.instantiateWithCode with storageDepositLimit");
    } else if (!api.call.contractsApi || !isFunction$1(api.call.contractsApi.call)) {
      throw new Error("Your runtime does not expose the api.call.contractsApi.call runtime interfaces");
    }
    this.abi = abi instanceof Abi ? abi : new Abi(abi, api.registry.getChainProperties());
    this.api = api;
    this._decorateMethod = decorateMethod;
    this._isWeightV1 = !api.registry.createType("Weight").proofSize;
  }
  get registry() {
    return this.api.registry;
  }
}
const MAX_CALL_GAS = new BN(5e12).isub(BN_ONE);
const l = logger("Contract");
function createQuery(meta, fn) {
  return withMeta(meta, (origin, options, ...params) => fn(origin, options, params));
}
function createTx(meta, fn) {
  return withMeta(meta, (options, ...params) => fn(options, params));
}
class ContractSubmittableResult extends SubmittableResult {
  constructor(result, contractEvents) {
    super(result);
    __publicField(this, "contractEvents");
    this.contractEvents = contractEvents;
  }
}
let Contract$1 = class Contract extends Base {
  constructor(api, abi, address, decorateMethod) {
    super(api, abi, decorateMethod);
    /**
     * @description The on-chain address for this contract
     */
    __publicField(this, "address");
    __publicField(this, "__internal__query", {});
    __publicField(this, "__internal__tx", {});
    __publicField(this, "__internal__getGas", (_gasLimit, isCall = false) => {
      const weight = convertWeight(_gasLimit);
      if (weight.v1Weight.gt(BN_ZERO)) {
        return weight;
      }
      return convertWeight(isCall ? MAX_CALL_GAS : convertWeight(this.api.consts.system.blockWeights ? this.api.consts.system.blockWeights.maxBlock : this.api.consts.system["maximumBlockWeight"]).v1Weight.muln(64).div(BN_HUNDRED));
    });
    __publicField(this, "__internal__exec", (messageOrId, { gasLimit = BN_ZERO, storageDepositLimit = null, value = BN_ZERO }, params) => {
      return this.api.tx.contracts.call(
        this.address,
        value,
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore jiggle v1 weights, metadata points to latest
        this._isWeightV1 ? convertWeight(gasLimit).v1Weight : convertWeight(gasLimit).v2Weight,
        storageDepositLimit,
        this.abi.findMessage(messageOrId).toU8a(params)
      ).withResultTransform((result) => (
        // ContractEmitted is the current generation, ContractExecution is the previous generation
        new ContractSubmittableResult(result, applyOnEvent(result, ["ContractEmitted", "ContractExecution"], (records) => records.map(({ event: { data: [, data] } }) => {
          try {
            return this.abi.decodeEvent(data);
          } catch (error2) {
            l.error(`Unable to decode contract event: ${error2.message}`);
            return null;
          }
        }).filter((decoded) => !!decoded)))
      ));
    });
    __publicField(this, "__internal__read", (messageOrId, { gasLimit = BN_ZERO, storageDepositLimit = null, value = BN_ZERO }, params) => {
      const message = this.abi.findMessage(messageOrId);
      return {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        send: this._decorateMethod((origin) => this.api.rx.call.contractsApi.call(
          origin,
          this.address,
          value,
          // eslint-disable-next-line @typescript-eslint/ban-ts-comment
          // @ts-ignore jiggle v1 weights, metadata points to latest
          this._isWeightV1 ? this.__internal__getGas(gasLimit, true).v1Weight : this.__internal__getGas(gasLimit, true).v2Weight,
          storageDepositLimit,
          message.toU8a(params)
        ).pipe(map$1(({ debugMessage, gasConsumed, gasRequired, result, storageDeposit }) => ({
          debugMessage,
          gasConsumed,
          gasRequired: gasRequired && !convertWeight(gasRequired).v1Weight.isZero() ? gasRequired : gasConsumed,
          output: result.isOk && message.returnType ? this.abi.registry.createTypeUnsafe(message.returnType.lookupName || message.returnType.type, [result.asOk.data.toU8a(true)], { isPedantic: true }) : null,
          result,
          storageDeposit
        }))))
      };
    });
    this.address = this.registry.createType("AccountId", address);
    this.abi.messages.forEach((m2) => {
      if (isUndefined(this.__internal__tx[m2.method])) {
        this.__internal__tx[m2.method] = createTx(m2, (o, p) => this.__internal__exec(m2, o, p));
      }
      if (isUndefined(this.__internal__query[m2.method])) {
        this.__internal__query[m2.method] = createQuery(m2, (f, o, p) => this.__internal__read(m2, o, p).send(f));
      }
    });
  }
  get query() {
    return this.__internal__query;
  }
  get tx() {
    return this.__internal__tx;
  }
};
class ContractPromise extends Contract$1 {
  constructor(api, abi, address) {
    super(api, abi, address, toPromiseMethod);
  }
}
class EventsClass {
  constructor(nativeContract, api) {
    this.__nativeContract = nativeContract;
    this.__api = api;
  }
  __subscribeOnEvent(callback, filter2 = () => true) {
    return this.__api.query.system.events((events2) => {
      events2.forEach((record) => {
        const { event } = record;
        if (event.method == "ContractEmitted") {
          const [address, data] = record.event.data;
          if (address.toString() === this.__nativeContract.address.toString()) {
            const { args, event: event2 } = this.__nativeContract.abi.decodeEvent(data);
            if (filter2(event2.identifier.toString()))
              callback(args, event2);
          }
        }
      });
    });
  }
}
function getTypeDescription(id, types2) {
  return types2[id];
}
function getEventTypeDescription(name, types2) {
  return types2[name];
}
function decodeEvents(events2, contract, types2) {
  return events2.filter((record) => {
    const { event } = record;
    const [address, data] = record.event.data;
    return event.method == "ContractEmitted" && address.toString() === contract.address.toString();
  }).map((record) => {
    const [address, data] = record.event.data;
    const { args, event } = contract.abi.decodeEvent(data);
    const _event = {};
    for (let i = 0; i < args.length; i++) {
      _event[event.args[i].name] = args[i].toJSON();
    }
    dist.handleEventReturn(_event, getEventTypeDescription(event.identifier.toString(), types2));
    return {
      name: event.identifier.toString(),
      args: _event
    };
  });
}
const DATA_TYPE_DESCRIPTIONS = {
  "0": {
    name: "ReturnNumber",
    isResult: false,
    isPrimitive: false,
    isConvertable: true
  },
  "1": {
    name: "number",
    isResult: false,
    isPrimitive: true,
    isConvertable: false
  },
  "2": {
    name: "Array",
    body: {
      "0": {
        name: "number",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      }
    },
    isResult: false,
    isPrimitive: false,
    isConvertable: false
  },
  "3": {
    name: "number",
    isResult: false,
    isPrimitive: true,
    isConvertable: false
  },
  "4": {
    name: "Hash",
    body: "string | number[]",
    isResult: false,
    isPrimitive: true,
    isConvertable: false
  },
  "5": {
    name: "Array",
    body: {
      "0": {
        name: "number",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      }
    },
    isResult: false,
    isPrimitive: false,
    isConvertable: false
  },
  "7": {
    name: "AccountId",
    body: "string | number[]",
    isResult: false,
    isPrimitive: true,
    isConvertable: false
  },
  "8": {
    name: "Array",
    body: {
      "0": {
        name: "AccountId",
        body: "string | number[]",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      }
    },
    isResult: false,
    isPrimitive: false,
    isConvertable: false
  },
  "9": {
    name: "Array",
    body: {
      "0": {
        name: "Hash",
        body: "string | number[]",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      }
    },
    isResult: false,
    isPrimitive: false,
    isConvertable: false
  },
  "10": {
    name: "Result<Result<null, Error, LangError",
    body: {
      ok: {
        name: "Result<null, Error",
        body: {
          ok: {
            name: "null",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          err: {
            name: "Error",
            body: {
              NotAuthorised: null,
              TransferFailed: null,
              SetCodeHashFailed: null,
              InvalidDestination: null,
              UnknownMessage: null,
              ProviderAccountExists: null,
              ProviderExists: null,
              ProviderAccountDoesNotExist: null,
              ProviderDoesNotExist: null,
              ProviderInsufficientFunds: null,
              ProviderInactive: null,
              ProviderUrlUsed: null,
              DappExists: null,
              DappDoesNotExist: null,
              DappInactive: null,
              DappInsufficientFunds: null,
              CaptchaDataDoesNotExist: null,
              CommitDoesNotExist: null,
              DappUserDoesNotExist: null,
              NoActiveProviders: null,
              DatasetIdSolutionsSame: null,
              CodeNotFound: null,
              Unknown: null,
              InvalidContract: null,
              InvalidPayee: null,
              InvalidCaptchaStatus: null,
              NoCorrectCaptcha: null,
              NotEnoughActiveProviders: null,
              ProviderFeeTooHigh: null,
              CommitAlreadyExists: null,
              NotAuthor: null,
              "Math": null
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          }
        },
        isResult: true,
        isPrimitive: false,
        isConvertable: false
      },
      err: {
        name: "LangError",
        body: {
          CouldNotReadInput: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "11": {
    name: "Result<null, Error",
    body: {
      ok: {
        name: "null",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      },
      err: {
        name: "Error",
        body: {
          NotAuthorised: null,
          TransferFailed: null,
          SetCodeHashFailed: null,
          InvalidDestination: null,
          UnknownMessage: null,
          ProviderAccountExists: null,
          ProviderExists: null,
          ProviderAccountDoesNotExist: null,
          ProviderDoesNotExist: null,
          ProviderInsufficientFunds: null,
          ProviderInactive: null,
          ProviderUrlUsed: null,
          DappExists: null,
          DappDoesNotExist: null,
          DappInactive: null,
          DappInsufficientFunds: null,
          CaptchaDataDoesNotExist: null,
          CommitDoesNotExist: null,
          DappUserDoesNotExist: null,
          NoActiveProviders: null,
          DatasetIdSolutionsSame: null,
          CodeNotFound: null,
          Unknown: null,
          InvalidContract: null,
          InvalidPayee: null,
          InvalidCaptchaStatus: null,
          NoCorrectCaptcha: null,
          NotEnoughActiveProviders: null,
          ProviderFeeTooHigh: null,
          CommitAlreadyExists: null,
          NotAuthor: null,
          "Math": null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "12": {
    name: "null",
    isResult: false,
    isPrimitive: true,
    isConvertable: false
  },
  "13": {
    name: "Error",
    body: {
      NotAuthorised: null,
      TransferFailed: null,
      SetCodeHashFailed: null,
      InvalidDestination: null,
      UnknownMessage: null,
      ProviderAccountExists: null,
      ProviderExists: null,
      ProviderAccountDoesNotExist: null,
      ProviderDoesNotExist: null,
      ProviderInsufficientFunds: null,
      ProviderInactive: null,
      ProviderUrlUsed: null,
      DappExists: null,
      DappDoesNotExist: null,
      DappInactive: null,
      DappInsufficientFunds: null,
      CaptchaDataDoesNotExist: null,
      CommitDoesNotExist: null,
      DappUserDoesNotExist: null,
      NoActiveProviders: null,
      DatasetIdSolutionsSame: null,
      CodeNotFound: null,
      Unknown: null,
      InvalidContract: null,
      InvalidPayee: null,
      InvalidCaptchaStatus: null,
      NoCorrectCaptcha: null,
      NotEnoughActiveProviders: null,
      ProviderFeeTooHigh: null,
      CommitAlreadyExists: null,
      NotAuthor: null,
      "Math": null
    },
    isResult: false,
    isPrimitive: false,
    isConvertable: false
  },
  "14": {
    name: "LangError",
    body: {
      CouldNotReadInput: null
    },
    isResult: false,
    isPrimitive: false,
    isConvertable: false
  },
  "15": {
    name: "Result<null, LangError",
    body: {
      ok: {
        name: "null",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      },
      err: {
        name: "LangError",
        body: {
          CouldNotReadInput: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "16": {
    name: "Result<Array, LangError",
    body: {
      ok: {
        name: "Array",
        body: {
          "0": {
            name: "number",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          }
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      },
      err: {
        name: "LangError",
        body: {
          CouldNotReadInput: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "17": {
    name: "Array",
    body: {
      "0": {
        name: "number",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      }
    },
    isResult: false,
    isPrimitive: false,
    isConvertable: false
  },
  "18": {
    name: "Result<AccountId, LangError",
    body: {
      ok: {
        name: "AccountId",
        body: "string | number[]",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      },
      err: {
        name: "LangError",
        body: {
          CouldNotReadInput: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "19": {
    name: "Result<Array, LangError",
    body: {
      ok: {
        name: "Array",
        body: {
          "0": {
            name: "Payee",
            body: {
              Provider: null,
              Dapp: null
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          }
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      },
      err: {
        name: "LangError",
        body: {
          CouldNotReadInput: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "20": {
    name: "Array",
    body: {
      "0": {
        name: "Payee",
        body: {
          Provider: null,
          Dapp: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: false,
    isPrimitive: false,
    isConvertable: false
  },
  "21": {
    name: "Payee",
    body: {
      Provider: null,
      Dapp: null
    },
    isResult: false,
    isPrimitive: false,
    isConvertable: false
  },
  "22": {
    name: "Result<Array, LangError",
    body: {
      ok: {
        name: "Array",
        body: {
          "0": {
            name: "DappPayee",
            body: {
              Provider: null,
              Dapp: null,
              Any: null
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          }
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      },
      err: {
        name: "LangError",
        body: {
          CouldNotReadInput: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "23": {
    name: "Array",
    body: {
      "0": {
        name: "DappPayee",
        body: {
          Provider: null,
          Dapp: null,
          Any: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: false,
    isPrimitive: false,
    isConvertable: false
  },
  "24": {
    name: "DappPayee",
    body: {
      Provider: null,
      Dapp: null,
      Any: null
    },
    isResult: false,
    isPrimitive: false,
    isConvertable: false
  },
  "25": {
    name: "Result<Array, LangError",
    body: {
      ok: {
        name: "Array",
        body: {
          "0": {
            name: "GovernanceStatus",
            body: {
              Active: null,
              Inactive: null
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          }
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      },
      err: {
        name: "LangError",
        body: {
          CouldNotReadInput: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "26": {
    name: "Array",
    body: {
      "0": {
        name: "GovernanceStatus",
        body: {
          Active: null,
          Inactive: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: false,
    isPrimitive: false,
    isConvertable: false
  },
  "27": {
    name: "GovernanceStatus",
    body: {
      Active: null,
      Inactive: null
    },
    isResult: false,
    isPrimitive: false,
    isConvertable: false
  },
  "28": {
    name: "Result<ReturnNumber, LangError",
    body: {
      ok: {
        name: "ReturnNumber",
        isResult: false,
        isPrimitive: false,
        isConvertable: true
      },
      err: {
        name: "LangError",
        body: {
          CouldNotReadInput: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "29": {
    name: "Result<number, LangError",
    body: {
      ok: {
        name: "number",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      },
      err: {
        name: "LangError",
        body: {
          CouldNotReadInput: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "30": {
    name: "Result<number, LangError",
    body: {
      ok: {
        name: "number",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      },
      err: {
        name: "LangError",
        body: {
          CouldNotReadInput: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "31": {
    name: "number",
    isResult: false,
    isPrimitive: true,
    isConvertable: false
  },
  "32": {
    name: "Result<Result<Provider, Error, LangError",
    body: {
      ok: {
        name: "Result<Provider, Error",
        body: {
          ok: {
            name: "Provider",
            body: {
              status: {
                name: "GovernanceStatus",
                body: {
                  Active: null,
                  Inactive: null
                },
                isResult: false,
                isPrimitive: false,
                isConvertable: false
              },
              balance: {
                name: "ReturnNumber",
                isResult: false,
                isPrimitive: false,
                isConvertable: true
              },
              fee: {
                name: "number",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              },
              payee: {
                name: "Payee",
                body: {
                  Provider: null,
                  Dapp: null
                },
                isResult: false,
                isPrimitive: false,
                isConvertable: false
              },
              url: {
                name: "Array",
                body: {
                  "0": {
                    name: "number",
                    isResult: false,
                    isPrimitive: true,
                    isConvertable: false
                  }
                },
                isResult: false,
                isPrimitive: false,
                isConvertable: false
              },
              datasetId: {
                name: "Hash",
                body: "string | number[]",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              },
              datasetIdContent: {
                name: "Hash",
                body: "string | number[]",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              }
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          },
          err: {
            name: "Error",
            body: {
              NotAuthorised: null,
              TransferFailed: null,
              SetCodeHashFailed: null,
              InvalidDestination: null,
              UnknownMessage: null,
              ProviderAccountExists: null,
              ProviderExists: null,
              ProviderAccountDoesNotExist: null,
              ProviderDoesNotExist: null,
              ProviderInsufficientFunds: null,
              ProviderInactive: null,
              ProviderUrlUsed: null,
              DappExists: null,
              DappDoesNotExist: null,
              DappInactive: null,
              DappInsufficientFunds: null,
              CaptchaDataDoesNotExist: null,
              CommitDoesNotExist: null,
              DappUserDoesNotExist: null,
              NoActiveProviders: null,
              DatasetIdSolutionsSame: null,
              CodeNotFound: null,
              Unknown: null,
              InvalidContract: null,
              InvalidPayee: null,
              InvalidCaptchaStatus: null,
              NoCorrectCaptcha: null,
              NotEnoughActiveProviders: null,
              ProviderFeeTooHigh: null,
              CommitAlreadyExists: null,
              NotAuthor: null,
              "Math": null
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          }
        },
        isResult: true,
        isPrimitive: false,
        isConvertable: false
      },
      err: {
        name: "LangError",
        body: {
          CouldNotReadInput: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "33": {
    name: "Result<Provider, Error",
    body: {
      ok: {
        name: "Provider",
        body: {
          status: {
            name: "GovernanceStatus",
            body: {
              Active: null,
              Inactive: null
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          },
          balance: {
            name: "ReturnNumber",
            isResult: false,
            isPrimitive: false,
            isConvertable: true
          },
          fee: {
            name: "number",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          payee: {
            name: "Payee",
            body: {
              Provider: null,
              Dapp: null
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          },
          url: {
            name: "Array",
            body: {
              "0": {
                name: "number",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              }
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          },
          datasetId: {
            name: "Hash",
            body: "string | number[]",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          datasetIdContent: {
            name: "Hash",
            body: "string | number[]",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          }
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      },
      err: {
        name: "Error",
        body: {
          NotAuthorised: null,
          TransferFailed: null,
          SetCodeHashFailed: null,
          InvalidDestination: null,
          UnknownMessage: null,
          ProviderAccountExists: null,
          ProviderExists: null,
          ProviderAccountDoesNotExist: null,
          ProviderDoesNotExist: null,
          ProviderInsufficientFunds: null,
          ProviderInactive: null,
          ProviderUrlUsed: null,
          DappExists: null,
          DappDoesNotExist: null,
          DappInactive: null,
          DappInsufficientFunds: null,
          CaptchaDataDoesNotExist: null,
          CommitDoesNotExist: null,
          DappUserDoesNotExist: null,
          NoActiveProviders: null,
          DatasetIdSolutionsSame: null,
          CodeNotFound: null,
          Unknown: null,
          InvalidContract: null,
          InvalidPayee: null,
          InvalidCaptchaStatus: null,
          NoCorrectCaptcha: null,
          NotEnoughActiveProviders: null,
          ProviderFeeTooHigh: null,
          CommitAlreadyExists: null,
          NotAuthor: null,
          "Math": null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "34": {
    name: "Provider",
    body: {
      status: {
        name: "GovernanceStatus",
        body: {
          Active: null,
          Inactive: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      },
      balance: {
        name: "ReturnNumber",
        isResult: false,
        isPrimitive: false,
        isConvertable: true
      },
      fee: {
        name: "number",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      },
      payee: {
        name: "Payee",
        body: {
          Provider: null,
          Dapp: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      },
      url: {
        name: "Array",
        body: {
          "0": {
            name: "number",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          }
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      },
      datasetId: {
        name: "Hash",
        body: "string | number[]",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      },
      datasetIdContent: {
        name: "Hash",
        body: "string | number[]",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      }
    },
    isResult: false,
    isPrimitive: false,
    isConvertable: false
  },
  "35": {
    name: "Result<Result<Dapp, Error, LangError",
    body: {
      ok: {
        name: "Result<Dapp, Error",
        body: {
          ok: {
            name: "Dapp",
            body: {
              status: {
                name: "GovernanceStatus",
                body: {
                  Active: null,
                  Inactive: null
                },
                isResult: false,
                isPrimitive: false,
                isConvertable: false
              },
              balance: {
                name: "ReturnNumber",
                isResult: false,
                isPrimitive: false,
                isConvertable: true
              },
              owner: {
                name: "AccountId",
                body: "string | number[]",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              },
              payee: {
                name: "DappPayee",
                body: {
                  Provider: null,
                  Dapp: null,
                  Any: null
                },
                isResult: false,
                isPrimitive: false,
                isConvertable: false
              }
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          },
          err: {
            name: "Error",
            body: {
              NotAuthorised: null,
              TransferFailed: null,
              SetCodeHashFailed: null,
              InvalidDestination: null,
              UnknownMessage: null,
              ProviderAccountExists: null,
              ProviderExists: null,
              ProviderAccountDoesNotExist: null,
              ProviderDoesNotExist: null,
              ProviderInsufficientFunds: null,
              ProviderInactive: null,
              ProviderUrlUsed: null,
              DappExists: null,
              DappDoesNotExist: null,
              DappInactive: null,
              DappInsufficientFunds: null,
              CaptchaDataDoesNotExist: null,
              CommitDoesNotExist: null,
              DappUserDoesNotExist: null,
              NoActiveProviders: null,
              DatasetIdSolutionsSame: null,
              CodeNotFound: null,
              Unknown: null,
              InvalidContract: null,
              InvalidPayee: null,
              InvalidCaptchaStatus: null,
              NoCorrectCaptcha: null,
              NotEnoughActiveProviders: null,
              ProviderFeeTooHigh: null,
              CommitAlreadyExists: null,
              NotAuthor: null,
              "Math": null
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          }
        },
        isResult: true,
        isPrimitive: false,
        isConvertable: false
      },
      err: {
        name: "LangError",
        body: {
          CouldNotReadInput: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "36": {
    name: "Result<Dapp, Error",
    body: {
      ok: {
        name: "Dapp",
        body: {
          status: {
            name: "GovernanceStatus",
            body: {
              Active: null,
              Inactive: null
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          },
          balance: {
            name: "ReturnNumber",
            isResult: false,
            isPrimitive: false,
            isConvertable: true
          },
          owner: {
            name: "AccountId",
            body: "string | number[]",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          payee: {
            name: "DappPayee",
            body: {
              Provider: null,
              Dapp: null,
              Any: null
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          }
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      },
      err: {
        name: "Error",
        body: {
          NotAuthorised: null,
          TransferFailed: null,
          SetCodeHashFailed: null,
          InvalidDestination: null,
          UnknownMessage: null,
          ProviderAccountExists: null,
          ProviderExists: null,
          ProviderAccountDoesNotExist: null,
          ProviderDoesNotExist: null,
          ProviderInsufficientFunds: null,
          ProviderInactive: null,
          ProviderUrlUsed: null,
          DappExists: null,
          DappDoesNotExist: null,
          DappInactive: null,
          DappInsufficientFunds: null,
          CaptchaDataDoesNotExist: null,
          CommitDoesNotExist: null,
          DappUserDoesNotExist: null,
          NoActiveProviders: null,
          DatasetIdSolutionsSame: null,
          CodeNotFound: null,
          Unknown: null,
          InvalidContract: null,
          InvalidPayee: null,
          InvalidCaptchaStatus: null,
          NoCorrectCaptcha: null,
          NotEnoughActiveProviders: null,
          ProviderFeeTooHigh: null,
          CommitAlreadyExists: null,
          NotAuthor: null,
          "Math": null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "37": {
    name: "Dapp",
    body: {
      status: {
        name: "GovernanceStatus",
        body: {
          Active: null,
          Inactive: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      },
      balance: {
        name: "ReturnNumber",
        isResult: false,
        isPrimitive: false,
        isConvertable: true
      },
      owner: {
        name: "AccountId",
        body: "string | number[]",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      },
      payee: {
        name: "DappPayee",
        body: {
          Provider: null,
          Dapp: null,
          Any: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: false,
    isPrimitive: false,
    isConvertable: false
  },
  "38": {
    name: "Result<Result<UserHistorySummary, Error, LangError",
    body: {
      ok: {
        name: "Result<UserHistorySummary, Error",
        body: {
          ok: {
            name: "UserHistorySummary",
            body: {
              correct: {
                name: "number",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              },
              incorrect: {
                name: "number",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              },
              score: {
                name: "number",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              }
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          },
          err: {
            name: "Error",
            body: {
              NotAuthorised: null,
              TransferFailed: null,
              SetCodeHashFailed: null,
              InvalidDestination: null,
              UnknownMessage: null,
              ProviderAccountExists: null,
              ProviderExists: null,
              ProviderAccountDoesNotExist: null,
              ProviderDoesNotExist: null,
              ProviderInsufficientFunds: null,
              ProviderInactive: null,
              ProviderUrlUsed: null,
              DappExists: null,
              DappDoesNotExist: null,
              DappInactive: null,
              DappInsufficientFunds: null,
              CaptchaDataDoesNotExist: null,
              CommitDoesNotExist: null,
              DappUserDoesNotExist: null,
              NoActiveProviders: null,
              DatasetIdSolutionsSame: null,
              CodeNotFound: null,
              Unknown: null,
              InvalidContract: null,
              InvalidPayee: null,
              InvalidCaptchaStatus: null,
              NoCorrectCaptcha: null,
              NotEnoughActiveProviders: null,
              ProviderFeeTooHigh: null,
              CommitAlreadyExists: null,
              NotAuthor: null,
              "Math": null
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          }
        },
        isResult: true,
        isPrimitive: false,
        isConvertable: false
      },
      err: {
        name: "LangError",
        body: {
          CouldNotReadInput: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "39": {
    name: "Result<UserHistorySummary, Error",
    body: {
      ok: {
        name: "UserHistorySummary",
        body: {
          correct: {
            name: "number",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          incorrect: {
            name: "number",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          score: {
            name: "number",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          }
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      },
      err: {
        name: "Error",
        body: {
          NotAuthorised: null,
          TransferFailed: null,
          SetCodeHashFailed: null,
          InvalidDestination: null,
          UnknownMessage: null,
          ProviderAccountExists: null,
          ProviderExists: null,
          ProviderAccountDoesNotExist: null,
          ProviderDoesNotExist: null,
          ProviderInsufficientFunds: null,
          ProviderInactive: null,
          ProviderUrlUsed: null,
          DappExists: null,
          DappDoesNotExist: null,
          DappInactive: null,
          DappInsufficientFunds: null,
          CaptchaDataDoesNotExist: null,
          CommitDoesNotExist: null,
          DappUserDoesNotExist: null,
          NoActiveProviders: null,
          DatasetIdSolutionsSame: null,
          CodeNotFound: null,
          Unknown: null,
          InvalidContract: null,
          InvalidPayee: null,
          InvalidCaptchaStatus: null,
          NoCorrectCaptcha: null,
          NotEnoughActiveProviders: null,
          ProviderFeeTooHigh: null,
          CommitAlreadyExists: null,
          NotAuthor: null,
          "Math": null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "40": {
    name: "UserHistorySummary",
    body: {
      correct: {
        name: "number",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      },
      incorrect: {
        name: "number",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      },
      score: {
        name: "number",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      }
    },
    isResult: false,
    isPrimitive: false,
    isConvertable: false
  },
  "41": {
    name: "Commit",
    body: {
      id: {
        name: "Hash",
        body: "string | number[]",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      },
      userAccount: {
        name: "AccountId",
        body: "string | number[]",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      },
      datasetId: {
        name: "Hash",
        body: "string | number[]",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      },
      status: {
        name: "CaptchaStatus",
        body: {
          Pending: null,
          Approved: null,
          Disapproved: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      },
      dappContract: {
        name: "AccountId",
        body: "string | number[]",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      },
      providerAccount: {
        name: "AccountId",
        body: "string | number[]",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      },
      requestedAt: {
        name: "number",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      },
      completedAt: {
        name: "number",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      },
      userSignature: {
        name: "Array",
        body: {
          "0": {
            name: "number",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          }
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: false,
    isPrimitive: false,
    isConvertable: false
  },
  "42": {
    name: "CaptchaStatus",
    body: {
      Pending: null,
      Approved: null,
      Disapproved: null
    },
    isResult: false,
    isPrimitive: false,
    isConvertable: false
  },
  "43": {
    name: "Array",
    body: {
      "0": {
        name: "number",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      }
    },
    isResult: false,
    isPrimitive: false,
    isConvertable: false
  },
  "44": {
    name: "Array",
    body: {
      "0": {
        name: "Commit",
        body: {
          id: {
            name: "Hash",
            body: "string | number[]",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          userAccount: {
            name: "AccountId",
            body: "string | number[]",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          datasetId: {
            name: "Hash",
            body: "string | number[]",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          status: {
            name: "CaptchaStatus",
            body: {
              Pending: null,
              Approved: null,
              Disapproved: null
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          },
          dappContract: {
            name: "AccountId",
            body: "string | number[]",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          providerAccount: {
            name: "AccountId",
            body: "string | number[]",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          requestedAt: {
            name: "number",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          completedAt: {
            name: "number",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          userSignature: {
            name: "Array",
            body: {
              "0": {
                name: "number",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              }
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          }
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: false,
    isPrimitive: false,
    isConvertable: false
  },
  "45": {
    name: "Result<Result<boolean, Error, LangError",
    body: {
      ok: {
        name: "Result<boolean, Error",
        body: {
          ok: {
            name: "boolean",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          err: {
            name: "Error",
            body: {
              NotAuthorised: null,
              TransferFailed: null,
              SetCodeHashFailed: null,
              InvalidDestination: null,
              UnknownMessage: null,
              ProviderAccountExists: null,
              ProviderExists: null,
              ProviderAccountDoesNotExist: null,
              ProviderDoesNotExist: null,
              ProviderInsufficientFunds: null,
              ProviderInactive: null,
              ProviderUrlUsed: null,
              DappExists: null,
              DappDoesNotExist: null,
              DappInactive: null,
              DappInsufficientFunds: null,
              CaptchaDataDoesNotExist: null,
              CommitDoesNotExist: null,
              DappUserDoesNotExist: null,
              NoActiveProviders: null,
              DatasetIdSolutionsSame: null,
              CodeNotFound: null,
              Unknown: null,
              InvalidContract: null,
              InvalidPayee: null,
              InvalidCaptchaStatus: null,
              NoCorrectCaptcha: null,
              NotEnoughActiveProviders: null,
              ProviderFeeTooHigh: null,
              CommitAlreadyExists: null,
              NotAuthor: null,
              "Math": null
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          }
        },
        isResult: true,
        isPrimitive: false,
        isConvertable: false
      },
      err: {
        name: "LangError",
        body: {
          CouldNotReadInput: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "46": {
    name: "Result<boolean, Error",
    body: {
      ok: {
        name: "boolean",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      },
      err: {
        name: "Error",
        body: {
          NotAuthorised: null,
          TransferFailed: null,
          SetCodeHashFailed: null,
          InvalidDestination: null,
          UnknownMessage: null,
          ProviderAccountExists: null,
          ProviderExists: null,
          ProviderAccountDoesNotExist: null,
          ProviderDoesNotExist: null,
          ProviderInsufficientFunds: null,
          ProviderInactive: null,
          ProviderUrlUsed: null,
          DappExists: null,
          DappDoesNotExist: null,
          DappInactive: null,
          DappInsufficientFunds: null,
          CaptchaDataDoesNotExist: null,
          CommitDoesNotExist: null,
          DappUserDoesNotExist: null,
          NoActiveProviders: null,
          DatasetIdSolutionsSame: null,
          CodeNotFound: null,
          Unknown: null,
          InvalidContract: null,
          InvalidPayee: null,
          InvalidCaptchaStatus: null,
          NoCorrectCaptcha: null,
          NotEnoughActiveProviders: null,
          ProviderFeeTooHigh: null,
          CommitAlreadyExists: null,
          NotAuthor: null,
          "Math": null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "47": {
    name: "boolean",
    isResult: false,
    isPrimitive: true,
    isConvertable: false
  },
  "48": {
    name: "Result<Result<LastCorrectCaptcha, Error, LangError",
    body: {
      ok: {
        name: "Result<LastCorrectCaptcha, Error",
        body: {
          ok: {
            name: "LastCorrectCaptcha",
            body: {
              before: {
                name: "number",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              },
              dappContract: {
                name: "AccountId",
                body: "string | number[]",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              }
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          },
          err: {
            name: "Error",
            body: {
              NotAuthorised: null,
              TransferFailed: null,
              SetCodeHashFailed: null,
              InvalidDestination: null,
              UnknownMessage: null,
              ProviderAccountExists: null,
              ProviderExists: null,
              ProviderAccountDoesNotExist: null,
              ProviderDoesNotExist: null,
              ProviderInsufficientFunds: null,
              ProviderInactive: null,
              ProviderUrlUsed: null,
              DappExists: null,
              DappDoesNotExist: null,
              DappInactive: null,
              DappInsufficientFunds: null,
              CaptchaDataDoesNotExist: null,
              CommitDoesNotExist: null,
              DappUserDoesNotExist: null,
              NoActiveProviders: null,
              DatasetIdSolutionsSame: null,
              CodeNotFound: null,
              Unknown: null,
              InvalidContract: null,
              InvalidPayee: null,
              InvalidCaptchaStatus: null,
              NoCorrectCaptcha: null,
              NotEnoughActiveProviders: null,
              ProviderFeeTooHigh: null,
              CommitAlreadyExists: null,
              NotAuthor: null,
              "Math": null
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          }
        },
        isResult: true,
        isPrimitive: false,
        isConvertable: false
      },
      err: {
        name: "LangError",
        body: {
          CouldNotReadInput: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "49": {
    name: "Result<LastCorrectCaptcha, Error",
    body: {
      ok: {
        name: "LastCorrectCaptcha",
        body: {
          before: {
            name: "number",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          dappContract: {
            name: "AccountId",
            body: "string | number[]",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          }
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      },
      err: {
        name: "Error",
        body: {
          NotAuthorised: null,
          TransferFailed: null,
          SetCodeHashFailed: null,
          InvalidDestination: null,
          UnknownMessage: null,
          ProviderAccountExists: null,
          ProviderExists: null,
          ProviderAccountDoesNotExist: null,
          ProviderDoesNotExist: null,
          ProviderInsufficientFunds: null,
          ProviderInactive: null,
          ProviderUrlUsed: null,
          DappExists: null,
          DappDoesNotExist: null,
          DappInactive: null,
          DappInsufficientFunds: null,
          CaptchaDataDoesNotExist: null,
          CommitDoesNotExist: null,
          DappUserDoesNotExist: null,
          NoActiveProviders: null,
          DatasetIdSolutionsSame: null,
          CodeNotFound: null,
          Unknown: null,
          InvalidContract: null,
          InvalidPayee: null,
          InvalidCaptchaStatus: null,
          NoCorrectCaptcha: null,
          NotEnoughActiveProviders: null,
          ProviderFeeTooHigh: null,
          CommitAlreadyExists: null,
          NotAuthor: null,
          "Math": null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "50": {
    name: "LastCorrectCaptcha",
    body: {
      before: {
        name: "number",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      },
      dappContract: {
        name: "AccountId",
        body: "string | number[]",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      }
    },
    isResult: false,
    isPrimitive: false,
    isConvertable: false
  },
  "51": {
    name: "Result<Result<User, Error, LangError",
    body: {
      ok: {
        name: "Result<User, Error",
        body: {
          ok: {
            name: "User",
            body: {
              history: {
                name: "Array",
                body: {
                  "0": {
                    name: "Hash",
                    body: "string | number[]",
                    isResult: false,
                    isPrimitive: true,
                    isConvertable: false
                  }
                },
                isResult: false,
                isPrimitive: false,
                isConvertable: false
              }
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          },
          err: {
            name: "Error",
            body: {
              NotAuthorised: null,
              TransferFailed: null,
              SetCodeHashFailed: null,
              InvalidDestination: null,
              UnknownMessage: null,
              ProviderAccountExists: null,
              ProviderExists: null,
              ProviderAccountDoesNotExist: null,
              ProviderDoesNotExist: null,
              ProviderInsufficientFunds: null,
              ProviderInactive: null,
              ProviderUrlUsed: null,
              DappExists: null,
              DappDoesNotExist: null,
              DappInactive: null,
              DappInsufficientFunds: null,
              CaptchaDataDoesNotExist: null,
              CommitDoesNotExist: null,
              DappUserDoesNotExist: null,
              NoActiveProviders: null,
              DatasetIdSolutionsSame: null,
              CodeNotFound: null,
              Unknown: null,
              InvalidContract: null,
              InvalidPayee: null,
              InvalidCaptchaStatus: null,
              NoCorrectCaptcha: null,
              NotEnoughActiveProviders: null,
              ProviderFeeTooHigh: null,
              CommitAlreadyExists: null,
              NotAuthor: null,
              "Math": null
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          }
        },
        isResult: true,
        isPrimitive: false,
        isConvertable: false
      },
      err: {
        name: "LangError",
        body: {
          CouldNotReadInput: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "52": {
    name: "Result<User, Error",
    body: {
      ok: {
        name: "User",
        body: {
          history: {
            name: "Array",
            body: {
              "0": {
                name: "Hash",
                body: "string | number[]",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              }
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          }
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      },
      err: {
        name: "Error",
        body: {
          NotAuthorised: null,
          TransferFailed: null,
          SetCodeHashFailed: null,
          InvalidDestination: null,
          UnknownMessage: null,
          ProviderAccountExists: null,
          ProviderExists: null,
          ProviderAccountDoesNotExist: null,
          ProviderDoesNotExist: null,
          ProviderInsufficientFunds: null,
          ProviderInactive: null,
          ProviderUrlUsed: null,
          DappExists: null,
          DappDoesNotExist: null,
          DappInactive: null,
          DappInsufficientFunds: null,
          CaptchaDataDoesNotExist: null,
          CommitDoesNotExist: null,
          DappUserDoesNotExist: null,
          NoActiveProviders: null,
          DatasetIdSolutionsSame: null,
          CodeNotFound: null,
          Unknown: null,
          InvalidContract: null,
          InvalidPayee: null,
          InvalidCaptchaStatus: null,
          NoCorrectCaptcha: null,
          NotEnoughActiveProviders: null,
          ProviderFeeTooHigh: null,
          CommitAlreadyExists: null,
          NotAuthor: null,
          "Math": null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "53": {
    name: "User",
    body: {
      history: {
        name: "Array",
        body: {
          "0": {
            name: "Hash",
            body: "string | number[]",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          }
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: false,
    isPrimitive: false,
    isConvertable: false
  },
  "54": {
    name: "Result<Result<Commit, Error, LangError",
    body: {
      ok: {
        name: "Result<Commit, Error",
        body: {
          ok: {
            name: "Commit",
            body: {
              id: {
                name: "Hash",
                body: "string | number[]",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              },
              userAccount: {
                name: "AccountId",
                body: "string | number[]",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              },
              datasetId: {
                name: "Hash",
                body: "string | number[]",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              },
              status: {
                name: "CaptchaStatus",
                body: {
                  Pending: null,
                  Approved: null,
                  Disapproved: null
                },
                isResult: false,
                isPrimitive: false,
                isConvertable: false
              },
              dappContract: {
                name: "AccountId",
                body: "string | number[]",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              },
              providerAccount: {
                name: "AccountId",
                body: "string | number[]",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              },
              requestedAt: {
                name: "number",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              },
              completedAt: {
                name: "number",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              },
              userSignature: {
                name: "Array",
                body: {
                  "0": {
                    name: "number",
                    isResult: false,
                    isPrimitive: true,
                    isConvertable: false
                  }
                },
                isResult: false,
                isPrimitive: false,
                isConvertable: false
              }
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          },
          err: {
            name: "Error",
            body: {
              NotAuthorised: null,
              TransferFailed: null,
              SetCodeHashFailed: null,
              InvalidDestination: null,
              UnknownMessage: null,
              ProviderAccountExists: null,
              ProviderExists: null,
              ProviderAccountDoesNotExist: null,
              ProviderDoesNotExist: null,
              ProviderInsufficientFunds: null,
              ProviderInactive: null,
              ProviderUrlUsed: null,
              DappExists: null,
              DappDoesNotExist: null,
              DappInactive: null,
              DappInsufficientFunds: null,
              CaptchaDataDoesNotExist: null,
              CommitDoesNotExist: null,
              DappUserDoesNotExist: null,
              NoActiveProviders: null,
              DatasetIdSolutionsSame: null,
              CodeNotFound: null,
              Unknown: null,
              InvalidContract: null,
              InvalidPayee: null,
              InvalidCaptchaStatus: null,
              NoCorrectCaptcha: null,
              NotEnoughActiveProviders: null,
              ProviderFeeTooHigh: null,
              CommitAlreadyExists: null,
              NotAuthor: null,
              "Math": null
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          }
        },
        isResult: true,
        isPrimitive: false,
        isConvertable: false
      },
      err: {
        name: "LangError",
        body: {
          CouldNotReadInput: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "55": {
    name: "Result<Commit, Error",
    body: {
      ok: {
        name: "Commit",
        body: {
          id: {
            name: "Hash",
            body: "string | number[]",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          userAccount: {
            name: "AccountId",
            body: "string | number[]",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          datasetId: {
            name: "Hash",
            body: "string | number[]",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          status: {
            name: "CaptchaStatus",
            body: {
              Pending: null,
              Approved: null,
              Disapproved: null
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          },
          dappContract: {
            name: "AccountId",
            body: "string | number[]",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          providerAccount: {
            name: "AccountId",
            body: "string | number[]",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          requestedAt: {
            name: "number",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          completedAt: {
            name: "number",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          userSignature: {
            name: "Array",
            body: {
              "0": {
                name: "number",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              }
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          }
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      },
      err: {
        name: "Error",
        body: {
          NotAuthorised: null,
          TransferFailed: null,
          SetCodeHashFailed: null,
          InvalidDestination: null,
          UnknownMessage: null,
          ProviderAccountExists: null,
          ProviderExists: null,
          ProviderAccountDoesNotExist: null,
          ProviderDoesNotExist: null,
          ProviderInsufficientFunds: null,
          ProviderInactive: null,
          ProviderUrlUsed: null,
          DappExists: null,
          DappDoesNotExist: null,
          DappInactive: null,
          DappInsufficientFunds: null,
          CaptchaDataDoesNotExist: null,
          CommitDoesNotExist: null,
          DappUserDoesNotExist: null,
          NoActiveProviders: null,
          DatasetIdSolutionsSame: null,
          CodeNotFound: null,
          Unknown: null,
          InvalidContract: null,
          InvalidPayee: null,
          InvalidCaptchaStatus: null,
          NoCorrectCaptcha: null,
          NotEnoughActiveProviders: null,
          ProviderFeeTooHigh: null,
          CommitAlreadyExists: null,
          NotAuthor: null,
          "Math": null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "56": {
    name: "Result<Result<Array, Error, LangError",
    body: {
      ok: {
        name: "Result<Array, Error",
        body: {
          ok: {
            name: "Array",
            body: {
              "0": {
                name: "Provider",
                body: {
                  status: {
                    name: "GovernanceStatus",
                    body: {
                      Active: null,
                      Inactive: null
                    },
                    isResult: false,
                    isPrimitive: false,
                    isConvertable: false
                  },
                  balance: {
                    name: "ReturnNumber",
                    isResult: false,
                    isPrimitive: false,
                    isConvertable: true
                  },
                  fee: {
                    name: "number",
                    isResult: false,
                    isPrimitive: true,
                    isConvertable: false
                  },
                  payee: {
                    name: "Payee",
                    body: {
                      Provider: null,
                      Dapp: null
                    },
                    isResult: false,
                    isPrimitive: false,
                    isConvertable: false
                  },
                  url: {
                    name: "Array",
                    body: {
                      "0": {
                        name: "number",
                        isResult: false,
                        isPrimitive: true,
                        isConvertable: false
                      }
                    },
                    isResult: false,
                    isPrimitive: false,
                    isConvertable: false
                  },
                  datasetId: {
                    name: "Hash",
                    body: "string | number[]",
                    isResult: false,
                    isPrimitive: true,
                    isConvertable: false
                  },
                  datasetIdContent: {
                    name: "Hash",
                    body: "string | number[]",
                    isResult: false,
                    isPrimitive: true,
                    isConvertable: false
                  }
                },
                isResult: false,
                isPrimitive: false,
                isConvertable: false
              }
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          },
          err: {
            name: "Error",
            body: {
              NotAuthorised: null,
              TransferFailed: null,
              SetCodeHashFailed: null,
              InvalidDestination: null,
              UnknownMessage: null,
              ProviderAccountExists: null,
              ProviderExists: null,
              ProviderAccountDoesNotExist: null,
              ProviderDoesNotExist: null,
              ProviderInsufficientFunds: null,
              ProviderInactive: null,
              ProviderUrlUsed: null,
              DappExists: null,
              DappDoesNotExist: null,
              DappInactive: null,
              DappInsufficientFunds: null,
              CaptchaDataDoesNotExist: null,
              CommitDoesNotExist: null,
              DappUserDoesNotExist: null,
              NoActiveProviders: null,
              DatasetIdSolutionsSame: null,
              CodeNotFound: null,
              Unknown: null,
              InvalidContract: null,
              InvalidPayee: null,
              InvalidCaptchaStatus: null,
              NoCorrectCaptcha: null,
              NotEnoughActiveProviders: null,
              ProviderFeeTooHigh: null,
              CommitAlreadyExists: null,
              NotAuthor: null,
              "Math": null
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          }
        },
        isResult: true,
        isPrimitive: false,
        isConvertable: false
      },
      err: {
        name: "LangError",
        body: {
          CouldNotReadInput: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "57": {
    name: "Result<Array, Error",
    body: {
      ok: {
        name: "Array",
        body: {
          "0": {
            name: "Provider",
            body: {
              status: {
                name: "GovernanceStatus",
                body: {
                  Active: null,
                  Inactive: null
                },
                isResult: false,
                isPrimitive: false,
                isConvertable: false
              },
              balance: {
                name: "ReturnNumber",
                isResult: false,
                isPrimitive: false,
                isConvertable: true
              },
              fee: {
                name: "number",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              },
              payee: {
                name: "Payee",
                body: {
                  Provider: null,
                  Dapp: null
                },
                isResult: false,
                isPrimitive: false,
                isConvertable: false
              },
              url: {
                name: "Array",
                body: {
                  "0": {
                    name: "number",
                    isResult: false,
                    isPrimitive: true,
                    isConvertable: false
                  }
                },
                isResult: false,
                isPrimitive: false,
                isConvertable: false
              },
              datasetId: {
                name: "Hash",
                body: "string | number[]",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              },
              datasetIdContent: {
                name: "Hash",
                body: "string | number[]",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              }
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          }
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      },
      err: {
        name: "Error",
        body: {
          NotAuthorised: null,
          TransferFailed: null,
          SetCodeHashFailed: null,
          InvalidDestination: null,
          UnknownMessage: null,
          ProviderAccountExists: null,
          ProviderExists: null,
          ProviderAccountDoesNotExist: null,
          ProviderDoesNotExist: null,
          ProviderInsufficientFunds: null,
          ProviderInactive: null,
          ProviderUrlUsed: null,
          DappExists: null,
          DappDoesNotExist: null,
          DappInactive: null,
          DappInsufficientFunds: null,
          CaptchaDataDoesNotExist: null,
          CommitDoesNotExist: null,
          DappUserDoesNotExist: null,
          NoActiveProviders: null,
          DatasetIdSolutionsSame: null,
          CodeNotFound: null,
          Unknown: null,
          InvalidContract: null,
          InvalidPayee: null,
          InvalidCaptchaStatus: null,
          NoCorrectCaptcha: null,
          NotEnoughActiveProviders: null,
          ProviderFeeTooHigh: null,
          CommitAlreadyExists: null,
          NotAuthor: null,
          "Math": null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "58": {
    name: "Array",
    body: {
      "0": {
        name: "Provider",
        body: {
          status: {
            name: "GovernanceStatus",
            body: {
              Active: null,
              Inactive: null
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          },
          balance: {
            name: "ReturnNumber",
            isResult: false,
            isPrimitive: false,
            isConvertable: true
          },
          fee: {
            name: "number",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          payee: {
            name: "Payee",
            body: {
              Provider: null,
              Dapp: null
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          },
          url: {
            name: "Array",
            body: {
              "0": {
                name: "number",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              }
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          },
          datasetId: {
            name: "Hash",
            body: "string | number[]",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          datasetIdContent: {
            name: "Hash",
            body: "string | number[]",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          }
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: false,
    isPrimitive: false,
    isConvertable: false
  },
  "59": {
    name: "Result<Result<RandomProvider, Error, LangError",
    body: {
      ok: {
        name: "Result<RandomProvider, Error",
        body: {
          ok: {
            name: "RandomProvider",
            body: {
              providerAccount: {
                name: "AccountId",
                body: "string | number[]",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              },
              provider: {
                name: "Provider",
                body: {
                  status: {
                    name: "GovernanceStatus",
                    body: {
                      Active: null,
                      Inactive: null
                    },
                    isResult: false,
                    isPrimitive: false,
                    isConvertable: false
                  },
                  balance: {
                    name: "ReturnNumber",
                    isResult: false,
                    isPrimitive: false,
                    isConvertable: true
                  },
                  fee: {
                    name: "number",
                    isResult: false,
                    isPrimitive: true,
                    isConvertable: false
                  },
                  payee: {
                    name: "Payee",
                    body: {
                      Provider: null,
                      Dapp: null
                    },
                    isResult: false,
                    isPrimitive: false,
                    isConvertable: false
                  },
                  url: {
                    name: "Array",
                    body: {
                      "0": {
                        name: "number",
                        isResult: false,
                        isPrimitive: true,
                        isConvertable: false
                      }
                    },
                    isResult: false,
                    isPrimitive: false,
                    isConvertable: false
                  },
                  datasetId: {
                    name: "Hash",
                    body: "string | number[]",
                    isResult: false,
                    isPrimitive: true,
                    isConvertable: false
                  },
                  datasetIdContent: {
                    name: "Hash",
                    body: "string | number[]",
                    isResult: false,
                    isPrimitive: true,
                    isConvertable: false
                  }
                },
                isResult: false,
                isPrimitive: false,
                isConvertable: false
              },
              blockNumber: {
                name: "number",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              }
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          },
          err: {
            name: "Error",
            body: {
              NotAuthorised: null,
              TransferFailed: null,
              SetCodeHashFailed: null,
              InvalidDestination: null,
              UnknownMessage: null,
              ProviderAccountExists: null,
              ProviderExists: null,
              ProviderAccountDoesNotExist: null,
              ProviderDoesNotExist: null,
              ProviderInsufficientFunds: null,
              ProviderInactive: null,
              ProviderUrlUsed: null,
              DappExists: null,
              DappDoesNotExist: null,
              DappInactive: null,
              DappInsufficientFunds: null,
              CaptchaDataDoesNotExist: null,
              CommitDoesNotExist: null,
              DappUserDoesNotExist: null,
              NoActiveProviders: null,
              DatasetIdSolutionsSame: null,
              CodeNotFound: null,
              Unknown: null,
              InvalidContract: null,
              InvalidPayee: null,
              InvalidCaptchaStatus: null,
              NoCorrectCaptcha: null,
              NotEnoughActiveProviders: null,
              ProviderFeeTooHigh: null,
              CommitAlreadyExists: null,
              NotAuthor: null,
              "Math": null
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          }
        },
        isResult: true,
        isPrimitive: false,
        isConvertable: false
      },
      err: {
        name: "LangError",
        body: {
          CouldNotReadInput: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "60": {
    name: "Result<RandomProvider, Error",
    body: {
      ok: {
        name: "RandomProvider",
        body: {
          providerAccount: {
            name: "AccountId",
            body: "string | number[]",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          provider: {
            name: "Provider",
            body: {
              status: {
                name: "GovernanceStatus",
                body: {
                  Active: null,
                  Inactive: null
                },
                isResult: false,
                isPrimitive: false,
                isConvertable: false
              },
              balance: {
                name: "ReturnNumber",
                isResult: false,
                isPrimitive: false,
                isConvertable: true
              },
              fee: {
                name: "number",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              },
              payee: {
                name: "Payee",
                body: {
                  Provider: null,
                  Dapp: null
                },
                isResult: false,
                isPrimitive: false,
                isConvertable: false
              },
              url: {
                name: "Array",
                body: {
                  "0": {
                    name: "number",
                    isResult: false,
                    isPrimitive: true,
                    isConvertable: false
                  }
                },
                isResult: false,
                isPrimitive: false,
                isConvertable: false
              },
              datasetId: {
                name: "Hash",
                body: "string | number[]",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              },
              datasetIdContent: {
                name: "Hash",
                body: "string | number[]",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              }
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          },
          blockNumber: {
            name: "number",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          }
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      },
      err: {
        name: "Error",
        body: {
          NotAuthorised: null,
          TransferFailed: null,
          SetCodeHashFailed: null,
          InvalidDestination: null,
          UnknownMessage: null,
          ProviderAccountExists: null,
          ProviderExists: null,
          ProviderAccountDoesNotExist: null,
          ProviderDoesNotExist: null,
          ProviderInsufficientFunds: null,
          ProviderInactive: null,
          ProviderUrlUsed: null,
          DappExists: null,
          DappDoesNotExist: null,
          DappInactive: null,
          DappInsufficientFunds: null,
          CaptchaDataDoesNotExist: null,
          CommitDoesNotExist: null,
          DappUserDoesNotExist: null,
          NoActiveProviders: null,
          DatasetIdSolutionsSame: null,
          CodeNotFound: null,
          Unknown: null,
          InvalidContract: null,
          InvalidPayee: null,
          InvalidCaptchaStatus: null,
          NoCorrectCaptcha: null,
          NotEnoughActiveProviders: null,
          ProviderFeeTooHigh: null,
          CommitAlreadyExists: null,
          NotAuthor: null,
          "Math": null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "61": {
    name: "RandomProvider",
    body: {
      providerAccount: {
        name: "AccountId",
        body: "string | number[]",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      },
      provider: {
        name: "Provider",
        body: {
          status: {
            name: "GovernanceStatus",
            body: {
              Active: null,
              Inactive: null
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          },
          balance: {
            name: "ReturnNumber",
            isResult: false,
            isPrimitive: false,
            isConvertable: true
          },
          fee: {
            name: "number",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          payee: {
            name: "Payee",
            body: {
              Provider: null,
              Dapp: null
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          },
          url: {
            name: "Array",
            body: {
              "0": {
                name: "number",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              }
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          },
          datasetId: {
            name: "Hash",
            body: "string | number[]",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          },
          datasetIdContent: {
            name: "Hash",
            body: "string | number[]",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          }
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      },
      blockNumber: {
        name: "number",
        isResult: false,
        isPrimitive: true,
        isConvertable: false
      }
    },
    isResult: false,
    isPrimitive: false,
    isConvertable: false
  },
  "62": {
    name: "Result<Result<Array, Error, LangError",
    body: {
      ok: {
        name: "Result<Array, Error",
        body: {
          ok: {
            name: "Array",
            body: {
              "0": {
                name: "AccountId",
                body: "string | number[]",
                isResult: false,
                isPrimitive: true,
                isConvertable: false
              }
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          },
          err: {
            name: "Error",
            body: {
              NotAuthorised: null,
              TransferFailed: null,
              SetCodeHashFailed: null,
              InvalidDestination: null,
              UnknownMessage: null,
              ProviderAccountExists: null,
              ProviderExists: null,
              ProviderAccountDoesNotExist: null,
              ProviderDoesNotExist: null,
              ProviderInsufficientFunds: null,
              ProviderInactive: null,
              ProviderUrlUsed: null,
              DappExists: null,
              DappDoesNotExist: null,
              DappInactive: null,
              DappInsufficientFunds: null,
              CaptchaDataDoesNotExist: null,
              CommitDoesNotExist: null,
              DappUserDoesNotExist: null,
              NoActiveProviders: null,
              DatasetIdSolutionsSame: null,
              CodeNotFound: null,
              Unknown: null,
              InvalidContract: null,
              InvalidPayee: null,
              InvalidCaptchaStatus: null,
              NoCorrectCaptcha: null,
              NotEnoughActiveProviders: null,
              ProviderFeeTooHigh: null,
              CommitAlreadyExists: null,
              NotAuthor: null,
              "Math": null
            },
            isResult: false,
            isPrimitive: false,
            isConvertable: false
          }
        },
        isResult: true,
        isPrimitive: false,
        isConvertable: false
      },
      err: {
        name: "LangError",
        body: {
          CouldNotReadInput: null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  },
  "63": {
    name: "Result<Array, Error",
    body: {
      ok: {
        name: "Array",
        body: {
          "0": {
            name: "AccountId",
            body: "string | number[]",
            isResult: false,
            isPrimitive: true,
            isConvertable: false
          }
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      },
      err: {
        name: "Error",
        body: {
          NotAuthorised: null,
          TransferFailed: null,
          SetCodeHashFailed: null,
          InvalidDestination: null,
          UnknownMessage: null,
          ProviderAccountExists: null,
          ProviderExists: null,
          ProviderAccountDoesNotExist: null,
          ProviderDoesNotExist: null,
          ProviderInsufficientFunds: null,
          ProviderInactive: null,
          ProviderUrlUsed: null,
          DappExists: null,
          DappDoesNotExist: null,
          DappInactive: null,
          DappInsufficientFunds: null,
          CaptchaDataDoesNotExist: null,
          CommitDoesNotExist: null,
          DappUserDoesNotExist: null,
          NoActiveProviders: null,
          DatasetIdSolutionsSame: null,
          CodeNotFound: null,
          Unknown: null,
          InvalidContract: null,
          InvalidPayee: null,
          InvalidCaptchaStatus: null,
          NoCorrectCaptcha: null,
          NotEnoughActiveProviders: null,
          ProviderFeeTooHigh: null,
          CommitAlreadyExists: null,
          NotAuthor: null,
          "Math": null
        },
        isResult: false,
        isPrimitive: false,
        isConvertable: false
      }
    },
    isResult: true,
    isPrimitive: false,
    isConvertable: false
  }
};
const EVENT_DATA_TYPE_DESCRIPTIONS = {};
let Methods$2 = class Methods2 {
  constructor(apiPromise, nativeContract, keyringPair) {
    this.__apiPromise = apiPromise;
    this.__nativeContract = nativeContract;
    this.__keyringPair = keyringPair;
    this.__callerAddress = keyringPair.address;
  }
  getGitCommitId(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getGitCommitId", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(16, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getAdmin(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getAdmin", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(18, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getPayees(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getPayees", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(19, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getDappPayees(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getDappPayees", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(22, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getStatuses(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getStatuses", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(25, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getProviderStakeThreshold(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getProviderStakeThreshold", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(28, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getDappStakeThreshold(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getDappStakeThreshold", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(28, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getMaxProviderFee(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getMaxProviderFee", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(29, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getMinNumActiveProviders(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getMinNumActiveProviders", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(30, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getBlockTime(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getBlockTime", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(30, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getMaxUserHistoryAgeSeconds(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getMaxUserHistoryAgeSeconds", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(29, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getMaxUserHistoryLen(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getMaxUserHistoryLen", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(30, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getMaxUserHistoryAgeBlocks(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getMaxUserHistoryAgeBlocks", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(29, DATA_TYPE_DESCRIPTIONS));
    });
  }
  providerRegister(url, fee, payee, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerRegister", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [url, fee, payee], __options);
  }
  providerUpdate(url, fee, payee, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerUpdate", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [url, fee, payee], __options);
  }
  providerDeactivate(__options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerDeactivate", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [], __options);
  }
  providerDeregister(__options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerDeregister", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [], __options);
  }
  getProvider(account2, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getProvider", [account2], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(32, DATA_TYPE_DESCRIPTIONS));
    });
  }
  providerFund(__options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerFund", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [], __options);
  }
  providerSetDataset(datasetId, datasetIdContent, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerSetDataset", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [datasetId, datasetIdContent], __options);
  }
  getDapp(contract, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getDapp", [contract], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(35, DATA_TYPE_DESCRIPTIONS));
    });
  }
  dappRegister(contract, payee, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "dappRegister", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [contract, payee], __options);
  }
  dappUpdate(contract, payee, owner, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "dappUpdate", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [contract, payee, owner], __options);
  }
  dappFund(contract, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "dappFund", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [contract], __options);
  }
  dappDeregister(contract, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "dappDeregister", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [contract], __options);
  }
  dappDeactivate(contract, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "dappDeactivate", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [contract], __options);
  }
  getUserHistorySummary(userAccount, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getUserHistorySummary", [userAccount], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(38, DATA_TYPE_DESCRIPTIONS));
    });
  }
  providerCommit(commit, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerCommit", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [commit], __options);
  }
  providerCommitMany(commits, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerCommitMany", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [commits], __options);
  }
  dappOperatorIsHumanUser(userAccount, threshold, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "dappOperatorIsHumanUser", [userAccount, threshold], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(45, DATA_TYPE_DESCRIPTIONS));
    });
  }
  dappOperatorLastCorrectCaptcha(userAccount, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "dappOperatorLastCorrectCaptcha", [userAccount], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(48, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getUser(userAccount, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getUser", [userAccount], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(51, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getCommit(commitId, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getCommit", [commitId], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(54, DATA_TYPE_DESCRIPTIONS));
    });
  }
  listProvidersByAccounts(providerAccounts, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "listProvidersByAccounts", [providerAccounts], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(56, DATA_TYPE_DESCRIPTIONS));
    });
  }
  listProvidersByStatus(statuses, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "listProvidersByStatus", [statuses], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(56, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getRandomActiveProvider(userAccount, dappContract, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getRandomActiveProvider", [userAccount, dappContract], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(59, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getAllProviderAccounts(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getAllProviderAccounts", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(62, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getRandomNumber(len, userAccount, dappContract, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getRandomNumber", [len, userAccount, dappContract], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(28, DATA_TYPE_DESCRIPTIONS));
    });
  }
  terminate(__options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "terminate", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [], __options);
  }
  withdraw(amount, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "withdraw", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [amount], __options);
  }
  setCodeHash(codeHash, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "setCodeHash", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [codeHash], __options);
  }
};
let Methods$1 = class Methods3 {
  constructor(nativeContract, nativeApi, callerAddress) {
    this.__nativeContract = nativeContract;
    this.__callerAddress = callerAddress;
    this.__apiPromise = nativeApi;
  }
  getGitCommitId(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getGitCommitId", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(16, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getAdmin(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getAdmin", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(18, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getPayees(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getPayees", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(19, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getDappPayees(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getDappPayees", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(22, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getStatuses(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getStatuses", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(25, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getProviderStakeThreshold(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getProviderStakeThreshold", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(28, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getDappStakeThreshold(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getDappStakeThreshold", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(28, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getMaxProviderFee(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getMaxProviderFee", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(29, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getMinNumActiveProviders(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getMinNumActiveProviders", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(30, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getBlockTime(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getBlockTime", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(30, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getMaxUserHistoryAgeSeconds(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getMaxUserHistoryAgeSeconds", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(29, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getMaxUserHistoryLen(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getMaxUserHistoryLen", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(30, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getMaxUserHistoryAgeBlocks(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getMaxUserHistoryAgeBlocks", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(29, DATA_TYPE_DESCRIPTIONS));
    });
  }
  providerRegister(url, fee, payee, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "providerRegister", [url, fee, payee], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(10, DATA_TYPE_DESCRIPTIONS));
    });
  }
  providerUpdate(url, fee, payee, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "providerUpdate", [url, fee, payee], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(10, DATA_TYPE_DESCRIPTIONS));
    });
  }
  providerDeactivate(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "providerDeactivate", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(10, DATA_TYPE_DESCRIPTIONS));
    });
  }
  providerDeregister(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "providerDeregister", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(10, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getProvider(account2, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getProvider", [account2], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(32, DATA_TYPE_DESCRIPTIONS));
    });
  }
  providerFund(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "providerFund", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(10, DATA_TYPE_DESCRIPTIONS));
    });
  }
  providerSetDataset(datasetId, datasetIdContent, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "providerSetDataset", [datasetId, datasetIdContent], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(10, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getDapp(contract, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getDapp", [contract], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(35, DATA_TYPE_DESCRIPTIONS));
    });
  }
  dappRegister(contract, payee, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "dappRegister", [contract, payee], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(10, DATA_TYPE_DESCRIPTIONS));
    });
  }
  dappUpdate(contract, payee, owner, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "dappUpdate", [contract, payee, owner], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(10, DATA_TYPE_DESCRIPTIONS));
    });
  }
  dappFund(contract, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "dappFund", [contract], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(10, DATA_TYPE_DESCRIPTIONS));
    });
  }
  dappDeregister(contract, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "dappDeregister", [contract], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(10, DATA_TYPE_DESCRIPTIONS));
    });
  }
  dappDeactivate(contract, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "dappDeactivate", [contract], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(10, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getUserHistorySummary(userAccount, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getUserHistorySummary", [userAccount], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(38, DATA_TYPE_DESCRIPTIONS));
    });
  }
  providerCommit(commit, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "providerCommit", [commit], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(10, DATA_TYPE_DESCRIPTIONS));
    });
  }
  providerCommitMany(commits, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "providerCommitMany", [commits], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(10, DATA_TYPE_DESCRIPTIONS));
    });
  }
  dappOperatorIsHumanUser(userAccount, threshold, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "dappOperatorIsHumanUser", [userAccount, threshold], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(45, DATA_TYPE_DESCRIPTIONS));
    });
  }
  dappOperatorLastCorrectCaptcha(userAccount, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "dappOperatorLastCorrectCaptcha", [userAccount], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(48, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getUser(userAccount, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getUser", [userAccount], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(51, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getCommit(commitId, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getCommit", [commitId], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(54, DATA_TYPE_DESCRIPTIONS));
    });
  }
  listProvidersByAccounts(providerAccounts, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "listProvidersByAccounts", [providerAccounts], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(56, DATA_TYPE_DESCRIPTIONS));
    });
  }
  listProvidersByStatus(statuses, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "listProvidersByStatus", [statuses], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(56, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getRandomActiveProvider(userAccount, dappContract, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getRandomActiveProvider", [userAccount, dappContract], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(59, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getAllProviderAccounts(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getAllProviderAccounts", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(62, DATA_TYPE_DESCRIPTIONS));
    });
  }
  getRandomNumber(len, userAccount, dappContract, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getRandomNumber", [len, userAccount, dappContract], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(28, DATA_TYPE_DESCRIPTIONS));
    });
  }
  terminate(__options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "terminate", [], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(10, DATA_TYPE_DESCRIPTIONS));
    });
  }
  withdraw(amount, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "withdraw", [amount], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(10, DATA_TYPE_DESCRIPTIONS));
    });
  }
  setCodeHash(codeHash, __options) {
    return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "setCodeHash", [codeHash], __options, (result) => {
      return dist.handleReturnType(result, getTypeDescription(10, DATA_TYPE_DESCRIPTIONS));
    });
  }
};
class Methods4 {
  constructor(apiPromise, nativeContract, keyringPair) {
    this.__apiPromise = apiPromise;
    this.__nativeContract = nativeContract;
    this.__keyringPair = keyringPair;
  }
  getGitCommitId(__options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getGitCommitId", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [], __options);
  }
  getAdmin(__options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getAdmin", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [], __options);
  }
  getPayees(__options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getPayees", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [], __options);
  }
  getDappPayees(__options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getDappPayees", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [], __options);
  }
  getStatuses(__options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getStatuses", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [], __options);
  }
  getProviderStakeThreshold(__options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getProviderStakeThreshold", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [], __options);
  }
  getDappStakeThreshold(__options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getDappStakeThreshold", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [], __options);
  }
  getMaxProviderFee(__options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getMaxProviderFee", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [], __options);
  }
  getMinNumActiveProviders(__options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getMinNumActiveProviders", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [], __options);
  }
  getBlockTime(__options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getBlockTime", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [], __options);
  }
  getMaxUserHistoryAgeSeconds(__options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getMaxUserHistoryAgeSeconds", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [], __options);
  }
  getMaxUserHistoryLen(__options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getMaxUserHistoryLen", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [], __options);
  }
  getMaxUserHistoryAgeBlocks(__options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getMaxUserHistoryAgeBlocks", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [], __options);
  }
  providerRegister(url, fee, payee, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerRegister", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [url, fee, payee], __options);
  }
  providerUpdate(url, fee, payee, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerUpdate", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [url, fee, payee], __options);
  }
  providerDeactivate(__options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerDeactivate", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [], __options);
  }
  providerDeregister(__options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerDeregister", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [], __options);
  }
  getProvider(account2, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getProvider", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [account2], __options);
  }
  providerFund(__options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerFund", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [], __options);
  }
  providerSetDataset(datasetId, datasetIdContent, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerSetDataset", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [datasetId, datasetIdContent], __options);
  }
  getDapp(contract, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getDapp", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [contract], __options);
  }
  dappRegister(contract, payee, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "dappRegister", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [contract, payee], __options);
  }
  dappUpdate(contract, payee, owner, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "dappUpdate", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [contract, payee, owner], __options);
  }
  dappFund(contract, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "dappFund", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [contract], __options);
  }
  dappDeregister(contract, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "dappDeregister", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [contract], __options);
  }
  dappDeactivate(contract, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "dappDeactivate", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [contract], __options);
  }
  getUserHistorySummary(userAccount, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getUserHistorySummary", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [userAccount], __options);
  }
  providerCommit(commit, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerCommit", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [commit], __options);
  }
  providerCommitMany(commits, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerCommitMany", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [commits], __options);
  }
  dappOperatorIsHumanUser(userAccount, threshold, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "dappOperatorIsHumanUser", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [userAccount, threshold], __options);
  }
  dappOperatorLastCorrectCaptcha(userAccount, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "dappOperatorLastCorrectCaptcha", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [userAccount], __options);
  }
  getUser(userAccount, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getUser", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [userAccount], __options);
  }
  getCommit(commitId, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getCommit", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [commitId], __options);
  }
  listProvidersByAccounts(providerAccounts, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "listProvidersByAccounts", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [providerAccounts], __options);
  }
  listProvidersByStatus(statuses, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "listProvidersByStatus", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [statuses], __options);
  }
  getRandomActiveProvider(userAccount, dappContract, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getRandomActiveProvider", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [userAccount, dappContract], __options);
  }
  getAllProviderAccounts(__options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getAllProviderAccounts", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [], __options);
  }
  getRandomNumber(len, userAccount, dappContract, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getRandomNumber", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [len, userAccount, dappContract], __options);
  }
  terminate(__options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "terminate", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [], __options);
  }
  withdraw(amount, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "withdraw", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [amount], __options);
  }
  setCodeHash(codeHash, __options) {
    return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "setCodeHash", (events2) => {
      return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
    }, [codeHash], __options);
  }
}
class Contract2 {
  constructor(address, signer, nativeAPI) {
    this.address = address;
    this.nativeContract = new ContractPromise(nativeAPI, ContractAbi, address);
    this.nativeAPI = nativeAPI;
    this.signer = signer;
    this.contractAbi = new Abi(ContractAbi);
    this.query = new Methods$1(this.nativeContract, this.nativeAPI, signer.address);
    this.buildExtrinsic = new Methods$3(this.nativeContract, this.nativeAPI);
    this.tx = new Methods4(nativeAPI, this.nativeContract, signer);
    this.methods = new Methods$2(nativeAPI, this.nativeContract, signer);
    this.events = new EventsClass(this.nativeContract, nativeAPI);
  }
  get name() {
    return this.nativeContract.abi.info.contract.name.toString();
  }
  get abi() {
    return this.contractAbi;
  }
  withSigner(signer) {
    return new Contract2(this.address, signer, this.nativeAPI);
  }
  withAddress(address) {
    return new Contract2(address, this.signer, this.nativeAPI);
  }
  withAPI(api) {
    return new Contract2(this.address, this.signer, api);
  }
}
function encodeStringArgs(abi, methodObj, args) {
  const encodedArgs = [];
  const typesToHash = ["Hash"];
  methodObj.args.forEach((methodArg, idx) => {
    let argVal = args[idx];
    if (typesToHash.indexOf(methodArg.type.type) > -1 && !(isU8a(argVal) || isHex(argVal))) {
      argVal = stringToHexPadded(argVal);
    }
    encodedArgs.push(abi.registry.createType(methodArg.type.type, argVal).toU8a());
  });
  return encodedArgs;
}
function handleContractCallOutcomeErrors(response, contractMethodName) {
  if (response.output) {
    const out = response.output;
    if (out.isOk) {
      const responseOk = out.asOk;
      if (responseOk.isErr) {
        throw new ProsopoContractError("CONTRACT.QUERY_ERROR", {
          context: { error: responseOk.toPrimitive().err.toString(), contractMethodName }
        });
      }
    }
  }
}
function stringToHexPadded(data) {
  const maxLength = 64;
  if (data.length > maxLength) {
    throw new ProsopoContractError("CONTRACT.INVALID_DATA_FORMAT", {
      context: { error: `stringToHexPadded: string length ${data.length} exceeds ${maxLength}` }
    });
  }
  const hexString = stringToHex(data).replace("0x", "");
  return `0x${Array(maxLength - hexString.length + 1).join("0")}${hexString}`;
}
const MAX_CALL_WEIGHT = new BN(5e12).isub(BN_ONE);
const GAS_INCREASE_FACTOR = 1.1;
function getOptions(api, isMutating, value, gasLimit, storageDeposit, increaseGas) {
  const gasIncreaseFactor = increaseGas ? GAS_INCREASE_FACTOR : 1;
  const _gasLimit = gasLimit ? api.registry.createType("WeightV2", {
    refTime: gasLimit.refTime.toBn().muln(gasIncreaseFactor),
    proofSize: gasLimit.proofSize.toBn().muln(gasIncreaseFactor)
  }) : isMutating ? api.registry.createType("WeightV2", {
    proofSize: new BN(1e6),
    refTime: MAX_CALL_WEIGHT
  }) : void 0;
  return {
    gasLimit: _gasLimit,
    storageDepositLimit: storageDeposit ? storageDeposit.isCharge ? storageDeposit.asCharge.toBn().muln(gasIncreaseFactor) : storageDeposit.isRefund ? storageDeposit.asRefund : null : null,
    value: value || BN_ZERO
  };
}
function getExpectedBlockTime(api) {
  var _a2;
  return new BN(((_a2 = api.consts.babe) == null ? void 0 : _a2.expectedBlockTime) || 6e3);
}
function get(obj, key, required = true) {
  const value = obj[key];
  if (required && value === void 0) {
    throw new Error(`Object has no property '${String(key)}': ${JSON.stringify(obj, null, 2)}`);
  }
  return value;
}
function at(items, index, options) {
  if (items.length === 0) {
    throw new Error("Array is empty");
  }
  if (!(options == null ? void 0 : options.noWrap)) {
    if (index > 0) {
      index = index % items.length;
    } else {
      index = Math.ceil(Math.abs(index) / items.length) * items.length + index;
    }
  }
  if (index >= items.length) {
    throw new Error(`Index ${index} larger than array length ${items.length}`);
  }
  if (index < 0) {
    throw new Error(`Index ${index} smaller than 0`);
  }
  return items[index];
}
const primitivesSizeInBytes = {
  u8: 1,
  u16: 2,
  u32: 4,
  u64: 8,
  u128: 16,
  "[u8; 32]": 32
};
const getPrimitiveTypes = function(abiJson) {
  const primitiveTypes = {};
  const types2 = abiJson.types.filter((type) => {
    if (type.type.def.primitive) {
      return true;
    } else if (type.type.path && type.type.path.length > 0) {
      const path2 = Array.from(type.type.path);
      return at(path2, 0).indexOf("primitive") > -1 && at(path2, 1) === "types";
    }
    return false;
  });
  types2.forEach((type) => {
    var _a2;
    const item = (_a2 = type.type.def.composite) == null ? void 0 : _a2.fields[0];
    if (item === void 0) {
      throw new Error("Invalid type definition");
    }
    primitiveTypes[type.id] = type.type.def.primitive || item.typeName || "";
  });
  return primitiveTypes;
};
const getPrimitiveStorageFields = (storageFields, primitiveStorageTypes) => {
  const filteredStorageFields = {};
  let primitiveStorageIndex = 0;
  let startBytes = 0;
  for (const storageField of storageFields) {
    const storageName = storageField.name;
    if (storageField.layout && storageField.layout.leaf && storageField.layout.leaf.ty !== void 0) {
      const type = storageField.layout.leaf.ty;
      if (primitiveStorageTypes[type]) {
        const typeNameAny = get(primitiveStorageTypes, type);
        const typeName = typeNameAny.toString();
        const size = get(primitivesSizeInBytes, typeName);
        filteredStorageFields[storageName] = {
          storageType: typeName,
          index: primitiveStorageIndex,
          startBytes,
          lengthBytes: size
        };
        startBytes += size;
        primitiveStorageIndex++;
      }
    }
  }
  return filteredStorageFields;
};
function getStorageKeyAndType(api, abi, json, storageName) {
  const { storageEntry } = getStorageEntry(json, storageName);
  if (storageEntry) {
    let storage2 = storageEntry;
    while ("root" in storage2.layout) {
      storage2 = storage2.layout.root;
    }
    const rootKey = storage2.root_key || storage2.layout.leaf.key || "";
    if (hexToNumber$1(rootKey) === 0) {
      const primitiveStorageTypes = getPrimitiveTypes(json);
      if (storage2.layout && storage2.layout.leaf && storage2.layout.leaf.ty) {
        const type = storage2.layout.leaf.ty;
        if (primitiveStorageTypes[type]) {
          return {
            storageType: api.createType("PortableType", {
              id: type,
              type: primitiveStorageTypes[type]
            }),
            storageKey: rootKey
          };
        }
      }
    }
    const rootKeyReversed = reverseHexString(rootKey.slice(2));
    const item = get(abi.registry.lookup.types, storage2.layout.leaf.ty);
    return {
      storageType: item,
      storageKey: rootKeyReversed
    };
  }
  throw new ProsopoContractError("CONTRACT.INVALID_STORAGE_NAME", {
    context: { failedFuncName: getStorageKeyAndType.name }
  });
}
function getStorageEntry(json, storageName) {
  var _a2, _b;
  const index = (_a2 = json.storage.root.layout.struct) == null ? void 0 : _a2.fields.findIndex((obj) => obj.name === storageName);
  if (index) {
    return { storageEntry: (_b = json.storage.root.layout.struct) == null ? void 0 : _b.fields[index], index };
  }
  return {};
}
async function getPrimitiveStorageValue(api, abi, name, primitiveStorage, address) {
  const promiseResult = api.rx.call.contractsApi.getStorage(address, "0x00000000");
  const result = await firstValueFrom(promiseResult);
  const optionStorageBytes = abi.registry.createType("Option<Bytes>", result);
  const storageBytes = optionStorageBytes.unwrap().toU8a(true);
  const trimmedStorageBytes = storageBytes.slice(4, storageBytes.length);
  const storage2 = get(primitiveStorage, name);
  const startBytes = storage2.startBytes;
  const endBytes = startBytes + storage2.lengthBytes;
  const primitiveBytes = trimmedStorageBytes.slice(startBytes, endBytes);
  return abi.registry.createType(storage2.storageType, primitiveBytes);
}
function useWeightImpl(api, blockTime, scalingFactor) {
  const isWeightV22 = !!api.registry.createType("Weight").proofSize;
  const megaGas = convertWeight(api.consts.system.blockWeights ? api.consts.system.blockWeights.maxBlock : api.consts.system.maximumBlockWeight).v1Weight.div(BN_MILLION).div(BN_TEN);
  const megaRefTime = api.consts.system.blockWeights ? api.consts.system.blockWeights.perClass.normal.maxExtrinsic.unwrapOrDefault().refTime.toBn().div(BN_MILLION).div(BN_TEN) : BN_ZERO;
  const proofSize = api.consts.system.blockWeights ? api.consts.system.blockWeights.perClass.normal.maxExtrinsic.unwrapOrDefault().proofSize.toBn() : BN_ZERO;
  const isEmpty = false;
  return new Promise((resolve, reject) => {
    let executionTime = 0;
    let percentage = 0;
    let weight = BN_ZERO;
    let weightV2 = api.registry.createType("WeightV2", {
      proofSize: BN_ZERO,
      refTime: BN_ZERO
    });
    let isValid2 = false;
    if (megaGas) {
      weight = megaGas.mul(BN_MILLION);
      executionTime = weight.mul(blockTime).div(convertWeight(api.consts.system.blockWeights ? api.consts.system.blockWeights.maxBlock : api.consts.system.maximumBlockWeight).v1Weight).toNumber();
      percentage = executionTime / blockTime.toNumber() * 100;
      executionTime = executionTime / 3e3;
      isValid2 = !megaGas.isZero() && percentage < 65;
    }
    if (isWeightV22 && megaRefTime && proofSize) {
      weightV2 = api.registry.createType("WeightV2", {
        proofSize: proofSize.div(scalingFactor),
        refTime: megaRefTime.mul(BN_MILLION).div(scalingFactor)
      });
      executionTime = megaRefTime.mul(BN_MILLION).mul(blockTime).div(api.consts.system.blockWeights ? api.consts.system.blockWeights.perClass.normal.maxExtrinsic.unwrapOrDefault().refTime.toBn() : BN_ONE).toNumber();
      percentage = executionTime / blockTime.toNumber() * 100;
      executionTime = executionTime / 3e3;
      isValid2 = !megaRefTime.isZero() && percentage < 65;
    }
    resolve({
      executionTime,
      isEmpty,
      isValid: isValid2,
      isWeightV2: isWeightV22,
      megaGas: megaGas || BN_ZERO,
      megaRefTime: megaRefTime || BN_ZERO,
      percentage,
      proofSize: proofSize || BN_ZERO,
      weight,
      weightV2
    });
  });
}
const wrapQuery = (fn, queryMethods) => {
  return async (...args) => {
    let result;
    try {
      result = await fn.bind(queryMethods)(...args);
    } catch (e) {
      throw new ProsopoContractError("CONTRACT.QUERY_ERROR", {
        context: {
          error: e._asError,
          failedFuncName: fn.name,
          args
        }
      });
    }
    if (result && result.value.err) {
      throw new ProsopoContractError("CONTRACT.QUERY_ERROR", {
        context: {
          error: result.value.err.toString(),
          failedFuncName: fn.name,
          result: JSON.stringify(result)
        }
      });
    }
    if (result.value) {
      return result.value.unwrapRecursively();
    }
    throw new ProsopoContractError("CONTRACT.QUERY_ERROR", {
      context: {
        failedFuncName: fn.name,
        result: JSON.stringify(result)
      }
    });
  };
};
class ProsopoCaptchaContract extends Contract2 {
  constructor(api, abi, address, contractName, currentNonce, pair, logLevel, userAccount) {
    if (!pair) {
      pair = getReadOnlyPair(api, userAccount);
    }
    super(address, pair, api);
    this.api = api;
    this.contract = new ContractPromise(api, abi, address);
    this.pair = pair;
    this.contractName = contractName;
    this.nonce = currentNonce;
    this.logger = getLogger(logLevel || LogLevel.enum.info, `${ProsopoCaptchaContract.name}.${contractName}`);
    this.json = AbiMetaDataSpec.parse(this.abi.json);
    this.createStorageGetters();
  }
  createStorageGetters() {
    if (this.json.storage.root.layout.struct) {
      for (const storageField of this.json.storage.root.layout.struct.fields) {
        const functionName = `${snakeToCamelCase(storageField.name)}`;
        const proto = ProsopoCaptchaContract.prototype;
        proto[functionName] = () => {
          return this.getStorage(storageField.name);
        };
      }
    }
  }
  async queryAtBlock(blockHash, methodName, args) {
    const api = await this.api.at(blockHash);
    const methods = new Methods$2(api, this.contract, this.signer);
    if (args) {
      return (await methods[methodName](...args)).value.unwrap().unwrap();
    } else {
      return (await methods[methodName]()).value.unwrap().unwrap();
    }
  }
  async getExtrinsicAndGasEstimates(contractMethodName, args, value) {
    const message = this.abi.findMessage(contractMethodName);
    const encodedArgs = encodeStringArgs(this.abi, message, args);
    const expectedBlockTime = getExpectedBlockTime(this.api);
    const weight = await useWeightImpl(this.api, expectedBlockTime, new BN(1));
    const gasLimit = weight.isWeightV2 ? weight.weightV2 : weight.isEmpty ? -1 : weight.weight;
    this.logger.debug("Sending address: ", this.pair.address);
    const initialOptions = {
      gasLimit,
      storageDepositLimit: null
    };
    if (value !== void 0) {
      initialOptions.value = value;
    }
    const func = this.contract.query[message.method];
    if (func === void 0) {
      throw new RangeError(`Method ${contractMethodName} does not exist on contract ${this.contractName}`);
    }
    const extrinsic = func(this.pair.address, initialOptions, ...encodedArgs);
    const response = await extrinsic;
    if (response.result.isOk) {
      let options = getOptions(this.api, message.isMutating, value, response.gasRequired, response.storageDeposit);
      let method = this.contract.tx[contractMethodName];
      if (method === void 0) {
        throw new RangeError(`Method ${contractMethodName} does not exist on contract ${this.contractName}`);
      }
      const extrinsicTx = method(options, ...encodedArgs);
      const paymentInfo = await extrinsicTx.paymentInfo(this.pair.address);
      this.logger.debug("Payment info: ", paymentInfo.partialFee.toHuman());
      options = getOptions(this.api, message.isMutating, value, paymentInfo.weight, response.storageDeposit, true);
      handleContractCallOutcomeErrors(response, contractMethodName);
      method = this.contract.tx[contractMethodName];
      if (method === void 0) {
        throw new RangeError(`Method ${contractMethodName} does not exist on contract ${this.contractName}`);
      }
      return {
        extrinsic: method(options, ...encodedArgs),
        options,
        storageDeposit: response.storageDeposit
      };
    } else {
      throw new ProsopoContractError("CONTRACT.QUERY_ERROR", {
        context: { error: response.result.asErr, failedFuncName: this.getExtrinsicAndGasEstimates.name }
      });
    }
  }
  async getStorage(name) {
    var _a2;
    const primitiveTypes = getPrimitiveTypes(this.json);
    const primitiveStorageFields = getPrimitiveStorageFields(((_a2 = this.json.storage.root.layout.struct) == null ? void 0 : _a2.fields) || [], primitiveTypes);
    if (name in primitiveStorageFields) {
      return getPrimitiveStorageValue(this.api, this.abi, name, primitiveStorageFields, this.contract.address);
    } else {
      const { storageKey, storageType } = getStorageKeyAndType(this.api, this.abi, this.json, name);
      if (storageType) {
        const typeDef = this.abi.registry.lookup.getTypeDef(`Lookup${storageType.id.toNumber()}`);
        const promiseResult = this.api.rx.call.contractsApi.getStorage(this.address, storageKey);
        const result = await firstValueFrom(promiseResult);
        const optionBytes = this.abi.registry.createType("Option<Bytes>", result);
        return this.abi.registry.createType(typeDef.type, [optionBytes.unwrap().toU8a(true)]);
      }
    }
    throw new ProsopoContractError("CONTRACT.INVALID_STORAGE_TYPE", {
      context: { failedFuncName: this.getStorage.name }
    });
  }
}
const sleep = (ms) => {
  return new Promise((resolve) => setTimeout(resolve, ms));
};
async function downloadImage(url) {
  try {
    const response = await fetch(url);
    if (!response.ok) {
      throw new ProsopoApiError("API.BAD_REQUEST", {
        context: { error: `Network response was not ok, status: ${response.status}`, url }
      });
    }
    const buffer = await response.arrayBuffer();
    return new Uint8Array(buffer);
  } catch (err) {
    throw new ProsopoEnvError("DATABASE.IMAGE_GET_FAILED", { context: { error: err } });
  }
}
const NO_SOLUTION_VALUE = "NO_SOLUTION";
function computeCaptchaHash(captcha, includeSolution = false, includeSalt = false, sortItemHashes) {
  try {
    const itemHashes = captcha.items.map((item, index) => {
      if (item.hash) {
        return item.hash;
      } else {
        throw new ProsopoDatasetError("CAPTCHA.MISSING_ITEM_HASH", {
          context: {
            computeCaptchaHashName: computeCaptchaHash.name,
            index
          }
        });
      }
    });
    return hexHashArray([
      captcha.target,
      ...includeSolution ? getSolutionValueToHash(captcha.solution) : [],
      includeSalt ? captcha.salt : "",
      sortItemHashes ? itemHashes.sort() : itemHashes
    ]);
  } catch (err) {
    throw new ProsopoDatasetError("DATASET.HASH_ERROR", { context: { error: err } });
  }
}
function getSolutionValueToHash(solution) {
  return solution !== void 0 ? solution.sort() : [NO_SOLUTION_VALUE];
}
async function computeItemHash(item) {
  if (item.type === "text") {
    return { ...item, hash: hexHash(item.data) };
  } else if (item.type === "image") {
    return { ...item, hash: hexHash(await downloadImage(item.data)) };
  } else {
    throw new ProsopoDatasetError("CAPTCHA.INVALID_ITEM_FORMAT");
  }
}
function computeCaptchaSolutionHash(captcha) {
  return hexHashArray([captcha.captchaId, captcha.captchaContentId, [...captcha.solution].sort(), captcha.salt]);
}
class MerkleNode {
  constructor(hash2) {
    this.hash = hash2;
    this.parent = null;
  }
}
class CaptchaMerkleTree {
  constructor() {
    this.leaves = [];
    this.layers = [];
  }
  build(leaves) {
    if (this.layers.length) {
      this.layers = [];
    }
    const layerZero = [];
    for (const leaf of leaves) {
      const node2 = new MerkleNode(leaf);
      this.leaves.push(node2);
      layerZero.push(node2.hash);
    }
    this.layers.push(layerZero);
    this.root = this.buildMerkleTree(this.leaves)[0];
  }
  buildMerkleTree(leaves) {
    const numLeaves = leaves.length;
    if (numLeaves === 1) {
      return leaves;
    }
    const parents = [];
    let leafIndex = 0;
    const newLayer = [];
    while (leafIndex < numLeaves) {
      const leftChild = leaves[leafIndex];
      if (leftChild === void 0) {
        throw new ProsopoError("DEVELOPER.GENERAL", { context: { error: "leftChild undefined" } });
      }
      const rightChild = leafIndex + 1 < numLeaves ? at(leaves, leafIndex + 1) : leftChild;
      const parentNode = this.createParent(leftChild, rightChild);
      newLayer.push(parentNode.hash);
      parents.push(parentNode);
      leafIndex += 2;
    }
    this.layers.push(newLayer);
    return this.buildMerkleTree(parents);
  }
  createParent(leftChild, rightChild) {
    const parent = new MerkleNode(hexHashArray([leftChild.hash, rightChild.hash]));
    leftChild.parent = parent.hash;
    rightChild.parent = parent.hash;
    return parent;
  }
  proof(leafHash) {
    const proofTree = [];
    let layerNum = 0;
    while (layerNum < this.layers.length - 1) {
      const layer = this.layers[layerNum];
      if (layer === void 0) {
        throw new ProsopoError("DATASET.MERKLE_ERROR", {
          context: { error: "layer undefined", failedFuncName: this.proof.name, layerNum }
        });
      }
      const leafIndex = layer.indexOf(leafHash);
      let partnerIndex = leafIndex % 2 && leafIndex > 0 ? leafIndex - 1 : leafIndex + 1;
      if (partnerIndex > layer.length - 1) {
        partnerIndex = leafIndex;
      }
      const pair = [leafHash];
      const partner = at(layer, partnerIndex);
      if (partnerIndex > leafIndex) {
        pair.push(partner);
      } else {
        pair.unshift(partner);
      }
      proofTree.push([at(pair, 0), at(pair, 1)]);
      layerNum += 1;
      leafHash = hexHashArray(pair);
    }
    const last2 = at(this.layers, this.layers.length - 1);
    return [...proofTree, [at(last2, 0)]];
  }
}
function verifyProof(leaf, proof) {
  try {
    if (at(proof, 0).indexOf(leaf) === -1) {
      return false;
    }
    for (const [layerIndex, layer] of proof.entries()) {
      leaf = hexHashArray(layer);
      if (at(proof, layerIndex + 1).indexOf(leaf) === -1) {
        return false;
      }
      const last2 = at(proof, proof.length - 1);
      if (leaf === at(last2, 0)) {
        return true;
      }
    }
    return false;
  } catch (err) {
    return false;
  }
}
class ProsopoCaptchaApi {
  constructor(userAccount, contract, provider, providerApi, web2, dappAccount) {
    this.userAccount = userAccount;
    this.contract = contract;
    this.provider = provider;
    this.providerApi = providerApi;
    this.web2 = web2;
    this.dappAccount = dappAccount;
  }
  async getCaptchaChallenge() {
    try {
      const captchaChallenge = await this.providerApi.getCaptchaChallenge(this.userAccount, this.provider);
      this.verifyCaptchaChallengeContent(this.provider, captchaChallenge);
      captchaChallenge.captchas.forEach((captcha) => {
        captcha.captcha.items.forEach((item) => {
          if (item.data) {
            item.data = item.data.replace(/^http(s)*:\/\//, "//");
          }
        });
      });
      return captchaChallenge;
    } catch (error2) {
      throw new ProsopoEnvError("CAPTCHA.INVALID_CAPTCHA_CHALLENGE", { context: { error: error2 } });
    }
  }
  verifyCaptchaChallengeContent(provider, captchaChallenge) {
    const first2 = at(captchaChallenge.captchas, 0);
    const proofLength = first2.proof.length;
    console.log(provider.provider);
    const last2 = at(first2.proof, proofLength - 1);
    if (provider.provider.datasetIdContent.toString() !== at(last2, 0)) {
      throw new ProsopoEnvError("CAPTCHA.INVALID_DATASET_CONTENT_ID");
    }
    for (const captchaWithProof of captchaChallenge.captchas) {
      if (!verifyCaptchaData(captchaWithProof)) {
        throw new ProsopoEnvError("CAPTCHA.INVALID_CAPTCHA_CHALLENGE");
      }
      if (!verifyProof(captchaWithProof.captcha.captchaContentId, captchaWithProof.proof)) {
        throw new ProsopoEnvError("CAPTCHA.INVALID_CAPTCHA_CHALLENGE");
      }
    }
    console.log("CAPTCHA.CHALLENGE_VERIFIED");
    return;
  }
  async submitCaptchaSolution(signer, requestHash, datasetId, solutions, salt) {
    const tree = new CaptchaMerkleTree();
    const captchasHashed = solutions.map((captcha) => computeCaptchaSolutionHash(captcha));
    tree.build(captchasHashed);
    const commitmentId = tree.root.hash;
    console.log("solveCaptchaChallenge commitmentId", commitmentId);
    const tx2 = void 0;
    let signature = void 0;
    if (this.web2) {
      if (!signer || !signer.signRaw) {
        throw new ProsopoEnvError("GENERAL.CANT_FIND_KEYRINGPAIR", {
          context: { error: "Signer is not defined, cannot sign message to prove account ownership" }
        });
      }
      const signed = await signer.signRaw({
        address: this.userAccount,
        data: stringToHex(requestHash),
        type: "bytes"
      });
      signature = signed.signature;
    }
    let result;
    try {
      result = await this.providerApi.submitCaptchaSolution(solutions, requestHash, this.contract.pair.address, salt, signature);
    } catch (error2) {
      throw new ProsopoDatasetError("CAPTCHA.INVALID_CAPTCHA_CHALLENGE", { context: { error: error2 } });
    }
    return [result, commitmentId, tx2];
  }
}
async function verifyCaptchaData(captchaWithProof) {
  const captcha = captchaWithProof.captcha;
  const proof = captchaWithProof.proof;
  if (!(await Promise.all(captcha.items.map(async (item) => (await computeItemHash(item)).hash === item.hash))).every((hash2) => hash2 === true)) {
    return false;
  }
  const captchaHash = computeCaptchaHash(captcha, false, false, false);
  if (captchaHash !== captcha.captchaContentId) {
    return false;
  }
  return at(proof, 0).indexOf(captchaHash) !== -1;
}
const ProsopoCaptchaApi$1 = ProsopoCaptchaApi;
const CURRENT_ACCOUNT_KEY = "@prosopo/current_account";
const PROVIDER_URL_KEY = "@prosopo/provider";
function setAccount(account2) {
  localStorage.setItem(CURRENT_ACCOUNT_KEY, account2);
}
function getAccount() {
  return localStorage.getItem(CURRENT_ACCOUNT_KEY);
}
function setProviderUrl(providerUrl) {
  localStorage.setItem(PROVIDER_URL_KEY, providerUrl);
}
function getProviderUrl() {
  return localStorage.getItem(PROVIDER_URL_KEY);
}
const storage = {
  setAccount,
  getAccount,
  setProviderUrl,
  getProviderUrl
};
const defaultState = () => {
  return {
    showModal: false,
    loading: false,
    index: 0,
    challenge: void 0,
    solutions: void 0,
    isHuman: false,
    captchaApi: void 0,
    account: void 0
  };
};
const buildUpdateState = (state, onStateUpdate) => {
  const updateCurrentState = (nextState) => {
    Object.assign(state, nextState);
    onStateUpdate(nextState);
    console.log("Procaptcha state update:", nextState, "\nResult:", state);
  };
  return updateCurrentState;
};
const getNetwork = (config2) => {
  const network = config2.networks[config2.defaultNetwork];
  if (!network) {
    throw new ProsopoEnvError("DEVELOPER.NETWORK_NOT_FOUND", {
      context: { error: `No network found for environment ${config2.defaultEnvironment}` }
    });
  }
  return network;
};
function Manager$1(configOptional, state, onStateUpdate, callbacks) {
  const alertError = (error2) => {
    console.log(error2);
    alert(error2.message);
  };
  const events2 = Object.assign({
    onAccountNotFound: alertError,
    onError: alertError,
    onHuman: (output3) => {
      console.log("onHuman event triggered", output3);
      updateState({ sendData: !state.sendData });
    },
    onExtensionNotFound: () => {
      alert("No extension found");
    },
    onFailed: () => {
      alert("Captcha challenge failed. Please try again");
      updateState({ sendData: !state.sendData });
    },
    onExpired: () => {
      alert("Completed challenge has expired, please try again");
    },
    onChallengeExpired: () => {
      alert("Uncompleted challenge has expired, please try again");
    },
    onOpen: () => {
      console.log("onOpen event triggered");
      updateState({ sendData: !state.sendData });
    },
    onClose: () => {
      console.log("onClose event triggered");
    }
  }, callbacks);
  const dispatchErrorEvent = (err) => {
    const error2 = err instanceof Error ? err : new Error(String(err));
    if (error2 instanceof AccountNotFoundError) {
      events2.onAccountNotFound(error2.message);
    } else {
      events2.onError(error2);
    }
  };
  const updateState = buildUpdateState(state, onStateUpdate);
  const getConfig2 = () => {
    const config2 = {
      userAccountAddress: "",
      ...configOptional
    };
    if (state.account) {
      config2.userAccountAddress = state.account.account.address;
    }
    return ProcaptchaConfigSchema.parse(config2);
  };
  const fallable = async (fn) => {
    try {
      await fn();
    } catch (err) {
      console.error(err);
      dispatchErrorEvent(err);
      updateState({ isHuman: false, showModal: false, loading: false });
    }
  };
  const start = async () => {
    console.log("Starting procaptcha");
    events2.onOpen();
    await fallable(async () => {
      if (state.loading) {
        console.log("Procaptcha already loading");
        return;
      }
      if (state.isHuman) {
        console.log("already human");
        return;
      }
      resetState();
      updateState({ loading: true });
      const config2 = getConfig2();
      updateState({ dappAccount: config2.account.address });
      await sleep(100);
      const account2 = await loadAccount();
      const contract = await loadContract();
      let contractIsHuman = false;
      try {
        contractIsHuman = (await contract.query.dappOperatorIsHumanUser(account2.account.address, config2.solutionThreshold)).value.unwrap().unwrap();
      } catch (error2) {
        console.warn(error2);
      }
      if (contractIsHuman) {
        updateState({ isHuman: true, loading: false });
        events2.onHuman({
          user: account2.account.address,
          dapp: getDappAccount()
        });
        setValidChallengeTimeout();
        return;
      }
      const providerUrlFromStorage = storage.getProviderUrl();
      let providerApi;
      if (providerUrlFromStorage) {
        providerApi = await loadProviderApi(providerUrlFromStorage);
        try {
          const verifyDappUserResponse = await providerApi.verifyDappUser(getDappAccount(), account2.account.address, void 0, configOptional.challengeValidLength);
          if (verifyDappUserResponse.solutionApproved) {
            updateState({ isHuman: true, loading: false });
            events2.onHuman({
              providerUrl: providerUrlFromStorage,
              user: account2.account.address,
              dapp: getDappAccount(),
              commitmentId: verifyDappUserResponse.commitmentId
            });
            setValidChallengeTimeout();
            return;
          }
        } catch (err) {
          console.error("Error contacting provider from storage", providerUrlFromStorage);
        }
      }
      const payload = {
        address: account2.account.address,
        data: stringToU8a("message"),
        type: "bytes"
      };
      const signed = await account2.extension.signer.signRaw(payload);
      console.log("Signature:", signed);
      const getRandomProviderResponse = await wrapQuery(contract.query.getRandomActiveProvider, contract.query)(account2.account.address, getDappAccount());
      const blockNumber = parseInt(getRandomProviderResponse.blockNumber.toString());
      console.log("provider", getRandomProviderResponse);
      const providerUrl = trimProviderUrl(getRandomProviderResponse.provider.url.toString());
      providerApi = await loadProviderApi(providerUrl);
      console.log("providerApi", providerApi);
      const captchaApi = await loadCaptchaApi(contract, getRandomProviderResponse, providerApi);
      console.log("captchaApi", captchaApi);
      const challenge = await captchaApi.getCaptchaChallenge();
      console.log("challenge", challenge);
      if (challenge.captchas.length <= 0) {
        throw new ProsopoApiError("DEVELOPER.PROVIDER_NO_CAPTCHA");
      }
      const timeMillis = challenge.captchas.map((captcha) => captcha.captcha.timeLimitMs || 30 * 1e3).reduce((a, b) => a + b);
      const timeout = setTimeout(() => {
        console.log("challenge expired after " + timeMillis + "ms");
        events2.onChallengeExpired();
        updateState({ isHuman: false, showModal: false, loading: false });
      }, timeMillis);
      updateState({
        index: 0,
        solutions: challenge.captchas.map(() => []),
        challenge,
        showModal: true,
        timeout,
        blockNumber
      });
    });
  };
  const submit = async () => {
    await fallable(async () => {
      console.log("submitting solutions");
      clearTimeout2();
      if (!state.challenge) {
        throw new ProsopoError("CAPTCHA.NO_CAPTCHA", {
          context: { error: "Cannot submit, no Captcha found in state" }
        });
      }
      updateState({ showModal: false });
      const challenge = state.challenge;
      const salt = randomAsHex();
      const captchaSolution = state.challenge.captchas.map((captcha, index) => {
        const solution = at(state.solutions, index);
        return {
          captchaId: captcha.captcha.captchaId,
          captchaContentId: captcha.captcha.captchaContentId,
          salt,
          solution
        };
      });
      const account2 = getAccount2();
      const blockNumber = getBlockNumber();
      const signer = account2.extension.signer;
      const first2 = at(challenge.captchas, 0);
      if (!first2.captcha.datasetId) {
        throw new ProsopoDatasetError("CAPTCHA.INVALID_CAPTCHA_ID", {
          context: { error: "No datasetId set for challenge" }
        });
      }
      const captchaApi = getCaptchaApi();
      const submission = await captchaApi.submitCaptchaSolution(signer, challenge.requestHash, first2.captcha.datasetId, captchaSolution, salt);
      const isHuman = submission[0].solutionApproved;
      if (!isHuman) {
        events2.onFailed();
      }
      updateState({
        submission,
        isHuman,
        loading: false
      });
      if (state.isHuman) {
        const trimmedUrl = trimProviderUrl(captchaApi.provider.provider.url.toString());
        storage.setProviderUrl(trimmedUrl);
        events2.onHuman({
          providerUrl: trimmedUrl,
          user: account2.account.address,
          dapp: getDappAccount(),
          commitmentId: submission[1],
          blockNumber
        });
        setValidChallengeTimeout();
      }
    });
  };
  const cancel = async () => {
    console.log("cancel");
    clearTimeout2();
    resetState();
    events2.onClose();
  };
  const select = (hash2) => {
    if (!state.challenge) {
      throw new ProsopoError("CAPTCHA.NO_CAPTCHA", {
        context: { error: "Cannot select, no Captcha found in state" }
      });
    }
    if (state.index >= state.challenge.captchas.length || state.index < 0) {
      throw new ProsopoError("CAPTCHA.NO_CAPTCHA", {
        context: { error: "Cannot select, index is out of range for this Captcha" }
      });
    }
    const index = state.index;
    const solutions = state.solutions;
    const solution = at(solutions, index);
    if (solution.includes(hash2)) {
      console.log("deselecting", hash2);
      solution.splice(solution.indexOf(hash2), 1);
    } else {
      console.log("selecting", hash2);
      solution.push(hash2);
    }
    updateState({ solutions });
  };
  const nextRound = () => {
    if (!state.challenge) {
      throw new ProsopoError("CAPTCHA.NO_CAPTCHA", {
        context: { error: "Cannot select, no Captcha found in state" }
      });
    }
    if (state.index + 1 >= state.challenge.captchas.length) {
      throw new ProsopoError("CAPTCHA.NO_CAPTCHA", {
        context: { error: "Cannot select, index is out of range for this Captcha" }
      });
    }
    console.log("proceeding to next round");
    updateState({ index: state.index + 1 });
  };
  const loadCaptchaApi = async (contract, provider, providerApi) => {
    const config2 = getConfig2();
    const captchaApi = new ProsopoCaptchaApi$1(getAccount2().account.address, contract, provider, providerApi, config2.web2, getDappAccount());
    updateState({ captchaApi });
    return getCaptchaApi();
  };
  const loadProviderApi = async (providerUrl) => {
    const config2 = getConfig2();
    const network = getNetwork(config2);
    if (!config2.account.address) {
      throw new ProsopoEnvError("GENERAL.SITE_KEY_MISSING");
    }
    return new ProviderApi(network, providerUrl, config2.account.address);
  };
  const clearTimeout2 = () => {
    window.clearTimeout(state.timeout);
    updateState({ timeout: void 0 });
  };
  const setValidChallengeTimeout = () => {
    console.log("setting valid challenge timeout");
    const timeMillis = configOptional.challengeValidLength || 120 * 1e3;
    const successfullChallengeTimeout = setTimeout(() => {
      console.log("valid challenge expired after " + timeMillis + "ms");
      updateState({ isHuman: false });
      events2.onExpired();
    }, timeMillis);
    updateState({ successfullChallengeTimeout });
  };
  const resetState = () => {
    clearTimeout2();
    updateState(defaultState());
  };
  const getCaptchaApi = () => {
    if (!state.captchaApi) {
      throw new ProsopoApiError("API.UNKNOWN", { context: { error: "Captcha api not set", state } });
    }
    return state.captchaApi;
  };
  const loadAccount = async () => {
    const config2 = getConfig2();
    if (!config2.web2 && !config2.userAccountAddress) {
      throw new ProsopoEnvError("GENERAL.ACCOUNT_NOT_FOUND", {
        context: { error: "Account address has not been set for web3 mode" }
      });
    }
    const ext = config2.web2 ? new ExtWeb2() : new ExtWeb3();
    const account2 = await ext.getAccount(config2);
    storage.setAccount(account2.account.address);
    console.log("Using account:", account2);
    updateState({ account: account2 });
    return getAccount2();
  };
  const getAccount2 = () => {
    if (!state.account) {
      throw new ProsopoEnvError("GENERAL.ACCOUNT_NOT_FOUND", { context: { error: "Account not loaded" } });
    }
    const account2 = state.account;
    return account2;
  };
  const getDappAccount = () => {
    if (!state.dappAccount) {
      throw new ProsopoEnvError("GENERAL.SITE_KEY_MISSING");
    }
    const dappAccount = state.dappAccount;
    return dappAccount;
  };
  const getBlockNumber = () => {
    if (!state.blockNumber) {
      throw new ProsopoContractError("CAPTCHA.INVALID_BLOCK_NO", { context: { error: "Block number not found" } });
    }
    const blockNumber = state.blockNumber;
    return blockNumber;
  };
  const loadContract = async () => {
    const config2 = getConfig2();
    const network = getNetwork(config2);
    const api = await ApiPromise.create({ provider: new WsProvider(network.endpoint), initWasm: false });
    const type = "sr25519";
    const keyring = new Keyring({ type, ss58Format: api.registry.chainSS58 });
    return new ProsopoCaptchaContract(api, JSON.parse(ContractAbi), network.contract.address, "prosopo", 0, keyring.addFromAddress(getAccount2().account.address));
  };
  const exportData = async (events3) => {
    var _a2;
    const providerUrl = storage.getProviderUrl() || ((_a2 = state.captchaApi) == null ? void 0 : _a2.provider.provider.url.toString());
    if (!providerUrl) {
      return;
    }
    const providerApi = await loadProviderApi(providerUrl);
    await providerApi.submitUserEvents(events3, getAccount2().account.address);
  };
  return {
    start,
    cancel,
    submit,
    select,
    nextRound,
    exportData
  };
}
var version = "3.4.2";
function wait(durationMs, resolveWith) {
  return new Promise(function(resolve) {
    return setTimeout(resolve, durationMs, resolveWith);
  });
}
function requestIdleCallbackIfAvailable(fallbackTimeout, deadlineTimeout) {
  if (deadlineTimeout === void 0) {
    deadlineTimeout = Infinity;
  }
  var requestIdleCallback = window.requestIdleCallback;
  if (requestIdleCallback) {
    return new Promise(function(resolve) {
      return requestIdleCallback.call(window, function() {
        return resolve();
      }, { timeout: deadlineTimeout });
    });
  } else {
    return wait(Math.min(fallbackTimeout, deadlineTimeout));
  }
}
function isPromise(value) {
  return !!value && typeof value.then === "function";
}
function awaitIfAsync(action, callback) {
  try {
    var returnedValue = action();
    if (isPromise(returnedValue)) {
      returnedValue.then(function(result) {
        return callback(true, result);
      }, function(error2) {
        return callback(false, error2);
      });
    } else {
      callback(true, returnedValue);
    }
  } catch (error2) {
    callback(false, error2);
  }
}
function mapWithBreaks(items, callback, loopReleaseInterval) {
  if (loopReleaseInterval === void 0) {
    loopReleaseInterval = 16;
  }
  return __awaiter$2(this, void 0, void 0, function() {
    var results, lastLoopReleaseTime, i, now;
    return __generator$2(this, function(_a2) {
      switch (_a2.label) {
        case 0:
          results = Array(items.length);
          lastLoopReleaseTime = Date.now();
          i = 0;
          _a2.label = 1;
        case 1:
          if (!(i < items.length))
            return [3, 4];
          results[i] = callback(items[i], i);
          now = Date.now();
          if (!(now >= lastLoopReleaseTime + loopReleaseInterval))
            return [3, 3];
          lastLoopReleaseTime = now;
          return [4, wait(0)];
        case 2:
          _a2.sent();
          _a2.label = 3;
        case 3:
          ++i;
          return [3, 1];
        case 4:
          return [2, results];
      }
    });
  });
}
function suppressUnhandledRejectionWarning(promise) {
  promise.then(void 0, function() {
    return void 0;
  });
}
function x64Add$1(m2, n) {
  m2 = [m2[0] >>> 16, m2[0] & 65535, m2[1] >>> 16, m2[1] & 65535];
  n = [n[0] >>> 16, n[0] & 65535, n[1] >>> 16, n[1] & 65535];
  var o = [0, 0, 0, 0];
  o[3] += m2[3] + n[3];
  o[2] += o[3] >>> 16;
  o[3] &= 65535;
  o[2] += m2[2] + n[2];
  o[1] += o[2] >>> 16;
  o[2] &= 65535;
  o[1] += m2[1] + n[1];
  o[0] += o[1] >>> 16;
  o[1] &= 65535;
  o[0] += m2[0] + n[0];
  o[0] &= 65535;
  return [o[0] << 16 | o[1], o[2] << 16 | o[3]];
}
function x64Multiply$1(m2, n) {
  m2 = [m2[0] >>> 16, m2[0] & 65535, m2[1] >>> 16, m2[1] & 65535];
  n = [n[0] >>> 16, n[0] & 65535, n[1] >>> 16, n[1] & 65535];
  var o = [0, 0, 0, 0];
  o[3] += m2[3] * n[3];
  o[2] += o[3] >>> 16;
  o[3] &= 65535;
  o[2] += m2[2] * n[3];
  o[1] += o[2] >>> 16;
  o[2] &= 65535;
  o[2] += m2[3] * n[2];
  o[1] += o[2] >>> 16;
  o[2] &= 65535;
  o[1] += m2[1] * n[3];
  o[0] += o[1] >>> 16;
  o[1] &= 65535;
  o[1] += m2[2] * n[2];
  o[0] += o[1] >>> 16;
  o[1] &= 65535;
  o[1] += m2[3] * n[1];
  o[0] += o[1] >>> 16;
  o[1] &= 65535;
  o[0] += m2[0] * n[3] + m2[1] * n[2] + m2[2] * n[1] + m2[3] * n[0];
  o[0] &= 65535;
  return [o[0] << 16 | o[1], o[2] << 16 | o[3]];
}
function x64Rotl$1(m2, n) {
  n %= 64;
  if (n === 32) {
    return [m2[1], m2[0]];
  } else if (n < 32) {
    return [m2[0] << n | m2[1] >>> 32 - n, m2[1] << n | m2[0] >>> 32 - n];
  } else {
    n -= 32;
    return [m2[1] << n | m2[0] >>> 32 - n, m2[0] << n | m2[1] >>> 32 - n];
  }
}
function x64LeftShift$1(m2, n) {
  n %= 64;
  if (n === 0) {
    return m2;
  } else if (n < 32) {
    return [m2[0] << n | m2[1] >>> 32 - n, m2[1] << n];
  } else {
    return [m2[1] << n - 32, 0];
  }
}
function x64Xor$1(m2, n) {
  return [m2[0] ^ n[0], m2[1] ^ n[1]];
}
function x64Fmix$1(h) {
  h = x64Xor$1(h, [0, h[0] >>> 1]);
  h = x64Multiply$1(h, [4283543511, 3981806797]);
  h = x64Xor$1(h, [0, h[0] >>> 1]);
  h = x64Multiply$1(h, [3301882366, 444984403]);
  h = x64Xor$1(h, [0, h[0] >>> 1]);
  return h;
}
function x64hash128$1(key, seed) {
  key = key || "";
  seed = seed || 0;
  var remainder = key.length % 16;
  var bytes2 = key.length - remainder;
  var h1 = [0, seed];
  var h2 = [0, seed];
  var k1 = [0, 0];
  var k2 = [0, 0];
  var c1 = [2277735313, 289559509];
  var c2 = [1291169091, 658871167];
  var i;
  for (i = 0; i < bytes2; i = i + 16) {
    k1 = [
      key.charCodeAt(i + 4) & 255 | (key.charCodeAt(i + 5) & 255) << 8 | (key.charCodeAt(i + 6) & 255) << 16 | (key.charCodeAt(i + 7) & 255) << 24,
      key.charCodeAt(i) & 255 | (key.charCodeAt(i + 1) & 255) << 8 | (key.charCodeAt(i + 2) & 255) << 16 | (key.charCodeAt(i + 3) & 255) << 24
    ];
    k2 = [
      key.charCodeAt(i + 12) & 255 | (key.charCodeAt(i + 13) & 255) << 8 | (key.charCodeAt(i + 14) & 255) << 16 | (key.charCodeAt(i + 15) & 255) << 24,
      key.charCodeAt(i + 8) & 255 | (key.charCodeAt(i + 9) & 255) << 8 | (key.charCodeAt(i + 10) & 255) << 16 | (key.charCodeAt(i + 11) & 255) << 24
    ];
    k1 = x64Multiply$1(k1, c1);
    k1 = x64Rotl$1(k1, 31);
    k1 = x64Multiply$1(k1, c2);
    h1 = x64Xor$1(h1, k1);
    h1 = x64Rotl$1(h1, 27);
    h1 = x64Add$1(h1, h2);
    h1 = x64Add$1(x64Multiply$1(h1, [0, 5]), [0, 1390208809]);
    k2 = x64Multiply$1(k2, c2);
    k2 = x64Rotl$1(k2, 33);
    k2 = x64Multiply$1(k2, c1);
    h2 = x64Xor$1(h2, k2);
    h2 = x64Rotl$1(h2, 31);
    h2 = x64Add$1(h2, h1);
    h2 = x64Add$1(x64Multiply$1(h2, [0, 5]), [0, 944331445]);
  }
  k1 = [0, 0];
  k2 = [0, 0];
  switch (remainder) {
    case 15:
      k2 = x64Xor$1(k2, x64LeftShift$1([0, key.charCodeAt(i + 14)], 48));
    case 14:
      k2 = x64Xor$1(k2, x64LeftShift$1([0, key.charCodeAt(i + 13)], 40));
    case 13:
      k2 = x64Xor$1(k2, x64LeftShift$1([0, key.charCodeAt(i + 12)], 32));
    case 12:
      k2 = x64Xor$1(k2, x64LeftShift$1([0, key.charCodeAt(i + 11)], 24));
    case 11:
      k2 = x64Xor$1(k2, x64LeftShift$1([0, key.charCodeAt(i + 10)], 16));
    case 10:
      k2 = x64Xor$1(k2, x64LeftShift$1([0, key.charCodeAt(i + 9)], 8));
    case 9:
      k2 = x64Xor$1(k2, [0, key.charCodeAt(i + 8)]);
      k2 = x64Multiply$1(k2, c2);
      k2 = x64Rotl$1(k2, 33);
      k2 = x64Multiply$1(k2, c1);
      h2 = x64Xor$1(h2, k2);
    case 8:
      k1 = x64Xor$1(k1, x64LeftShift$1([0, key.charCodeAt(i + 7)], 56));
    case 7:
      k1 = x64Xor$1(k1, x64LeftShift$1([0, key.charCodeAt(i + 6)], 48));
    case 6:
      k1 = x64Xor$1(k1, x64LeftShift$1([0, key.charCodeAt(i + 5)], 40));
    case 5:
      k1 = x64Xor$1(k1, x64LeftShift$1([0, key.charCodeAt(i + 4)], 32));
    case 4:
      k1 = x64Xor$1(k1, x64LeftShift$1([0, key.charCodeAt(i + 3)], 24));
    case 3:
      k1 = x64Xor$1(k1, x64LeftShift$1([0, key.charCodeAt(i + 2)], 16));
    case 2:
      k1 = x64Xor$1(k1, x64LeftShift$1([0, key.charCodeAt(i + 1)], 8));
    case 1:
      k1 = x64Xor$1(k1, [0, key.charCodeAt(i)]);
      k1 = x64Multiply$1(k1, c1);
      k1 = x64Rotl$1(k1, 31);
      k1 = x64Multiply$1(k1, c2);
      h1 = x64Xor$1(h1, k1);
  }
  h1 = x64Xor$1(h1, [0, key.length]);
  h2 = x64Xor$1(h2, [0, key.length]);
  h1 = x64Add$1(h1, h2);
  h2 = x64Add$1(h2, h1);
  h1 = x64Fmix$1(h1);
  h2 = x64Fmix$1(h2);
  h1 = x64Add$1(h1, h2);
  h2 = x64Add$1(h2, h1);
  return ("00000000" + (h1[0] >>> 0).toString(16)).slice(-8) + ("00000000" + (h1[1] >>> 0).toString(16)).slice(-8) + ("00000000" + (h2[0] >>> 0).toString(16)).slice(-8) + ("00000000" + (h2[1] >>> 0).toString(16)).slice(-8);
}
function errorToObject(error2) {
  var _a2;
  return __assign({ name: error2.name, message: error2.message, stack: (_a2 = error2.stack) === null || _a2 === void 0 ? void 0 : _a2.split("\n") }, error2);
}
function includes(haystack, needle) {
  for (var i = 0, l2 = haystack.length; i < l2; ++i) {
    if (haystack[i] === needle) {
      return true;
    }
  }
  return false;
}
function excludes(haystack, needle) {
  return !includes(haystack, needle);
}
function toInt(value) {
  return parseInt(value);
}
function toFloat(value) {
  return parseFloat(value);
}
function replaceNaN(value, replacement) {
  return typeof value === "number" && isNaN(value) ? replacement : value;
}
function countTruthy(values) {
  return values.reduce(function(sum, value) {
    return sum + (value ? 1 : 0);
  }, 0);
}
function round(value, base) {
  if (base === void 0) {
    base = 1;
  }
  if (Math.abs(base) >= 1) {
    return Math.round(value / base) * base;
  } else {
    var counterBase = 1 / base;
    return Math.round(value * counterBase) / counterBase;
  }
}
function parseSimpleCssSelector(selector) {
  var _a2, _b;
  var errorMessage = "Unexpected syntax '".concat(selector, "'");
  var tagMatch = /^\s*([a-z-]*)(.*)$/i.exec(selector);
  var tag = tagMatch[1] || void 0;
  var attributes = {};
  var partsRegex = /([.:#][\w-]+|\[.+?\])/gi;
  var addAttribute = function(name, value) {
    attributes[name] = attributes[name] || [];
    attributes[name].push(value);
  };
  for (; ; ) {
    var match2 = partsRegex.exec(tagMatch[2]);
    if (!match2) {
      break;
    }
    var part = match2[0];
    switch (part[0]) {
      case ".":
        addAttribute("class", part.slice(1));
        break;
      case "#":
        addAttribute("id", part.slice(1));
        break;
      case "[": {
        var attributeMatch = /^\[([\w-]+)([~|^$*]?=("(.*?)"|([\w-]+)))?(\s+[is])?\]$/.exec(part);
        if (attributeMatch) {
          addAttribute(attributeMatch[1], (_b = (_a2 = attributeMatch[4]) !== null && _a2 !== void 0 ? _a2 : attributeMatch[5]) !== null && _b !== void 0 ? _b : "");
        } else {
          throw new Error(errorMessage);
        }
        break;
      }
      default:
        throw new Error(errorMessage);
    }
  }
  return [tag, attributes];
}
function ensureErrorWithMessage(error2) {
  return error2 && typeof error2 === "object" && "message" in error2 ? error2 : { message: error2 };
}
function isFinalResultLoaded(loadResult) {
  return typeof loadResult !== "function";
}
function loadSource(source, sourceOptions) {
  var sourceLoadPromise = new Promise(function(resolveLoad) {
    var loadStartTime = Date.now();
    awaitIfAsync(source.bind(null, sourceOptions), function() {
      var loadArgs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        loadArgs[_i] = arguments[_i];
      }
      var loadDuration = Date.now() - loadStartTime;
      if (!loadArgs[0]) {
        return resolveLoad(function() {
          return { error: ensureErrorWithMessage(loadArgs[1]), duration: loadDuration };
        });
      }
      var loadResult = loadArgs[1];
      if (isFinalResultLoaded(loadResult)) {
        return resolveLoad(function() {
          return { value: loadResult, duration: loadDuration };
        });
      }
      resolveLoad(function() {
        return new Promise(function(resolveGet) {
          var getStartTime = Date.now();
          awaitIfAsync(loadResult, function() {
            var getArgs = [];
            for (var _i2 = 0; _i2 < arguments.length; _i2++) {
              getArgs[_i2] = arguments[_i2];
            }
            var duration = loadDuration + Date.now() - getStartTime;
            if (!getArgs[0]) {
              return resolveGet({ error: ensureErrorWithMessage(getArgs[1]), duration });
            }
            resolveGet({ value: getArgs[1], duration });
          });
        });
      });
    });
  });
  suppressUnhandledRejectionWarning(sourceLoadPromise);
  return function getComponent() {
    return sourceLoadPromise.then(function(finalizeSource) {
      return finalizeSource();
    });
  };
}
function loadSources(sources2, sourceOptions, excludeSources) {
  var includedSources = Object.keys(sources2).filter(function(sourceKey) {
    return excludes(excludeSources, sourceKey);
  });
  var sourceGettersPromise = mapWithBreaks(includedSources, function(sourceKey) {
    return loadSource(sources2[sourceKey], sourceOptions);
  });
  suppressUnhandledRejectionWarning(sourceGettersPromise);
  return function getComponents() {
    return __awaiter$2(this, void 0, void 0, function() {
      var sourceGetters, componentPromises, componentArray, components, index;
      return __generator$2(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            return [4, sourceGettersPromise];
          case 1:
            sourceGetters = _a2.sent();
            return [4, mapWithBreaks(sourceGetters, function(sourceGetter) {
              var componentPromise = sourceGetter();
              suppressUnhandledRejectionWarning(componentPromise);
              return componentPromise;
            })];
          case 2:
            componentPromises = _a2.sent();
            return [
              4,
              Promise.all(componentPromises)
              // Keeping the component keys order the same as the source keys order
            ];
          case 3:
            componentArray = _a2.sent();
            components = {};
            for (index = 0; index < includedSources.length; ++index) {
              components[includedSources[index]] = componentArray[index];
            }
            return [2, components];
        }
      });
    });
  };
}
function isTrident() {
  var w = window;
  var n = navigator;
  return countTruthy([
    "MSCSSMatrix" in w,
    "msSetImmediate" in w,
    "msIndexedDB" in w,
    "msMaxTouchPoints" in n,
    "msPointerEnabled" in n
  ]) >= 4;
}
function isEdgeHTML() {
  var w = window;
  var n = navigator;
  return countTruthy(["msWriteProfilerMark" in w, "MSStream" in w, "msLaunchUri" in n, "msSaveBlob" in n]) >= 3 && !isTrident();
}
function isChromium() {
  var w = window;
  var n = navigator;
  return countTruthy([
    "webkitPersistentStorage" in n,
    "webkitTemporaryStorage" in n,
    n.vendor.indexOf("Google") === 0,
    "webkitResolveLocalFileSystemURL" in w,
    "BatteryManager" in w,
    "webkitMediaStream" in w,
    "webkitSpeechGrammar" in w
  ]) >= 5;
}
function isWebKit() {
  var w = window;
  var n = navigator;
  return countTruthy([
    "ApplePayError" in w,
    "CSSPrimitiveValue" in w,
    "Counter" in w,
    n.vendor.indexOf("Apple") === 0,
    "getStorageUpdates" in n,
    "WebKitMediaKeys" in w
  ]) >= 4;
}
function isDesktopSafari() {
  var w = window;
  return countTruthy([
    "safari" in w,
    !("DeviceMotionEvent" in w),
    !("ongestureend" in w),
    !("standalone" in navigator)
  ]) >= 3;
}
function isGecko() {
  var _a2, _b;
  var w = window;
  return countTruthy([
    "buildID" in navigator,
    "MozAppearance" in ((_b = (_a2 = document.documentElement) === null || _a2 === void 0 ? void 0 : _a2.style) !== null && _b !== void 0 ? _b : {}),
    "onmozfullscreenchange" in w,
    "mozInnerScreenX" in w,
    "CSSMozDocumentRule" in w,
    "CanvasCaptureMediaStream" in w
  ]) >= 4;
}
function isChromium86OrNewer() {
  var w = window;
  return countTruthy([
    !("MediaSettingsRange" in w),
    "RTCEncodedAudioFrame" in w,
    "" + w.Intl === "[object Intl]",
    "" + w.Reflect === "[object Reflect]"
  ]) >= 3;
}
function isWebKit606OrNewer() {
  var w = window;
  return countTruthy([
    "DOMRectList" in w,
    "RTCPeerConnectionIceEvent" in w,
    "SVGGeometryElement" in w,
    "ontransitioncancel" in w
  ]) >= 3;
}
function isIPad() {
  if (navigator.platform === "iPad") {
    return true;
  }
  var s = screen;
  var screenRatio = s.width / s.height;
  return countTruthy([
    "MediaSource" in window,
    !!Element.prototype.webkitRequestFullscreen,
    // iPhone 4S that runs iOS 9 matches this. But it won't match the criteria above, so it won't be detected as iPad.
    screenRatio > 0.65 && screenRatio < 1.53
  ]) >= 2;
}
function getFullscreenElement() {
  var d = document;
  return d.fullscreenElement || d.msFullscreenElement || d.mozFullScreenElement || d.webkitFullscreenElement || null;
}
function exitFullscreen() {
  var d = document;
  return (d.exitFullscreen || d.msExitFullscreen || d.mozCancelFullScreen || d.webkitExitFullscreen).call(d);
}
function isAndroid() {
  var isItChromium = isChromium();
  var isItGecko = isGecko();
  if (!isItChromium && !isItGecko) {
    return false;
  }
  var w = window;
  return countTruthy([
    "onorientationchange" in w,
    "orientation" in w,
    isItChromium && !("SharedWorker" in w),
    isItGecko && /android/i.test(navigator.appVersion)
  ]) >= 2;
}
function getAudioFingerprint() {
  var w = window;
  var AudioContext = w.OfflineAudioContext || w.webkitOfflineAudioContext;
  if (!AudioContext) {
    return -2;
  }
  if (doesCurrentBrowserSuspendAudioContext()) {
    return -1;
  }
  var hashFromIndex = 4500;
  var hashToIndex = 5e3;
  var context = new AudioContext(1, hashToIndex, 44100);
  var oscillator = context.createOscillator();
  oscillator.type = "triangle";
  oscillator.frequency.value = 1e4;
  var compressor = context.createDynamicsCompressor();
  compressor.threshold.value = -50;
  compressor.knee.value = 40;
  compressor.ratio.value = 12;
  compressor.attack.value = 0;
  compressor.release.value = 0.25;
  oscillator.connect(compressor);
  compressor.connect(context.destination);
  oscillator.start(0);
  var _a2 = startRenderingAudio(context), renderPromise = _a2[0], finishRendering = _a2[1];
  var fingerprintPromise = renderPromise.then(function(buffer) {
    return getHash(buffer.getChannelData(0).subarray(hashFromIndex));
  }, function(error2) {
    if (error2.name === "timeout" || error2.name === "suspended") {
      return -3;
    }
    throw error2;
  });
  suppressUnhandledRejectionWarning(fingerprintPromise);
  return function() {
    finishRendering();
    return fingerprintPromise;
  };
}
function doesCurrentBrowserSuspendAudioContext() {
  return isWebKit() && !isDesktopSafari() && !isWebKit606OrNewer();
}
function startRenderingAudio(context) {
  var renderTryMaxCount = 3;
  var renderRetryDelay = 500;
  var runningMaxAwaitTime = 500;
  var runningSufficientTime = 5e3;
  var finalize = function() {
    return void 0;
  };
  var resultPromise = new Promise(function(resolve, reject) {
    var isFinalized = false;
    var renderTryCount = 0;
    var startedRunningAt = 0;
    context.oncomplete = function(event) {
      return resolve(event.renderedBuffer);
    };
    var startRunningTimeout = function() {
      setTimeout(function() {
        return reject(makeInnerError(
          "timeout"
          /* InnerErrorName.Timeout */
        ));
      }, Math.min(runningMaxAwaitTime, startedRunningAt + runningSufficientTime - Date.now()));
    };
    var tryRender = function() {
      try {
        var renderingPromise = context.startRendering();
        if (isPromise(renderingPromise)) {
          suppressUnhandledRejectionWarning(renderingPromise);
        }
        switch (context.state) {
          case "running":
            startedRunningAt = Date.now();
            if (isFinalized) {
              startRunningTimeout();
            }
            break;
          case "suspended":
            if (!document.hidden) {
              renderTryCount++;
            }
            if (isFinalized && renderTryCount >= renderTryMaxCount) {
              reject(makeInnerError(
                "suspended"
                /* InnerErrorName.Suspended */
              ));
            } else {
              setTimeout(tryRender, renderRetryDelay);
            }
            break;
        }
      } catch (error2) {
        reject(error2);
      }
    };
    tryRender();
    finalize = function() {
      if (!isFinalized) {
        isFinalized = true;
        if (startedRunningAt > 0) {
          startRunningTimeout();
        }
      }
    };
  });
  return [resultPromise, finalize];
}
function getHash(signal) {
  var hash2 = 0;
  for (var i = 0; i < signal.length; ++i) {
    hash2 += Math.abs(signal[i]);
  }
  return hash2;
}
function makeInnerError(name) {
  var error2 = new Error(name);
  error2.name = name;
  return error2;
}
function withIframe(action, initialHtml, domPollInterval) {
  var _a2, _b, _c;
  if (domPollInterval === void 0) {
    domPollInterval = 50;
  }
  return __awaiter$2(this, void 0, void 0, function() {
    var d, iframe;
    return __generator$2(this, function(_d) {
      switch (_d.label) {
        case 0:
          d = document;
          _d.label = 1;
        case 1:
          if (!!d.body)
            return [3, 3];
          return [4, wait(domPollInterval)];
        case 2:
          _d.sent();
          return [3, 1];
        case 3:
          iframe = d.createElement("iframe");
          _d.label = 4;
        case 4:
          _d.trys.push([4, , 10, 11]);
          return [4, new Promise(function(_resolve, _reject) {
            var isComplete = false;
            var resolve = function() {
              isComplete = true;
              _resolve();
            };
            var reject = function(error2) {
              isComplete = true;
              _reject(error2);
            };
            iframe.onload = resolve;
            iframe.onerror = reject;
            var style = iframe.style;
            style.setProperty("display", "block", "important");
            style.position = "absolute";
            style.top = "0";
            style.left = "0";
            style.visibility = "hidden";
            if (initialHtml && "srcdoc" in iframe) {
              iframe.srcdoc = initialHtml;
            } else {
              iframe.src = "about:blank";
            }
            d.body.appendChild(iframe);
            var checkReadyState = function() {
              var _a3, _b2;
              if (isComplete) {
                return;
              }
              if (((_b2 = (_a3 = iframe.contentWindow) === null || _a3 === void 0 ? void 0 : _a3.document) === null || _b2 === void 0 ? void 0 : _b2.readyState) === "complete") {
                resolve();
              } else {
                setTimeout(checkReadyState, 10);
              }
            };
            checkReadyState();
          })];
        case 5:
          _d.sent();
          _d.label = 6;
        case 6:
          if (!!((_b = (_a2 = iframe.contentWindow) === null || _a2 === void 0 ? void 0 : _a2.document) === null || _b === void 0 ? void 0 : _b.body))
            return [3, 8];
          return [4, wait(domPollInterval)];
        case 7:
          _d.sent();
          return [3, 6];
        case 8:
          return [4, action(iframe, iframe.contentWindow)];
        case 9:
          return [2, _d.sent()];
        case 10:
          (_c = iframe.parentNode) === null || _c === void 0 ? void 0 : _c.removeChild(iframe);
          return [
            7
            /*endfinally*/
          ];
        case 11:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function selectorToElement(selector) {
  var _a2 = parseSimpleCssSelector(selector), tag = _a2[0], attributes = _a2[1];
  var element = document.createElement(tag !== null && tag !== void 0 ? tag : "div");
  for (var _i = 0, _b = Object.keys(attributes); _i < _b.length; _i++) {
    var name_1 = _b[_i];
    var value = attributes[name_1].join(" ");
    if (name_1 === "style") {
      addStyleString(element.style, value);
    } else {
      element.setAttribute(name_1, value);
    }
  }
  return element;
}
function addStyleString(style, source) {
  for (var _i = 0, _a2 = source.split(";"); _i < _a2.length; _i++) {
    var property = _a2[_i];
    var match2 = /^\s*([\w-]+)\s*:\s*(.+?)(\s*!([\w-]+))?\s*$/.exec(property);
    if (match2) {
      var name_2 = match2[1], value = match2[2], priority = match2[4];
      style.setProperty(name_2, value, priority || "");
    }
  }
}
var testString = "mmMwWLliI0O&1";
var textSize = "48px";
var baseFonts = ["monospace", "sans-serif", "serif"];
var fontList = [
  // This is android-specific font from "Roboto" family
  "sans-serif-thin",
  "ARNO PRO",
  "Agency FB",
  "Arabic Typesetting",
  "Arial Unicode MS",
  "AvantGarde Bk BT",
  "BankGothic Md BT",
  "Batang",
  "Bitstream Vera Sans Mono",
  "Calibri",
  "Century",
  "Century Gothic",
  "Clarendon",
  "EUROSTILE",
  "Franklin Gothic",
  "Futura Bk BT",
  "Futura Md BT",
  "GOTHAM",
  "Gill Sans",
  "HELV",
  "Haettenschweiler",
  "Helvetica Neue",
  "Humanst521 BT",
  "Leelawadee",
  "Letter Gothic",
  "Levenim MT",
  "Lucida Bright",
  "Lucida Sans",
  "Menlo",
  "MS Mincho",
  "MS Outlook",
  "MS Reference Specialty",
  "MS UI Gothic",
  "MT Extra",
  "MYRIAD PRO",
  "Marlett",
  "Meiryo UI",
  "Microsoft Uighur",
  "Minion Pro",
  "Monotype Corsiva",
  "PMingLiU",
  "Pristina",
  "SCRIPTINA",
  "Segoe UI Light",
  "Serifa",
  "SimHei",
  "Small Fonts",
  "Staccato222 BT",
  "TRAJAN PRO",
  "Univers CE 55 Medium",
  "Vrinda",
  "ZWAdobeF"
];
function getFonts() {
  return withIframe(function(_23, _a2) {
    var document2 = _a2.document;
    var holder = document2.body;
    holder.style.fontSize = textSize;
    var spansContainer = document2.createElement("div");
    var defaultWidth = {};
    var defaultHeight = {};
    var createSpan = function(fontFamily) {
      var span = document2.createElement("span");
      var style = span.style;
      style.position = "absolute";
      style.top = "0";
      style.left = "0";
      style.fontFamily = fontFamily;
      span.textContent = testString;
      spansContainer.appendChild(span);
      return span;
    };
    var createSpanWithFonts = function(fontToDetect, baseFont) {
      return createSpan("'".concat(fontToDetect, "',").concat(baseFont));
    };
    var initializeBaseFontsSpans = function() {
      return baseFonts.map(createSpan);
    };
    var initializeFontsSpans = function() {
      var spans = {};
      var _loop_1 = function(font2) {
        spans[font2] = baseFonts.map(function(baseFont) {
          return createSpanWithFonts(font2, baseFont);
        });
      };
      for (var _i = 0, fontList_1 = fontList; _i < fontList_1.length; _i++) {
        var font = fontList_1[_i];
        _loop_1(font);
      }
      return spans;
    };
    var isFontAvailable = function(fontSpans) {
      return baseFonts.some(function(baseFont, baseFontIndex) {
        return fontSpans[baseFontIndex].offsetWidth !== defaultWidth[baseFont] || fontSpans[baseFontIndex].offsetHeight !== defaultHeight[baseFont];
      });
    };
    var baseFontsSpans = initializeBaseFontsSpans();
    var fontsSpans = initializeFontsSpans();
    holder.appendChild(spansContainer);
    for (var index = 0; index < baseFonts.length; index++) {
      defaultWidth[baseFonts[index]] = baseFontsSpans[index].offsetWidth;
      defaultHeight[baseFonts[index]] = baseFontsSpans[index].offsetHeight;
    }
    return fontList.filter(function(font) {
      return isFontAvailable(fontsSpans[font]);
    });
  });
}
function getPlugins() {
  var rawPlugins = navigator.plugins;
  if (!rawPlugins) {
    return void 0;
  }
  var plugins = [];
  for (var i = 0; i < rawPlugins.length; ++i) {
    var plugin = rawPlugins[i];
    if (!plugin) {
      continue;
    }
    var mimeTypes = [];
    for (var j = 0; j < plugin.length; ++j) {
      var mimeType = plugin[j];
      mimeTypes.push({
        type: mimeType.type,
        suffixes: mimeType.suffixes
      });
    }
    plugins.push({
      name: plugin.name,
      description: plugin.description,
      mimeTypes
    });
  }
  return plugins;
}
function getCanvasFingerprint() {
  var winding = false;
  var geometry;
  var text;
  var _a2 = makeCanvasContext(), canvas = _a2[0], context = _a2[1];
  if (!isSupported(canvas, context)) {
    geometry = text = "";
  } else {
    winding = doesSupportWinding(context);
    renderTextImage(canvas, context);
    var textImage1 = canvasToString(canvas);
    var textImage2 = canvasToString(canvas);
    if (textImage1 !== textImage2) {
      geometry = text = "unstable";
    } else {
      text = textImage1;
      renderGeometryImage(canvas, context);
      geometry = canvasToString(canvas);
    }
  }
  return { winding, geometry, text };
}
function makeCanvasContext() {
  var canvas = document.createElement("canvas");
  canvas.width = 1;
  canvas.height = 1;
  return [canvas, canvas.getContext("2d")];
}
function isSupported(canvas, context) {
  return !!(context && canvas.toDataURL);
}
function doesSupportWinding(context) {
  context.rect(0, 0, 10, 10);
  context.rect(2, 2, 6, 6);
  return !context.isPointInPath(5, 5, "evenodd");
}
function renderTextImage(canvas, context) {
  canvas.width = 240;
  canvas.height = 60;
  context.textBaseline = "alphabetic";
  context.fillStyle = "#f60";
  context.fillRect(100, 1, 62, 20);
  context.fillStyle = "#069";
  context.font = '11pt "Times New Roman"';
  var printedText = "Cwm fjordbank gly ".concat(
    String.fromCharCode(55357, 56835)
    /* 😃 */
  );
  context.fillText(printedText, 2, 15);
  context.fillStyle = "rgba(102, 204, 0, 0.2)";
  context.font = "18pt Arial";
  context.fillText(printedText, 4, 45);
}
function renderGeometryImage(canvas, context) {
  canvas.width = 122;
  canvas.height = 110;
  context.globalCompositeOperation = "multiply";
  for (var _i = 0, _a2 = [
    ["#f2f", 40, 40],
    ["#2ff", 80, 40],
    ["#ff2", 60, 80]
  ]; _i < _a2.length; _i++) {
    var _b = _a2[_i], color = _b[0], x = _b[1], y = _b[2];
    context.fillStyle = color;
    context.beginPath();
    context.arc(x, y, 40, 0, Math.PI * 2, true);
    context.closePath();
    context.fill();
  }
  context.fillStyle = "#f9c";
  context.arc(60, 60, 60, 0, Math.PI * 2, true);
  context.arc(60, 60, 20, 0, Math.PI * 2, true);
  context.fill("evenodd");
}
function canvasToString(canvas) {
  return canvas.toDataURL();
}
function getTouchSupport() {
  var n = navigator;
  var maxTouchPoints = 0;
  var touchEvent;
  if (n.maxTouchPoints !== void 0) {
    maxTouchPoints = toInt(n.maxTouchPoints);
  } else if (n.msMaxTouchPoints !== void 0) {
    maxTouchPoints = n.msMaxTouchPoints;
  }
  try {
    document.createEvent("TouchEvent");
    touchEvent = true;
  } catch (_a2) {
    touchEvent = false;
  }
  var touchStart = "ontouchstart" in window;
  return {
    maxTouchPoints,
    touchEvent,
    touchStart
  };
}
function getOsCpu() {
  return navigator.oscpu;
}
function getLanguages() {
  var n = navigator;
  var result = [];
  var language = n.language || n.userLanguage || n.browserLanguage || n.systemLanguage;
  if (language !== void 0) {
    result.push([language]);
  }
  if (Array.isArray(n.languages)) {
    if (!(isChromium() && isChromium86OrNewer())) {
      result.push(n.languages);
    }
  } else if (typeof n.languages === "string") {
    var languages = n.languages;
    if (languages) {
      result.push(languages.split(","));
    }
  }
  return result;
}
function getColorDepth() {
  return window.screen.colorDepth;
}
function getDeviceMemory() {
  return replaceNaN(toFloat(navigator.deviceMemory), void 0);
}
function getScreenResolution() {
  var s = screen;
  var parseDimension = function(value) {
    return replaceNaN(toInt(value), null);
  };
  var dimensions = [parseDimension(s.width), parseDimension(s.height)];
  dimensions.sort().reverse();
  return dimensions;
}
var screenFrameCheckInterval = 2500;
var roundingPrecision = 10;
var screenFrameBackup;
var screenFrameSizeTimeoutId;
function watchScreenFrame() {
  if (screenFrameSizeTimeoutId !== void 0) {
    return;
  }
  var checkScreenFrame = function() {
    var frameSize = getCurrentScreenFrame();
    if (isFrameSizeNull(frameSize)) {
      screenFrameSizeTimeoutId = setTimeout(checkScreenFrame, screenFrameCheckInterval);
    } else {
      screenFrameBackup = frameSize;
      screenFrameSizeTimeoutId = void 0;
    }
  };
  checkScreenFrame();
}
function getScreenFrame() {
  var _this = this;
  watchScreenFrame();
  return function() {
    return __awaiter$2(_this, void 0, void 0, function() {
      var frameSize;
      return __generator$2(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            frameSize = getCurrentScreenFrame();
            if (!isFrameSizeNull(frameSize))
              return [3, 2];
            if (screenFrameBackup) {
              return [2, __spreadArray$2([], screenFrameBackup, true)];
            }
            if (!getFullscreenElement())
              return [3, 2];
            return [4, exitFullscreen()];
          case 1:
            _a2.sent();
            frameSize = getCurrentScreenFrame();
            _a2.label = 2;
          case 2:
            if (!isFrameSizeNull(frameSize)) {
              screenFrameBackup = frameSize;
            }
            return [2, frameSize];
        }
      });
    });
  };
}
function getRoundedScreenFrame() {
  var _this = this;
  var screenFrameGetter = getScreenFrame();
  return function() {
    return __awaiter$2(_this, void 0, void 0, function() {
      var frameSize, processSize;
      return __generator$2(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            return [4, screenFrameGetter()];
          case 1:
            frameSize = _a2.sent();
            processSize = function(sideSize) {
              return sideSize === null ? null : round(sideSize, roundingPrecision);
            };
            return [2, [processSize(frameSize[0]), processSize(frameSize[1]), processSize(frameSize[2]), processSize(frameSize[3])]];
        }
      });
    });
  };
}
function getCurrentScreenFrame() {
  var s = screen;
  return [
    replaceNaN(toFloat(s.availTop), null),
    replaceNaN(toFloat(s.width) - toFloat(s.availWidth) - replaceNaN(toFloat(s.availLeft), 0), null),
    replaceNaN(toFloat(s.height) - toFloat(s.availHeight) - replaceNaN(toFloat(s.availTop), 0), null),
    replaceNaN(toFloat(s.availLeft), null)
  ];
}
function isFrameSizeNull(frameSize) {
  for (var i = 0; i < 4; ++i) {
    if (frameSize[i]) {
      return false;
    }
  }
  return true;
}
function getHardwareConcurrency() {
  return replaceNaN(toInt(navigator.hardwareConcurrency), void 0);
}
function getTimezone() {
  var _a2;
  var DateTimeFormat = (_a2 = window.Intl) === null || _a2 === void 0 ? void 0 : _a2.DateTimeFormat;
  if (DateTimeFormat) {
    var timezone = new DateTimeFormat().resolvedOptions().timeZone;
    if (timezone) {
      return timezone;
    }
  }
  var offset = -getTimezoneOffset();
  return "UTC".concat(offset >= 0 ? "+" : "").concat(Math.abs(offset));
}
function getTimezoneOffset() {
  var currentYear = (/* @__PURE__ */ new Date()).getFullYear();
  return Math.max(
    // `getTimezoneOffset` returns a number as a string in some unidentified cases
    toFloat(new Date(currentYear, 0, 1).getTimezoneOffset()),
    toFloat(new Date(currentYear, 6, 1).getTimezoneOffset())
  );
}
function getSessionStorage() {
  try {
    return !!window.sessionStorage;
  } catch (error2) {
    return true;
  }
}
function getLocalStorage() {
  try {
    return !!window.localStorage;
  } catch (e) {
    return true;
  }
}
function getIndexedDB() {
  if (isTrident() || isEdgeHTML()) {
    return void 0;
  }
  try {
    return !!window.indexedDB;
  } catch (e) {
    return true;
  }
}
function getOpenDatabase() {
  return !!window.openDatabase;
}
function getCpuClass() {
  return navigator.cpuClass;
}
function getPlatform() {
  var platform = navigator.platform;
  if (platform === "MacIntel") {
    if (isWebKit() && !isDesktopSafari()) {
      return isIPad() ? "iPad" : "iPhone";
    }
  }
  return platform;
}
function getVendor() {
  return navigator.vendor || "";
}
function getVendorFlavors() {
  var flavors = [];
  for (var _i = 0, _a2 = [
    // Blink and some browsers on iOS
    "chrome",
    // Safari on macOS
    "safari",
    // Chrome on iOS (checked in 85 on 13 and 87 on 14)
    "__crWeb",
    "__gCrWeb",
    // Yandex Browser on iOS, macOS and Android (checked in 21.2 on iOS 14, macOS and Android)
    "yandex",
    // Yandex Browser on iOS (checked in 21.2 on 14)
    "__yb",
    "__ybro",
    // Firefox on iOS (checked in 32 on 14)
    "__firefox__",
    // Edge on iOS (checked in 46 on 14)
    "__edgeTrackingPreventionStatistics",
    "webkit",
    // Opera Touch on iOS (checked in 2.6 on 14)
    "oprt",
    // Samsung Internet on Android (checked in 11.1)
    "samsungAr",
    // UC Browser on Android (checked in 12.10 and 13.0)
    "ucweb",
    "UCShellJava",
    // Puffin on Android (checked in 9.0)
    "puffinDevice"
    // UC on iOS and Opera on Android have no specific global variables
    // Edge for Android isn't checked
  ]; _i < _a2.length; _i++) {
    var key = _a2[_i];
    var value = window[key];
    if (value && typeof value === "object") {
      flavors.push(key);
    }
  }
  return flavors.sort();
}
function areCookiesEnabled() {
  var d = document;
  try {
    d.cookie = "cookietest=1; SameSite=Strict;";
    var result = d.cookie.indexOf("cookietest=") !== -1;
    d.cookie = "cookietest=1; SameSite=Strict; expires=Thu, 01-Jan-1970 00:00:01 GMT";
    return result;
  } catch (e) {
    return false;
  }
}
function getFilters() {
  var fromB64 = atob;
  return {
    abpIndo: [
      "#Iklan-Melayang",
      "#Kolom-Iklan-728",
      "#SidebarIklan-wrapper",
      '[title="ALIENBOLA" i]',
      fromB64("I0JveC1CYW5uZXItYWRz")
    ],
    abpvn: [".quangcao", "#mobileCatfish", fromB64("LmNsb3NlLWFkcw=="), '[id^="bn_bottom_fixed_"]', "#pmadv"],
    adBlockFinland: [
      ".mainostila",
      fromB64("LnNwb25zb3JpdA=="),
      ".ylamainos",
      fromB64("YVtocmVmKj0iL2NsaWNrdGhyZ2guYXNwPyJd"),
      fromB64("YVtocmVmXj0iaHR0cHM6Ly9hcHAucmVhZHBlYWsuY29tL2FkcyJd")
    ],
    adBlockPersian: [
      "#navbar_notice_50",
      ".kadr",
      'TABLE[width="140px"]',
      "#divAgahi",
      fromB64("YVtocmVmXj0iaHR0cDovL2cxLnYuZndtcm0ubmV0L2FkLyJd")
    ],
    adBlockWarningRemoval: [
      "#adblock-honeypot",
      ".adblocker-root",
      ".wp_adblock_detect",
      fromB64("LmhlYWRlci1ibG9ja2VkLWFk"),
      fromB64("I2FkX2Jsb2NrZXI=")
    ],
    adGuardAnnoyances: [
      ".hs-sosyal",
      "#cookieconsentdiv",
      'div[class^="app_gdpr"]',
      ".as-oil",
      '[data-cypress="soft-push-notification-modal"]'
    ],
    adGuardBase: [
      ".BetterJsPopOverlay",
      fromB64("I2FkXzMwMFgyNTA="),
      fromB64("I2Jhbm5lcmZsb2F0MjI="),
      fromB64("I2NhbXBhaWduLWJhbm5lcg=="),
      fromB64("I0FkLUNvbnRlbnQ=")
    ],
    adGuardChinese: [
      fromB64("LlppX2FkX2FfSA=="),
      fromB64("YVtocmVmKj0iLmh0aGJldDM0LmNvbSJd"),
      "#widget-quan",
      fromB64("YVtocmVmKj0iLzg0OTkyMDIwLnh5eiJd"),
      fromB64("YVtocmVmKj0iLjE5NTZobC5jb20vIl0=")
    ],
    adGuardFrench: [
      "#pavePub",
      fromB64("LmFkLWRlc2t0b3AtcmVjdGFuZ2xl"),
      ".mobile_adhesion",
      ".widgetadv",
      fromB64("LmFkc19iYW4=")
    ],
    adGuardGerman: ['aside[data-portal-id="leaderboard"]'],
    adGuardJapanese: [
      "#kauli_yad_1",
      fromB64("YVtocmVmXj0iaHR0cDovL2FkMi50cmFmZmljZ2F0ZS5uZXQvIl0="),
      fromB64("Ll9wb3BJbl9pbmZpbml0ZV9hZA=="),
      fromB64("LmFkZ29vZ2xl"),
      fromB64("Ll9faXNib29zdFJldHVybkFk")
    ],
    adGuardMobile: [
      fromB64("YW1wLWF1dG8tYWRz"),
      fromB64("LmFtcF9hZA=="),
      'amp-embed[type="24smi"]',
      "#mgid_iframe1",
      fromB64("I2FkX2ludmlld19hcmVh")
    ],
    adGuardRussian: [
      fromB64("YVtocmVmXj0iaHR0cHM6Ly9hZC5sZXRtZWFkcy5jb20vIl0="),
      fromB64("LnJlY2xhbWE="),
      'div[id^="smi2adblock"]',
      fromB64("ZGl2W2lkXj0iQWRGb3hfYmFubmVyXyJd"),
      "#psyduckpockeball"
    ],
    adGuardSocial: [
      fromB64("YVtocmVmXj0iLy93d3cuc3R1bWJsZXVwb24uY29tL3N1Ym1pdD91cmw9Il0="),
      fromB64("YVtocmVmXj0iLy90ZWxlZ3JhbS5tZS9zaGFyZS91cmw/Il0="),
      ".etsy-tweet",
      "#inlineShare",
      ".popup-social"
    ],
    adGuardSpanishPortuguese: ["#barraPublicidade", "#Publicidade", "#publiEspecial", "#queTooltip", ".cnt-publi"],
    adGuardTrackingProtection: [
      "#qoo-counter",
      fromB64("YVtocmVmXj0iaHR0cDovL2NsaWNrLmhvdGxvZy5ydS8iXQ=="),
      fromB64("YVtocmVmXj0iaHR0cDovL2hpdGNvdW50ZXIucnUvdG9wL3N0YXQucGhwIl0="),
      fromB64("YVtocmVmXj0iaHR0cDovL3RvcC5tYWlsLnJ1L2p1bXAiXQ=="),
      "#top100counter"
    ],
    adGuardTurkish: [
      "#backkapat",
      fromB64("I3Jla2xhbWk="),
      fromB64("YVtocmVmXj0iaHR0cDovL2Fkc2Vydi5vbnRlay5jb20udHIvIl0="),
      fromB64("YVtocmVmXj0iaHR0cDovL2l6bGVuemkuY29tL2NhbXBhaWduLyJd"),
      fromB64("YVtocmVmXj0iaHR0cDovL3d3dy5pbnN0YWxsYWRzLm5ldC8iXQ==")
    ],
    bulgarian: [fromB64("dGQjZnJlZW5ldF90YWJsZV9hZHM="), "#ea_intext_div", ".lapni-pop-over", "#xenium_hot_offers"],
    easyList: [
      ".yb-floorad",
      fromB64("LndpZGdldF9wb19hZHNfd2lkZ2V0"),
      fromB64("LnRyYWZmaWNqdW5reS1hZA=="),
      ".textad_headline",
      fromB64("LnNwb25zb3JlZC10ZXh0LWxpbmtz")
    ],
    easyListChina: [
      fromB64("LmFwcGd1aWRlLXdyYXBbb25jbGljayo9ImJjZWJvcy5jb20iXQ=="),
      fromB64("LmZyb250cGFnZUFkdk0="),
      "#taotaole",
      "#aafoot.top_box",
      ".cfa_popup"
    ],
    easyListCookie: [
      ".ezmob-footer",
      ".cc-CookieWarning",
      "[data-cookie-number]",
      fromB64("LmF3LWNvb2tpZS1iYW5uZXI="),
      ".sygnal24-gdpr-modal-wrap"
    ],
    easyListCzechSlovak: [
      "#onlajny-stickers",
      fromB64("I3Jla2xhbW5pLWJveA=="),
      fromB64("LnJla2xhbWEtbWVnYWJvYXJk"),
      ".sklik",
      fromB64("W2lkXj0ic2tsaWtSZWtsYW1hIl0=")
    ],
    easyListDutch: [
      fromB64("I2FkdmVydGVudGll"),
      fromB64("I3ZpcEFkbWFya3RCYW5uZXJCbG9jaw=="),
      ".adstekst",
      fromB64("YVtocmVmXj0iaHR0cHM6Ly94bHR1YmUubmwvY2xpY2svIl0="),
      "#semilo-lrectangle"
    ],
    easyListGermany: [
      "#SSpotIMPopSlider",
      fromB64("LnNwb25zb3JsaW5rZ3J1ZW4="),
      fromB64("I3dlcmJ1bmdza3k="),
      fromB64("I3Jla2xhbWUtcmVjaHRzLW1pdHRl"),
      fromB64("YVtocmVmXj0iaHR0cHM6Ly9iZDc0Mi5jb20vIl0=")
    ],
    easyListItaly: [
      fromB64("LmJveF9hZHZfYW5udW5jaQ=="),
      ".sb-box-pubbliredazionale",
      fromB64("YVtocmVmXj0iaHR0cDovL2FmZmlsaWF6aW9uaWFkcy5zbmFpLml0LyJd"),
      fromB64("YVtocmVmXj0iaHR0cHM6Ly9hZHNlcnZlci5odG1sLml0LyJd"),
      fromB64("YVtocmVmXj0iaHR0cHM6Ly9hZmZpbGlhemlvbmlhZHMuc25haS5pdC8iXQ==")
    ],
    easyListLithuania: [
      fromB64("LnJla2xhbW9zX3RhcnBhcw=="),
      fromB64("LnJla2xhbW9zX251b3JvZG9z"),
      fromB64("aW1nW2FsdD0iUmVrbGFtaW5pcyBza3lkZWxpcyJd"),
      fromB64("aW1nW2FsdD0iRGVkaWt1b3RpLmx0IHNlcnZlcmlhaSJd"),
      fromB64("aW1nW2FsdD0iSG9zdGluZ2FzIFNlcnZlcmlhaS5sdCJd")
    ],
    estonian: [fromB64("QVtocmVmKj0iaHR0cDovL3BheTRyZXN1bHRzMjQuZXUiXQ==")],
    fanboyAnnoyances: ["#ac-lre-player", ".navigate-to-top", "#subscribe_popup", ".newsletter_holder", "#back-top"],
    fanboyAntiFacebook: [".util-bar-module-firefly-visible"],
    fanboyEnhancedTrackers: [
      ".open.pushModal",
      "#issuem-leaky-paywall-articles-zero-remaining-nag",
      "#sovrn_container",
      'div[class$="-hide"][zoompage-fontsize][style="display: block;"]',
      ".BlockNag__Card"
    ],
    fanboySocial: ["#FollowUs", "#meteored_share", "#social_follow", ".article-sharer", ".community__social-desc"],
    frellwitSwedish: [
      fromB64("YVtocmVmKj0iY2FzaW5vcHJvLnNlIl1bdGFyZ2V0PSJfYmxhbmsiXQ=="),
      fromB64("YVtocmVmKj0iZG9rdG9yLXNlLm9uZWxpbmsubWUiXQ=="),
      "article.category-samarbete",
      fromB64("ZGl2LmhvbGlkQWRz"),
      "ul.adsmodern"
    ],
    greekAdBlock: [
      fromB64("QVtocmVmKj0iYWRtYW4ub3RlbmV0LmdyL2NsaWNrPyJd"),
      fromB64("QVtocmVmKj0iaHR0cDovL2F4aWFiYW5uZXJzLmV4b2R1cy5nci8iXQ=="),
      fromB64("QVtocmVmKj0iaHR0cDovL2ludGVyYWN0aXZlLmZvcnRobmV0LmdyL2NsaWNrPyJd"),
      "DIV.agores300",
      "TABLE.advright"
    ],
    hungarian: [
      "#cemp_doboz",
      ".optimonk-iframe-container",
      fromB64("LmFkX19tYWlu"),
      fromB64("W2NsYXNzKj0iR29vZ2xlQWRzIl0="),
      "#hirdetesek_box"
    ],
    iDontCareAboutCookies: [
      '.alert-info[data-block-track*="CookieNotice"]',
      ".ModuleTemplateCookieIndicator",
      ".o--cookies--container",
      "#cookies-policy-sticky",
      "#stickyCookieBar"
    ],
    icelandicAbp: [fromB64("QVtocmVmXj0iL2ZyYW1ld29yay9yZXNvdXJjZXMvZm9ybXMvYWRzLmFzcHgiXQ==")],
    latvian: [
      fromB64("YVtocmVmPSJodHRwOi8vd3d3LnNhbGlkemluaS5sdi8iXVtzdHlsZT0iZGlzcGxheTogYmxvY2s7IHdpZHRoOiAxMjBweDsgaGVpZ2h0OiA0MHB4OyBvdmVyZmxvdzogaGlkZGVuOyBwb3NpdGlvbjogcmVsYXRpdmU7Il0="),
      fromB64("YVtocmVmPSJodHRwOi8vd3d3LnNhbGlkemluaS5sdi8iXVtzdHlsZT0iZGlzcGxheTogYmxvY2s7IHdpZHRoOiA4OHB4OyBoZWlnaHQ6IDMxcHg7IG92ZXJmbG93OiBoaWRkZW47IHBvc2l0aW9uOiByZWxhdGl2ZTsiXQ==")
    ],
    listKr: [
      fromB64("YVtocmVmKj0iLy9hZC5wbGFuYnBsdXMuY28ua3IvIl0="),
      fromB64("I2xpdmVyZUFkV3JhcHBlcg=="),
      fromB64("YVtocmVmKj0iLy9hZHYuaW1hZHJlcC5jby5rci8iXQ=="),
      fromB64("aW5zLmZhc3R2aWV3LWFk"),
      ".revenue_unit_item.dable"
    ],
    listeAr: [
      fromB64("LmdlbWluaUxCMUFk"),
      ".right-and-left-sponsers",
      fromB64("YVtocmVmKj0iLmFmbGFtLmluZm8iXQ=="),
      fromB64("YVtocmVmKj0iYm9vcmFxLm9yZyJd"),
      fromB64("YVtocmVmKj0iZHViaXp6bGUuY29tL2FyLz91dG1fc291cmNlPSJd")
    ],
    listeFr: [
      fromB64("YVtocmVmXj0iaHR0cDovL3Byb21vLnZhZG9yLmNvbS8iXQ=="),
      fromB64("I2FkY29udGFpbmVyX3JlY2hlcmNoZQ=="),
      fromB64("YVtocmVmKj0id2Vib3JhbWEuZnIvZmNnaS1iaW4vIl0="),
      ".site-pub-interstitiel",
      'div[id^="crt-"][data-criteo-id]'
    ],
    officialPolish: [
      "#ceneo-placeholder-ceneo-12",
      fromB64("W2hyZWZePSJodHRwczovL2FmZi5zZW5kaHViLnBsLyJd"),
      fromB64("YVtocmVmXj0iaHR0cDovL2Fkdm1hbmFnZXIudGVjaGZ1bi5wbC9yZWRpcmVjdC8iXQ=="),
      fromB64("YVtocmVmXj0iaHR0cDovL3d3dy50cml6ZXIucGwvP3V0bV9zb3VyY2UiXQ=="),
      fromB64("ZGl2I3NrYXBpZWNfYWQ=")
    ],
    ro: [
      fromB64("YVtocmVmXj0iLy9hZmZ0cmsuYWx0ZXgucm8vQ291bnRlci9DbGljayJd"),
      fromB64("YVtocmVmXj0iaHR0cHM6Ly9ibGFja2ZyaWRheXNhbGVzLnJvL3Ryay9zaG9wLyJd"),
      fromB64("YVtocmVmXj0iaHR0cHM6Ly9ldmVudC4ycGVyZm9ybWFudC5jb20vZXZlbnRzL2NsaWNrIl0="),
      fromB64("YVtocmVmXj0iaHR0cHM6Ly9sLnByb2ZpdHNoYXJlLnJvLyJd"),
      'a[href^="/url/"]'
    ],
    ruAd: [
      fromB64("YVtocmVmKj0iLy9mZWJyYXJlLnJ1LyJd"),
      fromB64("YVtocmVmKj0iLy91dGltZy5ydS8iXQ=="),
      fromB64("YVtocmVmKj0iOi8vY2hpa2lkaWtpLnJ1Il0="),
      "#pgeldiz",
      ".yandex-rtb-block"
    ],
    thaiAds: [
      "a[href*=macau-uta-popup]",
      fromB64("I2Fkcy1nb29nbGUtbWlkZGxlX3JlY3RhbmdsZS1ncm91cA=="),
      fromB64("LmFkczMwMHM="),
      ".bumq",
      ".img-kosana"
    ],
    webAnnoyancesUltralist: [
      "#mod-social-share-2",
      "#social-tools",
      fromB64("LmN0cGwtZnVsbGJhbm5lcg=="),
      ".zergnet-recommend",
      ".yt.btn-link.btn-md.btn"
    ]
  };
}
function getDomBlockers(_a2) {
  var _b = _a2 === void 0 ? {} : _a2, debug = _b.debug;
  return __awaiter$2(this, void 0, void 0, function() {
    var filters, filterNames, allSelectors, blockedSelectors, activeBlockers;
    var _c;
    return __generator$2(this, function(_d) {
      switch (_d.label) {
        case 0:
          if (!isApplicable()) {
            return [2, void 0];
          }
          filters = getFilters();
          filterNames = Object.keys(filters);
          allSelectors = (_c = []).concat.apply(_c, filterNames.map(function(filterName) {
            return filters[filterName];
          }));
          return [4, getBlockedSelectors(allSelectors)];
        case 1:
          blockedSelectors = _d.sent();
          if (debug) {
            printDebug(filters, blockedSelectors);
          }
          activeBlockers = filterNames.filter(function(filterName) {
            var selectors = filters[filterName];
            var blockedCount = countTruthy(selectors.map(function(selector) {
              return blockedSelectors[selector];
            }));
            return blockedCount > selectors.length * 0.6;
          });
          activeBlockers.sort();
          return [2, activeBlockers];
      }
    });
  });
}
function isApplicable() {
  return isWebKit() || isAndroid();
}
function getBlockedSelectors(selectors) {
  var _a2;
  return __awaiter$2(this, void 0, void 0, function() {
    var d, root, elements, blockedSelectors, i, element, holder, i;
    return __generator$2(this, function(_b) {
      switch (_b.label) {
        case 0:
          d = document;
          root = d.createElement("div");
          elements = new Array(selectors.length);
          blockedSelectors = {};
          forceShow(root);
          for (i = 0; i < selectors.length; ++i) {
            element = selectorToElement(selectors[i]);
            if (element.tagName === "DIALOG") {
              element.show();
            }
            holder = d.createElement("div");
            forceShow(holder);
            holder.appendChild(element);
            root.appendChild(holder);
            elements[i] = element;
          }
          _b.label = 1;
        case 1:
          if (!!d.body)
            return [3, 3];
          return [4, wait(50)];
        case 2:
          _b.sent();
          return [3, 1];
        case 3:
          d.body.appendChild(root);
          try {
            for (i = 0; i < selectors.length; ++i) {
              if (!elements[i].offsetParent) {
                blockedSelectors[selectors[i]] = true;
              }
            }
          } finally {
            (_a2 = root.parentNode) === null || _a2 === void 0 ? void 0 : _a2.removeChild(root);
          }
          return [2, blockedSelectors];
      }
    });
  });
}
function forceShow(element) {
  element.style.setProperty("display", "block", "important");
}
function printDebug(filters, blockedSelectors) {
  var message = "DOM blockers debug:\n```";
  for (var _i = 0, _a2 = Object.keys(filters); _i < _a2.length; _i++) {
    var filterName = _a2[_i];
    message += "\n".concat(filterName, ":");
    for (var _b = 0, _c = filters[filterName]; _b < _c.length; _b++) {
      var selector = _c[_b];
      message += "\n  ".concat(blockedSelectors[selector] ? "🚫" : "➡️", " ").concat(selector);
    }
  }
  console.log("".concat(message, "\n```"));
}
function getColorGamut() {
  for (var _i = 0, _a2 = ["rec2020", "p3", "srgb"]; _i < _a2.length; _i++) {
    var gamut = _a2[_i];
    if (matchMedia("(color-gamut: ".concat(gamut, ")")).matches) {
      return gamut;
    }
  }
  return void 0;
}
function areColorsInverted() {
  if (doesMatch$4("inverted")) {
    return true;
  }
  if (doesMatch$4("none")) {
    return false;
  }
  return void 0;
}
function doesMatch$4(value) {
  return matchMedia("(inverted-colors: ".concat(value, ")")).matches;
}
function areColorsForced() {
  if (doesMatch$3("active")) {
    return true;
  }
  if (doesMatch$3("none")) {
    return false;
  }
  return void 0;
}
function doesMatch$3(value) {
  return matchMedia("(forced-colors: ".concat(value, ")")).matches;
}
var maxValueToCheck = 100;
function getMonochromeDepth() {
  if (!matchMedia("(min-monochrome: 0)").matches) {
    return void 0;
  }
  for (var i = 0; i <= maxValueToCheck; ++i) {
    if (matchMedia("(max-monochrome: ".concat(i, ")")).matches) {
      return i;
    }
  }
  throw new Error("Too high value");
}
function getContrastPreference() {
  if (doesMatch$2("no-preference")) {
    return 0;
  }
  if (doesMatch$2("high") || doesMatch$2("more")) {
    return 1;
  }
  if (doesMatch$2("low") || doesMatch$2("less")) {
    return -1;
  }
  if (doesMatch$2("forced")) {
    return 10;
  }
  return void 0;
}
function doesMatch$2(value) {
  return matchMedia("(prefers-contrast: ".concat(value, ")")).matches;
}
function isMotionReduced() {
  if (doesMatch$1("reduce")) {
    return true;
  }
  if (doesMatch$1("no-preference")) {
    return false;
  }
  return void 0;
}
function doesMatch$1(value) {
  return matchMedia("(prefers-reduced-motion: ".concat(value, ")")).matches;
}
function isHDR() {
  if (doesMatch("high")) {
    return true;
  }
  if (doesMatch("standard")) {
    return false;
  }
  return void 0;
}
function doesMatch(value) {
  return matchMedia("(dynamic-range: ".concat(value, ")")).matches;
}
var M = Math;
var fallbackFn = function() {
  return 0;
};
function getMathFingerprint() {
  var acos = M.acos || fallbackFn;
  var acosh = M.acosh || fallbackFn;
  var asin = M.asin || fallbackFn;
  var asinh = M.asinh || fallbackFn;
  var atanh = M.atanh || fallbackFn;
  var atan = M.atan || fallbackFn;
  var sin = M.sin || fallbackFn;
  var sinh = M.sinh || fallbackFn;
  var cos = M.cos || fallbackFn;
  var cosh = M.cosh || fallbackFn;
  var tan = M.tan || fallbackFn;
  var tanh = M.tanh || fallbackFn;
  var exp = M.exp || fallbackFn;
  var expm1 = M.expm1 || fallbackFn;
  var log1p = M.log1p || fallbackFn;
  var powPI = function(value) {
    return M.pow(M.PI, value);
  };
  var acoshPf = function(value) {
    return M.log(value + M.sqrt(value * value - 1));
  };
  var asinhPf = function(value) {
    return M.log(value + M.sqrt(value * value + 1));
  };
  var atanhPf = function(value) {
    return M.log((1 + value) / (1 - value)) / 2;
  };
  var sinhPf = function(value) {
    return M.exp(value) - 1 / M.exp(value) / 2;
  };
  var coshPf = function(value) {
    return (M.exp(value) + 1 / M.exp(value)) / 2;
  };
  var expm1Pf = function(value) {
    return M.exp(value) - 1;
  };
  var tanhPf = function(value) {
    return (M.exp(2 * value) - 1) / (M.exp(2 * value) + 1);
  };
  var log1pPf = function(value) {
    return M.log(1 + value);
  };
  return {
    acos: acos(0.12312423423423424),
    acosh: acosh(1e308),
    acoshPf: acoshPf(1e154),
    asin: asin(0.12312423423423424),
    asinh: asinh(1),
    asinhPf: asinhPf(1),
    atanh: atanh(0.5),
    atanhPf: atanhPf(0.5),
    atan: atan(0.5),
    sin: sin(-1e300),
    sinh: sinh(1),
    sinhPf: sinhPf(1),
    cos: cos(10.000000000123),
    cosh: cosh(1),
    coshPf: coshPf(1),
    tan: tan(-1e300),
    tanh: tanh(1),
    tanhPf: tanhPf(1),
    exp: exp(1),
    expm1: expm1(1),
    expm1Pf: expm1Pf(1),
    log1p: log1p(10),
    log1pPf: log1pPf(10),
    powPI: powPI(-100)
  };
}
var defaultText = "mmMwWLliI0fiflO&1";
var presets = {
  /**
   * The default font. User can change it in desktop Chrome, desktop Firefox, IE 11,
   * Android Chrome (but only when the size is ≥ than the default) and Android Firefox.
   */
  default: [],
  /** OS font on macOS. User can change its size and weight. Applies after Safari restart. */
  apple: [{ font: "-apple-system-body" }],
  /** User can change it in desktop Chrome and desktop Firefox. */
  serif: [{ fontFamily: "serif" }],
  /** User can change it in desktop Chrome and desktop Firefox. */
  sans: [{ fontFamily: "sans-serif" }],
  /** User can change it in desktop Chrome and desktop Firefox. */
  mono: [{ fontFamily: "monospace" }],
  /**
   * Check the smallest allowed font size. User can change it in desktop Chrome, desktop Firefox and desktop Safari.
   * The height can be 0 in Chrome on a retina display.
   */
  min: [{ fontSize: "1px" }],
  /** Tells one OS from another in desktop Chrome. */
  system: [{ fontFamily: "system-ui" }]
};
function getFontPreferences() {
  return withNaturalFonts(function(document2, container) {
    var elements = {};
    var sizes = {};
    for (var _i = 0, _a2 = Object.keys(presets); _i < _a2.length; _i++) {
      var key = _a2[_i];
      var _b = presets[key], _c = _b[0], style = _c === void 0 ? {} : _c, _d = _b[1], text = _d === void 0 ? defaultText : _d;
      var element = document2.createElement("span");
      element.textContent = text;
      element.style.whiteSpace = "nowrap";
      for (var _e = 0, _f = Object.keys(style); _e < _f.length; _e++) {
        var name_1 = _f[_e];
        var value = style[name_1];
        if (value !== void 0) {
          element.style[name_1] = value;
        }
      }
      elements[key] = element;
      container.appendChild(document2.createElement("br"));
      container.appendChild(element);
    }
    for (var _g = 0, _h = Object.keys(presets); _g < _h.length; _g++) {
      var key = _h[_g];
      sizes[key] = elements[key].getBoundingClientRect().width;
    }
    return sizes;
  });
}
function withNaturalFonts(action, containerWidthPx) {
  if (containerWidthPx === void 0) {
    containerWidthPx = 4e3;
  }
  return withIframe(function(_23, iframeWindow) {
    var iframeDocument = iframeWindow.document;
    var iframeBody = iframeDocument.body;
    var bodyStyle = iframeBody.style;
    bodyStyle.width = "".concat(containerWidthPx, "px");
    bodyStyle.webkitTextSizeAdjust = bodyStyle.textSizeAdjust = "none";
    if (isChromium()) {
      iframeBody.style.zoom = "".concat(1 / iframeWindow.devicePixelRatio);
    } else if (isWebKit()) {
      iframeBody.style.zoom = "reset";
    }
    var linesOfText = iframeDocument.createElement("div");
    linesOfText.textContent = __spreadArray$2([], Array(containerWidthPx / 20 << 0), true).map(function() {
      return "word";
    }).join(" ");
    iframeBody.appendChild(linesOfText);
    return action(iframeDocument, iframeBody);
  }, '<!doctype html><html><head><meta name="viewport" content="width=device-width, initial-scale=1">');
}
function getVideoCard() {
  var _a2;
  var canvas = document.createElement("canvas");
  var gl = (_a2 = canvas.getContext("webgl")) !== null && _a2 !== void 0 ? _a2 : canvas.getContext("experimental-webgl");
  if (gl && "getExtension" in gl) {
    var debugInfo = gl.getExtension("WEBGL_debug_renderer_info");
    if (debugInfo) {
      return {
        vendor: (gl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL) || "").toString(),
        renderer: (gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL) || "").toString()
      };
    }
  }
  return void 0;
}
function isPdfViewerEnabled() {
  return navigator.pdfViewerEnabled;
}
function getArchitecture() {
  var f = new Float32Array(1);
  var u83 = new Uint8Array(f.buffer);
  f[0] = Infinity;
  f[0] = f[0] - f[0];
  return u83[3];
}
var sources = {
  // READ FIRST:
  // See https://github.com/fingerprintjs/fingerprintjs/blob/master/contributing.md#how-to-make-an-entropy-source
  // to learn how entropy source works and how to make your own.
  // The sources run in this exact order.
  // The asynchronous sources are at the start to run in parallel with other sources.
  fonts: getFonts,
  domBlockers: getDomBlockers,
  fontPreferences: getFontPreferences,
  audio: getAudioFingerprint,
  screenFrame: getRoundedScreenFrame,
  osCpu: getOsCpu,
  languages: getLanguages,
  colorDepth: getColorDepth,
  deviceMemory: getDeviceMemory,
  screenResolution: getScreenResolution,
  hardwareConcurrency: getHardwareConcurrency,
  timezone: getTimezone,
  sessionStorage: getSessionStorage,
  localStorage: getLocalStorage,
  indexedDB: getIndexedDB,
  openDatabase: getOpenDatabase,
  cpuClass: getCpuClass,
  platform: getPlatform,
  plugins: getPlugins,
  canvas: getCanvasFingerprint,
  touchSupport: getTouchSupport,
  vendor: getVendor,
  vendorFlavors: getVendorFlavors,
  cookiesEnabled: areCookiesEnabled,
  colorGamut: getColorGamut,
  invertedColors: areColorsInverted,
  forcedColors: areColorsForced,
  monochrome: getMonochromeDepth,
  contrast: getContrastPreference,
  reducedMotion: isMotionReduced,
  hdr: isHDR,
  math: getMathFingerprint,
  videoCard: getVideoCard,
  pdfViewerEnabled: isPdfViewerEnabled,
  architecture: getArchitecture
};
function loadBuiltinSources(options) {
  return loadSources(sources, options, []);
}
var commentTemplate = "$ if upgrade to Pro: https://fpjs.dev/pro";
function getConfidence(components) {
  var openConfidenceScore = getOpenConfidenceScore(components);
  var proConfidenceScore = deriveProConfidenceScore(openConfidenceScore);
  return { score: openConfidenceScore, comment: commentTemplate.replace(/\$/g, "".concat(proConfidenceScore)) };
}
function getOpenConfidenceScore(components) {
  if (isAndroid()) {
    return 0.4;
  }
  if (isWebKit()) {
    return isDesktopSafari() ? 0.5 : 0.3;
  }
  var platform = components.platform.value || "";
  if (/^Win/.test(platform)) {
    return 0.6;
  }
  if (/^Mac/.test(platform)) {
    return 0.5;
  }
  return 0.7;
}
function deriveProConfidenceScore(openConfidenceScore) {
  return round(0.99 + 0.01 * openConfidenceScore, 1e-4);
}
function componentsToCanonicalString(components) {
  var result = "";
  for (var _i = 0, _a2 = Object.keys(components).sort(); _i < _a2.length; _i++) {
    var componentKey = _a2[_i];
    var component = components[componentKey];
    var value = component.error ? "error" : JSON.stringify(component.value);
    result += "".concat(result ? "|" : "").concat(componentKey.replace(/([:|\\])/g, "\\$1"), ":").concat(value);
  }
  return result;
}
function componentsToDebugString(components) {
  return JSON.stringify(components, function(_key, value) {
    if (value instanceof Error) {
      return errorToObject(value);
    }
    return value;
  }, 2);
}
function hashComponents(components) {
  return x64hash128$1(componentsToCanonicalString(components));
}
function makeLazyGetResult(components) {
  var visitorIdCache;
  var confidence = getConfidence(components);
  return {
    get visitorId() {
      if (visitorIdCache === void 0) {
        visitorIdCache = hashComponents(this.components);
      }
      return visitorIdCache;
    },
    set visitorId(visitorId) {
      visitorIdCache = visitorId;
    },
    confidence,
    components,
    version
  };
}
function prepareForSources(delayFallback) {
  if (delayFallback === void 0) {
    delayFallback = 50;
  }
  return requestIdleCallbackIfAvailable(delayFallback, delayFallback * 2);
}
function makeAgent(getComponents, debug) {
  var creationTime = Date.now();
  return {
    get: function(options) {
      return __awaiter$2(this, void 0, void 0, function() {
        var startTime, components, result;
        return __generator$2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              startTime = Date.now();
              return [4, getComponents()];
            case 1:
              components = _a2.sent();
              result = makeLazyGetResult(components);
              if (debug || (options === null || options === void 0 ? void 0 : options.debug)) {
                console.log("Copy the text below to get the debug data:\n\n```\nversion: ".concat(result.version, "\nuserAgent: ").concat(navigator.userAgent, "\ntimeBetweenLoadAndGet: ").concat(startTime - creationTime, "\nvisitorId: ").concat(result.visitorId, "\ncomponents: ").concat(componentsToDebugString(components), "\n```"));
              }
              return [2, result];
          }
        });
      });
    }
  };
}
function monitor() {
  if (window.__fpjs_d_m || Math.random() >= 1e-3) {
    return;
  }
  try {
    var request3 = new XMLHttpRequest();
    request3.open("get", "https://m1.openfpcdn.io/fingerprintjs/v".concat(version, "/npm-monitoring"), true);
    request3.send();
  } catch (error2) {
    console.error(error2);
  }
}
function load(_a2) {
  var _b = _a2 === void 0 ? {} : _a2, delayFallback = _b.delayFallback, debug = _b.debug, _c = _b.monitoring, monitoring = _c === void 0 ? true : _c;
  return __awaiter$2(this, void 0, void 0, function() {
    var getComponents;
    return __generator$2(this, function(_d) {
      switch (_d.label) {
        case 0:
          if (monitoring) {
            monitor();
          }
          return [4, prepareForSources(delayFallback)];
        case 1:
          _d.sent();
          getComponents = loadBuiltinSources({ debug });
          return [2, makeAgent(getComponents, debug)];
      }
    });
  });
}
function x64Add(m2, n) {
  m2 = [at(m2, 0) >>> 16, at(m2, 0) & 65535, at(m2, 1) >>> 16, at(m2, 1) & 65535];
  n = [at(n, 0) >>> 16, at(n, 0) & 65535, at(n, 1) >>> 16, at(n, 1) & 65535];
  const o = [0, 0, 0, 0];
  o[3] += at(m2, 3) + at(n, 3);
  o[2] += at(o, 3) >>> 16;
  o[3] &= 65535;
  o[2] += at(m2, 2) + at(n, 2);
  o[1] += at(o, 2) >>> 16;
  o[2] &= 65535;
  o[1] += at(m2, 1) + at(n, 1);
  o[0] += at(o, 1) >>> 16;
  o[1] &= 65535;
  o[0] += at(m2, 0) + at(n, 0);
  o[0] &= 65535;
  return [at(o, 0) << 16 | at(o, 1), at(o, 2) << 16 | at(o, 3)];
}
function x64Multiply(m2, n) {
  m2 = [at(m2, 0) >>> 16, at(m2, 0) & 65535, at(m2, 1) >>> 16, at(m2, 1) & 65535];
  n = [at(n, 0) >>> 16, at(n, 0) & 65535, at(n, 1) >>> 16, at(n, 1) & 65535];
  const o = [0, 0, 0, 0];
  o[3] += at(m2, 3) * at(n, 3);
  o[2] += at(o, 3) >>> 16;
  o[3] &= 65535;
  o[2] += at(m2, 2) * at(n, 3);
  o[1] += at(o, 2) >>> 16;
  o[2] &= 65535;
  o[2] += at(m2, 3) * at(n, 2);
  o[1] += at(o, 2) >>> 16;
  o[2] &= 65535;
  o[1] += at(m2, 1) * at(n, 3);
  o[0] += at(o, 1) >>> 16;
  o[1] &= 65535;
  o[1] += at(m2, 2) * at(n, 2);
  o[0] += at(o, 1) >>> 16;
  o[1] &= 65535;
  o[1] += at(m2, 3) * at(n, 1);
  o[0] += at(o, 1) >>> 16;
  o[1] &= 65535;
  o[0] += at(m2, 0) * at(n, 3) + at(m2, 1) * at(n, 2) + at(m2, 2) * at(n, 1) + at(m2, 3) * at(n, 0);
  o[0] &= 65535;
  return [at(o, 0) << 16 | at(o, 1), at(o, 2) << 16 | at(o, 3)];
}
function x64Rotl(m2, n) {
  n %= 64;
  if (n === 32) {
    return [at(m2, 1), at(m2, 0)];
  } else if (n < 32) {
    return [at(m2, 0) << n | at(m2, 1) >>> 32 - n, at(m2, 1) << n | at(m2, 0) >>> 32 - n];
  } else {
    n -= 32;
    return [at(m2, 1) << n | at(m2, 0) >>> 32 - n, at(m2, 0) << n | at(m2, 1) >>> 32 - n];
  }
}
function x64LeftShift(m2, n) {
  n %= 64;
  if (n === 0) {
    return m2;
  } else if (n < 32) {
    return [at(m2, 0) << n | at(m2, 1) >>> 32 - n, at(m2, 1) << n];
  } else {
    return [at(m2, 1) << n - 32, 0];
  }
}
function x64Xor(m2, n) {
  return [at(m2, 0) ^ at(n, 0), at(m2, 1) ^ at(n, 1)];
}
function x64Fmix(h) {
  h = x64Xor(h, [0, at(h, 0) >>> 1]);
  h = x64Multiply(h, [4283543511, 3981806797]);
  h = x64Xor(h, [0, at(h, 0) >>> 1]);
  h = x64Multiply(h, [3301882366, 444984403]);
  h = x64Xor(h, [0, at(h, 0) >>> 1]);
  return h;
}
function x64hash128(key, seed) {
  key = key || "";
  seed = seed || 0;
  const remainder = key.length % 16;
  const bytes2 = key.length - remainder;
  let h1 = [0, seed];
  let h2 = [0, seed];
  let k1 = [0, 0];
  let k2 = [0, 0];
  const c1 = [2277735313, 289559509];
  const c2 = [1291169091, 658871167];
  let i = 0;
  for (i = 0; i < bytes2; i = i + 16) {
    k1 = [
      key.charCodeAt(i + 4) & 255 | (key.charCodeAt(i + 5) & 255) << 8 | (key.charCodeAt(i + 6) & 255) << 16 | (key.charCodeAt(i + 7) & 255) << 24,
      key.charCodeAt(i) & 255 | (key.charCodeAt(i + 1) & 255) << 8 | (key.charCodeAt(i + 2) & 255) << 16 | (key.charCodeAt(i + 3) & 255) << 24
    ];
    k2 = [
      key.charCodeAt(i + 12) & 255 | (key.charCodeAt(i + 13) & 255) << 8 | (key.charCodeAt(i + 14) & 255) << 16 | (key.charCodeAt(i + 15) & 255) << 24,
      key.charCodeAt(i + 8) & 255 | (key.charCodeAt(i + 9) & 255) << 8 | (key.charCodeAt(i + 10) & 255) << 16 | (key.charCodeAt(i + 11) & 255) << 24
    ];
    k1 = x64Multiply(k1, c1);
    k1 = x64Rotl(k1, 31);
    k1 = x64Multiply(k1, c2);
    h1 = x64Xor(h1, k1);
    h1 = x64Rotl(h1, 27);
    h1 = x64Add(h1, h2);
    h1 = x64Add(x64Multiply(h1, [0, 5]), [0, 1390208809]);
    k2 = x64Multiply(k2, c2);
    k2 = x64Rotl(k2, 33);
    k2 = x64Multiply(k2, c1);
    h2 = x64Xor(h2, k2);
    h2 = x64Rotl(h2, 31);
    h2 = x64Add(h2, h1);
    h2 = x64Add(x64Multiply(h2, [0, 5]), [0, 944331445]);
  }
  k1 = [0, 0];
  k2 = [0, 0];
  switch (remainder) {
    case 15:
      k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i + 14)], 48));
      break;
    case 14:
      k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i + 13)], 40));
      break;
    case 13:
      k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i + 12)], 32));
      break;
    case 12:
      k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i + 11)], 24));
      break;
    case 11:
      k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i + 10)], 16));
      break;
    case 10:
      k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i + 9)], 8));
      break;
    case 9:
      k2 = x64Xor(k2, [0, key.charCodeAt(i + 8)]);
      k2 = x64Multiply(k2, c2);
      k2 = x64Rotl(k2, 33);
      k2 = x64Multiply(k2, c1);
      h2 = x64Xor(h2, k2);
      break;
    case 8:
      k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 7)], 56));
      break;
    case 7:
      k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 6)], 48));
      break;
    case 6:
      k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 5)], 40));
      break;
    case 5:
      k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 4)], 32));
      break;
    case 4:
      k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 3)], 24));
      break;
    case 3:
      k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 2)], 16));
      break;
    case 2:
      k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 1)], 8));
      break;
    case 1:
      k1 = x64Xor(k1, [0, key.charCodeAt(i)]);
      k1 = x64Multiply(k1, c1);
      k1 = x64Rotl(k1, 31);
      k1 = x64Multiply(k1, c2);
      h1 = x64Xor(h1, k1);
  }
  h1 = x64Xor(h1, [0, key.length]);
  h2 = x64Xor(h2, [0, key.length]);
  h1 = x64Add(h1, h2);
  h2 = x64Add(h2, h1);
  h1 = x64Fmix(h1);
  h2 = x64Fmix(h2);
  h1 = x64Add(h1, h2);
  h2 = x64Add(h2, h1);
  return ("00000000" + (at(h1, 0) >>> 0).toString(16)).slice(-8) + ("00000000" + (at(h1, 1) >>> 0).toString(16)).slice(-8) + ("00000000" + (at(h2, 0) >>> 0).toString(16)).slice(-8) + ("00000000" + (at(h2, 1) >>> 0).toString(16)).slice(-8);
}
function picassoCanvas(roundNumber, seed, params) {
  const { area, offsetParameter, multiplier, fontSizeFactor, maxShadowBlur } = params;
  class Prng {
    constructor(seed2) {
      this.currentNumber = seed2 % offsetParameter;
      if (this.currentNumber <= 0) {
        this.currentNumber += offsetParameter;
      }
    }
    getNext() {
      this.currentNumber = multiplier * this.currentNumber % offsetParameter;
      return this.currentNumber;
    }
  }
  function adaptRandomNumberToContext(randomNumber, maxBound, floatAllowed) {
    randomNumber = (randomNumber - 1) / offsetParameter;
    if (floatAllowed) {
      return randomNumber * maxBound;
    }
    return Math.floor(randomNumber * maxBound);
  }
  function addRandomCanvasGradient(prng, context, area2) {
    const canvasGradient = context.createRadialGradient(adaptRandomNumberToContext(prng.getNext(), area2.width, void 0), adaptRandomNumberToContext(prng.getNext(), area2.height, void 0), adaptRandomNumberToContext(prng.getNext(), area2.width, void 0), adaptRandomNumberToContext(prng.getNext(), area2.width, void 0), adaptRandomNumberToContext(prng.getNext(), area2.height, void 0), adaptRandomNumberToContext(prng.getNext(), area2.width, void 0));
    canvasGradient.addColorStop(0, at(colors, adaptRandomNumberToContext(prng.getNext(), colors.length, void 0)));
    canvasGradient.addColorStop(1, at(colors, adaptRandomNumberToContext(prng.getNext(), colors.length, void 0)));
    context.fillStyle = canvasGradient;
  }
  function generateRandomWord(prng, wordLength) {
    const minAscii = 65;
    const maxAscii = 126;
    const wordGenerated = [];
    for (let i = 0; i < wordLength; i++) {
      const asciiCode = minAscii + prng.getNext() % (maxAscii - minAscii);
      wordGenerated.push(String.fromCharCode(asciiCode));
    }
    return wordGenerated.join("");
  }
  if (window.CanvasRenderingContext2D) {
    return "unknown";
  }
  const colors = [
    "#FF6633",
    "#FFB399",
    "#FF33FF",
    "#FFFF99",
    "#00B3E6",
    "#E6B333",
    "#3366E6",
    "#999966",
    "#99FF99",
    "#B34D4D",
    "#80B300",
    "#809900",
    "#E6B3B3",
    "#6680B3",
    "#66991A",
    "#FF99E6",
    "#CCFF1A",
    "#FF1A66",
    "#E6331A",
    "#33FFCC",
    "#66994D",
    "#B366CC",
    "#4D8000",
    "#B33300",
    "#CC80CC",
    "#66664D",
    "#991AFF",
    "#E666FF",
    "#4DB3FF",
    "#1AB399",
    "#E666B3",
    "#33991A",
    "#CC9999",
    "#B3B31A",
    "#00E680",
    "#4D8066",
    "#809980",
    "#E6FF80",
    "#1AFF33",
    "#999933",
    "#FF3380",
    "#CCCC00",
    "#66E64D",
    "#4D80CC",
    "#9900B3",
    "#E64D66",
    "#4DB380",
    "#FF4D4D",
    "#99E6E6",
    "#6666FF"
  ];
  const primitives = [
    function arc(prng, context, area2) {
      context.beginPath();
      context.arc(adaptRandomNumberToContext(prng.getNext(), area2.width, void 0), adaptRandomNumberToContext(prng.getNext(), area2.height, void 0), adaptRandomNumberToContext(prng.getNext(), Math.min(area2.width, area2.height), void 0), adaptRandomNumberToContext(prng.getNext(), 2 * Math.PI, true), adaptRandomNumberToContext(prng.getNext(), 2 * Math.PI, true));
      context.stroke();
    },
    function text(prng, context, area2) {
      const wordLength = Math.max(1, adaptRandomNumberToContext(prng.getNext(), 5, void 0));
      const textToStroke = generateRandomWord(prng, wordLength);
      context.font = `${area2.height / fontSizeFactor}px aafakefontaa`;
      context.strokeText(textToStroke, adaptRandomNumberToContext(prng.getNext(), area2.width, void 0), adaptRandomNumberToContext(prng.getNext(), area2.height, void 0), adaptRandomNumberToContext(prng.getNext(), area2.width, void 0));
    },
    function bezierCurve(prng, context, area2) {
      context.beginPath();
      context.moveTo(adaptRandomNumberToContext(prng.getNext(), area2.width, void 0), adaptRandomNumberToContext(prng.getNext(), area2.height, void 0));
      context.bezierCurveTo(adaptRandomNumberToContext(prng.getNext(), area2.width, void 0), adaptRandomNumberToContext(prng.getNext(), area2.height, void 0), adaptRandomNumberToContext(prng.getNext(), area2.width, void 0), adaptRandomNumberToContext(prng.getNext(), area2.height, void 0), adaptRandomNumberToContext(prng.getNext(), area2.width, void 0), adaptRandomNumberToContext(prng.getNext(), area2.height, void 0));
      context.stroke();
    },
    function quadraticCurve(prng, context, area2) {
      context.beginPath();
      context.moveTo(adaptRandomNumberToContext(prng.getNext(), area2.width, void 0), adaptRandomNumberToContext(prng.getNext(), area2.height, void 0));
      context.quadraticCurveTo(adaptRandomNumberToContext(prng.getNext(), area2.width, void 0), adaptRandomNumberToContext(prng.getNext(), area2.height, void 0), adaptRandomNumberToContext(prng.getNext(), area2.width, void 0), adaptRandomNumberToContext(prng.getNext(), area2.height, void 0));
      context.stroke();
    },
    function ellipse(prng, context, area2) {
      context.beginPath();
      context.ellipse(adaptRandomNumberToContext(prng.getNext(), area2.width, void 0), adaptRandomNumberToContext(prng.getNext(), area2.height, void 0), adaptRandomNumberToContext(prng.getNext(), Math.floor(area2.width / 2), void 0), adaptRandomNumberToContext(prng.getNext(), Math.floor(area2.height / 2), void 0), adaptRandomNumberToContext(prng.getNext(), 2 * Math.PI, true), adaptRandomNumberToContext(prng.getNext(), 2 * Math.PI, true), adaptRandomNumberToContext(prng.getNext(), 2 * Math.PI, true));
      context.stroke();
    }
  ];
  try {
    const prng = new Prng(seed);
    const canvasElt = document.createElement("canvas");
    canvasElt.width = area.width;
    canvasElt.height = area.height;
    canvasElt.style.display = "none";
    const context = canvasElt.getContext("2d");
    if (context !== null) {
      for (let i = 0; i < roundNumber; i++) {
        addRandomCanvasGradient(prng, context, area);
        context.shadowBlur = adaptRandomNumberToContext(prng.getNext(), maxShadowBlur, void 0);
        context.shadowColor = at(colors, adaptRandomNumberToContext(prng.getNext(), colors.length, void 0));
        const randomPrimitive = at(primitives, adaptRandomNumberToContext(prng.getNext(), primitives.length, void 0));
        randomPrimitive(prng, context, area);
        context.fill();
      }
    }
    return x64hash128(canvasElt.toDataURL(), seed);
  } catch (error2) {
    throw new ProsopoError("WIDGET.CANVAS", { context: { error: error2 } });
  }
}
let sendRequest;
let nextId = 0;
class Signer {
  constructor(_sendRequest) {
    sendRequest = _sendRequest;
  }
  async signPayload(payload) {
    const id = ++nextId;
    const result = await sendRequest("pub(extrinsic.sign)", payload);
    return {
      ...result,
      id
    };
  }
  async signRaw(payload) {
    const id = ++nextId;
    const result = await sendRequest("pub(bytes.sign)", payload);
    return {
      ...result,
      id
    };
  }
}
class ExtWeb2 extends Extension {
  async getAccount(config2) {
    const network = getNetwork(config2);
    const wsProvider = new WsProvider(network.endpoint);
    const account2 = await this.createAccount(wsProvider);
    const extension = await this.createExtension(account2);
    return {
      account: account2,
      extension
    };
  }
  async createExtension(account2) {
    const signer = new Signer(async () => {
      return;
    });
    signer.signRaw = async (payload) => {
      const signature = account2.keypair.sign(payload.data);
      return {
        id: 1,
        signature: u8aToHex(signature)
      };
    };
    return {
      accounts: {
        get: async () => {
          return [account2];
        },
        subscribe: () => {
          return () => {
            return;
          };
        }
      },
      name: "procaptcha-web2",
      version: "0.1.11",
      signer
    };
  }
  async createAccount(wsProvider) {
    const params = {
      area: { width: 300, height: 300 },
      offsetParameter: 2001000001,
      multiplier: 15e3,
      fontSizeFactor: 1.5,
      maxShadowBlur: 50,
      numberOfRounds: 5,
      seed: 42
    };
    const browserEntropy = await this.getFingerprint();
    const canvasEntropy = picassoCanvas(params.numberOfRounds, params.seed, params);
    const entropy = hexHash([canvasEntropy, browserEntropy].join(""), 128).slice(2);
    const u8Entropy = stringToU8a(entropy);
    const mnemonic = entropyToMnemonic(u8Entropy);
    const api = await ApiPromise.create({ provider: wsProvider, initWasm: false });
    const type = "ed25519";
    const keyring = new Keyring({ type, ss58Format: api.registry.chainSS58 });
    const keypair = keyring.addFromMnemonic(mnemonic);
    const address = keypair.address.length === 42 ? keypair.address : encodeAddress(decodeAddress(keypair.address), api.registry.chainSS58);
    return {
      address,
      type,
      name: address,
      keypair
    };
  }
  async getFingerprint() {
    const fpPromise = load();
    const fp = await fpPromise;
    const result = await fp.get();
    const { screenFrame, ...componentsReduced } = result.components;
    return hashComponents(componentsReduced);
  }
}
const solvePoW = (data, difficulty) => {
  let nonce = 0;
  const prefix2 = "0".repeat(difficulty);
  while (true) {
    const message = new TextEncoder().encode(nonce + data);
    const hashHex = bufferToHex(sha256(message));
    if (hashHex.startsWith(prefix2)) {
      return nonce;
    }
    nonce += 1;
  }
};
const bufferToHex = (buffer) => Array.from(buffer).map((byte) => byte.toString(16).padStart(2, "0")).join("");
const Manager = async (configInput) => {
  const getConfig2 = () => {
    const config3 = {
      userAccountAddress: "",
      ...configInput
    };
    return ProcaptchaConfigSchema.parse(config3);
  };
  const getNetwork2 = (config3) => {
    const network = config3.networks[config3.defaultNetwork];
    if (!network) {
      throw new ProsopoEnvError("DEVELOPER.NETWORK_NOT_FOUND", {
        context: { error: `No network found for environment ${config3.defaultEnvironment}` }
      });
    }
    return network;
  };
  const loadContract = async () => {
    const network = getNetwork2(getConfig2());
    const api = await ApiPromise.create({ provider: new WsProvider(network.endpoint), initWasm: false });
    const type = "sr25519";
    const keyring = new Keyring({ type, ss58Format: api.registry.chainSS58 });
    return new ProsopoCaptchaContract(api, JSON.parse(ContractAbi), network.contract.address, "prosopo", 0, keyring.addFromAddress(getConfig2().account.address || ""));
  };
  const config2 = getConfig2();
  if (!config2.web2 && !config2.userAccountAddress) {
    throw new ProsopoEnvError("GENERAL.ACCOUNT_NOT_FOUND", {
      context: { error: "Account address has not been set for web3 mode" }
    });
  }
  const ext = new ExtWeb2();
  const account2 = await ext.getAccount(config2);
  const contract = await loadContract();
  const getRandomProviderResponse = await wrapQuery(contract.query.getRandomActiveProvider, contract.query)(account2.account.address, configInput.account.address || "");
  const providerUrl = trimProviderUrl(getRandomProviderResponse.provider.url.toString());
  const providerApi = new ProviderApi(getNetwork2(getConfig2()), providerUrl, configInput.account.address || "");
  const challenge = await providerApi.getPowCaptchaChallenge(account2.account.address, configInput.account.address || "");
  console.log("challenge", challenge);
  console.log("challenge", challenge.challenge);
  console.log("challenge", challenge.difficulty);
  const solution = solvePoW(challenge.challenge, challenge.difficulty);
  console.log("solution", solution);
  const verifiedSolution = await providerApi.submitPowCaptchaSolution(challenge, account2.account.address, configInput.account.address || "", getRandomProviderResponse, solution);
  return verifiedSolution;
};
const checkboxBefore = css`{
  &:before {
    content: '""';
    position: absolute;
    height: 100%;
    width: 100%;
  }
}`;
const baseStyle = {
  width: "2.2em",
  height: "2.2em",
  top: "auto",
  left: "auto",
  opacity: "1",
  borderRadius: "12.5%",
  appearance: "none",
  cursor: "pointer",
  margin: "0",
  borderStyle: "solid",
  borderWidth: "1px"
};
const Checkbox = ({ themeColor, onChange, checked }) => {
  const theme = reactExports.useMemo(() => themeColor === "light" ? lightTheme$1 : darkTheme$1, [themeColor]);
  const checkboxStyleBase = {
    ...baseStyle,
    border: `1px solid ${theme.palette.background.contrastText}`
  };
  const [hover, setHover] = reactExports.useState(false);
  const checkboxStyle = reactExports.useMemo(() => {
    return {
      ...checkboxStyleBase,
      borderColor: hover ? theme.palette.background.contrastText : theme.palette.grey[400],
      appearance: checked ? "auto" : "none"
    };
  }, [hover, theme, checked]);
  return jsx("input", { onMouseEnter: () => setHover(true), onMouseLeave: () => setHover(false), css: checkboxBefore, type: "checkbox", "aria-live": "assertive", "aria-haspopup": "true", onChange, checked, style: checkboxStyle });
};
const Checkbox$1 = Checkbox;
const logoStyle$1 = css`
    align-items: center;
    justify-content: flex-end;
    display: flex;
    padding: 8px;

    @media (max-width: 245px) {
        &:nth-of-type(1),
        &:nth-of-type(2) {
            display: none;
        } /* Both logos hidden */
    }

    @media (min-width: 245px) and (max-width: 400px) {
        &:nth-of-type(1) {
            display: flex;
        } /* logoWithText */
        &:nth-of-type(2) {
            display: none;
        } /* logoWithoutText */
    }

    @media (min-width: 401px) {
        &:nth-of-type(1) {
            display: none;
        } /* logoWithText */
        &:nth-of-type(2) {
            display: flex;
        } /* logoWithoutText */
    }
`;
const PowProcaptcha = (props) => {
  const [checked, setChecked] = reactExports.useState(false);
  const [loading, setLoading] = reactExports.useState(false);
  const darkMode = props.config.theme;
  const styleWidth = { maxWidth: "400px", minWidth: "200px", margin: "8px" };
  const themeColor = darkMode ? "light" : "dark";
  const theme = reactExports.useMemo(() => darkMode === "light" ? lightTheme$1 : darkTheme$1, [darkMode]);
  const handlePowCaptcha = async () => {
    setLoading(true);
    Manager(props.config).then((verified) => {
      if (verified.verified) {
        console.log("verified");
        setChecked(true);
      }
      setLoading(false);
    });
  };
  return jsx("div", { children: jsx("div", { style: { maxWidth: "100%", maxHeight: "100%", overflowX: "auto" }, children: jsxs("div", { style: styleWidth, "data-cy": "button-human", children: [" ", jsxs("div", { style: {
    padding: "8px",
    border: "1px solid",
    backgroundColor: theme.palette.background.default,
    borderColor: theme.palette.grey[300],
    borderRadius: "8px",
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    flexWrap: "wrap"
  }, children: [jsx("div", { style: { display: "flex", flexDirection: "column" }, children: jsxs("div", { style: {
    display: "flex",
    justifyContent: "flex-start",
    alignItems: "center",
    flexWrap: "wrap"
  }, children: [jsx("div", { style: {
    height: "50px",
    width: "50px",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    flexDirection: "column",
    verticalAlign: "middle"
  }, children: jsx("div", { style: {
    display: "flex"
  }, children: jsx("div", { style: { flex: 1 }, children: loading ? jsx(LoadingSpinner$1, { themeColor }) : jsx(Checkbox$1, { checked, onChange: handlePowCaptcha, themeColor: props.config.theme || "light" }) }) }) }), jsx("div", { style: { padding: 1 }, children: jsx("span", { style: { color: theme.palette.background.contrastText, paddingLeft: "4px" }, children: "I am a human" }) })] }) }), jsx("div", { children: jsx("a", { href: "https://www.prosopo.io/#features?ref=accounts.prosopo.io&utm_campaign=widget&utm_medium=checkbox", target: "_blank", "aria-label": "Visit prosopo.io to learn more about the service and its accessibility options.", children: jsx("div", { children: jsxs("div", { children: [jsx("div", { css: logoStyle$1, dangerouslySetInnerHTML: {
    __html: darkMode === "light" ? logoWithoutTextBlack$1 : logoWithoutTextWhite$1
  } }), jsx("div", { css: logoStyle$1, dangerouslySetInnerHTML: {
    __html: darkMode === "light" ? logoWithTextBlack$1 : logoWithTextWhite$1
  } })] }) }) }) })] })] }) }) });
};
const logoWithTextBlack$1 = '<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 2062.63 468.67" height="35px" width="140px"><defs><style>.cls-1{fill:#1d1d1b;}</style></defs><title>Prosopo Logo Black</title><path class="cls-1" d="M335.55,1825.19A147.75,147.75,0,0,1,483.3,1972.94h50.5c0-109.49-88.76-198.25-198.25-198.25v50.5Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M269.36,1891.39A147.74,147.74,0,0,1,417.1,2039.13h50.5c0-109.49-88.75-198.24-198.24-198.24v50.5Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M414,2157.17a147.75,147.75,0,0,1-147.74-147.74h-50.5c0,109.49,88.75,198.24,198.24,198.24v-50.5Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M480.17,2091a147.74,147.74,0,0,1-147.74-147.75H281.92c0,109.49,88.76,198.25,198.25,198.25V2091Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M862.8,2017.5q-27.39,22.86-78.25,22.86h-65v112.19H654.82v-312h134q46.32,0,73.86,24.13t27.55,74.72Q890.2,1994.64,862.8,2017.5ZM813,1905.1q-12.37-10.36-34.7-10.38H719.59v91.87h58.75q22.32,0,34.7-11.22t12.39-35.56Q825.43,1915.48,813,1905.1Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1045.69,1916.42c.78.08,2.51.19,5.19.32v61.81c-3.81-.42-7.2-.71-10.16-.85s-5.36-.21-7.2-.21q-36.4,0-48.89,23.71-7,13.33-7,41.06v110.29H916.89V1921.82h57.58V1962q14-23.07,24.34-31.54,16.94-14.18,44-14.18C1044,1916.32,1044.92,1916.35,1045.69,1916.42Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1265.64,2124.32q-29.21,36.06-88.69,36.06t-88.69-36.06Q1059,2088.26,1059,2037.5q0-49.9,29.22-86.5t88.69-36.59q59.47,0,88.69,36.59t29.21,86.5Q1294.85,2088.26,1265.64,2124.32ZM1217.38,2091q14.17-18.81,14.18-53.48t-14.18-53.37q-14.19-18.7-40.64-18.71T1136,1984.13q-14.29,18.72-14.29,53.37T1136,2091q14.28,18.81,40.75,18.81T1217.38,2091Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1371.81,2078.88q1.92,16.1,8.29,22.87,11.28,12.06,41.7,12.06,17.85,0,28.39-5.29t10.53-15.88a17.12,17.12,0,0,0-8.48-15.45q-8.49-5.28-63.12-18.2-39.33-9.73-55.41-24.35-16.08-14.39-16.09-41.49,0-32,25.14-54.93t70.75-23q43.26,0,70.53,17.25t31.29,59.59H1455q-1.27-11.64-6.58-18.42-10-12.27-34-12.28-19.74,0-28.13,6.14t-8.38,14.4c0,6.91,3,11.93,8.92,15q8.89,4.89,63,16.73,36,8.46,54.05,25.61,17.77,17.35,17.78,43.39,0,34.3-25.56,56t-79,21.7q-54.51,0-80.49-23t-26-58.53Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1745.54,2124.32q-29.22,36.06-88.7,36.06t-88.69-36.06q-29.2-36.06-29.21-86.82,0-49.9,29.21-86.5t88.69-36.59q59.49,0,88.7,36.59t29.21,86.5Q1774.75,2088.26,1745.54,2124.32ZM1697.27,2091q14.19-18.81,14.19-53.48t-14.19-53.37q-14.18-18.7-40.64-18.71t-40.75,18.71q-14.28,18.72-14.28,53.37t14.28,53.48q14.3,18.81,40.75,18.81T1697.27,2091Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1992.75,1946.59q28.24,29.84,28.23,87.63,0,61-27.58,92.93t-71.06,32q-27.69,0-46-13.76-10-7.62-19.6-22.23v120.24H1797V1921.82h57.79v34.08q9.79-15,20.88-23.71,20.23-15.43,48.15-15.45Q1964.53,1916.74,1992.75,1946.59Zm-46.3,43.39q-12.3-20.52-39.88-20.53-33.15,0-45.54,31.11-6.43,16.51-6.42,41.92,0,40.21,21.58,56.51,12.82,9.53,30.37,9.53,25.45,0,38.83-19.48t13.36-51.86Q1958.75,2010.51,1946.45,1990Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M2249.14,2124.32q-29.2,36.06-88.69,36.06t-88.69-36.06q-29.22-36.06-29.21-86.82,0-49.9,29.21-86.5t88.69-36.59q59.49,0,88.69,36.59t29.22,86.5Q2278.36,2088.26,2249.14,2124.32ZM2200.88,2091q14.19-18.81,14.18-53.48t-14.18-53.37q-14.18-18.7-40.64-18.71t-40.75,18.71q-14.28,18.72-14.29,53.37t14.29,53.48q14.3,18.81,40.75,18.81T2200.88,2091Z" transform="translate(-215.73 -1774.69)"/></svg>';
const logoWithTextWhite$1 = '<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 2062.63 468.67" height="35px" width="140px"><defs><style>.cls-1{fill:#fff;}</style></defs><title>Prosopo Logo Black</title><path class="cls-1" d="M335.55,1825.19A147.75,147.75,0,0,1,483.3,1972.94h50.5c0-109.49-88.76-198.25-198.25-198.25v50.5Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M269.36,1891.39A147.74,147.74,0,0,1,417.1,2039.13h50.5c0-109.49-88.75-198.24-198.24-198.24v50.5Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M414,2157.17a147.75,147.75,0,0,1-147.74-147.74h-50.5c0,109.49,88.75,198.24,198.24,198.24v-50.5Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M480.17,2091a147.74,147.74,0,0,1-147.74-147.75H281.92c0,109.49,88.76,198.25,198.25,198.25V2091Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M862.8,2017.5q-27.39,22.86-78.25,22.86h-65v112.19H654.82v-312h134q46.32,0,73.86,24.13t27.55,74.72Q890.2,1994.64,862.8,2017.5ZM813,1905.1q-12.37-10.36-34.7-10.38H719.59v91.87h58.75q22.32,0,34.7-11.22t12.39-35.56Q825.43,1915.48,813,1905.1Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1045.69,1916.42c.78.08,2.51.19,5.19.32v61.81c-3.81-.42-7.2-.71-10.16-.85s-5.36-.21-7.2-.21q-36.4,0-48.89,23.71-7,13.33-7,41.06v110.29H916.89V1921.82h57.58V1962q14-23.07,24.34-31.54,16.94-14.18,44-14.18C1044,1916.32,1044.92,1916.35,1045.69,1916.42Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1265.64,2124.32q-29.21,36.06-88.69,36.06t-88.69-36.06Q1059,2088.26,1059,2037.5q0-49.9,29.22-86.5t88.69-36.59q59.47,0,88.69,36.59t29.21,86.5Q1294.85,2088.26,1265.64,2124.32ZM1217.38,2091q14.17-18.81,14.18-53.48t-14.18-53.37q-14.19-18.7-40.64-18.71T1136,1984.13q-14.29,18.72-14.29,53.37T1136,2091q14.28,18.81,40.75,18.81T1217.38,2091Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1371.81,2078.88q1.92,16.1,8.29,22.87,11.28,12.06,41.7,12.06,17.85,0,28.39-5.29t10.53-15.88a17.12,17.12,0,0,0-8.48-15.45q-8.49-5.28-63.12-18.2-39.33-9.73-55.41-24.35-16.08-14.39-16.09-41.49,0-32,25.14-54.93t70.75-23q43.26,0,70.53,17.25t31.29,59.59H1455q-1.27-11.64-6.58-18.42-10-12.27-34-12.28-19.74,0-28.13,6.14t-8.38,14.4c0,6.91,3,11.93,8.92,15q8.89,4.89,63,16.73,36,8.46,54.05,25.61,17.77,17.35,17.78,43.39,0,34.3-25.56,56t-79,21.7q-54.51,0-80.49-23t-26-58.53Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1745.54,2124.32q-29.22,36.06-88.7,36.06t-88.69-36.06q-29.2-36.06-29.21-86.82,0-49.9,29.21-86.5t88.69-36.59q59.49,0,88.7,36.59t29.21,86.5Q1774.75,2088.26,1745.54,2124.32ZM1697.27,2091q14.19-18.81,14.19-53.48t-14.19-53.37q-14.18-18.7-40.64-18.71t-40.75,18.71q-14.28,18.72-14.28,53.37t14.28,53.48q14.3,18.81,40.75,18.81T1697.27,2091Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1992.75,1946.59q28.24,29.84,28.23,87.63,0,61-27.58,92.93t-71.06,32q-27.69,0-46-13.76-10-7.62-19.6-22.23v120.24H1797V1921.82h57.79v34.08q9.79-15,20.88-23.71,20.23-15.43,48.15-15.45Q1964.53,1916.74,1992.75,1946.59Zm-46.3,43.39q-12.3-20.52-39.88-20.53-33.15,0-45.54,31.11-6.43,16.51-6.42,41.92,0,40.21,21.58,56.51,12.82,9.53,30.37,9.53,25.45,0,38.83-19.48t13.36-51.86Q1958.75,2010.51,1946.45,1990Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M2249.14,2124.32q-29.2,36.06-88.69,36.06t-88.69-36.06q-29.22-36.06-29.21-86.82,0-49.9,29.21-86.5t88.69-36.59q59.49,0,88.69,36.59t29.22,86.5Q2278.36,2088.26,2249.14,2124.32ZM2200.88,2091q14.19-18.81,14.18-53.48t-14.18-53.37q-14.18-18.7-40.64-18.71t-40.75,18.71q-14.28,18.72-14.29,53.37t14.29,53.48q14.3,18.81,40.75,18.81T2200.88,2091Z" transform="translate(-215.73 -1774.69)"/></svg>';
const logoWithoutTextWhite$1 = '<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 260 348" height="35px"><path id="Vector" d="M95.7053 40.2707C127.005 40.2707 157.022 52.6841 179.154 74.78C201.286 96.8759 213.719 126.844 213.719 158.093H254.056C254.056 70.7808 183.16 -4.57764e-05 95.7053 -4.57764e-05V40.2707Z" fill="#fff"/><path id="Vector_2" d="M42.8365 93.0614C58.3333 93.0614 73.6784 96.1087 87.9955 102.029C102.313 107.95 115.322 116.628 126.279 127.568C137.237 138.508 145.93 151.496 151.86 165.79C157.79 180.084 160.843 195.404 160.843 210.875H201.179C201.179 123.564 130.291 52.7906 42.8365 52.7906V93.0614Z" fill="#fff"/><path id="Vector_3" d="M158.367 305.005C127.07 305.003 97.056 292.59 74.926 270.496C52.796 248.402 40.3626 218.437 40.3604 187.191H0.0239563C0.0239563 274.503 70.9123 345.276 158.367 345.276V305.005Z" fill="#fff"/><path id="Vector_4" d="M211.219 252.239C195.722 252.239 180.376 249.191 166.059 243.27C151.741 237.349 138.732 228.67 127.774 217.729C116.816 206.788 108.123 193.799 102.194 179.505C96.2637 165.21 93.2121 149.889 93.2132 134.417H52.8687C52.8687 221.729 123.765 292.509 211.219 292.509V252.239Z" fill="#fff"/></g><defs><clipPath id="clip0_1_2"><rect width="254" height="345" fill="white"/></clipPath></defs></svg>';
const logoWithoutTextBlack$1 = '<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 260 348" height="35px"><path id="Vector" d="M95.7053 40.2707C127.005 40.2707 157.022 52.6841 179.154 74.78C201.286 96.8759 213.719 126.844 213.719 158.093H254.056C254.056 70.7808 183.16 -4.57764e-05 95.7053 -4.57764e-05V40.2707Z" fill="#000000"/><path id="Vector_2" d="M42.8365 93.0614C58.3333 93.0614 73.6784 96.1087 87.9955 102.029C102.313 107.95 115.322 116.628 126.279 127.568C137.237 138.508 145.93 151.496 151.86 165.79C157.79 180.084 160.843 195.404 160.843 210.875H201.179C201.179 123.564 130.291 52.7906 42.8365 52.7906V93.0614Z" fill="#000000"/><path id="Vector_3" d="M158.367 305.005C127.07 305.003 97.056 292.59 74.926 270.496C52.796 248.402 40.3626 218.437 40.3604 187.191H0.0239563C0.0239563 274.503 70.9123 345.276 158.367 345.276V305.005Z" fill="#000000"/><path id="Vector_4" d="M211.219 252.239C195.722 252.239 180.376 249.191 166.059 243.27C151.741 237.349 138.732 228.67 127.774 217.729C116.816 206.788 108.123 193.799 102.194 179.505C96.2637 165.21 93.2121 149.889 93.2132 134.417H52.8687C52.8687 221.729 123.765 292.509 211.219 292.509V252.239Z" fill="#000000"/></g><defs><clipPath id="clip0_1_2"><rect width="254" height="345" fill="white"/></clipPath></defs></svg>';
const grey = {
  0: "#fff",
  100: "#f5f5f5",
  200: "#eeeeee",
  300: "#e0e0e0",
  400: "#bdbdbd",
  500: "#9e9e9e",
  600: "#757575",
  700: "#616161",
  800: "#424242",
  900: "#212121"
};
const lightTheme = {
  palette: {
    mode: "light",
    primary: {
      main: "#487DFA",
      contrastText: "#fff"
    },
    background: {
      default: "#fff",
      contrastText: "#000"
    },
    grey
  }
};
const darkTheme = {
  palette: {
    mode: "dark",
    primary: {
      main: "#487DFA",
      contrastText: "#fff"
    },
    background: {
      default: "#303030",
      contrastText: "#fff"
    },
    grey
  }
};
const LoadingSpinner = ({ themeColor }) => {
  const theme = reactExports.useMemo(() => themeColor === "light" ? lightTheme : darkTheme, [themeColor]);
  const StyledDiv = newStyled.div`
        width: 2em;
        height: 2em;
        border: 4px solid ${theme.palette.background.contrastText};
        border-bottom-color: transparent;
        border-radius: 50%;
        display: inherit;
        box-sizing: border-box;
        animation: rotation 1s linear infinite;
        @keyframes rotation {
            0% {
                transform: rotate(0deg);
            }
            100% {
                transform: rotate(360deg);
            }
        }
    `;
  return jsx(StyledDiv, {});
};
const logoStyle = css`
    align-items: center;
    justify-content: flex-end;
    display: flex;
    padding: 8px;

    @media (max-width: 245px) {
        &:nth-of-type(1),
        &:nth-of-type(2) {
            display: none;
        } /* Both logos hidden */
    }

    @media (min-width: 245px) and (max-width: 400px) {
        &:nth-of-type(1) {
            display: flex;
        } /* logoWithText */
        &:nth-of-type(2) {
            display: none;
        } /* logoWithoutText */
    }

    @media (min-width: 401px) {
        &:nth-of-type(1) {
            display: none;
        } /* logoWithText */
        &:nth-of-type(2) {
            display: flex;
        } /* logoWithoutText */
    }
`;
const ProcaptchaPlaceholder = (props) => {
  const darkMode = props.darkMode;
  const styleWidth = { maxWidth: "400px", minWidth: "200px", margin: "8px" };
  const themeColor = darkMode ? "light" : "dark";
  const theme = reactExports.useMemo(() => darkMode === "light" ? lightTheme : darkTheme, [darkMode]);
  return jsx("div", { children: jsx("div", { style: { maxWidth: "100%", maxHeight: "100%", overflowX: "auto" }, children: jsxs("div", { style: styleWidth, "data-cy": "button-human", children: [" ", jsxs("div", { style: {
    padding: "8px",
    border: "1px solid",
    backgroundColor: theme.palette.background.default,
    borderColor: theme.palette.grey[300],
    borderRadius: "8px",
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    flexWrap: "wrap"
  }, children: [jsx("div", { style: { display: "flex", flexDirection: "column" }, children: jsx("div", { style: {
    display: "flex",
    justifyContent: "flex-start",
    alignItems: "center",
    flexWrap: "wrap"
  }, children: jsx("div", { style: {
    height: "50px",
    width: "50px",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    flexDirection: "column",
    verticalAlign: "middle"
  }, children: jsx("div", { style: {
    display: "flex"
  }, children: jsx("div", { style: { flex: 1 }, children: jsx(LoadingSpinner, { themeColor }) }) }) }) }) }), jsx("div", { children: jsx("a", { href: "https://www.prosopo.io/#features?ref=accounts.prosopo.io&utm_campaign=widget&utm_medium=checkbox", target: "_blank", "aria-label": "Visit prosopo.io to learn more about the service and its accessibility options.", children: jsx("div", { children: jsxs("div", { children: [jsx("div", { css: logoStyle, dangerouslySetInnerHTML: {
    __html: darkMode === "light" ? logoWithoutTextBlack : logoWithoutTextWhite
  } }), jsx("div", { css: logoStyle, dangerouslySetInnerHTML: {
    __html: darkMode === "light" ? logoWithTextBlack : logoWithTextWhite
  } })] }) }) }) })] })] }) }) });
};
const logoWithTextBlack = '<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 2062.63 468.67" height="35px" width="140px"><defs><style>.cls-1{fill:#1d1d1b;}</style></defs><title>Prosopo Logo Black</title><path class="cls-1" d="M335.55,1825.19A147.75,147.75,0,0,1,483.3,1972.94h50.5c0-109.49-88.76-198.25-198.25-198.25v50.5Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M269.36,1891.39A147.74,147.74,0,0,1,417.1,2039.13h50.5c0-109.49-88.75-198.24-198.24-198.24v50.5Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M414,2157.17a147.75,147.75,0,0,1-147.74-147.74h-50.5c0,109.49,88.75,198.24,198.24,198.24v-50.5Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M480.17,2091a147.74,147.74,0,0,1-147.74-147.75H281.92c0,109.49,88.76,198.25,198.25,198.25V2091Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M862.8,2017.5q-27.39,22.86-78.25,22.86h-65v112.19H654.82v-312h134q46.32,0,73.86,24.13t27.55,74.72Q890.2,1994.64,862.8,2017.5ZM813,1905.1q-12.37-10.36-34.7-10.38H719.59v91.87h58.75q22.32,0,34.7-11.22t12.39-35.56Q825.43,1915.48,813,1905.1Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1045.69,1916.42c.78.08,2.51.19,5.19.32v61.81c-3.81-.42-7.2-.71-10.16-.85s-5.36-.21-7.2-.21q-36.4,0-48.89,23.71-7,13.33-7,41.06v110.29H916.89V1921.82h57.58V1962q14-23.07,24.34-31.54,16.94-14.18,44-14.18C1044,1916.32,1044.92,1916.35,1045.69,1916.42Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1265.64,2124.32q-29.21,36.06-88.69,36.06t-88.69-36.06Q1059,2088.26,1059,2037.5q0-49.9,29.22-86.5t88.69-36.59q59.47,0,88.69,36.59t29.21,86.5Q1294.85,2088.26,1265.64,2124.32ZM1217.38,2091q14.17-18.81,14.18-53.48t-14.18-53.37q-14.19-18.7-40.64-18.71T1136,1984.13q-14.29,18.72-14.29,53.37T1136,2091q14.28,18.81,40.75,18.81T1217.38,2091Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1371.81,2078.88q1.92,16.1,8.29,22.87,11.28,12.06,41.7,12.06,17.85,0,28.39-5.29t10.53-15.88a17.12,17.12,0,0,0-8.48-15.45q-8.49-5.28-63.12-18.2-39.33-9.73-55.41-24.35-16.08-14.39-16.09-41.49,0-32,25.14-54.93t70.75-23q43.26,0,70.53,17.25t31.29,59.59H1455q-1.27-11.64-6.58-18.42-10-12.27-34-12.28-19.74,0-28.13,6.14t-8.38,14.4c0,6.91,3,11.93,8.92,15q8.89,4.89,63,16.73,36,8.46,54.05,25.61,17.77,17.35,17.78,43.39,0,34.3-25.56,56t-79,21.7q-54.51,0-80.49-23t-26-58.53Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1745.54,2124.32q-29.22,36.06-88.7,36.06t-88.69-36.06q-29.2-36.06-29.21-86.82,0-49.9,29.21-86.5t88.69-36.59q59.49,0,88.7,36.59t29.21,86.5Q1774.75,2088.26,1745.54,2124.32ZM1697.27,2091q14.19-18.81,14.19-53.48t-14.19-53.37q-14.18-18.7-40.64-18.71t-40.75,18.71q-14.28,18.72-14.28,53.37t14.28,53.48q14.3,18.81,40.75,18.81T1697.27,2091Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1992.75,1946.59q28.24,29.84,28.23,87.63,0,61-27.58,92.93t-71.06,32q-27.69,0-46-13.76-10-7.62-19.6-22.23v120.24H1797V1921.82h57.79v34.08q9.79-15,20.88-23.71,20.23-15.43,48.15-15.45Q1964.53,1916.74,1992.75,1946.59Zm-46.3,43.39q-12.3-20.52-39.88-20.53-33.15,0-45.54,31.11-6.43,16.51-6.42,41.92,0,40.21,21.58,56.51,12.82,9.53,30.37,9.53,25.45,0,38.83-19.48t13.36-51.86Q1958.75,2010.51,1946.45,1990Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M2249.14,2124.32q-29.2,36.06-88.69,36.06t-88.69-36.06q-29.22-36.06-29.21-86.82,0-49.9,29.21-86.5t88.69-36.59q59.49,0,88.69,36.59t29.22,86.5Q2278.36,2088.26,2249.14,2124.32ZM2200.88,2091q14.19-18.81,14.18-53.48t-14.18-53.37q-14.18-18.7-40.64-18.71t-40.75,18.71q-14.28,18.72-14.29,53.37t14.29,53.48q14.3,18.81,40.75,18.81T2200.88,2091Z" transform="translate(-215.73 -1774.69)"/></svg>';
const logoWithTextWhite = '<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 2062.63 468.67" height="35px" width="140px"><defs><style>.cls-1{fill:#fff;}</style></defs><title>Prosopo Logo Black</title><path class="cls-1" d="M335.55,1825.19A147.75,147.75,0,0,1,483.3,1972.94h50.5c0-109.49-88.76-198.25-198.25-198.25v50.5Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M269.36,1891.39A147.74,147.74,0,0,1,417.1,2039.13h50.5c0-109.49-88.75-198.24-198.24-198.24v50.5Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M414,2157.17a147.75,147.75,0,0,1-147.74-147.74h-50.5c0,109.49,88.75,198.24,198.24,198.24v-50.5Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M480.17,2091a147.74,147.74,0,0,1-147.74-147.75H281.92c0,109.49,88.76,198.25,198.25,198.25V2091Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M862.8,2017.5q-27.39,22.86-78.25,22.86h-65v112.19H654.82v-312h134q46.32,0,73.86,24.13t27.55,74.72Q890.2,1994.64,862.8,2017.5ZM813,1905.1q-12.37-10.36-34.7-10.38H719.59v91.87h58.75q22.32,0,34.7-11.22t12.39-35.56Q825.43,1915.48,813,1905.1Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1045.69,1916.42c.78.08,2.51.19,5.19.32v61.81c-3.81-.42-7.2-.71-10.16-.85s-5.36-.21-7.2-.21q-36.4,0-48.89,23.71-7,13.33-7,41.06v110.29H916.89V1921.82h57.58V1962q14-23.07,24.34-31.54,16.94-14.18,44-14.18C1044,1916.32,1044.92,1916.35,1045.69,1916.42Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1265.64,2124.32q-29.21,36.06-88.69,36.06t-88.69-36.06Q1059,2088.26,1059,2037.5q0-49.9,29.22-86.5t88.69-36.59q59.47,0,88.69,36.59t29.21,86.5Q1294.85,2088.26,1265.64,2124.32ZM1217.38,2091q14.17-18.81,14.18-53.48t-14.18-53.37q-14.19-18.7-40.64-18.71T1136,1984.13q-14.29,18.72-14.29,53.37T1136,2091q14.28,18.81,40.75,18.81T1217.38,2091Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1371.81,2078.88q1.92,16.1,8.29,22.87,11.28,12.06,41.7,12.06,17.85,0,28.39-5.29t10.53-15.88a17.12,17.12,0,0,0-8.48-15.45q-8.49-5.28-63.12-18.2-39.33-9.73-55.41-24.35-16.08-14.39-16.09-41.49,0-32,25.14-54.93t70.75-23q43.26,0,70.53,17.25t31.29,59.59H1455q-1.27-11.64-6.58-18.42-10-12.27-34-12.28-19.74,0-28.13,6.14t-8.38,14.4c0,6.91,3,11.93,8.92,15q8.89,4.89,63,16.73,36,8.46,54.05,25.61,17.77,17.35,17.78,43.39,0,34.3-25.56,56t-79,21.7q-54.51,0-80.49-23t-26-58.53Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1745.54,2124.32q-29.22,36.06-88.7,36.06t-88.69-36.06q-29.2-36.06-29.21-86.82,0-49.9,29.21-86.5t88.69-36.59q59.49,0,88.7,36.59t29.21,86.5Q1774.75,2088.26,1745.54,2124.32ZM1697.27,2091q14.19-18.81,14.19-53.48t-14.19-53.37q-14.18-18.7-40.64-18.71t-40.75,18.71q-14.28,18.72-14.28,53.37t14.28,53.48q14.3,18.81,40.75,18.81T1697.27,2091Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1992.75,1946.59q28.24,29.84,28.23,87.63,0,61-27.58,92.93t-71.06,32q-27.69,0-46-13.76-10-7.62-19.6-22.23v120.24H1797V1921.82h57.79v34.08q9.79-15,20.88-23.71,20.23-15.43,48.15-15.45Q1964.53,1916.74,1992.75,1946.59Zm-46.3,43.39q-12.3-20.52-39.88-20.53-33.15,0-45.54,31.11-6.43,16.51-6.42,41.92,0,40.21,21.58,56.51,12.82,9.53,30.37,9.53,25.45,0,38.83-19.48t13.36-51.86Q1958.75,2010.51,1946.45,1990Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M2249.14,2124.32q-29.2,36.06-88.69,36.06t-88.69-36.06q-29.22-36.06-29.21-86.82,0-49.9,29.21-86.5t88.69-36.59q59.49,0,88.69,36.59t29.22,86.5Q2278.36,2088.26,2249.14,2124.32ZM2200.88,2091q14.19-18.81,14.18-53.48t-14.18-53.37q-14.18-18.7-40.64-18.71t-40.75,18.71q-14.28,18.72-14.29,53.37t14.29,53.48q14.3,18.81,40.75,18.81T2200.88,2091Z" transform="translate(-215.73 -1774.69)"/></svg>';
const logoWithoutTextWhite = '<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 260 348" height="35px"><path id="Vector" d="M95.7053 40.2707C127.005 40.2707 157.022 52.6841 179.154 74.78C201.286 96.8759 213.719 126.844 213.719 158.093H254.056C254.056 70.7808 183.16 -4.57764e-05 95.7053 -4.57764e-05V40.2707Z" fill="#fff"/><path id="Vector_2" d="M42.8365 93.0614C58.3333 93.0614 73.6784 96.1087 87.9955 102.029C102.313 107.95 115.322 116.628 126.279 127.568C137.237 138.508 145.93 151.496 151.86 165.79C157.79 180.084 160.843 195.404 160.843 210.875H201.179C201.179 123.564 130.291 52.7906 42.8365 52.7906V93.0614Z" fill="#fff"/><path id="Vector_3" d="M158.367 305.005C127.07 305.003 97.056 292.59 74.926 270.496C52.796 248.402 40.3626 218.437 40.3604 187.191H0.0239563C0.0239563 274.503 70.9123 345.276 158.367 345.276V305.005Z" fill="#fff"/><path id="Vector_4" d="M211.219 252.239C195.722 252.239 180.376 249.191 166.059 243.27C151.741 237.349 138.732 228.67 127.774 217.729C116.816 206.788 108.123 193.799 102.194 179.505C96.2637 165.21 93.2121 149.889 93.2132 134.417H52.8687C52.8687 221.729 123.765 292.509 211.219 292.509V252.239Z" fill="#fff"/></g><defs><clipPath id="clip0_1_2"><rect width="254" height="345" fill="white"/></clipPath></defs></svg>';
const logoWithoutTextBlack = '<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 260 348" height="35px"><path id="Vector" d="M95.7053 40.2707C127.005 40.2707 157.022 52.6841 179.154 74.78C201.286 96.8759 213.719 126.844 213.719 158.093H254.056C254.056 70.7808 183.16 -4.57764e-05 95.7053 -4.57764e-05V40.2707Z" fill="#000000"/><path id="Vector_2" d="M42.8365 93.0614C58.3333 93.0614 73.6784 96.1087 87.9955 102.029C102.313 107.95 115.322 116.628 126.279 127.568C137.237 138.508 145.93 151.496 151.86 165.79C157.79 180.084 160.843 195.404 160.843 210.875H201.179C201.179 123.564 130.291 52.7906 42.8365 52.7906V93.0614Z" fill="#000000"/><path id="Vector_3" d="M158.367 305.005C127.07 305.003 97.056 292.59 74.926 270.496C52.796 248.402 40.3626 218.437 40.3604 187.191H0.0239563C0.0239563 274.503 70.9123 345.276 158.367 345.276V305.005Z" fill="#000000"/><path id="Vector_4" d="M211.219 252.239C195.722 252.239 180.376 249.191 166.059 243.27C151.741 237.349 138.732 228.67 127.774 217.729C116.816 206.788 108.123 193.799 102.194 179.505C96.2637 165.21 93.2121 149.889 93.2132 134.417H52.8687C52.8687 221.729 123.765 292.509 211.219 292.509V252.239Z" fill="#000000"/></g><defs><clipPath id="clip0_1_2"><rect width="254" height="345" fill="white"/></clipPath></defs></svg>';
const ProcaptchaWidget = reactExports.lazy(async () => import("./ProcaptchaWidget-90d6398e.js"));
const Procaptcha = (props) => jsx(reactExports.Suspense, { fallback: jsx(ProcaptchaPlaceholder, { darkMode: props.config.theme }), children: jsx(ProcaptchaWidget, { config: props.config, callbacks: props.callbacks }) });
const Procaptcha$1 = Procaptcha;
var reactDom = { exports: {} };
var reactDom_development = {};
var scheduler = { exports: {} };
var scheduler_development = {};
(function(exports) {
  {
    (function() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      }
      var enableSchedulerDebugging = false;
      var frameYieldMs = 5;
      function push(heap, node2) {
        var index = heap.length;
        heap.push(node2);
        siftUp(heap, node2, index);
      }
      function peek2(heap) {
        return heap.length === 0 ? null : heap[0];
      }
      function pop(heap) {
        if (heap.length === 0) {
          return null;
        }
        var first2 = heap[0];
        var last2 = heap.pop();
        if (last2 !== first2) {
          heap[0] = last2;
          siftDown(heap, last2, 0);
        }
        return first2;
      }
      function siftUp(heap, node2, i) {
        var index = i;
        while (index > 0) {
          var parentIndex = index - 1 >>> 1;
          var parent = heap[parentIndex];
          if (compare(parent, node2) > 0) {
            heap[parentIndex] = node2;
            heap[index] = parent;
            index = parentIndex;
          } else {
            return;
          }
        }
      }
      function siftDown(heap, node2, i) {
        var index = i;
        var length2 = heap.length;
        var halfLength = length2 >>> 1;
        while (index < halfLength) {
          var leftIndex = (index + 1) * 2 - 1;
          var left = heap[leftIndex];
          var rightIndex = leftIndex + 1;
          var right = heap[rightIndex];
          if (compare(left, node2) < 0) {
            if (rightIndex < length2 && compare(right, left) < 0) {
              heap[index] = right;
              heap[rightIndex] = node2;
              index = rightIndex;
            } else {
              heap[index] = left;
              heap[leftIndex] = node2;
              index = leftIndex;
            }
          } else if (rightIndex < length2 && compare(right, node2) < 0) {
            heap[index] = right;
            heap[rightIndex] = node2;
            index = rightIndex;
          } else {
            return;
          }
        }
      }
      function compare(a, b) {
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
      }
      var ImmediatePriority = 1;
      var UserBlockingPriority = 2;
      var NormalPriority = 3;
      var LowPriority = 4;
      var IdlePriority = 5;
      var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
      if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
          return localPerformance.now();
        };
      } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports.unstable_now = function() {
          return localDate.now() - initialTime;
        };
      }
      var maxSigned31BitInt = 1073741823;
      var IMMEDIATE_PRIORITY_TIMEOUT = -1;
      var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
      var NORMAL_PRIORITY_TIMEOUT = 5e3;
      var LOW_PRIORITY_TIMEOUT = 1e4;
      var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
      var taskQueue = [];
      var timerQueue = [];
      var taskIdCounter = 1;
      var currentTask = null;
      var currentPriorityLevel = NormalPriority;
      var isPerformingWork = false;
      var isHostCallbackScheduled = false;
      var isHostTimeoutScheduled = false;
      var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
      var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
      var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
      typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
      function advanceTimers(currentTime) {
        var timer = peek2(timerQueue);
        while (timer !== null) {
          if (timer.callback === null) {
            pop(timerQueue);
          } else if (timer.startTime <= currentTime) {
            pop(timerQueue);
            timer.sortIndex = timer.expirationTime;
            push(taskQueue, timer);
          } else {
            return;
          }
          timer = peek2(timerQueue);
        }
      }
      function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
          if (peek2(taskQueue) !== null) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          } else {
            var firstTimer = peek2(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
          }
        }
      }
      function flushWork(hasTimeRemaining, initialTime2) {
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
          isHostTimeoutScheduled = false;
          cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
          {
            return workLoop(hasTimeRemaining, initialTime2);
          }
        } finally {
          currentTask = null;
          currentPriorityLevel = previousPriorityLevel;
          isPerformingWork = false;
        }
      }
      function workLoop(hasTimeRemaining, initialTime2) {
        var currentTime = initialTime2;
        advanceTimers(currentTime);
        currentTask = peek2(taskQueue);
        while (currentTask !== null && !enableSchedulerDebugging) {
          if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
            break;
          }
          var callback = currentTask.callback;
          if (typeof callback === "function") {
            currentTask.callback = null;
            currentPriorityLevel = currentTask.priorityLevel;
            var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
            var continuationCallback = callback(didUserCallbackTimeout);
            currentTime = exports.unstable_now();
            if (typeof continuationCallback === "function") {
              currentTask.callback = continuationCallback;
            } else {
              if (currentTask === peek2(taskQueue)) {
                pop(taskQueue);
              }
            }
            advanceTimers(currentTime);
          } else {
            pop(taskQueue);
          }
          currentTask = peek2(taskQueue);
        }
        if (currentTask !== null) {
          return true;
        } else {
          var firstTimer = peek2(timerQueue);
          if (firstTimer !== null) {
            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
          }
          return false;
        }
      }
      function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch (priorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
          case LowPriority:
          case IdlePriority:
            break;
          default:
            priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_next(eventHandler) {
        var priorityLevel;
        switch (currentPriorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
            priorityLevel = NormalPriority;
            break;
          default:
            priorityLevel = currentPriorityLevel;
            break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = parentPriorityLevel;
          try {
            return callback.apply(this, arguments);
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
      }
      function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime2;
        if (typeof options === "object" && options !== null) {
          var delay = options.delay;
          if (typeof delay === "number" && delay > 0) {
            startTime2 = currentTime + delay;
          } else {
            startTime2 = currentTime;
          }
        } else {
          startTime2 = currentTime;
        }
        var timeout;
        switch (priorityLevel) {
          case ImmediatePriority:
            timeout = IMMEDIATE_PRIORITY_TIMEOUT;
            break;
          case UserBlockingPriority:
            timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
            break;
          case IdlePriority:
            timeout = IDLE_PRIORITY_TIMEOUT;
            break;
          case LowPriority:
            timeout = LOW_PRIORITY_TIMEOUT;
            break;
          case NormalPriority:
          default:
            timeout = NORMAL_PRIORITY_TIMEOUT;
            break;
        }
        var expirationTime = startTime2 + timeout;
        var newTask = {
          id: taskIdCounter++,
          callback,
          priorityLevel,
          startTime: startTime2,
          expirationTime,
          sortIndex: -1
        };
        if (startTime2 > currentTime) {
          newTask.sortIndex = startTime2;
          push(timerQueue, newTask);
          if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
            if (isHostTimeoutScheduled) {
              cancelHostTimeout();
            } else {
              isHostTimeoutScheduled = true;
            }
            requestHostTimeout(handleTimeout, startTime2 - currentTime);
          }
        } else {
          newTask.sortIndex = expirationTime;
          push(taskQueue, newTask);
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        return newTask;
      }
      function unstable_pauseExecution() {
      }
      function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
          isHostCallbackScheduled = true;
          requestHostCallback(flushWork);
        }
      }
      function unstable_getFirstCallbackNode() {
        return peek2(taskQueue);
      }
      function unstable_cancelCallback(task) {
        task.callback = null;
      }
      function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
      }
      var isMessageLoopRunning = false;
      var scheduledHostCallback = null;
      var taskTimeoutID = -1;
      var frameInterval = frameYieldMs;
      var startTime = -1;
      function shouldYieldToHost() {
        var timeElapsed = exports.unstable_now() - startTime;
        if (timeElapsed < frameInterval) {
          return false;
        }
        return true;
      }
      function requestPaint() {
      }
      function forceFrameRate(fps) {
        if (fps < 0 || fps > 125) {
          console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
          return;
        }
        if (fps > 0) {
          frameInterval = Math.floor(1e3 / fps);
        } else {
          frameInterval = frameYieldMs;
        }
      }
      var performWorkUntilDeadline = function() {
        if (scheduledHostCallback !== null) {
          var currentTime = exports.unstable_now();
          startTime = currentTime;
          var hasTimeRemaining = true;
          var hasMoreWork = true;
          try {
            hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
          } finally {
            if (hasMoreWork) {
              schedulePerformWorkUntilDeadline();
            } else {
              isMessageLoopRunning = false;
              scheduledHostCallback = null;
            }
          }
        } else {
          isMessageLoopRunning = false;
        }
      };
      var schedulePerformWorkUntilDeadline;
      if (typeof localSetImmediate === "function") {
        schedulePerformWorkUntilDeadline = function() {
          localSetImmediate(performWorkUntilDeadline);
        };
      } else if (typeof MessageChannel !== "undefined") {
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        schedulePerformWorkUntilDeadline = function() {
          port.postMessage(null);
        };
      } else {
        schedulePerformWorkUntilDeadline = function() {
          localSetTimeout(performWorkUntilDeadline, 0);
        };
      }
      function requestHostCallback(callback) {
        scheduledHostCallback = callback;
        if (!isMessageLoopRunning) {
          isMessageLoopRunning = true;
          schedulePerformWorkUntilDeadline();
        }
      }
      function requestHostTimeout(callback, ms) {
        taskTimeoutID = localSetTimeout(function() {
          callback(exports.unstable_now());
        }, ms);
      }
      function cancelHostTimeout() {
        localClearTimeout(taskTimeoutID);
        taskTimeoutID = -1;
      }
      var unstable_requestPaint = requestPaint;
      var unstable_Profiling = null;
      exports.unstable_IdlePriority = IdlePriority;
      exports.unstable_ImmediatePriority = ImmediatePriority;
      exports.unstable_LowPriority = LowPriority;
      exports.unstable_NormalPriority = NormalPriority;
      exports.unstable_Profiling = unstable_Profiling;
      exports.unstable_UserBlockingPriority = UserBlockingPriority;
      exports.unstable_cancelCallback = unstable_cancelCallback;
      exports.unstable_continueExecution = unstable_continueExecution;
      exports.unstable_forceFrameRate = forceFrameRate;
      exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
      exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
      exports.unstable_next = unstable_next;
      exports.unstable_pauseExecution = unstable_pauseExecution;
      exports.unstable_requestPaint = unstable_requestPaint;
      exports.unstable_runWithPriority = unstable_runWithPriority;
      exports.unstable_scheduleCallback = unstable_scheduleCallback;
      exports.unstable_shouldYield = shouldYieldToHost;
      exports.unstable_wrapCallback = unstable_wrapCallback;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
      }
    })();
  }
})(scheduler_development);
/* @__PURE__ */ getDefaultExportFromCjs(scheduler_development);
{
  scheduler.exports = scheduler_development;
}
var schedulerExports = scheduler.exports;
/* @__PURE__ */ getDefaultExportFromCjs(schedulerExports);
{
  (function() {
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    }
    var React2 = reactExports;
    var Scheduler2 = schedulerExports;
    var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    var suppressWarning = false;
    function setSuppressWarning(newSuppressWarning) {
      {
        suppressWarning = newSuppressWarning;
      }
    }
    function warn3(format) {
      {
        if (!suppressWarning) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          printWarning("warn", format, args);
        }
      }
    }
    function error2(format) {
      {
        if (!suppressWarning) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          printWarning("error", format, args);
        }
      }
    }
    function printWarning(level, format, args) {
      {
        var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame2.getStackAddendum();
        if (stack !== "") {
          format += "%s";
          args = args.concat([stack]);
        }
        var argsWithFormat = args.map(function(item) {
          return String(item);
        });
        argsWithFormat.unshift("Warning: " + format);
        Function.prototype.apply.call(console[level], console, argsWithFormat);
      }
    }
    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2;
    var HostRoot = 3;
    var HostPortal = 4;
    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedFragment = 18;
    var SuspenseListComponent = 19;
    var ScopeComponent = 21;
    var OffscreenComponent = 22;
    var LegacyHiddenComponent = 23;
    var CacheComponent = 24;
    var TracingMarkerComponent = 25;
    var enableClientRenderFallbackOnTextMismatch = true;
    var enableNewReconciler = false;
    var enableLazyContextPropagation = false;
    var enableLegacyHidden = false;
    var enableSuspenseAvoidThisFallback = false;
    var disableCommentsAsDOMContainers = true;
    var enableCustomElementPropertySupport = false;
    var warnAboutStringRefs = false;
    var allNativeEvents = /* @__PURE__ */ new Set();
    var registrationNameDependencies = {};
    var possibleRegistrationNames = {};
    function registerTwoPhaseEvent(registrationName, dependencies) {
      registerDirectEvent(registrationName, dependencies);
      registerDirectEvent(registrationName + "Capture", dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
      {
        if (registrationNameDependencies[registrationName]) {
          error2("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
        }
      }
      registrationNameDependencies[registrationName] = dependencies;
      {
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;
        if (registrationName === "onDoubleClick") {
          possibleRegistrationNames.ondblclick = registrationName;
        }
      }
      for (var i = 0; i < dependencies.length; i++) {
        allNativeEvents.add(dependencies[i]);
      }
    }
    var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    function typeName(value) {
      {
        var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        return type;
      }
    }
    function willCoercionThrow(value) {
      {
        try {
          return false;
        } catch (e) {
          return true;
        }
      }
    }
    function testStringCoercion(value) {
      return "" + value;
    }
    function checkAttributeStringCoercion(value, attributeName) {
      {
        if (willCoercionThrow()) {
          error2("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
          return testStringCoercion(value);
        }
      }
    }
    function checkKeyStringCoercion(value) {
      {
        if (willCoercionThrow()) {
          error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
          return testStringCoercion(value);
        }
      }
    }
    function checkPropStringCoercion(value, propName) {
      {
        if (willCoercionThrow()) {
          error2("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
          return testStringCoercion(value);
        }
      }
    }
    function checkCSSPropertyStringCoercion(value, propName) {
      {
        if (willCoercionThrow()) {
          error2("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
          return testStringCoercion(value);
        }
      }
    }
    function checkHtmlStringCoercion(value) {
      {
        if (willCoercionThrow()) {
          error2("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
          return testStringCoercion(value);
        }
      }
    }
    function checkFormFieldValueStringCoercion(value) {
      {
        if (willCoercionThrow()) {
          error2("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
          return testStringCoercion(value);
        }
      }
    }
    var RESERVED2 = 0;
    var STRING = 1;
    var BOOLEANISH_STRING = 2;
    var BOOLEAN = 3;
    var OVERLOADED_BOOLEAN = 4;
    var NUMERIC = 5;
    var POSITIVE_NUMERIC = 6;
    var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
    var illegalAttributeNameCache = {};
    var validatedAttributeNameCache = {};
    function isAttributeNameSafe(attributeName) {
      if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
        return true;
      }
      if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
        return false;
      }
      if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
        validatedAttributeNameCache[attributeName] = true;
        return true;
      }
      illegalAttributeNameCache[attributeName] = true;
      {
        error2("Invalid attribute name: `%s`", attributeName);
      }
      return false;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null) {
        return propertyInfo.type === RESERVED2;
      }
      if (isCustomComponentTag) {
        return false;
      }
      if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
        return true;
      }
      return false;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null && propertyInfo.type === RESERVED2) {
        return false;
      }
      switch (typeof value) {
        case "function":
        case "symbol":
          return true;
        case "boolean": {
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            return !propertyInfo.acceptsBooleans;
          } else {
            var prefix3 = name.toLowerCase().slice(0, 5);
            return prefix3 !== "data-" && prefix3 !== "aria-";
          }
        }
        default:
          return false;
      }
    }
    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
      if (value === null || typeof value === "undefined") {
        return true;
      }
      if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
        return true;
      }
      if (isCustomComponentTag) {
        return false;
      }
      if (propertyInfo !== null) {
        switch (propertyInfo.type) {
          case BOOLEAN:
            return !value;
          case OVERLOADED_BOOLEAN:
            return value === false;
          case NUMERIC:
            return isNaN(value);
          case POSITIVE_NUMERIC:
            return isNaN(value) || value < 1;
        }
      }
      return false;
    }
    function getPropertyInfo(name) {
      return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
      this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
      this.attributeName = attributeName;
      this.attributeNamespace = attributeNamespace;
      this.mustUseProperty = mustUseProperty;
      this.propertyName = name;
      this.type = type;
      this.sanitizeURL = sanitizeURL2;
      this.removeEmptyString = removeEmptyString;
    }
    var properties = {};
    var reservedProps = [
      "children",
      "dangerouslySetInnerHTML",
      // TODO: This prevents the assignment of defaultValue to regular
      // elements (not just inputs). Now that ReactDOMInput assigns to the
      // defaultValue property -- do we need this?
      "defaultValue",
      "defaultChecked",
      "innerHTML",
      "suppressContentEditableWarning",
      "suppressHydrationWarning",
      "style"
    ];
    reservedProps.forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        RESERVED2,
        false,
        // mustUseProperty
        name,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
      var name = _ref[0], attributeName = _ref[1];
      properties[name] = new PropertyInfoRecord(
        name,
        STRING,
        false,
        // mustUseProperty
        attributeName,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        BOOLEANISH_STRING,
        false,
        // mustUseProperty
        name.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        BOOLEANISH_STRING,
        false,
        // mustUseProperty
        name,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    [
      "allowFullScreen",
      "async",
      // Note: there is a special case that prevents it from being written to the DOM
      // on the client side because the browsers are inconsistent. Instead we call focus().
      "autoFocus",
      "autoPlay",
      "controls",
      "default",
      "defer",
      "disabled",
      "disablePictureInPicture",
      "disableRemotePlayback",
      "formNoValidate",
      "hidden",
      "loop",
      "noModule",
      "noValidate",
      "open",
      "playsInline",
      "readOnly",
      "required",
      "reversed",
      "scoped",
      "seamless",
      // Microdata
      "itemScope"
    ].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        BOOLEAN,
        false,
        // mustUseProperty
        name.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    [
      "checked",
      // Note: `option.selected` is not updated if `select.multiple` is
      // disabled with `removeAttribute`. We have special logic for handling this.
      "multiple",
      "muted",
      "selected"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        BOOLEAN,
        true,
        // mustUseProperty
        name,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    [
      "capture",
      "download"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        OVERLOADED_BOOLEAN,
        false,
        // mustUseProperty
        name,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    [
      "cols",
      "rows",
      "size",
      "span"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        POSITIVE_NUMERIC,
        false,
        // mustUseProperty
        name,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    ["rowSpan", "start"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        NUMERIC,
        false,
        // mustUseProperty
        name.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize2 = function(token2) {
      return token2[1].toUpperCase();
    };
    [
      "accent-height",
      "alignment-baseline",
      "arabic-form",
      "baseline-shift",
      "cap-height",
      "clip-path",
      "clip-rule",
      "color-interpolation",
      "color-interpolation-filters",
      "color-profile",
      "color-rendering",
      "dominant-baseline",
      "enable-background",
      "fill-opacity",
      "fill-rule",
      "flood-color",
      "flood-opacity",
      "font-family",
      "font-size",
      "font-size-adjust",
      "font-stretch",
      "font-style",
      "font-variant",
      "font-weight",
      "glyph-name",
      "glyph-orientation-horizontal",
      "glyph-orientation-vertical",
      "horiz-adv-x",
      "horiz-origin-x",
      "image-rendering",
      "letter-spacing",
      "lighting-color",
      "marker-end",
      "marker-mid",
      "marker-start",
      "overline-position",
      "overline-thickness",
      "paint-order",
      "panose-1",
      "pointer-events",
      "rendering-intent",
      "shape-rendering",
      "stop-color",
      "stop-opacity",
      "strikethrough-position",
      "strikethrough-thickness",
      "stroke-dasharray",
      "stroke-dashoffset",
      "stroke-linecap",
      "stroke-linejoin",
      "stroke-miterlimit",
      "stroke-opacity",
      "stroke-width",
      "text-anchor",
      "text-decoration",
      "text-rendering",
      "underline-position",
      "underline-thickness",
      "unicode-bidi",
      "unicode-range",
      "units-per-em",
      "v-alphabetic",
      "v-hanging",
      "v-ideographic",
      "v-mathematical",
      "vector-effect",
      "vert-adv-y",
      "vert-origin-x",
      "vert-origin-y",
      "word-spacing",
      "writing-mode",
      "xmlns:xlink",
      "x-height"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize2);
      properties[name] = new PropertyInfoRecord(
        name,
        STRING,
        false,
        // mustUseProperty
        attributeName,
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    [
      "xlink:actuate",
      "xlink:arcrole",
      "xlink:role",
      "xlink:show",
      "xlink:title",
      "xlink:type"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize2);
      properties[name] = new PropertyInfoRecord(
        name,
        STRING,
        false,
        // mustUseProperty
        attributeName,
        "http://www.w3.org/1999/xlink",
        false,
        // sanitizeURL
        false
      );
    });
    [
      "xml:base",
      "xml:lang",
      "xml:space"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize2);
      properties[name] = new PropertyInfoRecord(
        name,
        STRING,
        false,
        // mustUseProperty
        attributeName,
        "http://www.w3.org/XML/1998/namespace",
        false,
        // sanitizeURL
        false
      );
    });
    ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
      properties[attributeName] = new PropertyInfoRecord(
        attributeName,
        STRING,
        false,
        // mustUseProperty
        attributeName.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    var xlinkHref = "xlinkHref";
    properties[xlinkHref] = new PropertyInfoRecord(
      "xlinkHref",
      STRING,
      false,
      // mustUseProperty
      "xlink:href",
      "http://www.w3.org/1999/xlink",
      true,
      // sanitizeURL
      false
    );
    ["src", "href", "action", "formAction"].forEach(function(attributeName) {
      properties[attributeName] = new PropertyInfoRecord(
        attributeName,
        STRING,
        false,
        // mustUseProperty
        attributeName.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        true,
        // sanitizeURL
        true
      );
    });
    var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
    var didWarn = false;
    function sanitizeURL(url) {
      {
        if (!didWarn && isJavaScriptProtocol.test(url)) {
          didWarn = true;
          error2("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
        }
      }
    }
    function getValueForProperty(node2, name, expected, propertyInfo) {
      {
        if (propertyInfo.mustUseProperty) {
          var propertyName = propertyInfo.propertyName;
          return node2[propertyName];
        } else {
          {
            checkAttributeStringCoercion(expected, name);
          }
          if (propertyInfo.sanitizeURL) {
            sanitizeURL("" + expected);
          }
          var attributeName = propertyInfo.attributeName;
          var stringValue = null;
          if (propertyInfo.type === OVERLOADED_BOOLEAN) {
            if (node2.hasAttribute(attributeName)) {
              var value = node2.getAttribute(attributeName);
              if (value === "") {
                return true;
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return value;
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          } else if (node2.hasAttribute(attributeName)) {
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
              return node2.getAttribute(attributeName);
            }
            if (propertyInfo.type === BOOLEAN) {
              return expected;
            }
            stringValue = node2.getAttribute(attributeName);
          }
          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return stringValue === null ? expected : stringValue;
          } else if (stringValue === "" + expected) {
            return expected;
          } else {
            return stringValue;
          }
        }
      }
    }
    function getValueForAttribute(node2, name, expected, isCustomComponentTag) {
      {
        if (!isAttributeNameSafe(name)) {
          return;
        }
        if (!node2.hasAttribute(name)) {
          return expected === void 0 ? void 0 : null;
        }
        var value = node2.getAttribute(name);
        {
          checkAttributeStringCoercion(expected, name);
        }
        if (value === "" + expected) {
          return expected;
        }
        return value;
      }
    }
    function setValueForProperty(node2, name, value, isCustomComponentTag) {
      var propertyInfo = getPropertyInfo(name);
      if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
        return;
      }
      if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
        value = null;
      }
      if (isCustomComponentTag || propertyInfo === null) {
        if (isAttributeNameSafe(name)) {
          var _attributeName = name;
          if (value === null) {
            node2.removeAttribute(_attributeName);
          } else {
            {
              checkAttributeStringCoercion(value, name);
            }
            node2.setAttribute(_attributeName, "" + value);
          }
        }
        return;
      }
      var mustUseProperty = propertyInfo.mustUseProperty;
      if (mustUseProperty) {
        var propertyName = propertyInfo.propertyName;
        if (value === null) {
          var type = propertyInfo.type;
          node2[propertyName] = type === BOOLEAN ? false : "";
        } else {
          node2[propertyName] = value;
        }
        return;
      }
      var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
      if (value === null) {
        node2.removeAttribute(attributeName);
      } else {
        var _type = propertyInfo.type;
        var attributeValue;
        if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
          attributeValue = "";
        } else {
          {
            {
              checkAttributeStringCoercion(value, attributeName);
            }
            attributeValue = "" + value;
          }
          if (propertyInfo.sanitizeURL) {
            sanitizeURL(attributeValue.toString());
          }
        }
        if (attributeNamespace) {
          node2.setAttributeNS(attributeNamespace, attributeName, attributeValue);
        } else {
          node2.setAttribute(attributeName, attributeValue);
        }
      }
    }
    var REACT_ELEMENT_TYPE = Symbol.for("react.element");
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
    var REACT_MEMO_TYPE = Symbol.for("react.memo");
    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
    var REACT_SCOPE_TYPE = Symbol.for("react.scope");
    var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
    var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
    var REACT_CACHE_TYPE = Symbol.for("react.cache");
    var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== "object") {
        return null;
      }
      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
      if (typeof maybeIterator === "function") {
        return maybeIterator;
      }
      return null;
    }
    var assign2 = Object.assign;
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
      {
        if (disabledDepth === 0) {
          prevLog = console.log;
          prevInfo = console.info;
          prevWarn = console.warn;
          prevError = console.error;
          prevGroup = console.group;
          prevGroupCollapsed = console.groupCollapsed;
          prevGroupEnd = console.groupEnd;
          var props = {
            configurable: true,
            enumerable: true,
            value: disabledLog,
            writable: true
          };
          Object.defineProperties(console, {
            info: props,
            log: props,
            warn: props,
            error: props,
            group: props,
            groupCollapsed: props,
            groupEnd: props
          });
        }
        disabledDepth++;
      }
    }
    function reenableLogs() {
      {
        disabledDepth--;
        if (disabledDepth === 0) {
          var props = {
            configurable: true,
            enumerable: true,
            writable: true
          };
          Object.defineProperties(console, {
            log: assign2({}, props, {
              value: prevLog
            }),
            info: assign2({}, props, {
              value: prevInfo
            }),
            warn: assign2({}, props, {
              value: prevWarn
            }),
            error: assign2({}, props, {
              value: prevError
            }),
            group: assign2({}, props, {
              value: prevGroup
            }),
            groupCollapsed: assign2({}, props, {
              value: prevGroupCollapsed
            }),
            groupEnd: assign2({}, props, {
              value: prevGroupEnd
            })
          });
        }
        if (disabledDepth < 0) {
          error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix2;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
      {
        if (prefix2 === void 0) {
          try {
            throw Error();
          } catch (x) {
            var match2 = x.stack.trim().match(/\n( *(at )?)/);
            prefix2 = match2 && match2[1] || "";
          }
        }
        return "\n" + prefix2 + name;
      }
    }
    var reentry = false;
    var componentFrameCache;
    {
      var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
      componentFrameCache = new PossiblyWeakMap();
    }
    function describeNativeComponentFrame(fn, construct) {
      if (!fn || reentry) {
        return "";
      }
      {
        var frame = componentFrameCache.get(fn);
        if (frame !== void 0) {
          return frame;
        }
      }
      var control;
      reentry = true;
      var previousPrepareStackTrace = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var previousDispatcher;
      {
        previousDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = null;
        disableLogs();
      }
      try {
        if (construct) {
          var Fake = function() {
            throw Error();
          };
          Object.defineProperty(Fake.prototype, "props", {
            set: function() {
              throw Error();
            }
          });
          if (typeof Reflect === "object" && Reflect.construct) {
            try {
              Reflect.construct(Fake, []);
            } catch (x) {
              control = x;
            }
            Reflect.construct(fn, [], Fake);
          } else {
            try {
              Fake.call();
            } catch (x) {
              control = x;
            }
            fn.call(Fake.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (x) {
            control = x;
          }
          fn();
        }
      } catch (sample) {
        if (sample && control && typeof sample.stack === "string") {
          var sampleLines = sample.stack.split("\n");
          var controlLines = control.stack.split("\n");
          var s = sampleLines.length - 1;
          var c = controlLines.length - 1;
          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
            c--;
          }
          for (; s >= 1 && c >= 0; s--, c--) {
            if (sampleLines[s] !== controlLines[c]) {
              if (s !== 1 || c !== 1) {
                do {
                  s--;
                  c--;
                  if (c < 0 || sampleLines[s] !== controlLines[c]) {
                    var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                    if (fn.displayName && _frame.includes("<anonymous>")) {
                      _frame = _frame.replace("<anonymous>", fn.displayName);
                    }
                    {
                      if (typeof fn === "function") {
                        componentFrameCache.set(fn, _frame);
                      }
                    }
                    return _frame;
                  }
                } while (s >= 1 && c >= 0);
              }
              break;
            }
          }
        }
      } finally {
        reentry = false;
        {
          ReactCurrentDispatcher.current = previousDispatcher;
          reenableLogs();
        }
        Error.prepareStackTrace = previousPrepareStackTrace;
      }
      var name = fn ? fn.displayName || fn.name : "";
      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
      {
        if (typeof fn === "function") {
          componentFrameCache.set(fn, syntheticFrame);
        }
      }
      return syntheticFrame;
    }
    function describeClassComponentFrame(ctor, source, ownerFn) {
      {
        return describeNativeComponentFrame(ctor, true);
      }
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
      {
        return describeNativeComponentFrame(fn, false);
      }
    }
    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
      if (type == null) {
        return "";
      }
      if (typeof type === "function") {
        {
          return describeNativeComponentFrame(type, shouldConstruct(type));
        }
      }
      if (typeof type === "string") {
        return describeBuiltInComponentFrame(type);
      }
      switch (type) {
        case REACT_SUSPENSE_TYPE:
          return describeBuiltInComponentFrame("Suspense");
        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame("SuspenseList");
      }
      if (typeof type === "object") {
        switch (type.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return describeFunctionComponentFrame(type.render);
          case REACT_MEMO_TYPE:
            return describeUnknownElementTypeFrameInDEV(type.type);
          case REACT_LAZY_TYPE: {
            var lazyComponent = type;
            var payload = lazyComponent._payload;
            var init3 = lazyComponent._init;
            try {
              return describeUnknownElementTypeFrameInDEV(init3(payload));
            } catch (x) {
            }
          }
        }
      }
      return "";
    }
    function describeFiber(fiber) {
      switch (fiber.tag) {
        case HostComponent:
          return describeBuiltInComponentFrame(fiber.type);
        case LazyComponent:
          return describeBuiltInComponentFrame("Lazy");
        case SuspenseComponent:
          return describeBuiltInComponentFrame("Suspense");
        case SuspenseListComponent:
          return describeBuiltInComponentFrame("SuspenseList");
        case FunctionComponent:
        case IndeterminateComponent:
        case SimpleMemoComponent:
          return describeFunctionComponentFrame(fiber.type);
        case ForwardRef:
          return describeFunctionComponentFrame(fiber.type.render);
        case ClassComponent:
          return describeClassComponentFrame(fiber.type);
        default:
          return "";
      }
    }
    function getStackByFiberInDevAndProd(workInProgress2) {
      try {
        var info2 = "";
        var node2 = workInProgress2;
        do {
          info2 += describeFiber(node2);
          node2 = node2.return;
        } while (node2);
        return info2;
      } catch (x) {
        return "\nError generating stack: " + x.message + "\n" + x.stack;
      }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
      var displayName = outerType.displayName;
      if (displayName) {
        return displayName;
      }
      var functionName = innerType.displayName || innerType.name || "";
      return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
    }
    function getContextName(type) {
      return type.displayName || "Context";
    }
    function getComponentNameFromType(type) {
      if (type == null) {
        return null;
      }
      {
        if (typeof type.tag === "number") {
          error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        }
      }
      if (typeof type === "function") {
        return type.displayName || type.name || null;
      }
      if (typeof type === "string") {
        return type;
      }
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PORTAL_TYPE:
          return "Portal";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
      }
      if (typeof type === "object") {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            var context = type;
            return getContextName(context) + ".Consumer";
          case REACT_PROVIDER_TYPE:
            var provider = type;
            return getContextName(provider._context) + ".Provider";
          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, "ForwardRef");
          case REACT_MEMO_TYPE:
            var outerName = type.displayName || null;
            if (outerName !== null) {
              return outerName;
            }
            return getComponentNameFromType(type.type) || "Memo";
          case REACT_LAZY_TYPE: {
            var lazyComponent = type;
            var payload = lazyComponent._payload;
            var init3 = lazyComponent._init;
            try {
              return getComponentNameFromType(init3(payload));
            } catch (x) {
              return null;
            }
          }
        }
      }
      return null;
    }
    function getWrappedName$1(outerType, innerType, wrapperName) {
      var functionName = innerType.displayName || innerType.name || "";
      return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName$1(type) {
      return type.displayName || "Context";
    }
    function getComponentNameFromFiber(fiber) {
      var tag = fiber.tag, type = fiber.type;
      switch (tag) {
        case CacheComponent:
          return "Cache";
        case ContextConsumer:
          var context = type;
          return getContextName$1(context) + ".Consumer";
        case ContextProvider:
          var provider = type;
          return getContextName$1(provider._context) + ".Provider";
        case DehydratedFragment:
          return "DehydratedFragment";
        case ForwardRef:
          return getWrappedName$1(type, type.render, "ForwardRef");
        case Fragment:
          return "Fragment";
        case HostComponent:
          return type;
        case HostPortal:
          return "Portal";
        case HostRoot:
          return "Root";
        case HostText:
          return "Text";
        case LazyComponent:
          return getComponentNameFromType(type);
        case Mode:
          if (type === REACT_STRICT_MODE_TYPE) {
            return "StrictMode";
          }
          return "Mode";
        case OffscreenComponent:
          return "Offscreen";
        case Profiler:
          return "Profiler";
        case ScopeComponent:
          return "Scope";
        case SuspenseComponent:
          return "Suspense";
        case SuspenseListComponent:
          return "SuspenseList";
        case TracingMarkerComponent:
          return "TracingMarker";
        case ClassComponent:
        case FunctionComponent:
        case IncompleteClassComponent:
        case IndeterminateComponent:
        case MemoComponent:
        case SimpleMemoComponent:
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          break;
      }
      return null;
    }
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var current = null;
    var isRendering = false;
    function getCurrentFiberOwnerNameInDevOrNull() {
      {
        if (current === null) {
          return null;
        }
        var owner = current._debugOwner;
        if (owner !== null && typeof owner !== "undefined") {
          return getComponentNameFromFiber(owner);
        }
      }
      return null;
    }
    function getCurrentFiberStackInDev() {
      {
        if (current === null) {
          return "";
        }
        return getStackByFiberInDevAndProd(current);
      }
    }
    function resetCurrentFiber() {
      {
        ReactDebugCurrentFrame.getCurrentStack = null;
        current = null;
        isRendering = false;
      }
    }
    function setCurrentFiber(fiber) {
      {
        ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
        current = fiber;
        isRendering = false;
      }
    }
    function getCurrentFiber() {
      {
        return current;
      }
    }
    function setIsRendering(rendering) {
      {
        isRendering = rendering;
      }
    }
    function toString(value) {
      return "" + value;
    }
    function getToStringValue(value) {
      switch (typeof value) {
        case "boolean":
        case "number":
        case "string":
        case "undefined":
          return value;
        case "object":
          {
            checkFormFieldValueStringCoercion(value);
          }
          return value;
        default:
          return "";
      }
    }
    var hasReadOnlyValue = {
      button: true,
      checkbox: true,
      image: true,
      hidden: true,
      radio: true,
      reset: true,
      submit: true
    };
    function checkControlledValueProps(tagName, props) {
      {
        if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
          error2("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
        }
        if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
          error2("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
        }
      }
    }
    function isCheckable(elem) {
      var type = elem.type;
      var nodeName = elem.nodeName;
      return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
    }
    function getTracker(node2) {
      return node2._valueTracker;
    }
    function detachTracker(node2) {
      node2._valueTracker = null;
    }
    function getValueFromNode(node2) {
      var value = "";
      if (!node2) {
        return value;
      }
      if (isCheckable(node2)) {
        value = node2.checked ? "true" : "false";
      } else {
        value = node2.value;
      }
      return value;
    }
    function trackValueOnNode(node2) {
      var valueField = isCheckable(node2) ? "checked" : "value";
      var descriptor = Object.getOwnPropertyDescriptor(node2.constructor.prototype, valueField);
      {
        checkFormFieldValueStringCoercion(node2[valueField]);
      }
      var currentValue = "" + node2[valueField];
      if (node2.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
        return;
      }
      var get3 = descriptor.get, set2 = descriptor.set;
      Object.defineProperty(node2, valueField, {
        configurable: true,
        get: function() {
          return get3.call(this);
        },
        set: function(value) {
          {
            checkFormFieldValueStringCoercion(value);
          }
          currentValue = "" + value;
          set2.call(this, value);
        }
      });
      Object.defineProperty(node2, valueField, {
        enumerable: descriptor.enumerable
      });
      var tracker = {
        getValue: function() {
          return currentValue;
        },
        setValue: function(value) {
          {
            checkFormFieldValueStringCoercion(value);
          }
          currentValue = "" + value;
        },
        stopTracking: function() {
          detachTracker(node2);
          delete node2[valueField];
        }
      };
      return tracker;
    }
    function track(node2) {
      if (getTracker(node2)) {
        return;
      }
      node2._valueTracker = trackValueOnNode(node2);
    }
    function updateValueIfChanged(node2) {
      if (!node2) {
        return false;
      }
      var tracker = getTracker(node2);
      if (!tracker) {
        return true;
      }
      var lastValue = tracker.getValue();
      var nextValue = getValueFromNode(node2);
      if (nextValue !== lastValue) {
        tracker.setValue(nextValue);
        return true;
      }
      return false;
    }
    function getActiveElement(doc) {
      doc = doc || (typeof document !== "undefined" ? document : void 0);
      if (typeof doc === "undefined") {
        return null;
      }
      try {
        return doc.activeElement || doc.body;
      } catch (e) {
        return doc.body;
      }
    }
    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;
    function isControlled(props) {
      var usesChecked = props.type === "checkbox" || props.type === "radio";
      return usesChecked ? props.checked != null : props.value != null;
    }
    function getHostProps(element, props) {
      var node2 = element;
      var checked = props.checked;
      var hostProps = assign2({}, props, {
        defaultChecked: void 0,
        defaultValue: void 0,
        value: void 0,
        checked: checked != null ? checked : node2._wrapperState.initialChecked
      });
      return hostProps;
    }
    function initWrapperState(element, props) {
      {
        checkControlledValueProps("input", props);
        if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
          error2("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
          didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
          error2("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
          didWarnValueDefaultValue = true;
        }
      }
      var node2 = element;
      var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
      node2._wrapperState = {
        initialChecked: props.checked != null ? props.checked : props.defaultChecked,
        initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
        controlled: isControlled(props)
      };
    }
    function updateChecked(element, props) {
      var node2 = element;
      var checked = props.checked;
      if (checked != null) {
        setValueForProperty(node2, "checked", checked, false);
      }
    }
    function updateWrapper(element, props) {
      var node2 = element;
      {
        var controlled = isControlled(props);
        if (!node2._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
          error2("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
          didWarnUncontrolledToControlled = true;
        }
        if (node2._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
          error2("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
          didWarnControlledToUncontrolled = true;
        }
      }
      updateChecked(element, props);
      var value = getToStringValue(props.value);
      var type = props.type;
      if (value != null) {
        if (type === "number") {
          if (value === 0 && node2.value === "" || // We explicitly want to coerce to number here if possible.
          // eslint-disable-next-line
          node2.value != value) {
            node2.value = toString(value);
          }
        } else if (node2.value !== toString(value)) {
          node2.value = toString(value);
        }
      } else if (type === "submit" || type === "reset") {
        node2.removeAttribute("value");
        return;
      }
      {
        if (props.hasOwnProperty("value")) {
          setDefaultValue(node2, props.type, value);
        } else if (props.hasOwnProperty("defaultValue")) {
          setDefaultValue(node2, props.type, getToStringValue(props.defaultValue));
        }
      }
      {
        if (props.checked == null && props.defaultChecked != null) {
          node2.defaultChecked = !!props.defaultChecked;
        }
      }
    }
    function postMountWrapper(element, props, isHydrating2) {
      var node2 = element;
      if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
        var type = props.type;
        var isButton = type === "submit" || type === "reset";
        if (isButton && (props.value === void 0 || props.value === null)) {
          return;
        }
        var initialValue = toString(node2._wrapperState.initialValue);
        if (!isHydrating2) {
          {
            if (initialValue !== node2.value) {
              node2.value = initialValue;
            }
          }
        }
        {
          node2.defaultValue = initialValue;
        }
      }
      var name = node2.name;
      if (name !== "") {
        node2.name = "";
      }
      {
        node2.defaultChecked = !node2.defaultChecked;
        node2.defaultChecked = !!node2._wrapperState.initialChecked;
      }
      if (name !== "") {
        node2.name = name;
      }
    }
    function restoreControlledState(element, props) {
      var node2 = element;
      updateWrapper(node2, props);
      updateNamedCousins(node2, props);
    }
    function updateNamedCousins(rootNode, props) {
      var name = props.name;
      if (props.type === "radio" && name != null) {
        var queryRoot = rootNode;
        while (queryRoot.parentNode) {
          queryRoot = queryRoot.parentNode;
        }
        {
          checkAttributeStringCoercion(name, "name");
        }
        var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
        for (var i = 0; i < group.length; i++) {
          var otherNode = group[i];
          if (otherNode === rootNode || otherNode.form !== rootNode.form) {
            continue;
          }
          var otherProps = getFiberCurrentPropsFromNode(otherNode);
          if (!otherProps) {
            throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
          }
          updateValueIfChanged(otherNode);
          updateWrapper(otherNode, otherProps);
        }
      }
    }
    function setDefaultValue(node2, type, value) {
      if (
        // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
        type !== "number" || getActiveElement(node2.ownerDocument) !== node2
      ) {
        if (value == null) {
          node2.defaultValue = toString(node2._wrapperState.initialValue);
        } else if (node2.defaultValue !== toString(value)) {
          node2.defaultValue = toString(value);
        }
      }
    }
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;
    var didWarnInvalidInnerHTML = false;
    function validateProps(element, props) {
      {
        if (props.value == null) {
          if (typeof props.children === "object" && props.children !== null) {
            React2.Children.forEach(props.children, function(child) {
              if (child == null) {
                return;
              }
              if (typeof child === "string" || typeof child === "number") {
                return;
              }
              if (!didWarnInvalidChild) {
                didWarnInvalidChild = true;
                error2("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
              }
            });
          } else if (props.dangerouslySetInnerHTML != null) {
            if (!didWarnInvalidInnerHTML) {
              didWarnInvalidInnerHTML = true;
              error2("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
            }
          }
        }
        if (props.selected != null && !didWarnSelectedSetOnOption) {
          error2("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
          didWarnSelectedSetOnOption = true;
        }
      }
    }
    function postMountWrapper$1(element, props) {
      if (props.value != null) {
        element.setAttribute("value", toString(getToStringValue(props.value)));
      }
    }
    var isArrayImpl = Array.isArray;
    function isArray2(a) {
      return isArrayImpl(a);
    }
    var didWarnValueDefaultValue$1;
    {
      didWarnValueDefaultValue$1 = false;
    }
    function getDeclarationErrorAddendum() {
      var ownerName = getCurrentFiberOwnerNameInDevOrNull();
      if (ownerName) {
        return "\n\nCheck the render method of `" + ownerName + "`.";
      }
      return "";
    }
    var valuePropNames = ["value", "defaultValue"];
    function checkSelectPropTypes(props) {
      {
        checkControlledValueProps("select", props);
        for (var i = 0; i < valuePropNames.length; i++) {
          var propName = valuePropNames[i];
          if (props[propName] == null) {
            continue;
          }
          var propNameIsArray = isArray2(props[propName]);
          if (props.multiple && !propNameIsArray) {
            error2("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
          } else if (!props.multiple && propNameIsArray) {
            error2("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
          }
        }
      }
    }
    function updateOptions(node2, multiple, propValue, setDefaultSelected) {
      var options2 = node2.options;
      if (multiple) {
        var selectedValues = propValue;
        var selectedValue = {};
        for (var i = 0; i < selectedValues.length; i++) {
          selectedValue["$" + selectedValues[i]] = true;
        }
        for (var _i = 0; _i < options2.length; _i++) {
          var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
          if (options2[_i].selected !== selected) {
            options2[_i].selected = selected;
          }
          if (selected && setDefaultSelected) {
            options2[_i].defaultSelected = true;
          }
        }
      } else {
        var _selectedValue = toString(getToStringValue(propValue));
        var defaultSelected = null;
        for (var _i2 = 0; _i2 < options2.length; _i2++) {
          if (options2[_i2].value === _selectedValue) {
            options2[_i2].selected = true;
            if (setDefaultSelected) {
              options2[_i2].defaultSelected = true;
            }
            return;
          }
          if (defaultSelected === null && !options2[_i2].disabled) {
            defaultSelected = options2[_i2];
          }
        }
        if (defaultSelected !== null) {
          defaultSelected.selected = true;
        }
      }
    }
    function getHostProps$1(element, props) {
      return assign2({}, props, {
        value: void 0
      });
    }
    function initWrapperState$1(element, props) {
      var node2 = element;
      {
        checkSelectPropTypes(props);
      }
      node2._wrapperState = {
        wasMultiple: !!props.multiple
      };
      {
        if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
          error2("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
          didWarnValueDefaultValue$1 = true;
        }
      }
    }
    function postMountWrapper$2(element, props) {
      var node2 = element;
      node2.multiple = !!props.multiple;
      var value = props.value;
      if (value != null) {
        updateOptions(node2, !!props.multiple, value, false);
      } else if (props.defaultValue != null) {
        updateOptions(node2, !!props.multiple, props.defaultValue, true);
      }
    }
    function postUpdateWrapper(element, props) {
      var node2 = element;
      var wasMultiple = node2._wrapperState.wasMultiple;
      node2._wrapperState.wasMultiple = !!props.multiple;
      var value = props.value;
      if (value != null) {
        updateOptions(node2, !!props.multiple, value, false);
      } else if (wasMultiple !== !!props.multiple) {
        if (props.defaultValue != null) {
          updateOptions(node2, !!props.multiple, props.defaultValue, true);
        } else {
          updateOptions(node2, !!props.multiple, props.multiple ? [] : "", false);
        }
      }
    }
    function restoreControlledState$1(element, props) {
      var node2 = element;
      var value = props.value;
      if (value != null) {
        updateOptions(node2, !!props.multiple, value, false);
      }
    }
    var didWarnValDefaultVal = false;
    function getHostProps$2(element, props) {
      var node2 = element;
      if (props.dangerouslySetInnerHTML != null) {
        throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
      }
      var hostProps = assign2({}, props, {
        value: void 0,
        defaultValue: void 0,
        children: toString(node2._wrapperState.initialValue)
      });
      return hostProps;
    }
    function initWrapperState$2(element, props) {
      var node2 = element;
      {
        checkControlledValueProps("textarea", props);
        if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
          error2("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
          didWarnValDefaultVal = true;
        }
      }
      var initialValue = props.value;
      if (initialValue == null) {
        var children = props.children, defaultValue = props.defaultValue;
        if (children != null) {
          {
            error2("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
          }
          {
            if (defaultValue != null) {
              throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            }
            if (isArray2(children)) {
              if (children.length > 1) {
                throw new Error("<textarea> can only have at most one child.");
              }
              children = children[0];
            }
            defaultValue = children;
          }
        }
        if (defaultValue == null) {
          defaultValue = "";
        }
        initialValue = defaultValue;
      }
      node2._wrapperState = {
        initialValue: getToStringValue(initialValue)
      };
    }
    function updateWrapper$1(element, props) {
      var node2 = element;
      var value = getToStringValue(props.value);
      var defaultValue = getToStringValue(props.defaultValue);
      if (value != null) {
        var newValue = toString(value);
        if (newValue !== node2.value) {
          node2.value = newValue;
        }
        if (props.defaultValue == null && node2.defaultValue !== newValue) {
          node2.defaultValue = newValue;
        }
      }
      if (defaultValue != null) {
        node2.defaultValue = toString(defaultValue);
      }
    }
    function postMountWrapper$3(element, props) {
      var node2 = element;
      var textContent = node2.textContent;
      if (textContent === node2._wrapperState.initialValue) {
        if (textContent !== "" && textContent !== null) {
          node2.value = textContent;
        }
      }
    }
    function restoreControlledState$2(element, props) {
      updateWrapper$1(element, props);
    }
    var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
    var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
    var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
    function getIntrinsicNamespace(type) {
      switch (type) {
        case "svg":
          return SVG_NAMESPACE;
        case "math":
          return MATH_NAMESPACE;
        default:
          return HTML_NAMESPACE;
      }
    }
    function getChildNamespace(parentNamespace, type) {
      if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
        return getIntrinsicNamespace(type);
      }
      if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
        return HTML_NAMESPACE;
      }
      return parentNamespace;
    }
    var createMicrosoftUnsafeLocalFunction = function(func) {
      if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
        return function(arg0, arg1, arg2, arg3) {
          MSApp.execUnsafeLocalFunction(function() {
            return func(arg0, arg1, arg2, arg3);
          });
        };
      } else {
        return func;
      }
    };
    var reusableSVGContainer;
    var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node2, html) {
      if (node2.namespaceURI === SVG_NAMESPACE) {
        if (!("innerHTML" in node2)) {
          reusableSVGContainer = reusableSVGContainer || document.createElement("div");
          reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
          var svgNode = reusableSVGContainer.firstChild;
          while (node2.firstChild) {
            node2.removeChild(node2.firstChild);
          }
          while (svgNode.firstChild) {
            node2.appendChild(svgNode.firstChild);
          }
          return;
        }
      }
      node2.innerHTML = html;
    });
    var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    var setTextContent = function(node2, text) {
      if (text) {
        var firstChild = node2.firstChild;
        if (firstChild && firstChild === node2.lastChild && firstChild.nodeType === TEXT_NODE) {
          firstChild.nodeValue = text;
          return;
        }
      }
      node2.textContent = text;
    };
    var shorthandToLonghand = {
      animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
      background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
      backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
      border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
      borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
      borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
      borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
      borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
      borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
      borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
      borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
      borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
      borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
      borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
      borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
      borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
      borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
      columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
      columns: ["columnCount", "columnWidth"],
      flex: ["flexBasis", "flexGrow", "flexShrink"],
      flexFlow: ["flexDirection", "flexWrap"],
      font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
      fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
      gap: ["columnGap", "rowGap"],
      grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
      gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
      gridColumn: ["gridColumnEnd", "gridColumnStart"],
      gridColumnGap: ["columnGap"],
      gridGap: ["columnGap", "rowGap"],
      gridRow: ["gridRowEnd", "gridRowStart"],
      gridRowGap: ["rowGap"],
      gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
      listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
      margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
      marker: ["markerEnd", "markerMid", "markerStart"],
      mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
      maskPosition: ["maskPositionX", "maskPositionY"],
      outline: ["outlineColor", "outlineStyle", "outlineWidth"],
      overflow: ["overflowX", "overflowY"],
      padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
      placeContent: ["alignContent", "justifyContent"],
      placeItems: ["alignItems", "justifyItems"],
      placeSelf: ["alignSelf", "justifySelf"],
      textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
      textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
      transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
      wordWrap: ["overflowWrap"]
    };
    var isUnitlessNumber = {
      animationIterationCount: true,
      aspectRatio: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      // SVG-related properties
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    };
    function prefixKey(prefix3, key) {
      return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
    }
    var prefixes = ["Webkit", "ms", "Moz", "O"];
    Object.keys(isUnitlessNumber).forEach(function(prop) {
      prefixes.forEach(function(prefix3) {
        isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
      });
    });
    function dangerousStyleValue(name, value, isCustomProperty3) {
      var isEmpty = value == null || typeof value === "boolean" || value === "";
      if (isEmpty) {
        return "";
      }
      if (!isCustomProperty3 && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
        return value + "px";
      }
      {
        checkCSSPropertyStringCoercion(value, name);
      }
      return ("" + value).trim();
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    function hyphenateStyleName(name) {
      return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
    }
    var warnValidStyle = function() {
    };
    {
      var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
      var msPattern$1 = /^-ms-/;
      var hyphenPattern = /-(.)/g;
      var badStyleValueWithSemicolonPattern = /;\s*$/;
      var warnedStyleNames = {};
      var warnedStyleValues = {};
      var warnedForNaNValue = false;
      var warnedForInfinityValue = false;
      var camelize = function(string) {
        return string.replace(hyphenPattern, function(_23, character2) {
          return character2.toUpperCase();
        });
      };
      var warnHyphenatedStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }
        warnedStyleNames[name] = true;
        error2(
          "Unsupported style property %s. Did you mean %s?",
          name,
          // As Andi Smith suggests
          // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
          // is converted to lowercase `ms`.
          camelize(name.replace(msPattern$1, "ms-"))
        );
      };
      var warnBadVendoredStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }
        warnedStyleNames[name] = true;
        error2("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
      };
      var warnStyleValueWithSemicolon = function(name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
          return;
        }
        warnedStyleValues[value] = true;
        error2(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
      };
      var warnStyleValueIsNaN = function(name, value) {
        if (warnedForNaNValue) {
          return;
        }
        warnedForNaNValue = true;
        error2("`NaN` is an invalid value for the `%s` css style property.", name);
      };
      var warnStyleValueIsInfinity = function(name, value) {
        if (warnedForInfinityValue) {
          return;
        }
        warnedForInfinityValue = true;
        error2("`Infinity` is an invalid value for the `%s` css style property.", name);
      };
      warnValidStyle = function(name, value) {
        if (name.indexOf("-") > -1) {
          warnHyphenatedStyleName(name);
        } else if (badVendoredStyleNamePattern.test(name)) {
          warnBadVendoredStyleName(name);
        } else if (badStyleValueWithSemicolonPattern.test(value)) {
          warnStyleValueWithSemicolon(name, value);
        }
        if (typeof value === "number") {
          if (isNaN(value)) {
            warnStyleValueIsNaN(name, value);
          } else if (!isFinite(value)) {
            warnStyleValueIsInfinity(name, value);
          }
        }
      };
    }
    var warnValidStyle$1 = warnValidStyle;
    function createDangerousStringForStyles(styles) {
      {
        var serialized = "";
        var delimiter2 = "";
        for (var styleName in styles) {
          if (!styles.hasOwnProperty(styleName)) {
            continue;
          }
          var styleValue = styles[styleName];
          if (styleValue != null) {
            var isCustomProperty3 = styleName.indexOf("--") === 0;
            serialized += delimiter2 + (isCustomProperty3 ? styleName : hyphenateStyleName(styleName)) + ":";
            serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty3);
            delimiter2 = ";";
          }
        }
        return serialized || null;
      }
    }
    function setValueForStyles(node2, styles) {
      var style2 = node2.style;
      for (var styleName in styles) {
        if (!styles.hasOwnProperty(styleName)) {
          continue;
        }
        var isCustomProperty3 = styleName.indexOf("--") === 0;
        {
          if (!isCustomProperty3) {
            warnValidStyle$1(styleName, styles[styleName]);
          }
        }
        var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty3);
        if (styleName === "float") {
          styleName = "cssFloat";
        }
        if (isCustomProperty3) {
          style2.setProperty(styleName, styleValue);
        } else {
          style2[styleName] = styleValue;
        }
      }
    }
    function isValueEmpty(value) {
      return value == null || typeof value === "boolean" || value === "";
    }
    function expandShorthandMap(styles) {
      var expanded = {};
      for (var key in styles) {
        var longhands = shorthandToLonghand[key] || [key];
        for (var i = 0; i < longhands.length; i++) {
          expanded[longhands[i]] = key;
        }
      }
      return expanded;
    }
    function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
      {
        if (!nextStyles) {
          return;
        }
        var expandedUpdates = expandShorthandMap(styleUpdates);
        var expandedStyles = expandShorthandMap(nextStyles);
        var warnedAbout = {};
        for (var key in expandedUpdates) {
          var originalKey = expandedUpdates[key];
          var correctOriginalKey = expandedStyles[key];
          if (correctOriginalKey && originalKey !== correctOriginalKey) {
            var warningKey = originalKey + "," + correctOriginalKey;
            if (warnedAbout[warningKey]) {
              continue;
            }
            warnedAbout[warningKey] = true;
            error2("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
          }
        }
      }
    }
    var omittedCloseTags = {
      area: true,
      base: true,
      br: true,
      col: true,
      embed: true,
      hr: true,
      img: true,
      input: true,
      keygen: true,
      link: true,
      meta: true,
      param: true,
      source: true,
      track: true,
      wbr: true
      // NOTE: menuitem's close tag should be omitted, but that causes problems.
    };
    var voidElementTags = assign2({
      menuitem: true
    }, omittedCloseTags);
    var HTML = "__html";
    function assertValidProps(tag, props) {
      if (!props) {
        return;
      }
      if (voidElementTags[tag]) {
        if (props.children != null || props.dangerouslySetInnerHTML != null) {
          throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
        }
      }
      if (props.dangerouslySetInnerHTML != null) {
        if (props.children != null) {
          throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
        }
        if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
          throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        }
      }
      {
        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
          error2("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
        }
      }
      if (props.style != null && typeof props.style !== "object") {
        throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
      }
    }
    function isCustomComponent(tagName, props) {
      if (tagName.indexOf("-") === -1) {
        return typeof props.is === "string";
      }
      switch (tagName) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return false;
        default:
          return true;
      }
    }
    var possibleStandardNames = {
      // HTML
      accept: "accept",
      acceptcharset: "acceptCharset",
      "accept-charset": "acceptCharset",
      accesskey: "accessKey",
      action: "action",
      allowfullscreen: "allowFullScreen",
      alt: "alt",
      as: "as",
      async: "async",
      autocapitalize: "autoCapitalize",
      autocomplete: "autoComplete",
      autocorrect: "autoCorrect",
      autofocus: "autoFocus",
      autoplay: "autoPlay",
      autosave: "autoSave",
      capture: "capture",
      cellpadding: "cellPadding",
      cellspacing: "cellSpacing",
      challenge: "challenge",
      charset: "charSet",
      checked: "checked",
      children: "children",
      cite: "cite",
      class: "className",
      classid: "classID",
      classname: "className",
      cols: "cols",
      colspan: "colSpan",
      content: "content",
      contenteditable: "contentEditable",
      contextmenu: "contextMenu",
      controls: "controls",
      controlslist: "controlsList",
      coords: "coords",
      crossorigin: "crossOrigin",
      dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
      data: "data",
      datetime: "dateTime",
      default: "default",
      defaultchecked: "defaultChecked",
      defaultvalue: "defaultValue",
      defer: "defer",
      dir: "dir",
      disabled: "disabled",
      disablepictureinpicture: "disablePictureInPicture",
      disableremoteplayback: "disableRemotePlayback",
      download: "download",
      draggable: "draggable",
      enctype: "encType",
      enterkeyhint: "enterKeyHint",
      for: "htmlFor",
      form: "form",
      formmethod: "formMethod",
      formaction: "formAction",
      formenctype: "formEncType",
      formnovalidate: "formNoValidate",
      formtarget: "formTarget",
      frameborder: "frameBorder",
      headers: "headers",
      height: "height",
      hidden: "hidden",
      high: "high",
      href: "href",
      hreflang: "hrefLang",
      htmlfor: "htmlFor",
      httpequiv: "httpEquiv",
      "http-equiv": "httpEquiv",
      icon: "icon",
      id: "id",
      imagesizes: "imageSizes",
      imagesrcset: "imageSrcSet",
      innerhtml: "innerHTML",
      inputmode: "inputMode",
      integrity: "integrity",
      is: "is",
      itemid: "itemID",
      itemprop: "itemProp",
      itemref: "itemRef",
      itemscope: "itemScope",
      itemtype: "itemType",
      keyparams: "keyParams",
      keytype: "keyType",
      kind: "kind",
      label: "label",
      lang: "lang",
      list: "list",
      loop: "loop",
      low: "low",
      manifest: "manifest",
      marginwidth: "marginWidth",
      marginheight: "marginHeight",
      max: "max",
      maxlength: "maxLength",
      media: "media",
      mediagroup: "mediaGroup",
      method: "method",
      min: "min",
      minlength: "minLength",
      multiple: "multiple",
      muted: "muted",
      name: "name",
      nomodule: "noModule",
      nonce: "nonce",
      novalidate: "noValidate",
      open: "open",
      optimum: "optimum",
      pattern: "pattern",
      placeholder: "placeholder",
      playsinline: "playsInline",
      poster: "poster",
      preload: "preload",
      profile: "profile",
      radiogroup: "radioGroup",
      readonly: "readOnly",
      referrerpolicy: "referrerPolicy",
      rel: "rel",
      required: "required",
      reversed: "reversed",
      role: "role",
      rows: "rows",
      rowspan: "rowSpan",
      sandbox: "sandbox",
      scope: "scope",
      scoped: "scoped",
      scrolling: "scrolling",
      seamless: "seamless",
      selected: "selected",
      shape: "shape",
      size: "size",
      sizes: "sizes",
      span: "span",
      spellcheck: "spellCheck",
      src: "src",
      srcdoc: "srcDoc",
      srclang: "srcLang",
      srcset: "srcSet",
      start: "start",
      step: "step",
      style: "style",
      summary: "summary",
      tabindex: "tabIndex",
      target: "target",
      title: "title",
      type: "type",
      usemap: "useMap",
      value: "value",
      width: "width",
      wmode: "wmode",
      wrap: "wrap",
      // SVG
      about: "about",
      accentheight: "accentHeight",
      "accent-height": "accentHeight",
      accumulate: "accumulate",
      additive: "additive",
      alignmentbaseline: "alignmentBaseline",
      "alignment-baseline": "alignmentBaseline",
      allowreorder: "allowReorder",
      alphabetic: "alphabetic",
      amplitude: "amplitude",
      arabicform: "arabicForm",
      "arabic-form": "arabicForm",
      ascent: "ascent",
      attributename: "attributeName",
      attributetype: "attributeType",
      autoreverse: "autoReverse",
      azimuth: "azimuth",
      basefrequency: "baseFrequency",
      baselineshift: "baselineShift",
      "baseline-shift": "baselineShift",
      baseprofile: "baseProfile",
      bbox: "bbox",
      begin: "begin",
      bias: "bias",
      by: "by",
      calcmode: "calcMode",
      capheight: "capHeight",
      "cap-height": "capHeight",
      clip: "clip",
      clippath: "clipPath",
      "clip-path": "clipPath",
      clippathunits: "clipPathUnits",
      cliprule: "clipRule",
      "clip-rule": "clipRule",
      color: "color",
      colorinterpolation: "colorInterpolation",
      "color-interpolation": "colorInterpolation",
      colorinterpolationfilters: "colorInterpolationFilters",
      "color-interpolation-filters": "colorInterpolationFilters",
      colorprofile: "colorProfile",
      "color-profile": "colorProfile",
      colorrendering: "colorRendering",
      "color-rendering": "colorRendering",
      contentscripttype: "contentScriptType",
      contentstyletype: "contentStyleType",
      cursor: "cursor",
      cx: "cx",
      cy: "cy",
      d: "d",
      datatype: "datatype",
      decelerate: "decelerate",
      descent: "descent",
      diffuseconstant: "diffuseConstant",
      direction: "direction",
      display: "display",
      divisor: "divisor",
      dominantbaseline: "dominantBaseline",
      "dominant-baseline": "dominantBaseline",
      dur: "dur",
      dx: "dx",
      dy: "dy",
      edgemode: "edgeMode",
      elevation: "elevation",
      enablebackground: "enableBackground",
      "enable-background": "enableBackground",
      end: "end",
      exponent: "exponent",
      externalresourcesrequired: "externalResourcesRequired",
      fill: "fill",
      fillopacity: "fillOpacity",
      "fill-opacity": "fillOpacity",
      fillrule: "fillRule",
      "fill-rule": "fillRule",
      filter: "filter",
      filterres: "filterRes",
      filterunits: "filterUnits",
      floodopacity: "floodOpacity",
      "flood-opacity": "floodOpacity",
      floodcolor: "floodColor",
      "flood-color": "floodColor",
      focusable: "focusable",
      fontfamily: "fontFamily",
      "font-family": "fontFamily",
      fontsize: "fontSize",
      "font-size": "fontSize",
      fontsizeadjust: "fontSizeAdjust",
      "font-size-adjust": "fontSizeAdjust",
      fontstretch: "fontStretch",
      "font-stretch": "fontStretch",
      fontstyle: "fontStyle",
      "font-style": "fontStyle",
      fontvariant: "fontVariant",
      "font-variant": "fontVariant",
      fontweight: "fontWeight",
      "font-weight": "fontWeight",
      format: "format",
      from: "from",
      fx: "fx",
      fy: "fy",
      g1: "g1",
      g2: "g2",
      glyphname: "glyphName",
      "glyph-name": "glyphName",
      glyphorientationhorizontal: "glyphOrientationHorizontal",
      "glyph-orientation-horizontal": "glyphOrientationHorizontal",
      glyphorientationvertical: "glyphOrientationVertical",
      "glyph-orientation-vertical": "glyphOrientationVertical",
      glyphref: "glyphRef",
      gradienttransform: "gradientTransform",
      gradientunits: "gradientUnits",
      hanging: "hanging",
      horizadvx: "horizAdvX",
      "horiz-adv-x": "horizAdvX",
      horizoriginx: "horizOriginX",
      "horiz-origin-x": "horizOriginX",
      ideographic: "ideographic",
      imagerendering: "imageRendering",
      "image-rendering": "imageRendering",
      in2: "in2",
      in: "in",
      inlist: "inlist",
      intercept: "intercept",
      k1: "k1",
      k2: "k2",
      k3: "k3",
      k4: "k4",
      k: "k",
      kernelmatrix: "kernelMatrix",
      kernelunitlength: "kernelUnitLength",
      kerning: "kerning",
      keypoints: "keyPoints",
      keysplines: "keySplines",
      keytimes: "keyTimes",
      lengthadjust: "lengthAdjust",
      letterspacing: "letterSpacing",
      "letter-spacing": "letterSpacing",
      lightingcolor: "lightingColor",
      "lighting-color": "lightingColor",
      limitingconeangle: "limitingConeAngle",
      local: "local",
      markerend: "markerEnd",
      "marker-end": "markerEnd",
      markerheight: "markerHeight",
      markermid: "markerMid",
      "marker-mid": "markerMid",
      markerstart: "markerStart",
      "marker-start": "markerStart",
      markerunits: "markerUnits",
      markerwidth: "markerWidth",
      mask: "mask",
      maskcontentunits: "maskContentUnits",
      maskunits: "maskUnits",
      mathematical: "mathematical",
      mode: "mode",
      numoctaves: "numOctaves",
      offset: "offset",
      opacity: "opacity",
      operator: "operator",
      order: "order",
      orient: "orient",
      orientation: "orientation",
      origin: "origin",
      overflow: "overflow",
      overlineposition: "overlinePosition",
      "overline-position": "overlinePosition",
      overlinethickness: "overlineThickness",
      "overline-thickness": "overlineThickness",
      paintorder: "paintOrder",
      "paint-order": "paintOrder",
      panose1: "panose1",
      "panose-1": "panose1",
      pathlength: "pathLength",
      patterncontentunits: "patternContentUnits",
      patterntransform: "patternTransform",
      patternunits: "patternUnits",
      pointerevents: "pointerEvents",
      "pointer-events": "pointerEvents",
      points: "points",
      pointsatx: "pointsAtX",
      pointsaty: "pointsAtY",
      pointsatz: "pointsAtZ",
      prefix: "prefix",
      preservealpha: "preserveAlpha",
      preserveaspectratio: "preserveAspectRatio",
      primitiveunits: "primitiveUnits",
      property: "property",
      r: "r",
      radius: "radius",
      refx: "refX",
      refy: "refY",
      renderingintent: "renderingIntent",
      "rendering-intent": "renderingIntent",
      repeatcount: "repeatCount",
      repeatdur: "repeatDur",
      requiredextensions: "requiredExtensions",
      requiredfeatures: "requiredFeatures",
      resource: "resource",
      restart: "restart",
      result: "result",
      results: "results",
      rotate: "rotate",
      rx: "rx",
      ry: "ry",
      scale: "scale",
      security: "security",
      seed: "seed",
      shaperendering: "shapeRendering",
      "shape-rendering": "shapeRendering",
      slope: "slope",
      spacing: "spacing",
      specularconstant: "specularConstant",
      specularexponent: "specularExponent",
      speed: "speed",
      spreadmethod: "spreadMethod",
      startoffset: "startOffset",
      stddeviation: "stdDeviation",
      stemh: "stemh",
      stemv: "stemv",
      stitchtiles: "stitchTiles",
      stopcolor: "stopColor",
      "stop-color": "stopColor",
      stopopacity: "stopOpacity",
      "stop-opacity": "stopOpacity",
      strikethroughposition: "strikethroughPosition",
      "strikethrough-position": "strikethroughPosition",
      strikethroughthickness: "strikethroughThickness",
      "strikethrough-thickness": "strikethroughThickness",
      string: "string",
      stroke: "stroke",
      strokedasharray: "strokeDasharray",
      "stroke-dasharray": "strokeDasharray",
      strokedashoffset: "strokeDashoffset",
      "stroke-dashoffset": "strokeDashoffset",
      strokelinecap: "strokeLinecap",
      "stroke-linecap": "strokeLinecap",
      strokelinejoin: "strokeLinejoin",
      "stroke-linejoin": "strokeLinejoin",
      strokemiterlimit: "strokeMiterlimit",
      "stroke-miterlimit": "strokeMiterlimit",
      strokewidth: "strokeWidth",
      "stroke-width": "strokeWidth",
      strokeopacity: "strokeOpacity",
      "stroke-opacity": "strokeOpacity",
      suppresscontenteditablewarning: "suppressContentEditableWarning",
      suppresshydrationwarning: "suppressHydrationWarning",
      surfacescale: "surfaceScale",
      systemlanguage: "systemLanguage",
      tablevalues: "tableValues",
      targetx: "targetX",
      targety: "targetY",
      textanchor: "textAnchor",
      "text-anchor": "textAnchor",
      textdecoration: "textDecoration",
      "text-decoration": "textDecoration",
      textlength: "textLength",
      textrendering: "textRendering",
      "text-rendering": "textRendering",
      to: "to",
      transform: "transform",
      typeof: "typeof",
      u1: "u1",
      u2: "u2",
      underlineposition: "underlinePosition",
      "underline-position": "underlinePosition",
      underlinethickness: "underlineThickness",
      "underline-thickness": "underlineThickness",
      unicode: "unicode",
      unicodebidi: "unicodeBidi",
      "unicode-bidi": "unicodeBidi",
      unicoderange: "unicodeRange",
      "unicode-range": "unicodeRange",
      unitsperem: "unitsPerEm",
      "units-per-em": "unitsPerEm",
      unselectable: "unselectable",
      valphabetic: "vAlphabetic",
      "v-alphabetic": "vAlphabetic",
      values: "values",
      vectoreffect: "vectorEffect",
      "vector-effect": "vectorEffect",
      version: "version",
      vertadvy: "vertAdvY",
      "vert-adv-y": "vertAdvY",
      vertoriginx: "vertOriginX",
      "vert-origin-x": "vertOriginX",
      vertoriginy: "vertOriginY",
      "vert-origin-y": "vertOriginY",
      vhanging: "vHanging",
      "v-hanging": "vHanging",
      videographic: "vIdeographic",
      "v-ideographic": "vIdeographic",
      viewbox: "viewBox",
      viewtarget: "viewTarget",
      visibility: "visibility",
      vmathematical: "vMathematical",
      "v-mathematical": "vMathematical",
      vocab: "vocab",
      widths: "widths",
      wordspacing: "wordSpacing",
      "word-spacing": "wordSpacing",
      writingmode: "writingMode",
      "writing-mode": "writingMode",
      x1: "x1",
      x2: "x2",
      x: "x",
      xchannelselector: "xChannelSelector",
      xheight: "xHeight",
      "x-height": "xHeight",
      xlinkactuate: "xlinkActuate",
      "xlink:actuate": "xlinkActuate",
      xlinkarcrole: "xlinkArcrole",
      "xlink:arcrole": "xlinkArcrole",
      xlinkhref: "xlinkHref",
      "xlink:href": "xlinkHref",
      xlinkrole: "xlinkRole",
      "xlink:role": "xlinkRole",
      xlinkshow: "xlinkShow",
      "xlink:show": "xlinkShow",
      xlinktitle: "xlinkTitle",
      "xlink:title": "xlinkTitle",
      xlinktype: "xlinkType",
      "xlink:type": "xlinkType",
      xmlbase: "xmlBase",
      "xml:base": "xmlBase",
      xmllang: "xmlLang",
      "xml:lang": "xmlLang",
      xmlns: "xmlns",
      "xml:space": "xmlSpace",
      xmlnsxlink: "xmlnsXlink",
      "xmlns:xlink": "xmlnsXlink",
      xmlspace: "xmlSpace",
      y1: "y1",
      y2: "y2",
      y: "y",
      ychannelselector: "yChannelSelector",
      z: "z",
      zoomandpan: "zoomAndPan"
    };
    var ariaProperties = {
      "aria-current": 0,
      // state
      "aria-description": 0,
      "aria-details": 0,
      "aria-disabled": 0,
      // state
      "aria-hidden": 0,
      // state
      "aria-invalid": 0,
      // state
      "aria-keyshortcuts": 0,
      "aria-label": 0,
      "aria-roledescription": 0,
      // Widget Attributes
      "aria-autocomplete": 0,
      "aria-checked": 0,
      "aria-expanded": 0,
      "aria-haspopup": 0,
      "aria-level": 0,
      "aria-modal": 0,
      "aria-multiline": 0,
      "aria-multiselectable": 0,
      "aria-orientation": 0,
      "aria-placeholder": 0,
      "aria-pressed": 0,
      "aria-readonly": 0,
      "aria-required": 0,
      "aria-selected": 0,
      "aria-sort": 0,
      "aria-valuemax": 0,
      "aria-valuemin": 0,
      "aria-valuenow": 0,
      "aria-valuetext": 0,
      // Live Region Attributes
      "aria-atomic": 0,
      "aria-busy": 0,
      "aria-live": 0,
      "aria-relevant": 0,
      // Drag-and-Drop Attributes
      "aria-dropeffect": 0,
      "aria-grabbed": 0,
      // Relationship Attributes
      "aria-activedescendant": 0,
      "aria-colcount": 0,
      "aria-colindex": 0,
      "aria-colspan": 0,
      "aria-controls": 0,
      "aria-describedby": 0,
      "aria-errormessage": 0,
      "aria-flowto": 0,
      "aria-labelledby": 0,
      "aria-owns": 0,
      "aria-posinset": 0,
      "aria-rowcount": 0,
      "aria-rowindex": 0,
      "aria-rowspan": 0,
      "aria-setsize": 0
    };
    var warnedProperties = {};
    var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
    var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
    function validateProperty(tagName, name) {
      {
        if (hasOwnProperty2.call(warnedProperties, name) && warnedProperties[name]) {
          return true;
        }
        if (rARIACamel.test(name)) {
          var ariaName = "aria-" + name.slice(4).toLowerCase();
          var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
          if (correctName == null) {
            error2("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
            warnedProperties[name] = true;
            return true;
          }
          if (name !== correctName) {
            error2("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
            warnedProperties[name] = true;
            return true;
          }
        }
        if (rARIA.test(name)) {
          var lowerCasedName = name.toLowerCase();
          var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
          if (standardName == null) {
            warnedProperties[name] = true;
            return false;
          }
          if (name !== standardName) {
            error2("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
            warnedProperties[name] = true;
            return true;
          }
        }
      }
      return true;
    }
    function warnInvalidARIAProps(type, props) {
      {
        var invalidProps = [];
        for (var key in props) {
          var isValid2 = validateProperty(type, key);
          if (!isValid2) {
            invalidProps.push(key);
          }
        }
        var unknownPropString = invalidProps.map(function(prop) {
          return "`" + prop + "`";
        }).join(", ");
        if (invalidProps.length === 1) {
          error2("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        } else if (invalidProps.length > 1) {
          error2("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        }
      }
    }
    function validateProperties(type, props) {
      if (isCustomComponent(type, props)) {
        return;
      }
      warnInvalidARIAProps(type, props);
    }
    var didWarnValueNull = false;
    function validateProperties$1(type, props) {
      {
        if (type !== "input" && type !== "textarea" && type !== "select") {
          return;
        }
        if (props != null && props.value === null && !didWarnValueNull) {
          didWarnValueNull = true;
          if (type === "select" && props.multiple) {
            error2("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
          } else {
            error2("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
          }
        }
      }
    }
    var validateProperty$1 = function() {
    };
    {
      var warnedProperties$1 = {};
      var EVENT_NAME_REGEX = /^on./;
      var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
      var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
      var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      validateProperty$1 = function(tagName, name, value, eventRegistry) {
        if (hasOwnProperty2.call(warnedProperties$1, name) && warnedProperties$1[name]) {
          return true;
        }
        var lowerCasedName = name.toLowerCase();
        if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
          error2("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
          warnedProperties$1[name] = true;
          return true;
        }
        if (eventRegistry != null) {
          var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
          if (registrationNameDependencies2.hasOwnProperty(name)) {
            return true;
          }
          var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
          if (registrationName != null) {
            error2("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
            warnedProperties$1[name] = true;
            return true;
          }
          if (EVENT_NAME_REGEX.test(name)) {
            error2("Unknown event handler property `%s`. It will be ignored.", name);
            warnedProperties$1[name] = true;
            return true;
          }
        } else if (EVENT_NAME_REGEX.test(name)) {
          if (INVALID_EVENT_NAME_REGEX.test(name)) {
            error2("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
          }
          warnedProperties$1[name] = true;
          return true;
        }
        if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
          return true;
        }
        if (lowerCasedName === "innerhtml") {
          error2("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
          warnedProperties$1[name] = true;
          return true;
        }
        if (lowerCasedName === "aria") {
          error2("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
          warnedProperties$1[name] = true;
          return true;
        }
        if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
          error2("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
          warnedProperties$1[name] = true;
          return true;
        }
        if (typeof value === "number" && isNaN(value)) {
          error2("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
          warnedProperties$1[name] = true;
          return true;
        }
        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED2;
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          var standardName = possibleStandardNames[lowerCasedName];
          if (standardName !== name) {
            error2("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
            warnedProperties$1[name] = true;
            return true;
          }
        } else if (!isReserved && name !== lowerCasedName) {
          error2("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
          warnedProperties$1[name] = true;
          return true;
        }
        if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
          if (value) {
            error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
          } else {
            error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
          }
          warnedProperties$1[name] = true;
          return true;
        }
        if (isReserved) {
          return true;
        }
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
          warnedProperties$1[name] = true;
          return false;
        }
        if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
          error2("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
          warnedProperties$1[name] = true;
          return true;
        }
        return true;
      };
    }
    var warnUnknownProperties = function(type, props, eventRegistry) {
      {
        var unknownProps = [];
        for (var key in props) {
          var isValid2 = validateProperty$1(type, key, props[key], eventRegistry);
          if (!isValid2) {
            unknownProps.push(key);
          }
        }
        var unknownPropString = unknownProps.map(function(prop) {
          return "`" + prop + "`";
        }).join(", ");
        if (unknownProps.length === 1) {
          error2("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        } else if (unknownProps.length > 1) {
          error2("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        }
      }
    };
    function validateProperties$2(type, props, eventRegistry) {
      if (isCustomComponent(type, props)) {
        return;
      }
      warnUnknownProperties(type, props, eventRegistry);
    }
    var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
    var IS_NON_DELEGATED = 1 << 1;
    var IS_CAPTURE_PHASE = 1 << 2;
    var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
    var currentReplayingEvent = null;
    function setReplayingEvent(event) {
      {
        if (currentReplayingEvent !== null) {
          error2("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      currentReplayingEvent = event;
    }
    function resetReplayingEvent() {
      {
        if (currentReplayingEvent === null) {
          error2("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      currentReplayingEvent = null;
    }
    function isReplayingEvent(event) {
      return event === currentReplayingEvent;
    }
    function getEventTarget(nativeEvent) {
      var target = nativeEvent.target || nativeEvent.srcElement || window;
      if (target.correspondingUseElement) {
        target = target.correspondingUseElement;
      }
      return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;
    function restoreStateOfTarget(target) {
      var internalInstance = getInstanceFromNode(target);
      if (!internalInstance) {
        return;
      }
      if (typeof restoreImpl !== "function") {
        throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
      }
      var stateNode = internalInstance.stateNode;
      if (stateNode) {
        var _props = getFiberCurrentPropsFromNode(stateNode);
        restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
      }
    }
    function setRestoreImplementation(impl) {
      restoreImpl = impl;
    }
    function enqueueStateRestore(target) {
      if (restoreTarget) {
        if (restoreQueue) {
          restoreQueue.push(target);
        } else {
          restoreQueue = [target];
        }
      } else {
        restoreTarget = target;
      }
    }
    function needsStateRestore() {
      return restoreTarget !== null || restoreQueue !== null;
    }
    function restoreStateIfNeeded() {
      if (!restoreTarget) {
        return;
      }
      var target = restoreTarget;
      var queuedTargets = restoreQueue;
      restoreTarget = null;
      restoreQueue = null;
      restoreStateOfTarget(target);
      if (queuedTargets) {
        for (var i = 0; i < queuedTargets.length; i++) {
          restoreStateOfTarget(queuedTargets[i]);
        }
      }
    }
    var batchedUpdatesImpl = function(fn, bookkeeping) {
      return fn(bookkeeping);
    };
    var flushSyncImpl = function() {
    };
    var isInsideEventHandler = false;
    function finishEventHandler() {
      var controlledComponentsHavePendingUpdates = needsStateRestore();
      if (controlledComponentsHavePendingUpdates) {
        flushSyncImpl();
        restoreStateIfNeeded();
      }
    }
    function batchedUpdates(fn, a, b) {
      if (isInsideEventHandler) {
        return fn(a, b);
      }
      isInsideEventHandler = true;
      try {
        return batchedUpdatesImpl(fn, a, b);
      } finally {
        isInsideEventHandler = false;
        finishEventHandler();
      }
    }
    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
      batchedUpdatesImpl = _batchedUpdatesImpl;
      flushSyncImpl = _flushSyncImpl;
    }
    function isInteractive(tag) {
      return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
    }
    function shouldPreventMouseEvent(name, type, props) {
      switch (name) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
          return !!(props.disabled && isInteractive(type));
        default:
          return false;
      }
    }
    function getListener(inst, registrationName) {
      var stateNode = inst.stateNode;
      if (stateNode === null) {
        return null;
      }
      var props = getFiberCurrentPropsFromNode(stateNode);
      if (props === null) {
        return null;
      }
      var listener = props[registrationName];
      if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
        return null;
      }
      if (listener && typeof listener !== "function") {
        throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
      }
      return listener;
    }
    var passiveBrowserEventsSupported = false;
    if (canUseDOM) {
      try {
        var options = {};
        Object.defineProperty(options, "passive", {
          get: function() {
            passiveBrowserEventsSupported = true;
          }
        });
        window.addEventListener("test", options, options);
        window.removeEventListener("test", options, options);
      } catch (e) {
        passiveBrowserEventsSupported = false;
      }
    }
    function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
      var funcArgs = Array.prototype.slice.call(arguments, 3);
      try {
        func.apply(context, funcArgs);
      } catch (error3) {
        this.onError(error3);
      }
    }
    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
    {
      if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
        var fakeNode = document.createElement("react");
        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
          if (typeof document === "undefined" || document === null) {
            throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
          }
          var evt = document.createEvent("Event");
          var didCall = false;
          var didError = true;
          var windowEvent = window.event;
          var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
          function restoreAfterDispatch() {
            fakeNode.removeEventListener(evtType, callCallback2, false);
            if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
              window.event = windowEvent;
            }
          }
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          function callCallback2() {
            didCall = true;
            restoreAfterDispatch();
            func.apply(context, funcArgs);
            didError = false;
          }
          var error3;
          var didSetError = false;
          var isCrossOriginError = false;
          function handleWindowError(event) {
            error3 = event.error;
            didSetError = true;
            if (error3 === null && event.colno === 0 && event.lineno === 0) {
              isCrossOriginError = true;
            }
            if (event.defaultPrevented) {
              if (error3 != null && typeof error3 === "object") {
                try {
                  error3._suppressLogging = true;
                } catch (inner) {
                }
              }
            }
          }
          var evtType = "react-" + (name ? name : "invokeguardedcallback");
          window.addEventListener("error", handleWindowError);
          fakeNode.addEventListener(evtType, callCallback2, false);
          evt.initEvent(evtType, false, false);
          fakeNode.dispatchEvent(evt);
          if (windowEventDescriptor) {
            Object.defineProperty(window, "event", windowEventDescriptor);
          }
          if (didCall && didError) {
            if (!didSetError) {
              error3 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
            } else if (isCrossOriginError) {
              error3 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
            }
            this.onError(error3);
          }
          window.removeEventListener("error", handleWindowError);
          if (!didCall) {
            restoreAfterDispatch();
            return invokeGuardedCallbackProd.apply(this, arguments);
          }
        };
      }
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
    var hasError = false;
    var caughtError = null;
    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
      onError: function(error3) {
        hasError = true;
        caughtError = error3;
      }
    };
    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
      hasError = false;
      caughtError = null;
      invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
      invokeGuardedCallback.apply(this, arguments);
      if (hasError) {
        var error3 = clearCaughtError();
        if (!hasRethrowError) {
          hasRethrowError = true;
          rethrowError = error3;
        }
      }
    }
    function rethrowCaughtError() {
      if (hasRethrowError) {
        var error3 = rethrowError;
        hasRethrowError = false;
        rethrowError = null;
        throw error3;
      }
    }
    function hasCaughtError() {
      return hasError;
    }
    function clearCaughtError() {
      if (hasError) {
        var error3 = caughtError;
        hasError = false;
        caughtError = null;
        return error3;
      } else {
        throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    function get2(key) {
      return key._reactInternals;
    }
    function has(key) {
      return key._reactInternals !== void 0;
    }
    function set(key, value) {
      key._reactInternals = value;
    }
    var NoFlags = (
      /*                      */
      0
    );
    var PerformedWork = (
      /*                */
      1
    );
    var Placement = (
      /*                    */
      2
    );
    var Update = (
      /*                       */
      4
    );
    var ChildDeletion = (
      /*                */
      16
    );
    var ContentReset = (
      /*                 */
      32
    );
    var Callback = (
      /*                     */
      64
    );
    var DidCapture = (
      /*                   */
      128
    );
    var ForceClientRender = (
      /*            */
      256
    );
    var Ref = (
      /*                          */
      512
    );
    var Snapshot = (
      /*                     */
      1024
    );
    var Passive = (
      /*                      */
      2048
    );
    var Hydrating = (
      /*                    */
      4096
    );
    var Visibility = (
      /*                   */
      8192
    );
    var StoreConsistency = (
      /*             */
      16384
    );
    var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
    var HostEffectMask = (
      /*               */
      32767
    );
    var Incomplete = (
      /*                   */
      32768
    );
    var ShouldCapture = (
      /*                */
      65536
    );
    var ForceUpdateForLegacySuspense = (
      /* */
      131072
    );
    var Forked = (
      /*                       */
      1048576
    );
    var RefStatic = (
      /*                    */
      2097152
    );
    var LayoutStatic = (
      /*                 */
      4194304
    );
    var PassiveStatic = (
      /*                */
      8388608
    );
    var MountLayoutDev = (
      /*               */
      16777216
    );
    var MountPassiveDev = (
      /*              */
      33554432
    );
    var BeforeMutationMask = (
      // TODO: Remove Update flag from before mutation phase by re-landing Visibility
      // flag logic (see #20043)
      Update | Snapshot | 0
    );
    var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
    var LayoutMask = Update | Callback | Ref | Visibility;
    var PassiveMask = Passive | ChildDeletion;
    var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    function getNearestMountedFiber(fiber) {
      var node2 = fiber;
      var nearestMounted = fiber;
      if (!fiber.alternate) {
        var nextNode = node2;
        do {
          node2 = nextNode;
          if ((node2.flags & (Placement | Hydrating)) !== NoFlags) {
            nearestMounted = node2.return;
          }
          nextNode = node2.return;
        } while (nextNode);
      } else {
        while (node2.return) {
          node2 = node2.return;
        }
      }
      if (node2.tag === HostRoot) {
        return nearestMounted;
      }
      return null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
      if (fiber.tag === SuspenseComponent) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState === null) {
          var current2 = fiber.alternate;
          if (current2 !== null) {
            suspenseState = current2.memoizedState;
          }
        }
        if (suspenseState !== null) {
          return suspenseState.dehydrated;
        }
      }
      return null;
    }
    function getContainerFromFiber(fiber) {
      return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
    }
    function isFiberMounted(fiber) {
      return getNearestMountedFiber(fiber) === fiber;
    }
    function isMounted(component) {
      {
        var owner = ReactCurrentOwner.current;
        if (owner !== null && owner.tag === ClassComponent) {
          var ownerFiber = owner;
          var instance2 = ownerFiber.stateNode;
          if (!instance2._warnedAboutRefsInRender) {
            error2("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
          }
          instance2._warnedAboutRefsInRender = true;
        }
      }
      var fiber = get2(component);
      if (!fiber) {
        return false;
      }
      return getNearestMountedFiber(fiber) === fiber;
    }
    function assertIsMounted(fiber) {
      if (getNearestMountedFiber(fiber) !== fiber) {
        throw new Error("Unable to find node on an unmounted component.");
      }
    }
    function findCurrentFiberUsingSlowPath(fiber) {
      var alternate = fiber.alternate;
      if (!alternate) {
        var nearestMounted = getNearestMountedFiber(fiber);
        if (nearestMounted === null) {
          throw new Error("Unable to find node on an unmounted component.");
        }
        if (nearestMounted !== fiber) {
          return null;
        }
        return fiber;
      }
      var a = fiber;
      var b = alternate;
      while (true) {
        var parentA = a.return;
        if (parentA === null) {
          break;
        }
        var parentB = parentA.alternate;
        if (parentB === null) {
          var nextParent = parentA.return;
          if (nextParent !== null) {
            a = b = nextParent;
            continue;
          }
          break;
        }
        if (parentA.child === parentB.child) {
          var child = parentA.child;
          while (child) {
            if (child === a) {
              assertIsMounted(parentA);
              return fiber;
            }
            if (child === b) {
              assertIsMounted(parentA);
              return alternate;
            }
            child = child.sibling;
          }
          throw new Error("Unable to find node on an unmounted component.");
        }
        if (a.return !== b.return) {
          a = parentA;
          b = parentB;
        } else {
          var didFindChild = false;
          var _child = parentA.child;
          while (_child) {
            if (_child === a) {
              didFindChild = true;
              a = parentA;
              b = parentB;
              break;
            }
            if (_child === b) {
              didFindChild = true;
              b = parentA;
              a = parentB;
              break;
            }
            _child = _child.sibling;
          }
          if (!didFindChild) {
            _child = parentB.child;
            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentB;
                b = parentA;
                break;
              }
              if (_child === b) {
                didFindChild = true;
                b = parentB;
                a = parentA;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild) {
              throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
            }
          }
        }
        if (a.alternate !== b) {
          throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      if (a.tag !== HostRoot) {
        throw new Error("Unable to find node on an unmounted component.");
      }
      if (a.stateNode.current === a) {
        return fiber;
      }
      return alternate;
    }
    function findCurrentHostFiber(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);
      return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
    }
    function findCurrentHostFiberImpl(node2) {
      if (node2.tag === HostComponent || node2.tag === HostText) {
        return node2;
      }
      var child = node2.child;
      while (child !== null) {
        var match2 = findCurrentHostFiberImpl(child);
        if (match2 !== null) {
          return match2;
        }
        child = child.sibling;
      }
      return null;
    }
    function findCurrentHostFiberWithNoPortals(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);
      return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
    }
    function findCurrentHostFiberWithNoPortalsImpl(node2) {
      if (node2.tag === HostComponent || node2.tag === HostText) {
        return node2;
      }
      var child = node2.child;
      while (child !== null) {
        if (child.tag !== HostPortal) {
          var match2 = findCurrentHostFiberWithNoPortalsImpl(child);
          if (match2 !== null) {
            return match2;
          }
        }
        child = child.sibling;
      }
      return null;
    }
    var scheduleCallback = Scheduler2.unstable_scheduleCallback;
    var cancelCallback = Scheduler2.unstable_cancelCallback;
    var shouldYield = Scheduler2.unstable_shouldYield;
    var requestPaint = Scheduler2.unstable_requestPaint;
    var now = Scheduler2.unstable_now;
    var getCurrentPriorityLevel = Scheduler2.unstable_getCurrentPriorityLevel;
    var ImmediatePriority = Scheduler2.unstable_ImmediatePriority;
    var UserBlockingPriority = Scheduler2.unstable_UserBlockingPriority;
    var NormalPriority = Scheduler2.unstable_NormalPriority;
    var LowPriority = Scheduler2.unstable_LowPriority;
    var IdlePriority = Scheduler2.unstable_IdlePriority;
    var unstable_yieldValue = Scheduler2.unstable_yieldValue;
    var unstable_setDisableYieldValue = Scheduler2.unstable_setDisableYieldValue;
    var rendererID = null;
    var injectedHook = null;
    var injectedProfilingHooks = null;
    var hasLoggedError = false;
    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
    function injectInternals(internals) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
        return false;
      }
      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (hook.isDisabled) {
        return true;
      }
      if (!hook.supportsFiber) {
        {
          error2("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
        }
        return true;
      }
      try {
        {
          internals = assign2({}, internals, {
            getLaneLabelMap,
            injectProfilingHooks
          });
        }
        rendererID = hook.inject(internals);
        injectedHook = hook;
      } catch (err) {
        {
          error2("React instrumentation encountered an error: %s.", err);
        }
      }
      if (hook.checkDCE) {
        return true;
      } else {
        return false;
      }
    }
    function onScheduleRoot(root2, children) {
      {
        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
          try {
            injectedHook.onScheduleFiberRoot(rendererID, root2, children);
          } catch (err) {
            if (!hasLoggedError) {
              hasLoggedError = true;
              error2("React instrumentation encountered an error: %s", err);
            }
          }
        }
      }
    }
    function onCommitRoot(root2, eventPriority) {
      if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
        try {
          var didError = (root2.current.flags & DidCapture) === DidCapture;
          {
            var schedulerPriority;
            switch (eventPriority) {
              case DiscreteEventPriority:
                schedulerPriority = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                schedulerPriority = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                schedulerPriority = NormalPriority;
                break;
              case IdleEventPriority:
                schedulerPriority = IdlePriority;
                break;
              default:
                schedulerPriority = NormalPriority;
                break;
            }
            injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
          }
        } catch (err) {
          {
            if (!hasLoggedError) {
              hasLoggedError = true;
              error2("React instrumentation encountered an error: %s", err);
            }
          }
        }
      }
    }
    function onPostCommitRoot(root2) {
      if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
        try {
          injectedHook.onPostCommitFiberRoot(rendererID, root2);
        } catch (err) {
          {
            if (!hasLoggedError) {
              hasLoggedError = true;
              error2("React instrumentation encountered an error: %s", err);
            }
          }
        }
      }
    }
    function onCommitUnmount(fiber) {
      if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
        try {
          injectedHook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {
          {
            if (!hasLoggedError) {
              hasLoggedError = true;
              error2("React instrumentation encountered an error: %s", err);
            }
          }
        }
      }
    }
    function setIsStrictModeForDevtools(newIsStrictMode) {
      {
        if (typeof unstable_yieldValue === "function") {
          unstable_setDisableYieldValue(newIsStrictMode);
          setSuppressWarning(newIsStrictMode);
        }
        if (injectedHook && typeof injectedHook.setStrictMode === "function") {
          try {
            injectedHook.setStrictMode(rendererID, newIsStrictMode);
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error2("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
    }
    function injectProfilingHooks(profilingHooks) {
      injectedProfilingHooks = profilingHooks;
    }
    function getLaneLabelMap() {
      {
        var map2 = /* @__PURE__ */ new Map();
        var lane = 1;
        for (var index2 = 0; index2 < TotalLanes; index2++) {
          var label = getLabelForLane(lane);
          map2.set(lane, label);
          lane *= 2;
        }
        return map2;
      }
    }
    function markCommitStarted(lanes) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
          injectedProfilingHooks.markCommitStarted(lanes);
        }
      }
    }
    function markCommitStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
          injectedProfilingHooks.markCommitStopped();
        }
      }
    }
    function markComponentRenderStarted(fiber) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
          injectedProfilingHooks.markComponentRenderStarted(fiber);
        }
      }
    }
    function markComponentRenderStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
          injectedProfilingHooks.markComponentRenderStopped();
        }
      }
    }
    function markComponentPassiveEffectMountStarted(fiber) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
          injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
        }
      }
    }
    function markComponentPassiveEffectMountStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
          injectedProfilingHooks.markComponentPassiveEffectMountStopped();
        }
      }
    }
    function markComponentPassiveEffectUnmountStarted(fiber) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
          injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
        }
      }
    }
    function markComponentPassiveEffectUnmountStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
          injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
        }
      }
    }
    function markComponentLayoutEffectMountStarted(fiber) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
          injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
        }
      }
    }
    function markComponentLayoutEffectMountStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
          injectedProfilingHooks.markComponentLayoutEffectMountStopped();
        }
      }
    }
    function markComponentLayoutEffectUnmountStarted(fiber) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
          injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
        }
      }
    }
    function markComponentLayoutEffectUnmountStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
          injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
        }
      }
    }
    function markComponentErrored(fiber, thrownValue, lanes) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
          injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
        }
      }
    }
    function markComponentSuspended(fiber, wakeable, lanes) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
          injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
        }
      }
    }
    function markLayoutEffectsStarted(lanes) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
          injectedProfilingHooks.markLayoutEffectsStarted(lanes);
        }
      }
    }
    function markLayoutEffectsStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
          injectedProfilingHooks.markLayoutEffectsStopped();
        }
      }
    }
    function markPassiveEffectsStarted(lanes) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
          injectedProfilingHooks.markPassiveEffectsStarted(lanes);
        }
      }
    }
    function markPassiveEffectsStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
          injectedProfilingHooks.markPassiveEffectsStopped();
        }
      }
    }
    function markRenderStarted(lanes) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
          injectedProfilingHooks.markRenderStarted(lanes);
        }
      }
    }
    function markRenderYielded() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
          injectedProfilingHooks.markRenderYielded();
        }
      }
    }
    function markRenderStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
          injectedProfilingHooks.markRenderStopped();
        }
      }
    }
    function markRenderScheduled(lane) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
          injectedProfilingHooks.markRenderScheduled(lane);
        }
      }
    }
    function markForceUpdateScheduled(fiber, lane) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
          injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
        }
      }
    }
    function markStateUpdateScheduled(fiber, lane) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
          injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
        }
      }
    }
    var NoMode = (
      /*                         */
      0
    );
    var ConcurrentMode = (
      /*                 */
      1
    );
    var ProfileMode = (
      /*                    */
      2
    );
    var StrictLegacyMode = (
      /*               */
      8
    );
    var StrictEffectsMode = (
      /*              */
      16
    );
    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
    var log2 = Math.log;
    var LN2 = Math.LN2;
    function clz32Fallback(x) {
      var asUint = x >>> 0;
      if (asUint === 0) {
        return 32;
      }
      return 31 - (log2(asUint) / LN2 | 0) | 0;
    }
    var TotalLanes = 31;
    var NoLanes = (
      /*                        */
      0
    );
    var NoLane = (
      /*                          */
      0
    );
    var SyncLane = (
      /*                        */
      1
    );
    var InputContinuousHydrationLane = (
      /*    */
      2
    );
    var InputContinuousLane = (
      /*             */
      4
    );
    var DefaultHydrationLane = (
      /*            */
      8
    );
    var DefaultLane = (
      /*                     */
      16
    );
    var TransitionHydrationLane = (
      /*                */
      32
    );
    var TransitionLanes = (
      /*                       */
      4194240
    );
    var TransitionLane1 = (
      /*                        */
      64
    );
    var TransitionLane2 = (
      /*                        */
      128
    );
    var TransitionLane3 = (
      /*                        */
      256
    );
    var TransitionLane4 = (
      /*                        */
      512
    );
    var TransitionLane5 = (
      /*                        */
      1024
    );
    var TransitionLane6 = (
      /*                        */
      2048
    );
    var TransitionLane7 = (
      /*                        */
      4096
    );
    var TransitionLane8 = (
      /*                        */
      8192
    );
    var TransitionLane9 = (
      /*                        */
      16384
    );
    var TransitionLane10 = (
      /*                       */
      32768
    );
    var TransitionLane11 = (
      /*                       */
      65536
    );
    var TransitionLane12 = (
      /*                       */
      131072
    );
    var TransitionLane13 = (
      /*                       */
      262144
    );
    var TransitionLane14 = (
      /*                       */
      524288
    );
    var TransitionLane15 = (
      /*                       */
      1048576
    );
    var TransitionLane16 = (
      /*                       */
      2097152
    );
    var RetryLanes = (
      /*                            */
      130023424
    );
    var RetryLane1 = (
      /*                             */
      4194304
    );
    var RetryLane2 = (
      /*                             */
      8388608
    );
    var RetryLane3 = (
      /*                             */
      16777216
    );
    var RetryLane4 = (
      /*                             */
      33554432
    );
    var RetryLane5 = (
      /*                             */
      67108864
    );
    var SomeRetryLane = RetryLane1;
    var SelectiveHydrationLane = (
      /*          */
      134217728
    );
    var NonIdleLanes = (
      /*                          */
      268435455
    );
    var IdleHydrationLane = (
      /*               */
      268435456
    );
    var IdleLane = (
      /*                        */
      536870912
    );
    var OffscreenLane = (
      /*                   */
      1073741824
    );
    function getLabelForLane(lane) {
      {
        if (lane & SyncLane) {
          return "Sync";
        }
        if (lane & InputContinuousHydrationLane) {
          return "InputContinuousHydration";
        }
        if (lane & InputContinuousLane) {
          return "InputContinuous";
        }
        if (lane & DefaultHydrationLane) {
          return "DefaultHydration";
        }
        if (lane & DefaultLane) {
          return "Default";
        }
        if (lane & TransitionHydrationLane) {
          return "TransitionHydration";
        }
        if (lane & TransitionLanes) {
          return "Transition";
        }
        if (lane & RetryLanes) {
          return "Retry";
        }
        if (lane & SelectiveHydrationLane) {
          return "SelectiveHydration";
        }
        if (lane & IdleHydrationLane) {
          return "IdleHydration";
        }
        if (lane & IdleLane) {
          return "Idle";
        }
        if (lane & OffscreenLane) {
          return "Offscreen";
        }
      }
    }
    var NoTimestamp = -1;
    var nextTransitionLane = TransitionLane1;
    var nextRetryLane = RetryLane1;
    function getHighestPriorityLanes(lanes) {
      switch (getHighestPriorityLane(lanes)) {
        case SyncLane:
          return SyncLane;
        case InputContinuousHydrationLane:
          return InputContinuousHydrationLane;
        case InputContinuousLane:
          return InputContinuousLane;
        case DefaultHydrationLane:
          return DefaultHydrationLane;
        case DefaultLane:
          return DefaultLane;
        case TransitionHydrationLane:
          return TransitionHydrationLane;
        case TransitionLane1:
        case TransitionLane2:
        case TransitionLane3:
        case TransitionLane4:
        case TransitionLane5:
        case TransitionLane6:
        case TransitionLane7:
        case TransitionLane8:
        case TransitionLane9:
        case TransitionLane10:
        case TransitionLane11:
        case TransitionLane12:
        case TransitionLane13:
        case TransitionLane14:
        case TransitionLane15:
        case TransitionLane16:
          return lanes & TransitionLanes;
        case RetryLane1:
        case RetryLane2:
        case RetryLane3:
        case RetryLane4:
        case RetryLane5:
          return lanes & RetryLanes;
        case SelectiveHydrationLane:
          return SelectiveHydrationLane;
        case IdleHydrationLane:
          return IdleHydrationLane;
        case IdleLane:
          return IdleLane;
        case OffscreenLane:
          return OffscreenLane;
        default:
          {
            error2("Should have found matching lanes. This is a bug in React.");
          }
          return lanes;
      }
    }
    function getNextLanes(root2, wipLanes) {
      var pendingLanes = root2.pendingLanes;
      if (pendingLanes === NoLanes) {
        return NoLanes;
      }
      var nextLanes = NoLanes;
      var suspendedLanes = root2.suspendedLanes;
      var pingedLanes = root2.pingedLanes;
      var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
      if (nonIdlePendingLanes !== NoLanes) {
        var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
        if (nonIdleUnblockedLanes !== NoLanes) {
          nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
        } else {
          var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
          if (nonIdlePingedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
          }
        }
      } else {
        var unblockedLanes = pendingLanes & ~suspendedLanes;
        if (unblockedLanes !== NoLanes) {
          nextLanes = getHighestPriorityLanes(unblockedLanes);
        } else {
          if (pingedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(pingedLanes);
          }
        }
      }
      if (nextLanes === NoLanes) {
        return NoLanes;
      }
      if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
      // bother waiting until the root is complete.
      (wipLanes & suspendedLanes) === NoLanes) {
        var nextLane = getHighestPriorityLane(nextLanes);
        var wipLane = getHighestPriorityLane(wipLanes);
        if (
          // Tests whether the next lane is equal or lower priority than the wip
          // one. This works because the bits decrease in priority as you go left.
          nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
          // only difference between default updates and transition updates is that
          // default updates do not support refresh transitions.
          nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
        ) {
          return wipLanes;
        }
      }
      if ((nextLanes & InputContinuousLane) !== NoLanes) {
        nextLanes |= pendingLanes & DefaultLane;
      }
      var entangledLanes = root2.entangledLanes;
      if (entangledLanes !== NoLanes) {
        var entanglements = root2.entanglements;
        var lanes = nextLanes & entangledLanes;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          nextLanes |= entanglements[index2];
          lanes &= ~lane;
        }
      }
      return nextLanes;
    }
    function getMostRecentEventTime(root2, lanes) {
      var eventTimes = root2.eventTimes;
      var mostRecentEventTime = NoTimestamp;
      while (lanes > 0) {
        var index2 = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index2;
        var eventTime = eventTimes[index2];
        if (eventTime > mostRecentEventTime) {
          mostRecentEventTime = eventTime;
        }
        lanes &= ~lane;
      }
      return mostRecentEventTime;
    }
    function computeExpirationTime(lane, currentTime) {
      switch (lane) {
        case SyncLane:
        case InputContinuousHydrationLane:
        case InputContinuousLane:
          return currentTime + 250;
        case DefaultHydrationLane:
        case DefaultLane:
        case TransitionHydrationLane:
        case TransitionLane1:
        case TransitionLane2:
        case TransitionLane3:
        case TransitionLane4:
        case TransitionLane5:
        case TransitionLane6:
        case TransitionLane7:
        case TransitionLane8:
        case TransitionLane9:
        case TransitionLane10:
        case TransitionLane11:
        case TransitionLane12:
        case TransitionLane13:
        case TransitionLane14:
        case TransitionLane15:
        case TransitionLane16:
          return currentTime + 5e3;
        case RetryLane1:
        case RetryLane2:
        case RetryLane3:
        case RetryLane4:
        case RetryLane5:
          return NoTimestamp;
        case SelectiveHydrationLane:
        case IdleHydrationLane:
        case IdleLane:
        case OffscreenLane:
          return NoTimestamp;
        default:
          {
            error2("Should have found matching lanes. This is a bug in React.");
          }
          return NoTimestamp;
      }
    }
    function markStarvedLanesAsExpired(root2, currentTime) {
      var pendingLanes = root2.pendingLanes;
      var suspendedLanes = root2.suspendedLanes;
      var pingedLanes = root2.pingedLanes;
      var expirationTimes = root2.expirationTimes;
      var lanes = pendingLanes;
      while (lanes > 0) {
        var index2 = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index2;
        var expirationTime = expirationTimes[index2];
        if (expirationTime === NoTimestamp) {
          if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
            expirationTimes[index2] = computeExpirationTime(lane, currentTime);
          }
        } else if (expirationTime <= currentTime) {
          root2.expiredLanes |= lane;
        }
        lanes &= ~lane;
      }
    }
    function getHighestPriorityPendingLanes(root2) {
      return getHighestPriorityLanes(root2.pendingLanes);
    }
    function getLanesToRetrySynchronouslyOnError(root2) {
      var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
      if (everythingButOffscreen !== NoLanes) {
        return everythingButOffscreen;
      }
      if (everythingButOffscreen & OffscreenLane) {
        return OffscreenLane;
      }
      return NoLanes;
    }
    function includesSyncLane(lanes) {
      return (lanes & SyncLane) !== NoLanes;
    }
    function includesNonIdleWork(lanes) {
      return (lanes & NonIdleLanes) !== NoLanes;
    }
    function includesOnlyRetries(lanes) {
      return (lanes & RetryLanes) === lanes;
    }
    function includesOnlyNonUrgentLanes(lanes) {
      var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
      return (lanes & UrgentLanes) === NoLanes;
    }
    function includesOnlyTransitions(lanes) {
      return (lanes & TransitionLanes) === lanes;
    }
    function includesBlockingLane(root2, lanes) {
      var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
      return (lanes & SyncDefaultLanes) !== NoLanes;
    }
    function includesExpiredLane(root2, lanes) {
      return (lanes & root2.expiredLanes) !== NoLanes;
    }
    function isTransitionLane(lane) {
      return (lane & TransitionLanes) !== NoLanes;
    }
    function claimNextTransitionLane() {
      var lane = nextTransitionLane;
      nextTransitionLane <<= 1;
      if ((nextTransitionLane & TransitionLanes) === NoLanes) {
        nextTransitionLane = TransitionLane1;
      }
      return lane;
    }
    function claimNextRetryLane() {
      var lane = nextRetryLane;
      nextRetryLane <<= 1;
      if ((nextRetryLane & RetryLanes) === NoLanes) {
        nextRetryLane = RetryLane1;
      }
      return lane;
    }
    function getHighestPriorityLane(lanes) {
      return lanes & -lanes;
    }
    function pickArbitraryLane(lanes) {
      return getHighestPriorityLane(lanes);
    }
    function pickArbitraryLaneIndex(lanes) {
      return 31 - clz32(lanes);
    }
    function laneToIndex(lane) {
      return pickArbitraryLaneIndex(lane);
    }
    function includesSomeLane(a, b) {
      return (a & b) !== NoLanes;
    }
    function isSubsetOfLanes(set2, subset) {
      return (set2 & subset) === subset;
    }
    function mergeLanes(a, b) {
      return a | b;
    }
    function removeLanes(set2, subset) {
      return set2 & ~subset;
    }
    function intersectLanes(a, b) {
      return a & b;
    }
    function laneToLanes(lane) {
      return lane;
    }
    function higherPriorityLane(a, b) {
      return a !== NoLane && a < b ? a : b;
    }
    function createLaneMap(initial) {
      var laneMap = [];
      for (var i = 0; i < TotalLanes; i++) {
        laneMap.push(initial);
      }
      return laneMap;
    }
    function markRootUpdated(root2, updateLane, eventTime) {
      root2.pendingLanes |= updateLane;
      if (updateLane !== IdleLane) {
        root2.suspendedLanes = NoLanes;
        root2.pingedLanes = NoLanes;
      }
      var eventTimes = root2.eventTimes;
      var index2 = laneToIndex(updateLane);
      eventTimes[index2] = eventTime;
    }
    function markRootSuspended(root2, suspendedLanes) {
      root2.suspendedLanes |= suspendedLanes;
      root2.pingedLanes &= ~suspendedLanes;
      var expirationTimes = root2.expirationTimes;
      var lanes = suspendedLanes;
      while (lanes > 0) {
        var index2 = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index2;
        expirationTimes[index2] = NoTimestamp;
        lanes &= ~lane;
      }
    }
    function markRootPinged(root2, pingedLanes, eventTime) {
      root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
    }
    function markRootFinished(root2, remainingLanes) {
      var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
      root2.pendingLanes = remainingLanes;
      root2.suspendedLanes = NoLanes;
      root2.pingedLanes = NoLanes;
      root2.expiredLanes &= remainingLanes;
      root2.mutableReadLanes &= remainingLanes;
      root2.entangledLanes &= remainingLanes;
      var entanglements = root2.entanglements;
      var eventTimes = root2.eventTimes;
      var expirationTimes = root2.expirationTimes;
      var lanes = noLongerPendingLanes;
      while (lanes > 0) {
        var index2 = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index2;
        entanglements[index2] = NoLanes;
        eventTimes[index2] = NoTimestamp;
        expirationTimes[index2] = NoTimestamp;
        lanes &= ~lane;
      }
    }
    function markRootEntangled(root2, entangledLanes) {
      var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
      var entanglements = root2.entanglements;
      var lanes = rootEntangledLanes;
      while (lanes) {
        var index2 = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index2;
        if (
          // Is this one of the newly entangled lanes?
          lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
          entanglements[index2] & entangledLanes
        ) {
          entanglements[index2] |= entangledLanes;
        }
        lanes &= ~lane;
      }
    }
    function getBumpedLaneForHydration(root2, renderLanes2) {
      var renderLane = getHighestPriorityLane(renderLanes2);
      var lane;
      switch (renderLane) {
        case InputContinuousLane:
          lane = InputContinuousHydrationLane;
          break;
        case DefaultLane:
          lane = DefaultHydrationLane;
          break;
        case TransitionLane1:
        case TransitionLane2:
        case TransitionLane3:
        case TransitionLane4:
        case TransitionLane5:
        case TransitionLane6:
        case TransitionLane7:
        case TransitionLane8:
        case TransitionLane9:
        case TransitionLane10:
        case TransitionLane11:
        case TransitionLane12:
        case TransitionLane13:
        case TransitionLane14:
        case TransitionLane15:
        case TransitionLane16:
        case RetryLane1:
        case RetryLane2:
        case RetryLane3:
        case RetryLane4:
        case RetryLane5:
          lane = TransitionHydrationLane;
          break;
        case IdleLane:
          lane = IdleHydrationLane;
          break;
        default:
          lane = NoLane;
          break;
      }
      if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
        return NoLane;
      }
      return lane;
    }
    function addFiberToLanesMap(root2, fiber, lanes) {
      if (!isDevToolsPresent) {
        return;
      }
      var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
      while (lanes > 0) {
        var index2 = laneToIndex(lanes);
        var lane = 1 << index2;
        var updaters = pendingUpdatersLaneMap[index2];
        updaters.add(fiber);
        lanes &= ~lane;
      }
    }
    function movePendingFibersToMemoized(root2, lanes) {
      if (!isDevToolsPresent) {
        return;
      }
      var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
      var memoizedUpdaters = root2.memoizedUpdaters;
      while (lanes > 0) {
        var index2 = laneToIndex(lanes);
        var lane = 1 << index2;
        var updaters = pendingUpdatersLaneMap[index2];
        if (updaters.size > 0) {
          updaters.forEach(function(fiber) {
            var alternate = fiber.alternate;
            if (alternate === null || !memoizedUpdaters.has(alternate)) {
              memoizedUpdaters.add(fiber);
            }
          });
          updaters.clear();
        }
        lanes &= ~lane;
      }
    }
    function getTransitionsForLanes(root2, lanes) {
      {
        return null;
      }
    }
    var DiscreteEventPriority = SyncLane;
    var ContinuousEventPriority = InputContinuousLane;
    var DefaultEventPriority = DefaultLane;
    var IdleEventPriority = IdleLane;
    var currentUpdatePriority = NoLane;
    function getCurrentUpdatePriority() {
      return currentUpdatePriority;
    }
    function setCurrentUpdatePriority(newPriority) {
      currentUpdatePriority = newPriority;
    }
    function runWithPriority(priority, fn) {
      var previousPriority = currentUpdatePriority;
      try {
        currentUpdatePriority = priority;
        return fn();
      } finally {
        currentUpdatePriority = previousPriority;
      }
    }
    function higherEventPriority(a, b) {
      return a !== 0 && a < b ? a : b;
    }
    function lowerEventPriority(a, b) {
      return a === 0 || a > b ? a : b;
    }
    function isHigherEventPriority(a, b) {
      return a !== 0 && a < b;
    }
    function lanesToEventPriority(lanes) {
      var lane = getHighestPriorityLane(lanes);
      if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
        return DiscreteEventPriority;
      }
      if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
        return ContinuousEventPriority;
      }
      if (includesNonIdleWork(lane)) {
        return DefaultEventPriority;
      }
      return IdleEventPriority;
    }
    function isRootDehydrated(root2) {
      var currentState = root2.current.memoizedState;
      return currentState.isDehydrated;
    }
    var _attemptSynchronousHydration;
    function setAttemptSynchronousHydration(fn) {
      _attemptSynchronousHydration = fn;
    }
    function attemptSynchronousHydration(fiber) {
      _attemptSynchronousHydration(fiber);
    }
    var attemptContinuousHydration;
    function setAttemptContinuousHydration(fn) {
      attemptContinuousHydration = fn;
    }
    var attemptHydrationAtCurrentPriority;
    function setAttemptHydrationAtCurrentPriority(fn) {
      attemptHydrationAtCurrentPriority = fn;
    }
    var getCurrentUpdatePriority$1;
    function setGetCurrentUpdatePriority(fn) {
      getCurrentUpdatePriority$1 = fn;
    }
    var attemptHydrationAtPriority;
    function setAttemptHydrationAtPriority(fn) {
      attemptHydrationAtPriority = fn;
    }
    var hasScheduledReplayAttempt = false;
    var queuedDiscreteEvents = [];
    var queuedFocus = null;
    var queuedDrag = null;
    var queuedMouse = null;
    var queuedPointers = /* @__PURE__ */ new Map();
    var queuedPointerCaptures = /* @__PURE__ */ new Map();
    var queuedExplicitHydrationTargets = [];
    var discreteReplayableEvents = [
      "mousedown",
      "mouseup",
      "touchcancel",
      "touchend",
      "touchstart",
      "auxclick",
      "dblclick",
      "pointercancel",
      "pointerdown",
      "pointerup",
      "dragend",
      "dragstart",
      "drop",
      "compositionend",
      "compositionstart",
      "keydown",
      "keypress",
      "keyup",
      "input",
      "textInput",
      // Intentionally camelCase
      "copy",
      "cut",
      "paste",
      "click",
      "change",
      "contextmenu",
      "reset",
      "submit"
    ];
    function isDiscreteEventThatRequiresHydration(eventType) {
      return discreteReplayableEvents.indexOf(eventType) > -1;
    }
    function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      return {
        blockedOn,
        domEventName,
        eventSystemFlags,
        nativeEvent,
        targetContainers: [targetContainer]
      };
    }
    function clearIfContinuousEvent(domEventName, nativeEvent) {
      switch (domEventName) {
        case "focusin":
        case "focusout":
          queuedFocus = null;
          break;
        case "dragenter":
        case "dragleave":
          queuedDrag = null;
          break;
        case "mouseover":
        case "mouseout":
          queuedMouse = null;
          break;
        case "pointerover":
        case "pointerout": {
          var pointerId = nativeEvent.pointerId;
          queuedPointers.delete(pointerId);
          break;
        }
        case "gotpointercapture":
        case "lostpointercapture": {
          var _pointerId = nativeEvent.pointerId;
          queuedPointerCaptures.delete(_pointerId);
          break;
        }
      }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
        var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn !== null) {
          var _fiber2 = getInstanceFromNode(blockedOn);
          if (_fiber2 !== null) {
            attemptContinuousHydration(_fiber2);
          }
        }
        return queuedEvent;
      }
      existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
      var targetContainers = existingQueuedEvent.targetContainers;
      if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
        targetContainers.push(targetContainer);
      }
      return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      switch (domEventName) {
        case "focusin": {
          var focusEvent = nativeEvent;
          queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
          return true;
        }
        case "dragenter": {
          var dragEvent = nativeEvent;
          queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
          return true;
        }
        case "mouseover": {
          var mouseEvent = nativeEvent;
          queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
          return true;
        }
        case "pointerover": {
          var pointerEvent = nativeEvent;
          var pointerId = pointerEvent.pointerId;
          queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
          return true;
        }
        case "gotpointercapture": {
          var _pointerEvent = nativeEvent;
          var _pointerId2 = _pointerEvent.pointerId;
          queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
          return true;
        }
      }
      return false;
    }
    function attemptExplicitHydrationTarget(queuedTarget) {
      var targetInst = getClosestInstanceFromNode(queuedTarget.target);
      if (targetInst !== null) {
        var nearestMounted = getNearestMountedFiber(targetInst);
        if (nearestMounted !== null) {
          var tag = nearestMounted.tag;
          if (tag === SuspenseComponent) {
            var instance2 = getSuspenseInstanceFromFiber(nearestMounted);
            if (instance2 !== null) {
              queuedTarget.blockedOn = instance2;
              attemptHydrationAtPriority(queuedTarget.priority, function() {
                attemptHydrationAtCurrentPriority(nearestMounted);
              });
              return;
            }
          } else if (tag === HostRoot) {
            var root2 = nearestMounted.stateNode;
            if (isRootDehydrated(root2)) {
              queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
              return;
            }
          }
        }
      }
      queuedTarget.blockedOn = null;
    }
    function queueExplicitHydrationTarget(target) {
      var updatePriority = getCurrentUpdatePriority$1();
      var queuedTarget = {
        blockedOn: null,
        target,
        priority: updatePriority
      };
      var i = 0;
      for (; i < queuedExplicitHydrationTargets.length; i++) {
        if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
          break;
        }
      }
      queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
      if (i === 0) {
        attemptExplicitHydrationTarget(queuedTarget);
      }
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
      if (queuedEvent.blockedOn !== null) {
        return false;
      }
      var targetContainers = queuedEvent.targetContainers;
      while (targetContainers.length > 0) {
        var targetContainer = targetContainers[0];
        var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
        if (nextBlockedOn === null) {
          {
            var nativeEvent = queuedEvent.nativeEvent;
            var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
            setReplayingEvent(nativeEventClone);
            nativeEvent.target.dispatchEvent(nativeEventClone);
            resetReplayingEvent();
          }
        } else {
          var _fiber3 = getInstanceFromNode(nextBlockedOn);
          if (_fiber3 !== null) {
            attemptContinuousHydration(_fiber3);
          }
          queuedEvent.blockedOn = nextBlockedOn;
          return false;
        }
        targetContainers.shift();
      }
      return true;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map2) {
      if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
        map2.delete(key);
      }
    }
    function replayUnblockedEvents() {
      hasScheduledReplayAttempt = false;
      if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
        queuedFocus = null;
      }
      if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
        queuedDrag = null;
      }
      if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
        queuedMouse = null;
      }
      queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
      queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
      if (queuedEvent.blockedOn === unblocked) {
        queuedEvent.blockedOn = null;
        if (!hasScheduledReplayAttempt) {
          hasScheduledReplayAttempt = true;
          Scheduler2.unstable_scheduleCallback(Scheduler2.unstable_NormalPriority, replayUnblockedEvents);
        }
      }
    }
    function retryIfBlockedOn(unblocked) {
      if (queuedDiscreteEvents.length > 0) {
        scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
        for (var i = 1; i < queuedDiscreteEvents.length; i++) {
          var queuedEvent = queuedDiscreteEvents[i];
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
          }
        }
      }
      if (queuedFocus !== null) {
        scheduleCallbackIfUnblocked(queuedFocus, unblocked);
      }
      if (queuedDrag !== null) {
        scheduleCallbackIfUnblocked(queuedDrag, unblocked);
      }
      if (queuedMouse !== null) {
        scheduleCallbackIfUnblocked(queuedMouse, unblocked);
      }
      var unblock = function(queuedEvent2) {
        return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
      };
      queuedPointers.forEach(unblock);
      queuedPointerCaptures.forEach(unblock);
      for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
        var queuedTarget = queuedExplicitHydrationTargets[_i];
        if (queuedTarget.blockedOn === unblocked) {
          queuedTarget.blockedOn = null;
        }
      }
      while (queuedExplicitHydrationTargets.length > 0) {
        var nextExplicitTarget = queuedExplicitHydrationTargets[0];
        if (nextExplicitTarget.blockedOn !== null) {
          break;
        } else {
          attemptExplicitHydrationTarget(nextExplicitTarget);
          if (nextExplicitTarget.blockedOn === null) {
            queuedExplicitHydrationTargets.shift();
          }
        }
      }
    }
    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
    var _enabled = true;
    function setEnabled(enabled) {
      _enabled = !!enabled;
    }
    function isEnabled() {
      return _enabled;
    }
    function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
      var eventPriority = getEventPriority(domEventName);
      var listenerWrapper;
      switch (eventPriority) {
        case DiscreteEventPriority:
          listenerWrapper = dispatchDiscreteEvent;
          break;
        case ContinuousEventPriority:
          listenerWrapper = dispatchContinuousEvent;
          break;
        case DefaultEventPriority:
        default:
          listenerWrapper = dispatchEvent;
          break;
      }
      return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
    }
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
      var previousPriority = getCurrentUpdatePriority();
      var prevTransition = ReactCurrentBatchConfig.transition;
      ReactCurrentBatchConfig.transition = null;
      try {
        setCurrentUpdatePriority(DiscreteEventPriority);
        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
      } finally {
        setCurrentUpdatePriority(previousPriority);
        ReactCurrentBatchConfig.transition = prevTransition;
      }
    }
    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
      var previousPriority = getCurrentUpdatePriority();
      var prevTransition = ReactCurrentBatchConfig.transition;
      ReactCurrentBatchConfig.transition = null;
      try {
        setCurrentUpdatePriority(ContinuousEventPriority);
        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
      } finally {
        setCurrentUpdatePriority(previousPriority);
        ReactCurrentBatchConfig.transition = prevTransition;
      }
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      if (!_enabled) {
        return;
      }
      {
        dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
      }
    }
    function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
      if (blockedOn === null) {
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
        clearIfContinuousEvent(domEventName, nativeEvent);
        return;
      }
      if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
        nativeEvent.stopPropagation();
        return;
      }
      clearIfContinuousEvent(domEventName, nativeEvent);
      if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
        while (blockedOn !== null) {
          var fiber = getInstanceFromNode(blockedOn);
          if (fiber !== null) {
            attemptSynchronousHydration(fiber);
          }
          var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (nextBlockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
          }
          if (nextBlockedOn === blockedOn) {
            break;
          }
          blockedOn = nextBlockedOn;
        }
        if (blockedOn !== null) {
          nativeEvent.stopPropagation();
        }
        return;
      }
      dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
    }
    var return_targetInst = null;
    function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      return_targetInst = null;
      var nativeEventTarget = getEventTarget(nativeEvent);
      var targetInst = getClosestInstanceFromNode(nativeEventTarget);
      if (targetInst !== null) {
        var nearestMounted = getNearestMountedFiber(targetInst);
        if (nearestMounted === null) {
          targetInst = null;
        } else {
          var tag = nearestMounted.tag;
          if (tag === SuspenseComponent) {
            var instance2 = getSuspenseInstanceFromFiber(nearestMounted);
            if (instance2 !== null) {
              return instance2;
            }
            targetInst = null;
          } else if (tag === HostRoot) {
            var root2 = nearestMounted.stateNode;
            if (isRootDehydrated(root2)) {
              return getContainerFromFiber(nearestMounted);
            }
            targetInst = null;
          } else if (nearestMounted !== targetInst) {
            targetInst = null;
          }
        }
      }
      return_targetInst = targetInst;
      return null;
    }
    function getEventPriority(domEventName) {
      switch (domEventName) {
        case "cancel":
        case "click":
        case "close":
        case "contextmenu":
        case "copy":
        case "cut":
        case "auxclick":
        case "dblclick":
        case "dragend":
        case "dragstart":
        case "drop":
        case "focusin":
        case "focusout":
        case "input":
        case "invalid":
        case "keydown":
        case "keypress":
        case "keyup":
        case "mousedown":
        case "mouseup":
        case "paste":
        case "pause":
        case "play":
        case "pointercancel":
        case "pointerdown":
        case "pointerup":
        case "ratechange":
        case "reset":
        case "resize":
        case "seeked":
        case "submit":
        case "touchcancel":
        case "touchend":
        case "touchstart":
        case "volumechange":
        case "change":
        case "selectionchange":
        case "textInput":
        case "compositionstart":
        case "compositionend":
        case "compositionupdate":
        case "beforeblur":
        case "afterblur":
        case "beforeinput":
        case "blur":
        case "fullscreenchange":
        case "focus":
        case "hashchange":
        case "popstate":
        case "select":
        case "selectstart":
          return DiscreteEventPriority;
        case "drag":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "mousemove":
        case "mouseout":
        case "mouseover":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "scroll":
        case "toggle":
        case "touchmove":
        case "wheel":
        case "mouseenter":
        case "mouseleave":
        case "pointerenter":
        case "pointerleave":
          return ContinuousEventPriority;
        case "message": {
          var schedulerPriority = getCurrentPriorityLevel();
          switch (schedulerPriority) {
            case ImmediatePriority:
              return DiscreteEventPriority;
            case UserBlockingPriority:
              return ContinuousEventPriority;
            case NormalPriority:
            case LowPriority:
              return DefaultEventPriority;
            case IdlePriority:
              return IdleEventPriority;
            default:
              return DefaultEventPriority;
          }
        }
        default:
          return DefaultEventPriority;
      }
    }
    function addEventBubbleListener(target, eventType, listener) {
      target.addEventListener(eventType, listener, false);
      return listener;
    }
    function addEventCaptureListener(target, eventType, listener) {
      target.addEventListener(eventType, listener, true);
      return listener;
    }
    function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
      target.addEventListener(eventType, listener, {
        capture: true,
        passive
      });
      return listener;
    }
    function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
      target.addEventListener(eventType, listener, {
        passive
      });
      return listener;
    }
    var root = null;
    var startText = null;
    var fallbackText = null;
    function initialize(nativeEventTarget) {
      root = nativeEventTarget;
      startText = getText();
      return true;
    }
    function reset() {
      root = null;
      startText = null;
      fallbackText = null;
    }
    function getData() {
      if (fallbackText) {
        return fallbackText;
      }
      var start;
      var startValue = startText;
      var startLength = startValue.length;
      var end;
      var endValue = getText();
      var endLength = endValue.length;
      for (start = 0; start < startLength; start++) {
        if (startValue[start] !== endValue[start]) {
          break;
        }
      }
      var minEnd = startLength - start;
      for (end = 1; end <= minEnd; end++) {
        if (startValue[startLength - end] !== endValue[endLength - end]) {
          break;
        }
      }
      var sliceTail = end > 1 ? 1 - end : void 0;
      fallbackText = endValue.slice(start, sliceTail);
      return fallbackText;
    }
    function getText() {
      if ("value" in root) {
        return root.value;
      }
      return root.textContent;
    }
    function getEventCharCode(nativeEvent) {
      var charCode;
      var keyCode = nativeEvent.keyCode;
      if ("charCode" in nativeEvent) {
        charCode = nativeEvent.charCode;
        if (charCode === 0 && keyCode === 13) {
          charCode = 13;
        }
      } else {
        charCode = keyCode;
      }
      if (charCode === 10) {
        charCode = 13;
      }
      if (charCode >= 32 || charCode === 13) {
        return charCode;
      }
      return 0;
    }
    function functionThatReturnsTrue() {
      return true;
    }
    function functionThatReturnsFalse() {
      return false;
    }
    function createSyntheticEvent(Interface) {
      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
        this._reactName = reactName;
        this._targetInst = targetInst;
        this.type = reactEventType;
        this.nativeEvent = nativeEvent;
        this.target = nativeEventTarget;
        this.currentTarget = null;
        for (var _propName in Interface) {
          if (!Interface.hasOwnProperty(_propName)) {
            continue;
          }
          var normalize2 = Interface[_propName];
          if (normalize2) {
            this[_propName] = normalize2(nativeEvent);
          } else {
            this[_propName] = nativeEvent[_propName];
          }
        }
        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
        if (defaultPrevented) {
          this.isDefaultPrevented = functionThatReturnsTrue;
        } else {
          this.isDefaultPrevented = functionThatReturnsFalse;
        }
        this.isPropagationStopped = functionThatReturnsFalse;
        return this;
      }
      assign2(SyntheticBaseEvent.prototype, {
        preventDefault: function() {
          this.defaultPrevented = true;
          var event = this.nativeEvent;
          if (!event) {
            return;
          }
          if (event.preventDefault) {
            event.preventDefault();
          } else if (typeof event.returnValue !== "unknown") {
            event.returnValue = false;
          }
          this.isDefaultPrevented = functionThatReturnsTrue;
        },
        stopPropagation: function() {
          var event = this.nativeEvent;
          if (!event) {
            return;
          }
          if (event.stopPropagation) {
            event.stopPropagation();
          } else if (typeof event.cancelBubble !== "unknown") {
            event.cancelBubble = true;
          }
          this.isPropagationStopped = functionThatReturnsTrue;
        },
        /**
         * We release all dispatched `SyntheticEvent`s after each event loop, adding
         * them back into the pool. This allows a way to hold onto a reference that
         * won't be added back into the pool.
         */
        persist: function() {
        },
        /**
         * Checks if this event should be released back into the pool.
         *
         * @return {boolean} True if this should not be released, false otherwise.
         */
        isPersistent: functionThatReturnsTrue
      });
      return SyntheticBaseEvent;
    }
    var EventInterface = {
      eventPhase: 0,
      bubbles: 0,
      cancelable: 0,
      timeStamp: function(event) {
        return event.timeStamp || Date.now();
      },
      defaultPrevented: 0,
      isTrusted: 0
    };
    var SyntheticEvent = createSyntheticEvent(EventInterface);
    var UIEventInterface = assign2({}, EventInterface, {
      view: 0,
      detail: 0
    });
    var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
    var lastMovementX;
    var lastMovementY;
    var lastMouseEvent;
    function updateMouseMovementPolyfillState(event) {
      if (event !== lastMouseEvent) {
        if (lastMouseEvent && event.type === "mousemove") {
          lastMovementX = event.screenX - lastMouseEvent.screenX;
          lastMovementY = event.screenY - lastMouseEvent.screenY;
        } else {
          lastMovementX = 0;
          lastMovementY = 0;
        }
        lastMouseEvent = event;
      }
    }
    var MouseEventInterface = assign2({}, UIEventInterface, {
      screenX: 0,
      screenY: 0,
      clientX: 0,
      clientY: 0,
      pageX: 0,
      pageY: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      getModifierState: getEventModifierState,
      button: 0,
      buttons: 0,
      relatedTarget: function(event) {
        if (event.relatedTarget === void 0)
          return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
        return event.relatedTarget;
      },
      movementX: function(event) {
        if ("movementX" in event) {
          return event.movementX;
        }
        updateMouseMovementPolyfillState(event);
        return lastMovementX;
      },
      movementY: function(event) {
        if ("movementY" in event) {
          return event.movementY;
        }
        return lastMovementY;
      }
    });
    var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
    var DragEventInterface = assign2({}, MouseEventInterface, {
      dataTransfer: 0
    });
    var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
    var FocusEventInterface = assign2({}, UIEventInterface, {
      relatedTarget: 0
    });
    var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
    var AnimationEventInterface = assign2({}, EventInterface, {
      animationName: 0,
      elapsedTime: 0,
      pseudoElement: 0
    });
    var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
    var ClipboardEventInterface = assign2({}, EventInterface, {
      clipboardData: function(event) {
        return "clipboardData" in event ? event.clipboardData : window.clipboardData;
      }
    });
    var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
    var CompositionEventInterface = assign2({}, EventInterface, {
      data: 0
    });
    var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
    var SyntheticInputEvent = SyntheticCompositionEvent;
    var normalizeKey = {
      Esc: "Escape",
      Spacebar: " ",
      Left: "ArrowLeft",
      Up: "ArrowUp",
      Right: "ArrowRight",
      Down: "ArrowDown",
      Del: "Delete",
      Win: "OS",
      Menu: "ContextMenu",
      Apps: "ContextMenu",
      Scroll: "ScrollLock",
      MozPrintableKey: "Unidentified"
    };
    var translateToKey = {
      "8": "Backspace",
      "9": "Tab",
      "12": "Clear",
      "13": "Enter",
      "16": "Shift",
      "17": "Control",
      "18": "Alt",
      "19": "Pause",
      "20": "CapsLock",
      "27": "Escape",
      "32": " ",
      "33": "PageUp",
      "34": "PageDown",
      "35": "End",
      "36": "Home",
      "37": "ArrowLeft",
      "38": "ArrowUp",
      "39": "ArrowRight",
      "40": "ArrowDown",
      "45": "Insert",
      "46": "Delete",
      "112": "F1",
      "113": "F2",
      "114": "F3",
      "115": "F4",
      "116": "F5",
      "117": "F6",
      "118": "F7",
      "119": "F8",
      "120": "F9",
      "121": "F10",
      "122": "F11",
      "123": "F12",
      "144": "NumLock",
      "145": "ScrollLock",
      "224": "Meta"
    };
    function getEventKey(nativeEvent) {
      if (nativeEvent.key) {
        var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
        if (key !== "Unidentified") {
          return key;
        }
      }
      if (nativeEvent.type === "keypress") {
        var charCode = getEventCharCode(nativeEvent);
        return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
      }
      if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
        return translateToKey[nativeEvent.keyCode] || "Unidentified";
      }
      return "";
    }
    var modifierKeyToProp = {
      Alt: "altKey",
      Control: "ctrlKey",
      Meta: "metaKey",
      Shift: "shiftKey"
    };
    function modifierStateGetter(keyArg) {
      var syntheticEvent = this;
      var nativeEvent = syntheticEvent.nativeEvent;
      if (nativeEvent.getModifierState) {
        return nativeEvent.getModifierState(keyArg);
      }
      var keyProp = modifierKeyToProp[keyArg];
      return keyProp ? !!nativeEvent[keyProp] : false;
    }
    function getEventModifierState(nativeEvent) {
      return modifierStateGetter;
    }
    var KeyboardEventInterface = assign2({}, UIEventInterface, {
      key: getEventKey,
      code: 0,
      location: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      repeat: 0,
      locale: 0,
      getModifierState: getEventModifierState,
      // Legacy Interface
      charCode: function(event) {
        if (event.type === "keypress") {
          return getEventCharCode(event);
        }
        return 0;
      },
      keyCode: function(event) {
        if (event.type === "keydown" || event.type === "keyup") {
          return event.keyCode;
        }
        return 0;
      },
      which: function(event) {
        if (event.type === "keypress") {
          return getEventCharCode(event);
        }
        if (event.type === "keydown" || event.type === "keyup") {
          return event.keyCode;
        }
        return 0;
      }
    });
    var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
    var PointerEventInterface = assign2({}, MouseEventInterface, {
      pointerId: 0,
      width: 0,
      height: 0,
      pressure: 0,
      tangentialPressure: 0,
      tiltX: 0,
      tiltY: 0,
      twist: 0,
      pointerType: 0,
      isPrimary: 0
    });
    var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
    var TouchEventInterface = assign2({}, UIEventInterface, {
      touches: 0,
      targetTouches: 0,
      changedTouches: 0,
      altKey: 0,
      metaKey: 0,
      ctrlKey: 0,
      shiftKey: 0,
      getModifierState: getEventModifierState
    });
    var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
    var TransitionEventInterface = assign2({}, EventInterface, {
      propertyName: 0,
      elapsedTime: 0,
      pseudoElement: 0
    });
    var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
    var WheelEventInterface = assign2({}, MouseEventInterface, {
      deltaX: function(event) {
        return "deltaX" in event ? event.deltaX : (
          // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
          "wheelDeltaX" in event ? -event.wheelDeltaX : 0
        );
      },
      deltaY: function(event) {
        return "deltaY" in event ? event.deltaY : (
          // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
          "wheelDeltaY" in event ? -event.wheelDeltaY : (
            // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
            "wheelDelta" in event ? -event.wheelDelta : 0
          )
        );
      },
      deltaZ: 0,
      // Browsers without "deltaMode" is reporting in raw wheel delta where one
      // notch on the scroll is always +/- 120, roughly equivalent to pixels.
      // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
      // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
      deltaMode: 0
    });
    var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
    var END_KEYCODES = [9, 13, 27, 32];
    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
    var documentMode = null;
    if (canUseDOM && "documentMode" in document) {
      documentMode = document.documentMode;
    }
    var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
    function registerEvents() {
      registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
      registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
      registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
      registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
    }
    var hasSpaceKeypress = false;
    function isKeypressCommand(nativeEvent) {
      return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
      !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    function getCompositionEventType(domEventName) {
      switch (domEventName) {
        case "compositionstart":
          return "onCompositionStart";
        case "compositionend":
          return "onCompositionEnd";
        case "compositionupdate":
          return "onCompositionUpdate";
      }
    }
    function isFallbackCompositionStart(domEventName, nativeEvent) {
      return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
    }
    function isFallbackCompositionEnd(domEventName, nativeEvent) {
      switch (domEventName) {
        case "keyup":
          return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
        case "keydown":
          return nativeEvent.keyCode !== START_KEYCODE;
        case "keypress":
        case "mousedown":
        case "focusout":
          return true;
        default:
          return false;
      }
    }
    function getDataFromCustomEvent(nativeEvent) {
      var detail = nativeEvent.detail;
      if (typeof detail === "object" && "data" in detail) {
        return detail.data;
      }
      return null;
    }
    function isUsingKoreanIME(nativeEvent) {
      return nativeEvent.locale === "ko";
    }
    var isComposing = false;
    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
      var eventType;
      var fallbackData;
      if (canUseCompositionEvent) {
        eventType = getCompositionEventType(domEventName);
      } else if (!isComposing) {
        if (isFallbackCompositionStart(domEventName, nativeEvent)) {
          eventType = "onCompositionStart";
        }
      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
        eventType = "onCompositionEnd";
      }
      if (!eventType) {
        return null;
      }
      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
        if (!isComposing && eventType === "onCompositionStart") {
          isComposing = initialize(nativeEventTarget);
        } else if (eventType === "onCompositionEnd") {
          if (isComposing) {
            fallbackData = getData();
          }
        }
      }
      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
      if (listeners.length > 0) {
        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
        dispatchQueue.push({
          event,
          listeners
        });
        if (fallbackData) {
          event.data = fallbackData;
        } else {
          var customData = getDataFromCustomEvent(nativeEvent);
          if (customData !== null) {
            event.data = customData;
          }
        }
      }
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
      switch (domEventName) {
        case "compositionend":
          return getDataFromCustomEvent(nativeEvent);
        case "keypress":
          var which = nativeEvent.which;
          if (which !== SPACEBAR_CODE) {
            return null;
          }
          hasSpaceKeypress = true;
          return SPACEBAR_CHAR;
        case "textInput":
          var chars2 = nativeEvent.data;
          if (chars2 === SPACEBAR_CHAR && hasSpaceKeypress) {
            return null;
          }
          return chars2;
        default:
          return null;
      }
    }
    function getFallbackBeforeInputChars(domEventName, nativeEvent) {
      if (isComposing) {
        if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
          var chars2 = getData();
          reset();
          isComposing = false;
          return chars2;
        }
        return null;
      }
      switch (domEventName) {
        case "paste":
          return null;
        case "keypress":
          if (!isKeypressCommand(nativeEvent)) {
            if (nativeEvent.char && nativeEvent.char.length > 1) {
              return nativeEvent.char;
            } else if (nativeEvent.which) {
              return String.fromCharCode(nativeEvent.which);
            }
          }
          return null;
        case "compositionend":
          return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
        default:
          return null;
      }
    }
    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
      var chars2;
      if (canUseTextInputEvent) {
        chars2 = getNativeBeforeInputChars(domEventName, nativeEvent);
      } else {
        chars2 = getFallbackBeforeInputChars(domEventName, nativeEvent);
      }
      if (!chars2) {
        return null;
      }
      var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
      if (listeners.length > 0) {
        var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
        dispatchQueue.push({
          event,
          listeners
        });
        event.data = chars2;
      }
    }
    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    }
    var supportedInputTypes = {
      color: true,
      date: true,
      datetime: true,
      "datetime-local": true,
      email: true,
      month: true,
      number: true,
      password: true,
      range: true,
      search: true,
      tel: true,
      text: true,
      time: true,
      url: true,
      week: true
    };
    function isTextInputElement(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      if (nodeName === "input") {
        return !!supportedInputTypes[elem.type];
      }
      if (nodeName === "textarea") {
        return true;
      }
      return false;
    }
    function isEventSupported(eventNameSuffix) {
      if (!canUseDOM) {
        return false;
      }
      var eventName = "on" + eventNameSuffix;
      var isSupported2 = eventName in document;
      if (!isSupported2) {
        var element = document.createElement("div");
        element.setAttribute(eventName, "return;");
        isSupported2 = typeof element[eventName] === "function";
      }
      return isSupported2;
    }
    function registerEvents$1() {
      registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
      enqueueStateRestore(target);
      var listeners = accumulateTwoPhaseListeners(inst, "onChange");
      if (listeners.length > 0) {
        var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
        dispatchQueue.push({
          event,
          listeners
        });
      }
    }
    var activeElement = null;
    var activeElementInst = null;
    function shouldUseChangeEvent(elem) {
      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName === "select" || nodeName === "input" && elem.type === "file";
    }
    function manualDispatchChangeEvent(nativeEvent) {
      var dispatchQueue = [];
      createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
      batchedUpdates(runEventInBatch, dispatchQueue);
    }
    function runEventInBatch(dispatchQueue) {
      processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
      var targetNode = getNodeFromInstance(targetInst);
      if (updateValueIfChanged(targetNode)) {
        return targetInst;
      }
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
      if (domEventName === "change") {
        return targetInst;
      }
    }
    var isInputEventSupported = false;
    if (canUseDOM) {
      isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
    }
    function startWatchingForValueChange(target, targetInst) {
      activeElement = target;
      activeElementInst = targetInst;
      activeElement.attachEvent("onpropertychange", handlePropertyChange);
    }
    function stopWatchingForValueChange() {
      if (!activeElement) {
        return;
      }
      activeElement.detachEvent("onpropertychange", handlePropertyChange);
      activeElement = null;
      activeElementInst = null;
    }
    function handlePropertyChange(nativeEvent) {
      if (nativeEvent.propertyName !== "value") {
        return;
      }
      if (getInstIfValueChanged(activeElementInst)) {
        manualDispatchChangeEvent(nativeEvent);
      }
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
      if (domEventName === "focusin") {
        stopWatchingForValueChange();
        startWatchingForValueChange(target, targetInst);
      } else if (domEventName === "focusout") {
        stopWatchingForValueChange();
      }
    }
    function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
      if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
        return getInstIfValueChanged(activeElementInst);
      }
    }
    function shouldUseClickEvent(elem) {
      var nodeName = elem.nodeName;
      return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
      if (domEventName === "click") {
        return getInstIfValueChanged(targetInst);
      }
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
      if (domEventName === "input" || domEventName === "change") {
        return getInstIfValueChanged(targetInst);
      }
    }
    function handleControlledInputBlur(node2) {
      var state = node2._wrapperState;
      if (!state || !state.controlled || node2.type !== "number") {
        return;
      }
      {
        setDefaultValue(node2, "number", node2.value);
      }
    }
    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
      var getTargetInstFunc, handleEventFunc;
      if (shouldUseChangeEvent(targetNode)) {
        getTargetInstFunc = getTargetInstForChangeEvent;
      } else if (isTextInputElement(targetNode)) {
        if (isInputEventSupported) {
          getTargetInstFunc = getTargetInstForInputOrChangeEvent;
        } else {
          getTargetInstFunc = getTargetInstForInputEventPolyfill;
          handleEventFunc = handleEventsForInputEventPolyfill;
        }
      } else if (shouldUseClickEvent(targetNode)) {
        getTargetInstFunc = getTargetInstForClickEvent;
      }
      if (getTargetInstFunc) {
        var inst = getTargetInstFunc(domEventName, targetInst);
        if (inst) {
          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
          return;
        }
      }
      if (handleEventFunc) {
        handleEventFunc(domEventName, targetNode, targetInst);
      }
      if (domEventName === "focusout") {
        handleControlledInputBlur(targetNode);
      }
    }
    function registerEvents$2() {
      registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
      registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
      registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
      registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
    }
    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
      var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
      if (isOverEvent && !isReplayingEvent(nativeEvent)) {
        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
        if (related) {
          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
            return;
          }
        }
      }
      if (!isOutEvent && !isOverEvent) {
        return;
      }
      var win2;
      if (nativeEventTarget.window === nativeEventTarget) {
        win2 = nativeEventTarget;
      } else {
        var doc = nativeEventTarget.ownerDocument;
        if (doc) {
          win2 = doc.defaultView || doc.parentWindow;
        } else {
          win2 = window;
        }
      }
      var from2;
      var to;
      if (isOutEvent) {
        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
        from2 = targetInst;
        to = _related ? getClosestInstanceFromNode(_related) : null;
        if (to !== null) {
          var nearestMounted = getNearestMountedFiber(to);
          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
            to = null;
          }
        }
      } else {
        from2 = null;
        to = targetInst;
      }
      if (from2 === to) {
        return;
      }
      var SyntheticEventCtor = SyntheticMouseEvent;
      var leaveEventType = "onMouseLeave";
      var enterEventType = "onMouseEnter";
      var eventTypePrefix = "mouse";
      if (domEventName === "pointerout" || domEventName === "pointerover") {
        SyntheticEventCtor = SyntheticPointerEvent;
        leaveEventType = "onPointerLeave";
        enterEventType = "onPointerEnter";
        eventTypePrefix = "pointer";
      }
      var fromNode = from2 == null ? win2 : getNodeFromInstance(from2);
      var toNode = to == null ? win2 : getNodeFromInstance(to);
      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from2, nativeEvent, nativeEventTarget);
      leave.target = fromNode;
      leave.relatedTarget = toNode;
      var enter = null;
      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
      if (nativeTargetInst === targetInst) {
        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
        enterEvent.target = toNode;
        enterEvent.relatedTarget = fromNode;
        enter = enterEvent;
      }
      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from2, to);
    }
    function is(x, y) {
      return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
    }
    var objectIs = typeof Object.is === "function" ? Object.is : is;
    function shallowEqual(objA, objB) {
      if (objectIs(objA, objB)) {
        return true;
      }
      if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
        return false;
      }
      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) {
        return false;
      }
      for (var i = 0; i < keysA.length; i++) {
        var currentKey = keysA[i];
        if (!hasOwnProperty2.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
          return false;
        }
      }
      return true;
    }
    function getLeafNode(node2) {
      while (node2 && node2.firstChild) {
        node2 = node2.firstChild;
      }
      return node2;
    }
    function getSiblingNode(node2) {
      while (node2) {
        if (node2.nextSibling) {
          return node2.nextSibling;
        }
        node2 = node2.parentNode;
      }
    }
    function getNodeForCharacterOffset(root2, offset) {
      var node2 = getLeafNode(root2);
      var nodeStart = 0;
      var nodeEnd = 0;
      while (node2) {
        if (node2.nodeType === TEXT_NODE) {
          nodeEnd = nodeStart + node2.textContent.length;
          if (nodeStart <= offset && nodeEnd >= offset) {
            return {
              node: node2,
              offset: offset - nodeStart
            };
          }
          nodeStart = nodeEnd;
        }
        node2 = getLeafNode(getSiblingNode(node2));
      }
    }
    function getOffsets(outerNode) {
      var ownerDocument = outerNode.ownerDocument;
      var win2 = ownerDocument && ownerDocument.defaultView || window;
      var selection = win2.getSelection && win2.getSelection();
      if (!selection || selection.rangeCount === 0) {
        return null;
      }
      var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
      return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
      var length2 = 0;
      var start = -1;
      var end = -1;
      var indexWithinAnchor = 0;
      var indexWithinFocus = 0;
      var node2 = outerNode;
      var parentNode = null;
      outer:
        while (true) {
          var next2 = null;
          while (true) {
            if (node2 === anchorNode && (anchorOffset === 0 || node2.nodeType === TEXT_NODE)) {
              start = length2 + anchorOffset;
            }
            if (node2 === focusNode && (focusOffset === 0 || node2.nodeType === TEXT_NODE)) {
              end = length2 + focusOffset;
            }
            if (node2.nodeType === TEXT_NODE) {
              length2 += node2.nodeValue.length;
            }
            if ((next2 = node2.firstChild) === null) {
              break;
            }
            parentNode = node2;
            node2 = next2;
          }
          while (true) {
            if (node2 === outerNode) {
              break outer;
            }
            if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
              start = length2;
            }
            if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
              end = length2;
            }
            if ((next2 = node2.nextSibling) !== null) {
              break;
            }
            node2 = parentNode;
            parentNode = node2.parentNode;
          }
          node2 = next2;
        }
      if (start === -1 || end === -1) {
        return null;
      }
      return {
        start,
        end
      };
    }
    function setOffsets(node2, offsets) {
      var doc = node2.ownerDocument || document;
      var win2 = doc && doc.defaultView || window;
      if (!win2.getSelection) {
        return;
      }
      var selection = win2.getSelection();
      var length2 = node2.textContent.length;
      var start = Math.min(offsets.start, length2);
      var end = offsets.end === void 0 ? start : Math.min(offsets.end, length2);
      if (!selection.extend && start > end) {
        var temp = end;
        end = start;
        start = temp;
      }
      var startMarker = getNodeForCharacterOffset(node2, start);
      var endMarker = getNodeForCharacterOffset(node2, end);
      if (startMarker && endMarker) {
        if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
          return;
        }
        var range = doc.createRange();
        range.setStart(startMarker.node, startMarker.offset);
        selection.removeAllRanges();
        if (start > end) {
          selection.addRange(range);
          selection.extend(endMarker.node, endMarker.offset);
        } else {
          range.setEnd(endMarker.node, endMarker.offset);
          selection.addRange(range);
        }
      }
    }
    function isTextNode(node2) {
      return node2 && node2.nodeType === TEXT_NODE;
    }
    function containsNode(outerNode, innerNode) {
      if (!outerNode || !innerNode) {
        return false;
      } else if (outerNode === innerNode) {
        return true;
      } else if (isTextNode(outerNode)) {
        return false;
      } else if (isTextNode(innerNode)) {
        return containsNode(outerNode, innerNode.parentNode);
      } else if ("contains" in outerNode) {
        return outerNode.contains(innerNode);
      } else if (outerNode.compareDocumentPosition) {
        return !!(outerNode.compareDocumentPosition(innerNode) & 16);
      } else {
        return false;
      }
    }
    function isInDocument(node2) {
      return node2 && node2.ownerDocument && containsNode(node2.ownerDocument.documentElement, node2);
    }
    function isSameOriginFrame(iframe) {
      try {
        return typeof iframe.contentWindow.location.href === "string";
      } catch (err) {
        return false;
      }
    }
    function getActiveElementDeep() {
      var win2 = window;
      var element = getActiveElement();
      while (element instanceof win2.HTMLIFrameElement) {
        if (isSameOriginFrame(element)) {
          win2 = element.contentWindow;
        } else {
          return element;
        }
        element = getActiveElement(win2.document);
      }
      return element;
    }
    function hasSelectionCapabilities(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
    }
    function getSelectionInformation() {
      var focusedElem = getActiveElementDeep();
      return {
        focusedElem,
        selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
      };
    }
    function restoreSelection(priorSelectionInformation) {
      var curFocusedElem = getActiveElementDeep();
      var priorFocusedElem = priorSelectionInformation.focusedElem;
      var priorSelectionRange = priorSelectionInformation.selectionRange;
      if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
        if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
          setSelection(priorFocusedElem, priorSelectionRange);
        }
        var ancestors = [];
        var ancestor = priorFocusedElem;
        while (ancestor = ancestor.parentNode) {
          if (ancestor.nodeType === ELEMENT_NODE) {
            ancestors.push({
              element: ancestor,
              left: ancestor.scrollLeft,
              top: ancestor.scrollTop
            });
          }
        }
        if (typeof priorFocusedElem.focus === "function") {
          priorFocusedElem.focus();
        }
        for (var i = 0; i < ancestors.length; i++) {
          var info2 = ancestors[i];
          info2.element.scrollLeft = info2.left;
          info2.element.scrollTop = info2.top;
        }
      }
    }
    function getSelection(input) {
      var selection;
      if ("selectionStart" in input) {
        selection = {
          start: input.selectionStart,
          end: input.selectionEnd
        };
      } else {
        selection = getOffsets(input);
      }
      return selection || {
        start: 0,
        end: 0
      };
    }
    function setSelection(input, offsets) {
      var start = offsets.start;
      var end = offsets.end;
      if (end === void 0) {
        end = start;
      }
      if ("selectionStart" in input) {
        input.selectionStart = start;
        input.selectionEnd = Math.min(end, input.value.length);
      } else {
        setOffsets(input, offsets);
      }
    }
    var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
    function registerEvents$3() {
      registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
    }
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    function getSelection$1(node2) {
      if ("selectionStart" in node2 && hasSelectionCapabilities(node2)) {
        return {
          start: node2.selectionStart,
          end: node2.selectionEnd
        };
      } else {
        var win2 = node2.ownerDocument && node2.ownerDocument.defaultView || window;
        var selection = win2.getSelection();
        return {
          anchorNode: selection.anchorNode,
          anchorOffset: selection.anchorOffset,
          focusNode: selection.focusNode,
          focusOffset: selection.focusOffset
        };
      }
    }
    function getEventTargetDocument(eventTarget) {
      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
      var doc = getEventTargetDocument(nativeEventTarget);
      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
        return;
      }
      var currentSelection = getSelection$1(activeElement$1);
      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
        lastSelection = currentSelection;
        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
        if (listeners.length > 0) {
          var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event,
            listeners
          });
          event.target = activeElement$1;
        }
      }
    }
    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
      switch (domEventName) {
        case "focusin":
          if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
            activeElement$1 = targetNode;
            activeElementInst$1 = targetInst;
            lastSelection = null;
          }
          break;
        case "focusout":
          activeElement$1 = null;
          activeElementInst$1 = null;
          lastSelection = null;
          break;
        case "mousedown":
          mouseDown = true;
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          mouseDown = false;
          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          break;
        case "selectionchange":
          if (skipSelectionChangeEvent) {
            break;
          }
        case "keydown":
        case "keyup":
          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
      }
    }
    function makePrefixMap(styleProp, eventName) {
      var prefixes2 = {};
      prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
      prefixes2["Webkit" + styleProp] = "webkit" + eventName;
      prefixes2["Moz" + styleProp] = "moz" + eventName;
      return prefixes2;
    }
    var vendorPrefixes = {
      animationend: makePrefixMap("Animation", "AnimationEnd"),
      animationiteration: makePrefixMap("Animation", "AnimationIteration"),
      animationstart: makePrefixMap("Animation", "AnimationStart"),
      transitionend: makePrefixMap("Transition", "TransitionEnd")
    };
    var prefixedEventNames = {};
    var style = {};
    if (canUseDOM) {
      style = document.createElement("div").style;
      if (!("AnimationEvent" in window)) {
        delete vendorPrefixes.animationend.animation;
        delete vendorPrefixes.animationiteration.animation;
        delete vendorPrefixes.animationstart.animation;
      }
      if (!("TransitionEvent" in window)) {
        delete vendorPrefixes.transitionend.transition;
      }
    }
    function getVendorPrefixedEventName(eventName) {
      if (prefixedEventNames[eventName]) {
        return prefixedEventNames[eventName];
      } else if (!vendorPrefixes[eventName]) {
        return eventName;
      }
      var prefixMap = vendorPrefixes[eventName];
      for (var styleProp in prefixMap) {
        if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
          return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
      }
      return eventName;
    }
    var ANIMATION_END = getVendorPrefixedEventName("animationend");
    var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
    var ANIMATION_START = getVendorPrefixedEventName("animationstart");
    var TRANSITION_END = getVendorPrefixedEventName("transitionend");
    var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
    var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
    function registerSimpleEvent(domEventName, reactName) {
      topLevelEventsToReactNames.set(domEventName, reactName);
      registerTwoPhaseEvent(reactName, [domEventName]);
    }
    function registerSimpleEvents() {
      for (var i = 0; i < simpleEventPluginEvents.length; i++) {
        var eventName = simpleEventPluginEvents[i];
        var domEventName = eventName.toLowerCase();
        var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
        registerSimpleEvent(domEventName, "on" + capitalizedEvent);
      }
      registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
      registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
      registerSimpleEvent(ANIMATION_START, "onAnimationStart");
      registerSimpleEvent("dblclick", "onDoubleClick");
      registerSimpleEvent("focusin", "onFocus");
      registerSimpleEvent("focusout", "onBlur");
      registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
    }
    function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var reactName = topLevelEventsToReactNames.get(domEventName);
      if (reactName === void 0) {
        return;
      }
      var SyntheticEventCtor = SyntheticEvent;
      var reactEventType = domEventName;
      switch (domEventName) {
        case "keypress":
          if (getEventCharCode(nativeEvent) === 0) {
            return;
          }
        case "keydown":
        case "keyup":
          SyntheticEventCtor = SyntheticKeyboardEvent;
          break;
        case "focusin":
          reactEventType = "focus";
          SyntheticEventCtor = SyntheticFocusEvent;
          break;
        case "focusout":
          reactEventType = "blur";
          SyntheticEventCtor = SyntheticFocusEvent;
          break;
        case "beforeblur":
        case "afterblur":
          SyntheticEventCtor = SyntheticFocusEvent;
          break;
        case "click":
          if (nativeEvent.button === 2) {
            return;
          }
        case "auxclick":
        case "dblclick":
        case "mousedown":
        case "mousemove":
        case "mouseup":
        case "mouseout":
        case "mouseover":
        case "contextmenu":
          SyntheticEventCtor = SyntheticMouseEvent;
          break;
        case "drag":
        case "dragend":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "dragstart":
        case "drop":
          SyntheticEventCtor = SyntheticDragEvent;
          break;
        case "touchcancel":
        case "touchend":
        case "touchmove":
        case "touchstart":
          SyntheticEventCtor = SyntheticTouchEvent;
          break;
        case ANIMATION_END:
        case ANIMATION_ITERATION:
        case ANIMATION_START:
          SyntheticEventCtor = SyntheticAnimationEvent;
          break;
        case TRANSITION_END:
          SyntheticEventCtor = SyntheticTransitionEvent;
          break;
        case "scroll":
          SyntheticEventCtor = SyntheticUIEvent;
          break;
        case "wheel":
          SyntheticEventCtor = SyntheticWheelEvent;
          break;
        case "copy":
        case "cut":
        case "paste":
          SyntheticEventCtor = SyntheticClipboardEvent;
          break;
        case "gotpointercapture":
        case "lostpointercapture":
        case "pointercancel":
        case "pointerdown":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "pointerup":
          SyntheticEventCtor = SyntheticPointerEvent;
          break;
      }
      var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
      {
        var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
        // nonDelegatedEvents list in DOMPluginEventSystem.
        // Then we can remove this special list.
        // This is a breaking change that can wait until React 18.
        domEventName === "scroll";
        var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
        if (_listeners.length > 0) {
          var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event: _event,
            listeners: _listeners
          });
        }
      }
    }
    registerSimpleEvents();
    registerEvents$2();
    registerEvents$1();
    registerEvents$3();
    registerEvents();
    function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
      var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
      if (shouldProcessPolyfillPlugins) {
        extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      }
    }
    var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
    var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
    function executeDispatch(event, listener, currentTarget) {
      var type = event.type || "unknown-event";
      event.currentTarget = currentTarget;
      invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
      event.currentTarget = null;
    }
    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
      var previousInstance;
      if (inCapturePhase) {
        for (var i = dispatchListeners.length - 1; i >= 0; i--) {
          var _dispatchListeners$i = dispatchListeners[i], instance2 = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
          if (instance2 !== previousInstance && event.isPropagationStopped()) {
            return;
          }
          executeDispatch(event, listener, currentTarget);
          previousInstance = instance2;
        }
      } else {
        for (var _i = 0; _i < dispatchListeners.length; _i++) {
          var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
          if (_instance !== previousInstance && event.isPropagationStopped()) {
            return;
          }
          executeDispatch(event, _listener, _currentTarget);
          previousInstance = _instance;
        }
      }
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
      var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
      for (var i = 0; i < dispatchQueue.length; i++) {
        var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
        processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
      }
      rethrowCaughtError();
    }
    function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
      var nativeEventTarget = getEventTarget(nativeEvent);
      var dispatchQueue = [];
      extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
      processDispatchQueue(dispatchQueue, eventSystemFlags);
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
      {
        if (!nonDelegatedEvents.has(domEventName)) {
          error2('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
        }
      }
      var isCapturePhaseListener = false;
      var listenerSet = getEventListenerSet(targetElement);
      var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
      if (!listenerSet.has(listenerSetKey)) {
        addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
        listenerSet.add(listenerSetKey);
      }
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
      {
        if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
          error2('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
        }
      }
      var eventSystemFlags = 0;
      if (isCapturePhaseListener) {
        eventSystemFlags |= IS_CAPTURE_PHASE;
      }
      addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
    }
    var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
    function listenToAllSupportedEvents(rootContainerElement) {
      if (!rootContainerElement[listeningMarker]) {
        rootContainerElement[listeningMarker] = true;
        allNativeEvents.forEach(function(domEventName) {
          if (domEventName !== "selectionchange") {
            if (!nonDelegatedEvents.has(domEventName)) {
              listenToNativeEvent(domEventName, false, rootContainerElement);
            }
            listenToNativeEvent(domEventName, true, rootContainerElement);
          }
        });
        var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        if (ownerDocument !== null) {
          if (!ownerDocument[listeningMarker]) {
            ownerDocument[listeningMarker] = true;
            listenToNativeEvent("selectionchange", false, ownerDocument);
          }
        }
      }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
      var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
      var isPassiveListener = void 0;
      if (passiveBrowserEventsSupported) {
        if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
          isPassiveListener = true;
        }
      }
      targetContainer = targetContainer;
      if (isCapturePhaseListener) {
        if (isPassiveListener !== void 0) {
          addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        } else {
          addEventCaptureListener(targetContainer, domEventName, listener);
        }
      } else {
        if (isPassiveListener !== void 0) {
          addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        } else {
          addEventBubbleListener(targetContainer, domEventName, listener);
        }
      }
    }
    function isMatchingRootContainer(grandContainer, targetContainer) {
      return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
      var ancestorInst = targetInst;
      if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
        var targetContainerNode = targetContainer;
        if (targetInst !== null) {
          var node2 = targetInst;
          mainLoop:
            while (true) {
              if (node2 === null) {
                return;
              }
              var nodeTag = node2.tag;
              if (nodeTag === HostRoot || nodeTag === HostPortal) {
                var container = node2.stateNode.containerInfo;
                if (isMatchingRootContainer(container, targetContainerNode)) {
                  break;
                }
                if (nodeTag === HostPortal) {
                  var grandNode = node2.return;
                  while (grandNode !== null) {
                    var grandTag = grandNode.tag;
                    if (grandTag === HostRoot || grandTag === HostPortal) {
                      var grandContainer = grandNode.stateNode.containerInfo;
                      if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                        return;
                      }
                    }
                    grandNode = grandNode.return;
                  }
                }
                while (container !== null) {
                  var parentNode = getClosestInstanceFromNode(container);
                  if (parentNode === null) {
                    return;
                  }
                  var parentTag = parentNode.tag;
                  if (parentTag === HostComponent || parentTag === HostText) {
                    node2 = ancestorInst = parentNode;
                    continue mainLoop;
                  }
                  container = container.parentNode;
                }
              }
              node2 = node2.return;
            }
        }
      }
      batchedUpdates(function() {
        return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
      });
    }
    function createDispatchListener(instance2, listener, currentTarget) {
      return {
        instance: instance2,
        listener,
        currentTarget
      };
    }
    function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
      var captureName = reactName !== null ? reactName + "Capture" : null;
      var reactEventName = inCapturePhase ? captureName : reactName;
      var listeners = [];
      var instance2 = targetFiber;
      var lastHostComponent = null;
      while (instance2 !== null) {
        var _instance2 = instance2, stateNode = _instance2.stateNode, tag = _instance2.tag;
        if (tag === HostComponent && stateNode !== null) {
          lastHostComponent = stateNode;
          if (reactEventName !== null) {
            var listener = getListener(instance2, reactEventName);
            if (listener != null) {
              listeners.push(createDispatchListener(instance2, listener, lastHostComponent));
            }
          }
        }
        if (accumulateTargetOnly) {
          break;
        }
        instance2 = instance2.return;
      }
      return listeners;
    }
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
      var captureName = reactName + "Capture";
      var listeners = [];
      var instance2 = targetFiber;
      while (instance2 !== null) {
        var _instance3 = instance2, stateNode = _instance3.stateNode, tag = _instance3.tag;
        if (tag === HostComponent && stateNode !== null) {
          var currentTarget = stateNode;
          var captureListener = getListener(instance2, captureName);
          if (captureListener != null) {
            listeners.unshift(createDispatchListener(instance2, captureListener, currentTarget));
          }
          var bubbleListener = getListener(instance2, reactName);
          if (bubbleListener != null) {
            listeners.push(createDispatchListener(instance2, bubbleListener, currentTarget));
          }
        }
        instance2 = instance2.return;
      }
      return listeners;
    }
    function getParent2(inst) {
      if (inst === null) {
        return null;
      }
      do {
        inst = inst.return;
      } while (inst && inst.tag !== HostComponent);
      if (inst) {
        return inst;
      }
      return null;
    }
    function getLowestCommonAncestor(instA, instB) {
      var nodeA = instA;
      var nodeB = instB;
      var depthA = 0;
      for (var tempA = nodeA; tempA; tempA = getParent2(tempA)) {
        depthA++;
      }
      var depthB = 0;
      for (var tempB = nodeB; tempB; tempB = getParent2(tempB)) {
        depthB++;
      }
      while (depthA - depthB > 0) {
        nodeA = getParent2(nodeA);
        depthA--;
      }
      while (depthB - depthA > 0) {
        nodeB = getParent2(nodeB);
        depthB--;
      }
      var depth = depthA;
      while (depth--) {
        if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
          return nodeA;
        }
        nodeA = getParent2(nodeA);
        nodeB = getParent2(nodeB);
      }
      return null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
      var registrationName = event._reactName;
      var listeners = [];
      var instance2 = target;
      while (instance2 !== null) {
        if (instance2 === common) {
          break;
        }
        var _instance4 = instance2, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
        if (alternate !== null && alternate === common) {
          break;
        }
        if (tag === HostComponent && stateNode !== null) {
          var currentTarget = stateNode;
          if (inCapturePhase) {
            var captureListener = getListener(instance2, registrationName);
            if (captureListener != null) {
              listeners.unshift(createDispatchListener(instance2, captureListener, currentTarget));
            }
          } else if (!inCapturePhase) {
            var bubbleListener = getListener(instance2, registrationName);
            if (bubbleListener != null) {
              listeners.push(createDispatchListener(instance2, bubbleListener, currentTarget));
            }
          }
        }
        instance2 = instance2.return;
      }
      if (listeners.length !== 0) {
        dispatchQueue.push({
          event,
          listeners
        });
      }
    }
    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from2, to) {
      var common = from2 && to ? getLowestCommonAncestor(from2, to) : null;
      if (from2 !== null) {
        accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from2, common, false);
      }
      if (to !== null && enterEvent !== null) {
        accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
      }
    }
    function getListenerSetKey(domEventName, capture) {
      return domEventName + "__" + (capture ? "capture" : "bubble");
    }
    var didWarnInvalidHydration = false;
    var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
    var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
    var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
    var AUTOFOCUS = "autoFocus";
    var CHILDREN = "children";
    var STYLE = "style";
    var HTML$1 = "__html";
    var warnedUnknownTags;
    var validatePropertiesInDevelopment;
    var warnForPropDifference;
    var warnForExtraAttributes;
    var warnForInvalidEventListener;
    var canDiffStyleForHydrationWarning;
    var normalizeHTML;
    {
      warnedUnknownTags = {
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
      };
      validatePropertiesInDevelopment = function(type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props, {
          registrationNameDependencies,
          possibleRegistrationNames
        });
      };
      canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
      warnForPropDifference = function(propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) {
          return;
        }
        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
        if (normalizedServerValue === normalizedClientValue) {
          return;
        }
        didWarnInvalidHydration = true;
        error2("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
      };
      warnForExtraAttributes = function(attributeNames) {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function(name) {
          names.push(name);
        });
        error2("Extra attributes from the server: %s", names);
      };
      warnForInvalidEventListener = function(registrationName, listener) {
        if (listener === false) {
          error2("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
        } else {
          error2("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
        }
      };
      normalizeHTML = function(parent, html) {
        var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
      };
    }
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
    function normalizeMarkupForTextOrAttribute(markup) {
      {
        checkHtmlStringCoercion(markup);
      }
      var markupString = typeof markup === "string" ? markup : "" + markup;
      return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
    }
    function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
      var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
      var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
      if (normalizedServerText === normalizedClientText) {
        return;
      }
      if (shouldWarnDev) {
        {
          if (!didWarnInvalidHydration) {
            didWarnInvalidHydration = true;
            error2('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
          }
        }
      }
      if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
        throw new Error("Text content does not match server-rendered HTML.");
      }
    }
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
      return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function noop2() {
    }
    function trapClickOnNonInteractiveElement(node2) {
      node2.onclick = noop2;
    }
    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
      for (var propKey in nextProps) {
        if (!nextProps.hasOwnProperty(propKey)) {
          continue;
        }
        var nextProp = nextProps[propKey];
        if (propKey === STYLE) {
          {
            if (nextProp) {
              Object.freeze(nextProp);
            }
          }
          setValueForStyles(domElement, nextProp);
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
          if (nextHtml != null) {
            setInnerHTML(domElement, nextHtml);
          }
        } else if (propKey === CHILDREN) {
          if (typeof nextProp === "string") {
            var canSetTextContent = tag !== "textarea" || nextProp !== "";
            if (canSetTextContent) {
              setTextContent(domElement, nextProp);
            }
          } else if (typeof nextProp === "number") {
            setTextContent(domElement, "" + nextProp);
          }
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
          ;
        else if (propKey === AUTOFOCUS)
          ;
        else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (typeof nextProp !== "function") {
              warnForInvalidEventListener(propKey, nextProp);
            }
            if (propKey === "onScroll") {
              listenToNonDelegatedEvent("scroll", domElement);
            }
          }
        } else if (nextProp != null) {
          setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
      }
    }
    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
      for (var i = 0; i < updatePayload.length; i += 2) {
        var propKey = updatePayload[i];
        var propValue = updatePayload[i + 1];
        if (propKey === STYLE) {
          setValueForStyles(domElement, propValue);
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          setInnerHTML(domElement, propValue);
        } else if (propKey === CHILDREN) {
          setTextContent(domElement, propValue);
        } else {
          setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
      }
    }
    function createElement(type, props, rootContainerElement, parentNamespace) {
      var isCustomComponentTag;
      var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
      var domElement;
      var namespaceURI = parentNamespace;
      if (namespaceURI === HTML_NAMESPACE) {
        namespaceURI = getIntrinsicNamespace(type);
      }
      if (namespaceURI === HTML_NAMESPACE) {
        {
          isCustomComponentTag = isCustomComponent(type, props);
          if (!isCustomComponentTag && type !== type.toLowerCase()) {
            error2("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
          }
        }
        if (type === "script") {
          var div = ownerDocument.createElement("div");
          div.innerHTML = "<script><\/script>";
          var firstChild = div.firstChild;
          domElement = div.removeChild(firstChild);
        } else if (typeof props.is === "string") {
          domElement = ownerDocument.createElement(type, {
            is: props.is
          });
        } else {
          domElement = ownerDocument.createElement(type);
          if (type === "select") {
            var node2 = domElement;
            if (props.multiple) {
              node2.multiple = true;
            } else if (props.size) {
              node2.size = props.size;
            }
          }
        }
      } else {
        domElement = ownerDocument.createElementNS(namespaceURI, type);
      }
      {
        if (namespaceURI === HTML_NAMESPACE) {
          if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty2.call(warnedUnknownTags, type)) {
            warnedUnknownTags[type] = true;
            error2("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
          }
        }
      }
      return domElement;
    }
    function createTextNode(text, rootContainerElement) {
      return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }
    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
      var isCustomComponentTag = isCustomComponent(tag, rawProps);
      {
        validatePropertiesInDevelopment(tag, rawProps);
      }
      var props;
      switch (tag) {
        case "dialog":
          listenToNonDelegatedEvent("cancel", domElement);
          listenToNonDelegatedEvent("close", domElement);
          props = rawProps;
          break;
        case "iframe":
        case "object":
        case "embed":
          listenToNonDelegatedEvent("load", domElement);
          props = rawProps;
          break;
        case "video":
        case "audio":
          for (var i = 0; i < mediaEventTypes.length; i++) {
            listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
          }
          props = rawProps;
          break;
        case "source":
          listenToNonDelegatedEvent("error", domElement);
          props = rawProps;
          break;
        case "img":
        case "image":
        case "link":
          listenToNonDelegatedEvent("error", domElement);
          listenToNonDelegatedEvent("load", domElement);
          props = rawProps;
          break;
        case "details":
          listenToNonDelegatedEvent("toggle", domElement);
          props = rawProps;
          break;
        case "input":
          initWrapperState(domElement, rawProps);
          props = getHostProps(domElement, rawProps);
          listenToNonDelegatedEvent("invalid", domElement);
          break;
        case "option":
          validateProps(domElement, rawProps);
          props = rawProps;
          break;
        case "select":
          initWrapperState$1(domElement, rawProps);
          props = getHostProps$1(domElement, rawProps);
          listenToNonDelegatedEvent("invalid", domElement);
          break;
        case "textarea":
          initWrapperState$2(domElement, rawProps);
          props = getHostProps$2(domElement, rawProps);
          listenToNonDelegatedEvent("invalid", domElement);
          break;
        default:
          props = rawProps;
      }
      assertValidProps(tag, props);
      setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
      switch (tag) {
        case "input":
          track(domElement);
          postMountWrapper(domElement, rawProps, false);
          break;
        case "textarea":
          track(domElement);
          postMountWrapper$3(domElement);
          break;
        case "option":
          postMountWrapper$1(domElement, rawProps);
          break;
        case "select":
          postMountWrapper$2(domElement, rawProps);
          break;
        default:
          if (typeof props.onClick === "function") {
            trapClickOnNonInteractiveElement(domElement);
          }
          break;
      }
    }
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
      {
        validatePropertiesInDevelopment(tag, nextRawProps);
      }
      var updatePayload = null;
      var lastProps;
      var nextProps;
      switch (tag) {
        case "input":
          lastProps = getHostProps(domElement, lastRawProps);
          nextProps = getHostProps(domElement, nextRawProps);
          updatePayload = [];
          break;
        case "select":
          lastProps = getHostProps$1(domElement, lastRawProps);
          nextProps = getHostProps$1(domElement, nextRawProps);
          updatePayload = [];
          break;
        case "textarea":
          lastProps = getHostProps$2(domElement, lastRawProps);
          nextProps = getHostProps$2(domElement, nextRawProps);
          updatePayload = [];
          break;
        default:
          lastProps = lastRawProps;
          nextProps = nextRawProps;
          if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
            trapClickOnNonInteractiveElement(domElement);
          }
          break;
      }
      assertValidProps(tag, nextProps);
      var propKey;
      var styleName;
      var styleUpdates = null;
      for (propKey in lastProps) {
        if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
          continue;
        }
        if (propKey === STYLE) {
          var lastStyle = lastProps[propKey];
          for (styleName in lastStyle) {
            if (lastStyle.hasOwnProperty(styleName)) {
              if (!styleUpdates) {
                styleUpdates = {};
              }
              styleUpdates[styleName] = "";
            }
          }
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
          ;
        else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
          ;
        else if (propKey === AUTOFOCUS)
          ;
        else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          if (!updatePayload) {
            updatePayload = [];
          }
        } else {
          (updatePayload = updatePayload || []).push(propKey, null);
        }
      }
      for (propKey in nextProps) {
        var nextProp = nextProps[propKey];
        var lastProp = lastProps != null ? lastProps[propKey] : void 0;
        if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
          continue;
        }
        if (propKey === STYLE) {
          {
            if (nextProp) {
              Object.freeze(nextProp);
            }
          }
          if (lastProp) {
            for (styleName in lastProp) {
              if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }
                styleUpdates[styleName] = "";
              }
            }
            for (styleName in nextProp) {
              if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }
                styleUpdates[styleName] = nextProp[styleName];
              }
            }
          } else {
            if (!styleUpdates) {
              if (!updatePayload) {
                updatePayload = [];
              }
              updatePayload.push(propKey, styleUpdates);
            }
            styleUpdates = nextProp;
          }
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
          var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
          if (nextHtml != null) {
            if (lastHtml !== nextHtml) {
              (updatePayload = updatePayload || []).push(propKey, nextHtml);
            }
          }
        } else if (propKey === CHILDREN) {
          if (typeof nextProp === "string" || typeof nextProp === "number") {
            (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
          }
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
          ;
        else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (typeof nextProp !== "function") {
              warnForInvalidEventListener(propKey, nextProp);
            }
            if (propKey === "onScroll") {
              listenToNonDelegatedEvent("scroll", domElement);
            }
          }
          if (!updatePayload && lastProp !== nextProp) {
            updatePayload = [];
          }
        } else {
          (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
      }
      if (styleUpdates) {
        {
          validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
        }
        (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
      }
      return updatePayload;
    }
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
      if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
        updateChecked(domElement, nextRawProps);
      }
      var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
      var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
      updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
      switch (tag) {
        case "input":
          updateWrapper(domElement, nextRawProps);
          break;
        case "textarea":
          updateWrapper$1(domElement, nextRawProps);
          break;
        case "select":
          postUpdateWrapper(domElement, nextRawProps);
          break;
      }
    }
    function getPossibleStandardName(propName) {
      {
        var lowerCasedName = propName.toLowerCase();
        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          return null;
        }
        return possibleStandardNames[lowerCasedName] || null;
      }
    }
    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
      var isCustomComponentTag;
      var extraAttributeNames;
      {
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
      }
      switch (tag) {
        case "dialog":
          listenToNonDelegatedEvent("cancel", domElement);
          listenToNonDelegatedEvent("close", domElement);
          break;
        case "iframe":
        case "object":
        case "embed":
          listenToNonDelegatedEvent("load", domElement);
          break;
        case "video":
        case "audio":
          for (var i = 0; i < mediaEventTypes.length; i++) {
            listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
          }
          break;
        case "source":
          listenToNonDelegatedEvent("error", domElement);
          break;
        case "img":
        case "image":
        case "link":
          listenToNonDelegatedEvent("error", domElement);
          listenToNonDelegatedEvent("load", domElement);
          break;
        case "details":
          listenToNonDelegatedEvent("toggle", domElement);
          break;
        case "input":
          initWrapperState(domElement, rawProps);
          listenToNonDelegatedEvent("invalid", domElement);
          break;
        case "option":
          validateProps(domElement, rawProps);
          break;
        case "select":
          initWrapperState$1(domElement, rawProps);
          listenToNonDelegatedEvent("invalid", domElement);
          break;
        case "textarea":
          initWrapperState$2(domElement, rawProps);
          listenToNonDelegatedEvent("invalid", domElement);
          break;
      }
      assertValidProps(tag, rawProps);
      {
        extraAttributeNames = /* @__PURE__ */ new Set();
        var attributes = domElement.attributes;
        for (var _i = 0; _i < attributes.length; _i++) {
          var name = attributes[_i].name.toLowerCase();
          switch (name) {
            case "value":
              break;
            case "checked":
              break;
            case "selected":
              break;
            default:
              extraAttributeNames.add(attributes[_i].name);
          }
        }
      }
      var updatePayload = null;
      for (var propKey in rawProps) {
        if (!rawProps.hasOwnProperty(propKey)) {
          continue;
        }
        var nextProp = rawProps[propKey];
        if (propKey === CHILDREN) {
          if (typeof nextProp === "string") {
            if (domElement.textContent !== nextProp) {
              if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
              }
              updatePayload = [CHILDREN, nextProp];
            }
          } else if (typeof nextProp === "number") {
            if (domElement.textContent !== "" + nextProp) {
              if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
              }
              updatePayload = [CHILDREN, "" + nextProp];
            }
          }
        } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (typeof nextProp !== "function") {
              warnForInvalidEventListener(propKey, nextProp);
            }
            if (propKey === "onScroll") {
              listenToNonDelegatedEvent("scroll", domElement);
            }
          }
        } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
        typeof isCustomComponentTag === "boolean") {
          var serverValue = void 0;
          var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
          if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
            ;
          else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
          // TODO: Only ignore them on controlled tags.
          propKey === "value" || propKey === "checked" || propKey === "selected")
            ;
          else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var serverHTML = domElement.innerHTML;
            var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
            if (nextHtml != null) {
              var expectedHTML = normalizeHTML(domElement, nextHtml);
              if (expectedHTML !== serverHTML) {
                warnForPropDifference(propKey, serverHTML, expectedHTML);
              }
            }
          } else if (propKey === STYLE) {
            extraAttributeNames.delete(propKey);
            if (canDiffStyleForHydrationWarning) {
              var expectedStyle = createDangerousStringForStyles(nextProp);
              serverValue = domElement.getAttribute("style");
              if (expectedStyle !== serverValue) {
                warnForPropDifference(propKey, serverValue, expectedStyle);
              }
            }
          } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
            extraAttributeNames.delete(propKey.toLowerCase());
            serverValue = getValueForAttribute(domElement, propKey, nextProp);
            if (nextProp !== serverValue) {
              warnForPropDifference(propKey, serverValue, nextProp);
            }
          } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
            var isMismatchDueToBadCasing = false;
            if (propertyInfo !== null) {
              extraAttributeNames.delete(propertyInfo.attributeName);
              serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
            } else {
              var ownNamespace = parentNamespace;
              if (ownNamespace === HTML_NAMESPACE) {
                ownNamespace = getIntrinsicNamespace(tag);
              }
              if (ownNamespace === HTML_NAMESPACE) {
                extraAttributeNames.delete(propKey.toLowerCase());
              } else {
                var standardName = getPossibleStandardName(propKey);
                if (standardName !== null && standardName !== propKey) {
                  isMismatchDueToBadCasing = true;
                  extraAttributeNames.delete(standardName);
                }
                extraAttributeNames.delete(propKey);
              }
              serverValue = getValueForAttribute(domElement, propKey, nextProp);
            }
            var dontWarnCustomElement = enableCustomElementPropertySupport;
            if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
              warnForPropDifference(propKey, serverValue, nextProp);
            }
          }
        }
      }
      {
        if (shouldWarnDev) {
          if (
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
          ) {
            warnForExtraAttributes(extraAttributeNames);
          }
        }
      }
      switch (tag) {
        case "input":
          track(domElement);
          postMountWrapper(domElement, rawProps, true);
          break;
        case "textarea":
          track(domElement);
          postMountWrapper$3(domElement);
          break;
        case "select":
        case "option":
          break;
        default:
          if (typeof rawProps.onClick === "function") {
            trapClickOnNonInteractiveElement(domElement);
          }
          break;
      }
      return updatePayload;
    }
    function diffHydratedText(textNode, text, isConcurrentMode) {
      var isDifferent = textNode.nodeValue !== text;
      return isDifferent;
    }
    function warnForDeletedHydratableElement(parentNode, child) {
      {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        error2("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
      }
    }
    function warnForDeletedHydratableText(parentNode, child) {
      {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        error2('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
      }
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
      {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        error2("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
      }
    }
    function warnForInsertedHydratedText(parentNode, text) {
      {
        if (text === "") {
          return;
        }
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        error2('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
      }
    }
    function restoreControlledState$3(domElement, tag, props) {
      switch (tag) {
        case "input":
          restoreControlledState(domElement, props);
          return;
        case "textarea":
          restoreControlledState$2(domElement, props);
          return;
        case "select":
          restoreControlledState$1(domElement, props);
          return;
      }
    }
    var validateDOMNesting = function() {
    };
    var updatedAncestorInfo = function() {
    };
    {
      var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
      var inScopeTags = [
        "applet",
        "caption",
        "html",
        "table",
        "td",
        "th",
        "marquee",
        "object",
        "template",
        // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
        // TODO: Distinguish by namespace here -- for <title>, including it here
        // errs on the side of fewer warnings
        "foreignObject",
        "desc",
        "title"
      ];
      var buttonScopeTags = inScopeTags.concat(["button"]);
      var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
      var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
      };
      updatedAncestorInfo = function(oldInfo, tag) {
        var ancestorInfo = assign2({}, oldInfo || emptyAncestorInfo);
        var info2 = {
          tag
        };
        if (inScopeTags.indexOf(tag) !== -1) {
          ancestorInfo.aTagInScope = null;
          ancestorInfo.buttonTagInScope = null;
          ancestorInfo.nobrTagInScope = null;
        }
        if (buttonScopeTags.indexOf(tag) !== -1) {
          ancestorInfo.pTagInButtonScope = null;
        }
        if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
          ancestorInfo.listItemTagAutoclosing = null;
          ancestorInfo.dlItemTagAutoclosing = null;
        }
        ancestorInfo.current = info2;
        if (tag === "form") {
          ancestorInfo.formTag = info2;
        }
        if (tag === "a") {
          ancestorInfo.aTagInScope = info2;
        }
        if (tag === "button") {
          ancestorInfo.buttonTagInScope = info2;
        }
        if (tag === "nobr") {
          ancestorInfo.nobrTagInScope = info2;
        }
        if (tag === "p") {
          ancestorInfo.pTagInButtonScope = info2;
        }
        if (tag === "li") {
          ancestorInfo.listItemTagAutoclosing = info2;
        }
        if (tag === "dd" || tag === "dt") {
          ancestorInfo.dlItemTagAutoclosing = info2;
        }
        return ancestorInfo;
      };
      var isTagValidWithParent = function(tag, parentTag) {
        switch (parentTag) {
          case "select":
            return tag === "option" || tag === "optgroup" || tag === "#text";
          case "optgroup":
            return tag === "option" || tag === "#text";
          case "option":
            return tag === "#text";
          case "tr":
            return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
          case "tbody":
          case "thead":
          case "tfoot":
            return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
          case "colgroup":
            return tag === "col" || tag === "template";
          case "table":
            return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
          case "head":
            return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
          case "html":
            return tag === "head" || tag === "body" || tag === "frameset";
          case "frameset":
            return tag === "frame";
          case "#document":
            return tag === "html";
        }
        switch (tag) {
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
          case "rp":
          case "rt":
            return impliedEndTags.indexOf(parentTag) === -1;
          case "body":
          case "caption":
          case "col":
          case "colgroup":
          case "frameset":
          case "frame":
          case "head":
          case "html":
          case "tbody":
          case "td":
          case "tfoot":
          case "th":
          case "thead":
          case "tr":
            return parentTag == null;
        }
        return true;
      };
      var findInvalidAncestorForTag = function(tag, ancestorInfo) {
        switch (tag) {
          case "address":
          case "article":
          case "aside":
          case "blockquote":
          case "center":
          case "details":
          case "dialog":
          case "dir":
          case "div":
          case "dl":
          case "fieldset":
          case "figcaption":
          case "figure":
          case "footer":
          case "header":
          case "hgroup":
          case "main":
          case "menu":
          case "nav":
          case "ol":
          case "p":
          case "section":
          case "summary":
          case "ul":
          case "pre":
          case "listing":
          case "table":
          case "hr":
          case "xmp":
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            return ancestorInfo.pTagInButtonScope;
          case "form":
            return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
          case "li":
            return ancestorInfo.listItemTagAutoclosing;
          case "dd":
          case "dt":
            return ancestorInfo.dlItemTagAutoclosing;
          case "button":
            return ancestorInfo.buttonTagInScope;
          case "a":
            return ancestorInfo.aTagInScope;
          case "nobr":
            return ancestorInfo.nobrTagInScope;
        }
        return null;
      };
      var didWarn$1 = {};
      validateDOMNesting = function(childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;
        if (childText != null) {
          if (childTag != null) {
            error2("validateDOMNesting: when childText is passed, childTag should be null");
          }
          childTag = "#text";
        }
        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor) {
          return;
        }
        var ancestorTag = invalidParentOrAncestor.tag;
        var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
        if (didWarn$1[warnKey]) {
          return;
        }
        didWarn$1[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = "";
        if (childTag === "#text") {
          if (/\S/.test(childText)) {
            tagDisplayName = "Text nodes";
          } else {
            tagDisplayName = "Whitespace text nodes";
            whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
          }
        } else {
          tagDisplayName = "<" + childTag + ">";
        }
        if (invalidParent) {
          var info2 = "";
          if (ancestorTag === "table" && childTag === "tr") {
            info2 += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
          }
          error2("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info2);
        } else {
          error2("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
        }
      };
    }
    var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
    var SUSPENSE_START_DATA = "$";
    var SUSPENSE_END_DATA = "/$";
    var SUSPENSE_PENDING_START_DATA = "$?";
    var SUSPENSE_FALLBACK_START_DATA = "$!";
    var STYLE$1 = "style";
    var eventsEnabled = null;
    var selectionInformation = null;
    function getRootHostContext(rootContainerInstance) {
      var type;
      var namespace;
      var nodeType = rootContainerInstance.nodeType;
      switch (nodeType) {
        case DOCUMENT_NODE:
        case DOCUMENT_FRAGMENT_NODE: {
          type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
          var root2 = rootContainerInstance.documentElement;
          namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
          break;
        }
        default: {
          var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
          var ownNamespace = container.namespaceURI || null;
          type = container.tagName;
          namespace = getChildNamespace(ownNamespace, type);
          break;
        }
      }
      {
        var validatedTag = type.toLowerCase();
        var ancestorInfo = updatedAncestorInfo(null, validatedTag);
        return {
          namespace,
          ancestorInfo
        };
      }
    }
    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
      {
        var parentHostContextDev = parentHostContext;
        var namespace = getChildNamespace(parentHostContextDev.namespace, type);
        var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
        return {
          namespace,
          ancestorInfo
        };
      }
    }
    function getPublicInstance(instance2) {
      return instance2;
    }
    function prepareForCommit(containerInfo) {
      eventsEnabled = isEnabled();
      selectionInformation = getSelectionInformation();
      var activeInstance = null;
      setEnabled(false);
      return activeInstance;
    }
    function resetAfterCommit(containerInfo) {
      restoreSelection(selectionInformation);
      setEnabled(eventsEnabled);
      eventsEnabled = null;
      selectionInformation = null;
    }
    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      var parentNamespace;
      {
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
        if (typeof props.children === "string" || typeof props.children === "number") {
          var string = "" + props.children;
          var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
          validateDOMNesting(null, string, ownAncestorInfo);
        }
        parentNamespace = hostContextDev.namespace;
      }
      var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
      precacheFiberNode(internalInstanceHandle, domElement);
      updateFiberProps(domElement, props);
      return domElement;
    }
    function appendInitialChild(parentInstance, child) {
      parentInstance.appendChild(child);
    }
    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
      setInitialProperties(domElement, type, props, rootContainerInstance);
      switch (type) {
        case "button":
        case "input":
        case "select":
        case "textarea":
          return !!props.autoFocus;
        case "img":
          return true;
        default:
          return false;
      }
    }
    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
      {
        var hostContextDev = hostContext;
        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
          var string = "" + newProps.children;
          var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
          validateDOMNesting(null, string, ownAncestorInfo);
        }
      }
      return diffProperties(domElement, type, oldProps, newProps);
    }
    function shouldSetTextContent(type, props) {
      return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
      {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
      }
      var textNode = createTextNode(text, rootContainerInstance);
      precacheFiberNode(internalInstanceHandle, textNode);
      return textNode;
    }
    function getCurrentEventPriority() {
      var currentEvent = window.event;
      if (currentEvent === void 0) {
        return DefaultEventPriority;
      }
      return getEventPriority(currentEvent.type);
    }
    var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
    var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
    var noTimeout = -1;
    var localPromise = typeof Promise === "function" ? Promise : void 0;
    var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
      return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
    } : scheduleTimeout;
    function handleErrorInNextTick(error3) {
      setTimeout(function() {
        throw error3;
      });
    }
    function commitMount(domElement, type, newProps, internalInstanceHandle) {
      switch (type) {
        case "button":
        case "input":
        case "select":
        case "textarea":
          if (newProps.autoFocus) {
            domElement.focus();
          }
          return;
        case "img": {
          if (newProps.src) {
            domElement.src = newProps.src;
          }
          return;
        }
      }
    }
    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
      updateProperties(domElement, updatePayload, type, oldProps, newProps);
      updateFiberProps(domElement, newProps);
    }
    function resetTextContent(domElement) {
      setTextContent(domElement, "");
    }
    function commitTextUpdate(textInstance, oldText, newText) {
      textInstance.nodeValue = newText;
    }
    function appendChild(parentInstance, child) {
      parentInstance.appendChild(child);
    }
    function appendChildToContainer(container, child) {
      var parentNode;
      if (container.nodeType === COMMENT_NODE) {
        parentNode = container.parentNode;
        parentNode.insertBefore(child, container);
      } else {
        parentNode = container;
        parentNode.appendChild(child);
      }
      var reactRootContainer = container._reactRootContainer;
      if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
        trapClickOnNonInteractiveElement(parentNode);
      }
    }
    function insertBefore(parentInstance, child, beforeChild) {
      parentInstance.insertBefore(child, beforeChild);
    }
    function insertInContainerBefore(container, child, beforeChild) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.insertBefore(child, beforeChild);
      } else {
        container.insertBefore(child, beforeChild);
      }
    }
    function removeChild(parentInstance, child) {
      parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.removeChild(child);
      } else {
        container.removeChild(child);
      }
    }
    function clearSuspenseBoundary(parentInstance, suspenseInstance) {
      var node2 = suspenseInstance;
      var depth = 0;
      do {
        var nextNode = node2.nextSibling;
        parentInstance.removeChild(node2);
        if (nextNode && nextNode.nodeType === COMMENT_NODE) {
          var data = nextNode.data;
          if (data === SUSPENSE_END_DATA) {
            if (depth === 0) {
              parentInstance.removeChild(nextNode);
              retryIfBlockedOn(suspenseInstance);
              return;
            } else {
              depth--;
            }
          } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
            depth++;
          }
        }
        node2 = nextNode;
      } while (node2);
      retryIfBlockedOn(suspenseInstance);
    }
    function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
      if (container.nodeType === COMMENT_NODE) {
        clearSuspenseBoundary(container.parentNode, suspenseInstance);
      } else if (container.nodeType === ELEMENT_NODE) {
        clearSuspenseBoundary(container, suspenseInstance);
      }
      retryIfBlockedOn(container);
    }
    function hideInstance(instance2) {
      instance2 = instance2;
      var style2 = instance2.style;
      if (typeof style2.setProperty === "function") {
        style2.setProperty("display", "none", "important");
      } else {
        style2.display = "none";
      }
    }
    function hideTextInstance(textInstance) {
      textInstance.nodeValue = "";
    }
    function unhideInstance(instance2, props) {
      instance2 = instance2;
      var styleProp = props[STYLE$1];
      var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
      instance2.style.display = dangerousStyleValue("display", display);
    }
    function unhideTextInstance(textInstance, text) {
      textInstance.nodeValue = text;
    }
    function clearContainer(container) {
      if (container.nodeType === ELEMENT_NODE) {
        container.textContent = "";
      } else if (container.nodeType === DOCUMENT_NODE) {
        if (container.documentElement) {
          container.removeChild(container.documentElement);
        }
      }
    }
    function canHydrateInstance(instance2, type, props) {
      if (instance2.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance2.nodeName.toLowerCase()) {
        return null;
      }
      return instance2;
    }
    function canHydrateTextInstance(instance2, text) {
      if (text === "" || instance2.nodeType !== TEXT_NODE) {
        return null;
      }
      return instance2;
    }
    function canHydrateSuspenseInstance(instance2) {
      if (instance2.nodeType !== COMMENT_NODE) {
        return null;
      }
      return instance2;
    }
    function isSuspenseInstancePending(instance2) {
      return instance2.data === SUSPENSE_PENDING_START_DATA;
    }
    function isSuspenseInstanceFallback(instance2) {
      return instance2.data === SUSPENSE_FALLBACK_START_DATA;
    }
    function getSuspenseInstanceFallbackErrorDetails(instance2) {
      var dataset = instance2.nextSibling && instance2.nextSibling.dataset;
      var digest, message, stack;
      if (dataset) {
        digest = dataset.dgst;
        {
          message = dataset.msg;
          stack = dataset.stck;
        }
      }
      {
        return {
          message,
          digest,
          stack
        };
      }
    }
    function registerSuspenseInstanceRetry(instance2, callback) {
      instance2._reactRetry = callback;
    }
    function getNextHydratable(node2) {
      for (; node2 != null; node2 = node2.nextSibling) {
        var nodeType = node2.nodeType;
        if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
          break;
        }
        if (nodeType === COMMENT_NODE) {
          var nodeData = node2.data;
          if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
            break;
          }
          if (nodeData === SUSPENSE_END_DATA) {
            return null;
          }
        }
      }
      return node2;
    }
    function getNextHydratableSibling(instance2) {
      return getNextHydratable(instance2.nextSibling);
    }
    function getFirstHydratableChild(parentInstance) {
      return getNextHydratable(parentInstance.firstChild);
    }
    function getFirstHydratableChildWithinContainer(parentContainer) {
      return getNextHydratable(parentContainer.firstChild);
    }
    function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
      return getNextHydratable(parentInstance.nextSibling);
    }
    function hydrateInstance(instance2, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
      precacheFiberNode(internalInstanceHandle, instance2);
      updateFiberProps(instance2, props);
      var parentNamespace;
      {
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
      }
      var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
      return diffHydratedProperties(instance2, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
    }
    function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
      precacheFiberNode(internalInstanceHandle, textInstance);
      return diffHydratedText(textInstance, text);
    }
    function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
      precacheFiberNode(internalInstanceHandle, suspenseInstance);
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
      var node2 = suspenseInstance.nextSibling;
      var depth = 0;
      while (node2) {
        if (node2.nodeType === COMMENT_NODE) {
          var data = node2.data;
          if (data === SUSPENSE_END_DATA) {
            if (depth === 0) {
              return getNextHydratableSibling(node2);
            } else {
              depth--;
            }
          } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
            depth++;
          }
        }
        node2 = node2.nextSibling;
      }
      return null;
    }
    function getParentSuspenseInstance(targetInstance) {
      var node2 = targetInstance.previousSibling;
      var depth = 0;
      while (node2) {
        if (node2.nodeType === COMMENT_NODE) {
          var data = node2.data;
          if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
            if (depth === 0) {
              return node2;
            } else {
              depth--;
            }
          } else if (data === SUSPENSE_END_DATA) {
            depth++;
          }
        }
        node2 = node2.previousSibling;
      }
      return null;
    }
    function commitHydratedContainer(container) {
      retryIfBlockedOn(container);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
      retryIfBlockedOn(suspenseInstance);
    }
    function shouldDeleteUnhydratedTailInstances(parentType) {
      return parentType !== "head" && parentType !== "body";
    }
    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
      var shouldWarnDev = true;
      checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
    }
    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
      if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
        var shouldWarnDev = true;
        checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
      }
    }
    function didNotHydrateInstanceWithinContainer(parentContainer, instance2) {
      {
        if (instance2.nodeType === ELEMENT_NODE) {
          warnForDeletedHydratableElement(parentContainer, instance2);
        } else if (instance2.nodeType === COMMENT_NODE)
          ;
        else {
          warnForDeletedHydratableText(parentContainer, instance2);
        }
      }
    }
    function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance2) {
      {
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null) {
          if (instance2.nodeType === ELEMENT_NODE) {
            warnForDeletedHydratableElement(parentNode, instance2);
          } else if (instance2.nodeType === COMMENT_NODE)
            ;
          else {
            warnForDeletedHydratableText(parentNode, instance2);
          }
        }
      }
    }
    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance2, isConcurrentMode) {
      {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          if (instance2.nodeType === ELEMENT_NODE) {
            warnForDeletedHydratableElement(parentInstance, instance2);
          } else if (instance2.nodeType === COMMENT_NODE)
            ;
          else {
            warnForDeletedHydratableText(parentInstance, instance2);
          }
        }
      }
    }
    function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
      {
        warnForInsertedHydratedElement(parentContainer, type);
      }
    }
    function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
      {
        warnForInsertedHydratedText(parentContainer, text);
      }
    }
    function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
      {
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null)
          warnForInsertedHydratedElement(parentNode, type);
      }
    }
    function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
      {
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null)
          warnForInsertedHydratedText(parentNode, text);
      }
    }
    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
      {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          warnForInsertedHydratedElement(parentInstance, type);
        }
      }
    }
    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
      {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          warnForInsertedHydratedText(parentInstance, text);
        }
      }
    }
    function errorHydratingContainer(parentContainer) {
      {
        error2("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
      }
    }
    function preparePortalMount(portalInstance) {
      listenToAllSupportedEvents(portalInstance);
    }
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = "__reactFiber$" + randomKey;
    var internalPropsKey = "__reactProps$" + randomKey;
    var internalContainerInstanceKey = "__reactContainer$" + randomKey;
    var internalEventHandlersKey = "__reactEvents$" + randomKey;
    var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
    var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
    function detachDeletedInstance(node2) {
      delete node2[internalInstanceKey];
      delete node2[internalPropsKey];
      delete node2[internalEventHandlersKey];
      delete node2[internalEventHandlerListenersKey];
      delete node2[internalEventHandlesSetKey];
    }
    function precacheFiberNode(hostInst, node2) {
      node2[internalInstanceKey] = hostInst;
    }
    function markContainerAsRoot(hostRoot, node2) {
      node2[internalContainerInstanceKey] = hostRoot;
    }
    function unmarkContainerAsRoot(node2) {
      node2[internalContainerInstanceKey] = null;
    }
    function isContainerMarkedAsRoot(node2) {
      return !!node2[internalContainerInstanceKey];
    }
    function getClosestInstanceFromNode(targetNode) {
      var targetInst = targetNode[internalInstanceKey];
      if (targetInst) {
        return targetInst;
      }
      var parentNode = targetNode.parentNode;
      while (parentNode) {
        targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
        if (targetInst) {
          var alternate = targetInst.alternate;
          if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
            var suspenseInstance = getParentSuspenseInstance(targetNode);
            while (suspenseInstance !== null) {
              var targetSuspenseInst = suspenseInstance[internalInstanceKey];
              if (targetSuspenseInst) {
                return targetSuspenseInst;
              }
              suspenseInstance = getParentSuspenseInstance(suspenseInstance);
            }
          }
          return targetInst;
        }
        targetNode = parentNode;
        parentNode = targetNode.parentNode;
      }
      return null;
    }
    function getInstanceFromNode(node2) {
      var inst = node2[internalInstanceKey] || node2[internalContainerInstanceKey];
      if (inst) {
        if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
          return inst;
        } else {
          return null;
        }
      }
      return null;
    }
    function getNodeFromInstance(inst) {
      if (inst.tag === HostComponent || inst.tag === HostText) {
        return inst.stateNode;
      }
      throw new Error("getNodeFromInstance: Invalid argument.");
    }
    function getFiberCurrentPropsFromNode(node2) {
      return node2[internalPropsKey] || null;
    }
    function updateFiberProps(node2, props) {
      node2[internalPropsKey] = props;
    }
    function getEventListenerSet(node2) {
      var elementListenerSet = node2[internalEventHandlersKey];
      if (elementListenerSet === void 0) {
        elementListenerSet = node2[internalEventHandlersKey] = /* @__PURE__ */ new Set();
      }
      return elementListenerSet;
    }
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
      {
        if (element) {
          var stack = describeUnknownElementTypeFrameInDEV(element.type);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
        }
      }
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
      {
        var has2 = Function.call.bind(hasOwnProperty2);
        for (var typeSpecName in typeSpecs) {
          if (has2(typeSpecs, typeSpecName)) {
            var error$1 = void 0;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (ex) {
              error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
              setCurrentlyValidatingElement(element);
              error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
              setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
              loggedTypeFailures[error$1.message] = true;
              setCurrentlyValidatingElement(element);
              error2("Failed %s type: %s", location, error$1.message);
              setCurrentlyValidatingElement(null);
            }
          }
        }
      }
    }
    var valueStack = [];
    var fiberStack;
    {
      fiberStack = [];
    }
    var index = -1;
    function createCursor(defaultValue) {
      return {
        current: defaultValue
      };
    }
    function pop(cursor2, fiber) {
      if (index < 0) {
        {
          error2("Unexpected pop.");
        }
        return;
      }
      {
        if (fiber !== fiberStack[index]) {
          error2("Unexpected Fiber popped.");
        }
      }
      cursor2.current = valueStack[index];
      valueStack[index] = null;
      {
        fiberStack[index] = null;
      }
      index--;
    }
    function push(cursor2, value, fiber) {
      index++;
      valueStack[index] = cursor2.current;
      {
        fiberStack[index] = fiber;
      }
      cursor2.current = value;
    }
    var warnedAboutMissingGetChildContext;
    {
      warnedAboutMissingGetChildContext = {};
    }
    var emptyContextObject = {};
    {
      Object.freeze(emptyContextObject);
    }
    var contextStackCursor = createCursor(emptyContextObject);
    var didPerformWorkStackCursor = createCursor(false);
    var previousContext = emptyContextObject;
    function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
      {
        if (didPushOwnContextIfProvider && isContextProvider(Component)) {
          return previousContext;
        }
        return contextStackCursor.current;
      }
    }
    function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
      {
        var instance2 = workInProgress2.stateNode;
        instance2.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance2.__reactInternalMemoizedMaskedChildContext = maskedContext;
      }
    }
    function getMaskedContext(workInProgress2, unmaskedContext) {
      {
        var type = workInProgress2.type;
        var contextTypes = type.contextTypes;
        if (!contextTypes) {
          return emptyContextObject;
        }
        var instance2 = workInProgress2.stateNode;
        if (instance2 && instance2.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
          return instance2.__reactInternalMemoizedMaskedChildContext;
        }
        var context = {};
        for (var key in contextTypes) {
          context[key] = unmaskedContext[key];
        }
        {
          var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
          checkPropTypes(contextTypes, context, "context", name);
        }
        if (instance2) {
          cacheContext(workInProgress2, unmaskedContext, context);
        }
        return context;
      }
    }
    function hasContextChanged() {
      {
        return didPerformWorkStackCursor.current;
      }
    }
    function isContextProvider(type) {
      {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== void 0;
      }
    }
    function popContext(fiber) {
      {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
      }
    }
    function popTopLevelContextObject(fiber) {
      {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
      }
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
      {
        if (contextStackCursor.current !== emptyContextObject) {
          throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        }
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
      }
    }
    function processChildContext(fiber, type, parentContext) {
      {
        var instance2 = fiber.stateNode;
        var childContextTypes = type.childContextTypes;
        if (typeof instance2.getChildContext !== "function") {
          {
            var componentName = getComponentNameFromFiber(fiber) || "Unknown";
            if (!warnedAboutMissingGetChildContext[componentName]) {
              warnedAboutMissingGetChildContext[componentName] = true;
              error2("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
            }
          }
          return parentContext;
        }
        var childContext = instance2.getChildContext();
        for (var contextKey in childContext) {
          if (!(contextKey in childContextTypes)) {
            throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
          }
        }
        {
          var name = getComponentNameFromFiber(fiber) || "Unknown";
          checkPropTypes(childContextTypes, childContext, "child context", name);
        }
        return assign2({}, parentContext, childContext);
      }
    }
    function pushContextProvider(workInProgress2) {
      {
        var instance2 = workInProgress2.stateNode;
        var memoizedMergedChildContext = instance2 && instance2.__reactInternalMemoizedMergedChildContext || emptyContextObject;
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
        return true;
      }
    }
    function invalidateContextProvider(workInProgress2, type, didChange) {
      {
        var instance2 = workInProgress2.stateNode;
        if (!instance2) {
          throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (didChange) {
          var mergedContext = processChildContext(workInProgress2, type, previousContext);
          instance2.__reactInternalMemoizedMergedChildContext = mergedContext;
          pop(didPerformWorkStackCursor, workInProgress2);
          pop(contextStackCursor, workInProgress2);
          push(contextStackCursor, mergedContext, workInProgress2);
          push(didPerformWorkStackCursor, didChange, workInProgress2);
        } else {
          pop(didPerformWorkStackCursor, workInProgress2);
          push(didPerformWorkStackCursor, didChange, workInProgress2);
        }
      }
    }
    function findCurrentUnmaskedContext(fiber) {
      {
        if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
          throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        }
        var node2 = fiber;
        do {
          switch (node2.tag) {
            case HostRoot:
              return node2.stateNode.context;
            case ClassComponent: {
              var Component = node2.type;
              if (isContextProvider(Component)) {
                return node2.stateNode.__reactInternalMemoizedMergedChildContext;
              }
              break;
            }
          }
          node2 = node2.return;
        } while (node2 !== null);
        throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    var LegacyRoot = 0;
    var ConcurrentRoot = 1;
    var syncQueue = null;
    var includesLegacySyncCallbacks = false;
    var isFlushingSyncQueue = false;
    function scheduleSyncCallback(callback) {
      if (syncQueue === null) {
        syncQueue = [callback];
      } else {
        syncQueue.push(callback);
      }
    }
    function scheduleLegacySyncCallback(callback) {
      includesLegacySyncCallbacks = true;
      scheduleSyncCallback(callback);
    }
    function flushSyncCallbacksOnlyInLegacyMode() {
      if (includesLegacySyncCallbacks) {
        flushSyncCallbacks();
      }
    }
    function flushSyncCallbacks() {
      if (!isFlushingSyncQueue && syncQueue !== null) {
        isFlushingSyncQueue = true;
        var i = 0;
        var previousUpdatePriority = getCurrentUpdatePriority();
        try {
          var isSync = true;
          var queue2 = syncQueue;
          setCurrentUpdatePriority(DiscreteEventPriority);
          for (; i < queue2.length; i++) {
            var callback = queue2[i];
            do {
              callback = callback(isSync);
            } while (callback !== null);
          }
          syncQueue = null;
          includesLegacySyncCallbacks = false;
        } catch (error3) {
          if (syncQueue !== null) {
            syncQueue = syncQueue.slice(i + 1);
          }
          scheduleCallback(ImmediatePriority, flushSyncCallbacks);
          throw error3;
        } finally {
          setCurrentUpdatePriority(previousUpdatePriority);
          isFlushingSyncQueue = false;
        }
      }
      return null;
    }
    var forkStack = [];
    var forkStackIndex = 0;
    var treeForkProvider = null;
    var treeForkCount = 0;
    var idStack = [];
    var idStackIndex = 0;
    var treeContextProvider = null;
    var treeContextId = 1;
    var treeContextOverflow = "";
    function isForkedChild(workInProgress2) {
      warnIfNotHydrating();
      return (workInProgress2.flags & Forked) !== NoFlags;
    }
    function getForksAtLevel(workInProgress2) {
      warnIfNotHydrating();
      return treeForkCount;
    }
    function getTreeId() {
      var overflow = treeContextOverflow;
      var idWithLeadingBit = treeContextId;
      var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
      return id.toString(32) + overflow;
    }
    function pushTreeFork(workInProgress2, totalChildren) {
      warnIfNotHydrating();
      forkStack[forkStackIndex++] = treeForkCount;
      forkStack[forkStackIndex++] = treeForkProvider;
      treeForkProvider = workInProgress2;
      treeForkCount = totalChildren;
    }
    function pushTreeId(workInProgress2, totalChildren, index2) {
      warnIfNotHydrating();
      idStack[idStackIndex++] = treeContextId;
      idStack[idStackIndex++] = treeContextOverflow;
      idStack[idStackIndex++] = treeContextProvider;
      treeContextProvider = workInProgress2;
      var baseIdWithLeadingBit = treeContextId;
      var baseOverflow = treeContextOverflow;
      var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
      var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
      var slot = index2 + 1;
      var length2 = getBitLength(totalChildren) + baseLength;
      if (length2 > 30) {
        var numberOfOverflowBits = baseLength - baseLength % 5;
        var newOverflowBits = (1 << numberOfOverflowBits) - 1;
        var newOverflow = (baseId & newOverflowBits).toString(32);
        var restOfBaseId = baseId >> numberOfOverflowBits;
        var restOfBaseLength = baseLength - numberOfOverflowBits;
        var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
        var restOfNewBits = slot << restOfBaseLength;
        var id = restOfNewBits | restOfBaseId;
        var overflow = newOverflow + baseOverflow;
        treeContextId = 1 << restOfLength | id;
        treeContextOverflow = overflow;
      } else {
        var newBits = slot << baseLength;
        var _id = newBits | baseId;
        var _overflow = baseOverflow;
        treeContextId = 1 << length2 | _id;
        treeContextOverflow = _overflow;
      }
    }
    function pushMaterializedTreeId(workInProgress2) {
      warnIfNotHydrating();
      var returnFiber = workInProgress2.return;
      if (returnFiber !== null) {
        var numberOfForks = 1;
        var slotIndex = 0;
        pushTreeFork(workInProgress2, numberOfForks);
        pushTreeId(workInProgress2, numberOfForks, slotIndex);
      }
    }
    function getBitLength(number2) {
      return 32 - clz32(number2);
    }
    function getLeadingBit(id) {
      return 1 << getBitLength(id) - 1;
    }
    function popTreeContext(workInProgress2) {
      while (workInProgress2 === treeForkProvider) {
        treeForkProvider = forkStack[--forkStackIndex];
        forkStack[forkStackIndex] = null;
        treeForkCount = forkStack[--forkStackIndex];
        forkStack[forkStackIndex] = null;
      }
      while (workInProgress2 === treeContextProvider) {
        treeContextProvider = idStack[--idStackIndex];
        idStack[idStackIndex] = null;
        treeContextOverflow = idStack[--idStackIndex];
        idStack[idStackIndex] = null;
        treeContextId = idStack[--idStackIndex];
        idStack[idStackIndex] = null;
      }
    }
    function getSuspendedTreeContext() {
      warnIfNotHydrating();
      if (treeContextProvider !== null) {
        return {
          id: treeContextId,
          overflow: treeContextOverflow
        };
      } else {
        return null;
      }
    }
    function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
      warnIfNotHydrating();
      idStack[idStackIndex++] = treeContextId;
      idStack[idStackIndex++] = treeContextOverflow;
      idStack[idStackIndex++] = treeContextProvider;
      treeContextId = suspendedContext.id;
      treeContextOverflow = suspendedContext.overflow;
      treeContextProvider = workInProgress2;
    }
    function warnIfNotHydrating() {
      {
        if (!getIsHydrating()) {
          error2("Expected to be hydrating. This is a bug in React. Please file an issue.");
        }
      }
    }
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false;
    var didSuspendOrErrorDEV = false;
    var hydrationErrors = null;
    function warnIfHydrating() {
      {
        if (isHydrating) {
          error2("We should not be hydrating here. This is a bug in React. Please file a bug.");
        }
      }
    }
    function markDidThrowWhileHydratingDEV() {
      {
        didSuspendOrErrorDEV = true;
      }
    }
    function didSuspendOrErrorWhileHydratingDEV() {
      {
        return didSuspendOrErrorDEV;
      }
    }
    function enterHydrationState(fiber) {
      var parentInstance = fiber.stateNode.containerInfo;
      nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
      hydrationParentFiber = fiber;
      isHydrating = true;
      hydrationErrors = null;
      didSuspendOrErrorDEV = false;
      return true;
    }
    function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
      nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
      hydrationParentFiber = fiber;
      isHydrating = true;
      hydrationErrors = null;
      didSuspendOrErrorDEV = false;
      if (treeContext !== null) {
        restoreSuspendedTreeContext(fiber, treeContext);
      }
      return true;
    }
    function warnUnhydratedInstance(returnFiber, instance2) {
      {
        switch (returnFiber.tag) {
          case HostRoot: {
            didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance2);
            break;
          }
          case HostComponent: {
            var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
            didNotHydrateInstance(
              returnFiber.type,
              returnFiber.memoizedProps,
              returnFiber.stateNode,
              instance2,
              // TODO: Delete this argument when we remove the legacy root API.
              isConcurrentMode
            );
            break;
          }
          case SuspenseComponent: {
            var suspenseState = returnFiber.memoizedState;
            if (suspenseState.dehydrated !== null)
              didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance2);
            break;
          }
        }
      }
    }
    function deleteHydratableInstance(returnFiber, instance2) {
      warnUnhydratedInstance(returnFiber, instance2);
      var childToDelete = createFiberFromHostInstanceForDeletion();
      childToDelete.stateNode = instance2;
      childToDelete.return = returnFiber;
      var deletions = returnFiber.deletions;
      if (deletions === null) {
        returnFiber.deletions = [childToDelete];
        returnFiber.flags |= ChildDeletion;
      } else {
        deletions.push(childToDelete);
      }
    }
    function warnNonhydratedInstance(returnFiber, fiber) {
      {
        if (didSuspendOrErrorDEV) {
          return;
        }
        switch (returnFiber.tag) {
          case HostRoot: {
            var parentContainer = returnFiber.stateNode.containerInfo;
            switch (fiber.tag) {
              case HostComponent:
                var type = fiber.type;
                didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                break;
              case HostText:
                var text = fiber.pendingProps;
                didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                break;
            }
            break;
          }
          case HostComponent: {
            var parentType = returnFiber.type;
            var parentProps = returnFiber.memoizedProps;
            var parentInstance = returnFiber.stateNode;
            switch (fiber.tag) {
              case HostComponent: {
                var _type = fiber.type;
                var _props = fiber.pendingProps;
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotFindHydratableInstance(
                  parentType,
                  parentProps,
                  parentInstance,
                  _type,
                  _props,
                  // TODO: Delete this argument when we remove the legacy root API.
                  isConcurrentMode
                );
                break;
              }
              case HostText: {
                var _text = fiber.pendingProps;
                var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotFindHydratableTextInstance(
                  parentType,
                  parentProps,
                  parentInstance,
                  _text,
                  // TODO: Delete this argument when we remove the legacy root API.
                  _isConcurrentMode
                );
                break;
              }
            }
            break;
          }
          case SuspenseComponent: {
            var suspenseState = returnFiber.memoizedState;
            var _parentInstance = suspenseState.dehydrated;
            if (_parentInstance !== null)
              switch (fiber.tag) {
                case HostComponent:
                  var _type2 = fiber.type;
                  didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                  break;
                case HostText:
                  var _text2 = fiber.pendingProps;
                  didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                  break;
              }
            break;
          }
          default:
            return;
        }
      }
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
      fiber.flags = fiber.flags & ~Hydrating | Placement;
      warnNonhydratedInstance(returnFiber, fiber);
    }
    function tryHydrate(fiber, nextInstance) {
      switch (fiber.tag) {
        case HostComponent: {
          var type = fiber.type;
          var instance2 = canHydrateInstance(nextInstance, type);
          if (instance2 !== null) {
            fiber.stateNode = instance2;
            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(instance2);
            return true;
          }
          return false;
        }
        case HostText: {
          var text = fiber.pendingProps;
          var textInstance = canHydrateTextInstance(nextInstance, text);
          if (textInstance !== null) {
            fiber.stateNode = textInstance;
            hydrationParentFiber = fiber;
            nextHydratableInstance = null;
            return true;
          }
          return false;
        }
        case SuspenseComponent: {
          var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
          if (suspenseInstance !== null) {
            var suspenseState = {
              dehydrated: suspenseInstance,
              treeContext: getSuspendedTreeContext(),
              retryLane: OffscreenLane
            };
            fiber.memoizedState = suspenseState;
            var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
            dehydratedFragment.return = fiber;
            fiber.child = dehydratedFragment;
            hydrationParentFiber = fiber;
            nextHydratableInstance = null;
            return true;
          }
          return false;
        }
        default:
          return false;
      }
    }
    function shouldClientRenderOnMismatch(fiber) {
      return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
    }
    function throwOnHydrationMismatch(fiber) {
      throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
    }
    function tryToClaimNextHydratableInstance(fiber) {
      if (!isHydrating) {
        return;
      }
      var nextInstance = nextHydratableInstance;
      if (!nextInstance) {
        if (shouldClientRenderOnMismatch(fiber)) {
          warnNonhydratedInstance(hydrationParentFiber, fiber);
          throwOnHydrationMismatch();
        }
        insertNonHydratedInstance(hydrationParentFiber, fiber);
        isHydrating = false;
        hydrationParentFiber = fiber;
        return;
      }
      var firstAttemptedInstance = nextInstance;
      if (!tryHydrate(fiber, nextInstance)) {
        if (shouldClientRenderOnMismatch(fiber)) {
          warnNonhydratedInstance(hydrationParentFiber, fiber);
          throwOnHydrationMismatch();
        }
        nextInstance = getNextHydratableSibling(firstAttemptedInstance);
        var prevHydrationParentFiber = hydrationParentFiber;
        if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          return;
        }
        deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
      }
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
      var instance2 = fiber.stateNode;
      var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
      var updatePayload = hydrateInstance(instance2, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
      fiber.updateQueue = updatePayload;
      if (updatePayload !== null) {
        return true;
      }
      return false;
    }
    function prepareToHydrateHostTextInstance(fiber) {
      var textInstance = fiber.stateNode;
      var textContent = fiber.memoizedProps;
      var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
      if (shouldUpdate) {
        var returnFiber = hydrationParentFiber;
        if (returnFiber !== null) {
          switch (returnFiber.tag) {
            case HostRoot: {
              var parentContainer = returnFiber.stateNode.containerInfo;
              var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
              didNotMatchHydratedContainerTextInstance(
                parentContainer,
                textInstance,
                textContent,
                // TODO: Delete this argument when we remove the legacy root API.
                isConcurrentMode
              );
              break;
            }
            case HostComponent: {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
              didNotMatchHydratedTextInstance(
                parentType,
                parentProps,
                parentInstance,
                textInstance,
                textContent,
                // TODO: Delete this argument when we remove the legacy root API.
                _isConcurrentMode2
              );
              break;
            }
          }
        }
      }
      return shouldUpdate;
    }
    function prepareToHydrateHostSuspenseInstance(fiber) {
      var suspenseState = fiber.memoizedState;
      var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
      if (!suspenseInstance) {
        throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
      }
      hydrateSuspenseInstance(suspenseInstance, fiber);
    }
    function skipPastDehydratedSuspenseInstance(fiber) {
      var suspenseState = fiber.memoizedState;
      var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
      if (!suspenseInstance) {
        throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
      }
      return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }
    function popToNextHostParent(fiber) {
      var parent = fiber.return;
      while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
        parent = parent.return;
      }
      hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
      if (fiber !== hydrationParentFiber) {
        return false;
      }
      if (!isHydrating) {
        popToNextHostParent(fiber);
        isHydrating = true;
        return false;
      }
      if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
        var nextInstance = nextHydratableInstance;
        if (nextInstance) {
          if (shouldClientRenderOnMismatch(fiber)) {
            warnIfUnhydratedTailNodes(fiber);
            throwOnHydrationMismatch();
          } else {
            while (nextInstance) {
              deleteHydratableInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
        }
      }
      popToNextHostParent(fiber);
      if (fiber.tag === SuspenseComponent) {
        nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
      } else {
        nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
      }
      return true;
    }
    function hasUnhydratedTailNodes() {
      return isHydrating && nextHydratableInstance !== null;
    }
    function warnIfUnhydratedTailNodes(fiber) {
      var nextInstance = nextHydratableInstance;
      while (nextInstance) {
        warnUnhydratedInstance(fiber, nextInstance);
        nextInstance = getNextHydratableSibling(nextInstance);
      }
    }
    function resetHydrationState() {
      hydrationParentFiber = null;
      nextHydratableInstance = null;
      isHydrating = false;
      didSuspendOrErrorDEV = false;
    }
    function upgradeHydrationErrorsToRecoverable() {
      if (hydrationErrors !== null) {
        queueRecoverableErrors(hydrationErrors);
        hydrationErrors = null;
      }
    }
    function getIsHydrating() {
      return isHydrating;
    }
    function queueHydrationError(error3) {
      if (hydrationErrors === null) {
        hydrationErrors = [error3];
      } else {
        hydrationErrors.push(error3);
      }
    }
    var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
    var NoTransition = null;
    function requestCurrentTransition() {
      return ReactCurrentBatchConfig$1.transition;
    }
    var ReactStrictModeWarnings = {
      recordUnsafeLifecycleWarnings: function(fiber, instance2) {
      },
      flushPendingUnsafeLifecycleWarnings: function() {
      },
      recordLegacyContextWarning: function(fiber, instance2) {
      },
      flushLegacyContextWarning: function() {
      },
      discardPendingWarnings: function() {
      }
    };
    {
      var findStrictRoot = function(fiber) {
        var maybeStrictRoot = null;
        var node2 = fiber;
        while (node2 !== null) {
          if (node2.mode & StrictLegacyMode) {
            maybeStrictRoot = node2;
          }
          node2 = node2.return;
        }
        return maybeStrictRoot;
      };
      var setToSortedString = function(set2) {
        var array = [];
        set2.forEach(function(value) {
          array.push(value);
        });
        return array.sort().join(", ");
      };
      var pendingComponentWillMountWarnings = [];
      var pendingUNSAFE_ComponentWillMountWarnings = [];
      var pendingComponentWillReceivePropsWarnings = [];
      var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
      var pendingComponentWillUpdateWarnings = [];
      var pendingUNSAFE_ComponentWillUpdateWarnings = [];
      var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance2) {
        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
          return;
        }
        if (typeof instance2.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
        instance2.componentWillMount.__suppressDeprecationWarning !== true) {
          pendingComponentWillMountWarnings.push(fiber);
        }
        if (fiber.mode & StrictLegacyMode && typeof instance2.UNSAFE_componentWillMount === "function") {
          pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
        }
        if (typeof instance2.componentWillReceiveProps === "function" && instance2.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
          pendingComponentWillReceivePropsWarnings.push(fiber);
        }
        if (fiber.mode & StrictLegacyMode && typeof instance2.UNSAFE_componentWillReceiveProps === "function") {
          pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
        }
        if (typeof instance2.componentWillUpdate === "function" && instance2.componentWillUpdate.__suppressDeprecationWarning !== true) {
          pendingComponentWillUpdateWarnings.push(fiber);
        }
        if (fiber.mode & StrictLegacyMode && typeof instance2.UNSAFE_componentWillUpdate === "function") {
          pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
        }
      };
      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
        var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
        if (pendingComponentWillMountWarnings.length > 0) {
          pendingComponentWillMountWarnings.forEach(function(fiber) {
            componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingComponentWillMountWarnings = [];
        }
        var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
          pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
            UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingUNSAFE_ComponentWillMountWarnings = [];
        }
        var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
        if (pendingComponentWillReceivePropsWarnings.length > 0) {
          pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
            componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingComponentWillReceivePropsWarnings = [];
        }
        var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
          pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
            UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        }
        var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
        if (pendingComponentWillUpdateWarnings.length > 0) {
          pendingComponentWillUpdateWarnings.forEach(function(fiber) {
            componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingComponentWillUpdateWarnings = [];
        }
        var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
          pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
            UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingUNSAFE_ComponentWillUpdateWarnings = [];
        }
        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
          var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
          error2("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
        }
        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
          var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
          error2("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
        }
        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
          var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
          error2("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
        }
        if (componentWillMountUniqueNames.size > 0) {
          var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
          warn3("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
        }
        if (componentWillReceivePropsUniqueNames.size > 0) {
          var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
          warn3("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
        }
        if (componentWillUpdateUniqueNames.size > 0) {
          var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
          warn3("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
        }
      };
      var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
      var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
      ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance2) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
          error2("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
          return;
        }
        if (didWarnAboutLegacyContext.has(fiber.type)) {
          return;
        }
        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance2 !== null && typeof instance2.getChildContext === "function") {
          if (warningsForRoot === void 0) {
            warningsForRoot = [];
            pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
          }
          warningsForRoot.push(fiber);
        }
      };
      ReactStrictModeWarnings.flushLegacyContextWarning = function() {
        pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
          if (fiberArray.length === 0) {
            return;
          }
          var firstFiber = fiberArray[0];
          var uniqueNames = /* @__PURE__ */ new Set();
          fiberArray.forEach(function(fiber) {
            uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutLegacyContext.add(fiber.type);
          });
          var sortedNames = setToSortedString(uniqueNames);
          try {
            setCurrentFiber(firstFiber);
            error2("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
          } finally {
            resetCurrentFiber();
          }
        });
      };
      ReactStrictModeWarnings.discardPendingWarnings = function() {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = /* @__PURE__ */ new Map();
      };
    }
    function resolveDefaultProps(Component, baseProps) {
      if (Component && Component.defaultProps) {
        var props = assign2({}, baseProps);
        var defaultProps = Component.defaultProps;
        for (var propName in defaultProps) {
          if (props[propName] === void 0) {
            props[propName] = defaultProps[propName];
          }
        }
        return props;
      }
      return baseProps;
    }
    var valueCursor = createCursor(null);
    var rendererSigil;
    {
      rendererSigil = {};
    }
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastFullyObservedContext = null;
    var isDisallowedContextReadInDEV = false;
    function resetContextDependencies() {
      currentlyRenderingFiber = null;
      lastContextDependency = null;
      lastFullyObservedContext = null;
      {
        isDisallowedContextReadInDEV = false;
      }
    }
    function enterDisallowedContextReadInDEV() {
      {
        isDisallowedContextReadInDEV = true;
      }
    }
    function exitDisallowedContextReadInDEV() {
      {
        isDisallowedContextReadInDEV = false;
      }
    }
    function pushProvider(providerFiber, context, nextValue) {
      {
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        {
          if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
            error2("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
          }
          context._currentRenderer = rendererSigil;
        }
      }
    }
    function popProvider(context, providerFiber) {
      var currentValue = valueCursor.current;
      pop(valueCursor, providerFiber);
      {
        {
          context._currentValue = currentValue;
        }
      }
    }
    function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
      var node2 = parent;
      while (node2 !== null) {
        var alternate = node2.alternate;
        if (!isSubsetOfLanes(node2.childLanes, renderLanes2)) {
          node2.childLanes = mergeLanes(node2.childLanes, renderLanes2);
          if (alternate !== null) {
            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
          }
        } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
          alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
        }
        if (node2 === propagationRoot) {
          break;
        }
        node2 = node2.return;
      }
      {
        if (node2 !== propagationRoot) {
          error2("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    }
    function propagateContextChange(workInProgress2, context, renderLanes2) {
      {
        propagateContextChange_eager(workInProgress2, context, renderLanes2);
      }
    }
    function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
      var fiber = workInProgress2.child;
      if (fiber !== null) {
        fiber.return = workInProgress2;
      }
      while (fiber !== null) {
        var nextFiber = void 0;
        var list = fiber.dependencies;
        if (list !== null) {
          nextFiber = fiber.child;
          var dependency = list.firstContext;
          while (dependency !== null) {
            if (dependency.context === context) {
              if (fiber.tag === ClassComponent) {
                var lane = pickArbitraryLane(renderLanes2);
                var update = createUpdate(NoTimestamp, lane);
                update.tag = ForceUpdate;
                var updateQueue = fiber.updateQueue;
                if (updateQueue === null)
                  ;
                else {
                  var sharedQueue = updateQueue.shared;
                  var pending = sharedQueue.pending;
                  if (pending === null) {
                    update.next = update;
                  } else {
                    update.next = pending.next;
                    pending.next = update;
                  }
                  sharedQueue.pending = update;
                }
              }
              fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
              }
              scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
              list.lanes = mergeLanes(list.lanes, renderLanes2);
              break;
            }
            dependency = dependency.next;
          }
        } else if (fiber.tag === ContextProvider) {
          nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
        } else if (fiber.tag === DehydratedFragment) {
          var parentSuspense = fiber.return;
          if (parentSuspense === null) {
            throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
          }
          parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
          var _alternate = parentSuspense.alternate;
          if (_alternate !== null) {
            _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
          }
          scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
          nextFiber = fiber.sibling;
        } else {
          nextFiber = fiber.child;
        }
        if (nextFiber !== null) {
          nextFiber.return = fiber;
        } else {
          nextFiber = fiber;
          while (nextFiber !== null) {
            if (nextFiber === workInProgress2) {
              nextFiber = null;
              break;
            }
            var sibling = nextFiber.sibling;
            if (sibling !== null) {
              sibling.return = nextFiber.return;
              nextFiber = sibling;
              break;
            }
            nextFiber = nextFiber.return;
          }
        }
        fiber = nextFiber;
      }
    }
    function prepareToReadContext(workInProgress2, renderLanes2) {
      currentlyRenderingFiber = workInProgress2;
      lastContextDependency = null;
      lastFullyObservedContext = null;
      var dependencies = workInProgress2.dependencies;
      if (dependencies !== null) {
        {
          var firstContext = dependencies.firstContext;
          if (firstContext !== null) {
            if (includesSomeLane(dependencies.lanes, renderLanes2)) {
              markWorkInProgressReceivedUpdate();
            }
            dependencies.firstContext = null;
          }
        }
      }
    }
    function readContext(context) {
      {
        if (isDisallowedContextReadInDEV) {
          error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        }
      }
      var value = context._currentValue;
      if (lastFullyObservedContext === context)
        ;
      else {
        var contextItem = {
          context,
          memoizedValue: value,
          next: null
        };
        if (lastContextDependency === null) {
          if (currentlyRenderingFiber === null) {
            throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          }
          lastContextDependency = contextItem;
          currentlyRenderingFiber.dependencies = {
            lanes: NoLanes,
            firstContext: contextItem
          };
        } else {
          lastContextDependency = lastContextDependency.next = contextItem;
        }
      }
      return value;
    }
    var concurrentQueues = null;
    function pushConcurrentUpdateQueue(queue2) {
      if (concurrentQueues === null) {
        concurrentQueues = [queue2];
      } else {
        concurrentQueues.push(queue2);
      }
    }
    function finishQueueingConcurrentUpdates() {
      if (concurrentQueues !== null) {
        for (var i = 0; i < concurrentQueues.length; i++) {
          var queue2 = concurrentQueues[i];
          var lastInterleavedUpdate = queue2.interleaved;
          if (lastInterleavedUpdate !== null) {
            queue2.interleaved = null;
            var firstInterleavedUpdate = lastInterleavedUpdate.next;
            var lastPendingUpdate = queue2.pending;
            if (lastPendingUpdate !== null) {
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = firstInterleavedUpdate;
              lastInterleavedUpdate.next = firstPendingUpdate;
            }
            queue2.pending = lastInterleavedUpdate;
          }
        }
        concurrentQueues = null;
      }
    }
    function enqueueConcurrentHookUpdate(fiber, queue2, update, lane) {
      var interleaved = queue2.interleaved;
      if (interleaved === null) {
        update.next = update;
        pushConcurrentUpdateQueue(queue2);
      } else {
        update.next = interleaved.next;
        interleaved.next = update;
      }
      queue2.interleaved = update;
      return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue2, update, lane) {
      var interleaved = queue2.interleaved;
      if (interleaved === null) {
        update.next = update;
        pushConcurrentUpdateQueue(queue2);
      } else {
        update.next = interleaved.next;
        interleaved.next = update;
      }
      queue2.interleaved = update;
    }
    function enqueueConcurrentClassUpdate(fiber, queue2, update, lane) {
      var interleaved = queue2.interleaved;
      if (interleaved === null) {
        update.next = update;
        pushConcurrentUpdateQueue(queue2);
      } else {
        update.next = interleaved.next;
        interleaved.next = update;
      }
      queue2.interleaved = update;
      return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    function enqueueConcurrentRenderForLane(fiber, lane) {
      return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
      var alternate = sourceFiber.alternate;
      if (alternate !== null) {
        alternate.lanes = mergeLanes(alternate.lanes, lane);
      }
      {
        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        }
      }
      var node2 = sourceFiber;
      var parent = sourceFiber.return;
      while (parent !== null) {
        parent.childLanes = mergeLanes(parent.childLanes, lane);
        alternate = parent.alternate;
        if (alternate !== null) {
          alternate.childLanes = mergeLanes(alternate.childLanes, lane);
        } else {
          {
            if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
        }
        node2 = parent;
        parent = parent.return;
      }
      if (node2.tag === HostRoot) {
        var root2 = node2.stateNode;
        return root2;
      } else {
        return null;
      }
    }
    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3;
    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate;
    var currentlyProcessingQueue;
    {
      didWarnUpdateInsideUpdate = false;
      currentlyProcessingQueue = null;
    }
    function initializeUpdateQueue(fiber) {
      var queue2 = {
        baseState: fiber.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: {
          pending: null,
          interleaved: null,
          lanes: NoLanes
        },
        effects: null
      };
      fiber.updateQueue = queue2;
    }
    function cloneUpdateQueue(current2, workInProgress2) {
      var queue2 = workInProgress2.updateQueue;
      var currentQueue = current2.updateQueue;
      if (queue2 === currentQueue) {
        var clone = {
          baseState: currentQueue.baseState,
          firstBaseUpdate: currentQueue.firstBaseUpdate,
          lastBaseUpdate: currentQueue.lastBaseUpdate,
          shared: currentQueue.shared,
          effects: currentQueue.effects
        };
        workInProgress2.updateQueue = clone;
      }
    }
    function createUpdate(eventTime, lane) {
      var update = {
        eventTime,
        lane,
        tag: UpdateState,
        payload: null,
        callback: null,
        next: null
      };
      return update;
    }
    function enqueueUpdate(fiber, update, lane) {
      var updateQueue = fiber.updateQueue;
      if (updateQueue === null) {
        return null;
      }
      var sharedQueue = updateQueue.shared;
      {
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
          error2("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
          didWarnUpdateInsideUpdate = true;
        }
      }
      if (isUnsafeClassRenderPhaseUpdate()) {
        var pending = sharedQueue.pending;
        if (pending === null) {
          update.next = update;
        } else {
          update.next = pending.next;
          pending.next = update;
        }
        sharedQueue.pending = update;
        return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
      } else {
        return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
      }
    }
    function entangleTransitions(root2, fiber, lane) {
      var updateQueue = fiber.updateQueue;
      if (updateQueue === null) {
        return;
      }
      var sharedQueue = updateQueue.shared;
      if (isTransitionLane(lane)) {
        var queueLanes = sharedQueue.lanes;
        queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
        var newQueueLanes = mergeLanes(queueLanes, lane);
        sharedQueue.lanes = newQueueLanes;
        markRootEntangled(root2, newQueueLanes);
      }
    }
    function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
      var queue2 = workInProgress2.updateQueue;
      var current2 = workInProgress2.alternate;
      if (current2 !== null) {
        var currentQueue = current2.updateQueue;
        if (queue2 === currentQueue) {
          var newFirst = null;
          var newLast = null;
          var firstBaseUpdate = queue2.firstBaseUpdate;
          if (firstBaseUpdate !== null) {
            var update = firstBaseUpdate;
            do {
              var clone = {
                eventTime: update.eventTime,
                lane: update.lane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              if (newLast === null) {
                newFirst = newLast = clone;
              } else {
                newLast.next = clone;
                newLast = clone;
              }
              update = update.next;
            } while (update !== null);
            if (newLast === null) {
              newFirst = newLast = capturedUpdate;
            } else {
              newLast.next = capturedUpdate;
              newLast = capturedUpdate;
            }
          } else {
            newFirst = newLast = capturedUpdate;
          }
          queue2 = {
            baseState: currentQueue.baseState,
            firstBaseUpdate: newFirst,
            lastBaseUpdate: newLast,
            shared: currentQueue.shared,
            effects: currentQueue.effects
          };
          workInProgress2.updateQueue = queue2;
          return;
        }
      }
      var lastBaseUpdate = queue2.lastBaseUpdate;
      if (lastBaseUpdate === null) {
        queue2.firstBaseUpdate = capturedUpdate;
      } else {
        lastBaseUpdate.next = capturedUpdate;
      }
      queue2.lastBaseUpdate = capturedUpdate;
    }
    function getStateFromUpdate(workInProgress2, queue2, update, prevState, nextProps, instance2) {
      switch (update.tag) {
        case ReplaceState: {
          var payload = update.payload;
          if (typeof payload === "function") {
            {
              enterDisallowedContextReadInDEV();
            }
            var nextState = payload.call(instance2, prevState, nextProps);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  payload.call(instance2, prevState, nextProps);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              exitDisallowedContextReadInDEV();
            }
            return nextState;
          }
          return payload;
        }
        case CaptureUpdate: {
          workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
        }
        case UpdateState: {
          var _payload = update.payload;
          var partialState;
          if (typeof _payload === "function") {
            {
              enterDisallowedContextReadInDEV();
            }
            partialState = _payload.call(instance2, prevState, nextProps);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  _payload.call(instance2, prevState, nextProps);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              exitDisallowedContextReadInDEV();
            }
          } else {
            partialState = _payload;
          }
          if (partialState === null || partialState === void 0) {
            return prevState;
          }
          return assign2({}, prevState, partialState);
        }
        case ForceUpdate: {
          hasForceUpdate = true;
          return prevState;
        }
      }
      return prevState;
    }
    function processUpdateQueue(workInProgress2, props, instance2, renderLanes2) {
      var queue2 = workInProgress2.updateQueue;
      hasForceUpdate = false;
      {
        currentlyProcessingQueue = queue2.shared;
      }
      var firstBaseUpdate = queue2.firstBaseUpdate;
      var lastBaseUpdate = queue2.lastBaseUpdate;
      var pendingQueue = queue2.shared.pending;
      if (pendingQueue !== null) {
        queue2.shared.pending = null;
        var lastPendingUpdate = pendingQueue;
        var firstPendingUpdate = lastPendingUpdate.next;
        lastPendingUpdate.next = null;
        if (lastBaseUpdate === null) {
          firstBaseUpdate = firstPendingUpdate;
        } else {
          lastBaseUpdate.next = firstPendingUpdate;
        }
        lastBaseUpdate = lastPendingUpdate;
        var current2 = workInProgress2.alternate;
        if (current2 !== null) {
          var currentQueue = current2.updateQueue;
          var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
          if (currentLastBaseUpdate !== lastBaseUpdate) {
            if (currentLastBaseUpdate === null) {
              currentQueue.firstBaseUpdate = firstPendingUpdate;
            } else {
              currentLastBaseUpdate.next = firstPendingUpdate;
            }
            currentQueue.lastBaseUpdate = lastPendingUpdate;
          }
        }
      }
      if (firstBaseUpdate !== null) {
        var newState = queue2.baseState;
        var newLanes = NoLanes;
        var newBaseState = null;
        var newFirstBaseUpdate = null;
        var newLastBaseUpdate = null;
        var update = firstBaseUpdate;
        do {
          var updateLane = update.lane;
          var updateEventTime = update.eventTime;
          if (!isSubsetOfLanes(renderLanes2, updateLane)) {
            var clone = {
              eventTime: updateEventTime,
              lane: updateLane,
              tag: update.tag,
              payload: update.payload,
              callback: update.callback,
              next: null
            };
            if (newLastBaseUpdate === null) {
              newFirstBaseUpdate = newLastBaseUpdate = clone;
              newBaseState = newState;
            } else {
              newLastBaseUpdate = newLastBaseUpdate.next = clone;
            }
            newLanes = mergeLanes(newLanes, updateLane);
          } else {
            if (newLastBaseUpdate !== null) {
              var _clone = {
                eventTime: updateEventTime,
                // This update is going to be committed so we never want uncommit
                // it. Using NoLane works because 0 is a subset of all bitmasks, so
                // this will never be skipped by the check above.
                lane: NoLane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              newLastBaseUpdate = newLastBaseUpdate.next = _clone;
            }
            newState = getStateFromUpdate(workInProgress2, queue2, update, newState, props, instance2);
            var callback = update.callback;
            if (callback !== null && // If the update was already committed, we should not queue its
            // callback again.
            update.lane !== NoLane) {
              workInProgress2.flags |= Callback;
              var effects = queue2.effects;
              if (effects === null) {
                queue2.effects = [update];
              } else {
                effects.push(update);
              }
            }
          }
          update = update.next;
          if (update === null) {
            pendingQueue = queue2.shared.pending;
            if (pendingQueue === null) {
              break;
            } else {
              var _lastPendingUpdate = pendingQueue;
              var _firstPendingUpdate = _lastPendingUpdate.next;
              _lastPendingUpdate.next = null;
              update = _firstPendingUpdate;
              queue2.lastBaseUpdate = _lastPendingUpdate;
              queue2.shared.pending = null;
            }
          }
        } while (true);
        if (newLastBaseUpdate === null) {
          newBaseState = newState;
        }
        queue2.baseState = newBaseState;
        queue2.firstBaseUpdate = newFirstBaseUpdate;
        queue2.lastBaseUpdate = newLastBaseUpdate;
        var lastInterleaved = queue2.shared.interleaved;
        if (lastInterleaved !== null) {
          var interleaved = lastInterleaved;
          do {
            newLanes = mergeLanes(newLanes, interleaved.lane);
            interleaved = interleaved.next;
          } while (interleaved !== lastInterleaved);
        } else if (firstBaseUpdate === null) {
          queue2.shared.lanes = NoLanes;
        }
        markSkippedUpdateLanes(newLanes);
        workInProgress2.lanes = newLanes;
        workInProgress2.memoizedState = newState;
      }
      {
        currentlyProcessingQueue = null;
      }
    }
    function callCallback(callback, context) {
      if (typeof callback !== "function") {
        throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
      }
      callback.call(context);
    }
    function resetHasForceUpdateBeforeProcessing() {
      hasForceUpdate = false;
    }
    function checkHasForceUpdateAfterProcessing() {
      return hasForceUpdate;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance2) {
      var effects = finishedQueue.effects;
      finishedQueue.effects = null;
      if (effects !== null) {
        for (var i = 0; i < effects.length; i++) {
          var effect = effects[i];
          var callback = effect.callback;
          if (callback !== null) {
            effect.callback = null;
            callCallback(callback, instance2);
          }
        }
      }
    }
    var fakeInternalInstance = {};
    var emptyRefsObject = new React2.Component().refs;
    var didWarnAboutStateAssignmentForComponent;
    var didWarnAboutUninitializedState;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
    var didWarnAboutLegacyLifecyclesAndDerivedState;
    var didWarnAboutUndefinedDerivedState;
    var warnOnUndefinedDerivedState;
    var warnOnInvalidCallback;
    var didWarnAboutDirectlyAssigningPropsToState;
    var didWarnAboutContextTypeAndContextTypes;
    var didWarnAboutInvalidateContextType;
    {
      didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
      didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
      didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
      didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
      didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
      didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
      didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
      var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
      warnOnInvalidCallback = function(callback, callerName) {
        if (callback === null || typeof callback === "function") {
          return;
        }
        var key = callerName + "_" + callback;
        if (!didWarnOnInvalidCallback.has(key)) {
          didWarnOnInvalidCallback.add(key);
          error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
      };
      warnOnUndefinedDerivedState = function(type, partialState) {
        if (partialState === void 0) {
          var componentName = getComponentNameFromType(type) || "Component";
          if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
            didWarnAboutUndefinedDerivedState.add(componentName);
            error2("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
          }
        }
      };
      Object.defineProperty(fakeInternalInstance, "_processChildContext", {
        enumerable: false,
        value: function() {
          throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
      });
      Object.freeze(fakeInternalInstance);
    }
    function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
      var prevState = workInProgress2.memoizedState;
      var partialState = getDerivedStateFromProps(nextProps, prevState);
      {
        if (workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(true);
          try {
            partialState = getDerivedStateFromProps(nextProps, prevState);
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        warnOnUndefinedDerivedState(ctor, partialState);
      }
      var memoizedState = partialState === null || partialState === void 0 ? prevState : assign2({}, prevState, partialState);
      workInProgress2.memoizedState = memoizedState;
      if (workInProgress2.lanes === NoLanes) {
        var updateQueue = workInProgress2.updateQueue;
        updateQueue.baseState = memoizedState;
      }
    }
    var classComponentUpdater = {
      isMounted,
      enqueueSetState: function(inst, payload, callback) {
        var fiber = get2(inst);
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = createUpdate(eventTime, lane);
        update.payload = payload;
        if (callback !== void 0 && callback !== null) {
          {
            warnOnInvalidCallback(callback, "setState");
          }
          update.callback = callback;
        }
        var root2 = enqueueUpdate(fiber, update, lane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          entangleTransitions(root2, fiber, lane);
        }
        {
          markStateUpdateScheduled(fiber, lane);
        }
      },
      enqueueReplaceState: function(inst, payload, callback) {
        var fiber = get2(inst);
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = createUpdate(eventTime, lane);
        update.tag = ReplaceState;
        update.payload = payload;
        if (callback !== void 0 && callback !== null) {
          {
            warnOnInvalidCallback(callback, "replaceState");
          }
          update.callback = callback;
        }
        var root2 = enqueueUpdate(fiber, update, lane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          entangleTransitions(root2, fiber, lane);
        }
        {
          markStateUpdateScheduled(fiber, lane);
        }
      },
      enqueueForceUpdate: function(inst, callback) {
        var fiber = get2(inst);
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = createUpdate(eventTime, lane);
        update.tag = ForceUpdate;
        if (callback !== void 0 && callback !== null) {
          {
            warnOnInvalidCallback(callback, "forceUpdate");
          }
          update.callback = callback;
        }
        var root2 = enqueueUpdate(fiber, update, lane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          entangleTransitions(root2, fiber, lane);
        }
        {
          markForceUpdateScheduled(fiber, lane);
        }
      }
    };
    function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
      var instance2 = workInProgress2.stateNode;
      if (typeof instance2.shouldComponentUpdate === "function") {
        var shouldUpdate = instance2.shouldComponentUpdate(newProps, newState, nextContext);
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              shouldUpdate = instance2.shouldComponentUpdate(newProps, newState, nextContext);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          if (shouldUpdate === void 0) {
            error2("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
          }
        }
        return shouldUpdate;
      }
      if (ctor.prototype && ctor.prototype.isPureReactComponent) {
        return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
      }
      return true;
    }
    function checkClassInstance(workInProgress2, ctor, newProps) {
      var instance2 = workInProgress2.stateNode;
      {
        var name = getComponentNameFromType(ctor) || "Component";
        var renderPresent = instance2.render;
        if (!renderPresent) {
          if (ctor.prototype && typeof ctor.prototype.render === "function") {
            error2("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
          } else {
            error2("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
          }
        }
        if (instance2.getInitialState && !instance2.getInitialState.isReactClassApproved && !instance2.state) {
          error2("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
        }
        if (instance2.getDefaultProps && !instance2.getDefaultProps.isReactClassApproved) {
          error2("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
        }
        if (instance2.propTypes) {
          error2("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
        }
        if (instance2.contextType) {
          error2("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
        }
        {
          if (instance2.contextTypes) {
            error2("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
          }
          if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
            didWarnAboutContextTypeAndContextTypes.add(ctor);
            error2("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
          }
        }
        if (typeof instance2.componentShouldUpdate === "function") {
          error2("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance2.shouldComponentUpdate !== "undefined") {
          error2("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
        }
        if (typeof instance2.componentDidUnmount === "function") {
          error2("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
        }
        if (typeof instance2.componentDidReceiveProps === "function") {
          error2("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
        }
        if (typeof instance2.componentWillRecieveProps === "function") {
          error2("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
        }
        if (typeof instance2.UNSAFE_componentWillRecieveProps === "function") {
          error2("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
        }
        var hasMutatedProps = instance2.props !== newProps;
        if (instance2.props !== void 0 && hasMutatedProps) {
          error2("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
        }
        if (instance2.defaultProps) {
          error2("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
        }
        if (typeof instance2.getSnapshotBeforeUpdate === "function" && typeof instance2.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
          error2("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
        }
        if (typeof instance2.getDerivedStateFromProps === "function") {
          error2("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        }
        if (typeof instance2.getDerivedStateFromError === "function") {
          error2("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        }
        if (typeof ctor.getSnapshotBeforeUpdate === "function") {
          error2("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
        }
        var _state = instance2.state;
        if (_state && (typeof _state !== "object" || isArray2(_state))) {
          error2("%s.state: must be set to an object or null", name);
        }
        if (typeof instance2.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
          error2("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
        }
      }
    }
    function adoptClassInstance(workInProgress2, instance2) {
      instance2.updater = classComponentUpdater;
      workInProgress2.stateNode = instance2;
      set(instance2, workInProgress2);
      {
        instance2._reactInternalInstance = fakeInternalInstance;
      }
    }
    function constructClassInstance(workInProgress2, ctor, props) {
      var isLegacyContextConsumer = false;
      var unmaskedContext = emptyContextObject;
      var context = emptyContextObject;
      var contextType = ctor.contextType;
      {
        if ("contextType" in ctor) {
          var isValid2 = (
            // Allow null for conditional declaration
            contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
          );
          if (!isValid2 && !didWarnAboutInvalidateContextType.has(ctor)) {
            didWarnAboutInvalidateContextType.add(ctor);
            var addendum = "";
            if (contextType === void 0) {
              addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
            } else if (typeof contextType !== "object") {
              addendum = " However, it is set to a " + typeof contextType + ".";
            } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
              addendum = " Did you accidentally pass the Context.Provider instead?";
            } else if (contextType._context !== void 0) {
              addendum = " Did you accidentally pass the Context.Consumer instead?";
            } else {
              addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
            }
            error2("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
          }
        }
      }
      if (typeof contextType === "object" && contextType !== null) {
        context = readContext(contextType);
      } else {
        unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
        var contextTypes = ctor.contextTypes;
        isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
        context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
      }
      var instance2 = new ctor(props, context);
      {
        if (workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(true);
          try {
            instance2 = new ctor(props, context);
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
      }
      var state = workInProgress2.memoizedState = instance2.state !== null && instance2.state !== void 0 ? instance2.state : null;
      adoptClassInstance(workInProgress2, instance2);
      {
        if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
          var componentName = getComponentNameFromType(ctor) || "Component";
          if (!didWarnAboutUninitializedState.has(componentName)) {
            didWarnAboutUninitializedState.add(componentName);
            error2("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance2.state === null ? "null" : "undefined", componentName);
          }
        }
        if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance2.getSnapshotBeforeUpdate === "function") {
          var foundWillMountName = null;
          var foundWillReceivePropsName = null;
          var foundWillUpdateName = null;
          if (typeof instance2.componentWillMount === "function" && instance2.componentWillMount.__suppressDeprecationWarning !== true) {
            foundWillMountName = "componentWillMount";
          } else if (typeof instance2.UNSAFE_componentWillMount === "function") {
            foundWillMountName = "UNSAFE_componentWillMount";
          }
          if (typeof instance2.componentWillReceiveProps === "function" && instance2.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            foundWillReceivePropsName = "componentWillReceiveProps";
          } else if (typeof instance2.UNSAFE_componentWillReceiveProps === "function") {
            foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
          }
          if (typeof instance2.componentWillUpdate === "function" && instance2.componentWillUpdate.__suppressDeprecationWarning !== true) {
            foundWillUpdateName = "componentWillUpdate";
          } else if (typeof instance2.UNSAFE_componentWillUpdate === "function") {
            foundWillUpdateName = "UNSAFE_componentWillUpdate";
          }
          if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
            var _componentName = getComponentNameFromType(ctor) || "Component";
            var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
            if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
              didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
              error2("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
            }
          }
        }
      }
      if (isLegacyContextConsumer) {
        cacheContext(workInProgress2, unmaskedContext, context);
      }
      return instance2;
    }
    function callComponentWillMount(workInProgress2, instance2) {
      var oldState = instance2.state;
      if (typeof instance2.componentWillMount === "function") {
        instance2.componentWillMount();
      }
      if (typeof instance2.UNSAFE_componentWillMount === "function") {
        instance2.UNSAFE_componentWillMount();
      }
      if (oldState !== instance2.state) {
        {
          error2("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
        }
        classComponentUpdater.enqueueReplaceState(instance2, instance2.state, null);
      }
    }
    function callComponentWillReceiveProps(workInProgress2, instance2, newProps, nextContext) {
      var oldState = instance2.state;
      if (typeof instance2.componentWillReceiveProps === "function") {
        instance2.componentWillReceiveProps(newProps, nextContext);
      }
      if (typeof instance2.UNSAFE_componentWillReceiveProps === "function") {
        instance2.UNSAFE_componentWillReceiveProps(newProps, nextContext);
      }
      if (instance2.state !== oldState) {
        {
          var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
          if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
            didWarnAboutStateAssignmentForComponent.add(componentName);
            error2("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
          }
        }
        classComponentUpdater.enqueueReplaceState(instance2, instance2.state, null);
      }
    }
    function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
      {
        checkClassInstance(workInProgress2, ctor, newProps);
      }
      var instance2 = workInProgress2.stateNode;
      instance2.props = newProps;
      instance2.state = workInProgress2.memoizedState;
      instance2.refs = emptyRefsObject;
      initializeUpdateQueue(workInProgress2);
      var contextType = ctor.contextType;
      if (typeof contextType === "object" && contextType !== null) {
        instance2.context = readContext(contextType);
      } else {
        var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
        instance2.context = getMaskedContext(workInProgress2, unmaskedContext);
      }
      {
        if (instance2.state === newProps) {
          var componentName = getComponentNameFromType(ctor) || "Component";
          if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
            didWarnAboutDirectlyAssigningPropsToState.add(componentName);
            error2("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
          }
        }
        if (workInProgress2.mode & StrictLegacyMode) {
          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance2);
        }
        {
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance2);
        }
      }
      instance2.state = workInProgress2.memoizedState;
      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      if (typeof getDerivedStateFromProps === "function") {
        applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
        instance2.state = workInProgress2.memoizedState;
      }
      if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance2.getSnapshotBeforeUpdate !== "function" && (typeof instance2.UNSAFE_componentWillMount === "function" || typeof instance2.componentWillMount === "function")) {
        callComponentWillMount(workInProgress2, instance2);
        processUpdateQueue(workInProgress2, newProps, instance2, renderLanes2);
        instance2.state = workInProgress2.memoizedState;
      }
      if (typeof instance2.componentDidMount === "function") {
        var fiberFlags = Update;
        {
          fiberFlags |= LayoutStatic;
        }
        if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
          fiberFlags |= MountLayoutDev;
        }
        workInProgress2.flags |= fiberFlags;
      }
    }
    function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
      var instance2 = workInProgress2.stateNode;
      var oldProps = workInProgress2.memoizedProps;
      instance2.props = oldProps;
      var oldContext = instance2.context;
      var contextType = ctor.contextType;
      var nextContext = emptyContextObject;
      if (typeof contextType === "object" && contextType !== null) {
        nextContext = readContext(contextType);
      } else {
        var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
        nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
      }
      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance2.getSnapshotBeforeUpdate === "function";
      if (!hasNewLifecycles && (typeof instance2.UNSAFE_componentWillReceiveProps === "function" || typeof instance2.componentWillReceiveProps === "function")) {
        if (oldProps !== newProps || oldContext !== nextContext) {
          callComponentWillReceiveProps(workInProgress2, instance2, newProps, nextContext);
        }
      }
      resetHasForceUpdateBeforeProcessing();
      var oldState = workInProgress2.memoizedState;
      var newState = instance2.state = oldState;
      processUpdateQueue(workInProgress2, newProps, instance2, renderLanes2);
      newState = workInProgress2.memoizedState;
      if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
        if (typeof instance2.componentDidMount === "function") {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          workInProgress2.flags |= fiberFlags;
        }
        return false;
      }
      if (typeof getDerivedStateFromProps === "function") {
        applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
        newState = workInProgress2.memoizedState;
      }
      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
      if (shouldUpdate) {
        if (!hasNewLifecycles && (typeof instance2.UNSAFE_componentWillMount === "function" || typeof instance2.componentWillMount === "function")) {
          if (typeof instance2.componentWillMount === "function") {
            instance2.componentWillMount();
          }
          if (typeof instance2.UNSAFE_componentWillMount === "function") {
            instance2.UNSAFE_componentWillMount();
          }
        }
        if (typeof instance2.componentDidMount === "function") {
          var _fiberFlags = Update;
          {
            _fiberFlags |= LayoutStatic;
          }
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            _fiberFlags |= MountLayoutDev;
          }
          workInProgress2.flags |= _fiberFlags;
        }
      } else {
        if (typeof instance2.componentDidMount === "function") {
          var _fiberFlags2 = Update;
          {
            _fiberFlags2 |= LayoutStatic;
          }
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            _fiberFlags2 |= MountLayoutDev;
          }
          workInProgress2.flags |= _fiberFlags2;
        }
        workInProgress2.memoizedProps = newProps;
        workInProgress2.memoizedState = newState;
      }
      instance2.props = newProps;
      instance2.state = newState;
      instance2.context = nextContext;
      return shouldUpdate;
    }
    function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
      var instance2 = workInProgress2.stateNode;
      cloneUpdateQueue(current2, workInProgress2);
      var unresolvedOldProps = workInProgress2.memoizedProps;
      var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
      instance2.props = oldProps;
      var unresolvedNewProps = workInProgress2.pendingProps;
      var oldContext = instance2.context;
      var contextType = ctor.contextType;
      var nextContext = emptyContextObject;
      if (typeof contextType === "object" && contextType !== null) {
        nextContext = readContext(contextType);
      } else {
        var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
        nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
      }
      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance2.getSnapshotBeforeUpdate === "function";
      if (!hasNewLifecycles && (typeof instance2.UNSAFE_componentWillReceiveProps === "function" || typeof instance2.componentWillReceiveProps === "function")) {
        if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
          callComponentWillReceiveProps(workInProgress2, instance2, newProps, nextContext);
        }
      }
      resetHasForceUpdateBeforeProcessing();
      var oldState = workInProgress2.memoizedState;
      var newState = instance2.state = oldState;
      processUpdateQueue(workInProgress2, newProps, instance2, renderLanes2);
      newState = workInProgress2.memoizedState;
      if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
        if (typeof instance2.componentDidUpdate === "function") {
          if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
            workInProgress2.flags |= Update;
          }
        }
        if (typeof instance2.getSnapshotBeforeUpdate === "function") {
          if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
            workInProgress2.flags |= Snapshot;
          }
        }
        return false;
      }
      if (typeof getDerivedStateFromProps === "function") {
        applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
        newState = workInProgress2.memoizedState;
      }
      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
      // both before and after `shouldComponentUpdate` has been called. Not ideal,
      // but I'm loath to refactor this function. This only happens for memoized
      // components so it's not that common.
      enableLazyContextPropagation;
      if (shouldUpdate) {
        if (!hasNewLifecycles && (typeof instance2.UNSAFE_componentWillUpdate === "function" || typeof instance2.componentWillUpdate === "function")) {
          if (typeof instance2.componentWillUpdate === "function") {
            instance2.componentWillUpdate(newProps, newState, nextContext);
          }
          if (typeof instance2.UNSAFE_componentWillUpdate === "function") {
            instance2.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
          }
        }
        if (typeof instance2.componentDidUpdate === "function") {
          workInProgress2.flags |= Update;
        }
        if (typeof instance2.getSnapshotBeforeUpdate === "function") {
          workInProgress2.flags |= Snapshot;
        }
      } else {
        if (typeof instance2.componentDidUpdate === "function") {
          if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
            workInProgress2.flags |= Update;
          }
        }
        if (typeof instance2.getSnapshotBeforeUpdate === "function") {
          if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
            workInProgress2.flags |= Snapshot;
          }
        }
        workInProgress2.memoizedProps = newProps;
        workInProgress2.memoizedState = newState;
      }
      instance2.props = newProps;
      instance2.state = newState;
      instance2.context = nextContext;
      return shouldUpdate;
    }
    var didWarnAboutMaps;
    var didWarnAboutGenerators;
    var didWarnAboutStringRefs;
    var ownerHasKeyUseWarning;
    var ownerHasFunctionTypeWarning;
    var warnForMissingKey = function(child, returnFiber) {
    };
    {
      didWarnAboutMaps = false;
      didWarnAboutGenerators = false;
      didWarnAboutStringRefs = {};
      ownerHasKeyUseWarning = {};
      ownerHasFunctionTypeWarning = {};
      warnForMissingKey = function(child, returnFiber) {
        if (child === null || typeof child !== "object") {
          return;
        }
        if (!child._store || child._store.validated || child.key != null) {
          return;
        }
        if (typeof child._store !== "object") {
          throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        }
        child._store.validated = true;
        var componentName = getComponentNameFromFiber(returnFiber) || "Component";
        if (ownerHasKeyUseWarning[componentName]) {
          return;
        }
        ownerHasKeyUseWarning[componentName] = true;
        error2('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
      };
    }
    function coerceRef(returnFiber, current2, element) {
      var mixedRef = element.ref;
      if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
        {
          if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
          // because these cannot be automatically converted to an arrow function
          // using a codemod. Therefore, we don't have to warn about string refs again.
          !(element._owner && element._self && element._owner.stateNode !== element._self)) {
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (!didWarnAboutStringRefs[componentName]) {
              {
                error2('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
              }
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
        if (element._owner) {
          var owner = element._owner;
          var inst;
          if (owner) {
            var ownerFiber = owner;
            if (ownerFiber.tag !== ClassComponent) {
              throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
            }
            inst = ownerFiber.stateNode;
          }
          if (!inst) {
            throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
          }
          var resolvedInst = inst;
          {
            checkPropStringCoercion(mixedRef, "ref");
          }
          var stringRef = "" + mixedRef;
          if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
            return current2.ref;
          }
          var ref = function(value) {
            var refs = resolvedInst.refs;
            if (refs === emptyRefsObject) {
              refs = resolvedInst.refs = {};
            }
            if (value === null) {
              delete refs[stringRef];
            } else {
              refs[stringRef] = value;
            }
          };
          ref._stringRef = stringRef;
          return ref;
        } else {
          if (typeof mixedRef !== "string") {
            throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
          }
          if (!element._owner) {
            throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
          }
        }
      }
      return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
      var childString = Object.prototype.toString.call(newChild);
      throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
    }
    function warnOnFunctionType(returnFiber) {
      {
        var componentName = getComponentNameFromFiber(returnFiber) || "Component";
        if (ownerHasFunctionTypeWarning[componentName]) {
          return;
        }
        ownerHasFunctionTypeWarning[componentName] = true;
        error2("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
      }
    }
    function resolveLazy(lazyType2) {
      var payload = lazyType2._payload;
      var init3 = lazyType2._init;
      return init3(payload);
    }
    function ChildReconciler(shouldTrackSideEffects) {
      function deleteChild(returnFiber, childToDelete) {
        if (!shouldTrackSideEffects) {
          return;
        }
        var deletions = returnFiber.deletions;
        if (deletions === null) {
          returnFiber.deletions = [childToDelete];
          returnFiber.flags |= ChildDeletion;
        } else {
          deletions.push(childToDelete);
        }
      }
      function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) {
          return null;
        }
        var childToDelete = currentFirstChild;
        while (childToDelete !== null) {
          deleteChild(returnFiber, childToDelete);
          childToDelete = childToDelete.sibling;
        }
        return null;
      }
      function mapRemainingChildren(returnFiber, currentFirstChild) {
        var existingChildren = /* @__PURE__ */ new Map();
        var existingChild = currentFirstChild;
        while (existingChild !== null) {
          if (existingChild.key !== null) {
            existingChildren.set(existingChild.key, existingChild);
          } else {
            existingChildren.set(existingChild.index, existingChild);
          }
          existingChild = existingChild.sibling;
        }
        return existingChildren;
      }
      function useFiber(fiber, pendingProps) {
        var clone = createWorkInProgress(fiber, pendingProps);
        clone.index = 0;
        clone.sibling = null;
        return clone;
      }
      function placeChild(newFiber, lastPlacedIndex, newIndex) {
        newFiber.index = newIndex;
        if (!shouldTrackSideEffects) {
          newFiber.flags |= Forked;
          return lastPlacedIndex;
        }
        var current2 = newFiber.alternate;
        if (current2 !== null) {
          var oldIndex = current2.index;
          if (oldIndex < lastPlacedIndex) {
            newFiber.flags |= Placement;
            return lastPlacedIndex;
          } else {
            return oldIndex;
          }
        } else {
          newFiber.flags |= Placement;
          return lastPlacedIndex;
        }
      }
      function placeSingleChild(newFiber) {
        if (shouldTrackSideEffects && newFiber.alternate === null) {
          newFiber.flags |= Placement;
        }
        return newFiber;
      }
      function updateTextNode(returnFiber, current2, textContent, lanes) {
        if (current2 === null || current2.tag !== HostText) {
          var created = createFiberFromText(textContent, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        } else {
          var existing = useFiber(current2, textContent);
          existing.return = returnFiber;
          return existing;
        }
      }
      function updateElement(returnFiber, current2, element, lanes) {
        var elementType = element.type;
        if (elementType === REACT_FRAGMENT_TYPE) {
          return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
        }
        if (current2 !== null) {
          if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
          isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
          // We need to do this after the Hot Reloading check above,
          // because hot reloading has different semantics than prod because
          // it doesn't resuspend. So we can't let the call below suspend.
          typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
            var existing = useFiber(current2, element.props);
            existing.ref = coerceRef(returnFiber, current2, element);
            existing.return = returnFiber;
            {
              existing._debugSource = element._source;
              existing._debugOwner = element._owner;
            }
            return existing;
          }
        }
        var created = createFiberFromElement(element, returnFiber.mode, lanes);
        created.ref = coerceRef(returnFiber, current2, element);
        created.return = returnFiber;
        return created;
      }
      function updatePortal(returnFiber, current2, portal, lanes) {
        if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        } else {
          var existing = useFiber(current2, portal.children || []);
          existing.return = returnFiber;
          return existing;
        }
      }
      function updateFragment2(returnFiber, current2, fragment, lanes, key) {
        if (current2 === null || current2.tag !== Fragment) {
          var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
          created.return = returnFiber;
          return created;
        } else {
          var existing = useFiber(current2, fragment);
          existing.return = returnFiber;
          return existing;
        }
      }
      function createChild(returnFiber, newChild, lanes) {
        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
          var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }
        if (typeof newChild === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE: {
              var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
              _created.ref = coerceRef(returnFiber, null, newChild);
              _created.return = returnFiber;
              return _created;
            }
            case REACT_PORTAL_TYPE: {
              var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
              _created2.return = returnFiber;
              return _created2;
            }
            case REACT_LAZY_TYPE: {
              var payload = newChild._payload;
              var init3 = newChild._init;
              return createChild(returnFiber, init3(payload), lanes);
            }
          }
          if (isArray2(newChild) || getIteratorFn(newChild)) {
            var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
            _created3.return = returnFiber;
            return _created3;
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        {
          if (typeof newChild === "function") {
            warnOnFunctionType(returnFiber);
          }
        }
        return null;
      }
      function updateSlot(returnFiber, oldFiber, newChild, lanes) {
        var key = oldFiber !== null ? oldFiber.key : null;
        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
          if (key !== null) {
            return null;
          }
          return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
        }
        if (typeof newChild === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE: {
              if (newChild.key === key) {
                return updateElement(returnFiber, oldFiber, newChild, lanes);
              } else {
                return null;
              }
            }
            case REACT_PORTAL_TYPE: {
              if (newChild.key === key) {
                return updatePortal(returnFiber, oldFiber, newChild, lanes);
              } else {
                return null;
              }
            }
            case REACT_LAZY_TYPE: {
              var payload = newChild._payload;
              var init3 = newChild._init;
              return updateSlot(returnFiber, oldFiber, init3(payload), lanes);
            }
          }
          if (isArray2(newChild) || getIteratorFn(newChild)) {
            if (key !== null) {
              return null;
            }
            return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        {
          if (typeof newChild === "function") {
            warnOnFunctionType(returnFiber);
          }
        }
        return null;
      }
      function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
          var matchedFiber = existingChildren.get(newIdx) || null;
          return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
        }
        if (typeof newChild === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE: {
              var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
              return updateElement(returnFiber, _matchedFiber, newChild, lanes);
            }
            case REACT_PORTAL_TYPE: {
              var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
              return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
            }
            case REACT_LAZY_TYPE:
              var payload = newChild._payload;
              var init3 = newChild._init;
              return updateFromMap(existingChildren, returnFiber, newIdx, init3(payload), lanes);
          }
          if (isArray2(newChild) || getIteratorFn(newChild)) {
            var _matchedFiber3 = existingChildren.get(newIdx) || null;
            return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        {
          if (typeof newChild === "function") {
            warnOnFunctionType(returnFiber);
          }
        }
        return null;
      }
      function warnOnInvalidKey(child, knownKeys, returnFiber) {
        {
          if (typeof child !== "object" || child === null) {
            return knownKeys;
          }
          switch (child.$$typeof) {
            case REACT_ELEMENT_TYPE:
            case REACT_PORTAL_TYPE:
              warnForMissingKey(child, returnFiber);
              var key = child.key;
              if (typeof key !== "string") {
                break;
              }
              if (knownKeys === null) {
                knownKeys = /* @__PURE__ */ new Set();
                knownKeys.add(key);
                break;
              }
              if (!knownKeys.has(key)) {
                knownKeys.add(key);
                break;
              }
              error2("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", key);
              break;
            case REACT_LAZY_TYPE:
              var payload = child._payload;
              var init3 = child._init;
              warnOnInvalidKey(init3(payload), knownKeys, returnFiber);
              break;
          }
        }
        return knownKeys;
      }
      function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
        {
          var knownKeys = null;
          for (var i = 0; i < newChildren.length; i++) {
            var child = newChildren[i];
            knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
          }
        }
        var resultingFirstChild = null;
        var previousNewFiber = null;
        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;
        for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }
          var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
          if (newFiber === null) {
            if (oldFiber === null) {
              oldFiber = nextOldFiber;
            }
            break;
          }
          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              deleteChild(returnFiber, oldFiber);
            }
          }
          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
          if (previousNewFiber === null) {
            resultingFirstChild = newFiber;
          } else {
            previousNewFiber.sibling = newFiber;
          }
          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }
        if (newIdx === newChildren.length) {
          deleteRemainingChildren(returnFiber, oldFiber);
          if (getIsHydrating()) {
            var numberOfForks = newIdx;
            pushTreeFork(returnFiber, numberOfForks);
          }
          return resultingFirstChild;
        }
        if (oldFiber === null) {
          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
            if (_newFiber === null) {
              continue;
            }
            lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber;
            } else {
              previousNewFiber.sibling = _newFiber;
            }
            previousNewFiber = _newFiber;
          }
          if (getIsHydrating()) {
            var _numberOfForks = newIdx;
            pushTreeFork(returnFiber, _numberOfForks);
          }
          return resultingFirstChild;
        }
        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
        for (; newIdx < newChildren.length; newIdx++) {
          var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
          if (_newFiber2 !== null) {
            if (shouldTrackSideEffects) {
              if (_newFiber2.alternate !== null) {
                existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
              }
            }
            lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber2;
            } else {
              previousNewFiber.sibling = _newFiber2;
            }
            previousNewFiber = _newFiber2;
          }
        }
        if (shouldTrackSideEffects) {
          existingChildren.forEach(function(child2) {
            return deleteChild(returnFiber, child2);
          });
        }
        if (getIsHydrating()) {
          var _numberOfForks2 = newIdx;
          pushTreeFork(returnFiber, _numberOfForks2);
        }
        return resultingFirstChild;
      }
      function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
        var iteratorFn = getIteratorFn(newChildrenIterable);
        if (typeof iteratorFn !== "function") {
          throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
        }
        {
          if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
          newChildrenIterable[Symbol.toStringTag] === "Generator") {
            if (!didWarnAboutGenerators) {
              error2("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
            }
            didWarnAboutGenerators = true;
          }
          if (newChildrenIterable.entries === iteratorFn) {
            if (!didWarnAboutMaps) {
              error2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
            }
            didWarnAboutMaps = true;
          }
          var _newChildren = iteratorFn.call(newChildrenIterable);
          if (_newChildren) {
            var knownKeys = null;
            var _step = _newChildren.next();
            for (; !_step.done; _step = _newChildren.next()) {
              var child = _step.value;
              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
          }
        }
        var newChildren = iteratorFn.call(newChildrenIterable);
        if (newChildren == null) {
          throw new Error("An iterable object provided no iterator.");
        }
        var resultingFirstChild = null;
        var previousNewFiber = null;
        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;
        var step = newChildren.next();
        for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }
          var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
          if (newFiber === null) {
            if (oldFiber === null) {
              oldFiber = nextOldFiber;
            }
            break;
          }
          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              deleteChild(returnFiber, oldFiber);
            }
          }
          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
          if (previousNewFiber === null) {
            resultingFirstChild = newFiber;
          } else {
            previousNewFiber.sibling = newFiber;
          }
          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }
        if (step.done) {
          deleteRemainingChildren(returnFiber, oldFiber);
          if (getIsHydrating()) {
            var numberOfForks = newIdx;
            pushTreeFork(returnFiber, numberOfForks);
          }
          return resultingFirstChild;
        }
        if (oldFiber === null) {
          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber3 = createChild(returnFiber, step.value, lanes);
            if (_newFiber3 === null) {
              continue;
            }
            lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber3;
            } else {
              previousNewFiber.sibling = _newFiber3;
            }
            previousNewFiber = _newFiber3;
          }
          if (getIsHydrating()) {
            var _numberOfForks3 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks3);
          }
          return resultingFirstChild;
        }
        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
        for (; !step.done; newIdx++, step = newChildren.next()) {
          var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
          if (_newFiber4 !== null) {
            if (shouldTrackSideEffects) {
              if (_newFiber4.alternate !== null) {
                existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
              }
            }
            lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber4;
            } else {
              previousNewFiber.sibling = _newFiber4;
            }
            previousNewFiber = _newFiber4;
          }
        }
        if (shouldTrackSideEffects) {
          existingChildren.forEach(function(child2) {
            return deleteChild(returnFiber, child2);
          });
        }
        if (getIsHydrating()) {
          var _numberOfForks4 = newIdx;
          pushTreeFork(returnFiber, _numberOfForks4);
        }
        return resultingFirstChild;
      }
      function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
        if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
          deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
          var existing = useFiber(currentFirstChild, textContent);
          existing.return = returnFiber;
          return existing;
        }
        deleteRemainingChildren(returnFiber, currentFirstChild);
        var created = createFiberFromText(textContent, returnFiber.mode, lanes);
        created.return = returnFiber;
        return created;
      }
      function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
        var key = element.key;
        var child = currentFirstChild;
        while (child !== null) {
          if (child.key === key) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) {
              if (child.tag === Fragment) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, element.props.children);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            } else {
              if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
              isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
              // We need to do this after the Hot Reloading check above,
              // because hot reloading has different semantics than prod because
              // it doesn't resuspend. So we can't let the call below suspend.
              typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var _existing = useFiber(child, element.props);
                _existing.ref = coerceRef(returnFiber, child, element);
                _existing.return = returnFiber;
                {
                  _existing._debugSource = element._source;
                  _existing._debugOwner = element._owner;
                }
                return _existing;
              }
            }
            deleteRemainingChildren(returnFiber, child);
            break;
          } else {
            deleteChild(returnFiber, child);
          }
          child = child.sibling;
        }
        if (element.type === REACT_FRAGMENT_TYPE) {
          var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
          created.return = returnFiber;
          return created;
        } else {
          var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
          _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
          _created4.return = returnFiber;
          return _created4;
        }
      }
      function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
        var key = portal.key;
        var child = currentFirstChild;
        while (child !== null) {
          if (child.key === key) {
            if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, portal.children || []);
              existing.return = returnFiber;
              return existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
              break;
            }
          } else {
            deleteChild(returnFiber, child);
          }
          child = child.sibling;
        }
        var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
        created.return = returnFiber;
        return created;
      }
      function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
        var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
        if (isUnkeyedTopLevelFragment) {
          newChild = newChild.props.children;
        }
        if (typeof newChild === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
            case REACT_PORTAL_TYPE:
              return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
            case REACT_LAZY_TYPE:
              var payload = newChild._payload;
              var init3 = newChild._init;
              return reconcileChildFibers2(returnFiber, currentFirstChild, init3(payload), lanes);
          }
          if (isArray2(newChild)) {
            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
          }
          if (getIteratorFn(newChild)) {
            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
          return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
        }
        {
          if (typeof newChild === "function") {
            warnOnFunctionType(returnFiber);
          }
        }
        return deleteRemainingChildren(returnFiber, currentFirstChild);
      }
      return reconcileChildFibers2;
    }
    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);
    function cloneChildFibers(current2, workInProgress2) {
      if (current2 !== null && workInProgress2.child !== current2.child) {
        throw new Error("Resuming work not yet implemented.");
      }
      if (workInProgress2.child === null) {
        return;
      }
      var currentChild = workInProgress2.child;
      var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
      workInProgress2.child = newChild;
      newChild.return = workInProgress2;
      while (currentChild.sibling !== null) {
        currentChild = currentChild.sibling;
        newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
        newChild.return = workInProgress2;
      }
      newChild.sibling = null;
    }
    function resetChildFibers(workInProgress2, lanes) {
      var child = workInProgress2.child;
      while (child !== null) {
        resetWorkInProgress(child, lanes);
        child = child.sibling;
      }
    }
    var NO_CONTEXT = {};
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);
    function requiredContext(c) {
      if (c === NO_CONTEXT) {
        throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
      }
      return c;
    }
    function getRootHostContainer() {
      var rootInstance = requiredContext(rootInstanceStackCursor.current);
      return rootInstance;
    }
    function pushHostContainer(fiber, nextRootInstance) {
      push(rootInstanceStackCursor, nextRootInstance, fiber);
      push(contextFiberStackCursor, fiber, fiber);
      push(contextStackCursor$1, NO_CONTEXT, fiber);
      var nextRootContext = getRootHostContext(nextRootInstance);
      pop(contextStackCursor$1, fiber);
      push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
      pop(contextStackCursor$1, fiber);
      pop(contextFiberStackCursor, fiber);
      pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
      var context = requiredContext(contextStackCursor$1.current);
      return context;
    }
    function pushHostContext(fiber) {
      requiredContext(rootInstanceStackCursor.current);
      var context = requiredContext(contextStackCursor$1.current);
      var nextContext = getChildHostContext(context, fiber.type);
      if (context === nextContext) {
        return;
      }
      push(contextFiberStackCursor, fiber, fiber);
      push(contextStackCursor$1, nextContext, fiber);
    }
    function popHostContext(fiber) {
      if (contextFiberStackCursor.current !== fiber) {
        return;
      }
      pop(contextStackCursor$1, fiber);
      pop(contextFiberStackCursor, fiber);
    }
    var DefaultSuspenseContext = 0;
    var SubtreeSuspenseContextMask = 1;
    var InvisibleParentSuspenseContext = 1;
    var ForceSuspenseFallback = 2;
    var suspenseStackCursor = createCursor(DefaultSuspenseContext);
    function hasSuspenseContext(parentContext, flag) {
      return (parentContext & flag) !== 0;
    }
    function setDefaultShallowSuspenseContext(parentContext) {
      return parentContext & SubtreeSuspenseContextMask;
    }
    function setShallowSuspenseContext(parentContext, shallowContext) {
      return parentContext & SubtreeSuspenseContextMask | shallowContext;
    }
    function addSubtreeSuspenseContext(parentContext, subtreeContext) {
      return parentContext | subtreeContext;
    }
    function pushSuspenseContext(fiber, newContext) {
      push(suspenseStackCursor, newContext, fiber);
    }
    function popSuspenseContext(fiber) {
      pop(suspenseStackCursor, fiber);
    }
    function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
      var nextState = workInProgress2.memoizedState;
      if (nextState !== null) {
        if (nextState.dehydrated !== null) {
          return true;
        }
        return false;
      }
      {
        return true;
      }
    }
    function findFirstSuspended(row) {
      var node2 = row;
      while (node2 !== null) {
        if (node2.tag === SuspenseComponent) {
          var state = node2.memoizedState;
          if (state !== null) {
            var dehydrated = state.dehydrated;
            if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
              return node2;
            }
          }
        } else if (node2.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
        // keep track of whether it suspended or not.
        node2.memoizedProps.revealOrder !== void 0) {
          var didSuspend = (node2.flags & DidCapture) !== NoFlags;
          if (didSuspend) {
            return node2;
          }
        } else if (node2.child !== null) {
          node2.child.return = node2;
          node2 = node2.child;
          continue;
        }
        if (node2 === row) {
          return null;
        }
        while (node2.sibling === null) {
          if (node2.return === null || node2.return === row) {
            return null;
          }
          node2 = node2.return;
        }
        node2.sibling.return = node2.return;
        node2 = node2.sibling;
      }
      return null;
    }
    var NoFlags$1 = (
      /*   */
      0
    );
    var HasEffect = (
      /* */
      1
    );
    var Insertion5 = (
      /*  */
      2
    );
    var Layout = (
      /*    */
      4
    );
    var Passive$1 = (
      /*   */
      8
    );
    var workInProgressSources = [];
    function resetWorkInProgressVersions() {
      for (var i = 0; i < workInProgressSources.length; i++) {
        var mutableSource = workInProgressSources[i];
        {
          mutableSource._workInProgressVersionPrimary = null;
        }
      }
      workInProgressSources.length = 0;
    }
    function registerMutableSourceForHydration(root2, mutableSource) {
      var getVersion = mutableSource._getVersion;
      var version2 = getVersion(mutableSource._source);
      if (root2.mutableSourceEagerHydrationData == null) {
        root2.mutableSourceEagerHydrationData = [mutableSource, version2];
      } else {
        root2.mutableSourceEagerHydrationData.push(mutableSource, version2);
      }
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
    var didWarnAboutMismatchedHooksForComponent;
    var didWarnUncachedGetSnapshot;
    {
      didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
    }
    var renderLanes = NoLanes;
    var currentlyRenderingFiber$1 = null;
    var currentHook = null;
    var workInProgressHook = null;
    var didScheduleRenderPhaseUpdate = false;
    var didScheduleRenderPhaseUpdateDuringThisPass = false;
    var localIdCounter = 0;
    var globalClientIdCounter = 0;
    var RE_RENDER_LIMIT = 25;
    var currentHookNameInDev = null;
    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1;
    var ignorePreviousDependencies = false;
    function mountHookTypesDev() {
      {
        var hookName = currentHookNameInDev;
        if (hookTypesDev === null) {
          hookTypesDev = [hookName];
        } else {
          hookTypesDev.push(hookName);
        }
      }
    }
    function updateHookTypesDev() {
      {
        var hookName = currentHookNameInDev;
        if (hookTypesDev !== null) {
          hookTypesUpdateIndexDev++;
          if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
            warnOnHookMismatchInDev(hookName);
          }
        }
      }
    }
    function checkDepsAreArrayDev(deps) {
      {
        if (deps !== void 0 && deps !== null && !isArray2(deps)) {
          error2("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
        }
      }
    }
    function warnOnHookMismatchInDev(currentHookName) {
      {
        var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
          didWarnAboutMismatchedHooksForComponent.add(componentName);
          if (hookTypesDev !== null) {
            var table = "";
            var secondColumnStart = 30;
            for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
              var oldHookName = hookTypesDev[i];
              var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
              var row = i + 1 + ". " + oldHookName;
              while (row.length < secondColumnStart) {
                row += " ";
              }
              row += newHookName + "\n";
              table += row;
            }
            error2("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
          }
        }
      }
    }
    function throwInvalidHookError() {
      throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
      {
        if (ignorePreviousDependencies) {
          return false;
        }
      }
      if (prevDeps === null) {
        {
          error2("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
        }
        return false;
      }
      {
        if (nextDeps.length !== prevDeps.length) {
          error2("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
        }
      }
      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
        if (objectIs(nextDeps[i], prevDeps[i])) {
          continue;
        }
        return false;
      }
      return true;
    }
    function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
      renderLanes = nextRenderLanes;
      currentlyRenderingFiber$1 = workInProgress2;
      {
        hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1;
        ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
      }
      workInProgress2.memoizedState = null;
      workInProgress2.updateQueue = null;
      workInProgress2.lanes = NoLanes;
      {
        if (current2 !== null && current2.memoizedState !== null) {
          ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        } else if (hookTypesDev !== null) {
          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        } else {
          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        }
      }
      var children = Component(props, secondArg);
      if (didScheduleRenderPhaseUpdateDuringThisPass) {
        var numberOfReRenders = 0;
        do {
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          localIdCounter = 0;
          if (numberOfReRenders >= RE_RENDER_LIMIT) {
            throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          }
          numberOfReRenders += 1;
          {
            ignorePreviousDependencies = false;
          }
          currentHook = null;
          workInProgressHook = null;
          workInProgress2.updateQueue = null;
          {
            hookTypesUpdateIndexDev = -1;
          }
          ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
          children = Component(props, secondArg);
        } while (didScheduleRenderPhaseUpdateDuringThisPass);
      }
      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
      {
        workInProgress2._debugHookTypes = hookTypesDev;
      }
      var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
      renderLanes = NoLanes;
      currentlyRenderingFiber$1 = null;
      currentHook = null;
      workInProgressHook = null;
      {
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
        // and creates false positives. To make this work in legacy mode, we'd
        // need to mark fibers that commit in an incomplete state, somehow. For
        // now I'll disable the warning that most of the bugs that would trigger
        // it are either exclusive to concurrent mode or exist in both.
        (current2.mode & ConcurrentMode) !== NoMode) {
          error2("Internal React error: Expected static flag was missing. Please notify the React team.");
        }
      }
      didScheduleRenderPhaseUpdate = false;
      if (didRenderTooFewHooks) {
        throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
      }
      return children;
    }
    function checkDidRenderIdHook() {
      var didRenderIdHook = localIdCounter !== 0;
      localIdCounter = 0;
      return didRenderIdHook;
    }
    function bailoutHooks(current2, workInProgress2, lanes) {
      workInProgress2.updateQueue = current2.updateQueue;
      if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
        workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
      } else {
        workInProgress2.flags &= ~(Passive | Update);
      }
      current2.lanes = removeLanes(current2.lanes, lanes);
    }
    function resetHooksAfterThrow() {
      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
      if (didScheduleRenderPhaseUpdate) {
        var hook = currentlyRenderingFiber$1.memoizedState;
        while (hook !== null) {
          var queue2 = hook.queue;
          if (queue2 !== null) {
            queue2.pending = null;
          }
          hook = hook.next;
        }
        didScheduleRenderPhaseUpdate = false;
      }
      renderLanes = NoLanes;
      currentlyRenderingFiber$1 = null;
      currentHook = null;
      workInProgressHook = null;
      {
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        isUpdatingOpaqueValueInRenderPhase = false;
      }
      didScheduleRenderPhaseUpdateDuringThisPass = false;
      localIdCounter = 0;
    }
    function mountWorkInProgressHook() {
      var hook = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
      };
      if (workInProgressHook === null) {
        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
      } else {
        workInProgressHook = workInProgressHook.next = hook;
      }
      return workInProgressHook;
    }
    function updateWorkInProgressHook() {
      var nextCurrentHook;
      if (currentHook === null) {
        var current2 = currentlyRenderingFiber$1.alternate;
        if (current2 !== null) {
          nextCurrentHook = current2.memoizedState;
        } else {
          nextCurrentHook = null;
        }
      } else {
        nextCurrentHook = currentHook.next;
      }
      var nextWorkInProgressHook;
      if (workInProgressHook === null) {
        nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
      } else {
        nextWorkInProgressHook = workInProgressHook.next;
      }
      if (nextWorkInProgressHook !== null) {
        workInProgressHook = nextWorkInProgressHook;
        nextWorkInProgressHook = workInProgressHook.next;
        currentHook = nextCurrentHook;
      } else {
        if (nextCurrentHook === null) {
          throw new Error("Rendered more hooks than during the previous render.");
        }
        currentHook = nextCurrentHook;
        var newHook = {
          memoizedState: currentHook.memoizedState,
          baseState: currentHook.baseState,
          baseQueue: currentHook.baseQueue,
          queue: currentHook.queue,
          next: null
        };
        if (workInProgressHook === null) {
          currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
        } else {
          workInProgressHook = workInProgressHook.next = newHook;
        }
      }
      return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
      return {
        lastEffect: null,
        stores: null
      };
    }
    function basicStateReducer(state, action) {
      return typeof action === "function" ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init3) {
      var hook = mountWorkInProgressHook();
      var initialState;
      if (init3 !== void 0) {
        initialState = init3(initialArg);
      } else {
        initialState = initialArg;
      }
      hook.memoizedState = hook.baseState = initialState;
      var queue2 = {
        pending: null,
        interleaved: null,
        lanes: NoLanes,
        dispatch: null,
        lastRenderedReducer: reducer,
        lastRenderedState: initialState
      };
      hook.queue = queue2;
      var dispatch = queue2.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue2);
      return [hook.memoizedState, dispatch];
    }
    function updateReducer(reducer, initialArg, init3) {
      var hook = updateWorkInProgressHook();
      var queue2 = hook.queue;
      if (queue2 === null) {
        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      }
      queue2.lastRenderedReducer = reducer;
      var current2 = currentHook;
      var baseQueue = current2.baseQueue;
      var pendingQueue = queue2.pending;
      if (pendingQueue !== null) {
        if (baseQueue !== null) {
          var baseFirst = baseQueue.next;
          var pendingFirst = pendingQueue.next;
          baseQueue.next = pendingFirst;
          pendingQueue.next = baseFirst;
        }
        {
          if (current2.baseQueue !== baseQueue) {
            error2("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
          }
        }
        current2.baseQueue = baseQueue = pendingQueue;
        queue2.pending = null;
      }
      if (baseQueue !== null) {
        var first2 = baseQueue.next;
        var newState = current2.baseState;
        var newBaseState = null;
        var newBaseQueueFirst = null;
        var newBaseQueueLast = null;
        var update = first2;
        do {
          var updateLane = update.lane;
          if (!isSubsetOfLanes(renderLanes, updateLane)) {
            var clone = {
              lane: updateLane,
              action: update.action,
              hasEagerState: update.hasEagerState,
              eagerState: update.eagerState,
              next: null
            };
            if (newBaseQueueLast === null) {
              newBaseQueueFirst = newBaseQueueLast = clone;
              newBaseState = newState;
            } else {
              newBaseQueueLast = newBaseQueueLast.next = clone;
            }
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
            markSkippedUpdateLanes(updateLane);
          } else {
            if (newBaseQueueLast !== null) {
              var _clone = {
                // This update is going to be committed so we never want uncommit
                // it. Using NoLane works because 0 is a subset of all bitmasks, so
                // this will never be skipped by the check above.
                lane: NoLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              };
              newBaseQueueLast = newBaseQueueLast.next = _clone;
            }
            if (update.hasEagerState) {
              newState = update.eagerState;
            } else {
              var action = update.action;
              newState = reducer(newState, action);
            }
          }
          update = update.next;
        } while (update !== null && update !== first2);
        if (newBaseQueueLast === null) {
          newBaseState = newState;
        } else {
          newBaseQueueLast.next = newBaseQueueFirst;
        }
        if (!objectIs(newState, hook.memoizedState)) {
          markWorkInProgressReceivedUpdate();
        }
        hook.memoizedState = newState;
        hook.baseState = newBaseState;
        hook.baseQueue = newBaseQueueLast;
        queue2.lastRenderedState = newState;
      }
      var lastInterleaved = queue2.interleaved;
      if (lastInterleaved !== null) {
        var interleaved = lastInterleaved;
        do {
          var interleavedLane = interleaved.lane;
          currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
          markSkippedUpdateLanes(interleavedLane);
          interleaved = interleaved.next;
        } while (interleaved !== lastInterleaved);
      } else if (baseQueue === null) {
        queue2.lanes = NoLanes;
      }
      var dispatch = queue2.dispatch;
      return [hook.memoizedState, dispatch];
    }
    function rerenderReducer(reducer, initialArg, init3) {
      var hook = updateWorkInProgressHook();
      var queue2 = hook.queue;
      if (queue2 === null) {
        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      }
      queue2.lastRenderedReducer = reducer;
      var dispatch = queue2.dispatch;
      var lastRenderPhaseUpdate = queue2.pending;
      var newState = hook.memoizedState;
      if (lastRenderPhaseUpdate !== null) {
        queue2.pending = null;
        var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
        var update = firstRenderPhaseUpdate;
        do {
          var action = update.action;
          newState = reducer(newState, action);
          update = update.next;
        } while (update !== firstRenderPhaseUpdate);
        if (!objectIs(newState, hook.memoizedState)) {
          markWorkInProgressReceivedUpdate();
        }
        hook.memoizedState = newState;
        if (hook.baseQueue === null) {
          hook.baseState = newState;
        }
        queue2.lastRenderedState = newState;
      }
      return [newState, dispatch];
    }
    function mountMutableSource(source, getSnapshot, subscribe) {
      {
        return void 0;
      }
    }
    function updateMutableSource(source, getSnapshot, subscribe) {
      {
        return void 0;
      }
    }
    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
      var fiber = currentlyRenderingFiber$1;
      var hook = mountWorkInProgressHook();
      var nextSnapshot;
      var isHydrating2 = getIsHydrating();
      if (isHydrating2) {
        if (getServerSnapshot === void 0) {
          throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        }
        nextSnapshot = getServerSnapshot();
        {
          if (!didWarnUncachedGetSnapshot) {
            if (nextSnapshot !== getServerSnapshot()) {
              error2("The result of getServerSnapshot should be cached to avoid an infinite loop");
              didWarnUncachedGetSnapshot = true;
            }
          }
        }
      } else {
        nextSnapshot = getSnapshot();
        {
          if (!didWarnUncachedGetSnapshot) {
            var cachedSnapshot = getSnapshot();
            if (!objectIs(nextSnapshot, cachedSnapshot)) {
              error2("The result of getSnapshot should be cached to avoid an infinite loop");
              didWarnUncachedGetSnapshot = true;
            }
          }
        }
        var root2 = getWorkInProgressRoot();
        if (root2 === null) {
          throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        }
        if (!includesBlockingLane(root2, renderLanes)) {
          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
      }
      hook.memoizedState = nextSnapshot;
      var inst = {
        value: nextSnapshot,
        getSnapshot
      };
      hook.queue = inst;
      mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
      fiber.flags |= Passive;
      pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
      return nextSnapshot;
    }
    function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
      var fiber = currentlyRenderingFiber$1;
      var hook = updateWorkInProgressHook();
      var nextSnapshot = getSnapshot();
      {
        if (!didWarnUncachedGetSnapshot) {
          var cachedSnapshot = getSnapshot();
          if (!objectIs(nextSnapshot, cachedSnapshot)) {
            error2("The result of getSnapshot should be cached to avoid an infinite loop");
            didWarnUncachedGetSnapshot = true;
          }
        }
      }
      var prevSnapshot = hook.memoizedState;
      var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
      if (snapshotChanged) {
        hook.memoizedState = nextSnapshot;
        markWorkInProgressReceivedUpdate();
      }
      var inst = hook.queue;
      updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
      if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
      // checking whether we scheduled a subscription effect above.
      workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
        fiber.flags |= Passive;
        pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
        var root2 = getWorkInProgressRoot();
        if (root2 === null) {
          throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        }
        if (!includesBlockingLane(root2, renderLanes)) {
          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
      }
      return nextSnapshot;
    }
    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
      fiber.flags |= StoreConsistency;
      var check = {
        getSnapshot,
        value: renderedSnapshot
      };
      var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
      if (componentUpdateQueue === null) {
        componentUpdateQueue = createFunctionComponentUpdateQueue();
        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
        componentUpdateQueue.stores = [check];
      } else {
        var stores = componentUpdateQueue.stores;
        if (stores === null) {
          componentUpdateQueue.stores = [check];
        } else {
          stores.push(check);
        }
      }
    }
    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
      inst.value = nextSnapshot;
      inst.getSnapshot = getSnapshot;
      if (checkIfSnapshotChanged(inst)) {
        forceStoreRerender(fiber);
      }
    }
    function subscribeToStore(fiber, inst, subscribe) {
      var handleStoreChange = function() {
        if (checkIfSnapshotChanged(inst)) {
          forceStoreRerender(fiber);
        }
      };
      return subscribe(handleStoreChange);
    }
    function checkIfSnapshotChanged(inst) {
      var latestGetSnapshot = inst.getSnapshot;
      var prevValue = inst.value;
      try {
        var nextValue = latestGetSnapshot();
        return !objectIs(prevValue, nextValue);
      } catch (error3) {
        return true;
      }
    }
    function forceStoreRerender(fiber) {
      var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
      if (root2 !== null) {
        scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
      }
    }
    function mountState(initialState) {
      var hook = mountWorkInProgressHook();
      if (typeof initialState === "function") {
        initialState = initialState();
      }
      hook.memoizedState = hook.baseState = initialState;
      var queue2 = {
        pending: null,
        interleaved: null,
        lanes: NoLanes,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialState
      };
      hook.queue = queue2;
      var dispatch = queue2.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue2);
      return [hook.memoizedState, dispatch];
    }
    function updateState(initialState) {
      return updateReducer(basicStateReducer);
    }
    function rerenderState(initialState) {
      return rerenderReducer(basicStateReducer);
    }
    function pushEffect(tag, create2, destroy, deps) {
      var effect = {
        tag,
        create: create2,
        destroy,
        deps,
        // Circular
        next: null
      };
      var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
      if (componentUpdateQueue === null) {
        componentUpdateQueue = createFunctionComponentUpdateQueue();
        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
        componentUpdateQueue.lastEffect = effect.next = effect;
      } else {
        var lastEffect = componentUpdateQueue.lastEffect;
        if (lastEffect === null) {
          componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
          var firstEffect = lastEffect.next;
          lastEffect.next = effect;
          effect.next = firstEffect;
          componentUpdateQueue.lastEffect = effect;
        }
      }
      return effect;
    }
    function mountRef(initialValue) {
      var hook = mountWorkInProgressHook();
      {
        var _ref2 = {
          current: initialValue
        };
        hook.memoizedState = _ref2;
        return _ref2;
      }
    }
    function updateRef(initialValue) {
      var hook = updateWorkInProgressHook();
      return hook.memoizedState;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create2, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === void 0 ? null : deps;
      currentlyRenderingFiber$1.flags |= fiberFlags;
      hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, void 0, nextDeps);
    }
    function updateEffectImpl(fiberFlags, hookFlags, create2, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === void 0 ? null : deps;
      var destroy = void 0;
      if (currentHook !== null) {
        var prevEffect = currentHook.memoizedState;
        destroy = prevEffect.destroy;
        if (nextDeps !== null) {
          var prevDeps = prevEffect.deps;
          if (areHookInputsEqual(nextDeps, prevDeps)) {
            hook.memoizedState = pushEffect(hookFlags, create2, destroy, nextDeps);
            return;
          }
        }
      }
      currentlyRenderingFiber$1.flags |= fiberFlags;
      hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, destroy, nextDeps);
    }
    function mountEffect(create2, deps) {
      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
        return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create2, deps);
      } else {
        return mountEffectImpl(Passive | PassiveStatic, Passive$1, create2, deps);
      }
    }
    function updateEffect(create2, deps) {
      return updateEffectImpl(Passive, Passive$1, create2, deps);
    }
    function mountInsertionEffect(create2, deps) {
      return mountEffectImpl(Update, Insertion5, create2, deps);
    }
    function updateInsertionEffect(create2, deps) {
      return updateEffectImpl(Update, Insertion5, create2, deps);
    }
    function mountLayoutEffect(create2, deps) {
      var fiberFlags = Update;
      {
        fiberFlags |= LayoutStatic;
      }
      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
        fiberFlags |= MountLayoutDev;
      }
      return mountEffectImpl(fiberFlags, Layout, create2, deps);
    }
    function updateLayoutEffect(create2, deps) {
      return updateEffectImpl(Update, Layout, create2, deps);
    }
    function imperativeHandleEffect(create2, ref) {
      if (typeof ref === "function") {
        var refCallback = ref;
        var _inst = create2();
        refCallback(_inst);
        return function() {
          refCallback(null);
        };
      } else if (ref !== null && ref !== void 0) {
        var refObject = ref;
        {
          if (!refObject.hasOwnProperty("current")) {
            error2("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
          }
        }
        var _inst2 = create2();
        refObject.current = _inst2;
        return function() {
          refObject.current = null;
        };
      }
    }
    function mountImperativeHandle(ref, create2, deps) {
      {
        if (typeof create2 !== "function") {
          error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
        }
      }
      var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
      var fiberFlags = Update;
      {
        fiberFlags |= LayoutStatic;
      }
      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
        fiberFlags |= MountLayoutDev;
      }
      return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
    }
    function updateImperativeHandle(ref, create2, deps) {
      {
        if (typeof create2 !== "function") {
          error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
        }
      }
      var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
      return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
    }
    function mountDebugValue(value, formatterFn) {
    }
    var updateDebugValue = mountDebugValue;
    function mountCallback(callback, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === void 0 ? null : deps;
      hook.memoizedState = [callback, nextDeps];
      return callback;
    }
    function updateCallback(callback, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === void 0 ? null : deps;
      var prevState = hook.memoizedState;
      if (prevState !== null) {
        if (nextDeps !== null) {
          var prevDeps = prevState[1];
          if (areHookInputsEqual(nextDeps, prevDeps)) {
            return prevState[0];
          }
        }
      }
      hook.memoizedState = [callback, nextDeps];
      return callback;
    }
    function mountMemo(nextCreate, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === void 0 ? null : deps;
      var nextValue = nextCreate();
      hook.memoizedState = [nextValue, nextDeps];
      return nextValue;
    }
    function updateMemo(nextCreate, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === void 0 ? null : deps;
      var prevState = hook.memoizedState;
      if (prevState !== null) {
        if (nextDeps !== null) {
          var prevDeps = prevState[1];
          if (areHookInputsEqual(nextDeps, prevDeps)) {
            return prevState[0];
          }
        }
      }
      var nextValue = nextCreate();
      hook.memoizedState = [nextValue, nextDeps];
      return nextValue;
    }
    function mountDeferredValue(value) {
      var hook = mountWorkInProgressHook();
      hook.memoizedState = value;
      return value;
    }
    function updateDeferredValue(value) {
      var hook = updateWorkInProgressHook();
      var resolvedCurrentHook = currentHook;
      var prevValue = resolvedCurrentHook.memoizedState;
      return updateDeferredValueImpl(hook, prevValue, value);
    }
    function rerenderDeferredValue(value) {
      var hook = updateWorkInProgressHook();
      if (currentHook === null) {
        hook.memoizedState = value;
        return value;
      } else {
        var prevValue = currentHook.memoizedState;
        return updateDeferredValueImpl(hook, prevValue, value);
      }
    }
    function updateDeferredValueImpl(hook, prevValue, value) {
      var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
      if (shouldDeferValue) {
        if (!objectIs(value, prevValue)) {
          var deferredLane = claimNextTransitionLane();
          currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
          markSkippedUpdateLanes(deferredLane);
          hook.baseState = true;
        }
        return prevValue;
      } else {
        if (hook.baseState) {
          hook.baseState = false;
          markWorkInProgressReceivedUpdate();
        }
        hook.memoizedState = value;
        return value;
      }
    }
    function startTransition(setPending, callback, options2) {
      var previousPriority = getCurrentUpdatePriority();
      setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
      setPending(true);
      var prevTransition = ReactCurrentBatchConfig$2.transition;
      ReactCurrentBatchConfig$2.transition = {};
      var currentTransition = ReactCurrentBatchConfig$2.transition;
      {
        ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
      }
      try {
        setPending(false);
        callback();
      } finally {
        setCurrentUpdatePriority(previousPriority);
        ReactCurrentBatchConfig$2.transition = prevTransition;
        {
          if (prevTransition === null && currentTransition._updatedFibers) {
            var updatedFibersCount = currentTransition._updatedFibers.size;
            if (updatedFibersCount > 10) {
              warn3("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
            }
            currentTransition._updatedFibers.clear();
          }
        }
      }
    }
    function mountTransition() {
      var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
      var start = startTransition.bind(null, setPending);
      var hook = mountWorkInProgressHook();
      hook.memoizedState = start;
      return [isPending, start];
    }
    function updateTransition() {
      var _updateState = updateState(), isPending = _updateState[0];
      var hook = updateWorkInProgressHook();
      var start = hook.memoizedState;
      return [isPending, start];
    }
    function rerenderTransition() {
      var _rerenderState = rerenderState(), isPending = _rerenderState[0];
      var hook = updateWorkInProgressHook();
      var start = hook.memoizedState;
      return [isPending, start];
    }
    var isUpdatingOpaqueValueInRenderPhase = false;
    function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
      {
        return isUpdatingOpaqueValueInRenderPhase;
      }
    }
    function mountId() {
      var hook = mountWorkInProgressHook();
      var root2 = getWorkInProgressRoot();
      var identifierPrefix = root2.identifierPrefix;
      var id;
      if (getIsHydrating()) {
        var treeId = getTreeId();
        id = ":" + identifierPrefix + "R" + treeId;
        var localId = localIdCounter++;
        if (localId > 0) {
          id += "H" + localId.toString(32);
        }
        id += ":";
      } else {
        var globalClientId = globalClientIdCounter++;
        id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
      }
      hook.memoizedState = id;
      return id;
    }
    function updateId() {
      var hook = updateWorkInProgressHook();
      var id = hook.memoizedState;
      return id;
    }
    function dispatchReducerAction(fiber, queue2, action) {
      {
        if (typeof arguments[3] === "function") {
          error2("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        }
      }
      var lane = requestUpdateLane(fiber);
      var update = {
        lane,
        action,
        hasEagerState: false,
        eagerState: null,
        next: null
      };
      if (isRenderPhaseUpdate(fiber)) {
        enqueueRenderPhaseUpdate(queue2, update);
      } else {
        var root2 = enqueueConcurrentHookUpdate(fiber, queue2, update, lane);
        if (root2 !== null) {
          var eventTime = requestEventTime();
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          entangleTransitionUpdate(root2, queue2, lane);
        }
      }
      markUpdateInDevTools(fiber, lane);
    }
    function dispatchSetState(fiber, queue2, action) {
      {
        if (typeof arguments[3] === "function") {
          error2("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        }
      }
      var lane = requestUpdateLane(fiber);
      var update = {
        lane,
        action,
        hasEagerState: false,
        eagerState: null,
        next: null
      };
      if (isRenderPhaseUpdate(fiber)) {
        enqueueRenderPhaseUpdate(queue2, update);
      } else {
        var alternate = fiber.alternate;
        if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
          var lastRenderedReducer = queue2.lastRenderedReducer;
          if (lastRenderedReducer !== null) {
            var prevDispatcher;
            {
              prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            }
            try {
              var currentState = queue2.lastRenderedState;
              var eagerState = lastRenderedReducer(currentState, action);
              update.hasEagerState = true;
              update.eagerState = eagerState;
              if (objectIs(eagerState, currentState)) {
                enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue2, update);
                return;
              }
            } catch (error3) {
            } finally {
              {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }
          }
        }
        var root2 = enqueueConcurrentHookUpdate(fiber, queue2, update, lane);
        if (root2 !== null) {
          var eventTime = requestEventTime();
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          entangleTransitionUpdate(root2, queue2, lane);
        }
      }
      markUpdateInDevTools(fiber, lane);
    }
    function isRenderPhaseUpdate(fiber) {
      var alternate = fiber.alternate;
      return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
    }
    function enqueueRenderPhaseUpdate(queue2, update) {
      didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
      var pending = queue2.pending;
      if (pending === null) {
        update.next = update;
      } else {
        update.next = pending.next;
        pending.next = update;
      }
      queue2.pending = update;
    }
    function entangleTransitionUpdate(root2, queue2, lane) {
      if (isTransitionLane(lane)) {
        var queueLanes = queue2.lanes;
        queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
        var newQueueLanes = mergeLanes(queueLanes, lane);
        queue2.lanes = newQueueLanes;
        markRootEntangled(root2, newQueueLanes);
      }
    }
    function markUpdateInDevTools(fiber, lane, action) {
      {
        markStateUpdateScheduled(fiber, lane);
      }
    }
    var ContextOnlyDispatcher = {
      readContext,
      useCallback: throwInvalidHookError,
      useContext: throwInvalidHookError,
      useEffect: throwInvalidHookError,
      useImperativeHandle: throwInvalidHookError,
      useInsertionEffect: throwInvalidHookError,
      useLayoutEffect: throwInvalidHookError,
      useMemo: throwInvalidHookError,
      useReducer: throwInvalidHookError,
      useRef: throwInvalidHookError,
      useState: throwInvalidHookError,
      useDebugValue: throwInvalidHookError,
      useDeferredValue: throwInvalidHookError,
      useTransition: throwInvalidHookError,
      useMutableSource: throwInvalidHookError,
      useSyncExternalStore: throwInvalidHookError,
      useId: throwInvalidHookError,
      unstable_isNewReconciler: enableNewReconciler
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var HooksDispatcherOnRerenderInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    {
      var warnInvalidContextAccess = function() {
        error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      };
      var warnInvalidHookAccess = function() {
        error2("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
      };
      HooksDispatcherOnMountInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          mountHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create2, deps) {
          currentHookNameInDev = "useEffect";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountEffect(create2, deps);
        },
        useImperativeHandle: function(ref, create2, deps) {
          currentHookNameInDev = "useImperativeHandle";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountImperativeHandle(ref, create2, deps);
        },
        useInsertionEffect: function(create2, deps) {
          currentHookNameInDev = "useInsertionEffect";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountInsertionEffect(create2, deps);
        },
        useLayoutEffect: function(create2, deps) {
          currentHookNameInDev = "useLayoutEffect";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountLayoutEffect(create2, deps);
        },
        useMemo: function(create2, deps) {
          currentHookNameInDev = "useMemo";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create2, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init3) {
          currentHookNameInDev = "useReducer";
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer, initialArg, init3);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          mountHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          mountHookTypesDev();
          return mountDebugValue();
        },
        useDeferredValue: function(value) {
          currentHookNameInDev = "useDeferredValue";
          mountHookTypesDev();
          return mountDeferredValue(value);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          mountHookTypesDev();
          return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          mountHookTypesDev();
          return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          mountHookTypesDev();
          return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          mountHookTypesDev();
          return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          updateHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create2, deps) {
          currentHookNameInDev = "useEffect";
          updateHookTypesDev();
          return mountEffect(create2, deps);
        },
        useImperativeHandle: function(ref, create2, deps) {
          currentHookNameInDev = "useImperativeHandle";
          updateHookTypesDev();
          return mountImperativeHandle(ref, create2, deps);
        },
        useInsertionEffect: function(create2, deps) {
          currentHookNameInDev = "useInsertionEffect";
          updateHookTypesDev();
          return mountInsertionEffect(create2, deps);
        },
        useLayoutEffect: function(create2, deps) {
          currentHookNameInDev = "useLayoutEffect";
          updateHookTypesDev();
          return mountLayoutEffect(create2, deps);
        },
        useMemo: function(create2, deps) {
          currentHookNameInDev = "useMemo";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create2, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init3) {
          currentHookNameInDev = "useReducer";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer, initialArg, init3);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          updateHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          updateHookTypesDev();
          return mountDebugValue();
        },
        useDeferredValue: function(value) {
          currentHookNameInDev = "useDeferredValue";
          updateHookTypesDev();
          return mountDeferredValue(value);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          updateHookTypesDev();
          return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          updateHookTypesDev();
          return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          updateHookTypesDev();
          return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          updateHookTypesDev();
          return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      HooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create2, deps) {
          currentHookNameInDev = "useEffect";
          updateHookTypesDev();
          return updateEffect(create2, deps);
        },
        useImperativeHandle: function(ref, create2, deps) {
          currentHookNameInDev = "useImperativeHandle";
          updateHookTypesDev();
          return updateImperativeHandle(ref, create2, deps);
        },
        useInsertionEffect: function(create2, deps) {
          currentHookNameInDev = "useInsertionEffect";
          updateHookTypesDev();
          return updateInsertionEffect(create2, deps);
        },
        useLayoutEffect: function(create2, deps) {
          currentHookNameInDev = "useLayoutEffect";
          updateHookTypesDev();
          return updateLayoutEffect(create2, deps);
        },
        useMemo: function(create2, deps) {
          currentHookNameInDev = "useMemo";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create2, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init3) {
          currentHookNameInDev = "useReducer";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateReducer(reducer);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          updateHookTypesDev();
          return updateRef();
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateState();
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          updateHookTypesDev();
          return updateDebugValue();
        },
        useDeferredValue: function(value) {
          currentHookNameInDev = "useDeferredValue";
          updateHookTypesDev();
          return updateDeferredValue(value);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          updateHookTypesDev();
          return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          updateHookTypesDev();
          return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          updateHookTypesDev();
          return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          updateHookTypesDev();
          return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      HooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create2, deps) {
          currentHookNameInDev = "useEffect";
          updateHookTypesDev();
          return updateEffect(create2, deps);
        },
        useImperativeHandle: function(ref, create2, deps) {
          currentHookNameInDev = "useImperativeHandle";
          updateHookTypesDev();
          return updateImperativeHandle(ref, create2, deps);
        },
        useInsertionEffect: function(create2, deps) {
          currentHookNameInDev = "useInsertionEffect";
          updateHookTypesDev();
          return updateInsertionEffect(create2, deps);
        },
        useLayoutEffect: function(create2, deps) {
          currentHookNameInDev = "useLayoutEffect";
          updateHookTypesDev();
          return updateLayoutEffect(create2, deps);
        },
        useMemo: function(create2, deps) {
          currentHookNameInDev = "useMemo";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return updateMemo(create2, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init3) {
          currentHookNameInDev = "useReducer";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return rerenderReducer(reducer);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          updateHookTypesDev();
          return updateRef();
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return rerenderState();
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          updateHookTypesDev();
          return updateDebugValue();
        },
        useDeferredValue: function(value) {
          currentHookNameInDev = "useDeferredValue";
          updateHookTypesDev();
          return rerenderDeferredValue(value);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          updateHookTypesDev();
          return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          updateHookTypesDev();
          return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          updateHookTypesDev();
          return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          updateHookTypesDev();
          return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function(context) {
          warnInvalidContextAccess();
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create2, deps) {
          currentHookNameInDev = "useEffect";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountEffect(create2, deps);
        },
        useImperativeHandle: function(ref, create2, deps) {
          currentHookNameInDev = "useImperativeHandle";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountImperativeHandle(ref, create2, deps);
        },
        useInsertionEffect: function(create2, deps) {
          currentHookNameInDev = "useInsertionEffect";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountInsertionEffect(create2, deps);
        },
        useLayoutEffect: function(create2, deps) {
          currentHookNameInDev = "useLayoutEffect";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountLayoutEffect(create2, deps);
        },
        useMemo: function(create2, deps) {
          currentHookNameInDev = "useMemo";
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create2, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init3) {
          currentHookNameInDev = "useReducer";
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer, initialArg, init3);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountDebugValue();
        },
        useDeferredValue: function(value) {
          currentHookNameInDev = "useDeferredValue";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountDeferredValue(value);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
          warnInvalidContextAccess();
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create2, deps) {
          currentHookNameInDev = "useEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateEffect(create2, deps);
        },
        useImperativeHandle: function(ref, create2, deps) {
          currentHookNameInDev = "useImperativeHandle";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateImperativeHandle(ref, create2, deps);
        },
        useInsertionEffect: function(create2, deps) {
          currentHookNameInDev = "useInsertionEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateInsertionEffect(create2, deps);
        },
        useLayoutEffect: function(create2, deps) {
          currentHookNameInDev = "useLayoutEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateLayoutEffect(create2, deps);
        },
        useMemo: function(create2, deps) {
          currentHookNameInDev = "useMemo";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create2, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init3) {
          currentHookNameInDev = "useReducer";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateReducer(reducer);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateRef();
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateState();
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateDebugValue();
        },
        useDeferredValue: function(value) {
          currentHookNameInDev = "useDeferredValue";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateDeferredValue(value);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
          warnInvalidContextAccess();
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create2, deps) {
          currentHookNameInDev = "useEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateEffect(create2, deps);
        },
        useImperativeHandle: function(ref, create2, deps) {
          currentHookNameInDev = "useImperativeHandle";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateImperativeHandle(ref, create2, deps);
        },
        useInsertionEffect: function(create2, deps) {
          currentHookNameInDev = "useInsertionEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateInsertionEffect(create2, deps);
        },
        useLayoutEffect: function(create2, deps) {
          currentHookNameInDev = "useLayoutEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateLayoutEffect(create2, deps);
        },
        useMemo: function(create2, deps) {
          currentHookNameInDev = "useMemo";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create2, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init3) {
          currentHookNameInDev = "useReducer";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return rerenderReducer(reducer);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateRef();
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return rerenderState();
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateDebugValue();
        },
        useDeferredValue: function(value) {
          currentHookNameInDev = "useDeferredValue";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return rerenderDeferredValue(value);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
    }
    var now$1 = Scheduler2.unstable_now;
    var commitTime = 0;
    var layoutEffectStartTime = -1;
    var profilerStartTime = -1;
    var passiveEffectStartTime = -1;
    var currentUpdateIsNested = false;
    var nestedUpdateScheduled = false;
    function isCurrentUpdateNested() {
      return currentUpdateIsNested;
    }
    function markNestedUpdateScheduled() {
      {
        nestedUpdateScheduled = true;
      }
    }
    function resetNestedUpdateFlag() {
      {
        currentUpdateIsNested = false;
        nestedUpdateScheduled = false;
      }
    }
    function syncNestedUpdateFlag() {
      {
        currentUpdateIsNested = nestedUpdateScheduled;
        nestedUpdateScheduled = false;
      }
    }
    function getCommitTime() {
      return commitTime;
    }
    function recordCommitTime() {
      commitTime = now$1();
    }
    function startProfilerTimer(fiber) {
      profilerStartTime = now$1();
      if (fiber.actualStartTime < 0) {
        fiber.actualStartTime = now$1();
      }
    }
    function stopProfilerTimerIfRunning(fiber) {
      profilerStartTime = -1;
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
      if (profilerStartTime >= 0) {
        var elapsedTime = now$1() - profilerStartTime;
        fiber.actualDuration += elapsedTime;
        if (overrideBaseTime) {
          fiber.selfBaseDuration = elapsedTime;
        }
        profilerStartTime = -1;
      }
    }
    function recordLayoutEffectDuration(fiber) {
      if (layoutEffectStartTime >= 0) {
        var elapsedTime = now$1() - layoutEffectStartTime;
        layoutEffectStartTime = -1;
        var parentFiber = fiber.return;
        while (parentFiber !== null) {
          switch (parentFiber.tag) {
            case HostRoot:
              var root2 = parentFiber.stateNode;
              root2.effectDuration += elapsedTime;
              return;
            case Profiler:
              var parentStateNode = parentFiber.stateNode;
              parentStateNode.effectDuration += elapsedTime;
              return;
          }
          parentFiber = parentFiber.return;
        }
      }
    }
    function recordPassiveEffectDuration(fiber) {
      if (passiveEffectStartTime >= 0) {
        var elapsedTime = now$1() - passiveEffectStartTime;
        passiveEffectStartTime = -1;
        var parentFiber = fiber.return;
        while (parentFiber !== null) {
          switch (parentFiber.tag) {
            case HostRoot:
              var root2 = parentFiber.stateNode;
              if (root2 !== null) {
                root2.passiveEffectDuration += elapsedTime;
              }
              return;
            case Profiler:
              var parentStateNode = parentFiber.stateNode;
              if (parentStateNode !== null) {
                parentStateNode.passiveEffectDuration += elapsedTime;
              }
              return;
          }
          parentFiber = parentFiber.return;
        }
      }
    }
    function startLayoutEffectTimer() {
      layoutEffectStartTime = now$1();
    }
    function startPassiveEffectTimer() {
      passiveEffectStartTime = now$1();
    }
    function transferActualDuration(fiber) {
      var child = fiber.child;
      while (child) {
        fiber.actualDuration += child.actualDuration;
        child = child.sibling;
      }
    }
    function createCapturedValueAtFiber(value, source) {
      return {
        value,
        source,
        stack: getStackByFiberInDevAndProd(source),
        digest: null
      };
    }
    function createCapturedValue(value, digest, stack) {
      return {
        value,
        source: null,
        stack: stack != null ? stack : null,
        digest: digest != null ? digest : null
      };
    }
    function showErrorDialog(boundary, errorInfo) {
      return true;
    }
    function logCapturedError(boundary, errorInfo) {
      try {
        var logError = showErrorDialog();
        if (logError === false) {
          return;
        }
        var error3 = errorInfo.value;
        {
          var source = errorInfo.source;
          var stack = errorInfo.stack;
          var componentStack = stack !== null ? stack : "";
          if (error3 != null && error3._suppressLogging) {
            if (boundary.tag === ClassComponent) {
              return;
            }
            console["error"](error3);
          }
          var componentName = source ? getComponentNameFromFiber(source) : null;
          var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
          var errorBoundaryMessage;
          if (boundary.tag === HostRoot) {
            errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
          } else {
            var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
            errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
          }
          var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
          console["error"](combinedMessage);
        }
      } catch (e) {
        setTimeout(function() {
          throw e;
        });
      }
    }
    var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
    function createRootErrorUpdate(fiber, errorInfo, lane) {
      var update = createUpdate(NoTimestamp, lane);
      update.tag = CaptureUpdate;
      update.payload = {
        element: null
      };
      var error3 = errorInfo.value;
      update.callback = function() {
        onUncaughtError(error3);
        logCapturedError(fiber, errorInfo);
      };
      return update;
    }
    function createClassErrorUpdate(fiber, errorInfo, lane) {
      var update = createUpdate(NoTimestamp, lane);
      update.tag = CaptureUpdate;
      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
      if (typeof getDerivedStateFromError === "function") {
        var error$1 = errorInfo.value;
        update.payload = function() {
          return getDerivedStateFromError(error$1);
        };
        update.callback = function() {
          {
            markFailedErrorBoundaryForHotReloading(fiber);
          }
          logCapturedError(fiber, errorInfo);
        };
      }
      var inst = fiber.stateNode;
      if (inst !== null && typeof inst.componentDidCatch === "function") {
        update.callback = function callback() {
          {
            markFailedErrorBoundaryForHotReloading(fiber);
          }
          logCapturedError(fiber, errorInfo);
          if (typeof getDerivedStateFromError !== "function") {
            markLegacyErrorBoundaryAsFailed(this);
          }
          var error$12 = errorInfo.value;
          var stack = errorInfo.stack;
          this.componentDidCatch(error$12, {
            componentStack: stack !== null ? stack : ""
          });
          {
            if (typeof getDerivedStateFromError !== "function") {
              if (!includesSomeLane(fiber.lanes, SyncLane)) {
                error2("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
              }
            }
          }
        };
      }
      return update;
    }
    function attachPingListener(root2, wakeable, lanes) {
      var pingCache = root2.pingCache;
      var threadIDs;
      if (pingCache === null) {
        pingCache = root2.pingCache = new PossiblyWeakMap$1();
        threadIDs = /* @__PURE__ */ new Set();
        pingCache.set(wakeable, threadIDs);
      } else {
        threadIDs = pingCache.get(wakeable);
        if (threadIDs === void 0) {
          threadIDs = /* @__PURE__ */ new Set();
          pingCache.set(wakeable, threadIDs);
        }
      }
      if (!threadIDs.has(lanes)) {
        threadIDs.add(lanes);
        var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
        {
          if (isDevToolsPresent) {
            restorePendingUpdaters(root2, lanes);
          }
        }
        wakeable.then(ping, ping);
      }
    }
    function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
      var wakeables = suspenseBoundary.updateQueue;
      if (wakeables === null) {
        var updateQueue = /* @__PURE__ */ new Set();
        updateQueue.add(wakeable);
        suspenseBoundary.updateQueue = updateQueue;
      } else {
        wakeables.add(wakeable);
      }
    }
    function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
      var tag = sourceFiber.tag;
      if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
        var currentSource = sourceFiber.alternate;
        if (currentSource) {
          sourceFiber.updateQueue = currentSource.updateQueue;
          sourceFiber.memoizedState = currentSource.memoizedState;
          sourceFiber.lanes = currentSource.lanes;
        } else {
          sourceFiber.updateQueue = null;
          sourceFiber.memoizedState = null;
        }
      }
    }
    function getNearestSuspenseBoundaryToCapture(returnFiber) {
      var node2 = returnFiber;
      do {
        if (node2.tag === SuspenseComponent && shouldCaptureSuspense(node2)) {
          return node2;
        }
        node2 = node2.return;
      } while (node2 !== null);
      return null;
    }
    function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
      if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
        if (suspenseBoundary === returnFiber) {
          suspenseBoundary.flags |= ShouldCapture;
        } else {
          suspenseBoundary.flags |= DidCapture;
          sourceFiber.flags |= ForceUpdateForLegacySuspense;
          sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
          if (sourceFiber.tag === ClassComponent) {
            var currentSourceFiber = sourceFiber.alternate;
            if (currentSourceFiber === null) {
              sourceFiber.tag = IncompleteClassComponent;
            } else {
              var update = createUpdate(NoTimestamp, SyncLane);
              update.tag = ForceUpdate;
              enqueueUpdate(sourceFiber, update, SyncLane);
            }
          }
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
        }
        return suspenseBoundary;
      }
      suspenseBoundary.flags |= ShouldCapture;
      suspenseBoundary.lanes = rootRenderLanes;
      return suspenseBoundary;
    }
    function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
      sourceFiber.flags |= Incomplete;
      {
        if (isDevToolsPresent) {
          restorePendingUpdaters(root2, rootRenderLanes);
        }
      }
      if (value !== null && typeof value === "object" && typeof value.then === "function") {
        var wakeable = value;
        resetSuspendedComponent(sourceFiber);
        {
          if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
            markDidThrowWhileHydratingDEV();
          }
        }
        var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
        if (suspenseBoundary !== null) {
          suspenseBoundary.flags &= ~ForceClientRender;
          markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
          if (suspenseBoundary.mode & ConcurrentMode) {
            attachPingListener(root2, wakeable, rootRenderLanes);
          }
          attachRetryListener(suspenseBoundary, root2, wakeable);
          return;
        } else {
          if (!includesSyncLane(rootRenderLanes)) {
            attachPingListener(root2, wakeable, rootRenderLanes);
            renderDidSuspendDelayIfPossible();
            return;
          }
          var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
          value = uncaughtSuspenseError;
        }
      } else {
        if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
          markDidThrowWhileHydratingDEV();
          var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
          if (_suspenseBoundary !== null) {
            if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
              _suspenseBoundary.flags |= ForceClientRender;
            }
            markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
            queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
            return;
          }
        }
      }
      value = createCapturedValueAtFiber(value, sourceFiber);
      renderDidError(value);
      var workInProgress2 = returnFiber;
      do {
        switch (workInProgress2.tag) {
          case HostRoot: {
            var _errorInfo = value;
            workInProgress2.flags |= ShouldCapture;
            var lane = pickArbitraryLane(rootRenderLanes);
            workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
            var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
            enqueueCapturedUpdate(workInProgress2, update);
            return;
          }
          case ClassComponent:
            var errorInfo = value;
            var ctor = workInProgress2.type;
            var instance2 = workInProgress2.stateNode;
            if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance2 !== null && typeof instance2.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance2))) {
              workInProgress2.flags |= ShouldCapture;
              var _lane = pickArbitraryLane(rootRenderLanes);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
              var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
              enqueueCapturedUpdate(workInProgress2, _update);
              return;
            }
            break;
        }
        workInProgress2 = workInProgress2.return;
      } while (workInProgress2 !== null);
    }
    function getSuspendedCache() {
      {
        return null;
      }
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass;
    var didWarnAboutModulePatternComponent;
    var didWarnAboutContextTypeOnFunctionComponent;
    var didWarnAboutGetDerivedStateOnFunctionComponent;
    var didWarnAboutFunctionRefs;
    var didWarnAboutReassigningProps;
    var didWarnAboutRevealOrder;
    var didWarnAboutTailOptions;
    {
      didWarnAboutBadClass = {};
      didWarnAboutModulePatternComponent = {};
      didWarnAboutContextTypeOnFunctionComponent = {};
      didWarnAboutGetDerivedStateOnFunctionComponent = {};
      didWarnAboutFunctionRefs = {};
      didWarnAboutReassigningProps = false;
      didWarnAboutRevealOrder = {};
      didWarnAboutTailOptions = {};
    }
    function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
      if (current2 === null) {
        workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
      } else {
        workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
      }
    }
    function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
      workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
      workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
    }
    function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
      {
        if (workInProgress2.type !== workInProgress2.elementType) {
          var innerPropTypes = Component.propTypes;
          if (innerPropTypes) {
            checkPropTypes(
              innerPropTypes,
              nextProps,
              // Resolved props
              "prop",
              getComponentNameFromType(Component)
            );
          }
        }
      }
      var render3 = Component.render;
      var ref = workInProgress2.ref;
      var nextChildren;
      var hasId;
      prepareToReadContext(workInProgress2, renderLanes2);
      {
        markComponentRenderStarted(workInProgress2);
      }
      {
        ReactCurrentOwner$1.current = workInProgress2;
        setIsRendering(true);
        nextChildren = renderWithHooks(current2, workInProgress2, render3, nextProps, ref, renderLanes2);
        hasId = checkDidRenderIdHook();
        if (workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(true);
          try {
            nextChildren = renderWithHooks(current2, workInProgress2, render3, nextProps, ref, renderLanes2);
            hasId = checkDidRenderIdHook();
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        setIsRendering(false);
      }
      {
        markComponentRenderStopped();
      }
      if (current2 !== null && !didReceiveUpdate) {
        bailoutHooks(current2, workInProgress2, renderLanes2);
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      if (getIsHydrating() && hasId) {
        pushMaterializedTreeId(workInProgress2);
      }
      workInProgress2.flags |= PerformedWork;
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
      if (current2 === null) {
        var type = Component.type;
        if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
        Component.defaultProps === void 0) {
          var resolvedType = type;
          {
            resolvedType = resolveFunctionForHotReloading(type);
          }
          workInProgress2.tag = SimpleMemoComponent;
          workInProgress2.type = resolvedType;
          {
            validateFunctionComponentInDev(workInProgress2, type);
          }
          return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
        }
        {
          var innerPropTypes = type.propTypes;
          if (innerPropTypes) {
            checkPropTypes(
              innerPropTypes,
              nextProps,
              // Resolved props
              "prop",
              getComponentNameFromType(type)
            );
          }
        }
        var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
        child.ref = workInProgress2.ref;
        child.return = workInProgress2;
        workInProgress2.child = child;
        return child;
      }
      {
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;
        if (_innerPropTypes) {
          checkPropTypes(
            _innerPropTypes,
            nextProps,
            // Resolved props
            "prop",
            getComponentNameFromType(_type)
          );
        }
      }
      var currentChild = current2.child;
      var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
      if (!hasScheduledUpdateOrContext) {
        var prevProps = currentChild.memoizedProps;
        var compare = Component.compare;
        compare = compare !== null ? compare : shallowEqual;
        if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
      }
      workInProgress2.flags |= PerformedWork;
      var newChild = createWorkInProgress(currentChild, nextProps);
      newChild.ref = workInProgress2.ref;
      newChild.return = workInProgress2;
      workInProgress2.child = newChild;
      return newChild;
    }
    function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
      {
        if (workInProgress2.type !== workInProgress2.elementType) {
          var outerMemoType = workInProgress2.elementType;
          if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
            var lazyComponent = outerMemoType;
            var payload = lazyComponent._payload;
            var init3 = lazyComponent._init;
            try {
              outerMemoType = init3(payload);
            } catch (x) {
              outerMemoType = null;
            }
            var outerPropTypes = outerMemoType && outerMemoType.propTypes;
            if (outerPropTypes) {
              checkPropTypes(
                outerPropTypes,
                nextProps,
                // Resolved (SimpleMemoComponent has no defaultProps)
                "prop",
                getComponentNameFromType(outerMemoType)
              );
            }
          }
        }
      }
      if (current2 !== null) {
        var prevProps = current2.memoizedProps;
        if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
        workInProgress2.type === current2.type) {
          didReceiveUpdate = false;
          workInProgress2.pendingProps = nextProps = prevProps;
          if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
            workInProgress2.lanes = current2.lanes;
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
            didReceiveUpdate = true;
          }
        }
      }
      return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
    }
    function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
      var nextProps = workInProgress2.pendingProps;
      var nextChildren = nextProps.children;
      var prevState = current2 !== null ? current2.memoizedState : null;
      if (nextProps.mode === "hidden" || enableLegacyHidden) {
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          var nextState = {
            baseLanes: NoLanes,
            cachePool: null,
            transitions: null
          };
          workInProgress2.memoizedState = nextState;
          pushRenderLanes(workInProgress2, renderLanes2);
        } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
          var spawnedCachePool = null;
          var nextBaseLanes;
          if (prevState !== null) {
            var prevBaseLanes = prevState.baseLanes;
            nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
          } else {
            nextBaseLanes = renderLanes2;
          }
          workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
          var _nextState = {
            baseLanes: nextBaseLanes,
            cachePool: spawnedCachePool,
            transitions: null
          };
          workInProgress2.memoizedState = _nextState;
          workInProgress2.updateQueue = null;
          pushRenderLanes(workInProgress2, nextBaseLanes);
          return null;
        } else {
          var _nextState2 = {
            baseLanes: NoLanes,
            cachePool: null,
            transitions: null
          };
          workInProgress2.memoizedState = _nextState2;
          var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
          pushRenderLanes(workInProgress2, subtreeRenderLanes2);
        }
      } else {
        var _subtreeRenderLanes;
        if (prevState !== null) {
          _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
          workInProgress2.memoizedState = null;
        } else {
          _subtreeRenderLanes = renderLanes2;
        }
        pushRenderLanes(workInProgress2, _subtreeRenderLanes);
      }
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateFragment(current2, workInProgress2, renderLanes2) {
      var nextChildren = workInProgress2.pendingProps;
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateMode(current2, workInProgress2, renderLanes2) {
      var nextChildren = workInProgress2.pendingProps.children;
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateProfiler(current2, workInProgress2, renderLanes2) {
      {
        workInProgress2.flags |= Update;
        {
          var stateNode = workInProgress2.stateNode;
          stateNode.effectDuration = 0;
          stateNode.passiveEffectDuration = 0;
        }
      }
      var nextProps = workInProgress2.pendingProps;
      var nextChildren = nextProps.children;
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function markRef(current2, workInProgress2) {
      var ref = workInProgress2.ref;
      if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
        workInProgress2.flags |= Ref;
        {
          workInProgress2.flags |= RefStatic;
        }
      }
    }
    function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
      {
        if (workInProgress2.type !== workInProgress2.elementType) {
          var innerPropTypes = Component.propTypes;
          if (innerPropTypes) {
            checkPropTypes(
              innerPropTypes,
              nextProps,
              // Resolved props
              "prop",
              getComponentNameFromType(Component)
            );
          }
        }
      }
      var context;
      {
        var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
        context = getMaskedContext(workInProgress2, unmaskedContext);
      }
      var nextChildren;
      var hasId;
      prepareToReadContext(workInProgress2, renderLanes2);
      {
        markComponentRenderStarted(workInProgress2);
      }
      {
        ReactCurrentOwner$1.current = workInProgress2;
        setIsRendering(true);
        nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
        hasId = checkDidRenderIdHook();
        if (workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(true);
          try {
            nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
            hasId = checkDidRenderIdHook();
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        setIsRendering(false);
      }
      {
        markComponentRenderStopped();
      }
      if (current2 !== null && !didReceiveUpdate) {
        bailoutHooks(current2, workInProgress2, renderLanes2);
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      if (getIsHydrating() && hasId) {
        pushMaterializedTreeId(workInProgress2);
      }
      workInProgress2.flags |= PerformedWork;
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
      {
        switch (shouldError(workInProgress2)) {
          case false: {
            var _instance = workInProgress2.stateNode;
            var ctor = workInProgress2.type;
            var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
            var state = tempInstance.state;
            _instance.updater.enqueueSetState(_instance, state, null);
            break;
          }
          case true: {
            workInProgress2.flags |= DidCapture;
            workInProgress2.flags |= ShouldCapture;
            var error$1 = new Error("Simulated error coming from DevTools");
            var lane = pickArbitraryLane(renderLanes2);
            workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
            var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
            enqueueCapturedUpdate(workInProgress2, update);
            break;
          }
        }
        if (workInProgress2.type !== workInProgress2.elementType) {
          var innerPropTypes = Component.propTypes;
          if (innerPropTypes) {
            checkPropTypes(
              innerPropTypes,
              nextProps,
              // Resolved props
              "prop",
              getComponentNameFromType(Component)
            );
          }
        }
      }
      var hasContext;
      if (isContextProvider(Component)) {
        hasContext = true;
        pushContextProvider(workInProgress2);
      } else {
        hasContext = false;
      }
      prepareToReadContext(workInProgress2, renderLanes2);
      var instance2 = workInProgress2.stateNode;
      var shouldUpdate;
      if (instance2 === null) {
        resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
        constructClassInstance(workInProgress2, Component, nextProps);
        mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
        shouldUpdate = true;
      } else if (current2 === null) {
        shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
      } else {
        shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
      }
      var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
      {
        var inst = workInProgress2.stateNode;
        if (shouldUpdate && inst.props !== nextProps) {
          if (!didWarnAboutReassigningProps) {
            error2("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
          }
          didWarnAboutReassigningProps = true;
        }
      }
      return nextUnitOfWork;
    }
    function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
      markRef(current2, workInProgress2);
      var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
      if (!shouldUpdate && !didCaptureError) {
        if (hasContext) {
          invalidateContextProvider(workInProgress2, Component, false);
        }
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      var instance2 = workInProgress2.stateNode;
      ReactCurrentOwner$1.current = workInProgress2;
      var nextChildren;
      if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
        nextChildren = null;
        {
          stopProfilerTimerIfRunning();
        }
      } else {
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          setIsRendering(true);
          nextChildren = instance2.render();
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              instance2.render();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
      }
      workInProgress2.flags |= PerformedWork;
      if (current2 !== null && didCaptureError) {
        forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
      } else {
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      }
      workInProgress2.memoizedState = instance2.state;
      if (hasContext) {
        invalidateContextProvider(workInProgress2, Component, true);
      }
      return workInProgress2.child;
    }
    function pushHostRootContext(workInProgress2) {
      var root2 = workInProgress2.stateNode;
      if (root2.pendingContext) {
        pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
      } else if (root2.context) {
        pushTopLevelContextObject(workInProgress2, root2.context, false);
      }
      pushHostContainer(workInProgress2, root2.containerInfo);
    }
    function updateHostRoot(current2, workInProgress2, renderLanes2) {
      pushHostRootContext(workInProgress2);
      if (current2 === null) {
        throw new Error("Should have a current fiber. This is a bug in React.");
      }
      var nextProps = workInProgress2.pendingProps;
      var prevState = workInProgress2.memoizedState;
      var prevChildren = prevState.element;
      cloneUpdateQueue(current2, workInProgress2);
      processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
      var nextState = workInProgress2.memoizedState;
      var nextChildren = nextState.element;
      if (prevState.isDehydrated) {
        var overrideState = {
          element: nextChildren,
          isDehydrated: false,
          cache: nextState.cache,
          pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
          transitions: nextState.transitions
        };
        var updateQueue = workInProgress2.updateQueue;
        updateQueue.baseState = overrideState;
        workInProgress2.memoizedState = overrideState;
        if (workInProgress2.flags & ForceClientRender) {
          var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
          return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
        } else if (nextChildren !== prevChildren) {
          var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
          return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
        } else {
          enterHydrationState(workInProgress2);
          var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          workInProgress2.child = child;
          var node2 = child;
          while (node2) {
            node2.flags = node2.flags & ~Placement | Hydrating;
            node2 = node2.sibling;
          }
        }
      } else {
        resetHydrationState();
        if (nextChildren === prevChildren) {
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      }
      return workInProgress2.child;
    }
    function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
      resetHydrationState();
      queueHydrationError(recoverableError);
      workInProgress2.flags |= ForceClientRender;
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateHostComponent(current2, workInProgress2, renderLanes2) {
      pushHostContext(workInProgress2);
      if (current2 === null) {
        tryToClaimNextHydratableInstance(workInProgress2);
      }
      var type = workInProgress2.type;
      var nextProps = workInProgress2.pendingProps;
      var prevProps = current2 !== null ? current2.memoizedProps : null;
      var nextChildren = nextProps.children;
      var isDirectTextChild = shouldSetTextContent(type, nextProps);
      if (isDirectTextChild) {
        nextChildren = null;
      } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
        workInProgress2.flags |= ContentReset;
      }
      markRef(current2, workInProgress2);
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateHostText(current2, workInProgress2) {
      if (current2 === null) {
        tryToClaimNextHydratableInstance(workInProgress2);
      }
      return null;
    }
    function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
      var props = workInProgress2.pendingProps;
      var lazyComponent = elementType;
      var payload = lazyComponent._payload;
      var init3 = lazyComponent._init;
      var Component = init3(payload);
      workInProgress2.type = Component;
      var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
      var resolvedProps = resolveDefaultProps(Component, props);
      var child;
      switch (resolvedTag) {
        case FunctionComponent: {
          {
            validateFunctionComponentInDev(workInProgress2, Component);
            workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
          }
          child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
          return child;
        }
        case ClassComponent: {
          {
            workInProgress2.type = Component = resolveClassForHotReloading(Component);
          }
          child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
          return child;
        }
        case ForwardRef: {
          {
            workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
          }
          child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
          return child;
        }
        case MemoComponent: {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerPropTypes = Component.propTypes;
              if (outerPropTypes) {
                checkPropTypes(
                  outerPropTypes,
                  resolvedProps,
                  // Resolved for outer only
                  "prop",
                  getComponentNameFromType(Component)
                );
              }
            }
          }
          child = updateMemoComponent(
            null,
            workInProgress2,
            Component,
            resolveDefaultProps(Component.type, resolvedProps),
            // The inner type can have defaults too
            renderLanes2
          );
          return child;
        }
      }
      var hint = "";
      {
        if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
          hint = " Did you wrap a component in React.lazy() more than once?";
        }
      }
      throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
    }
    function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
      workInProgress2.tag = ClassComponent;
      var hasContext;
      if (isContextProvider(Component)) {
        hasContext = true;
        pushContextProvider(workInProgress2);
      } else {
        hasContext = false;
      }
      prepareToReadContext(workInProgress2, renderLanes2);
      constructClassInstance(workInProgress2, Component, nextProps);
      mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
      return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
    }
    function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
      var props = workInProgress2.pendingProps;
      var context;
      {
        var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
        context = getMaskedContext(workInProgress2, unmaskedContext);
      }
      prepareToReadContext(workInProgress2, renderLanes2);
      var value;
      var hasId;
      {
        markComponentRenderStarted(workInProgress2);
      }
      {
        if (Component.prototype && typeof Component.prototype.render === "function") {
          var componentName = getComponentNameFromType(Component) || "Unknown";
          if (!didWarnAboutBadClass[componentName]) {
            error2("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
            didWarnAboutBadClass[componentName] = true;
          }
        }
        if (workInProgress2.mode & StrictLegacyMode) {
          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
        }
        setIsRendering(true);
        ReactCurrentOwner$1.current = workInProgress2;
        value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
        hasId = checkDidRenderIdHook();
        setIsRendering(false);
      }
      {
        markComponentRenderStopped();
      }
      workInProgress2.flags |= PerformedWork;
      {
        if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
          var _componentName = getComponentNameFromType(Component) || "Unknown";
          if (!didWarnAboutModulePatternComponent[_componentName]) {
            error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
            didWarnAboutModulePatternComponent[_componentName] = true;
          }
        }
      }
      if (
        // Run these checks in production only if the flag is off.
        // Eventually we'll delete this branch altogether.
        typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
      ) {
        {
          var _componentName2 = getComponentNameFromType(Component) || "Unknown";
          if (!didWarnAboutModulePatternComponent[_componentName2]) {
            error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
            didWarnAboutModulePatternComponent[_componentName2] = true;
          }
        }
        workInProgress2.tag = ClassComponent;
        workInProgress2.memoizedState = null;
        workInProgress2.updateQueue = null;
        var hasContext = false;
        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress2);
        } else {
          hasContext = false;
        }
        workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
        initializeUpdateQueue(workInProgress2);
        adoptClassInstance(workInProgress2, value);
        mountClassInstance(workInProgress2, Component, props, renderLanes2);
        return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
      } else {
        workInProgress2.tag = FunctionComponent;
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
        }
        if (getIsHydrating() && hasId) {
          pushMaterializedTreeId(workInProgress2);
        }
        reconcileChildren(null, workInProgress2, value, renderLanes2);
        {
          validateFunctionComponentInDev(workInProgress2, Component);
        }
        return workInProgress2.child;
      }
    }
    function validateFunctionComponentInDev(workInProgress2, Component) {
      {
        if (Component) {
          if (Component.childContextTypes) {
            error2("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
          }
        }
        if (workInProgress2.ref !== null) {
          var info2 = "";
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            info2 += "\n\nCheck the render method of `" + ownerName + "`.";
          }
          var warningKey = ownerName || "";
          var debugSource = workInProgress2._debugSource;
          if (debugSource) {
            warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
          }
          if (!didWarnAboutFunctionRefs[warningKey]) {
            didWarnAboutFunctionRefs[warningKey] = true;
            error2("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info2);
          }
        }
        if (typeof Component.getDerivedStateFromProps === "function") {
          var _componentName3 = getComponentNameFromType(Component) || "Unknown";
          if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
            error2("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
          }
        }
        if (typeof Component.contextType === "object" && Component.contextType !== null) {
          var _componentName4 = getComponentNameFromType(Component) || "Unknown";
          if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
            error2("%s: Function components do not support contextType.", _componentName4);
            didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
          }
        }
      }
    }
    var SUSPENDED_MARKER = {
      dehydrated: null,
      treeContext: null,
      retryLane: NoLane
    };
    function mountSuspenseOffscreenState(renderLanes2) {
      return {
        baseLanes: renderLanes2,
        cachePool: getSuspendedCache(),
        transitions: null
      };
    }
    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
      var cachePool = null;
      return {
        baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
        cachePool,
        transitions: prevOffscreenState.transitions
      };
    }
    function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
      if (current2 !== null) {
        var suspenseState = current2.memoizedState;
        if (suspenseState === null) {
          return false;
        }
      }
      return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
    }
    function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
      return removeLanes(current2.childLanes, renderLanes2);
    }
    function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
      var nextProps = workInProgress2.pendingProps;
      {
        if (shouldSuspend(workInProgress2)) {
          workInProgress2.flags |= DidCapture;
        }
      }
      var suspenseContext = suspenseStackCursor.current;
      var showFallback = false;
      var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
      if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
        showFallback = true;
        workInProgress2.flags &= ~DidCapture;
      } else {
        if (current2 === null || current2.memoizedState !== null) {
          {
            suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
          }
        }
      }
      suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
      pushSuspenseContext(workInProgress2, suspenseContext);
      if (current2 === null) {
        tryToClaimNextHydratableInstance(workInProgress2);
        var suspenseState = workInProgress2.memoizedState;
        if (suspenseState !== null) {
          var dehydrated = suspenseState.dehydrated;
          if (dehydrated !== null) {
            return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
          }
        }
        var nextPrimaryChildren = nextProps.children;
        var nextFallbackChildren = nextProps.fallback;
        if (showFallback) {
          var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
          var primaryChildFragment = workInProgress2.child;
          primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
          workInProgress2.memoizedState = SUSPENDED_MARKER;
          return fallbackFragment;
        } else {
          return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
        }
      } else {
        var prevState = current2.memoizedState;
        if (prevState !== null) {
          var _dehydrated = prevState.dehydrated;
          if (_dehydrated !== null) {
            return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
          }
        }
        if (showFallback) {
          var _nextFallbackChildren = nextProps.fallback;
          var _nextPrimaryChildren = nextProps.children;
          var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
          var _primaryChildFragment2 = workInProgress2.child;
          var prevOffscreenState = current2.child.memoizedState;
          _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
          _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
          workInProgress2.memoizedState = SUSPENDED_MARKER;
          return fallbackChildFragment;
        } else {
          var _nextPrimaryChildren2 = nextProps.children;
          var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
          workInProgress2.memoizedState = null;
          return _primaryChildFragment3;
        }
      }
    }
    function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
      var mode = workInProgress2.mode;
      var primaryChildProps = {
        mode: "visible",
        children: primaryChildren
      };
      var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
      primaryChildFragment.return = workInProgress2;
      workInProgress2.child = primaryChildFragment;
      return primaryChildFragment;
    }
    function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
      var mode = workInProgress2.mode;
      var progressedPrimaryFragment = workInProgress2.child;
      var primaryChildProps = {
        mode: "hidden",
        children: primaryChildren
      };
      var primaryChildFragment;
      var fallbackChildFragment;
      if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
        primaryChildFragment = progressedPrimaryFragment;
        primaryChildFragment.childLanes = NoLanes;
        primaryChildFragment.pendingProps = primaryChildProps;
        if (workInProgress2.mode & ProfileMode) {
          primaryChildFragment.actualDuration = 0;
          primaryChildFragment.actualStartTime = -1;
          primaryChildFragment.selfBaseDuration = 0;
          primaryChildFragment.treeBaseDuration = 0;
        }
        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
      } else {
        primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
      }
      primaryChildFragment.return = workInProgress2;
      fallbackChildFragment.return = workInProgress2;
      primaryChildFragment.sibling = fallbackChildFragment;
      workInProgress2.child = primaryChildFragment;
      return fallbackChildFragment;
    }
    function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
      return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
    }
    function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
      return createWorkInProgress(current2, offscreenProps);
    }
    function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
      var currentPrimaryChildFragment = current2.child;
      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
      var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
        mode: "visible",
        children: primaryChildren
      });
      if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
        primaryChildFragment.lanes = renderLanes2;
      }
      primaryChildFragment.return = workInProgress2;
      primaryChildFragment.sibling = null;
      if (currentFallbackChildFragment !== null) {
        var deletions = workInProgress2.deletions;
        if (deletions === null) {
          workInProgress2.deletions = [currentFallbackChildFragment];
          workInProgress2.flags |= ChildDeletion;
        } else {
          deletions.push(currentFallbackChildFragment);
        }
      }
      workInProgress2.child = primaryChildFragment;
      return primaryChildFragment;
    }
    function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
      var mode = workInProgress2.mode;
      var currentPrimaryChildFragment = current2.child;
      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
      var primaryChildProps = {
        mode: "hidden",
        children: primaryChildren
      };
      var primaryChildFragment;
      if (
        // In legacy mode, we commit the primary tree as if it successfully
        // completed, even though it's in an inconsistent state.
        (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
        // already cloned. In legacy mode, the only case where this isn't true is
        // when DevTools forces us to display a fallback; we skip the first render
        // pass entirely and go straight to rendering the fallback. (In Concurrent
        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
        // only codepath.)
        workInProgress2.child !== currentPrimaryChildFragment
      ) {
        var progressedPrimaryFragment = workInProgress2.child;
        primaryChildFragment = progressedPrimaryFragment;
        primaryChildFragment.childLanes = NoLanes;
        primaryChildFragment.pendingProps = primaryChildProps;
        if (workInProgress2.mode & ProfileMode) {
          primaryChildFragment.actualDuration = 0;
          primaryChildFragment.actualStartTime = -1;
          primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
          primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
        }
        workInProgress2.deletions = null;
      } else {
        primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
        primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
      }
      var fallbackChildFragment;
      if (currentFallbackChildFragment !== null) {
        fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
      } else {
        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
        fallbackChildFragment.flags |= Placement;
      }
      fallbackChildFragment.return = workInProgress2;
      primaryChildFragment.return = workInProgress2;
      primaryChildFragment.sibling = fallbackChildFragment;
      workInProgress2.child = primaryChildFragment;
      return fallbackChildFragment;
    }
    function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
      if (recoverableError !== null) {
        queueHydrationError(recoverableError);
      }
      reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
      var nextProps = workInProgress2.pendingProps;
      var primaryChildren = nextProps.children;
      var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
      primaryChildFragment.flags |= Placement;
      workInProgress2.memoizedState = null;
      return primaryChildFragment;
    }
    function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
      var fiberMode = workInProgress2.mode;
      var primaryChildProps = {
        mode: "visible",
        children: primaryChildren
      };
      var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
      var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
      fallbackChildFragment.flags |= Placement;
      primaryChildFragment.return = workInProgress2;
      fallbackChildFragment.return = workInProgress2;
      primaryChildFragment.sibling = fallbackChildFragment;
      workInProgress2.child = primaryChildFragment;
      if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
        reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
      }
      return fallbackChildFragment;
    }
    function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
      if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
        {
          error2("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
        }
        workInProgress2.lanes = laneToLanes(SyncLane);
      } else if (isSuspenseInstanceFallback(suspenseInstance)) {
        workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
      } else {
        workInProgress2.lanes = laneToLanes(OffscreenLane);
      }
      return null;
    }
    function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
      if (!didSuspend) {
        warnIfHydrating();
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          return retrySuspenseComponentWithoutHydrating(
            current2,
            workInProgress2,
            renderLanes2,
            // TODO: When we delete legacy mode, we should make this error argument
            // required — every concurrent mode path that causes hydration to
            // de-opt to client rendering should have an error message.
            null
          );
        }
        if (isSuspenseInstanceFallback(suspenseInstance)) {
          var digest, message, stack;
          {
            var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
            digest = _getSuspenseInstanceF.digest;
            message = _getSuspenseInstanceF.message;
            stack = _getSuspenseInstanceF.stack;
          }
          var error3;
          if (message) {
            error3 = new Error(message);
          } else {
            error3 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
          }
          var capturedValue = createCapturedValue(error3, digest, stack);
          return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
        }
        var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
        if (didReceiveUpdate || hasContextChanged2) {
          var root2 = getWorkInProgressRoot();
          if (root2 !== null) {
            var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
            if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
              suspenseState.retryLane = attemptHydrationAtLane;
              var eventTime = NoTimestamp;
              enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
              scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
            }
          }
          renderDidSuspendDelayIfPossible();
          var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
          return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
        } else if (isSuspenseInstancePending(suspenseInstance)) {
          workInProgress2.flags |= DidCapture;
          workInProgress2.child = current2.child;
          var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
          registerSuspenseInstanceRetry(suspenseInstance, retry);
          return null;
        } else {
          reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
          var primaryChildren = nextProps.children;
          var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
          primaryChildFragment.flags |= Hydrating;
          return primaryChildFragment;
        }
      } else {
        if (workInProgress2.flags & ForceClientRender) {
          workInProgress2.flags &= ~ForceClientRender;
          var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
          return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
        } else if (workInProgress2.memoizedState !== null) {
          workInProgress2.child = current2.child;
          workInProgress2.flags |= DidCapture;
          return null;
        } else {
          var nextPrimaryChildren = nextProps.children;
          var nextFallbackChildren = nextProps.fallback;
          var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
          var _primaryChildFragment4 = workInProgress2.child;
          _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
          workInProgress2.memoizedState = SUSPENDED_MARKER;
          return fallbackChildFragment;
        }
      }
    }
    function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
      fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
      var alternate = fiber.alternate;
      if (alternate !== null) {
        alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
      }
      scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
    }
    function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
      var node2 = firstChild;
      while (node2 !== null) {
        if (node2.tag === SuspenseComponent) {
          var state = node2.memoizedState;
          if (state !== null) {
            scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
          }
        } else if (node2.tag === SuspenseListComponent) {
          scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
        } else if (node2.child !== null) {
          node2.child.return = node2;
          node2 = node2.child;
          continue;
        }
        if (node2 === workInProgress2) {
          return;
        }
        while (node2.sibling === null) {
          if (node2.return === null || node2.return === workInProgress2) {
            return;
          }
          node2 = node2.return;
        }
        node2.sibling.return = node2.return;
        node2 = node2.sibling;
      }
    }
    function findLastContentRow(firstChild) {
      var row = firstChild;
      var lastContentRow = null;
      while (row !== null) {
        var currentRow = row.alternate;
        if (currentRow !== null && findFirstSuspended(currentRow) === null) {
          lastContentRow = row;
        }
        row = row.sibling;
      }
      return lastContentRow;
    }
    function validateRevealOrder(revealOrder) {
      {
        if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
          didWarnAboutRevealOrder[revealOrder] = true;
          if (typeof revealOrder === "string") {
            switch (revealOrder.toLowerCase()) {
              case "together":
              case "forwards":
              case "backwards": {
                error2('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                break;
              }
              case "forward":
              case "backward": {
                error2('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                break;
              }
              default:
                error2('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                break;
            }
          } else {
            error2('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
          }
        }
      }
    }
    function validateTailOptions(tailMode, revealOrder) {
      {
        if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
          if (tailMode !== "collapsed" && tailMode !== "hidden") {
            didWarnAboutTailOptions[tailMode] = true;
            error2('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
          } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
            didWarnAboutTailOptions[tailMode] = true;
            error2('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
          }
        }
      }
    }
    function validateSuspenseListNestedChild(childSlot, index2) {
      {
        var isAnArray = isArray2(childSlot);
        var isIterable2 = !isAnArray && typeof getIteratorFn(childSlot) === "function";
        if (isAnArray || isIterable2) {
          var type = isAnArray ? "array" : "iterable";
          error2("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
          return false;
        }
      }
      return true;
    }
    function validateSuspenseListChildren(children, revealOrder) {
      {
        if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
          if (isArray2(children)) {
            for (var i = 0; i < children.length; i++) {
              if (!validateSuspenseListNestedChild(children[i], i)) {
                return;
              }
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var childrenIterator = iteratorFn.call(children);
              if (childrenIterator) {
                var step = childrenIterator.next();
                var _i = 0;
                for (; !step.done; step = childrenIterator.next()) {
                  if (!validateSuspenseListNestedChild(step.value, _i)) {
                    return;
                  }
                  _i++;
                }
              }
            } else {
              error2('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
            }
          }
        }
      }
    }
    function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
      var renderState = workInProgress2.memoizedState;
      if (renderState === null) {
        workInProgress2.memoizedState = {
          isBackwards,
          rendering: null,
          renderingStartTime: 0,
          last: lastContentRow,
          tail,
          tailMode
        };
      } else {
        renderState.isBackwards = isBackwards;
        renderState.rendering = null;
        renderState.renderingStartTime = 0;
        renderState.last = lastContentRow;
        renderState.tail = tail;
        renderState.tailMode = tailMode;
      }
    }
    function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
      var nextProps = workInProgress2.pendingProps;
      var revealOrder = nextProps.revealOrder;
      var tailMode = nextProps.tail;
      var newChildren = nextProps.children;
      validateRevealOrder(revealOrder);
      validateTailOptions(tailMode, revealOrder);
      validateSuspenseListChildren(newChildren, revealOrder);
      reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
      var suspenseContext = suspenseStackCursor.current;
      var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
      if (shouldForceFallback) {
        suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
        workInProgress2.flags |= DidCapture;
      } else {
        var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
        if (didSuspendBefore) {
          propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
      }
      pushSuspenseContext(workInProgress2, suspenseContext);
      if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
        workInProgress2.memoizedState = null;
      } else {
        switch (revealOrder) {
          case "forwards": {
            var lastContentRow = findLastContentRow(workInProgress2.child);
            var tail;
            if (lastContentRow === null) {
              tail = workInProgress2.child;
              workInProgress2.child = null;
            } else {
              tail = lastContentRow.sibling;
              lastContentRow.sibling = null;
            }
            initSuspenseListRenderState(
              workInProgress2,
              false,
              // isBackwards
              tail,
              lastContentRow,
              tailMode
            );
            break;
          }
          case "backwards": {
            var _tail = null;
            var row = workInProgress2.child;
            workInProgress2.child = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                workInProgress2.child = row;
                break;
              }
              var nextRow = row.sibling;
              row.sibling = _tail;
              _tail = row;
              row = nextRow;
            }
            initSuspenseListRenderState(
              workInProgress2,
              true,
              // isBackwards
              _tail,
              null,
              // last
              tailMode
            );
            break;
          }
          case "together": {
            initSuspenseListRenderState(
              workInProgress2,
              false,
              // isBackwards
              null,
              // tail
              null,
              // last
              void 0
            );
            break;
          }
          default: {
            workInProgress2.memoizedState = null;
          }
        }
      }
      return workInProgress2.child;
    }
    function updatePortalComponent(current2, workInProgress2, renderLanes2) {
      pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
      var nextChildren = workInProgress2.pendingProps;
      if (current2 === null) {
        workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
      } else {
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      }
      return workInProgress2.child;
    }
    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
    function updateContextProvider(current2, workInProgress2, renderLanes2) {
      var providerType = workInProgress2.type;
      var context = providerType._context;
      var newProps = workInProgress2.pendingProps;
      var oldProps = workInProgress2.memoizedProps;
      var newValue = newProps.value;
      {
        if (!("value" in newProps)) {
          if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
            hasWarnedAboutUsingNoValuePropOnContextProvider = true;
            error2("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
          }
        }
        var providerPropTypes = workInProgress2.type.propTypes;
        if (providerPropTypes) {
          checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
        }
      }
      pushProvider(workInProgress2, context, newValue);
      {
        if (oldProps !== null) {
          var oldValue = oldProps.value;
          if (objectIs(oldValue, newValue)) {
            if (oldProps.children === newProps.children && !hasContextChanged()) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          } else {
            propagateContextChange(workInProgress2, context, renderLanes2);
          }
        }
      }
      var newChildren = newProps.children;
      reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
      return workInProgress2.child;
    }
    var hasWarnedAboutUsingContextAsConsumer = false;
    function updateContextConsumer(current2, workInProgress2, renderLanes2) {
      var context = workInProgress2.type;
      {
        if (context._context === void 0) {
          if (context !== context.Consumer) {
            if (!hasWarnedAboutUsingContextAsConsumer) {
              hasWarnedAboutUsingContextAsConsumer = true;
              error2("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
            }
          }
        } else {
          context = context._context;
        }
      }
      var newProps = workInProgress2.pendingProps;
      var render3 = newProps.children;
      {
        if (typeof render3 !== "function") {
          error2("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        }
      }
      prepareToReadContext(workInProgress2, renderLanes2);
      var newValue = readContext(context);
      {
        markComponentRenderStarted(workInProgress2);
      }
      var newChildren;
      {
        ReactCurrentOwner$1.current = workInProgress2;
        setIsRendering(true);
        newChildren = render3(newValue);
        setIsRendering(false);
      }
      {
        markComponentRenderStopped();
      }
      workInProgress2.flags |= PerformedWork;
      reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
      return workInProgress2.child;
    }
    function markWorkInProgressReceivedUpdate() {
      didReceiveUpdate = true;
    }
    function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
      if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
        if (current2 !== null) {
          current2.alternate = null;
          workInProgress2.alternate = null;
          workInProgress2.flags |= Placement;
        }
      }
    }
    function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
      if (current2 !== null) {
        workInProgress2.dependencies = current2.dependencies;
      }
      {
        stopProfilerTimerIfRunning();
      }
      markSkippedUpdateLanes(workInProgress2.lanes);
      if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
        {
          return null;
        }
      }
      cloneChildFibers(current2, workInProgress2);
      return workInProgress2.child;
    }
    function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
      {
        var returnFiber = oldWorkInProgress.return;
        if (returnFiber === null) {
          throw new Error("Cannot swap the root fiber.");
        }
        current2.alternate = null;
        oldWorkInProgress.alternate = null;
        newWorkInProgress.index = oldWorkInProgress.index;
        newWorkInProgress.sibling = oldWorkInProgress.sibling;
        newWorkInProgress.return = oldWorkInProgress.return;
        newWorkInProgress.ref = oldWorkInProgress.ref;
        if (oldWorkInProgress === returnFiber.child) {
          returnFiber.child = newWorkInProgress;
        } else {
          var prevSibling = returnFiber.child;
          if (prevSibling === null) {
            throw new Error("Expected parent to have a child.");
          }
          while (prevSibling.sibling !== oldWorkInProgress) {
            prevSibling = prevSibling.sibling;
            if (prevSibling === null) {
              throw new Error("Expected to find the previous sibling.");
            }
          }
          prevSibling.sibling = newWorkInProgress;
        }
        var deletions = returnFiber.deletions;
        if (deletions === null) {
          returnFiber.deletions = [current2];
          returnFiber.flags |= ChildDeletion;
        } else {
          deletions.push(current2);
        }
        newWorkInProgress.flags |= Placement;
        return newWorkInProgress;
      }
    }
    function checkScheduledUpdateOrContext(current2, renderLanes2) {
      var updateLanes = current2.lanes;
      if (includesSomeLane(updateLanes, renderLanes2)) {
        return true;
      }
      return false;
    }
    function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
      switch (workInProgress2.tag) {
        case HostRoot:
          pushHostRootContext(workInProgress2);
          resetHydrationState();
          break;
        case HostComponent:
          pushHostContext(workInProgress2);
          break;
        case ClassComponent: {
          var Component = workInProgress2.type;
          if (isContextProvider(Component)) {
            pushContextProvider(workInProgress2);
          }
          break;
        }
        case HostPortal:
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          break;
        case ContextProvider: {
          var newValue = workInProgress2.memoizedProps.value;
          var context = workInProgress2.type._context;
          pushProvider(workInProgress2, context, newValue);
          break;
        }
        case Profiler:
          {
            var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
            if (hasChildWork) {
              workInProgress2.flags |= Update;
            }
            {
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
          }
          break;
        case SuspenseComponent: {
          var state = workInProgress2.memoizedState;
          if (state !== null) {
            if (state.dehydrated !== null) {
              pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              workInProgress2.flags |= DidCapture;
              return null;
            }
            var primaryChildFragment = workInProgress2.child;
            var primaryChildLanes = primaryChildFragment.childLanes;
            if (includesSomeLane(renderLanes2, primaryChildLanes)) {
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            } else {
              pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              if (child !== null) {
                return child.sibling;
              } else {
                return null;
              }
            }
          } else {
            pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
          }
          break;
        }
        case SuspenseListComponent: {
          var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
          var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
          if (didSuspendBefore) {
            if (_hasChildWork) {
              return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= DidCapture;
          }
          var renderState = workInProgress2.memoizedState;
          if (renderState !== null) {
            renderState.rendering = null;
            renderState.tail = null;
            renderState.lastEffect = null;
          }
          pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
          if (_hasChildWork) {
            break;
          } else {
            return null;
          }
        }
        case OffscreenComponent:
        case LegacyHiddenComponent: {
          workInProgress2.lanes = NoLanes;
          return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
        }
      }
      return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
    }
    function beginWork(current2, workInProgress2, renderLanes2) {
      {
        if (workInProgress2._debugNeedsRemount && current2 !== null) {
          return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
        }
      }
      if (current2 !== null) {
        var oldProps = current2.memoizedProps;
        var newProps = workInProgress2.pendingProps;
        if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
        workInProgress2.type !== current2.type) {
          didReceiveUpdate = true;
        } else {
          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
          if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
          // may not be work scheduled on `current`, so we check for this flag.
          (workInProgress2.flags & DidCapture) === NoFlags) {
            didReceiveUpdate = false;
            return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
          }
          if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
            didReceiveUpdate = true;
          } else {
            didReceiveUpdate = false;
          }
        }
      } else {
        didReceiveUpdate = false;
        if (getIsHydrating() && isForkedChild(workInProgress2)) {
          var slotIndex = workInProgress2.index;
          var numberOfForks = getForksAtLevel();
          pushTreeId(workInProgress2, numberOfForks, slotIndex);
        }
      }
      workInProgress2.lanes = NoLanes;
      switch (workInProgress2.tag) {
        case IndeterminateComponent: {
          return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
        }
        case LazyComponent: {
          var elementType = workInProgress2.elementType;
          return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
        }
        case FunctionComponent: {
          var Component = workInProgress2.type;
          var unresolvedProps = workInProgress2.pendingProps;
          var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
          return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
        }
        case ClassComponent: {
          var _Component = workInProgress2.type;
          var _unresolvedProps = workInProgress2.pendingProps;
          var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
          return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
        }
        case HostRoot:
          return updateHostRoot(current2, workInProgress2, renderLanes2);
        case HostComponent:
          return updateHostComponent(current2, workInProgress2, renderLanes2);
        case HostText:
          return updateHostText(current2, workInProgress2);
        case SuspenseComponent:
          return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
        case HostPortal:
          return updatePortalComponent(current2, workInProgress2, renderLanes2);
        case ForwardRef: {
          var type = workInProgress2.type;
          var _unresolvedProps2 = workInProgress2.pendingProps;
          var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
          return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
        }
        case Fragment:
          return updateFragment(current2, workInProgress2, renderLanes2);
        case Mode:
          return updateMode(current2, workInProgress2, renderLanes2);
        case Profiler:
          return updateProfiler(current2, workInProgress2, renderLanes2);
        case ContextProvider:
          return updateContextProvider(current2, workInProgress2, renderLanes2);
        case ContextConsumer:
          return updateContextConsumer(current2, workInProgress2, renderLanes2);
        case MemoComponent: {
          var _type2 = workInProgress2.type;
          var _unresolvedProps3 = workInProgress2.pendingProps;
          var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerPropTypes = _type2.propTypes;
              if (outerPropTypes) {
                checkPropTypes(
                  outerPropTypes,
                  _resolvedProps3,
                  // Resolved for outer only
                  "prop",
                  getComponentNameFromType(_type2)
                );
              }
            }
          }
          _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
          return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
        }
        case SimpleMemoComponent: {
          return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
        }
        case IncompleteClassComponent: {
          var _Component2 = workInProgress2.type;
          var _unresolvedProps4 = workInProgress2.pendingProps;
          var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
          return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
        }
        case SuspenseListComponent: {
          return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
        }
        case ScopeComponent: {
          break;
        }
        case OffscreenComponent: {
          return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
        }
      }
      throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function markUpdate(workInProgress2) {
      workInProgress2.flags |= Update;
    }
    function markRef$1(workInProgress2) {
      workInProgress2.flags |= Ref;
      {
        workInProgress2.flags |= RefStatic;
      }
    }
    var appendAllChildren;
    var updateHostContainer;
    var updateHostComponent$1;
    var updateHostText$1;
    {
      appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
        var node2 = workInProgress2.child;
        while (node2 !== null) {
          if (node2.tag === HostComponent || node2.tag === HostText) {
            appendInitialChild(parent, node2.stateNode);
          } else if (node2.tag === HostPortal)
            ;
          else if (node2.child !== null) {
            node2.child.return = node2;
            node2 = node2.child;
            continue;
          }
          if (node2 === workInProgress2) {
            return;
          }
          while (node2.sibling === null) {
            if (node2.return === null || node2.return === workInProgress2) {
              return;
            }
            node2 = node2.return;
          }
          node2.sibling.return = node2.return;
          node2 = node2.sibling;
        }
      };
      updateHostContainer = function(current2, workInProgress2) {
      };
      updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
        var oldProps = current2.memoizedProps;
        if (oldProps === newProps) {
          return;
        }
        var instance2 = workInProgress2.stateNode;
        var currentHostContext = getHostContext();
        var updatePayload = prepareUpdate(instance2, type, oldProps, newProps, rootContainerInstance, currentHostContext);
        workInProgress2.updateQueue = updatePayload;
        if (updatePayload) {
          markUpdate(workInProgress2);
        }
      };
      updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
        if (oldText !== newText) {
          markUpdate(workInProgress2);
        }
      };
    }
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
      if (getIsHydrating()) {
        return;
      }
      switch (renderState.tailMode) {
        case "hidden": {
          var tailNode = renderState.tail;
          var lastTailNode = null;
          while (tailNode !== null) {
            if (tailNode.alternate !== null) {
              lastTailNode = tailNode;
            }
            tailNode = tailNode.sibling;
          }
          if (lastTailNode === null) {
            renderState.tail = null;
          } else {
            lastTailNode.sibling = null;
          }
          break;
        }
        case "collapsed": {
          var _tailNode = renderState.tail;
          var _lastTailNode = null;
          while (_tailNode !== null) {
            if (_tailNode.alternate !== null) {
              _lastTailNode = _tailNode;
            }
            _tailNode = _tailNode.sibling;
          }
          if (_lastTailNode === null) {
            if (!hasRenderedATailFallback && renderState.tail !== null) {
              renderState.tail.sibling = null;
            } else {
              renderState.tail = null;
            }
          } else {
            _lastTailNode.sibling = null;
          }
          break;
        }
      }
    }
    function bubbleProperties(completedWork) {
      var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
      var newChildLanes = NoLanes;
      var subtreeFlags = NoFlags;
      if (!didBailout) {
        if ((completedWork.mode & ProfileMode) !== NoMode) {
          var actualDuration = completedWork.actualDuration;
          var treeBaseDuration = completedWork.selfBaseDuration;
          var child = completedWork.child;
          while (child !== null) {
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
            subtreeFlags |= child.subtreeFlags;
            subtreeFlags |= child.flags;
            actualDuration += child.actualDuration;
            treeBaseDuration += child.treeBaseDuration;
            child = child.sibling;
          }
          completedWork.actualDuration = actualDuration;
          completedWork.treeBaseDuration = treeBaseDuration;
        } else {
          var _child = completedWork.child;
          while (_child !== null) {
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
            subtreeFlags |= _child.subtreeFlags;
            subtreeFlags |= _child.flags;
            _child.return = completedWork;
            _child = _child.sibling;
          }
        }
        completedWork.subtreeFlags |= subtreeFlags;
      } else {
        if ((completedWork.mode & ProfileMode) !== NoMode) {
          var _treeBaseDuration = completedWork.selfBaseDuration;
          var _child2 = completedWork.child;
          while (_child2 !== null) {
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
            subtreeFlags |= _child2.subtreeFlags & StaticMask;
            subtreeFlags |= _child2.flags & StaticMask;
            _treeBaseDuration += _child2.treeBaseDuration;
            _child2 = _child2.sibling;
          }
          completedWork.treeBaseDuration = _treeBaseDuration;
        } else {
          var _child3 = completedWork.child;
          while (_child3 !== null) {
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
            subtreeFlags |= _child3.subtreeFlags & StaticMask;
            subtreeFlags |= _child3.flags & StaticMask;
            _child3.return = completedWork;
            _child3 = _child3.sibling;
          }
        }
        completedWork.subtreeFlags |= subtreeFlags;
      }
      completedWork.childLanes = newChildLanes;
      return didBailout;
    }
    function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
      if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
        warnIfUnhydratedTailNodes(workInProgress2);
        resetHydrationState();
        workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
        return false;
      }
      var wasHydrated = popHydrationState(workInProgress2);
      if (nextState !== null && nextState.dehydrated !== null) {
        if (current2 === null) {
          if (!wasHydrated) {
            throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
          }
          prepareToHydrateHostSuspenseInstance(workInProgress2);
          bubbleProperties(workInProgress2);
          {
            if ((workInProgress2.mode & ProfileMode) !== NoMode) {
              var isTimedOutSuspense = nextState !== null;
              if (isTimedOutSuspense) {
                var primaryChildFragment = workInProgress2.child;
                if (primaryChildFragment !== null) {
                  workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                }
              }
            }
          }
          return false;
        } else {
          resetHydrationState();
          if ((workInProgress2.flags & DidCapture) === NoFlags) {
            workInProgress2.memoizedState = null;
          }
          workInProgress2.flags |= Update;
          bubbleProperties(workInProgress2);
          {
            if ((workInProgress2.mode & ProfileMode) !== NoMode) {
              var _isTimedOutSuspense = nextState !== null;
              if (_isTimedOutSuspense) {
                var _primaryChildFragment = workInProgress2.child;
                if (_primaryChildFragment !== null) {
                  workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                }
              }
            }
          }
          return false;
        }
      } else {
        upgradeHydrationErrorsToRecoverable();
        return true;
      }
    }
    function completeWork(current2, workInProgress2, renderLanes2) {
      var newProps = workInProgress2.pendingProps;
      popTreeContext(workInProgress2);
      switch (workInProgress2.tag) {
        case IndeterminateComponent:
        case LazyComponent:
        case SimpleMemoComponent:
        case FunctionComponent:
        case ForwardRef:
        case Fragment:
        case Mode:
        case Profiler:
        case ContextConsumer:
        case MemoComponent:
          bubbleProperties(workInProgress2);
          return null;
        case ClassComponent: {
          var Component = workInProgress2.type;
          if (isContextProvider(Component)) {
            popContext(workInProgress2);
          }
          bubbleProperties(workInProgress2);
          return null;
        }
        case HostRoot: {
          var fiberRoot = workInProgress2.stateNode;
          popHostContainer(workInProgress2);
          popTopLevelContextObject(workInProgress2);
          resetWorkInProgressVersions();
          if (fiberRoot.pendingContext) {
            fiberRoot.context = fiberRoot.pendingContext;
            fiberRoot.pendingContext = null;
          }
          if (current2 === null || current2.child === null) {
            var wasHydrated = popHydrationState(workInProgress2);
            if (wasHydrated) {
              markUpdate(workInProgress2);
            } else {
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (
                  // Check if this is a client root
                  !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                  (workInProgress2.flags & ForceClientRender) !== NoFlags
                ) {
                  workInProgress2.flags |= Snapshot;
                  upgradeHydrationErrorsToRecoverable();
                }
              }
            }
          }
          updateHostContainer(current2, workInProgress2);
          bubbleProperties(workInProgress2);
          return null;
        }
        case HostComponent: {
          popHostContext(workInProgress2);
          var rootContainerInstance = getRootHostContainer();
          var type = workInProgress2.type;
          if (current2 !== null && workInProgress2.stateNode != null) {
            updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
            if (current2.ref !== workInProgress2.ref) {
              markRef$1(workInProgress2);
            }
          } else {
            if (!newProps) {
              if (workInProgress2.stateNode === null) {
                throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            var currentHostContext = getHostContext();
            var _wasHydrated = popHydrationState(workInProgress2);
            if (_wasHydrated) {
              if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                markUpdate(workInProgress2);
              }
            } else {
              var instance2 = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
              appendAllChildren(instance2, workInProgress2, false, false);
              workInProgress2.stateNode = instance2;
              if (finalizeInitialChildren(instance2, type, newProps, rootContainerInstance)) {
                markUpdate(workInProgress2);
              }
            }
            if (workInProgress2.ref !== null) {
              markRef$1(workInProgress2);
            }
          }
          bubbleProperties(workInProgress2);
          return null;
        }
        case HostText: {
          var newText = newProps;
          if (current2 && workInProgress2.stateNode != null) {
            var oldText = current2.memoizedProps;
            updateHostText$1(current2, workInProgress2, oldText, newText);
          } else {
            if (typeof newText !== "string") {
              if (workInProgress2.stateNode === null) {
                throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var _rootContainerInstance = getRootHostContainer();
            var _currentHostContext = getHostContext();
            var _wasHydrated2 = popHydrationState(workInProgress2);
            if (_wasHydrated2) {
              if (prepareToHydrateHostTextInstance(workInProgress2)) {
                markUpdate(workInProgress2);
              }
            } else {
              workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
            }
          }
          bubbleProperties(workInProgress2);
          return null;
        }
        case SuspenseComponent: {
          popSuspenseContext(workInProgress2);
          var nextState = workInProgress2.memoizedState;
          if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
            var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
            if (!fallthroughToNormalSuspensePath) {
              if (workInProgress2.flags & ShouldCapture) {
                return workInProgress2;
              } else {
                return null;
              }
            }
          }
          if ((workInProgress2.flags & DidCapture) !== NoFlags) {
            workInProgress2.lanes = renderLanes2;
            if ((workInProgress2.mode & ProfileMode) !== NoMode) {
              transferActualDuration(workInProgress2);
            }
            return workInProgress2;
          }
          var nextDidTimeout = nextState !== null;
          var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
          if (nextDidTimeout !== prevDidTimeout) {
            if (nextDidTimeout) {
              var _offscreenFiber2 = workInProgress2.child;
              _offscreenFiber2.flags |= Visibility;
              if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                  renderDidSuspend();
                } else {
                  renderDidSuspendDelayIfPossible();
                }
              }
            }
          }
          var wakeables = workInProgress2.updateQueue;
          if (wakeables !== null) {
            workInProgress2.flags |= Update;
          }
          bubbleProperties(workInProgress2);
          {
            if ((workInProgress2.mode & ProfileMode) !== NoMode) {
              if (nextDidTimeout) {
                var primaryChildFragment = workInProgress2.child;
                if (primaryChildFragment !== null) {
                  workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                }
              }
            }
          }
          return null;
        }
        case HostPortal:
          popHostContainer(workInProgress2);
          updateHostContainer(current2, workInProgress2);
          if (current2 === null) {
            preparePortalMount(workInProgress2.stateNode.containerInfo);
          }
          bubbleProperties(workInProgress2);
          return null;
        case ContextProvider:
          var context = workInProgress2.type._context;
          popProvider(context, workInProgress2);
          bubbleProperties(workInProgress2);
          return null;
        case IncompleteClassComponent: {
          var _Component = workInProgress2.type;
          if (isContextProvider(_Component)) {
            popContext(workInProgress2);
          }
          bubbleProperties(workInProgress2);
          return null;
        }
        case SuspenseListComponent: {
          popSuspenseContext(workInProgress2);
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            bubbleProperties(workInProgress2);
            return null;
          }
          var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
          var renderedTail = renderState.rendering;
          if (renderedTail === null) {
            if (!didSuspendAlready) {
              var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
              if (!cannotBeSuspended) {
                var row = workInProgress2.child;
                while (row !== null) {
                  var suspended = findFirstSuspended(row);
                  if (suspended !== null) {
                    didSuspendAlready = true;
                    workInProgress2.flags |= DidCapture;
                    cutOffTailIfNeeded(renderState, false);
                    var newThenables = suspended.updateQueue;
                    if (newThenables !== null) {
                      workInProgress2.updateQueue = newThenables;
                      workInProgress2.flags |= Update;
                    }
                    workInProgress2.subtreeFlags = NoFlags;
                    resetChildFibers(workInProgress2, renderLanes2);
                    pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                    return workInProgress2.child;
                  }
                  row = row.sibling;
                }
              }
              if (renderState.tail !== null && now() > getRenderTargetTime()) {
                workInProgress2.flags |= DidCapture;
                didSuspendAlready = true;
                cutOffTailIfNeeded(renderState, false);
                workInProgress2.lanes = SomeRetryLane;
              }
            } else {
              cutOffTailIfNeeded(renderState, false);
            }
          } else {
            if (!didSuspendAlready) {
              var _suspended = findFirstSuspended(renderedTail);
              if (_suspended !== null) {
                workInProgress2.flags |= DidCapture;
                didSuspendAlready = true;
                var _newThenables = _suspended.updateQueue;
                if (_newThenables !== null) {
                  workInProgress2.updateQueue = _newThenables;
                  workInProgress2.flags |= Update;
                }
                cutOffTailIfNeeded(renderState, true);
                if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
              } else if (
                // The time it took to render last row is greater than the remaining
                // time we have to render. So rendering one more row would likely
                // exceed it.
                now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
              ) {
                workInProgress2.flags |= DidCapture;
                didSuspendAlready = true;
                cutOffTailIfNeeded(renderState, false);
                workInProgress2.lanes = SomeRetryLane;
              }
            }
            if (renderState.isBackwards) {
              renderedTail.sibling = workInProgress2.child;
              workInProgress2.child = renderedTail;
            } else {
              var previousSibling = renderState.last;
              if (previousSibling !== null) {
                previousSibling.sibling = renderedTail;
              } else {
                workInProgress2.child = renderedTail;
              }
              renderState.last = renderedTail;
            }
          }
          if (renderState.tail !== null) {
            var next2 = renderState.tail;
            renderState.rendering = next2;
            renderState.tail = next2.sibling;
            renderState.renderingStartTime = now();
            next2.sibling = null;
            var suspenseContext = suspenseStackCursor.current;
            if (didSuspendAlready) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            } else {
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            return next2;
          }
          bubbleProperties(workInProgress2);
          return null;
        }
        case ScopeComponent: {
          break;
        }
        case OffscreenComponent:
        case LegacyHiddenComponent: {
          popRenderLanes(workInProgress2);
          var _nextState = workInProgress2.memoizedState;
          var nextIsHidden = _nextState !== null;
          if (current2 !== null) {
            var _prevState = current2.memoizedState;
            var prevIsHidden = _prevState !== null;
            if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
            !enableLegacyHidden) {
              workInProgress2.flags |= Visibility;
            }
          }
          if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
            bubbleProperties(workInProgress2);
          } else {
            if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
              bubbleProperties(workInProgress2);
              {
                if (workInProgress2.subtreeFlags & (Placement | Update)) {
                  workInProgress2.flags |= Visibility;
                }
              }
            }
          }
          return null;
        }
        case CacheComponent: {
          return null;
        }
        case TracingMarkerComponent: {
          return null;
        }
      }
      throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function unwindWork(current2, workInProgress2, renderLanes2) {
      popTreeContext(workInProgress2);
      switch (workInProgress2.tag) {
        case ClassComponent: {
          var Component = workInProgress2.type;
          if (isContextProvider(Component)) {
            popContext(workInProgress2);
          }
          var flags2 = workInProgress2.flags;
          if (flags2 & ShouldCapture) {
            workInProgress2.flags = flags2 & ~ShouldCapture | DidCapture;
            if ((workInProgress2.mode & ProfileMode) !== NoMode) {
              transferActualDuration(workInProgress2);
            }
            return workInProgress2;
          }
          return null;
        }
        case HostRoot: {
          popHostContainer(workInProgress2);
          popTopLevelContextObject(workInProgress2);
          resetWorkInProgressVersions();
          var _flags2 = workInProgress2.flags;
          if ((_flags2 & ShouldCapture) !== NoFlags && (_flags2 & DidCapture) === NoFlags) {
            workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
            return workInProgress2;
          }
          return null;
        }
        case HostComponent: {
          popHostContext(workInProgress2);
          return null;
        }
        case SuspenseComponent: {
          popSuspenseContext(workInProgress2);
          var suspenseState = workInProgress2.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            if (workInProgress2.alternate === null) {
              throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
            }
            resetHydrationState();
          }
          var _flags22 = workInProgress2.flags;
          if (_flags22 & ShouldCapture) {
            workInProgress2.flags = _flags22 & ~ShouldCapture | DidCapture;
            if ((workInProgress2.mode & ProfileMode) !== NoMode) {
              transferActualDuration(workInProgress2);
            }
            return workInProgress2;
          }
          return null;
        }
        case SuspenseListComponent: {
          popSuspenseContext(workInProgress2);
          return null;
        }
        case HostPortal:
          popHostContainer(workInProgress2);
          return null;
        case ContextProvider:
          var context = workInProgress2.type._context;
          popProvider(context, workInProgress2);
          return null;
        case OffscreenComponent:
        case LegacyHiddenComponent:
          popRenderLanes(workInProgress2);
          return null;
        case CacheComponent:
          return null;
        default:
          return null;
      }
    }
    function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
      popTreeContext(interruptedWork);
      switch (interruptedWork.tag) {
        case ClassComponent: {
          var childContextTypes = interruptedWork.type.childContextTypes;
          if (childContextTypes !== null && childContextTypes !== void 0) {
            popContext(interruptedWork);
          }
          break;
        }
        case HostRoot: {
          popHostContainer(interruptedWork);
          popTopLevelContextObject(interruptedWork);
          resetWorkInProgressVersions();
          break;
        }
        case HostComponent: {
          popHostContext(interruptedWork);
          break;
        }
        case HostPortal:
          popHostContainer(interruptedWork);
          break;
        case SuspenseComponent:
          popSuspenseContext(interruptedWork);
          break;
        case SuspenseListComponent:
          popSuspenseContext(interruptedWork);
          break;
        case ContextProvider:
          var context = interruptedWork.type._context;
          popProvider(context, interruptedWork);
          break;
        case OffscreenComponent:
        case LegacyHiddenComponent:
          popRenderLanes(interruptedWork);
          break;
      }
    }
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    {
      didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
    }
    var offscreenSubtreeIsHidden = false;
    var offscreenSubtreeWasHidden = false;
    var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
    var nextEffect = null;
    var inProgressLanes = null;
    var inProgressRoot = null;
    function reportUncaughtErrorInDEV(error3) {
      {
        invokeGuardedCallback(null, function() {
          throw error3;
        });
        clearCaughtError();
      }
    }
    var callComponentWillUnmountWithTimer = function(current2, instance2) {
      instance2.props = current2.memoizedProps;
      instance2.state = current2.memoizedState;
      if (current2.mode & ProfileMode) {
        try {
          startLayoutEffectTimer();
          instance2.componentWillUnmount();
        } finally {
          recordLayoutEffectDuration(current2);
        }
      } else {
        instance2.componentWillUnmount();
      }
    };
    function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
      try {
        commitHookEffectListMount(Layout, current2);
      } catch (error3) {
        captureCommitPhaseError(current2, nearestMountedAncestor, error3);
      }
    }
    function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance2) {
      try {
        callComponentWillUnmountWithTimer(current2, instance2);
      } catch (error3) {
        captureCommitPhaseError(current2, nearestMountedAncestor, error3);
      }
    }
    function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance2) {
      try {
        instance2.componentDidMount();
      } catch (error3) {
        captureCommitPhaseError(current2, nearestMountedAncestor, error3);
      }
    }
    function safelyAttachRef(current2, nearestMountedAncestor) {
      try {
        commitAttachRef(current2);
      } catch (error3) {
        captureCommitPhaseError(current2, nearestMountedAncestor, error3);
      }
    }
    function safelyDetachRef(current2, nearestMountedAncestor) {
      var ref = current2.ref;
      if (ref !== null) {
        if (typeof ref === "function") {
          var retVal;
          try {
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                retVal = ref(null);
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              retVal = ref(null);
            }
          } catch (error3) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error3);
          }
          {
            if (typeof retVal === "function") {
              error2("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
            }
          }
        } else {
          ref.current = null;
        }
      }
    }
    function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
      try {
        destroy();
      } catch (error3) {
        captureCommitPhaseError(current2, nearestMountedAncestor, error3);
      }
    }
    var shouldFireAfterActiveInstanceBlur = false;
    function commitBeforeMutationEffects(root2, firstChild) {
      prepareForCommit();
      nextEffect = firstChild;
      commitBeforeMutationEffects_begin();
      var shouldFire = shouldFireAfterActiveInstanceBlur;
      shouldFireAfterActiveInstanceBlur = false;
      return shouldFire;
    }
    function commitBeforeMutationEffects_begin() {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var child = fiber.child;
        if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
          child.return = fiber;
          nextEffect = child;
        } else {
          commitBeforeMutationEffects_complete();
        }
      }
    }
    function commitBeforeMutationEffects_complete() {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        setCurrentFiber(fiber);
        try {
          commitBeforeMutationEffectsOnFiber(fiber);
        } catch (error3) {
          captureCommitPhaseError(fiber, fiber.return, error3);
        }
        resetCurrentFiber();
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return;
          nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function commitBeforeMutationEffectsOnFiber(finishedWork) {
      var current2 = finishedWork.alternate;
      var flags2 = finishedWork.flags;
      if ((flags2 & Snapshot) !== NoFlags) {
        setCurrentFiber(finishedWork);
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            break;
          }
          case ClassComponent: {
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              var prevState = current2.memoizedState;
              var instance2 = finishedWork.stateNode;
              {
                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                  if (instance2.props !== finishedWork.memoizedProps) {
                    error2("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                  }
                  if (instance2.state !== finishedWork.memoizedState) {
                    error2("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                  }
                }
              }
              var snapshot = instance2.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
              {
                var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                  didWarnSet.add(finishedWork.type);
                  error2("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                }
              }
              instance2.__reactInternalSnapshotBeforeUpdate = snapshot;
            }
            break;
          }
          case HostRoot: {
            {
              var root2 = finishedWork.stateNode;
              clearContainer(root2.containerInfo);
            }
            break;
          }
          case HostComponent:
          case HostText:
          case HostPortal:
          case IncompleteClassComponent:
            break;
          default: {
            throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        resetCurrentFiber();
      }
    }
    function commitHookEffectListUnmount(flags2, finishedWork, nearestMountedAncestor) {
      var updateQueue = finishedWork.updateQueue;
      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
      if (lastEffect !== null) {
        var firstEffect = lastEffect.next;
        var effect = firstEffect;
        do {
          if ((effect.tag & flags2) === flags2) {
            var destroy = effect.destroy;
            effect.destroy = void 0;
            if (destroy !== void 0) {
              {
                if ((flags2 & Passive$1) !== NoFlags$1) {
                  markComponentPassiveEffectUnmountStarted(finishedWork);
                } else if ((flags2 & Layout) !== NoFlags$1) {
                  markComponentLayoutEffectUnmountStarted(finishedWork);
                }
              }
              {
                if ((flags2 & Insertion5) !== NoFlags$1) {
                  setIsRunningInsertionEffect(true);
                }
              }
              safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
              {
                if ((flags2 & Insertion5) !== NoFlags$1) {
                  setIsRunningInsertionEffect(false);
                }
              }
              {
                if ((flags2 & Passive$1) !== NoFlags$1) {
                  markComponentPassiveEffectUnmountStopped();
                } else if ((flags2 & Layout) !== NoFlags$1) {
                  markComponentLayoutEffectUnmountStopped();
                }
              }
            }
          }
          effect = effect.next;
        } while (effect !== firstEffect);
      }
    }
    function commitHookEffectListMount(flags2, finishedWork) {
      var updateQueue = finishedWork.updateQueue;
      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
      if (lastEffect !== null) {
        var firstEffect = lastEffect.next;
        var effect = firstEffect;
        do {
          if ((effect.tag & flags2) === flags2) {
            {
              if ((flags2 & Passive$1) !== NoFlags$1) {
                markComponentPassiveEffectMountStarted(finishedWork);
              } else if ((flags2 & Layout) !== NoFlags$1) {
                markComponentLayoutEffectMountStarted(finishedWork);
              }
            }
            var create2 = effect.create;
            {
              if ((flags2 & Insertion5) !== NoFlags$1) {
                setIsRunningInsertionEffect(true);
              }
            }
            effect.destroy = create2();
            {
              if ((flags2 & Insertion5) !== NoFlags$1) {
                setIsRunningInsertionEffect(false);
              }
            }
            {
              if ((flags2 & Passive$1) !== NoFlags$1) {
                markComponentPassiveEffectMountStopped();
              } else if ((flags2 & Layout) !== NoFlags$1) {
                markComponentLayoutEffectMountStopped();
              }
            }
            {
              var destroy = effect.destroy;
              if (destroy !== void 0 && typeof destroy !== "function") {
                var hookName = void 0;
                if ((effect.tag & Layout) !== NoFlags) {
                  hookName = "useLayoutEffect";
                } else if ((effect.tag & Insertion5) !== NoFlags) {
                  hookName = "useInsertionEffect";
                } else {
                  hookName = "useEffect";
                }
                var addendum = void 0;
                if (destroy === null) {
                  addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                } else if (typeof destroy.then === "function") {
                  addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                } else {
                  addendum = " You returned: " + destroy;
                }
                error2("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
              }
            }
          }
          effect = effect.next;
        } while (effect !== firstEffect);
      }
    }
    function commitPassiveEffectDurations(finishedRoot, finishedWork) {
      {
        if ((finishedWork.flags & Update) !== NoFlags) {
          switch (finishedWork.tag) {
            case Profiler: {
              var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
              var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
              var commitTime2 = getCommitTime();
              var phase = finishedWork.alternate === null ? "mount" : "update";
              {
                if (isCurrentUpdateNested()) {
                  phase = "nested-update";
                }
              }
              if (typeof onPostCommit === "function") {
                onPostCommit(id, phase, passiveEffectDuration, commitTime2);
              }
              var parentFiber = finishedWork.return;
              outer:
                while (parentFiber !== null) {
                  switch (parentFiber.tag) {
                    case HostRoot:
                      var root2 = parentFiber.stateNode;
                      root2.passiveEffectDuration += passiveEffectDuration;
                      break outer;
                    case Profiler:
                      var parentStateNode = parentFiber.stateNode;
                      parentStateNode.passiveEffectDuration += passiveEffectDuration;
                      break outer;
                  }
                  parentFiber = parentFiber.return;
                }
              break;
            }
          }
        }
      }
    }
    function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
      if ((finishedWork.flags & LayoutMask) !== NoFlags) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (!offscreenSubtreeWasHidden) {
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                } finally {
                  recordLayoutEffectDuration(finishedWork);
                }
              } else {
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
              }
            }
            break;
          }
          case ClassComponent: {
            var instance2 = finishedWork.stateNode;
            if (finishedWork.flags & Update) {
              if (!offscreenSubtreeWasHidden) {
                if (current2 === null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance2.props !== finishedWork.memoizedProps) {
                        error2("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance2.state !== finishedWork.memoizedState) {
                        error2("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      instance2.componentDidMount();
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  } else {
                    instance2.componentDidMount();
                  }
                } else {
                  var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                  var prevState = current2.memoizedState;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance2.props !== finishedWork.memoizedProps) {
                        error2("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance2.state !== finishedWork.memoizedState) {
                        error2("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      instance2.componentDidUpdate(prevProps, prevState, instance2.__reactInternalSnapshotBeforeUpdate);
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  } else {
                    instance2.componentDidUpdate(prevProps, prevState, instance2.__reactInternalSnapshotBeforeUpdate);
                  }
                }
              }
            }
            var updateQueue = finishedWork.updateQueue;
            if (updateQueue !== null) {
              {
                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                  if (instance2.props !== finishedWork.memoizedProps) {
                    error2("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                  }
                  if (instance2.state !== finishedWork.memoizedState) {
                    error2("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                  }
                }
              }
              commitUpdateQueue(finishedWork, updateQueue, instance2);
            }
            break;
          }
          case HostRoot: {
            var _updateQueue = finishedWork.updateQueue;
            if (_updateQueue !== null) {
              var _instance = null;
              if (finishedWork.child !== null) {
                switch (finishedWork.child.tag) {
                  case HostComponent:
                    _instance = getPublicInstance(finishedWork.child.stateNode);
                    break;
                  case ClassComponent:
                    _instance = finishedWork.child.stateNode;
                    break;
                }
              }
              commitUpdateQueue(finishedWork, _updateQueue, _instance);
            }
            break;
          }
          case HostComponent: {
            var _instance2 = finishedWork.stateNode;
            if (current2 === null && finishedWork.flags & Update) {
              var type = finishedWork.type;
              var props = finishedWork.memoizedProps;
              commitMount(_instance2, type, props);
            }
            break;
          }
          case HostText: {
            break;
          }
          case HostPortal: {
            break;
          }
          case Profiler: {
            {
              var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
              var effectDuration = finishedWork.stateNode.effectDuration;
              var commitTime2 = getCommitTime();
              var phase = current2 === null ? "mount" : "update";
              {
                if (isCurrentUpdateNested()) {
                  phase = "nested-update";
                }
              }
              if (typeof onRender === "function") {
                onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
              }
              {
                if (typeof onCommit === "function") {
                  onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                }
                enqueuePendingPassiveProfilerEffect(finishedWork);
                var parentFiber = finishedWork.return;
                outer:
                  while (parentFiber !== null) {
                    switch (parentFiber.tag) {
                      case HostRoot:
                        var root2 = parentFiber.stateNode;
                        root2.effectDuration += effectDuration;
                        break outer;
                      case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.effectDuration += effectDuration;
                        break outer;
                    }
                    parentFiber = parentFiber.return;
                  }
              }
            }
            break;
          }
          case SuspenseComponent: {
            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
            break;
          }
          case SuspenseListComponent:
          case IncompleteClassComponent:
          case ScopeComponent:
          case OffscreenComponent:
          case LegacyHiddenComponent:
          case TracingMarkerComponent: {
            break;
          }
          default:
            throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      if (!offscreenSubtreeWasHidden) {
        {
          if (finishedWork.flags & Ref) {
            commitAttachRef(finishedWork);
          }
        }
      }
    }
    function reappearLayoutEffectsOnFiber(node2) {
      switch (node2.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent: {
          if (node2.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
            } finally {
              recordLayoutEffectDuration(node2);
            }
          } else {
            safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
          }
          break;
        }
        case ClassComponent: {
          var instance2 = node2.stateNode;
          if (typeof instance2.componentDidMount === "function") {
            safelyCallComponentDidMount(node2, node2.return, instance2);
          }
          safelyAttachRef(node2, node2.return);
          break;
        }
        case HostComponent: {
          safelyAttachRef(node2, node2.return);
          break;
        }
      }
    }
    function hideOrUnhideAllChildren(finishedWork, isHidden) {
      var hostSubtreeRoot = null;
      {
        var node2 = finishedWork;
        while (true) {
          if (node2.tag === HostComponent) {
            if (hostSubtreeRoot === null) {
              hostSubtreeRoot = node2;
              try {
                var instance2 = node2.stateNode;
                if (isHidden) {
                  hideInstance(instance2);
                } else {
                  unhideInstance(node2.stateNode, node2.memoizedProps);
                }
              } catch (error3) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error3);
              }
            }
          } else if (node2.tag === HostText) {
            if (hostSubtreeRoot === null) {
              try {
                var _instance3 = node2.stateNode;
                if (isHidden) {
                  hideTextInstance(_instance3);
                } else {
                  unhideTextInstance(_instance3, node2.memoizedProps);
                }
              } catch (error3) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error3);
              }
            }
          } else if ((node2.tag === OffscreenComponent || node2.tag === LegacyHiddenComponent) && node2.memoizedState !== null && node2 !== finishedWork)
            ;
          else if (node2.child !== null) {
            node2.child.return = node2;
            node2 = node2.child;
            continue;
          }
          if (node2 === finishedWork) {
            return;
          }
          while (node2.sibling === null) {
            if (node2.return === null || node2.return === finishedWork) {
              return;
            }
            if (hostSubtreeRoot === node2) {
              hostSubtreeRoot = null;
            }
            node2 = node2.return;
          }
          if (hostSubtreeRoot === node2) {
            hostSubtreeRoot = null;
          }
          node2.sibling.return = node2.return;
          node2 = node2.sibling;
        }
      }
    }
    function commitAttachRef(finishedWork) {
      var ref = finishedWork.ref;
      if (ref !== null) {
        var instance2 = finishedWork.stateNode;
        var instanceToUse;
        switch (finishedWork.tag) {
          case HostComponent:
            instanceToUse = getPublicInstance(instance2);
            break;
          default:
            instanceToUse = instance2;
        }
        if (typeof ref === "function") {
          var retVal;
          if (finishedWork.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              retVal = ref(instanceToUse);
            } finally {
              recordLayoutEffectDuration(finishedWork);
            }
          } else {
            retVal = ref(instanceToUse);
          }
          {
            if (typeof retVal === "function") {
              error2("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
            }
          }
        } else {
          {
            if (!ref.hasOwnProperty("current")) {
              error2("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
            }
          }
          ref.current = instanceToUse;
        }
      }
    }
    function detachFiberMutation(fiber) {
      var alternate = fiber.alternate;
      if (alternate !== null) {
        alternate.return = null;
      }
      fiber.return = null;
    }
    function detachFiberAfterEffects(fiber) {
      var alternate = fiber.alternate;
      if (alternate !== null) {
        fiber.alternate = null;
        detachFiberAfterEffects(alternate);
      }
      {
        fiber.child = null;
        fiber.deletions = null;
        fiber.sibling = null;
        if (fiber.tag === HostComponent) {
          var hostInstance = fiber.stateNode;
          if (hostInstance !== null) {
            detachDeletedInstance(hostInstance);
          }
        }
        fiber.stateNode = null;
        {
          fiber._debugOwner = null;
        }
        {
          fiber.return = null;
          fiber.dependencies = null;
          fiber.memoizedProps = null;
          fiber.memoizedState = null;
          fiber.pendingProps = null;
          fiber.stateNode = null;
          fiber.updateQueue = null;
        }
      }
    }
    function getHostParentFiber(fiber) {
      var parent = fiber.return;
      while (parent !== null) {
        if (isHostParent(parent)) {
          return parent;
        }
        parent = parent.return;
      }
      throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function isHostParent(fiber) {
      return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }
    function getHostSibling(fiber) {
      var node2 = fiber;
      siblings:
        while (true) {
          while (node2.sibling === null) {
            if (node2.return === null || isHostParent(node2.return)) {
              return null;
            }
            node2 = node2.return;
          }
          node2.sibling.return = node2.return;
          node2 = node2.sibling;
          while (node2.tag !== HostComponent && node2.tag !== HostText && node2.tag !== DehydratedFragment) {
            if (node2.flags & Placement) {
              continue siblings;
            }
            if (node2.child === null || node2.tag === HostPortal) {
              continue siblings;
            } else {
              node2.child.return = node2;
              node2 = node2.child;
            }
          }
          if (!(node2.flags & Placement)) {
            return node2.stateNode;
          }
        }
    }
    function commitPlacement(finishedWork) {
      var parentFiber = getHostParentFiber(finishedWork);
      switch (parentFiber.tag) {
        case HostComponent: {
          var parent = parentFiber.stateNode;
          if (parentFiber.flags & ContentReset) {
            resetTextContent(parent);
            parentFiber.flags &= ~ContentReset;
          }
          var before = getHostSibling(finishedWork);
          insertOrAppendPlacementNode(finishedWork, before, parent);
          break;
        }
        case HostRoot:
        case HostPortal: {
          var _parent = parentFiber.stateNode.containerInfo;
          var _before = getHostSibling(finishedWork);
          insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
          break;
        }
        default:
          throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    function insertOrAppendPlacementNodeIntoContainer(node2, before, parent) {
      var tag = node2.tag;
      var isHost = tag === HostComponent || tag === HostText;
      if (isHost) {
        var stateNode = node2.stateNode;
        if (before) {
          insertInContainerBefore(parent, stateNode, before);
        } else {
          appendChildToContainer(parent, stateNode);
        }
      } else if (tag === HostPortal)
        ;
      else {
        var child = node2.child;
        if (child !== null) {
          insertOrAppendPlacementNodeIntoContainer(child, before, parent);
          var sibling = child.sibling;
          while (sibling !== null) {
            insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
            sibling = sibling.sibling;
          }
        }
      }
    }
    function insertOrAppendPlacementNode(node2, before, parent) {
      var tag = node2.tag;
      var isHost = tag === HostComponent || tag === HostText;
      if (isHost) {
        var stateNode = node2.stateNode;
        if (before) {
          insertBefore(parent, stateNode, before);
        } else {
          appendChild(parent, stateNode);
        }
      } else if (tag === HostPortal)
        ;
      else {
        var child = node2.child;
        if (child !== null) {
          insertOrAppendPlacementNode(child, before, parent);
          var sibling = child.sibling;
          while (sibling !== null) {
            insertOrAppendPlacementNode(sibling, before, parent);
            sibling = sibling.sibling;
          }
        }
      }
    }
    var hostParent = null;
    var hostParentIsContainer = false;
    function commitDeletionEffects(root2, returnFiber, deletedFiber) {
      {
        var parent = returnFiber;
        findParent:
          while (parent !== null) {
            switch (parent.tag) {
              case HostComponent: {
                hostParent = parent.stateNode;
                hostParentIsContainer = false;
                break findParent;
              }
              case HostRoot: {
                hostParent = parent.stateNode.containerInfo;
                hostParentIsContainer = true;
                break findParent;
              }
              case HostPortal: {
                hostParent = parent.stateNode.containerInfo;
                hostParentIsContainer = true;
                break findParent;
              }
            }
            parent = parent.return;
          }
        if (hostParent === null) {
          throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
        commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
        hostParent = null;
        hostParentIsContainer = false;
      }
      detachFiberMutation(deletedFiber);
    }
    function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
      var child = parent.child;
      while (child !== null) {
        commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
        child = child.sibling;
      }
    }
    function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
      onCommitUnmount(deletedFiber);
      switch (deletedFiber.tag) {
        case HostComponent: {
          if (!offscreenSubtreeWasHidden) {
            safelyDetachRef(deletedFiber, nearestMountedAncestor);
          }
        }
        case HostText: {
          {
            var prevHostParent = hostParent;
            var prevHostParentIsContainer = hostParentIsContainer;
            hostParent = null;
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            hostParent = prevHostParent;
            hostParentIsContainer = prevHostParentIsContainer;
            if (hostParent !== null) {
              if (hostParentIsContainer) {
                removeChildFromContainer(hostParent, deletedFiber.stateNode);
              } else {
                removeChild(hostParent, deletedFiber.stateNode);
              }
            }
          }
          return;
        }
        case DehydratedFragment: {
          {
            if (hostParent !== null) {
              if (hostParentIsContainer) {
                clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
              } else {
                clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
              }
            }
          }
          return;
        }
        case HostPortal: {
          {
            var _prevHostParent = hostParent;
            var _prevHostParentIsContainer = hostParentIsContainer;
            hostParent = deletedFiber.stateNode.containerInfo;
            hostParentIsContainer = true;
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            hostParent = _prevHostParent;
            hostParentIsContainer = _prevHostParentIsContainer;
          }
          return;
        }
        case FunctionComponent:
        case ForwardRef:
        case MemoComponent:
        case SimpleMemoComponent: {
          if (!offscreenSubtreeWasHidden) {
            var updateQueue = deletedFiber.updateQueue;
            if (updateQueue !== null) {
              var lastEffect = updateQueue.lastEffect;
              if (lastEffect !== null) {
                var firstEffect = lastEffect.next;
                var effect = firstEffect;
                do {
                  var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                  if (destroy !== void 0) {
                    if ((tag & Insertion5) !== NoFlags$1) {
                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                    } else if ((tag & Layout) !== NoFlags$1) {
                      {
                        markComponentLayoutEffectUnmountStarted(deletedFiber);
                      }
                      if (deletedFiber.mode & ProfileMode) {
                        startLayoutEffectTimer();
                        safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        recordLayoutEffectDuration(deletedFiber);
                      } else {
                        safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                      }
                      {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                  effect = effect.next;
                } while (effect !== firstEffect);
              }
            }
          }
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          return;
        }
        case ClassComponent: {
          if (!offscreenSubtreeWasHidden) {
            safelyDetachRef(deletedFiber, nearestMountedAncestor);
            var instance2 = deletedFiber.stateNode;
            if (typeof instance2.componentWillUnmount === "function") {
              safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance2);
            }
          }
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          return;
        }
        case ScopeComponent: {
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          return;
        }
        case OffscreenComponent: {
          if (
            // TODO: Remove this dead flag
            deletedFiber.mode & ConcurrentMode
          ) {
            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
          } else {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          }
          break;
        }
        default: {
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          return;
        }
      }
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
      var newState = finishedWork.memoizedState;
      if (newState === null) {
        var current2 = finishedWork.alternate;
        if (current2 !== null) {
          var prevState = current2.memoizedState;
          if (prevState !== null) {
            var suspenseInstance = prevState.dehydrated;
            if (suspenseInstance !== null) {
              commitHydratedSuspenseInstance(suspenseInstance);
            }
          }
        }
      }
    }
    function attachSuspenseRetryListeners(finishedWork) {
      var wakeables = finishedWork.updateQueue;
      if (wakeables !== null) {
        finishedWork.updateQueue = null;
        var retryCache = finishedWork.stateNode;
        if (retryCache === null) {
          retryCache = finishedWork.stateNode = new PossiblyWeakSet();
        }
        wakeables.forEach(function(wakeable) {
          var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
          if (!retryCache.has(wakeable)) {
            retryCache.add(wakeable);
            {
              if (isDevToolsPresent) {
                if (inProgressLanes !== null && inProgressRoot !== null) {
                  restorePendingUpdaters(inProgressRoot, inProgressLanes);
                } else {
                  throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                }
              }
            }
            wakeable.then(retry, retry);
          }
        });
      }
    }
    function commitMutationEffects(root2, finishedWork, committedLanes) {
      inProgressLanes = committedLanes;
      inProgressRoot = root2;
      setCurrentFiber(finishedWork);
      commitMutationEffectsOnFiber(finishedWork, root2);
      setCurrentFiber(finishedWork);
      inProgressLanes = null;
      inProgressRoot = null;
    }
    function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
      var deletions = parentFiber.deletions;
      if (deletions !== null) {
        for (var i = 0; i < deletions.length; i++) {
          var childToDelete = deletions[i];
          try {
            commitDeletionEffects(root2, parentFiber, childToDelete);
          } catch (error3) {
            captureCommitPhaseError(childToDelete, parentFiber, error3);
          }
        }
      }
      var prevDebugFiber = getCurrentFiber();
      if (parentFiber.subtreeFlags & MutationMask) {
        var child = parentFiber.child;
        while (child !== null) {
          setCurrentFiber(child);
          commitMutationEffectsOnFiber(child, root2);
          child = child.sibling;
        }
      }
      setCurrentFiber(prevDebugFiber);
    }
    function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
      var current2 = finishedWork.alternate;
      var flags2 = finishedWork.flags;
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case MemoComponent:
        case SimpleMemoComponent: {
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags2 & Update) {
            try {
              commitHookEffectListUnmount(Insertion5 | HasEffect, finishedWork, finishedWork.return);
              commitHookEffectListMount(Insertion5 | HasEffect, finishedWork);
            } catch (error3) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error3);
            }
            if (finishedWork.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
              } catch (error3) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error3);
              }
              recordLayoutEffectDuration(finishedWork);
            } else {
              try {
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
              } catch (error3) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error3);
              }
            }
          }
          return;
        }
        case ClassComponent: {
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags2 & Ref) {
            if (current2 !== null) {
              safelyDetachRef(current2, current2.return);
            }
          }
          return;
        }
        case HostComponent: {
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags2 & Ref) {
            if (current2 !== null) {
              safelyDetachRef(current2, current2.return);
            }
          }
          {
            if (finishedWork.flags & ContentReset) {
              var instance2 = finishedWork.stateNode;
              try {
                resetTextContent(instance2);
              } catch (error3) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error3);
              }
            }
            if (flags2 & Update) {
              var _instance4 = finishedWork.stateNode;
              if (_instance4 != null) {
                var newProps = finishedWork.memoizedProps;
                var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                var type = finishedWork.type;
                var updatePayload = finishedWork.updateQueue;
                finishedWork.updateQueue = null;
                if (updatePayload !== null) {
                  try {
                    commitUpdate(_instance4, updatePayload, type, oldProps, newProps);
                  } catch (error3) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                  }
                }
              }
            }
          }
          return;
        }
        case HostText: {
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags2 & Update) {
            {
              if (finishedWork.stateNode === null) {
                throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
              }
              var textInstance = finishedWork.stateNode;
              var newText = finishedWork.memoizedProps;
              var oldText = current2 !== null ? current2.memoizedProps : newText;
              try {
                commitTextUpdate(textInstance, oldText, newText);
              } catch (error3) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error3);
              }
            }
          }
          return;
        }
        case HostRoot: {
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags2 & Update) {
            {
              if (current2 !== null) {
                var prevRootState = current2.memoizedState;
                if (prevRootState.isDehydrated) {
                  try {
                    commitHydratedContainer(root2.containerInfo);
                  } catch (error3) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                  }
                }
              }
            }
          }
          return;
        }
        case HostPortal: {
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          return;
        }
        case SuspenseComponent: {
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          var offscreenFiber = finishedWork.child;
          if (offscreenFiber.flags & Visibility) {
            var offscreenInstance = offscreenFiber.stateNode;
            var newState = offscreenFiber.memoizedState;
            var isHidden = newState !== null;
            offscreenInstance.isHidden = isHidden;
            if (isHidden) {
              var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
              if (!wasHidden) {
                markCommitTimeOfFallback();
              }
            }
          }
          if (flags2 & Update) {
            attachSuspenseRetryListeners(finishedWork);
          }
          return;
        }
        case OffscreenComponent: {
          var _wasHidden = current2 !== null && current2.memoizedState !== null;
          if (
            // TODO: Remove this dead flag
            finishedWork.mode & ConcurrentMode
          ) {
            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
            recursivelyTraverseMutationEffects(root2, finishedWork);
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
          } else {
            recursivelyTraverseMutationEffects(root2, finishedWork);
          }
          commitReconciliationEffects(finishedWork);
          if (flags2 & Visibility) {
            var _offscreenInstance = finishedWork.stateNode;
            var _newState = finishedWork.memoizedState;
            var _isHidden = _newState !== null;
            var offscreenBoundary = finishedWork;
            _offscreenInstance.isHidden = _isHidden;
            {
              if (_isHidden) {
                if (!_wasHidden) {
                  if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                    nextEffect = offscreenBoundary;
                    var offscreenChild = offscreenBoundary.child;
                    while (offscreenChild !== null) {
                      nextEffect = offscreenChild;
                      disappearLayoutEffects_begin(offscreenChild);
                      offscreenChild = offscreenChild.sibling;
                    }
                  }
                }
              }
            }
            {
              hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
            }
          }
          return;
        }
        case SuspenseListComponent: {
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags2 & Update) {
            attachSuspenseRetryListeners(finishedWork);
          }
          return;
        }
        case ScopeComponent: {
          return;
        }
        default: {
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          return;
        }
      }
    }
    function commitReconciliationEffects(finishedWork) {
      var flags2 = finishedWork.flags;
      if (flags2 & Placement) {
        try {
          commitPlacement(finishedWork);
        } catch (error3) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error3);
        }
        finishedWork.flags &= ~Placement;
      }
      if (flags2 & Hydrating) {
        finishedWork.flags &= ~Hydrating;
      }
    }
    function commitLayoutEffects(finishedWork, root2, committedLanes) {
      inProgressLanes = committedLanes;
      inProgressRoot = root2;
      nextEffect = finishedWork;
      commitLayoutEffects_begin(finishedWork, root2);
      inProgressLanes = null;
      inProgressRoot = null;
    }
    function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
      var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var firstChild = fiber.child;
        if (fiber.tag === OffscreenComponent && isModernRoot) {
          var isHidden = fiber.memoizedState !== null;
          var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
          if (newOffscreenSubtreeIsHidden) {
            commitLayoutMountEffects_complete(subtreeRoot, root2);
            continue;
          } else {
            var current2 = fiber.alternate;
            var wasHidden = current2 !== null && current2.memoizedState !== null;
            var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
            var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
            offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
            offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
            if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
              nextEffect = fiber;
              reappearLayoutEffects_begin(fiber);
            }
            var child = firstChild;
            while (child !== null) {
              nextEffect = child;
              commitLayoutEffects_begin(
                child,
                // New root; bubble back up to here and stop.
                root2
              );
              child = child.sibling;
            }
            nextEffect = fiber;
            offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            commitLayoutMountEffects_complete(subtreeRoot, root2);
            continue;
          }
        }
        if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
          firstChild.return = fiber;
          nextEffect = firstChild;
        } else {
          commitLayoutMountEffects_complete(subtreeRoot, root2);
        }
      }
    }
    function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        if ((fiber.flags & LayoutMask) !== NoFlags) {
          var current2 = fiber.alternate;
          setCurrentFiber(fiber);
          try {
            commitLayoutEffectOnFiber(root2, current2, fiber);
          } catch (error3) {
            captureCommitPhaseError(fiber, fiber.return, error3);
          }
          resetCurrentFiber();
        }
        if (fiber === subtreeRoot) {
          nextEffect = null;
          return;
        }
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return;
          nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function disappearLayoutEffects_begin(subtreeRoot) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var firstChild = fiber.child;
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            if (fiber.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                commitHookEffectListUnmount(Layout, fiber, fiber.return);
              } finally {
                recordLayoutEffectDuration(fiber);
              }
            } else {
              commitHookEffectListUnmount(Layout, fiber, fiber.return);
            }
            break;
          }
          case ClassComponent: {
            safelyDetachRef(fiber, fiber.return);
            var instance2 = fiber.stateNode;
            if (typeof instance2.componentWillUnmount === "function") {
              safelyCallComponentWillUnmount(fiber, fiber.return, instance2);
            }
            break;
          }
          case HostComponent: {
            safelyDetachRef(fiber, fiber.return);
            break;
          }
          case OffscreenComponent: {
            var isHidden = fiber.memoizedState !== null;
            if (isHidden) {
              disappearLayoutEffects_complete(subtreeRoot);
              continue;
            }
            break;
          }
        }
        if (firstChild !== null) {
          firstChild.return = fiber;
          nextEffect = firstChild;
        } else {
          disappearLayoutEffects_complete(subtreeRoot);
        }
      }
    }
    function disappearLayoutEffects_complete(subtreeRoot) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        if (fiber === subtreeRoot) {
          nextEffect = null;
          return;
        }
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return;
          nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function reappearLayoutEffects_begin(subtreeRoot) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var firstChild = fiber.child;
        if (fiber.tag === OffscreenComponent) {
          var isHidden = fiber.memoizedState !== null;
          if (isHidden) {
            reappearLayoutEffects_complete(subtreeRoot);
            continue;
          }
        }
        if (firstChild !== null) {
          firstChild.return = fiber;
          nextEffect = firstChild;
        } else {
          reappearLayoutEffects_complete(subtreeRoot);
        }
      }
    }
    function reappearLayoutEffects_complete(subtreeRoot) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        setCurrentFiber(fiber);
        try {
          reappearLayoutEffectsOnFiber(fiber);
        } catch (error3) {
          captureCommitPhaseError(fiber, fiber.return, error3);
        }
        resetCurrentFiber();
        if (fiber === subtreeRoot) {
          nextEffect = null;
          return;
        }
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return;
          nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
      nextEffect = finishedWork;
      commitPassiveMountEffects_begin(finishedWork, root2);
    }
    function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var firstChild = fiber.child;
        if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
          firstChild.return = fiber;
          nextEffect = firstChild;
        } else {
          commitPassiveMountEffects_complete(subtreeRoot, root2);
        }
      }
    }
    function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        if ((fiber.flags & Passive) !== NoFlags) {
          setCurrentFiber(fiber);
          try {
            commitPassiveMountOnFiber(root2, fiber);
          } catch (error3) {
            captureCommitPhaseError(fiber, fiber.return, error3);
          }
          resetCurrentFiber();
        }
        if (fiber === subtreeRoot) {
          nextEffect = null;
          return;
        }
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return;
          nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent: {
          if (finishedWork.mode & ProfileMode) {
            startPassiveEffectTimer();
            try {
              commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
            } finally {
              recordPassiveEffectDuration(finishedWork);
            }
          } else {
            commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
          }
          break;
        }
      }
    }
    function commitPassiveUnmountEffects(firstChild) {
      nextEffect = firstChild;
      commitPassiveUnmountEffects_begin();
    }
    function commitPassiveUnmountEffects_begin() {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var child = fiber.child;
        if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
          var deletions = fiber.deletions;
          if (deletions !== null) {
            for (var i = 0; i < deletions.length; i++) {
              var fiberToDelete = deletions[i];
              nextEffect = fiberToDelete;
              commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
            }
            {
              var previousFiber = fiber.alternate;
              if (previousFiber !== null) {
                var detachedChild = previousFiber.child;
                if (detachedChild !== null) {
                  previousFiber.child = null;
                  do {
                    var detachedSibling = detachedChild.sibling;
                    detachedChild.sibling = null;
                    detachedChild = detachedSibling;
                  } while (detachedChild !== null);
                }
              }
            }
            nextEffect = fiber;
          }
        }
        if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
          child.return = fiber;
          nextEffect = child;
        } else {
          commitPassiveUnmountEffects_complete();
        }
      }
    }
    function commitPassiveUnmountEffects_complete() {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        if ((fiber.flags & Passive) !== NoFlags) {
          setCurrentFiber(fiber);
          commitPassiveUnmountOnFiber(fiber);
          resetCurrentFiber();
        }
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return;
          nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function commitPassiveUnmountOnFiber(finishedWork) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent: {
          if (finishedWork.mode & ProfileMode) {
            startPassiveEffectTimer();
            commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
            recordPassiveEffectDuration(finishedWork);
          } else {
            commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
          }
          break;
        }
      }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        setCurrentFiber(fiber);
        commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
        resetCurrentFiber();
        var child = fiber.child;
        if (child !== null) {
          child.return = fiber;
          nextEffect = child;
        } else {
          commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
        }
      }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var sibling = fiber.sibling;
        var returnFiber = fiber.return;
        {
          detachFiberAfterEffects(fiber);
          if (fiber === deletedSubtreeRoot) {
            nextEffect = null;
            return;
          }
        }
        if (sibling !== null) {
          sibling.return = returnFiber;
          nextEffect = sibling;
          return;
        }
        nextEffect = returnFiber;
      }
    }
    function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
      switch (current2.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent: {
          if (current2.mode & ProfileMode) {
            startPassiveEffectTimer();
            commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
            recordPassiveEffectDuration(current2);
          } else {
            commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
          }
          break;
        }
      }
    }
    function invokeLayoutEffectMountInDEV(fiber) {
      {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListMount(Layout | HasEffect, fiber);
            } catch (error3) {
              captureCommitPhaseError(fiber, fiber.return, error3);
            }
            break;
          }
          case ClassComponent: {
            var instance2 = fiber.stateNode;
            try {
              instance2.componentDidMount();
            } catch (error3) {
              captureCommitPhaseError(fiber, fiber.return, error3);
            }
            break;
          }
        }
      }
    }
    function invokePassiveEffectMountInDEV(fiber) {
      {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListMount(Passive$1 | HasEffect, fiber);
            } catch (error3) {
              captureCommitPhaseError(fiber, fiber.return, error3);
            }
            break;
          }
        }
      }
    }
    function invokeLayoutEffectUnmountInDEV(fiber) {
      {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
            } catch (error3) {
              captureCommitPhaseError(fiber, fiber.return, error3);
            }
            break;
          }
          case ClassComponent: {
            var instance2 = fiber.stateNode;
            if (typeof instance2.componentWillUnmount === "function") {
              safelyCallComponentWillUnmount(fiber, fiber.return, instance2);
            }
            break;
          }
        }
      }
    }
    function invokePassiveEffectUnmountInDEV(fiber) {
      {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
            } catch (error3) {
              captureCommitPhaseError(fiber, fiber.return, error3);
            }
          }
        }
      }
    }
    if (typeof Symbol === "function" && Symbol.for) {
      var symbolFor = Symbol.for;
      symbolFor("selector.component");
      symbolFor("selector.has_pseudo_class");
      symbolFor("selector.role");
      symbolFor("selector.test_id");
      symbolFor("selector.text");
    }
    var commitHooks = [];
    function onCommitRoot$1() {
      {
        commitHooks.forEach(function(commitHook) {
          return commitHook();
        });
      }
    }
    var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
    function isLegacyActEnvironment(fiber) {
      {
        var isReactActEnvironmentGlobal = (
          // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
          typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
        );
        var jestIsDefined = typeof jest !== "undefined";
        return jestIsDefined && isReactActEnvironmentGlobal !== false;
      }
    }
    function isConcurrentActEnvironment() {
      {
        var isReactActEnvironmentGlobal = (
          // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
          typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
        );
        if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
          error2("The current testing environment is not configured to support act(...)");
        }
        return isReactActEnvironmentGlobal;
      }
    }
    var ceil = Math.ceil;
    var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
    var NoContext = (
      /*             */
      0
    );
    var BatchedContext = (
      /*               */
      1
    );
    var RenderContext = (
      /*                */
      2
    );
    var CommitContext = (
      /*                */
      4
    );
    var RootInProgress = 0;
    var RootFatalErrored = 1;
    var RootErrored = 2;
    var RootSuspended = 3;
    var RootSuspendedWithDelay = 4;
    var RootCompleted = 5;
    var RootDidNotComplete = 6;
    var executionContext = NoContext;
    var workInProgressRoot = null;
    var workInProgress = null;
    var workInProgressRootRenderLanes = NoLanes;
    var subtreeRenderLanes = NoLanes;
    var subtreeRenderLanesCursor = createCursor(NoLanes);
    var workInProgressRootExitStatus = RootInProgress;
    var workInProgressRootFatalError = null;
    var workInProgressRootSkippedLanes = NoLanes;
    var workInProgressRootInterleavedUpdatedLanes = NoLanes;
    var workInProgressRootPingedLanes = NoLanes;
    var workInProgressRootConcurrentErrors = null;
    var workInProgressRootRecoverableErrors = null;
    var globalMostRecentFallbackTime = 0;
    var FALLBACK_THROTTLE_MS = 500;
    var workInProgressRootRenderTargetTime = Infinity;
    var RENDER_TIMEOUT_MS = 500;
    var workInProgressTransitions = null;
    function resetRenderTimer() {
      workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
    }
    function getRenderTargetTime() {
      return workInProgressRootRenderTargetTime;
    }
    var hasUncaughtError = false;
    var firstUncaughtError = null;
    var legacyErrorBoundariesThatAlreadyFailed = null;
    var rootDoesHavePassiveEffects = false;
    var rootWithPendingPassiveEffects = null;
    var pendingPassiveEffectsLanes = NoLanes;
    var pendingPassiveProfilerEffects = [];
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var rootWithNestedUpdates = null;
    var isFlushingPassiveEffects = false;
    var didScheduleUpdateDuringPassiveEffects = false;
    var NESTED_PASSIVE_UPDATE_LIMIT = 50;
    var nestedPassiveUpdateCount = 0;
    var rootWithPassiveNestedUpdates = null;
    var currentEventTime = NoTimestamp;
    var currentEventTransitionLane = NoLanes;
    var isRunningInsertionEffect = false;
    function getWorkInProgressRoot() {
      return workInProgressRoot;
    }
    function requestEventTime() {
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        return now();
      }
      if (currentEventTime !== NoTimestamp) {
        return currentEventTime;
      }
      currentEventTime = now();
      return currentEventTime;
    }
    function requestUpdateLane(fiber) {
      var mode = fiber.mode;
      if ((mode & ConcurrentMode) === NoMode) {
        return SyncLane;
      } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
        return pickArbitraryLane(workInProgressRootRenderLanes);
      }
      var isTransition = requestCurrentTransition() !== NoTransition;
      if (isTransition) {
        if (ReactCurrentBatchConfig$3.transition !== null) {
          var transition = ReactCurrentBatchConfig$3.transition;
          if (!transition._updatedFibers) {
            transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          transition._updatedFibers.add(fiber);
        }
        if (currentEventTransitionLane === NoLane) {
          currentEventTransitionLane = claimNextTransitionLane();
        }
        return currentEventTransitionLane;
      }
      var updateLane = getCurrentUpdatePriority();
      if (updateLane !== NoLane) {
        return updateLane;
      }
      var eventLane = getCurrentEventPriority();
      return eventLane;
    }
    function requestRetryLane(fiber) {
      var mode = fiber.mode;
      if ((mode & ConcurrentMode) === NoMode) {
        return SyncLane;
      }
      return claimNextRetryLane();
    }
    function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
      checkForNestedUpdates();
      {
        if (isRunningInsertionEffect) {
          error2("useInsertionEffect must not schedule updates.");
        }
      }
      {
        if (isFlushingPassiveEffects) {
          didScheduleUpdateDuringPassiveEffects = true;
        }
      }
      markRootUpdated(root2, lane, eventTime);
      if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
        warnAboutRenderPhaseUpdatesInDEV(fiber);
      } else {
        {
          if (isDevToolsPresent) {
            addFiberToLanesMap(root2, fiber, lane);
          }
        }
        warnIfUpdatesNotWrappedWithActDEV(fiber);
        if (root2 === workInProgressRoot) {
          if ((executionContext & RenderContext) === NoContext) {
            workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
          }
          if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
            markRootSuspended$1(root2, workInProgressRootRenderLanes);
          }
        }
        ensureRootIsScheduled(root2, eventTime);
        if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
        !ReactCurrentActQueue$1.isBatchingLegacy) {
          resetRenderTimer();
          flushSyncCallbacksOnlyInLegacyMode();
        }
      }
    }
    function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
      var current2 = root2.current;
      current2.lanes = lane;
      markRootUpdated(root2, lane, eventTime);
      ensureRootIsScheduled(root2, eventTime);
    }
    function isUnsafeClassRenderPhaseUpdate(fiber) {
      return (
        // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
        // decided not to enable it.
        (executionContext & RenderContext) !== NoContext
      );
    }
    function ensureRootIsScheduled(root2, currentTime) {
      var existingCallbackNode = root2.callbackNode;
      markStarvedLanesAsExpired(root2, currentTime);
      var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
      if (nextLanes === NoLanes) {
        if (existingCallbackNode !== null) {
          cancelCallback$1(existingCallbackNode);
        }
        root2.callbackNode = null;
        root2.callbackPriority = NoLane;
        return;
      }
      var newCallbackPriority = getHighestPriorityLane(nextLanes);
      var existingCallbackPriority = root2.callbackPriority;
      if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
      // Scheduler task, rather than an `act` task, cancel it and re-scheduled
      // on the `act` queue.
      !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
        {
          if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
            error2("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        return;
      }
      if (existingCallbackNode != null) {
        cancelCallback$1(existingCallbackNode);
      }
      var newCallbackNode;
      if (newCallbackPriority === SyncLane) {
        if (root2.tag === LegacyRoot) {
          if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
            ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
          }
          scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
        } else {
          scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
        }
        {
          if (ReactCurrentActQueue$1.current !== null) {
            ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
          } else {
            scheduleMicrotask(function() {
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            });
          }
        }
        newCallbackNode = null;
      } else {
        var schedulerPriorityLevel;
        switch (lanesToEventPriority(nextLanes)) {
          case DiscreteEventPriority:
            schedulerPriorityLevel = ImmediatePriority;
            break;
          case ContinuousEventPriority:
            schedulerPriorityLevel = UserBlockingPriority;
            break;
          case DefaultEventPriority:
            schedulerPriorityLevel = NormalPriority;
            break;
          case IdleEventPriority:
            schedulerPriorityLevel = IdlePriority;
            break;
          default:
            schedulerPriorityLevel = NormalPriority;
            break;
        }
        newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
      }
      root2.callbackPriority = newCallbackPriority;
      root2.callbackNode = newCallbackNode;
    }
    function performConcurrentWorkOnRoot(root2, didTimeout) {
      {
        resetNestedUpdateFlag();
      }
      currentEventTime = NoTimestamp;
      currentEventTransitionLane = NoLanes;
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        throw new Error("Should not already be working.");
      }
      var originalCallbackNode = root2.callbackNode;
      var didFlushPassiveEffects = flushPassiveEffects();
      if (didFlushPassiveEffects) {
        if (root2.callbackNode !== originalCallbackNode) {
          return null;
        }
      }
      var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
      if (lanes === NoLanes) {
        return null;
      }
      var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
      var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
      if (exitStatus !== RootInProgress) {
        if (exitStatus === RootErrored) {
          var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
          if (errorRetryLanes !== NoLanes) {
            lanes = errorRetryLanes;
            exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
          }
        }
        if (exitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError;
          prepareFreshStack(root2, NoLanes);
          markRootSuspended$1(root2, lanes);
          ensureRootIsScheduled(root2, now());
          throw fatalError;
        }
        if (exitStatus === RootDidNotComplete) {
          markRootSuspended$1(root2, lanes);
        } else {
          var renderWasConcurrent = !includesBlockingLane(root2, lanes);
          var finishedWork = root2.current.alternate;
          if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
            exitStatus = renderRootSync(root2, lanes);
            if (exitStatus === RootErrored) {
              var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (_errorRetryLanes !== NoLanes) {
                lanes = _errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var _fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw _fatalError;
            }
          }
          root2.finishedWork = finishedWork;
          root2.finishedLanes = lanes;
          finishConcurrentRender(root2, exitStatus, lanes);
        }
      }
      ensureRootIsScheduled(root2, now());
      if (root2.callbackNode === originalCallbackNode) {
        return performConcurrentWorkOnRoot.bind(null, root2);
      }
      return null;
    }
    function recoverFromConcurrentError(root2, errorRetryLanes) {
      var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
      if (isRootDehydrated(root2)) {
        var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
        rootWorkInProgress.flags |= ForceClientRender;
        {
          errorHydratingContainer(root2.containerInfo);
        }
      }
      var exitStatus = renderRootSync(root2, errorRetryLanes);
      if (exitStatus !== RootErrored) {
        var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
        workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
        if (errorsFromSecondAttempt !== null) {
          queueRecoverableErrors(errorsFromSecondAttempt);
        }
      }
      return exitStatus;
    }
    function queueRecoverableErrors(errors) {
      if (workInProgressRootRecoverableErrors === null) {
        workInProgressRootRecoverableErrors = errors;
      } else {
        workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
      }
    }
    function finishConcurrentRender(root2, exitStatus, lanes) {
      switch (exitStatus) {
        case RootInProgress:
        case RootFatalErrored: {
          throw new Error("Root did not complete. This is a bug in React.");
        }
        case RootErrored: {
          commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
          break;
        }
        case RootSuspended: {
          markRootSuspended$1(root2, lanes);
          if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
          !shouldForceFlushFallbacksInDEV()) {
            var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
            if (msUntilTimeout > 10) {
              var nextLanes = getNextLanes(root2, NoLanes);
              if (nextLanes !== NoLanes) {
                break;
              }
              var suspendedLanes = root2.suspendedLanes;
              if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                requestEventTime();
                markRootPinged(root2, suspendedLanes);
                break;
              }
              root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
              break;
            }
          }
          commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
          break;
        }
        case RootSuspendedWithDelay: {
          markRootSuspended$1(root2, lanes);
          if (includesOnlyTransitions(lanes)) {
            break;
          }
          if (!shouldForceFlushFallbacksInDEV()) {
            var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
            var eventTimeMs = mostRecentEventTime;
            var timeElapsedMs = now() - eventTimeMs;
            var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
            if (_msUntilTimeout > 10) {
              root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
              break;
            }
          }
          commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
          break;
        }
        case RootCompleted: {
          commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
          break;
        }
        default: {
          throw new Error("Unknown root exit status.");
        }
      }
    }
    function isRenderConsistentWithExternalStores(finishedWork) {
      var node2 = finishedWork;
      while (true) {
        if (node2.flags & StoreConsistency) {
          var updateQueue = node2.updateQueue;
          if (updateQueue !== null) {
            var checks2 = updateQueue.stores;
            if (checks2 !== null) {
              for (var i = 0; i < checks2.length; i++) {
                var check = checks2[i];
                var getSnapshot = check.getSnapshot;
                var renderedValue = check.value;
                try {
                  if (!objectIs(getSnapshot(), renderedValue)) {
                    return false;
                  }
                } catch (error3) {
                  return false;
                }
              }
            }
          }
        }
        var child = node2.child;
        if (node2.subtreeFlags & StoreConsistency && child !== null) {
          child.return = node2;
          node2 = child;
          continue;
        }
        if (node2 === finishedWork) {
          return true;
        }
        while (node2.sibling === null) {
          if (node2.return === null || node2.return === finishedWork) {
            return true;
          }
          node2 = node2.return;
        }
        node2.sibling.return = node2.return;
        node2 = node2.sibling;
      }
      return true;
    }
    function markRootSuspended$1(root2, suspendedLanes) {
      suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
      suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
      markRootSuspended(root2, suspendedLanes);
    }
    function performSyncWorkOnRoot(root2) {
      {
        syncNestedUpdateFlag();
      }
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        throw new Error("Should not already be working.");
      }
      flushPassiveEffects();
      var lanes = getNextLanes(root2, NoLanes);
      if (!includesSomeLane(lanes, SyncLane)) {
        ensureRootIsScheduled(root2, now());
        return null;
      }
      var exitStatus = renderRootSync(root2, lanes);
      if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
        if (errorRetryLanes !== NoLanes) {
          lanes = errorRetryLanes;
          exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
        }
      }
      if (exitStatus === RootFatalErrored) {
        var fatalError = workInProgressRootFatalError;
        prepareFreshStack(root2, NoLanes);
        markRootSuspended$1(root2, lanes);
        ensureRootIsScheduled(root2, now());
        throw fatalError;
      }
      if (exitStatus === RootDidNotComplete) {
        throw new Error("Root did not complete. This is a bug in React.");
      }
      var finishedWork = root2.current.alternate;
      root2.finishedWork = finishedWork;
      root2.finishedLanes = lanes;
      commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
      ensureRootIsScheduled(root2, now());
      return null;
    }
    function flushRoot(root2, lanes) {
      if (lanes !== NoLanes) {
        markRootEntangled(root2, mergeLanes(lanes, SyncLane));
        ensureRootIsScheduled(root2, now());
        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
          resetRenderTimer();
          flushSyncCallbacks();
        }
      }
    }
    function batchedUpdates$1(fn, a) {
      var prevExecutionContext = executionContext;
      executionContext |= BatchedContext;
      try {
        return fn(a);
      } finally {
        executionContext = prevExecutionContext;
        if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
        !ReactCurrentActQueue$1.isBatchingLegacy) {
          resetRenderTimer();
          flushSyncCallbacksOnlyInLegacyMode();
        }
      }
    }
    function discreteUpdates(fn, a, b, c, d) {
      var previousPriority = getCurrentUpdatePriority();
      var prevTransition = ReactCurrentBatchConfig$3.transition;
      try {
        ReactCurrentBatchConfig$3.transition = null;
        setCurrentUpdatePriority(DiscreteEventPriority);
        return fn(a, b, c, d);
      } finally {
        setCurrentUpdatePriority(previousPriority);
        ReactCurrentBatchConfig$3.transition = prevTransition;
        if (executionContext === NoContext) {
          resetRenderTimer();
        }
      }
    }
    function flushSync(fn) {
      if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
        flushPassiveEffects();
      }
      var prevExecutionContext = executionContext;
      executionContext |= BatchedContext;
      var prevTransition = ReactCurrentBatchConfig$3.transition;
      var previousPriority = getCurrentUpdatePriority();
      try {
        ReactCurrentBatchConfig$3.transition = null;
        setCurrentUpdatePriority(DiscreteEventPriority);
        if (fn) {
          return fn();
        } else {
          return void 0;
        }
      } finally {
        setCurrentUpdatePriority(previousPriority);
        ReactCurrentBatchConfig$3.transition = prevTransition;
        executionContext = prevExecutionContext;
        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
          flushSyncCallbacks();
        }
      }
    }
    function isAlreadyRendering() {
      return (executionContext & (RenderContext | CommitContext)) !== NoContext;
    }
    function pushRenderLanes(fiber, lanes) {
      push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
      subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
    }
    function popRenderLanes(fiber) {
      subtreeRenderLanes = subtreeRenderLanesCursor.current;
      pop(subtreeRenderLanesCursor, fiber);
    }
    function prepareFreshStack(root2, lanes) {
      root2.finishedWork = null;
      root2.finishedLanes = NoLanes;
      var timeoutHandle = root2.timeoutHandle;
      if (timeoutHandle !== noTimeout) {
        root2.timeoutHandle = noTimeout;
        cancelTimeout(timeoutHandle);
      }
      if (workInProgress !== null) {
        var interruptedWork = workInProgress.return;
        while (interruptedWork !== null) {
          var current2 = interruptedWork.alternate;
          unwindInterruptedWork(current2, interruptedWork);
          interruptedWork = interruptedWork.return;
        }
      }
      workInProgressRoot = root2;
      var rootWorkInProgress = createWorkInProgress(root2.current, null);
      workInProgress = rootWorkInProgress;
      workInProgressRootRenderLanes = subtreeRenderLanes = lanes;
      workInProgressRootExitStatus = RootInProgress;
      workInProgressRootFatalError = null;
      workInProgressRootSkippedLanes = NoLanes;
      workInProgressRootInterleavedUpdatedLanes = NoLanes;
      workInProgressRootPingedLanes = NoLanes;
      workInProgressRootConcurrentErrors = null;
      workInProgressRootRecoverableErrors = null;
      finishQueueingConcurrentUpdates();
      {
        ReactStrictModeWarnings.discardPendingWarnings();
      }
      return rootWorkInProgress;
    }
    function handleError(root2, thrownValue) {
      do {
        var erroredWork = workInProgress;
        try {
          resetContextDependencies();
          resetHooksAfterThrow();
          resetCurrentFiber();
          ReactCurrentOwner$2.current = null;
          if (erroredWork === null || erroredWork.return === null) {
            workInProgressRootExitStatus = RootFatalErrored;
            workInProgressRootFatalError = thrownValue;
            workInProgress = null;
            return;
          }
          if (erroredWork.mode & ProfileMode) {
            stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
          }
          {
            markComponentRenderStopped();
            if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
              var wakeable = thrownValue;
              markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
            } else {
              markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
            }
          }
          throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
          completeUnitOfWork(erroredWork);
        } catch (yetAnotherThrownValue) {
          thrownValue = yetAnotherThrownValue;
          if (workInProgress === erroredWork && erroredWork !== null) {
            erroredWork = erroredWork.return;
            workInProgress = erroredWork;
          } else {
            erroredWork = workInProgress;
          }
          continue;
        }
        return;
      } while (true);
    }
    function pushDispatcher() {
      var prevDispatcher = ReactCurrentDispatcher$2.current;
      ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
      if (prevDispatcher === null) {
        return ContextOnlyDispatcher;
      } else {
        return prevDispatcher;
      }
    }
    function popDispatcher(prevDispatcher) {
      ReactCurrentDispatcher$2.current = prevDispatcher;
    }
    function markCommitTimeOfFallback() {
      globalMostRecentFallbackTime = now();
    }
    function markSkippedUpdateLanes(lane) {
      workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
    }
    function renderDidSuspend() {
      if (workInProgressRootExitStatus === RootInProgress) {
        workInProgressRootExitStatus = RootSuspended;
      }
    }
    function renderDidSuspendDelayIfPossible() {
      if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
        workInProgressRootExitStatus = RootSuspendedWithDelay;
      }
      if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
      }
    }
    function renderDidError(error3) {
      if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
        workInProgressRootExitStatus = RootErrored;
      }
      if (workInProgressRootConcurrentErrors === null) {
        workInProgressRootConcurrentErrors = [error3];
      } else {
        workInProgressRootConcurrentErrors.push(error3);
      }
    }
    function renderHasNotSuspendedYet() {
      return workInProgressRootExitStatus === RootInProgress;
    }
    function renderRootSync(root2, lanes) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher();
      if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
        {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root2.memoizedUpdaters;
            if (memoizedUpdaters.size > 0) {
              restorePendingUpdaters(root2, workInProgressRootRenderLanes);
              memoizedUpdaters.clear();
            }
            movePendingFibersToMemoized(root2, lanes);
          }
        }
        workInProgressTransitions = getTransitionsForLanes();
        prepareFreshStack(root2, lanes);
      }
      {
        markRenderStarted(lanes);
      }
      do {
        try {
          workLoopSync();
          break;
        } catch (thrownValue) {
          handleError(root2, thrownValue);
        }
      } while (true);
      resetContextDependencies();
      executionContext = prevExecutionContext;
      popDispatcher(prevDispatcher);
      if (workInProgress !== null) {
        throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
      }
      {
        markRenderStopped();
      }
      workInProgressRoot = null;
      workInProgressRootRenderLanes = NoLanes;
      return workInProgressRootExitStatus;
    }
    function workLoopSync() {
      while (workInProgress !== null) {
        performUnitOfWork(workInProgress);
      }
    }
    function renderRootConcurrent(root2, lanes) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher();
      if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
        {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root2.memoizedUpdaters;
            if (memoizedUpdaters.size > 0) {
              restorePendingUpdaters(root2, workInProgressRootRenderLanes);
              memoizedUpdaters.clear();
            }
            movePendingFibersToMemoized(root2, lanes);
          }
        }
        workInProgressTransitions = getTransitionsForLanes();
        resetRenderTimer();
        prepareFreshStack(root2, lanes);
      }
      {
        markRenderStarted(lanes);
      }
      do {
        try {
          workLoopConcurrent();
          break;
        } catch (thrownValue) {
          handleError(root2, thrownValue);
        }
      } while (true);
      resetContextDependencies();
      popDispatcher(prevDispatcher);
      executionContext = prevExecutionContext;
      if (workInProgress !== null) {
        {
          markRenderYielded();
        }
        return RootInProgress;
      } else {
        {
          markRenderStopped();
        }
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
      }
    }
    function workLoopConcurrent() {
      while (workInProgress !== null && !shouldYield()) {
        performUnitOfWork(workInProgress);
      }
    }
    function performUnitOfWork(unitOfWork) {
      var current2 = unitOfWork.alternate;
      setCurrentFiber(unitOfWork);
      var next2;
      if ((unitOfWork.mode & ProfileMode) !== NoMode) {
        startProfilerTimer(unitOfWork);
        next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
        stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
      } else {
        next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
      }
      resetCurrentFiber();
      unitOfWork.memoizedProps = unitOfWork.pendingProps;
      if (next2 === null) {
        completeUnitOfWork(unitOfWork);
      } else {
        workInProgress = next2;
      }
      ReactCurrentOwner$2.current = null;
    }
    function completeUnitOfWork(unitOfWork) {
      var completedWork = unitOfWork;
      do {
        var current2 = completedWork.alternate;
        var returnFiber = completedWork.return;
        if ((completedWork.flags & Incomplete) === NoFlags) {
          setCurrentFiber(completedWork);
          var next2 = void 0;
          if ((completedWork.mode & ProfileMode) === NoMode) {
            next2 = completeWork(current2, completedWork, subtreeRenderLanes);
          } else {
            startProfilerTimer(completedWork);
            next2 = completeWork(current2, completedWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
          }
          resetCurrentFiber();
          if (next2 !== null) {
            workInProgress = next2;
            return;
          }
        } else {
          var _next = unwindWork(current2, completedWork);
          if (_next !== null) {
            _next.flags &= HostEffectMask;
            workInProgress = _next;
            return;
          }
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
            var actualDuration = completedWork.actualDuration;
            var child = completedWork.child;
            while (child !== null) {
              actualDuration += child.actualDuration;
              child = child.sibling;
            }
            completedWork.actualDuration = actualDuration;
          }
          if (returnFiber !== null) {
            returnFiber.flags |= Incomplete;
            returnFiber.subtreeFlags = NoFlags;
            returnFiber.deletions = null;
          } else {
            workInProgressRootExitStatus = RootDidNotComplete;
            workInProgress = null;
            return;
          }
        }
        var siblingFiber = completedWork.sibling;
        if (siblingFiber !== null) {
          workInProgress = siblingFiber;
          return;
        }
        completedWork = returnFiber;
        workInProgress = completedWork;
      } while (completedWork !== null);
      if (workInProgressRootExitStatus === RootInProgress) {
        workInProgressRootExitStatus = RootCompleted;
      }
    }
    function commitRoot(root2, recoverableErrors, transitions) {
      var previousUpdateLanePriority = getCurrentUpdatePriority();
      var prevTransition = ReactCurrentBatchConfig$3.transition;
      try {
        ReactCurrentBatchConfig$3.transition = null;
        setCurrentUpdatePriority(DiscreteEventPriority);
        commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
      } finally {
        ReactCurrentBatchConfig$3.transition = prevTransition;
        setCurrentUpdatePriority(previousUpdateLanePriority);
      }
      return null;
    }
    function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
      do {
        flushPassiveEffects();
      } while (rootWithPendingPassiveEffects !== null);
      flushRenderPhaseStrictModeWarningsInDEV();
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        throw new Error("Should not already be working.");
      }
      var finishedWork = root2.finishedWork;
      var lanes = root2.finishedLanes;
      {
        markCommitStarted(lanes);
      }
      if (finishedWork === null) {
        {
          markCommitStopped();
        }
        return null;
      } else {
        {
          if (lanes === NoLanes) {
            error2("root.finishedLanes should not be empty during a commit. This is a bug in React.");
          }
        }
      }
      root2.finishedWork = null;
      root2.finishedLanes = NoLanes;
      if (finishedWork === root2.current) {
        throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
      }
      root2.callbackNode = null;
      root2.callbackPriority = NoLane;
      var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
      markRootFinished(root2, remainingLanes);
      if (root2 === workInProgressRoot) {
        workInProgressRoot = null;
        workInProgress = null;
        workInProgressRootRenderLanes = NoLanes;
      }
      if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
        if (!rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = true;
          scheduleCallback$1(NormalPriority, function() {
            flushPassiveEffects();
            return null;
          });
        }
      }
      var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
      var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
      if (subtreeHasEffects || rootHasEffect) {
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        ReactCurrentBatchConfig$3.transition = null;
        var previousPriority = getCurrentUpdatePriority();
        setCurrentUpdatePriority(DiscreteEventPriority);
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        ReactCurrentOwner$2.current = null;
        commitBeforeMutationEffects(root2, finishedWork);
        {
          recordCommitTime();
        }
        commitMutationEffects(root2, finishedWork, lanes);
        resetAfterCommit();
        root2.current = finishedWork;
        {
          markLayoutEffectsStarted(lanes);
        }
        commitLayoutEffects(finishedWork, root2, lanes);
        {
          markLayoutEffectsStopped();
        }
        requestPaint();
        executionContext = prevExecutionContext;
        setCurrentUpdatePriority(previousPriority);
        ReactCurrentBatchConfig$3.transition = prevTransition;
      } else {
        root2.current = finishedWork;
        {
          recordCommitTime();
        }
      }
      var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
      if (rootDoesHavePassiveEffects) {
        rootDoesHavePassiveEffects = false;
        rootWithPendingPassiveEffects = root2;
        pendingPassiveEffectsLanes = lanes;
      } else {
        {
          nestedPassiveUpdateCount = 0;
          rootWithPassiveNestedUpdates = null;
        }
      }
      remainingLanes = root2.pendingLanes;
      if (remainingLanes === NoLanes) {
        legacyErrorBoundariesThatAlreadyFailed = null;
      }
      {
        if (!rootDidHavePassiveEffects) {
          commitDoubleInvokeEffectsInDEV(root2.current, false);
        }
      }
      onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
      {
        if (isDevToolsPresent) {
          root2.memoizedUpdaters.clear();
        }
      }
      {
        onCommitRoot$1();
      }
      ensureRootIsScheduled(root2, now());
      if (recoverableErrors !== null) {
        var onRecoverableError = root2.onRecoverableError;
        for (var i = 0; i < recoverableErrors.length; i++) {
          var recoverableError = recoverableErrors[i];
          var componentStack = recoverableError.stack;
          var digest = recoverableError.digest;
          onRecoverableError(recoverableError.value, {
            componentStack,
            digest
          });
        }
      }
      if (hasUncaughtError) {
        hasUncaughtError = false;
        var error$1 = firstUncaughtError;
        firstUncaughtError = null;
        throw error$1;
      }
      if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
        flushPassiveEffects();
      }
      remainingLanes = root2.pendingLanes;
      if (includesSomeLane(remainingLanes, SyncLane)) {
        {
          markNestedUpdateScheduled();
        }
        if (root2 === rootWithNestedUpdates) {
          nestedUpdateCount++;
        } else {
          nestedUpdateCount = 0;
          rootWithNestedUpdates = root2;
        }
      } else {
        nestedUpdateCount = 0;
      }
      flushSyncCallbacks();
      {
        markCommitStopped();
      }
      return null;
    }
    function flushPassiveEffects() {
      if (rootWithPendingPassiveEffects !== null) {
        var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
        var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        var previousPriority = getCurrentUpdatePriority();
        try {
          ReactCurrentBatchConfig$3.transition = null;
          setCurrentUpdatePriority(priority);
          return flushPassiveEffectsImpl();
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$3.transition = prevTransition;
        }
      }
      return false;
    }
    function enqueuePendingPassiveProfilerEffect(fiber) {
      {
        pendingPassiveProfilerEffects.push(fiber);
        if (!rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = true;
          scheduleCallback$1(NormalPriority, function() {
            flushPassiveEffects();
            return null;
          });
        }
      }
    }
    function flushPassiveEffectsImpl() {
      if (rootWithPendingPassiveEffects === null) {
        return false;
      }
      var root2 = rootWithPendingPassiveEffects;
      var lanes = pendingPassiveEffectsLanes;
      rootWithPendingPassiveEffects = null;
      pendingPassiveEffectsLanes = NoLanes;
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        throw new Error("Cannot flush passive effects while already rendering.");
      }
      {
        isFlushingPassiveEffects = true;
        didScheduleUpdateDuringPassiveEffects = false;
      }
      {
        markPassiveEffectsStarted(lanes);
      }
      var prevExecutionContext = executionContext;
      executionContext |= CommitContext;
      commitPassiveUnmountEffects(root2.current);
      commitPassiveMountEffects(root2, root2.current);
      {
        var profilerEffects = pendingPassiveProfilerEffects;
        pendingPassiveProfilerEffects = [];
        for (var i = 0; i < profilerEffects.length; i++) {
          var _fiber = profilerEffects[i];
          commitPassiveEffectDurations(root2, _fiber);
        }
      }
      {
        markPassiveEffectsStopped();
      }
      {
        commitDoubleInvokeEffectsInDEV(root2.current, true);
      }
      executionContext = prevExecutionContext;
      flushSyncCallbacks();
      {
        if (didScheduleUpdateDuringPassiveEffects) {
          if (root2 === rootWithPassiveNestedUpdates) {
            nestedPassiveUpdateCount++;
          } else {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = root2;
          }
        } else {
          nestedPassiveUpdateCount = 0;
        }
        isFlushingPassiveEffects = false;
        didScheduleUpdateDuringPassiveEffects = false;
      }
      onPostCommitRoot(root2);
      {
        var stateNode = root2.current.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
      }
      return true;
    }
    function isAlreadyFailedLegacyErrorBoundary(instance2) {
      return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance2);
    }
    function markLegacyErrorBoundaryAsFailed(instance2) {
      if (legacyErrorBoundariesThatAlreadyFailed === null) {
        legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance2]);
      } else {
        legacyErrorBoundariesThatAlreadyFailed.add(instance2);
      }
    }
    function prepareToThrowUncaughtError(error3) {
      if (!hasUncaughtError) {
        hasUncaughtError = true;
        firstUncaughtError = error3;
      }
    }
    var onUncaughtError = prepareToThrowUncaughtError;
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error3) {
      var errorInfo = createCapturedValueAtFiber(error3, sourceFiber);
      var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
      var root2 = enqueueUpdate(rootFiber, update, SyncLane);
      var eventTime = requestEventTime();
      if (root2 !== null) {
        markRootUpdated(root2, SyncLane, eventTime);
        ensureRootIsScheduled(root2, eventTime);
      }
    }
    function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
      {
        reportUncaughtErrorInDEV(error$1);
        setIsRunningInsertionEffect(false);
      }
      if (sourceFiber.tag === HostRoot) {
        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
        return;
      }
      var fiber = null;
      {
        fiber = nearestMountedAncestor;
      }
      while (fiber !== null) {
        if (fiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
          return;
        } else if (fiber.tag === ClassComponent) {
          var ctor = fiber.type;
          var instance2 = fiber.stateNode;
          if (typeof ctor.getDerivedStateFromError === "function" || typeof instance2.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance2)) {
            var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
            var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
            var root2 = enqueueUpdate(fiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
            return;
          }
        }
        fiber = fiber.return;
      }
      {
        error2("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
      }
    }
    function pingSuspendedRoot(root2, wakeable, pingedLanes) {
      var pingCache = root2.pingCache;
      if (pingCache !== null) {
        pingCache.delete(wakeable);
      }
      var eventTime = requestEventTime();
      markRootPinged(root2, pingedLanes);
      warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
      if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
        if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
          prepareFreshStack(root2, NoLanes);
        } else {
          workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
        }
      }
      ensureRootIsScheduled(root2, eventTime);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
      if (retryLane === NoLane) {
        retryLane = requestRetryLane(boundaryFiber);
      }
      var eventTime = requestEventTime();
      var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
      if (root2 !== null) {
        markRootUpdated(root2, retryLane, eventTime);
        ensureRootIsScheduled(root2, eventTime);
      }
    }
    function retryDehydratedSuspenseBoundary(boundaryFiber) {
      var suspenseState = boundaryFiber.memoizedState;
      var retryLane = NoLane;
      if (suspenseState !== null) {
        retryLane = suspenseState.retryLane;
      }
      retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
      var retryLane = NoLane;
      var retryCache;
      switch (boundaryFiber.tag) {
        case SuspenseComponent:
          retryCache = boundaryFiber.stateNode;
          var suspenseState = boundaryFiber.memoizedState;
          if (suspenseState !== null) {
            retryLane = suspenseState.retryLane;
          }
          break;
        case SuspenseListComponent:
          retryCache = boundaryFiber.stateNode;
          break;
        default:
          throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
      }
      if (retryCache !== null) {
        retryCache.delete(wakeable);
      }
      retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function jnd(timeElapsed) {
      return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
    }
    function checkForNestedUpdates() {
      if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
        nestedUpdateCount = 0;
        rootWithNestedUpdates = null;
        throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
      }
      {
        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
          nestedPassiveUpdateCount = 0;
          rootWithPassiveNestedUpdates = null;
          error2("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
        }
      }
    }
    function flushRenderPhaseStrictModeWarningsInDEV() {
      {
        ReactStrictModeWarnings.flushLegacyContextWarning();
        {
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
        }
      }
    }
    function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
      {
        setCurrentFiber(fiber);
        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
        if (hasPassiveEffects) {
          invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
        }
        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
        if (hasPassiveEffects) {
          invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
        }
        resetCurrentFiber();
      }
    }
    function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
      {
        var current2 = firstChild;
        var subtreeRoot = null;
        while (current2 !== null) {
          var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
          if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
            current2 = current2.child;
          } else {
            if ((current2.flags & fiberFlags) !== NoFlags) {
              invokeEffectFn(current2);
            }
            if (current2.sibling !== null) {
              current2 = current2.sibling;
            } else {
              current2 = subtreeRoot = current2.return;
            }
          }
        }
      }
    }
    var didWarnStateUpdateForNotYetMountedComponent = null;
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
      {
        if ((executionContext & RenderContext) !== NoContext) {
          return;
        }
        if (!(fiber.mode & ConcurrentMode)) {
          return;
        }
        var tag = fiber.tag;
        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
          return;
        }
        var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
        if (didWarnStateUpdateForNotYetMountedComponent !== null) {
          if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
            return;
          }
          didWarnStateUpdateForNotYetMountedComponent.add(componentName);
        } else {
          didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
        }
        var previousFiber = current;
        try {
          setCurrentFiber(fiber);
          error2("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally {
          if (previousFiber) {
            setCurrentFiber(fiber);
          } else {
            resetCurrentFiber();
          }
        }
      }
    }
    var beginWork$1;
    {
      var dummyFiber = null;
      beginWork$1 = function(current2, unitOfWork, lanes) {
        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
        try {
          return beginWork(current2, unitOfWork, lanes);
        } catch (originalError) {
          if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
            throw originalError;
          }
          resetContextDependencies();
          resetHooksAfterThrow();
          unwindInterruptedWork(current2, unitOfWork);
          assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
          if (unitOfWork.mode & ProfileMode) {
            startProfilerTimer(unitOfWork);
          }
          invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
          if (hasCaughtError()) {
            var replayError = clearCaughtError();
            if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
              originalError._suppressLogging = true;
            }
          }
          throw originalError;
        }
      };
    }
    var didWarnAboutUpdateInRender = false;
    var didWarnAboutUpdateInRenderForAnotherComponent;
    {
      didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
    }
    function warnAboutRenderPhaseUpdatesInDEV(fiber) {
      {
        if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
              var dedupeKey = renderingComponentName;
              if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                error2("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
              }
              break;
            }
            case ClassComponent: {
              if (!didWarnAboutUpdateInRender) {
                error2("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                didWarnAboutUpdateInRender = true;
              }
              break;
            }
          }
        }
      }
    }
    function restorePendingUpdaters(root2, lanes) {
      {
        if (isDevToolsPresent) {
          var memoizedUpdaters = root2.memoizedUpdaters;
          memoizedUpdaters.forEach(function(schedulingFiber) {
            addFiberToLanesMap(root2, schedulingFiber, lanes);
          });
        }
      }
    }
    var fakeActCallbackNode = {};
    function scheduleCallback$1(priorityLevel, callback) {
      {
        var actQueue = ReactCurrentActQueue$1.current;
        if (actQueue !== null) {
          actQueue.push(callback);
          return fakeActCallbackNode;
        } else {
          return scheduleCallback(priorityLevel, callback);
        }
      }
    }
    function cancelCallback$1(callbackNode) {
      if (callbackNode === fakeActCallbackNode) {
        return;
      }
      return cancelCallback(callbackNode);
    }
    function shouldForceFlushFallbacksInDEV() {
      return ReactCurrentActQueue$1.current !== null;
    }
    function warnIfUpdatesNotWrappedWithActDEV(fiber) {
      {
        if (fiber.mode & ConcurrentMode) {
          if (!isConcurrentActEnvironment()) {
            return;
          }
        } else {
          if (!isLegacyActEnvironment()) {
            return;
          }
          if (executionContext !== NoContext) {
            return;
          }
          if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
            return;
          }
        }
        if (ReactCurrentActQueue$1.current === null) {
          var previousFiber = current;
          try {
            setCurrentFiber(fiber);
            error2("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
          } finally {
            if (previousFiber) {
              setCurrentFiber(fiber);
            } else {
              resetCurrentFiber();
            }
          }
        }
      }
    }
    function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
      {
        if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
          error2("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
        }
      }
    }
    function setIsRunningInsertionEffect(isRunning) {
      {
        isRunningInsertionEffect = isRunning;
      }
    }
    var resolveFamily = null;
    var failedBoundaries = null;
    var setRefreshHandler = function(handler) {
      {
        resolveFamily = handler;
      }
    };
    function resolveFunctionForHotReloading(type) {
      {
        if (resolveFamily === null) {
          return type;
        }
        var family = resolveFamily(type);
        if (family === void 0) {
          return type;
        }
        return family.current;
      }
    }
    function resolveClassForHotReloading(type) {
      return resolveFunctionForHotReloading(type);
    }
    function resolveForwardRefForHotReloading(type) {
      {
        if (resolveFamily === null) {
          return type;
        }
        var family = resolveFamily(type);
        if (family === void 0) {
          if (type !== null && type !== void 0 && typeof type.render === "function") {
            var currentRender = resolveFunctionForHotReloading(type.render);
            if (type.render !== currentRender) {
              var syntheticType = {
                $$typeof: REACT_FORWARD_REF_TYPE,
                render: currentRender
              };
              if (type.displayName !== void 0) {
                syntheticType.displayName = type.displayName;
              }
              return syntheticType;
            }
          }
          return type;
        }
        return family.current;
      }
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
      {
        if (resolveFamily === null) {
          return false;
        }
        var prevType = fiber.elementType;
        var nextType = element.type;
        var needsCompareFamilies = false;
        var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
        switch (fiber.tag) {
          case ClassComponent: {
            if (typeof nextType === "function") {
              needsCompareFamilies = true;
            }
            break;
          }
          case FunctionComponent: {
            if (typeof nextType === "function") {
              needsCompareFamilies = true;
            } else if ($$typeofNextType === REACT_LAZY_TYPE) {
              needsCompareFamilies = true;
            }
            break;
          }
          case ForwardRef: {
            if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
              needsCompareFamilies = true;
            } else if ($$typeofNextType === REACT_LAZY_TYPE) {
              needsCompareFamilies = true;
            }
            break;
          }
          case MemoComponent:
          case SimpleMemoComponent: {
            if ($$typeofNextType === REACT_MEMO_TYPE) {
              needsCompareFamilies = true;
            } else if ($$typeofNextType === REACT_LAZY_TYPE) {
              needsCompareFamilies = true;
            }
            break;
          }
          default:
            return false;
        }
        if (needsCompareFamilies) {
          var prevFamily = resolveFamily(prevType);
          if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
            return true;
          }
        }
        return false;
      }
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
      {
        if (resolveFamily === null) {
          return;
        }
        if (typeof WeakSet !== "function") {
          return;
        }
        if (failedBoundaries === null) {
          failedBoundaries = /* @__PURE__ */ new WeakSet();
        }
        failedBoundaries.add(fiber);
      }
    }
    var scheduleRefresh = function(root2, update) {
      {
        if (resolveFamily === null) {
          return;
        }
        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
        flushPassiveEffects();
        flushSync(function() {
          scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
        });
      }
    };
    var scheduleRoot = function(root2, element) {
      {
        if (root2.context !== emptyContextObject) {
          return;
        }
        flushPassiveEffects();
        flushSync(function() {
          updateContainer(element, root2, null, null);
        });
      }
    };
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
      {
        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch (tag) {
          case FunctionComponent:
          case SimpleMemoComponent:
          case ClassComponent:
            candidateType = type;
            break;
          case ForwardRef:
            candidateType = type.render;
            break;
        }
        if (resolveFamily === null) {
          throw new Error("Expected resolveFamily to be set during hot reload.");
        }
        var needsRender = false;
        var needsRemount = false;
        if (candidateType !== null) {
          var family = resolveFamily(candidateType);
          if (family !== void 0) {
            if (staleFamilies.has(family)) {
              needsRemount = true;
            } else if (updatedFamilies.has(family)) {
              if (tag === ClassComponent) {
                needsRemount = true;
              } else {
                needsRender = true;
              }
            }
          }
        }
        if (failedBoundaries !== null) {
          if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
            needsRemount = true;
          }
        }
        if (needsRemount) {
          fiber._debugNeedsRemount = true;
        }
        if (needsRemount || needsRender) {
          var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (_root !== null) {
            scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
          }
        }
        if (child !== null && !needsRemount) {
          scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        }
        if (sibling !== null) {
          scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
        }
      }
    }
    var findHostInstancesForRefresh = function(root2, families) {
      {
        var hostInstances = /* @__PURE__ */ new Set();
        var types2 = new Set(families.map(function(family) {
          return family.current;
        }));
        findHostInstancesForMatchingFibersRecursively(root2.current, types2, hostInstances);
        return hostInstances;
      }
    };
    function findHostInstancesForMatchingFibersRecursively(fiber, types2, hostInstances) {
      {
        var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch (tag) {
          case FunctionComponent:
          case SimpleMemoComponent:
          case ClassComponent:
            candidateType = type;
            break;
          case ForwardRef:
            candidateType = type.render;
            break;
        }
        var didMatch = false;
        if (candidateType !== null) {
          if (types2.has(candidateType)) {
            didMatch = true;
          }
        }
        if (didMatch) {
          findHostInstancesForFiberShallowly(fiber, hostInstances);
        } else {
          if (child !== null) {
            findHostInstancesForMatchingFibersRecursively(child, types2, hostInstances);
          }
        }
        if (sibling !== null) {
          findHostInstancesForMatchingFibersRecursively(sibling, types2, hostInstances);
        }
      }
    }
    function findHostInstancesForFiberShallowly(fiber, hostInstances) {
      {
        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
        if (foundHostInstances) {
          return;
        }
        var node2 = fiber;
        while (true) {
          switch (node2.tag) {
            case HostComponent:
              hostInstances.add(node2.stateNode);
              return;
            case HostPortal:
              hostInstances.add(node2.stateNode.containerInfo);
              return;
            case HostRoot:
              hostInstances.add(node2.stateNode.containerInfo);
              return;
          }
          if (node2.return === null) {
            throw new Error("Expected to reach root first.");
          }
          node2 = node2.return;
        }
      }
    }
    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
      {
        var node2 = fiber;
        var foundHostInstances = false;
        while (true) {
          if (node2.tag === HostComponent) {
            foundHostInstances = true;
            hostInstances.add(node2.stateNode);
          } else if (node2.child !== null) {
            node2.child.return = node2;
            node2 = node2.child;
            continue;
          }
          if (node2 === fiber) {
            return foundHostInstances;
          }
          while (node2.sibling === null) {
            if (node2.return === null || node2.return === fiber) {
              return foundHostInstances;
            }
            node2 = node2.return;
          }
          node2.sibling.return = node2.return;
          node2 = node2.sibling;
        }
      }
      return false;
    }
    var hasBadMapPolyfill;
    {
      hasBadMapPolyfill = false;
      try {
        Object.preventExtensions({});
      } catch (e) {
        hasBadMapPolyfill = true;
      }
    }
    function FiberNode(tag, pendingProps, key, mode) {
      this.tag = tag;
      this.key = key;
      this.elementType = null;
      this.type = null;
      this.stateNode = null;
      this.return = null;
      this.child = null;
      this.sibling = null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = pendingProps;
      this.memoizedProps = null;
      this.updateQueue = null;
      this.memoizedState = null;
      this.dependencies = null;
      this.mode = mode;
      this.flags = NoFlags;
      this.subtreeFlags = NoFlags;
      this.deletions = null;
      this.lanes = NoLanes;
      this.childLanes = NoLanes;
      this.alternate = null;
      {
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN;
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
      }
      {
        this._debugSource = null;
        this._debugOwner = null;
        this._debugNeedsRemount = false;
        this._debugHookTypes = null;
        if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
          Object.preventExtensions(this);
        }
      }
    }
    var createFiber = function(tag, pendingProps, key, mode) {
      return new FiberNode(tag, pendingProps, key, mode);
    };
    function shouldConstruct$1(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }
    function isSimpleFunctionComponent(type) {
      return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
    }
    function resolveLazyComponentTag(Component) {
      if (typeof Component === "function") {
        return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
      } else if (Component !== void 0 && Component !== null) {
        var $$typeof = Component.$$typeof;
        if ($$typeof === REACT_FORWARD_REF_TYPE) {
          return ForwardRef;
        }
        if ($$typeof === REACT_MEMO_TYPE) {
          return MemoComponent;
        }
      }
      return IndeterminateComponent;
    }
    function createWorkInProgress(current2, pendingProps) {
      var workInProgress2 = current2.alternate;
      if (workInProgress2 === null) {
        workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
        workInProgress2.elementType = current2.elementType;
        workInProgress2.type = current2.type;
        workInProgress2.stateNode = current2.stateNode;
        {
          workInProgress2._debugSource = current2._debugSource;
          workInProgress2._debugOwner = current2._debugOwner;
          workInProgress2._debugHookTypes = current2._debugHookTypes;
        }
        workInProgress2.alternate = current2;
        current2.alternate = workInProgress2;
      } else {
        workInProgress2.pendingProps = pendingProps;
        workInProgress2.type = current2.type;
        workInProgress2.flags = NoFlags;
        workInProgress2.subtreeFlags = NoFlags;
        workInProgress2.deletions = null;
        {
          workInProgress2.actualDuration = 0;
          workInProgress2.actualStartTime = -1;
        }
      }
      workInProgress2.flags = current2.flags & StaticMask;
      workInProgress2.childLanes = current2.childLanes;
      workInProgress2.lanes = current2.lanes;
      workInProgress2.child = current2.child;
      workInProgress2.memoizedProps = current2.memoizedProps;
      workInProgress2.memoizedState = current2.memoizedState;
      workInProgress2.updateQueue = current2.updateQueue;
      var currentDependencies = current2.dependencies;
      workInProgress2.dependencies = currentDependencies === null ? null : {
        lanes: currentDependencies.lanes,
        firstContext: currentDependencies.firstContext
      };
      workInProgress2.sibling = current2.sibling;
      workInProgress2.index = current2.index;
      workInProgress2.ref = current2.ref;
      {
        workInProgress2.selfBaseDuration = current2.selfBaseDuration;
        workInProgress2.treeBaseDuration = current2.treeBaseDuration;
      }
      {
        workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
        switch (workInProgress2.tag) {
          case IndeterminateComponent:
          case FunctionComponent:
          case SimpleMemoComponent:
            workInProgress2.type = resolveFunctionForHotReloading(current2.type);
            break;
          case ClassComponent:
            workInProgress2.type = resolveClassForHotReloading(current2.type);
            break;
          case ForwardRef:
            workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
            break;
        }
      }
      return workInProgress2;
    }
    function resetWorkInProgress(workInProgress2, renderLanes2) {
      workInProgress2.flags &= StaticMask | Placement;
      var current2 = workInProgress2.alternate;
      if (current2 === null) {
        workInProgress2.childLanes = NoLanes;
        workInProgress2.lanes = renderLanes2;
        workInProgress2.child = null;
        workInProgress2.subtreeFlags = NoFlags;
        workInProgress2.memoizedProps = null;
        workInProgress2.memoizedState = null;
        workInProgress2.updateQueue = null;
        workInProgress2.dependencies = null;
        workInProgress2.stateNode = null;
        {
          workInProgress2.selfBaseDuration = 0;
          workInProgress2.treeBaseDuration = 0;
        }
      } else {
        workInProgress2.childLanes = current2.childLanes;
        workInProgress2.lanes = current2.lanes;
        workInProgress2.child = current2.child;
        workInProgress2.subtreeFlags = NoFlags;
        workInProgress2.deletions = null;
        workInProgress2.memoizedProps = current2.memoizedProps;
        workInProgress2.memoizedState = current2.memoizedState;
        workInProgress2.updateQueue = current2.updateQueue;
        workInProgress2.type = current2.type;
        var currentDependencies = current2.dependencies;
        workInProgress2.dependencies = currentDependencies === null ? null : {
          lanes: currentDependencies.lanes,
          firstContext: currentDependencies.firstContext
        };
        {
          workInProgress2.selfBaseDuration = current2.selfBaseDuration;
          workInProgress2.treeBaseDuration = current2.treeBaseDuration;
        }
      }
      return workInProgress2;
    }
    function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
      var mode;
      if (tag === ConcurrentRoot) {
        mode = ConcurrentMode;
        if (isStrictMode === true) {
          mode |= StrictLegacyMode;
          {
            mode |= StrictEffectsMode;
          }
        }
      } else {
        mode = NoMode;
      }
      if (isDevToolsPresent) {
        mode |= ProfileMode;
      }
      return createFiber(HostRoot, null, null, mode);
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
      var fiberTag = IndeterminateComponent;
      var resolvedType = type;
      if (typeof type === "function") {
        if (shouldConstruct$1(type)) {
          fiberTag = ClassComponent;
          {
            resolvedType = resolveClassForHotReloading(resolvedType);
          }
        } else {
          {
            resolvedType = resolveFunctionForHotReloading(resolvedType);
          }
        }
      } else if (typeof type === "string") {
        fiberTag = HostComponent;
      } else {
        getTag:
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return createFiberFromFragment(pendingProps.children, mode, lanes, key);
            case REACT_STRICT_MODE_TYPE:
              fiberTag = Mode;
              mode |= StrictLegacyMode;
              if ((mode & ConcurrentMode) !== NoMode) {
                mode |= StrictEffectsMode;
              }
              break;
            case REACT_PROFILER_TYPE:
              return createFiberFromProfiler(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_TYPE:
              return createFiberFromSuspense(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_LIST_TYPE:
              return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
            case REACT_OFFSCREEN_TYPE:
              return createFiberFromOffscreen(pendingProps, mode, lanes, key);
            case REACT_LEGACY_HIDDEN_TYPE:
            case REACT_SCOPE_TYPE:
            case REACT_CACHE_TYPE:
            case REACT_TRACING_MARKER_TYPE:
            case REACT_DEBUG_TRACING_MODE_TYPE:
            default: {
              if (typeof type === "object" && type !== null) {
                switch (type.$$typeof) {
                  case REACT_PROVIDER_TYPE:
                    fiberTag = ContextProvider;
                    break getTag;
                  case REACT_CONTEXT_TYPE:
                    fiberTag = ContextConsumer;
                    break getTag;
                  case REACT_FORWARD_REF_TYPE:
                    fiberTag = ForwardRef;
                    {
                      resolvedType = resolveForwardRefForHotReloading(resolvedType);
                    }
                    break getTag;
                  case REACT_MEMO_TYPE:
                    fiberTag = MemoComponent;
                    break getTag;
                  case REACT_LAZY_TYPE:
                    fiberTag = LazyComponent;
                    resolvedType = null;
                    break getTag;
                }
              }
              var info2 = "";
              {
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info2 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                if (ownerName) {
                  info2 += "\n\nCheck the render method of `" + ownerName + "`.";
                }
              }
              throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info2));
            }
          }
      }
      var fiber = createFiber(fiberTag, pendingProps, key, mode);
      fiber.elementType = type;
      fiber.type = resolvedType;
      fiber.lanes = lanes;
      {
        fiber._debugOwner = owner;
      }
      return fiber;
    }
    function createFiberFromElement(element, mode, lanes) {
      var owner = null;
      {
        owner = element._owner;
      }
      var type = element.type;
      var key = element.key;
      var pendingProps = element.props;
      var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
      {
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
      }
      return fiber;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
      var fiber = createFiber(Fragment, elements, key, mode);
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromProfiler(pendingProps, mode, lanes, key) {
      {
        if (typeof pendingProps.id !== "string") {
          error2('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
        }
      }
      var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
      fiber.elementType = REACT_PROFILER_TYPE;
      fiber.lanes = lanes;
      {
        fiber.stateNode = {
          effectDuration: 0,
          passiveEffectDuration: 0
        };
      }
      return fiber;
    }
    function createFiberFromSuspense(pendingProps, mode, lanes, key) {
      var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
      fiber.elementType = REACT_SUSPENSE_TYPE;
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
      var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
      fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
      var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
      fiber.elementType = REACT_OFFSCREEN_TYPE;
      fiber.lanes = lanes;
      var primaryChildInstance = {
        isHidden: false
      };
      fiber.stateNode = primaryChildInstance;
      return fiber;
    }
    function createFiberFromText(content, mode, lanes) {
      var fiber = createFiber(HostText, content, null, mode);
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromHostInstanceForDeletion() {
      var fiber = createFiber(HostComponent, null, null, NoMode);
      fiber.elementType = "DELETED";
      return fiber;
    }
    function createFiberFromDehydratedFragment(dehydratedNode) {
      var fiber = createFiber(DehydratedFragment, null, null, NoMode);
      fiber.stateNode = dehydratedNode;
      return fiber;
    }
    function createFiberFromPortal(portal, mode, lanes) {
      var pendingProps = portal.children !== null ? portal.children : [];
      var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
      fiber.lanes = lanes;
      fiber.stateNode = {
        containerInfo: portal.containerInfo,
        pendingChildren: null,
        // Used by persistent updates
        implementation: portal.implementation
      };
      return fiber;
    }
    function assignFiberPropertiesInDEV(target, source) {
      if (target === null) {
        target = createFiber(IndeterminateComponent, null, null, NoMode);
      }
      target.tag = source.tag;
      target.key = source.key;
      target.elementType = source.elementType;
      target.type = source.type;
      target.stateNode = source.stateNode;
      target.return = source.return;
      target.child = source.child;
      target.sibling = source.sibling;
      target.index = source.index;
      target.ref = source.ref;
      target.pendingProps = source.pendingProps;
      target.memoizedProps = source.memoizedProps;
      target.updateQueue = source.updateQueue;
      target.memoizedState = source.memoizedState;
      target.dependencies = source.dependencies;
      target.mode = source.mode;
      target.flags = source.flags;
      target.subtreeFlags = source.subtreeFlags;
      target.deletions = source.deletions;
      target.lanes = source.lanes;
      target.childLanes = source.childLanes;
      target.alternate = source.alternate;
      {
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
      }
      target._debugSource = source._debugSource;
      target._debugOwner = source._debugOwner;
      target._debugNeedsRemount = source._debugNeedsRemount;
      target._debugHookTypes = source._debugHookTypes;
      return target;
    }
    function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
      this.tag = tag;
      this.containerInfo = containerInfo;
      this.pendingChildren = null;
      this.current = null;
      this.pingCache = null;
      this.finishedWork = null;
      this.timeoutHandle = noTimeout;
      this.context = null;
      this.pendingContext = null;
      this.callbackNode = null;
      this.callbackPriority = NoLane;
      this.eventTimes = createLaneMap(NoLanes);
      this.expirationTimes = createLaneMap(NoTimestamp);
      this.pendingLanes = NoLanes;
      this.suspendedLanes = NoLanes;
      this.pingedLanes = NoLanes;
      this.expiredLanes = NoLanes;
      this.mutableReadLanes = NoLanes;
      this.finishedLanes = NoLanes;
      this.entangledLanes = NoLanes;
      this.entanglements = createLaneMap(NoLanes);
      this.identifierPrefix = identifierPrefix;
      this.onRecoverableError = onRecoverableError;
      {
        this.mutableSourceEagerHydrationData = null;
      }
      {
        this.effectDuration = 0;
        this.passiveEffectDuration = 0;
      }
      {
        this.memoizedUpdaters = /* @__PURE__ */ new Set();
        var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
        for (var _i = 0; _i < TotalLanes; _i++) {
          pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
        }
      }
      {
        switch (tag) {
          case ConcurrentRoot:
            this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
            break;
          case LegacyRoot:
            this._debugRootType = hydrate2 ? "hydrate()" : "render()";
            break;
        }
      }
    }
    function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
      var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
      var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
      root2.current = uninitializedFiber;
      uninitializedFiber.stateNode = root2;
      {
        var _initialState = {
          element: initialChildren,
          isDehydrated: hydrate2,
          cache: null,
          // not enabled yet
          transitions: null,
          pendingSuspenseBoundaries: null
        };
        uninitializedFiber.memoizedState = _initialState;
      }
      initializeUpdateQueue(uninitializedFiber);
      return root2;
    }
    var ReactVersion = "18.2.0";
    function createPortal(children, containerInfo, implementation) {
      var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      {
        checkKeyStringCoercion(key);
      }
      return {
        // This tag allow us to uniquely identify this as a React Portal
        $$typeof: REACT_PORTAL_TYPE,
        key: key == null ? null : "" + key,
        children,
        containerInfo,
        implementation
      };
    }
    var didWarnAboutNestedUpdates;
    var didWarnAboutFindNodeInStrictMode;
    {
      didWarnAboutNestedUpdates = false;
      didWarnAboutFindNodeInStrictMode = {};
    }
    function getContextForSubtree(parentComponent) {
      if (!parentComponent) {
        return emptyContextObject;
      }
      var fiber = get2(parentComponent);
      var parentContext = findCurrentUnmaskedContext(fiber);
      if (fiber.tag === ClassComponent) {
        var Component = fiber.type;
        if (isContextProvider(Component)) {
          return processChildContext(fiber, Component, parentContext);
        }
      }
      return parentContext;
    }
    function findHostInstanceWithWarning(component, methodName) {
      {
        var fiber = get2(component);
        if (fiber === void 0) {
          if (typeof component.render === "function") {
            throw new Error("Unable to find node on an unmounted component.");
          } else {
            var keys = Object.keys(component).join(",");
            throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
          }
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) {
          return null;
        }
        if (hostFiber.mode & StrictLegacyMode) {
          var componentName = getComponentNameFromFiber(fiber) || "Component";
          if (!didWarnAboutFindNodeInStrictMode[componentName]) {
            didWarnAboutFindNodeInStrictMode[componentName] = true;
            var previousFiber = current;
            try {
              setCurrentFiber(hostFiber);
              if (fiber.mode & StrictLegacyMode) {
                error2("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
              } else {
                error2("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
              }
            } finally {
              if (previousFiber) {
                setCurrentFiber(previousFiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        return hostFiber.stateNode;
      }
    }
    function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
      var hydrate2 = false;
      var initialChildren = null;
      return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
    }
    function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
      var hydrate2 = true;
      var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      root2.context = getContextForSubtree(null);
      var current2 = root2.current;
      var eventTime = requestEventTime();
      var lane = requestUpdateLane(current2);
      var update = createUpdate(eventTime, lane);
      update.callback = callback !== void 0 && callback !== null ? callback : null;
      enqueueUpdate(current2, update, lane);
      scheduleInitialHydrationOnRoot(root2, lane, eventTime);
      return root2;
    }
    function updateContainer(element, container, parentComponent, callback) {
      {
        onScheduleRoot(container, element);
      }
      var current$1 = container.current;
      var eventTime = requestEventTime();
      var lane = requestUpdateLane(current$1);
      {
        markRenderScheduled(lane);
      }
      var context = getContextForSubtree(parentComponent);
      if (container.context === null) {
        container.context = context;
      } else {
        container.pendingContext = context;
      }
      {
        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
          didWarnAboutNestedUpdates = true;
          error2("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
        }
      }
      var update = createUpdate(eventTime, lane);
      update.payload = {
        element
      };
      callback = callback === void 0 ? null : callback;
      if (callback !== null) {
        {
          if (typeof callback !== "function") {
            error2("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
          }
        }
        update.callback = callback;
      }
      var root2 = enqueueUpdate(current$1, update, lane);
      if (root2 !== null) {
        scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
        entangleTransitions(root2, current$1, lane);
      }
      return lane;
    }
    function getPublicRootInstance(container) {
      var containerFiber = container.current;
      if (!containerFiber.child) {
        return null;
      }
      switch (containerFiber.child.tag) {
        case HostComponent:
          return getPublicInstance(containerFiber.child.stateNode);
        default:
          return containerFiber.child.stateNode;
      }
    }
    function attemptSynchronousHydration$1(fiber) {
      switch (fiber.tag) {
        case HostRoot: {
          var root2 = fiber.stateNode;
          if (isRootDehydrated(root2)) {
            var lanes = getHighestPriorityPendingLanes(root2);
            flushRoot(root2, lanes);
          }
          break;
        }
        case SuspenseComponent: {
          flushSync(function() {
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
            }
          });
          var retryLane = SyncLane;
          markRetryLaneIfNotHydrated(fiber, retryLane);
          break;
        }
      }
    }
    function markRetryLaneImpl(fiber, retryLane) {
      var suspenseState = fiber.memoizedState;
      if (suspenseState !== null && suspenseState.dehydrated !== null) {
        suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
      }
    }
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
      markRetryLaneImpl(fiber, retryLane);
      var alternate = fiber.alternate;
      if (alternate) {
        markRetryLaneImpl(alternate, retryLane);
      }
    }
    function attemptContinuousHydration$1(fiber) {
      if (fiber.tag !== SuspenseComponent) {
        return;
      }
      var lane = SelectiveHydrationLane;
      var root2 = enqueueConcurrentRenderForLane(fiber, lane);
      if (root2 !== null) {
        var eventTime = requestEventTime();
        scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
      }
      markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptHydrationAtCurrentPriority$1(fiber) {
      if (fiber.tag !== SuspenseComponent) {
        return;
      }
      var lane = requestUpdateLane(fiber);
      var root2 = enqueueConcurrentRenderForLane(fiber, lane);
      if (root2 !== null) {
        var eventTime = requestEventTime();
        scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
      }
      markRetryLaneIfNotHydrated(fiber, lane);
    }
    function findHostInstanceWithNoPortals(fiber) {
      var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
      if (hostFiber === null) {
        return null;
      }
      return hostFiber.stateNode;
    }
    var shouldErrorImpl = function(fiber) {
      return null;
    };
    function shouldError(fiber) {
      return shouldErrorImpl(fiber);
    }
    var shouldSuspendImpl = function(fiber) {
      return false;
    };
    function shouldSuspend(fiber) {
      return shouldSuspendImpl(fiber);
    }
    var overrideHookState = null;
    var overrideHookStateDeletePath = null;
    var overrideHookStateRenamePath = null;
    var overrideProps = null;
    var overridePropsDeletePath = null;
    var overridePropsRenamePath = null;
    var scheduleUpdate = null;
    var setErrorHandler = null;
    var setSuspenseHandler = null;
    {
      var copyWithDeleteImpl = function(obj, path2, index2) {
        var key = path2[index2];
        var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
        if (index2 + 1 === path2.length) {
          if (isArray2(updated)) {
            updated.splice(key, 1);
          } else {
            delete updated[key];
          }
          return updated;
        }
        updated[key] = copyWithDeleteImpl(obj[key], path2, index2 + 1);
        return updated;
      };
      var copyWithDelete = function(obj, path2) {
        return copyWithDeleteImpl(obj, path2, 0);
      };
      var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
        var oldKey = oldPath[index2];
        var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
        if (index2 + 1 === oldPath.length) {
          var newKey = newPath[index2];
          updated[newKey] = updated[oldKey];
          if (isArray2(updated)) {
            updated.splice(oldKey, 1);
          } else {
            delete updated[oldKey];
          }
        } else {
          updated[oldKey] = copyWithRenameImpl(
            // $FlowFixMe number or string is fine here
            obj[oldKey],
            oldPath,
            newPath,
            index2 + 1
          );
        }
        return updated;
      };
      var copyWithRename = function(obj, oldPath, newPath) {
        if (oldPath.length !== newPath.length) {
          warn3("copyWithRename() expects paths of the same length");
          return;
        } else {
          for (var i = 0; i < newPath.length - 1; i++) {
            if (oldPath[i] !== newPath[i]) {
              warn3("copyWithRename() expects paths to be the same except for the deepest key");
              return;
            }
          }
        }
        return copyWithRenameImpl(obj, oldPath, newPath, 0);
      };
      var copyWithSetImpl = function(obj, path2, index2, value) {
        if (index2 >= path2.length) {
          return value;
        }
        var key = path2[index2];
        var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
        updated[key] = copyWithSetImpl(obj[key], path2, index2 + 1, value);
        return updated;
      };
      var copyWithSet = function(obj, path2, value) {
        return copyWithSetImpl(obj, path2, 0, value);
      };
      var findHook = function(fiber, id) {
        var currentHook2 = fiber.memoizedState;
        while (currentHook2 !== null && id > 0) {
          currentHook2 = currentHook2.next;
          id--;
        }
        return currentHook2;
      };
      overrideHookState = function(fiber, id, path2, value) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
          var newState = copyWithSet(hook.memoizedState, path2, value);
          hook.memoizedState = newState;
          hook.baseState = newState;
          fiber.memoizedProps = assign2({}, fiber.memoizedProps);
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        }
      };
      overrideHookStateDeletePath = function(fiber, id, path2) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
          var newState = copyWithDelete(hook.memoizedState, path2);
          hook.memoizedState = newState;
          hook.baseState = newState;
          fiber.memoizedProps = assign2({}, fiber.memoizedProps);
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        }
      };
      overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
          var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
          hook.memoizedState = newState;
          hook.baseState = newState;
          fiber.memoizedProps = assign2({}, fiber.memoizedProps);
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        }
      };
      overrideProps = function(fiber, path2, value) {
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path2, value);
        if (fiber.alternate) {
          fiber.alternate.pendingProps = fiber.pendingProps;
        }
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }
      };
      overridePropsDeletePath = function(fiber, path2) {
        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path2);
        if (fiber.alternate) {
          fiber.alternate.pendingProps = fiber.pendingProps;
        }
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }
      };
      overridePropsRenamePath = function(fiber, oldPath, newPath) {
        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
        if (fiber.alternate) {
          fiber.alternate.pendingProps = fiber.pendingProps;
        }
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }
      };
      scheduleUpdate = function(fiber) {
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }
      };
      setErrorHandler = function(newShouldErrorImpl) {
        shouldErrorImpl = newShouldErrorImpl;
      };
      setSuspenseHandler = function(newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
      };
    }
    function findHostInstanceByFiber(fiber) {
      var hostFiber = findCurrentHostFiber(fiber);
      if (hostFiber === null) {
        return null;
      }
      return hostFiber.stateNode;
    }
    function emptyFindFiberByHostInstance(instance2) {
      return null;
    }
    function getCurrentFiberForDevTools() {
      return current;
    }
    function injectIntoDevTools(devToolsConfig) {
      var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
      var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
      return injectInternals({
        bundleType: devToolsConfig.bundleType,
        version: devToolsConfig.version,
        rendererPackageName: devToolsConfig.rendererPackageName,
        rendererConfig: devToolsConfig.rendererConfig,
        overrideHookState,
        overrideHookStateDeletePath,
        overrideHookStateRenamePath,
        overrideProps,
        overridePropsDeletePath,
        overridePropsRenamePath,
        setErrorHandler,
        setSuspenseHandler,
        scheduleUpdate,
        currentDispatcherRef: ReactCurrentDispatcher2,
        findHostInstanceByFiber,
        findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
        // React Refresh
        findHostInstancesForRefresh,
        scheduleRefresh,
        scheduleRoot,
        setRefreshHandler,
        // Enables DevTools to append owner stacks to error messages in DEV mode.
        getCurrentFiber: getCurrentFiberForDevTools,
        // Enables DevTools to detect reconciler version rather than renderer version
        // which may not match for third party renderers.
        reconcilerVersion: ReactVersion
      });
    }
    var defaultOnRecoverableError = typeof reportError === "function" ? (
      // In modern browsers, reportError will dispatch an error event,
      // emulating an uncaught JavaScript error.
      reportError
    ) : function(error3) {
      console["error"](error3);
    };
    function ReactDOMRoot(internalRoot) {
      this._internalRoot = internalRoot;
    }
    ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
      var root2 = this._internalRoot;
      if (root2 === null) {
        throw new Error("Cannot update an unmounted root.");
      }
      {
        if (typeof arguments[1] === "function") {
          error2("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        } else if (isValidContainer(arguments[1])) {
          error2("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
        } else if (typeof arguments[1] !== "undefined") {
          error2("You passed a second argument to root.render(...) but it only accepts one argument.");
        }
        var container = root2.containerInfo;
        if (container.nodeType !== COMMENT_NODE) {
          var hostInstance = findHostInstanceWithNoPortals(root2.current);
          if (hostInstance) {
            if (hostInstance.parentNode !== container) {
              error2("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
            }
          }
        }
      }
      updateContainer(children, root2, null, null);
    };
    ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
      {
        if (typeof arguments[0] === "function") {
          error2("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        }
      }
      var root2 = this._internalRoot;
      if (root2 !== null) {
        this._internalRoot = null;
        var container = root2.containerInfo;
        {
          if (isAlreadyRendering()) {
            error2("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
          }
        }
        flushSync(function() {
          updateContainer(null, root2, null, null);
        });
        unmarkContainerAsRoot(container);
      }
    };
    function createRoot2(container, options2) {
      if (!isValidContainer(container)) {
        throw new Error("createRoot(...): Target container is not a DOM element.");
      }
      warnIfReactDOMContainerInDEV(container);
      var isStrictMode = false;
      var concurrentUpdatesByDefaultOverride = false;
      var identifierPrefix = "";
      var onRecoverableError = defaultOnRecoverableError;
      if (options2 !== null && options2 !== void 0) {
        {
          if (options2.hydrate) {
            warn3("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
          } else {
            if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
              error2("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
            }
          }
        }
        if (options2.unstable_strictMode === true) {
          isStrictMode = true;
        }
        if (options2.identifierPrefix !== void 0) {
          identifierPrefix = options2.identifierPrefix;
        }
        if (options2.onRecoverableError !== void 0) {
          onRecoverableError = options2.onRecoverableError;
        }
      }
      var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      markContainerAsRoot(root2.current, container);
      var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
      listenToAllSupportedEvents(rootContainerElement);
      return new ReactDOMRoot(root2);
    }
    function ReactDOMHydrationRoot(internalRoot) {
      this._internalRoot = internalRoot;
    }
    function scheduleHydration(target) {
      if (target) {
        queueExplicitHydrationTarget(target);
      }
    }
    ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
    function hydrateRoot(container, initialChildren, options2) {
      if (!isValidContainer(container)) {
        throw new Error("hydrateRoot(...): Target container is not a DOM element.");
      }
      warnIfReactDOMContainerInDEV(container);
      {
        if (initialChildren === void 0) {
          error2("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
        }
      }
      var hydrationCallbacks = options2 != null ? options2 : null;
      var mutableSources = options2 != null && options2.hydratedSources || null;
      var isStrictMode = false;
      var concurrentUpdatesByDefaultOverride = false;
      var identifierPrefix = "";
      var onRecoverableError = defaultOnRecoverableError;
      if (options2 !== null && options2 !== void 0) {
        if (options2.unstable_strictMode === true) {
          isStrictMode = true;
        }
        if (options2.identifierPrefix !== void 0) {
          identifierPrefix = options2.identifierPrefix;
        }
        if (options2.onRecoverableError !== void 0) {
          onRecoverableError = options2.onRecoverableError;
        }
      }
      var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      markContainerAsRoot(root2.current, container);
      listenToAllSupportedEvents(container);
      if (mutableSources) {
        for (var i = 0; i < mutableSources.length; i++) {
          var mutableSource = mutableSources[i];
          registerMutableSourceForHydration(root2, mutableSource);
        }
      }
      return new ReactDOMHydrationRoot(root2);
    }
    function isValidContainer(node2) {
      return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
    }
    function isValidContainerLegacy(node2) {
      return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || node2.nodeType === COMMENT_NODE && node2.nodeValue === " react-mount-point-unstable "));
    }
    function warnIfReactDOMContainerInDEV(container) {
      {
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
          error2("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
        }
        if (isContainerMarkedAsRoot(container)) {
          if (container._reactRootContainer) {
            error2("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
          } else {
            error2("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
          }
        }
      }
    }
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings;
    {
      topLevelUpdateWarnings = function(container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
          var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
          if (hostInstance) {
            if (hostInstance.parentNode !== container) {
              error2("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
            }
          }
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
        if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
          error2("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
        }
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
          error2("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
        }
      };
    }
    function getReactRootElementInContainer(container) {
      if (!container) {
        return null;
      }
      if (container.nodeType === DOCUMENT_NODE) {
        return container.documentElement;
      } else {
        return container.firstChild;
      }
    }
    function noopOnRecoverableError() {
    }
    function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
      if (isHydrationContainer) {
        if (typeof callback === "function") {
          var originalCallback = callback;
          callback = function() {
            var instance2 = getPublicRootInstance(root2);
            originalCallback.call(instance2);
          };
        }
        var root2 = createHydrationContainer(
          initialChildren,
          callback,
          container,
          LegacyRoot,
          null,
          // hydrationCallbacks
          false,
          // isStrictMode
          false,
          // concurrentUpdatesByDefaultOverride,
          "",
          // identifierPrefix
          noopOnRecoverableError
        );
        container._reactRootContainer = root2;
        markContainerAsRoot(root2.current, container);
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        flushSync();
        return root2;
      } else {
        var rootSibling;
        while (rootSibling = container.lastChild) {
          container.removeChild(rootSibling);
        }
        if (typeof callback === "function") {
          var _originalCallback = callback;
          callback = function() {
            var instance2 = getPublicRootInstance(_root);
            _originalCallback.call(instance2);
          };
        }
        var _root = createContainer(
          container,
          LegacyRoot,
          null,
          // hydrationCallbacks
          false,
          // isStrictMode
          false,
          // concurrentUpdatesByDefaultOverride,
          "",
          // identifierPrefix
          noopOnRecoverableError
        );
        container._reactRootContainer = _root;
        markContainerAsRoot(_root.current, container);
        var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(_rootContainerElement);
        flushSync(function() {
          updateContainer(initialChildren, _root, parentComponent, callback);
        });
        return _root;
      }
    }
    function warnOnInvalidCallback$1(callback, callerName) {
      {
        if (callback !== null && typeof callback !== "function") {
          error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
      }
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
      {
        topLevelUpdateWarnings(container);
        warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
      }
      var maybeRoot = container._reactRootContainer;
      var root2;
      if (!maybeRoot) {
        root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
      } else {
        root2 = maybeRoot;
        if (typeof callback === "function") {
          var originalCallback = callback;
          callback = function() {
            var instance2 = getPublicRootInstance(root2);
            originalCallback.call(instance2);
          };
        }
        updateContainer(children, root2, parentComponent, callback);
      }
      return getPublicRootInstance(root2);
    }
    function findDOMNode(componentOrElement) {
      {
        var owner = ReactCurrentOwner$3.current;
        if (owner !== null && owner.stateNode !== null) {
          var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
          if (!warnedAboutRefsInRender) {
            error2("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
          }
          owner.stateNode._warnedAboutRefsInRender = true;
        }
      }
      if (componentOrElement == null) {
        return null;
      }
      if (componentOrElement.nodeType === ELEMENT_NODE) {
        return componentOrElement;
      }
      {
        return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
      }
    }
    function hydrate(element, container, callback) {
      {
        error2("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
      }
      if (!isValidContainerLegacy(container)) {
        throw new Error("Target container is not a DOM element.");
      }
      {
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
        if (isModernRoot) {
          error2("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
        }
      }
      return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
    }
    function render2(element, container, callback) {
      {
        error2("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
      }
      if (!isValidContainerLegacy(container)) {
        throw new Error("Target container is not a DOM element.");
      }
      {
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
        if (isModernRoot) {
          error2("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
        }
      }
      return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
    }
    function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
      {
        error2("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
      }
      if (!isValidContainerLegacy(containerNode)) {
        throw new Error("Target container is not a DOM element.");
      }
      if (parentComponent == null || !has(parentComponent)) {
        throw new Error("parentComponent must be a valid React Component");
      }
      return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
    }
    function unmountComponentAtNode(container) {
      if (!isValidContainerLegacy(container)) {
        throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
      }
      {
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
        if (isModernRoot) {
          error2("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
        }
      }
      if (container._reactRootContainer) {
        {
          var rootEl = getReactRootElementInContainer(container);
          var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
          if (renderedByDifferentReact) {
            error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
          }
        }
        flushSync(function() {
          legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
            container._reactRootContainer = null;
            unmarkContainerAsRoot(container);
          });
        });
        return true;
      } else {
        {
          var _rootEl = getReactRootElementInContainer(container);
          var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
          var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
          if (hasNonRootReactChild) {
            error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
          }
        }
        return false;
      }
    }
    setAttemptSynchronousHydration(attemptSynchronousHydration$1);
    setAttemptContinuousHydration(attemptContinuousHydration$1);
    setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
    setGetCurrentUpdatePriority(getCurrentUpdatePriority);
    setAttemptHydrationAtPriority(runWithPriority);
    {
      if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
      Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
      Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
        error2("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
      }
    }
    setRestoreImplementation(restoreControlledState$3);
    setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
    function createPortal$1(children, container) {
      var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      if (!isValidContainer(container)) {
        throw new Error("Target container is not a DOM element.");
      }
      return createPortal(children, container, null, key);
    }
    function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
      return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
    }
    var Internals = {
      usingClientEntryPoint: false,
      // Keep in sync with ReactTestUtils.js.
      // This is an array for better minification.
      Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
    };
    function createRoot$1(container, options2) {
      {
        if (!Internals.usingClientEntryPoint && true) {
          error2('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
        }
      }
      return createRoot2(container, options2);
    }
    function hydrateRoot$1(container, initialChildren, options2) {
      {
        if (!Internals.usingClientEntryPoint && true) {
          error2('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
        }
      }
      return hydrateRoot(container, initialChildren, options2);
    }
    function flushSync$1(fn) {
      {
        if (isAlreadyRendering()) {
          error2("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
        }
      }
      return flushSync(fn);
    }
    var foundDevTools = injectIntoDevTools({
      findFiberByHostInstance: getClosestInstanceFromNode,
      bundleType: 1,
      version: ReactVersion,
      rendererPackageName: "react-dom"
    });
    {
      if (!foundDevTools && canUseDOM && window.top === window.self) {
        if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
          var protocol = window.location.protocol;
          if (/^(https?|file):$/.test(protocol)) {
            console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
          }
        }
      }
    }
    reactDom_development.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
    reactDom_development.createPortal = createPortal$1;
    reactDom_development.createRoot = createRoot$1;
    reactDom_development.findDOMNode = findDOMNode;
    reactDom_development.flushSync = flushSync$1;
    reactDom_development.hydrate = hydrate;
    reactDom_development.hydrateRoot = hydrateRoot$1;
    reactDom_development.render = render2;
    reactDom_development.unmountComponentAtNode = unmountComponentAtNode;
    reactDom_development.unstable_batchedUpdates = batchedUpdates$1;
    reactDom_development.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
    reactDom_development.version = ReactVersion;
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    }
  })();
}
{
  reactDom.exports = reactDom_development;
}
var reactDomExports = reactDom.exports;
/* @__PURE__ */ getDefaultExportFromCjs(reactDomExports);
var createRoot;
var m = reactDomExports;
{
  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  createRoot = function(c, o) {
    i.usingClientEntryPoint = true;
    try {
      return m.createRoot(c, o);
    } finally {
      i.usingClientEntryPoint = false;
    }
  };
}
var _a;
const features = ["image", "pow"];
const BUNDLE_NAME = "procaptcha.bundle.js";
const getCurrentScript = () => document && document.currentScript && "src" in document.currentScript && document.currentScript.src !== void 0 ? document.currentScript : void 0;
const extractParams = (name) => {
  const script = getCurrentScript();
  if (script && script.src.indexOf("".concat(name)) !== -1) {
    const params = new URLSearchParams(script.src.split("?")[1]);
    return {
      onloadUrlCallback: params.get("onload") || void 0,
      renderExplicit: params.get("render") || void 0
    };
  }
  return { onloadUrlCallback: void 0, renderExplicit: void 0 };
};
const getConfig = (siteKey) => {
  if (!siteKey) {
    siteKey = "5HGjWAeFDfFCWPsjFQdVV2Msvz2XtMktvgocEZcCj68kUMaw";
  }
  return ProcaptchaConfigSchema.parse({
    defaultEnvironment: EnvironmentTypesSchema.parse("development"),
    defaultNetwork: NetworkNamesSchema.parse("development"),
    userAccountAddress: "",
    account: {
      address: siteKey
    },
    serverUrl: "",
    mongoAtlasUri: false
  });
};
const getParentForm = (element) => element.closest("form");
const getWindowCallback = (callbackName) => {
  const fn = window[callbackName.replace("window.", "")];
  if (typeof fn !== "function") {
    throw new Error("Callback ".concat(callbackName, " is not defined on the window object"));
  }
  return fn;
};
const handleOnHuman = (element, payload) => {
  const form = getParentForm(element);
  if (!form) {
    console.error("Parent form not found for the element:", element);
    return;
  }
  const input = document.createElement("input");
  input.type = "hidden";
  input.name = ApiParams.procaptchaResponse;
  input.value = JSON.stringify(payload);
  form.appendChild(input);
};
const customThemeSet = /* @__PURE__ */ new Set(["light", "dark"]);
const validateTheme = (themeAttribute) => customThemeSet.has(themeAttribute) ? themeAttribute : "light";
const renderLogic = (elements, config2, renderOptions) => {
  elements.forEach((element) => {
    const callbackName = (renderOptions == null ? void 0 : renderOptions.callback) || element.getAttribute("data-callback");
    const chalExpiredCallbackName = (renderOptions == null ? void 0 : renderOptions["chalexpired-callback"]) || element.getAttribute("data-chalexpired-callback");
    const errorCallback = (renderOptions == null ? void 0 : renderOptions["error-callback"]) || element.getAttribute("data-error-callback");
    const onCloseCallbackName = (renderOptions == null ? void 0 : renderOptions["close-callback"]) || element.getAttribute("data-close-callback");
    const onOpenCallbackName = (renderOptions == null ? void 0 : renderOptions["open-callback"]) || element.getAttribute("data-open-callback");
    const onExpiredCallbackName = (renderOptions == null ? void 0 : renderOptions["expired-callback"]) || element.getAttribute("data-expired-callback");
    const callbacks = {
      onHuman: (payload) => handleOnHuman(element, payload),
      onChallengeExpired: () => {
        console.log("Challenge expired");
      },
      onExpired: () => {
        alert("Completed challenge has expired, please try again");
      },
      onError: (error2) => {
        console.error(error2);
      },
      onClose: () => {
        console.log("Challenge closed");
      },
      onOpen: () => {
        console.log("Challenge opened");
      }
    };
    if (callbackName)
      callbacks.onHuman = getWindowCallback(callbackName);
    if (chalExpiredCallbackName)
      callbacks.onChallengeExpired = getWindowCallback(chalExpiredCallbackName);
    if (onExpiredCallbackName)
      callbacks.onExpired = getWindowCallback(onExpiredCallbackName);
    if (errorCallback)
      callbacks.onError = getWindowCallback(errorCallback);
    if (onCloseCallbackName)
      callbacks.onClose = getWindowCallback(onCloseCallbackName);
    if (onOpenCallbackName)
      callbacks.onOpen = getWindowCallback(onOpenCallbackName);
    const themeAttribute = (renderOptions == null ? void 0 : renderOptions.theme) || element.getAttribute("data-theme") || "light";
    config2.theme = validateTheme(themeAttribute);
    const challengeValidLengthAttribute = (renderOptions == null ? void 0 : renderOptions["challenge-valid-length"]) || element.getAttribute("data-challenge-valid-length");
    if (challengeValidLengthAttribute) {
      config2.challengeValidLength = parseInt(challengeValidLengthAttribute);
    }
    if ((renderOptions == null ? void 0 : renderOptions.captchaType) === "pow") {
      createRoot(element).render(jsxRuntimeExports.jsx(PowProcaptcha, { config: config2, callbacks }));
    } else {
      createRoot(element).render(jsxRuntimeExports.jsx(Procaptcha$1, { config: config2, callbacks }));
    }
  });
};
const implicitRender = () => {
  const elements = Array.from(document.getElementsByClassName("procaptcha"));
  if (elements.length) {
    const siteKey = at(elements, 0).getAttribute("data-sitekey");
    if (!siteKey) {
      console.error("No siteKey found");
      return;
    }
    const captchaType = features.find((feature) => feature === at(elements, 0).getAttribute("data-captcha-type")) || "image";
    console.log(captchaType, "captchaType \n\n\n\n\n ------------ \n\n\n\n ---------");
    renderLogic(elements, getConfig(siteKey), { captchaType, siteKey });
  }
};
const render = (elementId, renderOptions) => {
  const siteKey = renderOptions.siteKey;
  const element = document.getElementById(elementId);
  if (!element) {
    console.error("Element not found:", elementId);
    return;
  }
  renderLogic([element], getConfig(siteKey), renderOptions);
};
function ready(fn) {
  if (document && document.readyState !== "loading") {
    console.log("document.readyState ready!");
    fn();
  } else {
    console.log("DOMContentLoaded listener!");
    document.addEventListener("DOMContentLoaded", fn);
  }
}
const { onloadUrlCallback, renderExplicit } = extractParams(BUNDLE_NAME);
if (renderExplicit !== "explicit") {
  ready(implicitRender);
}
if (onloadUrlCallback) {
  const onloadCallback = getWindowCallback(onloadUrlCallback);
  (_a = getCurrentScript()) == null ? void 0 : _a.addEventListener("load", () => {
    ready(onloadCallback);
  });
}
export {
  I18nContext as I,
  LoadingSpinner as L,
  Manager$1 as M,
  ProsopoDatasetError as P,
  ReportNamespaces as R,
  _arrayWithHoles as _,
  _unsupportedIterableToArray as a,
  _nonIterableRest as b,
  _defineProperty$1 as c,
  getI18n as d,
  darkTheme as e,
  jsxs as f,
  getDefaults$2 as g,
  at as h,
  i18n as i,
  jsx as j,
  css as k,
  lightTheme as l,
  React as m,
  render as n,
  ready as o,
  reactExports as r
};
