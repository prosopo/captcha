var procaptcha = function(exports) {
  "use strict";
  var _documentCurrentScript = typeof document !== "undefined" ? document.currentScript : null;
  function _mergeNamespaces(n, m2) {
    for (var i2 = 0; i2 < m2.length; i2++) {
      const e = m2[i2];
      if (typeof e !== "string" && !Array.isArray(e)) {
        for (const k in e) {
          if (k !== "default" && !(k in n)) {
            const d = Object.getOwnPropertyDescriptor(e, k);
            if (d) {
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: () => e[k]
              });
            }
          }
        }
      }
    }
    return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: "Module" }));
  }
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  function getDefaultExportFromCjs(x) {
    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
  }
  function getAugmentedNamespace(n) {
    if (n.__esModule)
      return n;
    var f = n.default;
    if (typeof f == "function") {
      var a = function a2() {
        if (this instanceof a2) {
          return Reflect.construct(f, arguments, this.constructor);
        }
        return f.apply(this, arguments);
      };
      a.prototype = f.prototype;
    } else
      a = {};
    Object.defineProperty(a, "__esModule", { value: true });
    Object.keys(n).forEach(function(k) {
      var d = Object.getOwnPropertyDescriptor(n, k);
      Object.defineProperty(a, k, d.get ? d : {
        enumerable: true,
        get: function() {
          return n[k];
        }
      });
    });
    return a;
  }
  var jsxDevRuntime = { exports: {} };
  var reactJsxDevRuntime_development = {};
  var react = { exports: {} };
  var react_development = { exports: {} };
  /**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  (function(module2, exports2) {
    {
      (function() {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var ReactVersion = "18.2.0";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: null
        };
        var ReactCurrentActQueue = {
          current: null,
          // Used to reproduce behavior of `batchedUpdates` in legacy mode.
          isBatchingLegacy: false,
          didScheduleLegacyUpdate: false
        };
        var ReactCurrentOwner = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
        }
        function warn2(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning2("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning2("error", format, args);
            }
          }
        }
        function printWarning2(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          /**
           * Checks whether or not this composite component is mounted.
           * @param {ReactClass} publicInstance The instance we want to test.
           * @return {boolean} True if mounted, false otherwise.
           * @protected
           * @final
           */
          isMounted: function(publicInstance) {
            return false;
          },
          /**
           * Forces an update. This should only be invoked when it is known with
           * certainty that we are **not** in a DOM transaction.
           *
           * You may want to call this when you know that some deeper aspect of the
           * component's state has changed but `setState` was not called.
           *
           * This will not invoke `shouldComponentUpdate`, but it will invoke
           * `componentWillUpdate` and `componentDidUpdate`.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          /**
           * Replaces all of the state. Always use this or `setState` to mutate state.
           * You should treat `this.state` as immutable.
           *
           * There is no guarantee that `this.state` will be immediately updated, so
           * accessing `this.state` after calling this method may return the old value.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} completeState Next state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          /**
           * Sets a subset of the state. This only exists because _pendingState is
           * internal. This provides a merging strategy that is not available to deep
           * properties which is confusing. TODO: Expose pendingState or don't use it
           * during the merge.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} partialState Next partial state to be merged with state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} Name of the calling function in the public API.
           * @internal
           */
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var assign2 = Object.assign;
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function(partialState, callback) {
          if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
            throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info2) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function() {
                warn2("%s(...) is deprecated in plain JavaScript React classes. %s", info2[0], info2[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        assign2(pureComponentPrototype, Component.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var isArrayImpl = Array.isArray;
        function isArray2(a) {
          return isArrayImpl(a);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow()) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function getWrappedName2(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName2(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init2 = lazyComponent._init;
                try {
                  return getComponentNameFromType(init2(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config2) {
          {
            if (hasOwnProperty2.call(config2, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config2.ref !== void 0;
        }
        function hasValidKey(config2) {
          {
            if (hasOwnProperty2.call(config2, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config2.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config2) {
          {
            if (typeof config2.ref === "string" && ReactCurrentOwner.current && config2.__self && ReactCurrentOwner.current.stateNode !== config2.__self) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config2.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key, ref, self2, source, owner, props) {
          var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type,
            key,
            ref,
            props,
            // Record the component responsible for creating this element.
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement(type, config2, children) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self2 = null;
          var source = null;
          if (config2 != null) {
            if (hasValidRef(config2)) {
              ref = config2.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config2);
              }
            }
            if (hasValidKey(config2)) {
              {
                checkKeyStringCoercion(config2.key);
              }
              key = "" + config2.key;
            }
            self2 = config2.__self === void 0 ? null : config2.__self;
            source = config2.__source === void 0 ? null : config2.__source;
            for (propName in config2) {
              if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config2[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i2 = 0; i2 < childrenLength; i2++) {
              childArray[i2] = arguments[i2 + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps2 = type.defaultProps;
            for (propName in defaultProps2) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps2[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement(element, config2, children) {
          if (element === null || element === void 0) {
            throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
          }
          var propName;
          var props = assign2({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self2 = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config2 != null) {
            if (hasValidRef(config2)) {
              ref = config2.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config2)) {
              {
                checkKeyStringCoercion(config2.key);
              }
              key = "" + config2.key;
            }
            var defaultProps2;
            if (element.type && element.type.defaultProps) {
              defaultProps2 = element.type.defaultProps;
            }
            for (propName in config2) {
              if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config2[propName] === void 0 && defaultProps2 !== void 0) {
                  props[propName] = defaultProps2[propName];
                } else {
                  props[propName] = config2[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i2 = 0; i2 < childrenLength; i2++) {
              childArray[i2] = arguments[i2 + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self2, source, owner, props);
        }
        function isValidElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape2(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function(match2) {
            return escaperLookup[match2];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index2) {
          if (typeof element === "object" && element !== null && element.key != null) {
            {
              checkKeyStringCoercion(element.key);
            }
            return escape2("" + element.key);
          }
          return index2.toString(36);
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey2 = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray2(mappedChild)) {
              var escapedChildKey = "";
              if (childKey2 != null) {
                escapedChildKey = escapeUserProvidedKey(childKey2) + "/";
              }
              mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                return c;
              });
            } else if (mappedChild != null) {
              if (isValidElement(mappedChild)) {
                {
                  if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                    checkKeyStringCoercion(mappedChild.key);
                  }
                }
                mappedChild = cloneAndReplaceKey(
                  mappedChild,
                  // Keep both the (mapped) and old keys if they differ, just as
                  // traverseAllChildren used to do for objects as children
                  escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                  (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                    // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                    // eslint-disable-next-line react-internal/safe-string-coercion
                    escapeUserProvidedKey("" + mappedChild.key) + "/"
                  ) : "") + childKey2
                );
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (isArray2(children)) {
            for (var i2 = 0; i2 < children.length; i2++) {
              child = children[i2];
              nextName = nextNamePrefix + getElementKey(child, i2);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator2 = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator2.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else if (type === "object") {
              var childrenString = String(children);
              throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n = 0;
          mapChildren(children, function() {
            n++;
          });
          return n;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(children, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray2(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children) {
          if (!isValidElement(children)) {
            throw new Error("React.Children.only expected to receive a single React element child.");
          }
          return children;
        }
        function createContext(defaultValue) {
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null,
            // Add these to use same hidden class in VM as ServerContext
            _defaultValue: null,
            _globalName: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn2("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            thenable.then(function(moduleObject2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var resolved2 = payload;
                resolved2._status = Resolved;
                resolved2._result = moduleObject2;
              }
            }, function(error2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error2;
              }
            });
            if (payload._status === Uninitialized) {
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
            }
          }
          if (payload._status === Resolved) {
            var moduleObject = payload._result;
            {
              if (moduleObject === void 0) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
              }
            }
            {
              if (!("default" in moduleObject)) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
              }
            }
            return moduleObject.default;
          } else {
            throw payload._result;
          }
        }
        function lazy(ctor) {
          var payload = {
            // We use these fields to store the result.
            _status: Uninitialized,
            _result: ctor
          };
          var lazyType2 = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps2;
            var propTypes2;
            Object.defineProperties(lazyType2, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps2;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps2 = newDefaultProps;
                  Object.defineProperty(lazyType2, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes2;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes2 = newPropTypes;
                  Object.defineProperty(lazyType2, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType2;
        }
        function forwardRef(render2) {
          {
            if (render2 != null && render2.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render2 !== "function") {
              error("forwardRef requires a render function but was given %s.", render2 === null ? "null" : typeof render2);
            } else {
              if (render2.length !== 0 && render2.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render2.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render2 != null) {
              if (render2.defaultProps != null || render2.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render2
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!render2.name && !render2.displayName) {
                  render2.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function memo2(type, compare) {
          {
            if (!isValidElementType(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!type.name && !type.displayName) {
                  type.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          {
            if (dispatcher === null) {
              error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext(Context) {
          var dispatcher = resolveDispatcher();
          {
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context);
        }
        function useState(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer, initialArg, init2) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init2);
        }
        function useRef(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }
        function useInsertionEffect2(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useInsertionEffect(create, deps);
        }
        function useLayoutEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }
        function useCallback(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }
        function useImperativeHandle(ref, create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create, deps);
        }
        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        function useTransition() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useTransition();
        }
        function useDeferredValue(value) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDeferredValue(value);
        }
        function useId2() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useId();
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign2({}, props, {
                  value: prevLog
                }),
                info: assign2({}, props, {
                  value: prevInfo
                }),
                warn: assign2({}, props, {
                  value: prevWarn
                }),
                error: assign2({}, props, {
                  value: prevError
                }),
                group: assign2({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign2({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign2({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix2;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix2 === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match2 = x.stack.trim().match(/\n( *(at )?)/);
                prefix2 = match2 && match2[1] || "";
              }
            }
            return "\n" + prefix2 + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype2 = Component2.prototype;
          return !!(prototype2 && prototype2.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init2 = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init2(payload));
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures2 = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var stack = describeUnknownElementTypeFrameInDEV(element.type);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes2(typeSpecs, values2, location2, componentName, element) {
          {
            var has2 = Function.call.bind(hasOwnProperty2);
            for (var typeSpecName in typeSpecs) {
              if (has2(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures2)) {
                  loggedTypeFailures2[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location2, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var stack = describeUnknownElementTypeFrameInDEV(element.type);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info2 = getDeclarationErrorAddendum();
          if (!info2) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info2 = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info2;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node2, parentType) {
          if (typeof node2 !== "object") {
            return;
          }
          if (isArray2(node2)) {
            for (var i2 = 0; i2 < node2.length; i2++) {
              var child = node2[i2];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node2)) {
            if (node2._store) {
              node2._store.validated = true;
            }
          } else if (node2) {
            var iteratorFn = getIteratorFn(node2);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node2.entries) {
                var iterator2 = iteratorFn.call(node2);
                var step;
                while (!(step = iterator2.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes2;
            if (typeof type === "function") {
              propTypes2 = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
            // Inner props are checked in the reconciler.
            type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes2 = type.propTypes;
            } else {
              return;
            }
            if (propTypes2) {
              var name = getComponentNameFromType(type);
              checkPropTypes2(propTypes2, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys2 = Object.keys(fragment.props);
            for (var i2 = 0; i2 < keys2.length; i2++) {
              var key = keys2[i2];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info2 = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info2 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info2 += sourceInfo;
            } else {
              info2 += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (isArray2(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
              info2 = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info2);
            }
          }
          var element = createElement.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i2 = 2; i2 < arguments.length; i2++) {
              validateChildKeys(arguments[i2], type);
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn2("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn2("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement.apply(this, arguments);
          for (var i2 = 2; i2 < arguments.length; i2++) {
            validateChildKeys(arguments[i2], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        function startTransition(scope, options) {
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = {};
          var currentTransition = ReactCurrentBatchConfig.transition;
          {
            ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            scope();
          } finally {
            ReactCurrentBatchConfig.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn2("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        var didWarnAboutMessageChannel = false;
        var enqueueTaskImpl = null;
        function enqueueTask(task) {
          if (enqueueTaskImpl === null) {
            try {
              var requireString = ("require" + Math.random()).slice(0, 7);
              var nodeRequire = module2 && module2[requireString];
              enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function(callback) {
                {
                  if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined") {
                      error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                    }
                  }
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
              };
            }
          }
          return enqueueTaskImpl(task);
        }
        var actScopeDepth = 0;
        var didWarnNoAwaitAct = false;
        function act(callback) {
          {
            var prevActScopeDepth = actScopeDepth;
            actScopeDepth++;
            if (ReactCurrentActQueue.current === null) {
              ReactCurrentActQueue.current = [];
            }
            var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
            var result;
            try {
              ReactCurrentActQueue.isBatchingLegacy = true;
              result = callback();
              if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue2 = ReactCurrentActQueue.current;
                if (queue2 !== null) {
                  ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                  flushActQueue(queue2);
                }
              }
            } catch (error2) {
              popActScope(prevActScopeDepth);
              throw error2;
            } finally {
              ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
            }
            if (result !== null && typeof result === "object" && typeof result.then === "function") {
              var thenableResult = result;
              var wasAwaited = false;
              var thenable = {
                then: function(resolve, reject) {
                  wasAwaited = true;
                  thenableResult.then(function(returnValue2) {
                    popActScope(prevActScopeDepth);
                    if (actScopeDepth === 0) {
                      recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                    } else {
                      resolve(returnValue2);
                    }
                  }, function(error2) {
                    popActScope(prevActScopeDepth);
                    reject(error2);
                  });
                }
              };
              {
                if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                  Promise.resolve().then(function() {
                  }).then(function() {
                    if (!wasAwaited) {
                      didWarnNoAwaitAct = true;
                      error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                    }
                  });
                }
              }
              return thenable;
            } else {
              var returnValue = result;
              popActScope(prevActScopeDepth);
              if (actScopeDepth === 0) {
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                  flushActQueue(_queue);
                  ReactCurrentActQueue.current = null;
                }
                var _thenable = {
                  then: function(resolve, reject) {
                    if (ReactCurrentActQueue.current === null) {
                      ReactCurrentActQueue.current = [];
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    } else {
                      resolve(returnValue);
                    }
                  }
                };
                return _thenable;
              } else {
                var _thenable2 = {
                  then: function(resolve, reject) {
                    resolve(returnValue);
                  }
                };
                return _thenable2;
              }
            }
          }
        }
        function popActScope(prevActScopeDepth) {
          {
            if (prevActScopeDepth !== actScopeDepth - 1) {
              error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
            }
            actScopeDepth = prevActScopeDepth;
          }
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
          {
            var queue2 = ReactCurrentActQueue.current;
            if (queue2 !== null) {
              try {
                flushActQueue(queue2);
                enqueueTask(function() {
                  if (queue2.length === 0) {
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                  } else {
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  }
                });
              } catch (error2) {
                reject(error2);
              }
            } else {
              resolve(returnValue);
            }
          }
        }
        var isFlushing = false;
        function flushActQueue(queue2) {
          {
            if (!isFlushing) {
              isFlushing = true;
              var i2 = 0;
              try {
                for (; i2 < queue2.length; i2++) {
                  var callback = queue2[i2];
                  do {
                    callback = callback(true);
                  } while (callback !== null);
                }
                queue2.length = 0;
              } catch (error2) {
                queue2 = queue2.slice(i2 + 1);
                throw error2;
              } finally {
                isFlushing = false;
              }
            }
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray: toArray2,
          only: onlyChild
        };
        exports2.Children = Children;
        exports2.Component = Component;
        exports2.Fragment = REACT_FRAGMENT_TYPE;
        exports2.Profiler = REACT_PROFILER_TYPE;
        exports2.PureComponent = PureComponent;
        exports2.StrictMode = REACT_STRICT_MODE_TYPE;
        exports2.Suspense = REACT_SUSPENSE_TYPE;
        exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports2.cloneElement = cloneElement$1;
        exports2.createContext = createContext;
        exports2.createElement = createElement$1;
        exports2.createFactory = createFactory;
        exports2.createRef = createRef;
        exports2.forwardRef = forwardRef;
        exports2.isValidElement = isValidElement;
        exports2.lazy = lazy;
        exports2.memo = memo2;
        exports2.startTransition = startTransition;
        exports2.unstable_act = act;
        exports2.useCallback = useCallback;
        exports2.useContext = useContext;
        exports2.useDebugValue = useDebugValue;
        exports2.useDeferredValue = useDeferredValue;
        exports2.useEffect = useEffect;
        exports2.useId = useId2;
        exports2.useImperativeHandle = useImperativeHandle;
        exports2.useInsertionEffect = useInsertionEffect2;
        exports2.useLayoutEffect = useLayoutEffect;
        exports2.useMemo = useMemo;
        exports2.useReducer = useReducer;
        exports2.useRef = useRef;
        exports2.useState = useState;
        exports2.useSyncExternalStore = useSyncExternalStore;
        exports2.useTransition = useTransition;
        exports2.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  })(react_development, react_development.exports);
  var react_developmentExports = react_development.exports;
  {
    react.exports = react_developmentExports;
  }
  var reactExports = react.exports;
  const React = /* @__PURE__ */ getDefaultExportFromCjs(reactExports);
  const React$1 = /* @__PURE__ */ _mergeNamespaces({
    __proto__: null,
    default: React
  }, [reactExports]);
  /**
   * @license React
   * react-jsx-dev-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  {
    (function() {
      var React2 = reactExports;
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function error(format) {
        {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning2("error", format, args);
          }
        }
      }
      function printWarning2(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var enableScopeAPI = false;
      var enableCacheElement = false;
      var enableTransitionTracing = false;
      var enableLegacyHidden = false;
      var enableDebugTracing = false;
      var REACT_MODULE_REFERENCE;
      {
        REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      }
      function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") {
          return true;
        }
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
          return true;
        }
        if (typeof type === "object" && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
          // types supported by any Flight configuration anywhere since
          // we don't know which Flight build this will end up being used
          // with.
          type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
            return true;
          }
        }
        return false;
      }
      function getWrappedName2(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName2(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init2 = lazyComponent._init;
              try {
                return getComponentNameFromType(init2(payload));
              } catch (x) {
                return null;
              }
            }
          }
        }
        return null;
      }
      var assign2 = Object.assign;
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign2({}, props, {
                value: prevLog
              }),
              info: assign2({}, props, {
                value: prevInfo
              }),
              warn: assign2({}, props, {
                value: prevWarn
              }),
              error: assign2({}, props, {
                value: prevError
              }),
              group: assign2({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign2({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign2({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0) {
            try {
              throw Error();
            } catch (x) {
              var match2 = x.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match2 && match2[1] || "";
            }
          }
          return "\n" + prefix2 + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s = sampleLines.length - 1;
            var c = controlLines.length - 1;
            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
              c--;
            }
            for (; s >= 1 && c >= 0; s--, c--) {
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1) {
                  do {
                    s--;
                    c--;
                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                      if (fn.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn.displayName);
                      }
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s >= 1 && c >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component) {
        var prototype2 = Component.prototype;
        return !!(prototype2 && prototype2.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init2 = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init2(payload));
              } catch (x) {
              }
            }
          }
        }
        return "";
      }
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var loggedTypeFailures2 = {};
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var stack = describeUnknownElementTypeFrameInDEV(element.type);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes2(typeSpecs, values2, location2, componentName, element) {
        {
          var has2 = Function.call.bind(hasOwnProperty2);
          for (var typeSpecName in typeSpecs) {
            if (has2(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures2)) {
                loggedTypeFailures2[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location2, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray2(a) {
        return isArrayImpl(a);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        {
          try {
            return false;
          } catch (e) {
            return true;
          }
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow()) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown;
      var specialPropRefWarningShown;
      var didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }
      function hasValidRef(config2) {
        {
          if (hasOwnProperty2.call(config2, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config2.ref !== void 0;
      }
      function hasValidKey(config2) {
        {
          if (hasOwnProperty2.call(config2, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config2.key !== void 0;
      }
      function warnIfStringRefCannotBeAutoConverted(config2, self2) {
        {
          if (typeof config2.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
              error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config2.ref);
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
      }
      function defineKeyPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
      }
      function defineRefPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
      }
      var ReactElement = function(type, key, ref, self2, source, owner, props) {
        var element = {
          // This tag allows us to uniquely identify this as a React Element
          $$typeof: REACT_ELEMENT_TYPE,
          // Built-in properties that belong on the element
          type,
          key,
          ref,
          props,
          // Record the component responsible for creating this element.
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self2
          });
          Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };
      function jsxDEV(type, config2, maybeKey, source, self2) {
        {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          if (maybeKey !== void 0) {
            {
              checkKeyStringCoercion(maybeKey);
            }
            key = "" + maybeKey;
          }
          if (hasValidKey(config2)) {
            {
              checkKeyStringCoercion(config2.key);
            }
            key = "" + config2.key;
          }
          if (hasValidRef(config2)) {
            ref = config2.ref;
            warnIfStringRefCannotBeAutoConverted(config2, self2);
          }
          for (propName in config2) {
            if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config2[propName];
            }
          }
          if (type && type.defaultProps) {
            var defaultProps2 = type.defaultProps;
            for (propName in defaultProps2) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps2[propName];
              }
            }
          }
          if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var stack = describeUnknownElementTypeFrameInDEV(element.type);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }
      function isValidElement(object) {
        {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
      }
      function getDeclarationErrorAddendum() {
        {
          if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
      }
      function getSourceInfoErrorAddendum(source) {
        {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        {
          var info2 = getDeclarationErrorAddendum();
          if (!info2) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info2 = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info2;
        }
      }
      function validateExplicitKey(element, parentType) {
        {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          setCurrentlyValidatingElement$1(element);
          error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node2, parentType) {
        {
          if (typeof node2 !== "object") {
            return;
          }
          if (isArray2(node2)) {
            for (var i2 = 0; i2 < node2.length; i2++) {
              var child = node2[i2];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node2)) {
            if (node2._store) {
              node2._store.validated = true;
            }
          } else if (node2) {
            var iteratorFn = getIteratorFn(node2);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node2.entries) {
                var iterator2 = iteratorFn.call(node2);
                var step;
                while (!(step = iterator2.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type === null || type === void 0 || typeof type === "string") {
            return;
          }
          var propTypes2;
          if (typeof type === "function") {
            propTypes2 = type.propTypes;
          } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
          // Inner props are checked in the reconciler.
          type.$$typeof === REACT_MEMO_TYPE)) {
            propTypes2 = type.propTypes;
          } else {
            return;
          }
          if (propTypes2) {
            var name = getComponentNameFromType(type);
            checkPropTypes2(propTypes2, element.props, "prop", name, element);
          } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
          }
        }
      }
      function validateFragmentProps(fragment) {
        {
          var keys2 = Object.keys(fragment.props);
          for (var i2 = 0; i2 < keys2.length; i2++) {
            var key = keys2[i2];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
              setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
          }
        }
      }
      function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
        {
          var validType = isValidElementType(type);
          if (!validType) {
            var info2 = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info2 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendum(source);
            if (sourceInfo) {
              info2 += sourceInfo;
            } else {
              info2 += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (isArray2(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
              info2 = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info2);
          }
          var element = jsxDEV(type, props, key, source, self2);
          if (element == null) {
            return element;
          }
          if (validType) {
            var children = props.children;
            if (children !== void 0) {
              if (isStaticChildren) {
                if (isArray2(children)) {
                  for (var i2 = 0; i2 < children.length; i2++) {
                    validateChildKeys(children[i2], type);
                  }
                  if (Object.freeze) {
                    Object.freeze(children);
                  }
                } else {
                  error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                }
              } else {
                validateChildKeys(children, type);
              }
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
      }
      var jsxDEV$1 = jsxWithValidation;
      reactJsxDevRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
      reactJsxDevRuntime_development.jsxDEV = jsxDEV$1;
    })();
  }
  {
    jsxDevRuntime.exports = reactJsxDevRuntime_development;
  }
  var jsxDevRuntimeExports = jsxDevRuntime.exports;
  var arr$2 = [];
  var each$2 = arr$2.forEach;
  var slice$3 = arr$2.slice;
  function defaults$8(obj) {
    each$2.call(slice$3.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] === void 0)
            obj[prop] = source[prop];
        }
      }
    });
    return obj;
  }
  var fieldContentRegExp$1 = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
  var serializeCookie$1 = function serializeCookie2(name, val, options) {
    var opt = options || {};
    opt.path = opt.path || "/";
    var value = encodeURIComponent(val);
    var str = name + "=" + value;
    if (opt.maxAge > 0) {
      var maxAge = opt.maxAge - 0;
      if (isNaN(maxAge))
        throw new Error("maxAge should be a Number");
      str += "; Max-Age=" + Math.floor(maxAge);
    }
    if (opt.domain) {
      if (!fieldContentRegExp$1.test(opt.domain)) {
        throw new TypeError("option domain is invalid");
      }
      str += "; Domain=" + opt.domain;
    }
    if (opt.path) {
      if (!fieldContentRegExp$1.test(opt.path)) {
        throw new TypeError("option path is invalid");
      }
      str += "; Path=" + opt.path;
    }
    if (opt.expires) {
      if (typeof opt.expires.toUTCString !== "function") {
        throw new TypeError("option expires is invalid");
      }
      str += "; Expires=" + opt.expires.toUTCString();
    }
    if (opt.httpOnly)
      str += "; HttpOnly";
    if (opt.secure)
      str += "; Secure";
    if (opt.sameSite) {
      var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
      switch (sameSite) {
        case true:
          str += "; SameSite=Strict";
          break;
        case "lax":
          str += "; SameSite=Lax";
          break;
        case "strict":
          str += "; SameSite=Strict";
          break;
        case "none":
          str += "; SameSite=None";
          break;
        default:
          throw new TypeError("option sameSite is invalid");
      }
    }
    return str;
  };
  const cookieLookup = {
    name: "cookie",
    lookup: function lookup(req, res, options) {
      var found;
      if (options.lookupCookie && typeof req !== "undefined") {
        var cookies2 = options.getCookies(req);
        if (cookies2)
          found = cookies2[options.lookupCookie];
      }
      return found;
    },
    cacheUserLanguage: function cacheUserLanguage(req, res, lng) {
      var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
      if (options.lookupCookie && req !== "undefined") {
        var expirationDate = options.cookieExpirationDate;
        if (!expirationDate) {
          expirationDate = /* @__PURE__ */ new Date();
          expirationDate.setFullYear(expirationDate.getFullYear() + 1);
        }
        var cookieOptions = {
          expires: expirationDate,
          domain: options.cookieDomain,
          path: options.cookiePath,
          httpOnly: false,
          overwrite: true,
          sameSite: options.cookieSameSite
        };
        if (options.cookieSecure)
          cookieOptions.secure = options.cookieSecure;
        var existingCookie = options.getHeader(res, "set-cookie") || options.getHeader(res, "Set-Cookie") || [];
        if (typeof existingCookie === "string")
          existingCookie = [existingCookie];
        if (!Array.isArray(existingCookie))
          existingCookie = [];
        existingCookie = existingCookie.filter(function(c) {
          return c.indexOf("".concat(options.lookupCookie, "=")) !== 0;
        });
        existingCookie.push(serializeCookie$1(options.lookupCookie, lng, cookieOptions));
        options.setHeader(res, "Set-Cookie", existingCookie.length === 1 ? existingCookie[0] : existingCookie);
      }
    }
  };
  const querystringLookup = {
    name: "querystring",
    lookup: function lookup(req, res, options) {
      var found;
      if (options.lookupQuerystring !== void 0 && typeof req !== "undefined") {
        if (options.getQuery(req)) {
          found = options.getQuery(req)[options.lookupQuerystring];
        }
        if (!found && options.getUrl(req) && options.getUrl(req).indexOf("?")) {
          var lastPartOfUri = options.getUrl(req).substring(options.getUrl(req).indexOf("?"));
          if (typeof URLSearchParams !== "undefined") {
            var urlParams = new URLSearchParams(lastPartOfUri);
            found = urlParams.get(options.lookupQuerystring);
          } else {
            var indexOfQsStart = lastPartOfUri.indexOf("".concat(options.lookupQuerystring, "="));
            if (indexOfQsStart > -1) {
              var restOfUri = lastPartOfUri.substring(options.lookupQuerystring.length + 2);
              if (restOfUri.indexOf("&") < 0) {
                found = restOfUri;
              } else {
                found = restOfUri.substring(0, restOfUri.indexOf("&"));
              }
            }
          }
        }
      }
      return found;
    }
  };
  const pathLookup = {
    name: "path",
    lookup: function lookup(req, res, options) {
      var found;
      if (req === void 0) {
        return found;
      }
      if (options.lookupPath !== void 0 && req.params) {
        found = options.getParams(req)[options.lookupPath];
      }
      if (!found && typeof options.lookupFromPathIndex === "number" && options.getOriginalUrl(req)) {
        var path2 = options.getOriginalUrl(req).split("?")[0];
        var parts = path2.split("/");
        if (parts[0] === "") {
          parts.shift();
        }
        if (parts.length > options.lookupFromPathIndex) {
          found = parts[options.lookupFromPathIndex];
        }
      }
      return found;
    }
  };
  var specialCases = ["hans", "hant", "latn", "cyrl", "cans", "mong", "arab"];
  const headerLookup = {
    name: "header",
    lookup: function lookup(req, res, options) {
      var found;
      if (typeof req !== "undefined") {
        var headers = options.getHeaders(req);
        if (!headers)
          return found;
        var locales = [];
        var acceptLanguage = options.lookupHeader ? headers[options.lookupHeader] : headers["accept-language"];
        if (acceptLanguage) {
          var lookupRegex = /(([a-z]{2,3})-?([A-Z]{2})?)\s*;?\s*(q=([0-9.]+))?/gi;
          if (acceptLanguage.indexOf("-") > 0) {
            var foundSpecialCase = specialCases.find(function(s) {
              return acceptLanguage.toLowerCase().indexOf("-".concat(s)) > 0;
            });
            if (foundSpecialCase)
              lookupRegex = /(([a-z]{2,3})-?([A-Z]{4})?)\s*;?\s*(q=([0-9.]+))?/gi;
          }
          var lngs = [];
          var i2;
          var m2;
          var rgx = options.lookupHeaderRegex || lookupRegex;
          do {
            m2 = rgx.exec(acceptLanguage);
            if (m2) {
              var lng = m2[1];
              var weight = m2[5] || "1";
              var q = Number(weight);
              if (lng && !isNaN(q)) {
                lngs.push({
                  lng,
                  q
                });
              }
            }
          } while (m2);
          lngs.sort(function(a, b) {
            return b.q - a.q;
          });
          for (i2 = 0; i2 < lngs.length; i2++) {
            locales.push(lngs[i2].lng);
          }
          if (locales.length)
            found = locales;
        }
      }
      return found;
    }
  };
  function _typeof$4(obj) {
    "@babel/helpers - typeof";
    return _typeof$4 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof$4(obj);
  }
  const sessionLookup = {
    name: "session",
    lookup: function lookup(req, res, options) {
      var found;
      if (options.lookupSession !== void 0 && _typeof$4(req) && options.getSession(req)) {
        found = options.getSession(req)[options.lookupSession];
      }
      return found;
    },
    cacheUserLanguage: function cacheUserLanguage(req, res, lng) {
      var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
      if (options.lookupSession && req && options.getSession(req)) {
        options.getSession(req)[options.lookupSession] = lng;
      }
    }
  };
  var getPath$3 = function getPath2(req) {
    if (req.path)
      return req.path;
    if (req.raw && req.raw.path)
      return req.raw.path;
    if (req.url)
      return req.url;
    console.log("no possibility found to get path");
  };
  var getUrl = function getUrl2(req) {
    if (req.url && req.url.href)
      return req.url.href;
    if (req.url)
      return req.url;
    if (req.raw && req.raw.url)
      return req.raw.url;
    console.log("no possibility found to get url");
  };
  var setUrl = function setUrl2(req, url) {
    if (req.url) {
      req.url = url;
      return;
    }
    console.log("no possibility found to get url");
  };
  var getOriginalUrl = function getOriginalUrl2(req) {
    if (req.originalUrl)
      return req.originalUrl;
    if (req.raw && req.raw.originalUrl)
      return req.raw.originalUrl;
    return getUrl(req);
  };
  var getQuery = function getQuery2(req) {
    if (req.query && typeof req.query.entries === "function" && typeof Object.fromEntries === "function" && typeof req.query[Symbol.iterator] === "function") {
      return Object.fromEntries(req.query);
    }
    if (req.query)
      return req.query;
    if (req.searchParams)
      return req.searchParams;
    if (req.raw && req.raw.query)
      return req.raw.query;
    if (req.ctx && req.ctx.queryParams)
      return req.ctx.queryParams;
    if (req.url && req.url.searchParams)
      return req.url.searchParams;
    var url = req.url || req.raw && req.raw.url;
    if (url && url.indexOf("?") < 0)
      return {};
    console.log("no possibility found to get query");
    return {};
  };
  var getParams = function getParams2(req) {
    if (req.params)
      return req.params;
    if (req.raw && req.raw.params)
      return req.raw.params;
    if (req.ctx && req.ctx.params)
      return req.ctx.params;
    console.log("no possibility found to get params");
    return {};
  };
  var getHeaders = function getHeaders2(req) {
    if (req.headers)
      return req.headers;
    console.log("no possibility found to get headers");
  };
  var getCookies = function getCookies2(req) {
    if (req.cookies)
      return req.cookies;
    if (getHeaders(req)) {
      var list = {};
      var rc = getHeaders(req).cookie;
      rc && rc.split(";").forEach(function(cookie2) {
        var parts = cookie2.split("=");
        list[parts.shift().trim()] = decodeURI(encodeURI(parts.join("=")));
      });
      return list;
    }
    console.log("no possibility found to get cookies");
  };
  var getBody = function getBody2(req) {
    if (req.ctx && typeof req.ctx.body === "function") {
      return req.ctx.body.bind(req.ctx);
    }
    if (req.ctx && req.ctx.body)
      return req.ctx.body;
    if (req.json)
      return req.json;
    if (req.body)
      return req.body;
    if (req.payload)
      return req.payload;
    console.log("no possibility found to get body");
    return {};
  };
  var getHeader$1 = function getHeader2(res, name) {
    if (res.getHeader)
      return res.getHeader(name);
    if (res.headers)
      return res.headers[name];
    if (getHeaders(res) && getHeaders(res)[name])
      return getHeaders(res)[name];
    console.log("no possibility found to get header");
    return void 0;
  };
  var setHeader = function setHeader2(res, name, value) {
    if (res._headerSent || res.headersSent)
      return;
    if (typeof res.setHeader === "function")
      return res.setHeader(name, value);
    if (typeof res.header === "function")
      return res.header(name, value);
    if (res.responseHeaders && typeof res.responseHeaders.set === "function") {
      return res.responseHeaders.set(name, value);
    }
    if (res.headers && typeof res.headers.set === "function") {
      return res.headers.set(name, value);
    }
    console.log("no possibility found to set header");
  };
  var setContentType = function setContentType2(res, type) {
    if (typeof res.contentType === "function")
      return res.contentType(type);
    if (typeof res.type === "function")
      return res.type(type);
    setHeader(res, "Content-Type", type);
  };
  var setStatus = function setStatus2(res, code) {
    if (typeof res.status === "function")
      return res.status(code);
    if (res.status)
      return res.status = code;
    console.log("no possibility found to set status");
  };
  var send = function send2(res, body) {
    if (typeof res.send === "function")
      return res.send(body);
    return body;
  };
  var getSession = function getSession2(req) {
    if (req.session)
      return req.session;
    if (req.raw && req.raw.session)
      return req.raw.session;
    console.log("no possibility found to get session");
  };
  var extendOptionsWithDefaults = function extendOptionsWithDefaults2() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    options.getPath = options.getPath || getPath$3;
    options.getOriginalUrl = options.getOriginalUrl || getOriginalUrl;
    options.getUrl = options.getUrl || getUrl;
    options.setUrl = options.setUrl || setUrl;
    options.getParams = options.getParams || getParams;
    options.getSession = options.getSession || getSession;
    options.getQuery = options.getQuery || getQuery;
    options.getCookies = options.getCookies || getCookies;
    options.getBody = options.getBody || getBody;
    options.getHeaders = options.getHeaders || getHeaders;
    options.getHeader = options.getHeader || getHeader$1;
    options.setHeader = options.setHeader || setHeader;
    options.setContentType = options.setContentType || setContentType;
    options.setStatus = options.setStatus || setStatus;
    options.send = options.send || send;
    return options;
  };
  function _typeof$3(obj) {
    "@babel/helpers - typeof";
    return _typeof$3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof$3(obj);
  }
  function _classCallCheck$2(instance2, Constructor) {
    if (!(instance2 instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties$2(target, props) {
    for (var i2 = 0; i2 < props.length; i2++) {
      var descriptor = props[i2];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey$1(descriptor.key), descriptor);
    }
  }
  function _createClass$2(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties$2(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties$2(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  }
  function _toPropertyKey$1(arg) {
    var key = _toPrimitive$1(arg, "string");
    return _typeof$3(key) === "symbol" ? key : String(key);
  }
  function _toPrimitive$1(input, hint) {
    if (_typeof$3(input) !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (_typeof$3(res) !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function getDefaults$3() {
    return extendOptionsWithDefaults({
      order: ["querystring", "cookie", "header"],
      lookupQuerystring: "lng",
      lookupCookie: "i18next",
      lookupSession: "lng",
      lookupFromPathIndex: 0,
      caches: false,
      cookieSameSite: "strict",
      ignoreCase: true
    });
  }
  var LanguageDetector$1 = function() {
    function LanguageDetector2(services) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var allOptions = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      _classCallCheck$2(this, LanguageDetector2);
      this.type = "languageDetector";
      this.detectors = {};
      this.init(services, options, allOptions);
    }
    _createClass$2(LanguageDetector2, [{
      key: "init",
      value: function init2(services) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var allOptions = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        this.services = services;
        this.options = defaults$8(options, this.options || {}, getDefaults$3());
        this.allOptions = allOptions;
        this.addDetector(cookieLookup);
        this.addDetector(querystringLookup);
        this.addDetector(pathLookup);
        this.addDetector(headerLookup);
        this.addDetector(sessionLookup);
      }
    }, {
      key: "addDetector",
      value: function addDetector(detector) {
        this.detectors[detector.name] = detector;
      }
    }, {
      key: "detect",
      value: function detect(req, res, detectionOrder) {
        var _this = this;
        if (arguments.length < 2)
          return;
        if (!detectionOrder)
          detectionOrder = this.options.order;
        var found;
        detectionOrder.forEach(function(detectorName) {
          if (found || !_this.detectors[detectorName])
            return;
          var detections = _this.detectors[detectorName].lookup(req, res, _this.options);
          if (!detections)
            return;
          if (!Array.isArray(detections))
            detections = [detections];
          detections = detections.filter(function(d) {
            return d !== void 0 && d !== null;
          });
          if (_this.services.languageUtils.getBestMatchFromCodes) {
            found = _this.services.languageUtils.getBestMatchFromCodes(detections);
            if (found) {
              if (_this.options.ignoreCase) {
                if (detections.map(function(d) {
                  return d.toLowerCase();
                }).indexOf(found.toLowerCase()) < 0)
                  found = void 0;
              } else {
                if (detections.indexOf(found) < 0)
                  found = void 0;
              }
            }
            if (found)
              req.i18nextLookupName = detectorName;
          } else {
            found = detections.length > 0 ? detections[0] : null;
          }
        });
        if (!found) {
          var fallbacks = this.allOptions.fallbackLng;
          if (typeof fallbacks === "function")
            fallbacks = fallbacks();
          if (typeof fallbacks === "string")
            fallbacks = [fallbacks];
          if (!fallbacks)
            fallbacks = [];
          if (Object.prototype.toString.apply(fallbacks) === "[object Array]") {
            found = fallbacks[0];
          } else {
            found = fallbacks[0] || fallbacks.default && fallbacks.default[0];
          }
        }
        return found;
      }
    }, {
      key: "cacheUserLanguage",
      value: function cacheUserLanguage(req, res, lng, caches) {
        var _this2 = this;
        if (arguments.length < 3)
          return;
        if (!caches)
          caches = this.options.caches;
        if (!caches)
          return;
        caches.forEach(function(cacheName) {
          if (_this2.detectors[cacheName] && _this2.detectors[cacheName].cacheUserLanguage && res.cachedUserLanguage !== lng) {
            _this2.detectors[cacheName].cacheUserLanguage(req, res, lng, _this2.options);
            res.cachedUserLanguage = lng;
          }
        });
      }
    }]);
    return LanguageDetector2;
  }();
  LanguageDetector$1.type = "languageDetector";
  var LanguageDetector = LanguageDetector$1;
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i2;
    for (i2 = 0; i2 < sourceKeys.length; i2++) {
      key = sourceKeys[i2];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function _typeof$2(o) {
    "@babel/helpers - typeof";
    return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$2(o);
  }
  function _toPrimitive(input, hint) {
    if (_typeof$2(input) !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (_typeof$2(res) !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof$2(key) === "symbol" ? key : String(key);
  }
  function _defineProperty$1(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _classCallCheck$1(instance2, Constructor) {
    if (!(instance2 instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties$1(target, props) {
    for (var i2 = 0; i2 < props.length; i2++) {
      var descriptor = props[i2];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
  }
  function _createClass$1(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties$1(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties$1(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  var matchHtmlEntity = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34|nbsp|#160|copy|#169|reg|#174|hellip|#8230|#x2F|#47);/g;
  var htmlEntities = {
    "&amp;": "&",
    "&#38;": "&",
    "&lt;": "<",
    "&#60;": "<",
    "&gt;": ">",
    "&#62;": ">",
    "&apos;": "'",
    "&#39;": "'",
    "&quot;": '"',
    "&#34;": '"',
    "&nbsp;": " ",
    "&#160;": " ",
    "&copy;": "©",
    "&#169;": "©",
    "&reg;": "®",
    "&#174;": "®",
    "&hellip;": "…",
    "&#8230;": "…",
    "&#x2F;": "/",
    "&#47;": "/"
  };
  var unescapeHtmlEntity = function unescapeHtmlEntity2(m2) {
    return htmlEntities[m2];
  };
  var unescape$1 = function unescape2(text) {
    return text.replace(matchHtmlEntity, unescapeHtmlEntity);
  };
  function ownKeys$8(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread$8(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2] != null ? arguments[i2] : {};
      if (i2 % 2) {
        ownKeys$8(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$8(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  var defaultOptions = {
    bindI18n: "languageChanged",
    bindI18nStore: "",
    transEmptyNodeValue: "",
    transSupportBasicHtmlNodes: true,
    transWrapTextNodes: "",
    transKeepBasicHtmlNodesFor: ["br", "strong", "i", "p"],
    useSuspense: true,
    unescape: unescape$1
  };
  var i18nInstance;
  var I18nContext = reactExports.createContext();
  function setDefaults() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    defaultOptions = _objectSpread$8(_objectSpread$8({}, defaultOptions), options);
  }
  function getDefaults$2() {
    return defaultOptions;
  }
  var ReportNamespaces = function() {
    function ReportNamespaces2() {
      _classCallCheck$1(this, ReportNamespaces2);
      this.usedNamespaces = {};
    }
    _createClass$1(ReportNamespaces2, [{
      key: "addUsedNamespaces",
      value: function addUsedNamespaces(namespaces) {
        var _this = this;
        namespaces.forEach(function(ns) {
          if (!_this.usedNamespaces[ns])
            _this.usedNamespaces[ns] = true;
        });
      }
    }, {
      key: "getUsedNamespaces",
      value: function getUsedNamespaces() {
        return Object.keys(this.usedNamespaces);
      }
    }]);
    return ReportNamespaces2;
  }();
  function setI18n(instance2) {
    i18nInstance = instance2;
  }
  function getI18n() {
    return i18nInstance;
  }
  var initReactI18next = {
    type: "3rdParty",
    init: function init2(instance2) {
      setDefaults(instance2.options.react);
      setI18n(instance2);
    }
  };
  function warn$2() {
    if (console && console.warn) {
      var _console;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if (typeof args[0] === "string")
        args[0] = "react-i18next:: ".concat(args[0]);
      (_console = console).warn.apply(_console, args);
    }
  }
  var alreadyWarned = {};
  function warnOnce() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    if (typeof args[0] === "string" && alreadyWarned[args[0]])
      return;
    if (typeof args[0] === "string")
      alreadyWarned[args[0]] = /* @__PURE__ */ new Date();
    warn$2.apply(void 0, args);
  }
  function loadNamespaces(i18n2, ns, cb) {
    i18n2.loadNamespaces(ns, function() {
      if (i18n2.isInitialized) {
        cb();
      } else {
        var initialized = function initialized2() {
          setTimeout(function() {
            i18n2.off("initialized", initialized2);
          }, 0);
          cb();
        };
        i18n2.on("initialized", initialized);
      }
    });
  }
  function oldI18nextHasLoadedNamespace(ns, i18n2) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var lng = i18n2.languages[0];
    var fallbackLng = i18n2.options ? i18n2.options.fallbackLng : false;
    var lastLng = i18n2.languages[i18n2.languages.length - 1];
    if (lng.toLowerCase() === "cimode")
      return true;
    var loadNotPending = function loadNotPending2(l2, n) {
      var loadState = i18n2.services.backendConnector.state["".concat(l2, "|").concat(n)];
      return loadState === -1 || loadState === 2;
    };
    if (options.bindI18n && options.bindI18n.indexOf("languageChanging") > -1 && i18n2.services.backendConnector.backend && i18n2.isLanguageChangingTo && !loadNotPending(i18n2.isLanguageChangingTo, ns))
      return false;
    if (i18n2.hasResourceBundle(lng, ns))
      return true;
    if (!i18n2.services.backendConnector.backend || i18n2.options.resources && !i18n2.options.partialBundledLanguages)
      return true;
    if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns)))
      return true;
    return false;
  }
  function hasLoadedNamespace(ns, i18n2) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    if (!i18n2.languages || !i18n2.languages.length) {
      warnOnce("i18n.languages were undefined or empty", i18n2.languages);
      return true;
    }
    var isNewerI18next = i18n2.options.ignoreJSONStructure !== void 0;
    if (!isNewerI18next) {
      return oldI18nextHasLoadedNamespace(ns, i18n2, options);
    }
    return i18n2.hasLoadedNamespace(ns, {
      precheck: function precheck(i18nInstance2, loadNotPending) {
        if (options.bindI18n && options.bindI18n.indexOf("languageChanging") > -1 && i18nInstance2.services.backendConnector.backend && i18nInstance2.isLanguageChangingTo && !loadNotPending(i18nInstance2.isLanguageChangingTo, ns))
          return false;
      }
    });
  }
  function _arrayWithHoles(arr2) {
    if (Array.isArray(arr2))
      return arr2;
  }
  function _iterableToArrayLimit(r2, l2) {
    var t = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
    if (null != t) {
      var e, n, i2, u, a = [], f = true, o = false;
      try {
        if (i2 = (t = t.call(r2)).next, 0 === l2) {
          if (Object(t) !== t)
            return;
          f = false;
        } else
          for (; !(f = (e = i2.call(t)).done) && (a.push(e.value), a.length !== l2); f = true)
            ;
      } catch (r3) {
        o = true, n = r3;
      } finally {
        try {
          if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u))
            return;
        } finally {
          if (o)
            throw n;
        }
      }
      return a;
    }
  }
  function _arrayLikeToArray(arr2, len) {
    if (len == null || len > arr2.length)
      len = arr2.length;
    for (var i2 = 0, arr22 = new Array(len); i2 < len; i2++)
      arr22[i2] = arr2[i2];
    return arr22;
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _slicedToArray(arr2, i2) {
    return _arrayWithHoles(arr2) || _iterableToArrayLimit(arr2, i2) || _unsupportedIterableToArray(arr2, i2) || _nonIterableRest();
  }
  function ownKeys$7(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread$7(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2] != null ? arguments[i2] : {};
      if (i2 % 2) {
        ownKeys$7(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$7(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  var usePrevious = function usePrevious2(value, ignore) {
    var ref = reactExports.useRef();
    reactExports.useEffect(function() {
      ref.current = ignore ? ref.current : value;
    }, [value, ignore]);
    return ref.current;
  };
  function useTranslation$1(ns) {
    var props = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var i18nFromProps = props.i18n;
    var _ref = reactExports.useContext(I18nContext) || {}, i18nFromContext = _ref.i18n, defaultNSFromContext = _ref.defaultNS;
    var i18n2 = i18nFromProps || i18nFromContext || getI18n();
    if (i18n2 && !i18n2.reportNamespaces)
      i18n2.reportNamespaces = new ReportNamespaces();
    if (!i18n2) {
      warnOnce("You will need to pass in an i18next instance by using initReactI18next");
      var notReadyT = function notReadyT2(k) {
        return Array.isArray(k) ? k[k.length - 1] : k;
      };
      var retNotReady = [notReadyT, {}, false];
      retNotReady.t = notReadyT;
      retNotReady.i18n = {};
      retNotReady.ready = false;
      return retNotReady;
    }
    if (i18n2.options.react && i18n2.options.react.wait !== void 0)
      warnOnce("It seems you are still using the old wait option, you may migrate to the new useSuspense behaviour.");
    var i18nOptions = _objectSpread$7(_objectSpread$7(_objectSpread$7({}, getDefaults$2()), i18n2.options.react), props);
    var useSuspense = i18nOptions.useSuspense, keyPrefix = i18nOptions.keyPrefix;
    var namespaces = ns || defaultNSFromContext || i18n2.options && i18n2.options.defaultNS;
    namespaces = typeof namespaces === "string" ? [namespaces] : namespaces || ["translation"];
    if (i18n2.reportNamespaces.addUsedNamespaces)
      i18n2.reportNamespaces.addUsedNamespaces(namespaces);
    var ready2 = (i18n2.isInitialized || i18n2.initializedStoreOnce) && namespaces.every(function(n) {
      return hasLoadedNamespace(n, i18n2, i18nOptions);
    });
    function getT() {
      return i18n2.getFixedT(null, i18nOptions.nsMode === "fallback" ? namespaces : namespaces[0], keyPrefix);
    }
    var _useState = reactExports.useState(getT), _useState2 = _slicedToArray(_useState, 2), t = _useState2[0], setT = _useState2[1];
    var joinedNS = namespaces.join();
    var previousJoinedNS = usePrevious(joinedNS);
    var isMounted = reactExports.useRef(true);
    reactExports.useEffect(function() {
      var bindI18n = i18nOptions.bindI18n, bindI18nStore = i18nOptions.bindI18nStore;
      isMounted.current = true;
      if (!ready2 && !useSuspense) {
        loadNamespaces(i18n2, namespaces, function() {
          if (isMounted.current)
            setT(getT);
        });
      }
      if (ready2 && previousJoinedNS && previousJoinedNS !== joinedNS && isMounted.current) {
        setT(getT);
      }
      function boundReset() {
        if (isMounted.current)
          setT(getT);
      }
      if (bindI18n && i18n2)
        i18n2.on(bindI18n, boundReset);
      if (bindI18nStore && i18n2)
        i18n2.store.on(bindI18nStore, boundReset);
      return function() {
        isMounted.current = false;
        if (bindI18n && i18n2)
          bindI18n.split(" ").forEach(function(e) {
            return i18n2.off(e, boundReset);
          });
        if (bindI18nStore && i18n2)
          bindI18nStore.split(" ").forEach(function(e) {
            return i18n2.store.off(e, boundReset);
          });
      };
    }, [i18n2, joinedNS]);
    var isInitial = reactExports.useRef(true);
    reactExports.useEffect(function() {
      if (isMounted.current && !isInitial.current) {
        setT(getT);
      }
      isInitial.current = false;
    }, [i18n2, keyPrefix]);
    var ret = [t, i18n2, ready2];
    ret.t = t;
    ret.i18n = i18n2;
    ret.ready = ready2;
    if (ready2)
      return ret;
    if (!ready2 && !useSuspense)
      return ret;
    throw new Promise(function(resolve) {
      loadNamespaces(i18n2, namespaces, function() {
        resolve();
      });
    });
  }
  function evaluateThis$5(fn) {
    return fn("return this");
  }
  const xglobal$5 = typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : evaluateThis$5(Function);
  function extractGlobal$3(name, fallback) {
    return typeof xglobal$5[name] === "undefined" ? fallback : xglobal$5[name];
  }
  let TextDecoder$2 = class TextDecoder {
    constructor(encoding) {
      this.__encoding = encoding;
    }
    decode(value) {
      let result = "";
      for (let i2 = 0, count = value.length; i2 < count; i2++) {
        result += String.fromCharCode(value[i2]);
      }
      return result;
    }
  };
  const packageInfo$3 = { name: "@polkadot/x-textdecoder", path: { url: _documentCurrentScript && _documentCurrentScript.src || new URL("procaptcha.bundle.js", document.baseURI).href } && (_documentCurrentScript && _documentCurrentScript.src || new URL("procaptcha.bundle.js", document.baseURI).href) ? new URL(_documentCurrentScript && _documentCurrentScript.src || new URL("procaptcha.bundle.js", document.baseURI).href).pathname.substring(0, new URL(_documentCurrentScript && _documentCurrentScript.src || new URL("procaptcha.bundle.js", document.baseURI).href).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.3.2" };
  const TextDecoder$1 = /* @__PURE__ */ extractGlobal$3("TextDecoder", TextDecoder$2);
  function evaluateThis$4(fn) {
    return fn("return this");
  }
  const xglobal$4 = typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : evaluateThis$4(Function);
  function extractGlobal$2(name, fallback) {
    return typeof xglobal$4[name] === "undefined" ? fallback : xglobal$4[name];
  }
  let TextEncoder$2 = class TextEncoder {
    encode(value) {
      const count = value.length;
      const u8a2 = new Uint8Array(count);
      for (let i2 = 0; i2 < count; i2++) {
        u8a2[i2] = value.charCodeAt(i2);
      }
      return u8a2;
    }
  };
  const packageInfo$2 = { name: "@polkadot/x-textencoder", path: { url: _documentCurrentScript && _documentCurrentScript.src || new URL("procaptcha.bundle.js", document.baseURI).href } && (_documentCurrentScript && _documentCurrentScript.src || new URL("procaptcha.bundle.js", document.baseURI).href) ? new URL(_documentCurrentScript && _documentCurrentScript.src || new URL("procaptcha.bundle.js", document.baseURI).href).pathname.substring(0, new URL(_documentCurrentScript && _documentCurrentScript.src || new URL("procaptcha.bundle.js", document.baseURI).href).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.3.2" };
  const TextEncoder$1 = /* @__PURE__ */ extractGlobal$2("TextEncoder", TextEncoder$2);
  const others = [packageInfo$3, packageInfo$2];
  const packageInfo$1 = { name: "@polkadot/util", path: { url: _documentCurrentScript && _documentCurrentScript.src || new URL("procaptcha.bundle.js", document.baseURI).href } && (_documentCurrentScript && _documentCurrentScript.src || new URL("procaptcha.bundle.js", document.baseURI).href) ? new URL(_documentCurrentScript && _documentCurrentScript.src || new URL("procaptcha.bundle.js", document.baseURI).href).pathname.substring(0, new URL(_documentCurrentScript && _documentCurrentScript.src || new URL("procaptcha.bundle.js", document.baseURI).href).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.3.2" };
  function evaluateThis$3(fn) {
    return fn("return this");
  }
  const xglobal$3 = typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : evaluateThis$3(Function);
  function extractGlobal$1(name, fallback) {
    return typeof xglobal$3[name] === "undefined" ? fallback : xglobal$3[name];
  }
  function isFunction$2(value) {
    return typeof value === "function";
  }
  const DEDUPE = "Either remove and explicitly install matching versions or dedupe using your package manager.\nThe following conflicting packages were found:";
  function getEntry(name) {
    const _global = xglobal$3;
    if (!_global.__polkadotjs) {
      _global.__polkadotjs = {};
    }
    if (!_global.__polkadotjs[name]) {
      _global.__polkadotjs[name] = [];
    }
    return _global.__polkadotjs[name];
  }
  function formatDisplay(all2, fmt) {
    let max2 = 0;
    for (let i2 = 0, count = all2.length; i2 < count; i2++) {
      max2 = Math.max(max2, all2[i2].version.length);
    }
    return all2.map((d) => `	${fmt(d.version.padEnd(max2), d).join("	")}`).join("\n");
  }
  function formatInfo(version2, { name }) {
    return [
      version2,
      name
    ];
  }
  function formatVersion(version2, { path: path2, type }) {
    let extracted;
    if (path2 && path2.length >= 5) {
      const nmIndex = path2.indexOf("node_modules");
      extracted = nmIndex === -1 ? path2 : path2.substring(nmIndex);
    } else {
      extracted = "<unknown>";
    }
    return [
      `${`${type || ""}`.padStart(3)} ${version2}`,
      extracted
    ];
  }
  function getPath$2(infoPath, pathOrFn) {
    if (infoPath) {
      return infoPath;
    } else if (isFunction$2(pathOrFn)) {
      try {
        return pathOrFn() || "";
      } catch {
        return "";
      }
    }
    return pathOrFn || "";
  }
  function warn$1(pre, all2, fmt) {
    console.warn(`${pre}
${DEDUPE}
${formatDisplay(all2, fmt)}`);
  }
  function detectPackage({ name, path: path2, type, version: version2 }, pathOrFn, deps = []) {
    if (!name.startsWith("@polkadot")) {
      throw new Error(`Invalid package descriptor ${name}`);
    }
    const entry = getEntry(name);
    entry.push({ path: getPath$2(path2, pathOrFn), type, version: version2 });
    if (entry.length !== 1) {
      warn$1(`${name} has multiple versions, ensure that there is only one installed.`, entry, formatVersion);
    } else {
      const mismatches = deps.filter((d) => d && d.version !== version2);
      if (mismatches.length) {
        warn$1(`${name} requires direct dependencies exactly matching version ${version2}.`, mismatches, formatInfo);
      }
    }
  }
  detectPackage(packageInfo$1, null, others);
  function arrayChunk(array, chunkSize) {
    const outputSize = Math.ceil(array.length / chunkSize);
    if (outputSize === 1) {
      return [array];
    }
    const output2 = Array(outputSize);
    for (let i2 = 0; i2 < outputSize; i2++) {
      const offset = i2 * chunkSize;
      output2[i2] = array.slice(offset, offset + chunkSize);
    }
    return output2;
  }
  function arrayFilter(array, allowNulls = true) {
    return array.filter((v) => v !== void 0 && (allowNulls || v !== null));
  }
  function arrayFlatten(arrays) {
    const num = arrays.length;
    if (num === 0) {
      return [];
    } else if (num === 1) {
      return arrays[0];
    }
    let size = 0;
    for (let i3 = 0; i3 < num; i3++) {
      size += arrays[i3].length;
    }
    const output2 = new Array(size);
    let i2 = -1;
    for (let j = 0; j < num; j++) {
      const a = arrays[j];
      for (let e = 0, count = a.length; e < count; e++) {
        output2[++i2] = a[e];
      }
    }
    return output2;
  }
  function arrayRange(size, startAt = 0) {
    if (size <= 0) {
      throw new Error("Expected non-zero, positive number as a range size");
    }
    const result = new Array(size);
    for (let i2 = 0; i2 < size; i2++) {
      result[i2] = i2 + startAt;
    }
    return result;
  }
  function arrayShuffle(input) {
    const result = input.slice();
    let curr = result.length;
    if (curr === 1) {
      return result;
    }
    while (curr !== 0) {
      const rand = ~~(Math.random() * curr);
      curr--;
      [result[curr], result[rand]] = [result[rand], result[curr]];
    }
    return result;
  }
  function arrayUnzip(entries) {
    const count = entries.length;
    const keys2 = new Array(count);
    const values2 = new Array(count);
    for (let i2 = 0; i2 < count; i2++) {
      [keys2[i2], values2[i2]] = entries[i2];
    }
    return [keys2, values2];
  }
  function arrayZip(keys2, values2) {
    const count = keys2.length;
    const result = new Array(count);
    for (let i2 = 0; i2 < count; i2++) {
      result[i2] = [keys2[i2], values2[i2]];
    }
    return result;
  }
  function assert$1(condition, message) {
    if (!condition) {
      throw new Error(isFunction$2(message) ? message() : message);
    }
  }
  function assertReturn(value, message) {
    assert$1(value !== void 0 && value !== null, message);
    return value;
  }
  function assertUnreachable(x) {
    throw new Error(`This codepath should be unreachable. Unhandled input: ${x}`);
  }
  function createCmp(cmp) {
    return (...items) => {
      const count = items.length;
      if (count === 0) {
        throw new Error("Must provide one or more arguments");
      }
      let result = items[0];
      for (let i2 = 1; i2 < count; i2++) {
        if (cmp(items[i2], result)) {
          result = items[i2];
        }
      }
      return result;
    };
  }
  const nMax = /* @__PURE__ */ createCmp((a, b) => a > b);
  const nMin = /* @__PURE__ */ createCmp((a, b) => a < b);
  function invalidFallback$1() {
    return Number.NaN;
  }
  const BigInt$2 = /* @__PURE__ */ extractGlobal$1("BigInt", invalidFallback$1);
  const _0n$6 = /* @__PURE__ */ BigInt$2(0);
  const _1n$8 = /* @__PURE__ */ BigInt$2(1);
  const _2n$6 = /* @__PURE__ */ BigInt$2(2);
  const _3n$2 = /* @__PURE__ */ BigInt$2(3);
  const _4n$1 = /* @__PURE__ */ BigInt$2(4);
  const _5n$2 = /* @__PURE__ */ BigInt$2(5);
  const _6n = /* @__PURE__ */ BigInt$2(6);
  const _7n$2 = /* @__PURE__ */ BigInt$2(7);
  const _8n$2 = /* @__PURE__ */ BigInt$2(8);
  const _9n = /* @__PURE__ */ BigInt$2(9);
  const _10n$1 = /* @__PURE__ */ BigInt$2(10);
  const _100n = /* @__PURE__ */ BigInt$2(100);
  const _1000n = /* @__PURE__ */ BigInt$2(1e3);
  const _1Mn = /* @__PURE__ */ BigInt$2(1e6);
  const _1Bn = /* @__PURE__ */ BigInt$2(1e9);
  const _1Qn = _1Bn * _1Bn;
  const _2pow53n = /* @__PURE__ */ BigInt$2(Number.MAX_SAFE_INTEGER);
  const _sqrt2pow53n = /* @__PURE__ */ BigInt$2(94906265);
  const U8_MAX = BigInt$2(256);
  const U16_MAX = BigInt$2(256 * 256);
  const U64_MAX = BigInt$2("0x10000000000000000");
  function u8aToBigInt(value, { isLe = true, isNegative = false } = {}) {
    const u8a2 = isLe ? value : value.slice().reverse();
    const count = u8a2.length;
    if (isNegative) {
      switch (count) {
        case 0:
          return BigInt$2(0);
        case 1:
          return BigInt$2((u8a2[0] ^ 255) * -1 - 1);
        case 2:
          return BigInt$2((u8a2[0] + (u8a2[1] << 8) ^ 65535) * -1 - 1);
        case 4:
          return BigInt$2((u8a2[0] + (u8a2[1] << 8) + (u8a2[2] << 16) + u8a2[3] * 16777216 ^ 4294967295) * -1 - 1);
      }
      const dvI2 = new DataView(u8a2.buffer, u8a2.byteOffset);
      if (count === 8) {
        return dvI2.getBigInt64(0, true);
      }
      let result = BigInt$2(0);
      const mod2 = count % 2;
      for (let i2 = count - 2; i2 >= mod2; i2 -= 2) {
        result = result * U16_MAX + BigInt$2(dvI2.getUint16(i2, true) ^ 65535);
      }
      if (mod2) {
        result = result * U8_MAX + BigInt$2(u8a2[0] ^ 255);
      }
      return result * -_1n$8 - _1n$8;
    }
    switch (count) {
      case 0:
        return BigInt$2(0);
      case 1:
        return BigInt$2(u8a2[0]);
      case 2:
        return BigInt$2(u8a2[0] + (u8a2[1] << 8));
      case 4:
        return BigInt$2(u8a2[0] + (u8a2[1] << 8) + (u8a2[2] << 16) + u8a2[3] * 16777216);
    }
    const dvI = new DataView(u8a2.buffer, u8a2.byteOffset);
    switch (count) {
      case 8:
        return dvI.getBigUint64(0, true);
      case 16:
        return dvI.getBigUint64(8, true) * U64_MAX + dvI.getBigUint64(0, true);
      default: {
        let result = BigInt$2(0);
        const mod2 = count % 2;
        for (let i2 = count - 2; i2 >= mod2; i2 -= 2) {
          result = result * U16_MAX + BigInt$2(dvI.getUint16(i2, true));
        }
        if (mod2) {
          result = result * U8_MAX + BigInt$2(u8a2[0]);
        }
        return result;
      }
    }
  }
  const CHR = "0123456789abcdef";
  const U8$1 = new Uint8Array(256);
  const U16$1 = new Uint8Array(256 * 256);
  for (let i2 = 0, count = CHR.length; i2 < count; i2++) {
    U8$1[CHR[i2].charCodeAt(0) | 0] = i2 | 0;
    if (i2 > 9) {
      U8$1[CHR[i2].toUpperCase().charCodeAt(0) | 0] = i2 | 0;
    }
  }
  for (let i2 = 0; i2 < 256; i2++) {
    const s = i2 << 8;
    for (let j = 0; j < 256; j++) {
      U16$1[s | j] = U8$1[i2] << 4 | U8$1[j];
    }
  }
  function hexToU8a(value, bitLength = -1) {
    if (!value) {
      return new Uint8Array();
    }
    let s = value.startsWith("0x") ? 2 : 0;
    const decLength = Math.ceil((value.length - s) / 2);
    const endLength = Math.ceil(bitLength === -1 ? decLength : bitLength / 8);
    const result = new Uint8Array(endLength);
    const offset = endLength > decLength ? endLength - decLength : 0;
    for (let i2 = offset; i2 < endLength; i2++, s += 2) {
      result[i2] = U16$1[value.charCodeAt(s) << 8 | value.charCodeAt(s + 1)];
    }
    return result;
  }
  function hexToBigInt(value, { isLe = false, isNegative = false } = {}) {
    return !value || value === "0x" ? BigInt$2(0) : u8aToBigInt(hexToU8a(value), { isLe, isNegative });
  }
  var bn = { exports: {} };
  (function(module2) {
    (function(module3, exports2) {
      function assert2(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits2(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN2(number2, base, endian) {
        if (BN2.isBN(number2)) {
          return number2;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number2 !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number2 || 0, base || 10, endian || "be");
        }
      }
      if (typeof module3 === "object") {
        module3.exports = BN2;
      } else {
        exports2.BN = BN2;
      }
      BN2.BN = BN2;
      BN2.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require("buffer").Buffer;
        }
      } catch (e) {
      }
      BN2.isBN = function isBN(num) {
        if (num instanceof BN2) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN2.wordSize && Array.isArray(num.words);
      };
      BN2.max = function max2(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN2.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN2.prototype._init = function init2(number2, base, endian) {
        if (typeof number2 === "number") {
          return this._initNumber(number2, base, endian);
        }
        if (typeof number2 === "object") {
          return this._initArray(number2, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert2(base === (base | 0) && base >= 2 && base <= 36);
        number2 = number2.toString().replace(/\s+/g, "");
        var start = 0;
        if (number2[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number2.length) {
          if (base === 16) {
            this._parseHex(number2, start, endian);
          } else {
            this._parseBase(number2, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN2.prototype._initNumber = function _initNumber(number2, base, endian) {
        if (number2 < 0) {
          this.negative = 1;
          number2 = -number2;
        }
        if (number2 < 67108864) {
          this.words = [number2 & 67108863];
          this.length = 1;
        } else if (number2 < 4503599627370496) {
          this.words = [
            number2 & 67108863,
            number2 / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number2 < 9007199254740992);
          this.words = [
            number2 & 67108863,
            number2 / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN2.prototype._initArray = function _initArray(number2, base, endian) {
        assert2(typeof number2.length === "number");
        if (number2.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number2.length / 3);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i2 = number2.length - 1, j = 0; i2 >= 0; i2 -= 3) {
            w = number2[i2] | number2[i2 - 1] << 8 | number2[i2 - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i2 = 0, j = 0; i2 < number2.length; i2 += 3) {
            w = number2[i2] | number2[i2 + 1] << 8 | number2[i2 + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string, index2) {
        var c = string.charCodeAt(index2);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert2(false, "Invalid character in " + string);
        }
      }
      function parseHexByte(string, lowerBound, index2) {
        var r2 = parseHex4Bits(string, index2);
        if (index2 - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string, index2 - 1) << 4;
        }
        return r2;
      }
      BN2.prototype._parseHex = function _parseHex(number2, start, endian) {
        this.length = Math.ceil((number2.length - start) / 6);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i2 = number2.length - 1; i2 >= start; i2 -= 2) {
            w = parseHexByte(number2, start, i2) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number2.length - start;
          for (i2 = parseLength % 2 === 0 ? start + 1 : start; i2 < number2.length; i2 += 2) {
            w = parseHexByte(number2, start, i2) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r2 = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i2 = start; i2 < len; i2++) {
          var c = str.charCodeAt(i2) - 48;
          r2 *= mul;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert2(c >= 0 && b < mul, "Invalid character");
          r2 += b;
        }
        return r2;
      }
      BN2.prototype._parseBase = function _parseBase(number2, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number2.length - start;
        var mod2 = total % limbLen;
        var end = Math.min(total, total - mod2) + start;
        var word = 0;
        for (var i2 = start; i2 < end; i2 += limbLen) {
          word = parseBase(number2, i2, i2 + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod2 !== 0) {
          var pow3 = 1;
          word = parseBase(number2, i2, number2.length, base);
          for (i2 = 0; i2 < mod2; i2++) {
            pow3 *= base;
          }
          this.imuln(pow3);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN2.prototype.copy = function copy2(dest) {
        dest.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          dest.words[i2] = this.words[i2];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src2) {
        dest.words = src2.words;
        dest.length = src2.length;
        dest.negative = src2.negative;
        dest.red = src2.red;
      }
      BN2.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN2.prototype.clone = function clone() {
        var r2 = new BN2(null);
        this.copy(r2);
        return r2;
      };
      BN2.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN2.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN2.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN2.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
        } catch (e) {
          BN2.prototype.inspect = inspect;
        }
      } else {
        BN2.prototype.inspect = inspect;
      }
      function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN2.prototype.toString = function toString2(base, padding2) {
        base = base || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i2 = 0; i2 < this.length; i2++) {
            var w = this.words[i2];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i2--;
            }
            if (carry !== 0 || i2 !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r2 = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN2.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN2.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
      };
      if (Buffer2) {
        BN2.prototype.toBuffer = function toBuffer(endian, length2) {
          return this.toArrayLike(Buffer2, endian, length2);
        };
      }
      BN2.prototype.toArray = function toArray2(endian, length2) {
        return this.toArrayLike(Array, endian, length2);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN2.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length2) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length2 || Math.max(1, byteLength);
        assert2(byteLength <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN2.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position2 = 0;
        var carry = 0;
        for (var i2 = 0, shift = 0; i2 < this.length; i2++) {
          var word = this.words[i2] << shift | carry;
          res[position2++] = word & 255;
          if (position2 < res.length) {
            res[position2++] = word >> 8 & 255;
          }
          if (position2 < res.length) {
            res[position2++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position2 < res.length) {
              res[position2++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position2 < res.length) {
          res[position2++] = carry;
          while (position2 < res.length) {
            res[position2++] = 0;
          }
        }
      };
      BN2.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position2 = res.length - 1;
        var carry = 0;
        for (var i2 = 0, shift = 0; i2 < this.length; i2++) {
          var word = this.words[i2] << shift | carry;
          res[position2--] = word & 255;
          if (position2 >= 0) {
            res[position2--] = word >> 8 & 255;
          }
          if (position2 >= 0) {
            res[position2--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position2 >= 0) {
              res[position2--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position2 >= 0) {
          res[position2--] = carry;
          while (position2 >= 0) {
            res[position2--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN2.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN2.prototype._countBits = function _countBits(w) {
          var t = w;
          var r2 = 0;
          if (t >= 4096) {
            r2 += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r2 += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r2 += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r2 += 2;
            t >>>= 2;
          }
          return r2 + t;
        };
      }
      BN2.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r2 = 0;
        if ((t & 8191) === 0) {
          r2 += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r2 += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r2 += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r2 += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN2.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN2.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r2 = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var b = this._zeroBits(this.words[i2]);
          r2 += b;
          if (b !== 26)
            break;
        }
        return r2;
      };
      BN2.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN2.prototype.toTwos = function toTwos(width2) {
        if (this.negative !== 0) {
          return this.abs().inotn(width2).iaddn(1);
        }
        return this.clone();
      };
      BN2.prototype.fromTwos = function fromTwos(width2) {
        if (this.testn(width2 - 1)) {
          return this.notn(width2).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN2.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN2.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN2.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN2.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i2 = 0; i2 < num.length; i2++) {
          this.words[i2] = this.words[i2] | num.words[i2];
        }
        return this._strip();
      };
      BN2.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN2.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN2.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN2.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i2 = 0; i2 < b.length; i2++) {
          this.words[i2] = this.words[i2] & num.words[i2];
        }
        this.length = b.length;
        return this._strip();
      };
      BN2.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN2.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN2.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN2.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i2 = 0; i2 < b.length; i2++) {
          this.words[i2] = a.words[i2] ^ b.words[i2];
        }
        if (this !== a) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN2.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN2.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN2.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN2.prototype.inotn = function inotn(width2) {
        assert2(typeof width2 === "number" && width2 >= 0);
        var bytesNeeded = Math.ceil(width2 / 26) | 0;
        var bitsLeft = width2 % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i2 = 0; i2 < bytesNeeded; i2++) {
          this.words[i2] = ~this.words[i2] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i2] = ~this.words[i2] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN2.prototype.notn = function notn(width2) {
        return this.clone().inotn(width2);
      };
      BN2.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN2.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b.length; i2++) {
          r2 = (a.words[i2] | 0) + (b.words[i2] | 0) + carry;
          this.words[i2] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i2 < a.length; i2++) {
          r2 = (a.words[i2] | 0) + carry;
          this.words[i2] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        return this;
      };
      BN2.prototype.add = function add2(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN2.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b.length; i2++) {
          r2 = (a.words[i2] | 0) - (b.words[i2] | 0) + carry;
          carry = r2 >> 26;
          this.words[i2] = r2 & 67108863;
        }
        for (; carry !== 0 && i2 < a.length; i2++) {
          r2 = (a.words[i2] | 0) + carry;
          carry = r2 >> 26;
          this.words[i2] = r2 & 67108863;
        }
        if (carry === 0 && i2 < a.length && a !== this) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        this.length = Math.max(this.length, i2);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN2.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r2 = a * b;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i2 = k - j | 0;
            a = self2.words[i2] | 0;
            b = num.words[j] | 0;
            r2 = a * b + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i2 = k - j;
            var a = self2.words[i2] | 0;
            var b = num.words[j] | 0;
            var r2 = a * b;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN2.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      BN2.prototype.mul = function mul(num) {
        var out = new BN2(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN2.prototype.mulf = function mulf(num) {
        var out = new BN2(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN2.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN2.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var w = (this.words[i2] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i2] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN2.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN2.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN2.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN2.prototype.pow = function pow3(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN2(1);
        var res = this;
        for (var i2 = 0; i2 < w.length; i2++, res = res.sqr()) {
          if (w[i2] !== 0)
            break;
        }
        if (++i2 < w.length) {
          for (var q = res.sqr(); i2 < w.length; i2++, q = q.sqr()) {
            if (w[i2] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN2.prototype.iushln = function iushln(bits2) {
        assert2(typeof bits2 === "number" && bits2 >= 0);
        var r2 = bits2 % 26;
        var s = (bits2 - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i2;
        if (r2 !== 0) {
          var carry = 0;
          for (i2 = 0; i2 < this.length; i2++) {
            var newCarry = this.words[i2] & carryMask;
            var c = (this.words[i2] | 0) - newCarry << r2;
            this.words[i2] = c | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i2] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i2 = this.length - 1; i2 >= 0; i2--) {
            this.words[i2 + s] = this.words[i2];
          }
          for (i2 = 0; i2 < s; i2++) {
            this.words[i2] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN2.prototype.ishln = function ishln(bits2) {
        assert2(this.negative === 0);
        return this.iushln(bits2);
      };
      BN2.prototype.iushrn = function iushrn(bits2, hint, extended) {
        assert2(typeof bits2 === "number" && bits2 >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r2 = bits2 % 26;
        var s = Math.min((bits2 - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i2 = 0; i2 < s; i2++) {
            maskedWords.words[i2] = this.words[i2];
          }
          maskedWords.length = s;
        }
        if (s === 0)
          ;
        else if (this.length > s) {
          this.length -= s;
          for (i2 = 0; i2 < this.length; i2++) {
            this.words[i2] = this.words[i2 + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i2 = this.length - 1; i2 >= 0 && (carry !== 0 || i2 >= h); i2--) {
          var word = this.words[i2] | 0;
          this.words[i2] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN2.prototype.ishrn = function ishrn(bits2, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits2, hint, extended);
      };
      BN2.prototype.shln = function shln(bits2) {
        return this.clone().ishln(bits2);
      };
      BN2.prototype.ushln = function ushln(bits2) {
        return this.clone().iushln(bits2);
      };
      BN2.prototype.shrn = function shrn(bits2) {
        return this.clone().ishrn(bits2);
      };
      BN2.prototype.ushrn = function ushrn(bits2) {
        return this.clone().iushrn(bits2);
      };
      BN2.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN2.prototype.imaskn = function imaskn(bits2) {
        assert2(typeof bits2 === "number" && bits2 >= 0);
        var r2 = bits2 % 26;
        var s = (bits2 - r2) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r2 !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN2.prototype.maskn = function maskn(bits2) {
        return this.clone().imaskn(bits2);
      };
      BN2.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN2.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i2 = 0; i2 < this.length && this.words[i2] >= 67108864; i2++) {
          this.words[i2] -= 67108864;
          if (i2 === this.length - 1) {
            this.words[i2 + 1] = 1;
          } else {
            this.words[i2 + 1]++;
          }
        }
        this.length = Math.max(this.length, i2 + 1);
        return this;
      };
      BN2.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i2 = 0; i2 < this.length && this.words[i2] < 0; i2++) {
            this.words[i2] += 67108864;
            this.words[i2 + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN2.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN2.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN2.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN2.prototype.abs = function abs2() {
        return this.clone().iabs();
      };
      BN2.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i2;
        this._expand(len);
        var w;
        var carry = 0;
        for (i2 = 0; i2 < num.length; i2++) {
          w = (this.words[i2 + shift] | 0) + carry;
          var right = (num.words[i2] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i2 + shift] = w & 67108863;
        }
        for (; i2 < this.length - shift; i2++) {
          w = (this.words[i2 + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i2 + shift] = w & 67108863;
        }
        if (carry === 0)
          return this._strip();
        assert2(carry === -1);
        carry = 0;
        for (i2 = 0; i2 < this.length; i2++) {
          w = -(this.words[i2] | 0) + carry;
          carry = w >> 26;
          this.words[i2] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN2.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m2 = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN2(null);
          q.length = m2 + 1;
          q.words = new Array(q.length);
          for (var i2 = 0; i2 < q.length; i2++) {
            q.words[i2] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m2);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m2] = 1;
          }
        }
        for (var j = m2 - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN2.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN2(0),
            mod: new BN2(0)
          };
        }
        var div, mod2, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.iadd(num);
            }
          }
          return {
            div,
            mod: mod2
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.isub(num);
            }
          }
          return {
            div: res.div,
            mod: mod2
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN2(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN2(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN2(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN2.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN2.prototype.mod = function mod2(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN2.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN2.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod2 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod2.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN2.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert2(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          acc = (p * acc + (this.words[i2] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN2.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN2.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert2(num <= 67108863);
        var carry = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var w = (this.words[i2] | 0) + carry * 67108864;
          this.words[i2] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN2.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN2.prototype.egcd = function egcd(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN2(1);
        var B = new BN2(0);
        var C = new BN2(0);
        var D = new BN2(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i2 = 0, im = 1; (x.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1)
            ;
          if (i2 > 0) {
            x.iushrn(i2);
            while (i2-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN2.prototype._invmp = function _invmp(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN2(1);
        var x2 = new BN2(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i2 = 0, im = 1; (a.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1)
            ;
          if (i2 > 0) {
            a.iushrn(i2);
            while (i2-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN2.prototype.gcd = function gcd2(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r2 = a.cmp(b);
          if (r2 < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r2 === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN2.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN2.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN2.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN2.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN2.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i2 = s; carry !== 0 && i2 < this.length; i2++) {
          var w = this.words[i2] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i2] = w;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return this;
      };
      BN2.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN2.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN2.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN2.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var a = this.words[i2] | 0;
          var b = num.words[i2] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN2.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN2.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN2.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN2.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN2.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN2.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN2.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN2.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN2.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN2.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN2.red = function red2(num) {
        return new Red(num);
      };
      BN2.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN2.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN2.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN2.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN2.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN2.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN2.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN2.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN2.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN2.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN2.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN2.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN2.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN2.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN2.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN2.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN2.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN2(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN2(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN2(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split2(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits2(K256, MPrime);
      K256.prototype.split = function split2(input, output2) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i2 = 0; i2 < outLen; i2++) {
          output2.words[i2] = input.words[i2];
        }
        output2.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev2 = input.words[9];
        output2.words[output2.length++] = prev2 & mask;
        for (i2 = 10; i2 < input.length; i2++) {
          var next2 = input.words[i2] | 0;
          input.words[i2 - 10] = (next2 & mask) << 4 | prev2 >>> 22;
          prev2 = next2;
        }
        prev2 >>>= 22;
        input.words[i2 - 10] = prev2;
        if (prev2 === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var w = num.words[i2] | 0;
          lo += w * 977;
          num.words[i2] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits2(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits2(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits2(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var hi = (num.words[i2] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i2] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN2._prime = function prime2(name) {
        if (primes[name])
          return primes[name];
        var prime3;
        if (name === "k256") {
          prime3 = new K256();
        } else if (name === "p224") {
          prime3 = new P224();
        } else if (name === "p192") {
          prime3 = new P192();
        } else if (name === "p25519") {
          prime3 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime3;
        return prime3;
      };
      function Red(m2) {
        if (typeof m2 === "string") {
          var prime2 = BN2._prime(m2);
          this.m = prime2.p;
          this.prime = prime2;
        } else {
          assert2(m2.gtn(1), "modulus must be greater than 1");
          this.m = m2;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert2(a.negative === 0, "red works only with positives");
        assert2(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert2((a.negative | b.negative) === 0, "red works only with positives");
        assert2(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add2(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow3 = this.m.add(new BN2(1)).iushrn(2);
          return this.pow(a, pow3);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert2(!q.isZero());
        var one = new BN2(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z2 = this.m.bitLength();
        z2 = new BN2(2 * z2 * z2).toRed(this);
        while (this.pow(z2, lpow).cmp(nOne) !== 0) {
          z2.redIAdd(nOne);
        }
        var c = this.pow(z2, q);
        var r2 = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m2 = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i2 = 0; tmp.cmp(one) !== 0; i2++) {
            tmp = tmp.redSqr();
          }
          assert2(i2 < m2);
          var b = this.pow(c, new BN2(1).iushln(m2 - i2 - 1));
          r2 = r2.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m2 = i2;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow3(a, num) {
        if (num.isZero())
          return new BN2(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN2(1).toRed(this);
        wnd[1] = a;
        for (var i2 = 2; i2 < wnd.length; i2++) {
          wnd[i2] = this.mul(wnd[i2 - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i2 = num.length - 1; i2 >= 0; i2--) {
          var word = num.words[i2];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i2 !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN2.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m2) {
        Red.call(this, m2);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN2(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits2(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
          return new BN2(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module2, commonjsGlobal);
  })(bn);
  var bnExports = bn.exports;
  const BN = /* @__PURE__ */ getDefaultExportFromCjs(bnExports);
  function isBn(value) {
    return BN.isBN(value);
  }
  const REGEX_HEX_PREFIXED = /^0x[\da-fA-F]+$/;
  const REGEX_HEX_NOPREFIX = /^[\da-fA-F]+$/;
  function isHex(value, bitLength = -1, ignoreLength) {
    return typeof value === "string" && (value === "0x" || REGEX_HEX_PREFIXED.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));
  }
  function isObject$2(value) {
    return !!value && typeof value === "object";
  }
  function isOn(...fns) {
    return (value) => (isObject$2(value) || isFunction$2(value)) && fns.every((f) => isFunction$2(value[f]));
  }
  function isOnFunction(...fns) {
    return (value) => isFunction$2(value) && fns.every((f) => isFunction$2(value[f]));
  }
  function isOnObject(...fns) {
    return (value) => isObject$2(value) && fns.every((f) => isFunction$2(value[f]));
  }
  const isToBigInt = /* @__PURE__ */ isOn("toBigInt");
  const isToBn$1 = /* @__PURE__ */ isOn("toBn");
  function nToBigInt(value) {
    return typeof value === "bigint" ? value : !value ? BigInt$2(0) : isHex(value) ? hexToBigInt(value.toString()) : isBn(value) ? BigInt$2(value.toString()) : isToBigInt(value) ? value.toBigInt() : isToBn$1(value) ? BigInt$2(value.toBn().toString()) : BigInt$2(value);
  }
  function nSqrt(value) {
    const n = nToBigInt(value);
    if (n < _0n$6) {
      throw new Error("square root of negative numbers is not supported");
    }
    if (n <= _2pow53n) {
      return BigInt$2(~~Math.sqrt(Number(n)));
    }
    let x0 = _sqrt2pow53n;
    while (true) {
      const x1 = n / x0 + x0 >> _1n$8;
      if (x0 === x1 || x0 === x1 - _1n$8) {
        return x0;
      }
      x0 = x1;
    }
  }
  function commonjsRequire(path2) {
    throw new Error('Could not dynamically require "' + path2 + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
  }
  const hasBigInt = typeof BigInt$2 === "function" && typeof BigInt$2.asIntN === "function";
  const hasCjs = typeof commonjsRequire === "function" && typeof module !== "undefined";
  const hasDirname = typeof __dirname !== "undefined";
  const hasEsm = !hasCjs;
  const hasWasm = typeof WebAssembly !== "undefined";
  const hasBuffer = typeof xglobal$3.Buffer === "function" && typeof xglobal$3.Buffer.isBuffer === "function";
  const hasProcess = typeof xglobal$3.process === "object";
  function isBuffer$1(value) {
    return hasBuffer && !!value && isFunction$2(value.readDoubleLE) && xglobal$3.Buffer.isBuffer(value);
  }
  function isU8a(value) {
    return (value && value.constructor) === Uint8Array || value instanceof Uint8Array;
  }
  const encoder = new TextEncoder$1();
  function stringToU8a(value) {
    return value ? encoder.encode(value.toString()) : new Uint8Array();
  }
  function u8aToU8a(value) {
    return isU8a(value) ? isBuffer$1(value) ? new Uint8Array(value) : value : isHex(value) ? hexToU8a(value) : Array.isArray(value) ? new Uint8Array(value) : stringToU8a(value);
  }
  function u8aCmp(a, b) {
    const u8aa = u8aToU8a(a);
    const u8ab = u8aToU8a(b);
    let i2 = 0;
    while (true) {
      const overA = i2 >= u8aa.length;
      const overB = i2 >= u8ab.length;
      if (overA && overB) {
        return 0;
      } else if (overA) {
        return -1;
      } else if (overB) {
        return 1;
      } else if (u8aa[i2] !== u8ab[i2]) {
        return u8aa[i2] > u8ab[i2] ? 1 : -1;
      }
      i2++;
    }
  }
  function u8aConcat(...list) {
    const count = list.length;
    const u8as = new Array(count);
    let length2 = 0;
    for (let i2 = 0; i2 < count; i2++) {
      u8as[i2] = u8aToU8a(list[i2]);
      length2 += u8as[i2].length;
    }
    return u8aConcatStrict(u8as, length2);
  }
  function u8aConcatStrict(u8as, length2 = 0) {
    const count = u8as.length;
    let offset = 0;
    if (!length2) {
      for (let i2 = 0; i2 < count; i2++) {
        length2 += u8as[i2].length;
      }
    }
    const result = new Uint8Array(length2);
    for (let i2 = 0; i2 < count; i2++) {
      result.set(u8as[i2], offset);
      offset += u8as[i2].length;
    }
    return result;
  }
  function u8aEmpty(value) {
    const len = value.length | 0;
    for (let i2 = 0; i2 < len; i2++) {
      if (value[i2] | 0) {
        return false;
      }
    }
    return true;
  }
  function u8aEq(a, b) {
    const u8aa = u8aToU8a(a);
    const u8ab = u8aToU8a(b);
    if (u8aa.length === u8ab.length) {
      const dvA = new DataView(u8aa.buffer, u8aa.byteOffset);
      const dvB = new DataView(u8ab.buffer, u8ab.byteOffset);
      const mod2 = u8aa.length % 4 | 0;
      const length2 = u8aa.length - mod2 | 0;
      for (let i2 = 0; i2 < length2; i2 += 4) {
        if (dvA.getUint32(i2) !== dvB.getUint32(i2)) {
          return false;
        }
      }
      for (let i2 = length2, count = u8aa.length; i2 < count; i2++) {
        if (u8aa[i2] !== u8ab[i2]) {
          return false;
        }
      }
      return true;
    }
    return false;
  }
  function u8aFixLength(value, bitLength = -1, atStart = false) {
    const byteLength = Math.ceil(bitLength / 8);
    if (bitLength === -1 || value.length === byteLength) {
      return value;
    } else if (value.length > byteLength) {
      return value.subarray(0, byteLength);
    }
    const result = new Uint8Array(byteLength);
    result.set(value, atStart ? 0 : byteLength - value.length);
    return result;
  }
  function u8aSorted(u8as) {
    return u8as.sort(u8aCmp);
  }
  function u8aToBn(value, { isLe = true, isNegative = false } = {}) {
    const count = value.length;
    if (isNegative) {
      if (isLe) {
        switch (count) {
          case 0:
            return new BN(0);
          case 1:
            return new BN((value[0] ^ 255) * -1 - 1);
          case 2:
            return new BN((value[0] + (value[1] << 8) ^ 65535) * -1 - 1);
          case 3:
            return new BN((value[0] + (value[1] << 8) + (value[2] << 16) ^ 16777215) * -1 - 1);
          case 4:
            return new BN((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) * -1 - 1);
          case 5:
            return new BN(((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] ^ 255) * 4294967296) * -1 - 1);
          case 6:
            return new BN(((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] + (value[5] << 8) ^ 65535) * 4294967296) * -1 - 1);
          default:
            return new BN(value, "le").fromTwos(value.length * 8);
        }
      }
      if (count === 0) {
        return new BN(0);
      } else if (count > 6) {
        return new BN(value, "be").fromTwos(value.length * 8);
      }
      let result2 = 0;
      for (let i2 = 0; i2 < count; i2++) {
        result2 = result2 * 256 + (value[i2] ^ 255);
      }
      return new BN(result2 * -1 - 1);
    }
    if (isLe) {
      switch (count) {
        case 0:
          return new BN(0);
        case 1:
          return new BN(value[0]);
        case 2:
          return new BN(value[0] + (value[1] << 8));
        case 3:
          return new BN(value[0] + (value[1] << 8) + (value[2] << 16));
        case 4:
          return new BN(value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216);
        case 5:
          return new BN(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8)) * 16777216);
        case 6:
          return new BN(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8) + (value[5] << 16)) * 16777216);
        default:
          return new BN(value, "le");
      }
    }
    if (count === 0) {
      return new BN(0);
    } else if (count > 6) {
      return new BN(value, "be");
    }
    let result = 0;
    for (let i2 = 0; i2 < count; i2++) {
      result = result * 256 + value[i2];
    }
    return new BN(result);
  }
  function u8aToBuffer(value) {
    return Buffer.from(value || []);
  }
  function u8aToFloat(value, { bitLength = 32, isLe = true } = {}) {
    if (bitLength !== 32 && bitLength !== 64) {
      throw new Error("Invalid bitLength provided, expected 32 or 64");
    } else if (value.length < bitLength / 8) {
      throw new Error(`Invalid input buffer provided, expected at least ${bitLength / 8} bytes, found ${value.length}`);
    }
    const dv = new DataView(value.buffer, value.byteOffset);
    return bitLength === 32 ? dv.getFloat32(0, isLe) : dv.getFloat64(0, isLe);
  }
  const U8 = new Array(256);
  const U16 = new Array(256 * 256);
  for (let n = 0; n < 256; n++) {
    U8[n] = n.toString(16).padStart(2, "0");
  }
  for (let i2 = 0; i2 < 256; i2++) {
    const s = i2 << 8;
    for (let j = 0; j < 256; j++) {
      U16[s | j] = U8[i2] + U8[j];
    }
  }
  function hex$1(value, result) {
    const mod2 = value.length % 2 | 0;
    const length2 = value.length - mod2 | 0;
    for (let i2 = 0; i2 < length2; i2 += 2) {
      result += U16[value[i2] << 8 | value[i2 + 1]];
    }
    if (mod2) {
      result += U8[value[length2] | 0];
    }
    return result;
  }
  function u8aToHex(value, bitLength = -1, isPrefixed = true) {
    const empty2 = isPrefixed ? "0x" : "";
    if (!value || !value.length) {
      return empty2;
    } else if (bitLength > 0) {
      const length2 = Math.ceil(bitLength / 8);
      if (value.length > length2) {
        return `${hex$1(value.subarray(0, length2 / 2), empty2)}…${hex$1(value.subarray(value.length - length2 / 2), "")}`;
      }
    }
    return hex$1(value, empty2);
  }
  function u8aToNumber(value, { isNegative = false } = {}) {
    const count = value.length;
    if (isNegative) {
      switch (count) {
        case 0:
          return 0;
        case 1:
          return (value[0] ^ 255) * -1 - 1;
        case 2:
          return (value[0] + (value[1] << 8) ^ 65535) * -1 - 1;
        case 3:
          return (value[0] + (value[1] << 8) + (value[2] << 16) ^ 16777215) * -1 - 1;
        case 4:
          return (value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) * -1 - 1;
        case 5:
          return ((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] ^ 255) * 4294967296) * -1 - 1;
        case 6:
          return ((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] + (value[5] << 8) ^ 65535) * 4294967296) * -1 - 1;
        default:
          throw new Error("Value more than 48-bits cannot be reliably converted");
      }
    }
    switch (count) {
      case 0:
        return 0;
      case 1:
        return value[0];
      case 2:
        return value[0] + (value[1] << 8);
      case 3:
        return value[0] + (value[1] << 8) + (value[2] << 16);
      case 4:
        return value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216;
      case 5:
        return value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8)) * 16777216;
      case 6:
        return value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8) + (value[5] << 16)) * 16777216;
      default:
        throw new Error("Value more than 48-bits cannot be reliably converted");
    }
  }
  const decoder = new TextDecoder$1("utf-8");
  function u8aToString(value) {
    return value ? decoder.decode(value) : "";
  }
  const U8A_WRAP_ETHEREUM = /* @__PURE__ */ u8aToU8a("Ethereum Signed Message:\n");
  const U8A_WRAP_PREFIX = /* @__PURE__ */ u8aToU8a("<Bytes>");
  const U8A_WRAP_POSTFIX = /* @__PURE__ */ u8aToU8a("</Bytes>");
  const WRAP_LEN = U8A_WRAP_PREFIX.length + U8A_WRAP_POSTFIX.length;
  function u8aIsWrapped(u8a2, withEthereum) {
    return u8a2.length >= WRAP_LEN && u8aEq(u8a2.subarray(0, U8A_WRAP_PREFIX.length), U8A_WRAP_PREFIX) && u8aEq(u8a2.slice(-U8A_WRAP_POSTFIX.length), U8A_WRAP_POSTFIX) || withEthereum && u8a2.length >= U8A_WRAP_ETHEREUM.length && u8aEq(u8a2.subarray(0, U8A_WRAP_ETHEREUM.length), U8A_WRAP_ETHEREUM);
  }
  function u8aUnwrapBytes(bytes2) {
    const u8a2 = u8aToU8a(bytes2);
    return u8aIsWrapped(u8a2, false) ? u8a2.subarray(U8A_WRAP_PREFIX.length, u8a2.length - U8A_WRAP_POSTFIX.length) : u8a2;
  }
  function u8aWrapBytes(bytes2) {
    const u8a2 = u8aToU8a(bytes2);
    return u8aIsWrapped(u8a2, true) ? u8a2 : u8aConcatStrict([U8A_WRAP_PREFIX, u8a2, U8A_WRAP_POSTFIX]);
  }
  const DIV = BigInt$2(256);
  const NEG_MASK = BigInt$2(255);
  function toU8a(value, isLe, isNegative) {
    const arr2 = [];
    if (isNegative) {
      value = (value + _1n$8) * -_1n$8;
    }
    while (value !== _0n$6) {
      const mod2 = value % DIV;
      const val = Number(isNegative ? mod2 ^ NEG_MASK : mod2);
      if (isLe) {
        arr2.push(val);
      } else {
        arr2.unshift(val);
      }
      value = (value - mod2) / DIV;
    }
    return Uint8Array.from(arr2);
  }
  function nToU8a(value, { bitLength = -1, isLe = true, isNegative = false } = {}) {
    const valueBi = nToBigInt(value);
    if (valueBi === _0n$6) {
      return bitLength === -1 ? new Uint8Array(1) : new Uint8Array(Math.ceil((bitLength || 0) / 8));
    }
    const u8a2 = toU8a(valueBi, isLe, isNegative);
    if (bitLength === -1) {
      return u8a2;
    }
    const byteLength = Math.ceil((bitLength || 0) / 8);
    const output2 = new Uint8Array(byteLength);
    if (isNegative) {
      output2.fill(255);
    }
    output2.set(u8a2, isLe ? 0 : byteLength - u8a2.length);
    return output2;
  }
  function nToHex(value, { bitLength = -1, isLe = false, isNegative = false } = {}) {
    return u8aToHex(nToU8a(value || 0, { bitLength, isLe, isNegative }));
  }
  function hexStripPrefix(value) {
    if (!value || value === "0x") {
      return "";
    } else if (REGEX_HEX_PREFIXED.test(value)) {
      return value.substring(2);
    } else if (REGEX_HEX_NOPREFIX.test(value)) {
      return value;
    }
    throw new Error(`Expected hex value to convert, found '${value}'`);
  }
  function hexToBn(value, { isLe = false, isNegative = false } = {}) {
    if (!value || value === "0x") {
      return new BN(0);
    }
    const stripped = hexStripPrefix(value);
    const bn2 = new BN(stripped, 16, isLe ? "le" : "be");
    return isNegative ? bn2.fromTwos(stripped.length * 4) : bn2;
  }
  const bnMax = /* @__PURE__ */ createCmp((a, b) => a.gt(b));
  const bnMin = /* @__PURE__ */ createCmp((a, b) => a.lt(b));
  const BN_ZERO = /* @__PURE__ */ new BN(0);
  const BN_ONE = /* @__PURE__ */ new BN(1);
  const BN_TWO = /* @__PURE__ */ new BN(2);
  const BN_THREE = /* @__PURE__ */ new BN(3);
  const BN_FOUR = /* @__PURE__ */ new BN(4);
  const BN_FIVE = /* @__PURE__ */ new BN(5);
  const BN_SIX = /* @__PURE__ */ new BN(6);
  const BN_SEVEN = /* @__PURE__ */ new BN(7);
  const BN_EIGHT = /* @__PURE__ */ new BN(8);
  const BN_NINE = /* @__PURE__ */ new BN(9);
  const BN_TEN = /* @__PURE__ */ new BN(10);
  const BN_HUNDRED = /* @__PURE__ */ new BN(100);
  const BN_THOUSAND = /* @__PURE__ */ new BN(1e3);
  const BN_MILLION = /* @__PURE__ */ new BN(1e6);
  const BN_BILLION = /* @__PURE__ */ new BN(1e9);
  const BN_QUINTILL = BN_BILLION.mul(BN_BILLION);
  const BN_MAX_INTEGER = /* @__PURE__ */ new BN(Number.MAX_SAFE_INTEGER);
  const BN_SQRT_MAX_INTEGER = /* @__PURE__ */ new BN(94906265);
  function isBigInt(value) {
    return typeof value === "bigint";
  }
  function bnToBn(value) {
    return value ? BN.isBN(value) ? value : isHex(value) ? hexToBn(value.toString()) : isBigInt(value) ? new BN(value.toString()) : isToBn$1(value) ? value.toBn() : isToBigInt(value) ? new BN(value.toBigInt().toString()) : new BN(value) : new BN(0);
  }
  function bnSqrt(value) {
    const n = bnToBn(value);
    if (n.isNeg()) {
      throw new Error("square root of negative numbers is not supported");
    }
    if (n.lte(BN_MAX_INTEGER)) {
      return new BN(~~Math.sqrt(n.toNumber()));
    }
    let x0 = BN_SQRT_MAX_INTEGER.clone();
    while (true) {
      const x1 = n.div(x0).iadd(x0).ishrn(1);
      if (x0.eq(x1) || x0.eq(x1.sub(BN_ONE))) {
        return x0;
      }
      x0 = x1;
    }
  }
  const DEFAULT_OPTS = { bitLength: -1, isLe: true, isNegative: false };
  function bnToU8a(value, { bitLength = -1, isLe = true, isNegative = false } = DEFAULT_OPTS) {
    const valueBn = bnToBn(value);
    const byteLength = bitLength === -1 ? Math.ceil(valueBn.bitLength() / 8) : Math.ceil((bitLength || 0) / 8);
    if (!value) {
      return bitLength === -1 ? new Uint8Array(1) : new Uint8Array(byteLength);
    }
    const output2 = new Uint8Array(byteLength);
    const bn2 = isNegative ? valueBn.toTwos(byteLength * 8) : valueBn;
    output2.set(bn2.toArray(isLe ? "le" : "be", byteLength), 0);
    return output2;
  }
  function bnToHex(value, { bitLength = -1, isLe = false, isNegative = false } = {}) {
    return u8aToHex(bnToU8a(value, { bitLength, isLe, isNegative }));
  }
  function bufferToU8a(buffer) {
    return new Uint8Array(buffer || []);
  }
  const MAX_U8 = BN_TWO.pow(new BN(8 - 2)).isub(BN_ONE);
  const MAX_U16 = BN_TWO.pow(new BN(16 - 2)).isub(BN_ONE);
  const MAX_U32 = BN_TWO.pow(new BN(32 - 2)).isub(BN_ONE);
  const BL_16 = { bitLength: 16 };
  const BL_32 = { bitLength: 32 };
  function compactToU8a(value) {
    const bn2 = bnToBn(value);
    if (bn2.lte(MAX_U8)) {
      return new Uint8Array([bn2.toNumber() << 2]);
    } else if (bn2.lte(MAX_U16)) {
      return bnToU8a(bn2.shln(2).iadd(BN_ONE), BL_16);
    } else if (bn2.lte(MAX_U32)) {
      return bnToU8a(bn2.shln(2).iadd(BN_TWO), BL_32);
    }
    const u8a2 = bnToU8a(bn2);
    let length2 = u8a2.length;
    while (u8a2[length2 - 1] === 0) {
      length2--;
    }
    if (length2 < 4) {
      throw new Error("Invalid length, previous checks match anything less than 2^30");
    }
    return u8aConcatStrict([
      // subtract 4 as minimum (also catered for in decoding)
      new Uint8Array([(length2 - 4 << 2) + 3]),
      u8a2.subarray(0, length2)
    ]);
  }
  function compactAddLength(input) {
    return u8aConcatStrict([
      compactToU8a(input.length),
      input
    ]);
  }
  function compactFromU8a(input) {
    const u8a2 = u8aToU8a(input);
    switch (u8a2[0] & 3) {
      case 0:
        return [1, new BN(u8a2[0] >>> 2)];
      case 1:
        return [2, new BN(u8a2[0] + (u8a2[1] << 8) >>> 2)];
      case 2:
        return [4, new BN(u8a2[0] + (u8a2[1] << 8) + (u8a2[2] << 16) + u8a2[3] * 16777216 >>> 2)];
      default: {
        const offset = (u8a2[0] >>> 2) + 5;
        switch (offset) {
          case 5:
            return [5, new BN(u8a2[1] + (u8a2[2] << 8) + (u8a2[3] << 16) + u8a2[4] * 16777216)];
          case 6:
            return [6, new BN(u8a2[1] + (u8a2[2] << 8) + (u8a2[3] << 16) + (u8a2[4] + (u8a2[5] << 8)) * 16777216)];
          case 7:
            return [7, new BN(u8a2[1] + (u8a2[2] << 8) + (u8a2[3] << 16) + (u8a2[4] + (u8a2[5] << 8) + (u8a2[6] << 16)) * 16777216)];
          default:
            return [offset, u8aToBn(u8a2.subarray(1, offset))];
        }
      }
    }
  }
  function compactFromU8aLim(u8a2) {
    switch (u8a2[0] & 3) {
      case 0:
        return [1, u8a2[0] >>> 2];
      case 1:
        return [2, u8a2[0] + (u8a2[1] << 8) >>> 2];
      case 2:
        return [4, u8a2[0] + (u8a2[1] << 8) + (u8a2[2] << 16) + u8a2[3] * 16777216 >>> 2];
      default: {
        switch ((u8a2[0] >>> 2) + 5) {
          case 5:
            return [5, u8a2[1] + (u8a2[2] << 8) + (u8a2[3] << 16) + u8a2[4] * 16777216];
          case 6:
            return [6, u8a2[1] + (u8a2[2] << 8) + (u8a2[3] << 16) + (u8a2[4] + (u8a2[5] << 8)) * 16777216];
          case 7:
            return [7, u8a2[1] + (u8a2[2] << 8) + (u8a2[3] << 16) + (u8a2[4] + (u8a2[5] << 8) + (u8a2[6] << 16)) * 16777216];
          default:
            throw new Error("Compact input is > Number.MAX_SAFE_INTEGER");
        }
      }
    }
  }
  function compactStripLength(input) {
    const [offset, length2] = compactFromU8a(input);
    const total = offset + length2.toNumber();
    return [
      total,
      input.subarray(offset, total)
    ];
  }
  const MIN_MS = 60 * 1e3;
  const HR_MS = MIN_MS * 60;
  const DAY_MS = HR_MS * 24;
  const ZERO = { days: 0, hours: 0, milliseconds: 0, minutes: 0, seconds: 0 };
  function add$1(a, b) {
    return {
      days: (a.days || 0) + b.days,
      hours: (a.hours || 0) + b.hours,
      milliseconds: (a.milliseconds || 0) + b.milliseconds,
      minutes: (a.minutes || 0) + b.minutes,
      seconds: (a.seconds || 0) + b.seconds
    };
  }
  function extractSecs(ms) {
    const s = ms / 1e3;
    if (s < 60) {
      const seconds = ~~s;
      return add$1({ seconds }, extractTime(ms - seconds * 1e3));
    }
    const m2 = s / 60;
    if (m2 < 60) {
      const minutes = ~~m2;
      return add$1({ minutes }, extractTime(ms - minutes * MIN_MS));
    }
    const h = m2 / 60;
    if (h < 24) {
      const hours = ~~h;
      return add$1({ hours }, extractTime(ms - hours * HR_MS));
    }
    const days = ~~(h / 24);
    return add$1({ days }, extractTime(ms - days * DAY_MS));
  }
  function extractTime(milliseconds) {
    return !milliseconds ? ZERO : milliseconds < 1e3 ? add$1({ milliseconds }, ZERO) : extractSecs(milliseconds);
  }
  function floatToU8a(value = 0, { bitLength = 32, isLe = true } = {}) {
    if (bitLength !== 32 && bitLength !== 64) {
      throw new Error("Invalid bitLength provided, expected 32 or 64");
    }
    const result = new Uint8Array(bitLength / 8);
    const dv = new DataView(result.buffer, result.byteOffset);
    if (bitLength === 32) {
      dv.setFloat32(0, Number(value), isLe);
    } else {
      dv.setFloat64(0, Number(value), isLe);
    }
    return result;
  }
  function isBoolean(value) {
    return typeof value === "boolean";
  }
  const NUMBER_REGEX = new RegExp("(\\d+?)(?=(\\d{3})+(?!\\d)|$)", "g");
  function formatDecimal(value, separator = ",") {
    const isNegative = value[0].startsWith("-");
    const matched = isNegative ? value.substring(1).match(NUMBER_REGEX) : value.match(NUMBER_REGEX);
    return matched ? `${isNegative ? "-" : ""}${matched.join(separator)}` : value;
  }
  function getSeparator(locale) {
    return {
      decimal: 0.1.toLocaleString(locale).substring(1, 2),
      thousand: 1e3.toLocaleString(locale).substring(1, 2)
    };
  }
  const SI_MID = 8;
  const SI = [
    { power: -24, text: "yocto", value: "y" },
    { power: -21, text: "zepto", value: "z" },
    { power: -18, text: "atto", value: "a" },
    { power: -15, text: "femto", value: "f" },
    { power: -12, text: "pico", value: "p" },
    { power: -9, text: "nano", value: "n" },
    { power: -6, text: "micro", value: "µ" },
    { power: -3, text: "milli", value: "m" },
    { power: 0, text: "Unit", value: "-" },
    { power: 3, text: "Kilo", value: "k" },
    { power: 6, text: "Mill", value: "M" },
    { power: 9, text: "Bill", value: "B" },
    { power: 12, text: "Tril", value: "T" },
    { power: 15, text: "Peta", value: "P" },
    { power: 18, text: "Exa", value: "E" },
    { power: 21, text: "Zeta", value: "Z" },
    { power: 24, text: "Yotta", value: "Y" }
  ];
  function findSi(type) {
    for (let i2 = 0, count = SI.length; i2 < count; i2++) {
      if (SI[i2].value === type) {
        return SI[i2];
      }
    }
    return SI[SI_MID];
  }
  function calcSi(text, decimals, forceUnit) {
    if (forceUnit) {
      return findSi(forceUnit);
    }
    const siDefIndex = SI_MID - 1 + Math.ceil((text.length - decimals) / 3);
    return SI[siDefIndex] || SI[siDefIndex < 0 ? 0 : SI.length - 1];
  }
  const DEFAULT_DECIMALS = 0;
  const DEFAULT_UNIT = SI[SI_MID].text;
  let defaultDecimals = DEFAULT_DECIMALS;
  let defaultUnit = DEFAULT_UNIT;
  function _formatBalance(input, { decimals = defaultDecimals, forceUnit, locale = "en", withAll = false, withSi = true, withSiFull = false, withUnit = true, withZero = true } = {}) {
    let text = bnToBn(input).toString();
    if (text.length === 0 || text === "0") {
      return "0";
    }
    let sign2 = "";
    if (text[0].startsWith("-")) {
      sign2 = "-";
      text = text.substring(1);
    }
    const si = calcSi(text, decimals, forceUnit);
    const mid = text.length - (decimals + si.power);
    const pre = mid <= 0 ? "0" : text.substring(0, mid);
    let post = text.padStart(mid < 0 ? decimals : 1, "0").substring(mid < 0 ? 0 : mid).padEnd(withAll ? Math.max(decimals, 4) : 4, "0").substring(0, withAll ? Math.max(4, decimals + si.power) : 4);
    if (!withZero) {
      let end = post.length - 1;
      do {
        if (post[end] === "0") {
          end--;
        }
      } while (post[end] === "0");
      post = post.substring(0, end + 1);
    }
    const unit = isBoolean(withUnit) ? SI[SI_MID].text : withUnit;
    const units = withSi || withSiFull ? si.value === "-" ? withUnit ? ` ${unit}` : "" : ` ${withSiFull ? `${si.text}${withUnit ? " " : ""}` : si.value}${withUnit ? unit : ""}` : "";
    const { decimal, thousand } = getSeparator(locale);
    return `${sign2}${formatDecimal(pre, thousand)}${post && `${decimal}${post}`}${units}`;
  }
  const formatBalance = _formatBalance;
  formatBalance.calcSi = (text, decimals = defaultDecimals) => calcSi(text, decimals);
  formatBalance.findSi = findSi;
  formatBalance.getDefaults = () => {
    return {
      decimals: defaultDecimals,
      unit: defaultUnit
    };
  };
  formatBalance.getOptions = (decimals = defaultDecimals) => {
    return SI.filter(({ power }) => power < 0 ? decimals + power >= 0 : true);
  };
  formatBalance.setDefaults = ({ decimals, unit }) => {
    defaultDecimals = (Array.isArray(decimals) ? decimals[0] : decimals) ?? defaultDecimals;
    defaultUnit = (Array.isArray(unit) ? unit[0] : unit) ?? defaultUnit;
    SI[SI_MID].text = defaultUnit;
  };
  function zeroPad(value) {
    return value.toString().padStart(2, "0");
  }
  function formatDate(date) {
    const year = date.getFullYear().toString();
    const month = zeroPad(date.getMonth() + 1);
    const day = zeroPad(date.getDate());
    const hour = zeroPad(date.getHours());
    const minute = zeroPad(date.getMinutes());
    const second = zeroPad(date.getSeconds());
    return `${year}-${month}-${day} ${hour}:${minute}:${second}`;
  }
  function formatValue(elapsed) {
    if (elapsed < 15) {
      return `${elapsed.toFixed(1)}s`;
    } else if (elapsed < 60) {
      return `${elapsed | 0}s`;
    } else if (elapsed < 3600) {
      return `${elapsed / 60 | 0}m`;
    }
    return `${elapsed / 3600 | 0}h`;
  }
  function formatElapsed(now, value) {
    const tsNow = now && now.getTime() || 0;
    const tsValue = value instanceof Date ? value.getTime() : bnToBn(value).toNumber();
    return tsNow && tsValue ? formatValue(Math.max(Math.abs(tsNow - tsValue), 0) / 1e3) : "0.0s";
  }
  function formatNumber(value, { locale = "en" } = {}) {
    const { thousand } = getSeparator(locale);
    return formatDecimal(bnToBn(value).toString(), thousand);
  }
  function hexHasPrefix(value) {
    return !!value && isHex(value, -1);
  }
  function hexAddPrefix(value) {
    return value && hexHasPrefix(value) ? value : `0x${value && value.length % 2 === 1 ? "0" : ""}${value || ""}`;
  }
  function hexFixLength(value, bitLength = -1, withPadding = false) {
    const strLength = Math.ceil(bitLength / 4);
    const hexLength = strLength + 2;
    return hexAddPrefix(bitLength === -1 || value.length === hexLength || !withPadding && value.length < hexLength ? hexStripPrefix(value) : value.length > hexLength ? hexStripPrefix(value).slice(-1 * strLength) : `${"0".repeat(strLength)}${hexStripPrefix(value)}`.slice(-1 * strLength));
  }
  function hexToNumber$1(value) {
    return value ? hexToBn(value).toNumber() : NaN;
  }
  function hexToString(_value) {
    return u8aToString(hexToU8a(_value));
  }
  function isArray$3(value) {
    return Array.isArray(value);
  }
  function isString$1(value) {
    return typeof value === "string" || value instanceof String;
  }
  function isAsciiStr(str) {
    for (let i2 = 0, count = str.length; i2 < count; i2++) {
      const b = str.charCodeAt(i2);
      if (b < 32 || b > 126) {
        return false;
      }
    }
    return true;
  }
  function isAsciiBytes(u8a2) {
    for (let i2 = 0, count = u8a2.length; i2 < count; i2++) {
      const b = u8a2[i2] | 0;
      if (b < 32 || b > 126) {
        return false;
      }
    }
    return true;
  }
  function isAscii(value) {
    return isString$1(value) ? isHex(value) ? isAsciiBytes(u8aToU8a(value)) : isAsciiStr(value) : value ? isAsciiBytes(value) : false;
  }
  const isClass = /* @__PURE__ */ isOnFunction("isPrototypeOf", "hasOwnProperty");
  function isChildClass(Parent, Child) {
    return isClass(Child) && isClass(Parent) ? Parent === Child || Parent.isPrototypeOf(Child) : false;
  }
  const checkCodec = /* @__PURE__ */ isOnObject("toHex", "toHuman", "toU8a");
  const checkRegistry = /* @__PURE__ */ isOnObject("get");
  function isCodec(value) {
    return checkCodec(value) && checkRegistry(value.registry);
  }
  const isCompact = /* @__PURE__ */ isOnObject("toBigInt", "toBn", "toNumber", "unwrap");
  function isError(value) {
    return (value && value.constructor) === Error || value instanceof Error;
  }
  function isInstanceOf(value, Clazz) {
    return (value && value.constructor) === Clazz || value instanceof Clazz;
  }
  const v4 = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
  const v6s = "[a-fA-F\\d]{1,4}";
  const v6 = `
(?:
(?:${v6s}:){7}(?:${v6s}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:${v6s}:){6}(?:${v4}|:${v6s}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:${v6s}:){5}(?::${v4}|(?::${v6s}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:${v6s}:){4}(?:(?::${v6s}){0,1}:${v4}|(?::${v6s}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:${v6s}:){3}(?:(?::${v6s}){0,2}:${v4}|(?::${v6s}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:${v6s}:){2}(?:(?::${v6s}){0,3}:${v4}|(?::${v6s}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:${v6s}:){1}(?:(?::${v6s}){0,4}:${v4}|(?::${v6s}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::(?:(?::${v6s}){0,5}:${v4}|(?::${v6s}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1
`.replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
  const v46Exact = new RegExp(`(?:^${v4}$)|(?:^${v6}$)`);
  const v4exact = new RegExp(`^${v4}$`);
  const v6exact = new RegExp(`^${v6}$`);
  function isIp(value, type) {
    switch (type) {
      case "v4":
        return v4exact.test(value);
      case "v6":
        return v6exact.test(value);
      default:
        return v46Exact.test(value);
    }
  }
  function replacer(_2, v) {
    return isBigInt(v) ? v.toString() : v;
  }
  function stringify$1(value, space) {
    return JSON.stringify(value, replacer, space);
  }
  function isJsonObject(value) {
    const str = typeof value !== "string" ? stringify$1(value) : value;
    try {
      const obj = JSON.parse(str);
      return typeof obj === "object" && obj !== null;
    } catch {
      return false;
    }
  }
  function isNull(value) {
    return value === null;
  }
  function isNumber$1(value) {
    return typeof value === "number";
  }
  const isObservable = /* @__PURE__ */ isOn("next");
  const isPromise$3 = /* @__PURE__ */ isOnObject("catch", "then");
  const REGEX_DEV = /(Development|Local Testnet)$/;
  function isTestChain(chain2) {
    if (!chain2) {
      return false;
    }
    return !!REGEX_DEV.test(chain2.toString());
  }
  function isUndefined$1(value) {
    return value === void 0;
  }
  function isUtf8(value) {
    if (!value) {
      return isString$1(value);
    }
    const u8a2 = u8aToU8a(value);
    const len = u8a2.length;
    let i2 = 0;
    while (i2 < len) {
      if (u8a2[i2] <= 127) {
        i2 += 1;
      } else if (u8a2[i2] >= 194 && u8a2[i2] <= 223) {
        if (i2 + 1 < len) {
          if (u8a2[i2 + 1] < 128 || u8a2[i2 + 1] > 191) {
            return false;
          }
        } else {
          return false;
        }
        i2 += 2;
      } else if (u8a2[i2] === 224) {
        if (i2 + 2 < len) {
          if (u8a2[i2 + 1] < 160 || u8a2[i2 + 1] > 191) {
            return false;
          }
          if (u8a2[i2 + 2] < 128 || u8a2[i2 + 2] > 191) {
            return false;
          }
        } else {
          return false;
        }
        i2 += 3;
      } else if (u8a2[i2] >= 225 && u8a2[i2] <= 236) {
        if (i2 + 2 < len) {
          if (u8a2[i2 + 1] < 128 || u8a2[i2 + 1] > 191) {
            return false;
          }
          if (u8a2[i2 + 2] < 128 || u8a2[i2 + 2] > 191) {
            return false;
          }
        } else {
          return false;
        }
        i2 += 3;
      } else if (u8a2[i2] === 237) {
        if (i2 + 2 < len) {
          if (u8a2[i2 + 1] < 128 || u8a2[i2 + 1] > 159) {
            return false;
          }
          if (u8a2[i2 + 2] < 128 || u8a2[i2 + 2] > 191) {
            return false;
          }
        } else {
          return false;
        }
        i2 += 3;
      } else if (u8a2[i2] >= 238 && u8a2[i2] <= 239) {
        if (i2 + 2 < len) {
          if (u8a2[i2 + 1] < 128 || u8a2[i2 + 1] > 191) {
            return false;
          }
          if (u8a2[i2 + 2] < 128 || u8a2[i2 + 2] > 191) {
            return false;
          }
        } else {
          return false;
        }
        i2 += 3;
      } else if (u8a2[i2] === 240) {
        if (i2 + 3 < len) {
          if (u8a2[i2 + 1] < 144 || u8a2[i2 + 1] > 191) {
            return false;
          }
          if (u8a2[i2 + 2] < 128 || u8a2[i2 + 2] > 191) {
            return false;
          }
          if (u8a2[i2 + 3] < 128 || u8a2[i2 + 3] > 191) {
            return false;
          }
        } else {
          return false;
        }
        i2 += 4;
      } else if (u8a2[i2] >= 241 && u8a2[i2] <= 243) {
        if (i2 + 3 < len) {
          if (u8a2[i2 + 1] < 128 || u8a2[i2 + 1] > 191) {
            return false;
          }
          if (u8a2[i2 + 2] < 128 || u8a2[i2 + 2] > 191) {
            return false;
          }
          if (u8a2[i2 + 3] < 128 || u8a2[i2 + 3] > 191) {
            return false;
          }
        } else {
          return false;
        }
        i2 += 4;
      } else if (u8a2[i2] === 244) {
        if (i2 + 3 < len) {
          if (u8a2[i2 + 1] < 128 || u8a2[i2 + 1] > 143) {
            return false;
          }
          if (u8a2[i2 + 2] < 128 || u8a2[i2 + 2] > 191) {
            return false;
          }
          if (u8a2[i2 + 3] < 128 || u8a2[i2 + 3] > 191) {
            return false;
          }
        } else {
          return false;
        }
        i2 += 4;
      } else {
        return false;
      }
    }
    return true;
  }
  const WASM_MAGIC = new Uint8Array([0, 97, 115, 109]);
  function isWasm(value) {
    return isU8a(value) && u8aEq(value.subarray(0, 4), WASM_MAGIC);
  }
  function lazyMethod(result, item, creator, getName, index2 = 0) {
    const name = getName ? getName(item, index2) : item.toString();
    let value;
    Object.defineProperty(result, name, {
      // This allows for re-configuration with the embedded defineProperty below
      // and ensures that on tested browsers and Node, it _will_ be redefined
      // and thus short-circuited for future access
      configurable: true,
      enumerable: true,
      // Use a function here, we don't want to capture the outer this, i.e.
      // don't use arrow functions in this context since we have a this inside
      get: function() {
        if (value === void 0) {
          value = creator(item, index2, this);
          try {
            Object.defineProperty(this, name, { value });
          } catch {
          }
        }
        return value;
      }
    });
  }
  function lazyMethods(result, items, creator, getName) {
    for (let i2 = 0, count = items.length; i2 < count; i2++) {
      lazyMethod(result, items[i2], creator, getName, i2);
    }
    return result;
  }
  function identity$2(value) {
    return value;
  }
  function noop$3() {
  }
  const logTo = {
    debug: "log",
    error: "error",
    log: "log",
    warn: "warn"
  };
  function formatOther(value) {
    if (value && isObject$2(value) && value.constructor === Object) {
      const result = {};
      for (const [k, v] of Object.entries(value)) {
        result[k] = loggerFormat(v);
      }
      return result;
    }
    return value;
  }
  function loggerFormat(value) {
    if (Array.isArray(value)) {
      return value.map(loggerFormat);
    } else if (isBn(value)) {
      return value.toString();
    } else if (isU8a(value) || isBuffer$1(value)) {
      return u8aToHex(u8aToU8a(value));
    }
    return formatOther(value);
  }
  function formatWithLength(maxLength) {
    return (v) => {
      if (maxLength <= 0) {
        return v;
      }
      const r2 = `${v}`;
      return r2.length < maxLength ? v : `${r2.substring(0, maxLength)} ...`;
    };
  }
  function apply(log, type, values2, maxSize = -1) {
    if (values2.length === 1 && isFunction$2(values2[0])) {
      const fnResult = values2[0]();
      return apply(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);
    }
    console[logTo[log]](formatDate(/* @__PURE__ */ new Date()), type, ...values2.map(loggerFormat).map(formatWithLength(maxSize)));
  }
  function isDebugOn(e, type) {
    return !!e && (e === "*" || type === e || e.endsWith("*") && type.startsWith(e.slice(0, -1)));
  }
  function isDebugOff(e, type) {
    return !!e && (e.startsWith("-") && (type === e.slice(1) || e.endsWith("*") && type.startsWith(e.slice(1, -1))));
  }
  function getDebugFlag(env, type) {
    let flag = false;
    for (const e of env) {
      if (isDebugOn(e, type)) {
        flag = true;
      } else if (isDebugOff(e, type)) {
        flag = false;
      }
    }
    return flag;
  }
  function parseEnv(type) {
    const env = (hasProcess ? xglobal$3.process : {}).env || {};
    const maxSize = parseInt(env["DEBUG_MAX"] || "-1", 10);
    return [
      getDebugFlag((env["DEBUG"] || "").toLowerCase().split(","), type),
      isNaN(maxSize) ? -1 : maxSize
    ];
  }
  function logger(origin) {
    const type = `${origin.toUpperCase()}:`.padStart(16);
    const [isDebug, maxSize] = parseEnv(origin.toLowerCase());
    return {
      debug: isDebug ? (...values2) => apply("debug", type, values2, maxSize) : noop$3,
      error: (...values2) => apply("error", type, values2),
      log: (...values2) => apply("log", type, values2),
      noop: noop$3,
      warn: (...values2) => apply("warn", type, values2)
    };
  }
  function defaultGetId() {
    return "none";
  }
  function memoize$2(fn, { getInstanceId = defaultGetId } = {}) {
    const cache = {};
    const memoized = (...args) => {
      const stringParams = stringify$1(args);
      const instanceId = getInstanceId();
      if (!cache[instanceId]) {
        cache[instanceId] = {};
      }
      if (cache[instanceId][stringParams] === void 0) {
        cache[instanceId][stringParams] = fn(...args);
      }
      return cache[instanceId][stringParams];
    };
    memoized.unmemoize = (...args) => {
      const stringParams = stringify$1(args);
      const instanceId = getInstanceId();
      if (cache[instanceId] && cache[instanceId][stringParams] !== void 0) {
        delete cache[instanceId][stringParams];
      }
    };
    return memoized;
  }
  function nextTick(onExec, onError) {
    setTimeout(() => {
      Promise.resolve().then(() => {
        onExec();
      }).catch((error) => {
        if (onError) {
          onError(error);
        } else {
          console.error(error);
        }
      });
    }, 0);
  }
  function numberToHex(value, bitLength = -1) {
    const hex2 = (!value || Number.isNaN(value) ? 0 : value).toString(16);
    return hexFixLength(hex2.length % 2 ? `0${hex2}` : hex2, bitLength, true);
  }
  function numberToU8a(value, bitLength = -1) {
    return hexToU8a(numberToHex(value, bitLength));
  }
  function objectClear(value) {
    const keys2 = Object.keys(value);
    for (let i2 = 0, count = keys2.length; i2 < count; i2++) {
      delete value[keys2[i2]];
    }
    return value;
  }
  function objectSpread(dest, ...sources2) {
    for (let i2 = 0, count = sources2.length; i2 < count; i2++) {
      const src2 = sources2[i2];
      if (src2) {
        if (typeof src2.entries === "function") {
          for (const [key, value] of src2.entries()) {
            dest[key] = value;
          }
        } else {
          Object.assign(dest, src2);
        }
      }
    }
    return dest;
  }
  function objectCopy(source) {
    return objectSpread({}, source);
  }
  function objectEntries(obj) {
    return Object.entries(obj);
  }
  function objectKeys(value) {
    return Object.keys(value);
  }
  function objectProperty(that, key, getter, getName, index2 = 0) {
    const name = getName ? getName(key, index2) : key;
    if (!(name in that)) {
      Object.defineProperty(that, name, {
        enumerable: true,
        // Unlike in lazy, we always call into the upper function, i.e. this method
        // does not cache old values (it is expected to be used for dynamic values)
        get: function() {
          return getter(key, index2, this);
        }
      });
    }
  }
  function objectProperties(that, keys2, getter, getName) {
    for (let i2 = 0, count = keys2.length; i2 < count; i2++) {
      objectProperty(that, keys2[i2], getter, getName, i2);
    }
  }
  function objectValues(obj) {
    return Object.values(obj);
  }
  function promisify(self2, fn, ...params) {
    return new Promise((resolve, reject) => {
      fn.apply(self2, params.concat((error, result) => {
        if (error) {
          reject(error);
        } else {
          resolve(result);
        }
      }));
    });
  }
  const CC_TO_UP = new Array(256);
  const CC_TO_LO = new Array(256);
  for (let i2 = 0, count = CC_TO_UP.length; i2 < count; i2++) {
    CC_TO_LO[i2] = String.fromCharCode(i2).toLowerCase();
    CC_TO_UP[i2] = String.fromCharCode(i2).toUpperCase();
  }
  function formatAllCaps(w) {
    return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP[w.charCodeAt(w.length - 1)];
  }
  function converter$1(format) {
    return (value) => {
      const parts = value.replace(/[-_., ]+/g, " ").trim().split(" ");
      let result = "";
      for (let i2 = 0, count = parts.length; i2 < count; i2++) {
        const w = parts[i2];
        result += format(/^[\dA-Z]+$/.test(w) ? w.toLowerCase() : w.replace(/^[\dA-Z]{2,}[^a-z]/, formatAllCaps), i2);
      }
      return result;
    };
  }
  const stringCamelCase = /* @__PURE__ */ converter$1((w, i2) => (i2 ? CC_TO_UP[w.charCodeAt(0)] : CC_TO_LO[w.charCodeAt(0)]) + w.slice(1));
  const stringPascalCase = /* @__PURE__ */ converter$1((w) => CC_TO_UP[w.charCodeAt(0)] + w.slice(1));
  function converter(map2) {
    return (value) => value ? map2[value.charCodeAt(0)] + value.slice(1) : "";
  }
  const stringLowerFirst = /* @__PURE__ */ converter(CC_TO_LO);
  const stringUpperFirst = /* @__PURE__ */ converter(CC_TO_UP);
  function stringShorten(value, prefixLength = 6) {
    return value.length <= 2 + 2 * prefixLength ? value.toString() : `${value.substring(0, prefixLength)}…${value.slice(-prefixLength)}`;
  }
  function stringToHex(value) {
    return u8aToHex(stringToU8a(value));
  }
  const util$2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    BN,
    BN_BILLION,
    BN_EIGHT,
    BN_FIVE,
    BN_FOUR,
    BN_HUNDRED,
    BN_MAX_INTEGER,
    BN_MILLION,
    BN_NINE,
    BN_ONE,
    BN_QUINTILL,
    BN_SEVEN,
    BN_SIX,
    BN_SQRT_MAX_INTEGER,
    BN_TEN,
    BN_THOUSAND,
    BN_THREE,
    BN_TWO,
    BN_ZERO,
    U8A_WRAP_ETHEREUM,
    U8A_WRAP_POSTFIX,
    U8A_WRAP_PREFIX,
    _0n: _0n$6,
    _1000n,
    _100n,
    _10n: _10n$1,
    _1Bn,
    _1Mn,
    _1Qn,
    _1n: _1n$8,
    _2n: _2n$6,
    _2pow53n,
    _3n: _3n$2,
    _4n: _4n$1,
    _5n: _5n$2,
    _6n,
    _7n: _7n$2,
    _8n: _8n$2,
    _9n,
    _sqrt2pow53n,
    arrayChunk,
    arrayFilter,
    arrayFlatten,
    arrayRange,
    arrayShuffle,
    arrayUnzip,
    arrayZip,
    assert: assert$1,
    assertReturn,
    assertUnreachable,
    bnFromHex: hexToBn,
    bnMax,
    bnMin,
    bnSqrt,
    bnToBn,
    bnToHex,
    bnToU8a,
    bufferToU8a,
    calcSi,
    compactAddLength,
    compactFromU8a,
    compactFromU8aLim,
    compactStripLength,
    compactToU8a,
    detectPackage,
    extractTime,
    findSi,
    floatToU8a,
    formatBalance,
    formatDate,
    formatDecimal,
    formatElapsed,
    formatNumber,
    hasBigInt,
    hasBuffer,
    hasCjs,
    hasDirname,
    hasEsm,
    hasProcess,
    hasWasm,
    hexAddPrefix,
    hexFixLength,
    hexHasPrefix,
    hexStripPrefix,
    hexToBigInt,
    hexToBn,
    hexToNumber: hexToNumber$1,
    hexToString,
    hexToU8a,
    identity: identity$2,
    isArray: isArray$3,
    isAscii,
    isBigInt,
    isBn,
    isBoolean,
    isBuffer: isBuffer$1,
    isChildClass,
    isClass,
    isCodec,
    isCompact,
    isError,
    isFunction: isFunction$2,
    isHex,
    isInstanceOf,
    isIp,
    isJsonObject,
    isNull,
    isNumber: isNumber$1,
    isObject: isObject$2,
    isObservable,
    isPromise: isPromise$3,
    isString: isString$1,
    isTestChain,
    isToBigInt,
    isToBn: isToBn$1,
    isU8a,
    isUndefined: isUndefined$1,
    isUtf8,
    isWasm,
    lazyMethod,
    lazyMethods,
    logger,
    loggerFormat,
    memoize: memoize$2,
    nMax,
    nMin,
    nSqrt,
    nToBigInt,
    nToHex,
    nToU8a,
    nextTick,
    noop: noop$3,
    numberToHex,
    numberToU8a,
    objectClear,
    objectCopy,
    objectEntries,
    objectKeys,
    objectProperties,
    objectProperty,
    objectSpread,
    objectValues,
    packageInfo: packageInfo$1,
    promisify,
    stringCamelCase,
    stringLowerFirst,
    stringPascalCase,
    stringShorten,
    stringToHex,
    stringToU8a,
    stringUpperFirst,
    stringify: stringify$1,
    u8aCmp,
    u8aConcat,
    u8aConcatStrict,
    u8aEmpty,
    u8aEq,
    u8aFixLength,
    u8aIsWrapped,
    u8aSorted,
    u8aToBigInt,
    u8aToBn,
    u8aToBuffer,
    u8aToFloat,
    u8aToHex,
    u8aToNumber,
    u8aToString,
    u8aToU8a,
    u8aUnwrapBytes,
    u8aWrapBytes
  }, Symbol.toStringTag, { value: "Module" }));
  const WIDGET$1 = {
    SELECT_ALL: "Select all images containing a",
    NEXT: "Next",
    SUBMIT: "Submit",
    CANCEL: "Cancel",
    SELECT_ACCOUNT: "Select account",
    NO_ACCOUNTS_FOUND: "No accounts found",
    ACCOUNT_NOT_FOUND: "Account not found",
    NO_EXTENSION_FOUND: "No extension found",
    EXTENSION_NOT_FOUND: "Extension not found"
  };
  const GENERAL$1 = {
    BAD_SURI: "Bad SURI",
    CANNOT_FIND_CONFIG_FILE: "prosopo.config.js / prosopo.config.ts cannot be found.",
    JSON_LOAD_FAILED: "Failed to load JSON file",
    CREATE_JSON_FILE_FAILED: "Failed to create JSON file",
    ASSERT_ERROR: "AssertionError",
    GENERATE_CPATCHAS_JSON_FAILED: "Something went wrong while creating captchas json file",
    CALCULATE_CAPTCHA_SOLUTION: "Something went wrong while calculating captcha solutions",
    MNEMONIC_UNDEFINED: "Provider mnemonic Undefined. Please set `PROVIDER_MNEMONIC` in environment variables",
    NO_MNEMONIC_OR_SEED: "No mnemonic or seed provided",
    ASYNC_FACTORY_CREATE: "Use `create` factory method",
    CANT_FIND_KEYRINGPAIR: "Can't find the keyringpair for {{address}}",
    ENVIRONMENT_NOT_READY: "Environment not ready",
    INVALID_SIGNATURE: "Invalid signature",
    PAIR_TYPE_UNDEFINED: "Pair type undefined",
    NOT_IMPLEMENTED: "Not implemented"
  };
  const CONTRACT$1 = {
    INVALID_METHOD: "Invalid contract method",
    TX_ERROR: "Error making tx",
    QUERY_ERROR: "Error making query",
    INVALID_ADDRESS: "Failed to encode invalid address",
    INVALID_STORAGE_NAME: "Failed to find given storage name",
    CAPTCHA_SOLUTION_COMMITMENT_DOES_NOT_EXIST: "Captcha solution commitment does not exist",
    DAPP_NOT_ACTIVE: "Dapp is not active",
    CONTRACT_UNDEFINED: "Contract undefined",
    SIGNER_UNDEFINED: "Signer undefined",
    SIGNER_NOT_SUPPORTED: "Signer is not supported. Use connect instead, e.g. contract.connect(signer)",
    CANNOT_FIND_KEYPAIR: "Cannot find keypair",
    INVALID_TYPE: "Invalid type",
    INVALID_ABI: "Invalid ABI",
    NOT_HANDLED: "Not handled",
    INVALID_STORAGE_TYPE: "Invalid storage type"
  };
  const CONFIG$1 = {
    UNKNOWN_ENVIRONMENT: "Unknown environment requested",
    INVALID_CAPTCHA_NUMBER: "Please configure captchas configurations correctly",
    CONFIGURATIONS_LOAD_FAILED: "Prosopo configurations load failed",
    INVALID_LOG_LEVEL: "Invalid log level"
  };
  const DATASET$1 = {
    PARSE_ERROR: "Error parsing dataset",
    HASH_ERROR: "Error hashing dataset",
    INVALID_DATASET_ID: "Invalid dataset id",
    DATASET_ID_UNDEFINED: "Dataset id undefined",
    NOT_ENOUGH_LABELS: "Not enough labels",
    NOT_ENOUGH_IMAGES: "Not enough images",
    CAPTCHAS_COUNT_LESS_THAN_CONFIGURED: "Number of captchas in dataset is less than configured number of captchas",
    SOLUTIONS_COUNT_LESS_THAN_CONFIGURED: "Number of solutions in dataset is less than configured number of solutions"
  };
  const DATABASE$1 = {
    CONNECT_ERROR: "Failed to connect",
    DATABASE_IMPORT_FAILED: "Failed to import database engine",
    DATABASE_UNDEFINED: "Database client is not connected",
    COLLECTION_UNDEFINED: "Database collection is not available",
    DATASET_LOAD_FAILED: "Data set load failed",
    DATASET_GET_FAILED: "Failed to get dataset",
    CAPTCHA_GET_FAILED: "Failed to get captcha",
    NO_CAPTCHAS_FOUND: "No captcha matching datasetId",
    PENDING_RECORD_NOT_FOUND: "No pending record found",
    INVALID_HASH: "Invalid hash",
    SOLUTION_GET_FAILED: "Failed to get solution",
    DATASET_WITH_SOLUTIONS_GET_FAILED: "No datasets found with required number of solutions",
    SOLUTION_APPROVE_FAILED: "Failed to approve solution",
    SOLUTION_FLAG_FAILED: "Failed to flag solution as processed",
    COMMITMENT_FLAG_FAILED: "Failed to flag commitment as processed"
  };
  const CAPTCHA$1 = {
    PARSE_ERROR: "Error parsing captcha",
    INVALID_CAPTCHA_ID: "Invalid captcha id",
    SOLUTION_HASH_ERROR: "Error hashing solution",
    INVALID_ITEM_FORMAT: "Only image and text item types allowed",
    INVALID_ITEM_HASH: "Invalid item hash",
    DIFFERENT_DATASET_IDS: "Dataset ids do not match",
    INVALID_BLOCK_NO: "Invalid block number",
    ID_MISMATCH: "captcha id mismatch",
    MISSING_ITEM_HASH: "missing item hash",
    INVALID_LEAF_HASH: "Invalid leaf hash",
    INVALID_CAPTCHA_CHALLENGE: "Invalid captcha challenge",
    INVALID_DATASET_CONTENT_ID: "Invalid dataset content id",
    DAPP_USER_SOLUTION_NOT_FOUND: "Dapp user solution not found",
    INVALID_PROVIDER_URL: "Invalid provider url"
  };
  const API$1 = {
    BODY_UNDEFINED: "Body must be defined in API POST call",
    PARAMETER_UNDEFINED: "Parameters must be defined in API POST call",
    CAPTCHA_FAILED: "You answered one or more captchas incorrectly. Please try again",
    CAPTCHA_PENDING: "Captcha solutions submitted and awaiting approval",
    CAPTCHA_PASSED: "You correctly answered the captchas",
    BAD_REQUEST: "BadRequest",
    PAYMENT_INFO_NOT_FOUND: "Payment info not found for given block and transaction hashes",
    USER_VERIFIED: "User verified",
    USER_NOT_VERIFIED: "User not verified"
  };
  const CLI$1 = {
    PARAMETER_ERROR: "Invalid parameter"
  };
  const DEVELOPER$1 = {
    DAPP_SITE_KEY_MISSING: "DAPP_SITE_KEY is not set in .env file.",
    BALANCE_TOO_LOW: "{{mnemonic}} balance too low: {{balance}}",
    CAPTCHA_ID_MISSING: "Cannot find captcha data id",
    COMMITMENT_ID_MISSING: "Commitment id missing",
    PROVIDER_NOT_FOUND: "Provider not found",
    CREATE_ACCOUNT_FAILED: "Could not create an account!",
    CREATE_ACCOUNT_FAILED_OUT_OF_FUNDS: "Could not create an account as there are no funds. Restart the substrate node.",
    NO_MOCK_ENV: "MockEnvironment not set up",
    ACCOUNT_TYPE_MISSING: "{{accountType}} not created by databasePopulator",
    FUNDING_FAILED: "Funding failed",
    MISSING_PROVIDER_PAIR: "Missing provider pair"
  };
  const FS = {
    DIRECTORY_NOT_FOUND: "Directory not found",
    FILE_NOT_FOUND: "File not found",
    FILE_ALREADY_EXISTS: "File already exists",
    DIRECTORY_ALREADY_EXISTS: "Directory already exists"
  };
  const translationEn = {
    WIDGET: WIDGET$1,
    GENERAL: GENERAL$1,
    CONTRACT: CONTRACT$1,
    CONFIG: CONFIG$1,
    DATASET: DATASET$1,
    DATABASE: DATABASE$1,
    CAPTCHA: CAPTCHA$1,
    API: API$1,
    CLI: CLI$1,
    DEVELOPER: DEVELOPER$1,
    FS
  };
  function isClientSide() {
    return !!(typeof window !== "undefined" && window.document && window.document.createElement);
  }
  function getLeafFieldPath(obj) {
    if (typeof obj === "string") {
      return [obj];
    }
    return Object.keys(obj).reduce((arr2, key) => {
      const value = obj[key];
      if (value === void 0) {
        throw new Error(`Undefined value for key ${key}`);
      }
      const children = getLeafFieldPath(value);
      return arr2.concat(children.map((child) => {
        return `${key}.${child}`;
      }));
    }, []);
  }
  const translationKeys = getLeafFieldPath(translationEn);
  const trimProviderUrl = (url) => {
    return hexToString(url).replace(/\0/g, "");
  };
  function snakeToCamelCase(str) {
    return str.replace(/([-_][a-z])/g, (group) => group.toUpperCase().replace("-", "").replace("_", ""));
  }
  function reverseHexString(str) {
    var _a;
    return `0x${((_a = str.match(/.{1,2}/g)) == null ? void 0 : _a.reverse().join("")) || ""}`;
  }
  function _typeof$1(obj) {
    "@babel/helpers - typeof";
    return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof$1(obj);
  }
  var arr$1 = [];
  var each$1 = arr$1.forEach;
  var slice$2 = arr$1.slice;
  function defaults$7(obj) {
    each$1.call(slice$2.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] === void 0)
            obj[prop] = source[prop];
        }
      }
    });
    return obj;
  }
  function hasXMLHttpRequest() {
    return typeof XMLHttpRequest === "function" || (typeof XMLHttpRequest === "undefined" ? "undefined" : _typeof$1(XMLHttpRequest)) === "object";
  }
  function isPromise$2(maybePromise) {
    return !!maybePromise && typeof maybePromise.then === "function";
  }
  function makePromise(maybePromise) {
    if (isPromise$2(maybePromise)) {
      return maybePromise;
    }
    return Promise.resolve(maybePromise);
  }
  var getFetch$1 = { exports: {} };
  var browserPonyfill = { exports: {} };
  var hasRequiredBrowserPonyfill;
  function requireBrowserPonyfill() {
    if (hasRequiredBrowserPonyfill)
      return browserPonyfill.exports;
    hasRequiredBrowserPonyfill = 1;
    (function(module2, exports2) {
      var global2 = typeof self !== "undefined" ? self : commonjsGlobal;
      var __self__ = function() {
        function F() {
          this.fetch = false;
          this.DOMException = global2.DOMException;
        }
        F.prototype = global2;
        return new F();
      }();
      (function(self2) {
        (function(exports3) {
          var support = {
            searchParams: "URLSearchParams" in self2,
            iterable: "Symbol" in self2 && "iterator" in Symbol,
            blob: "FileReader" in self2 && "Blob" in self2 && function() {
              try {
                new Blob();
                return true;
              } catch (e) {
                return false;
              }
            }(),
            formData: "FormData" in self2,
            arrayBuffer: "ArrayBuffer" in self2
          };
          function isDataView(obj) {
            return obj && DataView.prototype.isPrototypeOf(obj);
          }
          if (support.arrayBuffer) {
            var viewClasses = [
              "[object Int8Array]",
              "[object Uint8Array]",
              "[object Uint8ClampedArray]",
              "[object Int16Array]",
              "[object Uint16Array]",
              "[object Int32Array]",
              "[object Uint32Array]",
              "[object Float32Array]",
              "[object Float64Array]"
            ];
            var isArrayBufferView2 = ArrayBuffer.isView || function(obj) {
              return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
            };
          }
          function normalizeName(name) {
            if (typeof name !== "string") {
              name = String(name);
            }
            if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
              throw new TypeError("Invalid character in header field name");
            }
            return name.toLowerCase();
          }
          function normalizeValue(value) {
            if (typeof value !== "string") {
              value = String(value);
            }
            return value;
          }
          function iteratorFor(items) {
            var iterator2 = {
              next: function() {
                var value = items.shift();
                return { done: value === void 0, value };
              }
            };
            if (support.iterable) {
              iterator2[Symbol.iterator] = function() {
                return iterator2;
              };
            }
            return iterator2;
          }
          function Headers(headers) {
            this.map = {};
            if (headers instanceof Headers) {
              headers.forEach(function(value, name) {
                this.append(name, value);
              }, this);
            } else if (Array.isArray(headers)) {
              headers.forEach(function(header) {
                this.append(header[0], header[1]);
              }, this);
            } else if (headers) {
              Object.getOwnPropertyNames(headers).forEach(function(name) {
                this.append(name, headers[name]);
              }, this);
            }
          }
          Headers.prototype.append = function(name, value) {
            name = normalizeName(name);
            value = normalizeValue(value);
            var oldValue = this.map[name];
            this.map[name] = oldValue ? oldValue + ", " + value : value;
          };
          Headers.prototype["delete"] = function(name) {
            delete this.map[normalizeName(name)];
          };
          Headers.prototype.get = function(name) {
            name = normalizeName(name);
            return this.has(name) ? this.map[name] : null;
          };
          Headers.prototype.has = function(name) {
            return this.map.hasOwnProperty(normalizeName(name));
          };
          Headers.prototype.set = function(name, value) {
            this.map[normalizeName(name)] = normalizeValue(value);
          };
          Headers.prototype.forEach = function(callback, thisArg) {
            for (var name in this.map) {
              if (this.map.hasOwnProperty(name)) {
                callback.call(thisArg, this.map[name], name, this);
              }
            }
          };
          Headers.prototype.keys = function() {
            var items = [];
            this.forEach(function(value, name) {
              items.push(name);
            });
            return iteratorFor(items);
          };
          Headers.prototype.values = function() {
            var items = [];
            this.forEach(function(value) {
              items.push(value);
            });
            return iteratorFor(items);
          };
          Headers.prototype.entries = function() {
            var items = [];
            this.forEach(function(value, name) {
              items.push([name, value]);
            });
            return iteratorFor(items);
          };
          if (support.iterable) {
            Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
          }
          function consumed(body) {
            if (body.bodyUsed) {
              return Promise.reject(new TypeError("Already read"));
            }
            body.bodyUsed = true;
          }
          function fileReaderReady(reader) {
            return new Promise(function(resolve, reject) {
              reader.onload = function() {
                resolve(reader.result);
              };
              reader.onerror = function() {
                reject(reader.error);
              };
            });
          }
          function readBlobAsArrayBuffer(blob) {
            var reader = new FileReader();
            var promise = fileReaderReady(reader);
            reader.readAsArrayBuffer(blob);
            return promise;
          }
          function readBlobAsText(blob) {
            var reader = new FileReader();
            var promise = fileReaderReady(reader);
            reader.readAsText(blob);
            return promise;
          }
          function readArrayBufferAsText(buf) {
            var view = new Uint8Array(buf);
            var chars2 = new Array(view.length);
            for (var i2 = 0; i2 < view.length; i2++) {
              chars2[i2] = String.fromCharCode(view[i2]);
            }
            return chars2.join("");
          }
          function bufferClone(buf) {
            if (buf.slice) {
              return buf.slice(0);
            } else {
              var view = new Uint8Array(buf.byteLength);
              view.set(new Uint8Array(buf));
              return view.buffer;
            }
          }
          function Body() {
            this.bodyUsed = false;
            this._initBody = function(body) {
              this._bodyInit = body;
              if (!body) {
                this._bodyText = "";
              } else if (typeof body === "string") {
                this._bodyText = body;
              } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
                this._bodyBlob = body;
              } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
                this._bodyFormData = body;
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this._bodyText = body.toString();
              } else if (support.arrayBuffer && support.blob && isDataView(body)) {
                this._bodyArrayBuffer = bufferClone(body.buffer);
                this._bodyInit = new Blob([this._bodyArrayBuffer]);
              } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView2(body))) {
                this._bodyArrayBuffer = bufferClone(body);
              } else {
                this._bodyText = body = Object.prototype.toString.call(body);
              }
              if (!this.headers.get("content-type")) {
                if (typeof body === "string") {
                  this.headers.set("content-type", "text/plain;charset=UTF-8");
                } else if (this._bodyBlob && this._bodyBlob.type) {
                  this.headers.set("content-type", this._bodyBlob.type);
                } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                  this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
                }
              }
            };
            if (support.blob) {
              this.blob = function() {
                var rejected = consumed(this);
                if (rejected) {
                  return rejected;
                }
                if (this._bodyBlob) {
                  return Promise.resolve(this._bodyBlob);
                } else if (this._bodyArrayBuffer) {
                  return Promise.resolve(new Blob([this._bodyArrayBuffer]));
                } else if (this._bodyFormData) {
                  throw new Error("could not read FormData body as blob");
                } else {
                  return Promise.resolve(new Blob([this._bodyText]));
                }
              };
              this.arrayBuffer = function() {
                if (this._bodyArrayBuffer) {
                  return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
                } else {
                  return this.blob().then(readBlobAsArrayBuffer);
                }
              };
            }
            this.text = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return readBlobAsText(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as text");
              } else {
                return Promise.resolve(this._bodyText);
              }
            };
            if (support.formData) {
              this.formData = function() {
                return this.text().then(decode2);
              };
            }
            this.json = function() {
              return this.text().then(JSON.parse);
            };
            return this;
          }
          var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
          function normalizeMethod(method) {
            var upcased = method.toUpperCase();
            return methods.indexOf(upcased) > -1 ? upcased : method;
          }
          function Request(input, options) {
            options = options || {};
            var body = options.body;
            if (input instanceof Request) {
              if (input.bodyUsed) {
                throw new TypeError("Already read");
              }
              this.url = input.url;
              this.credentials = input.credentials;
              if (!options.headers) {
                this.headers = new Headers(input.headers);
              }
              this.method = input.method;
              this.mode = input.mode;
              this.signal = input.signal;
              if (!body && input._bodyInit != null) {
                body = input._bodyInit;
                input.bodyUsed = true;
              }
            } else {
              this.url = String(input);
            }
            this.credentials = options.credentials || this.credentials || "same-origin";
            if (options.headers || !this.headers) {
              this.headers = new Headers(options.headers);
            }
            this.method = normalizeMethod(options.method || this.method || "GET");
            this.mode = options.mode || this.mode || null;
            this.signal = options.signal || this.signal;
            this.referrer = null;
            if ((this.method === "GET" || this.method === "HEAD") && body) {
              throw new TypeError("Body not allowed for GET or HEAD requests");
            }
            this._initBody(body);
          }
          Request.prototype.clone = function() {
            return new Request(this, { body: this._bodyInit });
          };
          function decode2(body) {
            var form = new FormData();
            body.trim().split("&").forEach(function(bytes2) {
              if (bytes2) {
                var split2 = bytes2.split("=");
                var name = split2.shift().replace(/\+/g, " ");
                var value = split2.join("=").replace(/\+/g, " ");
                form.append(decodeURIComponent(name), decodeURIComponent(value));
              }
            });
            return form;
          }
          function parseHeaders2(rawHeaders) {
            var headers = new Headers();
            var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
            preProcessedHeaders.split(/\r?\n/).forEach(function(line2) {
              var parts = line2.split(":");
              var key = parts.shift().trim();
              if (key) {
                var value = parts.join(":").trim();
                headers.append(key, value);
              }
            });
            return headers;
          }
          Body.call(Request.prototype);
          function Response(bodyInit, options) {
            if (!options) {
              options = {};
            }
            this.type = "default";
            this.status = options.status === void 0 ? 200 : options.status;
            this.ok = this.status >= 200 && this.status < 300;
            this.statusText = "statusText" in options ? options.statusText : "OK";
            this.headers = new Headers(options.headers);
            this.url = options.url || "";
            this._initBody(bodyInit);
          }
          Body.call(Response.prototype);
          Response.prototype.clone = function() {
            return new Response(this._bodyInit, {
              status: this.status,
              statusText: this.statusText,
              headers: new Headers(this.headers),
              url: this.url
            });
          };
          Response.error = function() {
            var response = new Response(null, { status: 0, statusText: "" });
            response.type = "error";
            return response;
          };
          var redirectStatuses = [301, 302, 303, 307, 308];
          Response.redirect = function(url, status) {
            if (redirectStatuses.indexOf(status) === -1) {
              throw new RangeError("Invalid status code");
            }
            return new Response(null, { status, headers: { location: url } });
          };
          exports3.DOMException = self2.DOMException;
          try {
            new exports3.DOMException();
          } catch (err) {
            exports3.DOMException = function(message, name) {
              this.message = message;
              this.name = name;
              var error = Error(message);
              this.stack = error.stack;
            };
            exports3.DOMException.prototype = Object.create(Error.prototype);
            exports3.DOMException.prototype.constructor = exports3.DOMException;
          }
          function fetch2(input, init2) {
            return new Promise(function(resolve, reject) {
              var request2 = new Request(input, init2);
              if (request2.signal && request2.signal.aborted) {
                return reject(new exports3.DOMException("Aborted", "AbortError"));
              }
              var xhr2 = new XMLHttpRequest();
              function abortXhr() {
                xhr2.abort();
              }
              xhr2.onload = function() {
                var options = {
                  status: xhr2.status,
                  statusText: xhr2.statusText,
                  headers: parseHeaders2(xhr2.getAllResponseHeaders() || "")
                };
                options.url = "responseURL" in xhr2 ? xhr2.responseURL : options.headers.get("X-Request-URL");
                var body = "response" in xhr2 ? xhr2.response : xhr2.responseText;
                resolve(new Response(body, options));
              };
              xhr2.onerror = function() {
                reject(new TypeError("Network request failed"));
              };
              xhr2.ontimeout = function() {
                reject(new TypeError("Network request failed"));
              };
              xhr2.onabort = function() {
                reject(new exports3.DOMException("Aborted", "AbortError"));
              };
              xhr2.open(request2.method, request2.url, true);
              if (request2.credentials === "include") {
                xhr2.withCredentials = true;
              } else if (request2.credentials === "omit") {
                xhr2.withCredentials = false;
              }
              if ("responseType" in xhr2 && support.blob) {
                xhr2.responseType = "blob";
              }
              request2.headers.forEach(function(value, name) {
                xhr2.setRequestHeader(name, value);
              });
              if (request2.signal) {
                request2.signal.addEventListener("abort", abortXhr);
                xhr2.onreadystatechange = function() {
                  if (xhr2.readyState === 4) {
                    request2.signal.removeEventListener("abort", abortXhr);
                  }
                };
              }
              xhr2.send(typeof request2._bodyInit === "undefined" ? null : request2._bodyInit);
            });
          }
          fetch2.polyfill = true;
          if (!self2.fetch) {
            self2.fetch = fetch2;
            self2.Headers = Headers;
            self2.Request = Request;
            self2.Response = Response;
          }
          exports3.Headers = Headers;
          exports3.Request = Request;
          exports3.Response = Response;
          exports3.fetch = fetch2;
          Object.defineProperty(exports3, "__esModule", { value: true });
          return exports3;
        })({});
      })(__self__);
      __self__.fetch.ponyfill = true;
      delete __self__.fetch.polyfill;
      var ctx = __self__;
      exports2 = ctx.fetch;
      exports2.default = ctx.fetch;
      exports2.fetch = ctx.fetch;
      exports2.Headers = ctx.Headers;
      exports2.Request = ctx.Request;
      exports2.Response = ctx.Response;
      module2.exports = exports2;
    })(browserPonyfill, browserPonyfill.exports);
    return browserPonyfill.exports;
  }
  (function(module2, exports2) {
    var fetchApi2;
    if (typeof fetch === "function") {
      if (typeof commonjsGlobal !== "undefined" && commonjsGlobal.fetch) {
        fetchApi2 = commonjsGlobal.fetch;
      } else if (typeof window !== "undefined" && window.fetch) {
        fetchApi2 = window.fetch;
      } else {
        fetchApi2 = fetch;
      }
    }
    if (typeof commonjsRequire !== "undefined" && (typeof window === "undefined" || typeof window.document === "undefined")) {
      var f = fetchApi2 || requireBrowserPonyfill();
      if (f.default)
        f = f.default;
      exports2.default = f;
      module2.exports = exports2.default;
    }
  })(getFetch$1, getFetch$1.exports);
  var getFetchExports = getFetch$1.exports;
  const getFetch = /* @__PURE__ */ getDefaultExportFromCjs(getFetchExports);
  const fetchNode = /* @__PURE__ */ _mergeNamespaces({
    __proto__: null,
    default: getFetch
  }, [getFetchExports]);
  function _typeof(obj) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof(obj);
  }
  var fetchApi;
  if (typeof fetch === "function") {
    if (typeof global !== "undefined" && global.fetch) {
      fetchApi = global.fetch;
    } else if (typeof window !== "undefined" && window.fetch) {
      fetchApi = window.fetch;
    } else {
      fetchApi = fetch;
    }
  }
  var XmlHttpRequestApi;
  if (hasXMLHttpRequest()) {
    if (typeof global !== "undefined" && global.XMLHttpRequest) {
      XmlHttpRequestApi = global.XMLHttpRequest;
    } else if (typeof window !== "undefined" && window.XMLHttpRequest) {
      XmlHttpRequestApi = window.XMLHttpRequest;
    }
  }
  var ActiveXObjectApi;
  if (typeof ActiveXObject === "function") {
    if (typeof global !== "undefined" && global.ActiveXObject) {
      ActiveXObjectApi = global.ActiveXObject;
    } else if (typeof window !== "undefined" && window.ActiveXObject) {
      ActiveXObjectApi = window.ActiveXObject;
    }
  }
  if (!fetchApi && fetchNode && !XmlHttpRequestApi && !ActiveXObjectApi)
    fetchApi = getFetch || fetchNode;
  if (typeof fetchApi !== "function")
    fetchApi = void 0;
  var addQueryString = function addQueryString2(url, params) {
    if (params && _typeof(params) === "object") {
      var queryString = "";
      for (var paramName in params) {
        queryString += "&" + encodeURIComponent(paramName) + "=" + encodeURIComponent(params[paramName]);
      }
      if (!queryString)
        return url;
      url = url + (url.indexOf("?") !== -1 ? "&" : "?") + queryString.slice(1);
    }
    return url;
  };
  var fetchIt = function fetchIt2(url, fetchOptions, callback) {
    fetchApi(url, fetchOptions).then(function(response) {
      if (!response.ok)
        return callback(response.statusText || "Error", {
          status: response.status
        });
      response.text().then(function(data2) {
        callback(null, {
          status: response.status,
          data: data2
        });
      }).catch(callback);
    }).catch(callback);
  };
  var omitFetchOptions = false;
  var requestWithFetch = function requestWithFetch2(options, url, payload, callback) {
    if (options.queryStringParams) {
      url = addQueryString(url, options.queryStringParams);
    }
    var headers = defaults$7({}, typeof options.customHeaders === "function" ? options.customHeaders() : options.customHeaders);
    if (payload)
      headers["Content-Type"] = "application/json";
    var reqOptions = typeof options.requestOptions === "function" ? options.requestOptions(payload) : options.requestOptions;
    var fetchOptions = defaults$7({
      method: payload ? "POST" : "GET",
      body: payload ? options.stringify(payload) : void 0,
      headers
    }, omitFetchOptions ? {} : reqOptions);
    try {
      fetchIt(url, fetchOptions, callback);
    } catch (e) {
      if (!reqOptions || Object.keys(reqOptions).length === 0 || !e.message || e.message.indexOf("not implemented") < 0) {
        return callback(e);
      }
      try {
        Object.keys(reqOptions).forEach(function(opt) {
          delete fetchOptions[opt];
        });
        fetchIt(url, fetchOptions, callback);
        omitFetchOptions = true;
      } catch (err) {
        callback(err);
      }
    }
  };
  var requestWithXmlHttpRequest = function requestWithXmlHttpRequest2(options, url, payload, callback) {
    if (payload && _typeof(payload) === "object") {
      payload = addQueryString("", payload).slice(1);
    }
    if (options.queryStringParams) {
      url = addQueryString(url, options.queryStringParams);
    }
    try {
      var x;
      if (XmlHttpRequestApi) {
        x = new XmlHttpRequestApi();
      } else {
        x = new ActiveXObjectApi("MSXML2.XMLHTTP.3.0");
      }
      x.open(payload ? "POST" : "GET", url, 1);
      if (!options.crossDomain) {
        x.setRequestHeader("X-Requested-With", "XMLHttpRequest");
      }
      x.withCredentials = !!options.withCredentials;
      if (payload) {
        x.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      }
      if (x.overrideMimeType) {
        x.overrideMimeType("application/json");
      }
      var h = options.customHeaders;
      h = typeof h === "function" ? h() : h;
      if (h) {
        for (var i2 in h) {
          x.setRequestHeader(i2, h[i2]);
        }
      }
      x.onreadystatechange = function() {
        x.readyState > 3 && callback(x.status >= 400 ? x.statusText : null, {
          status: x.status,
          data: x.responseText
        });
      };
      x.send(payload);
    } catch (e) {
      console && console.log(e);
    }
  };
  var request = function request2(options, url, payload, callback) {
    if (typeof payload === "function") {
      callback = payload;
      payload = void 0;
    }
    callback = callback || function() {
    };
    if (fetchApi) {
      return requestWithFetch(options, url, payload, callback);
    }
    if (hasXMLHttpRequest() || typeof ActiveXObject === "function") {
      return requestWithXmlHttpRequest(options, url, payload, callback);
    }
    callback(new Error("No fetch and no xhr implementation found!"));
  };
  function _classCallCheck(instance2, Constructor) {
    if (!(instance2 instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i2 = 0; i2 < props.length; i2++) {
      var descriptor = props[i2];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  }
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var getDefaults$1 = function getDefaults2() {
    return {
      loadPath: "/locales/{{lng}}/{{ns}}.json",
      addPath: "/locales/add/{{lng}}/{{ns}}",
      allowMultiLoading: false,
      parse: function parse2(data2) {
        return JSON.parse(data2);
      },
      stringify: JSON.stringify,
      parsePayload: function parsePayload(namespace, key, fallbackValue) {
        return _defineProperty({}, key, fallbackValue || "");
      },
      request,
      reloadInterval: typeof window !== "undefined" ? false : 60 * 60 * 1e3,
      customHeaders: {},
      queryStringParams: {},
      crossDomain: false,
      withCredentials: false,
      overrideMimeType: false,
      requestOptions: {
        mode: "cors",
        credentials: "same-origin",
        cache: "default"
      }
    };
  };
  var Backend = function() {
    function Backend2(services) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var allOptions = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      _classCallCheck(this, Backend2);
      this.services = services;
      this.options = options;
      this.allOptions = allOptions;
      this.type = "backend";
      this.init(services, options, allOptions);
    }
    _createClass(Backend2, [{
      key: "init",
      value: function init2(services) {
        var _this = this;
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var allOptions = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        this.services = services;
        this.options = defaults$7(options, this.options || {}, getDefaults$1());
        this.allOptions = allOptions;
        if (this.services && this.options.reloadInterval) {
          setInterval(function() {
            return _this.reload();
          }, this.options.reloadInterval);
        }
      }
    }, {
      key: "readMulti",
      value: function readMulti(languages, namespaces, callback) {
        this._readAny(languages, languages, namespaces, namespaces, callback);
      }
    }, {
      key: "read",
      value: function read(language, namespace, callback) {
        this._readAny([language], language, [namespace], namespace, callback);
      }
    }, {
      key: "_readAny",
      value: function _readAny(languages, loadUrlLanguages, namespaces, loadUrlNamespaces, callback) {
        var _this2 = this;
        var loadPath = this.options.loadPath;
        if (typeof this.options.loadPath === "function") {
          loadPath = this.options.loadPath(languages, namespaces);
        }
        loadPath = makePromise(loadPath);
        loadPath.then(function(resolvedLoadPath) {
          if (!resolvedLoadPath)
            return callback(null, {});
          var url = _this2.services.interpolator.interpolate(resolvedLoadPath, {
            lng: languages.join("+"),
            ns: namespaces.join("+")
          });
          _this2.loadUrl(url, callback, loadUrlLanguages, loadUrlNamespaces);
        });
      }
    }, {
      key: "loadUrl",
      value: function loadUrl(url, callback, languages, namespaces) {
        var _this3 = this;
        this.options.request(this.options, url, void 0, function(err, res) {
          if (res && (res.status >= 500 && res.status < 600 || !res.status))
            return callback("failed loading " + url + "; status code: " + res.status, true);
          if (res && res.status >= 400 && res.status < 500)
            return callback("failed loading " + url + "; status code: " + res.status, false);
          if (!res && err && err.message && err.message.indexOf("Failed to fetch") > -1)
            return callback("failed loading " + url + ": " + err.message, true);
          if (err)
            return callback(err, false);
          var ret, parseErr;
          try {
            if (typeof res.data === "string") {
              ret = _this3.options.parse(res.data, languages, namespaces);
            } else {
              ret = res.data;
            }
          } catch (e) {
            parseErr = "failed parsing " + url + " to json";
          }
          if (parseErr)
            return callback(parseErr, false);
          callback(null, ret);
        });
      }
    }, {
      key: "create",
      value: function create(languages, namespace, key, fallbackValue, callback) {
        var _this4 = this;
        if (!this.options.addPath)
          return;
        if (typeof languages === "string")
          languages = [languages];
        var payload = this.options.parsePayload(namespace, key, fallbackValue);
        var finished = 0;
        var dataArray = [];
        var resArray = [];
        languages.forEach(function(lng) {
          var addPath = _this4.options.addPath;
          if (typeof _this4.options.addPath === "function") {
            addPath = _this4.options.addPath(lng, namespace);
          }
          var url = _this4.services.interpolator.interpolate(addPath, {
            lng,
            ns: namespace
          });
          _this4.options.request(_this4.options, url, payload, function(data2, res) {
            finished += 1;
            dataArray.push(data2);
            resArray.push(res);
            if (finished === languages.length) {
              if (callback)
                callback(dataArray, resArray);
            }
          });
        });
      }
    }, {
      key: "reload",
      value: function reload() {
        var _this5 = this;
        var _this$services = this.services, backendConnector = _this$services.backendConnector, languageUtils = _this$services.languageUtils, logger2 = _this$services.logger;
        var currentLanguage = backendConnector.language;
        if (currentLanguage && currentLanguage.toLowerCase() === "cimode")
          return;
        var toLoad = [];
        var append2 = function append3(lng) {
          var lngs = languageUtils.toResolveHierarchy(lng);
          lngs.forEach(function(l2) {
            if (toLoad.indexOf(l2) < 0)
              toLoad.push(l2);
          });
        };
        append2(currentLanguage);
        if (this.allOptions.preload)
          this.allOptions.preload.forEach(function(l2) {
            return append2(l2);
          });
        toLoad.forEach(function(lng) {
          _this5.allOptions.ns.forEach(function(ns) {
            backendConnector.read(lng, ns, "read", null, null, function(err, data2) {
              if (err)
                logger2.warn("loading namespace ".concat(ns, " for language ").concat(lng, " failed"), err);
              if (!err && data2)
                logger2.log("loaded namespace ".concat(ns, " for language ").concat(lng), data2);
              backendConnector.loaded("".concat(lng, "|").concat(ns), err, data2);
            });
          });
        });
      }
    }]);
    return Backend2;
  }();
  Backend.type = "backend";
  var arr = [];
  var each = arr.forEach;
  var slice$1 = arr.slice;
  function defaults$6(obj) {
    each.call(slice$1.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] === void 0)
            obj[prop] = source[prop];
        }
      }
    });
    return obj;
  }
  var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
  var serializeCookie = function serializeCookie2(name, val, options) {
    var opt = options || {};
    opt.path = opt.path || "/";
    var value = encodeURIComponent(val);
    var str = "".concat(name, "=").concat(value);
    if (opt.maxAge > 0) {
      var maxAge = opt.maxAge - 0;
      if (Number.isNaN(maxAge))
        throw new Error("maxAge should be a Number");
      str += "; Max-Age=".concat(Math.floor(maxAge));
    }
    if (opt.domain) {
      if (!fieldContentRegExp.test(opt.domain)) {
        throw new TypeError("option domain is invalid");
      }
      str += "; Domain=".concat(opt.domain);
    }
    if (opt.path) {
      if (!fieldContentRegExp.test(opt.path)) {
        throw new TypeError("option path is invalid");
      }
      str += "; Path=".concat(opt.path);
    }
    if (opt.expires) {
      if (typeof opt.expires.toUTCString !== "function") {
        throw new TypeError("option expires is invalid");
      }
      str += "; Expires=".concat(opt.expires.toUTCString());
    }
    if (opt.httpOnly)
      str += "; HttpOnly";
    if (opt.secure)
      str += "; Secure";
    if (opt.sameSite) {
      var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
      switch (sameSite) {
        case true:
          str += "; SameSite=Strict";
          break;
        case "lax":
          str += "; SameSite=Lax";
          break;
        case "strict":
          str += "; SameSite=Strict";
          break;
        case "none":
          str += "; SameSite=None";
          break;
        default:
          throw new TypeError("option sameSite is invalid");
      }
    }
    return str;
  };
  var cookie = {
    create: function create(name, value, minutes, domain) {
      var cookieOptions = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
        path: "/",
        sameSite: "strict"
      };
      if (minutes) {
        cookieOptions.expires = /* @__PURE__ */ new Date();
        cookieOptions.expires.setTime(cookieOptions.expires.getTime() + minutes * 60 * 1e3);
      }
      if (domain)
        cookieOptions.domain = domain;
      document.cookie = serializeCookie(name, encodeURIComponent(value), cookieOptions);
    },
    read: function read(name) {
      var nameEQ = "".concat(name, "=");
      var ca = document.cookie.split(";");
      for (var i2 = 0; i2 < ca.length; i2++) {
        var c = ca[i2];
        while (c.charAt(0) === " ") {
          c = c.substring(1, c.length);
        }
        if (c.indexOf(nameEQ) === 0)
          return c.substring(nameEQ.length, c.length);
      }
      return null;
    },
    remove: function remove(name) {
      this.create(name, "", -1);
    }
  };
  var cookie$1 = {
    name: "cookie",
    lookup: function lookup(options) {
      var found;
      if (options.lookupCookie && typeof document !== "undefined") {
        var c = cookie.read(options.lookupCookie);
        if (c)
          found = c;
      }
      return found;
    },
    cacheUserLanguage: function cacheUserLanguage(lng, options) {
      if (options.lookupCookie && typeof document !== "undefined") {
        cookie.create(options.lookupCookie, lng, options.cookieMinutes, options.cookieDomain, options.cookieOptions);
      }
    }
  };
  var querystring = {
    name: "querystring",
    lookup: function lookup(options) {
      var found;
      if (typeof window !== "undefined") {
        var search = window.location.search;
        if (!window.location.search && window.location.hash && window.location.hash.indexOf("?") > -1) {
          search = window.location.hash.substring(window.location.hash.indexOf("?"));
        }
        var query2 = search.substring(1);
        var params = query2.split("&");
        for (var i2 = 0; i2 < params.length; i2++) {
          var pos = params[i2].indexOf("=");
          if (pos > 0) {
            var key = params[i2].substring(0, pos);
            if (key === options.lookupQuerystring) {
              found = params[i2].substring(pos + 1);
            }
          }
        }
      }
      return found;
    }
  };
  var hasLocalStorageSupport = null;
  var localStorageAvailable = function localStorageAvailable2() {
    if (hasLocalStorageSupport !== null)
      return hasLocalStorageSupport;
    try {
      hasLocalStorageSupport = window !== "undefined" && window.localStorage !== null;
      var testKey = "i18next.translate.boo";
      window.localStorage.setItem(testKey, "foo");
      window.localStorage.removeItem(testKey);
    } catch (e) {
      hasLocalStorageSupport = false;
    }
    return hasLocalStorageSupport;
  };
  var localStorage$1 = {
    name: "localStorage",
    lookup: function lookup(options) {
      var found;
      if (options.lookupLocalStorage && localStorageAvailable()) {
        var lng = window.localStorage.getItem(options.lookupLocalStorage);
        if (lng)
          found = lng;
      }
      return found;
    },
    cacheUserLanguage: function cacheUserLanguage(lng, options) {
      if (options.lookupLocalStorage && localStorageAvailable()) {
        window.localStorage.setItem(options.lookupLocalStorage, lng);
      }
    }
  };
  var hasSessionStorageSupport = null;
  var sessionStorageAvailable = function sessionStorageAvailable2() {
    if (hasSessionStorageSupport !== null)
      return hasSessionStorageSupport;
    try {
      hasSessionStorageSupport = window !== "undefined" && window.sessionStorage !== null;
      var testKey = "i18next.translate.boo";
      window.sessionStorage.setItem(testKey, "foo");
      window.sessionStorage.removeItem(testKey);
    } catch (e) {
      hasSessionStorageSupport = false;
    }
    return hasSessionStorageSupport;
  };
  var sessionStorage = {
    name: "sessionStorage",
    lookup: function lookup(options) {
      var found;
      if (options.lookupSessionStorage && sessionStorageAvailable()) {
        var lng = window.sessionStorage.getItem(options.lookupSessionStorage);
        if (lng)
          found = lng;
      }
      return found;
    },
    cacheUserLanguage: function cacheUserLanguage(lng, options) {
      if (options.lookupSessionStorage && sessionStorageAvailable()) {
        window.sessionStorage.setItem(options.lookupSessionStorage, lng);
      }
    }
  };
  var navigator$1 = {
    name: "navigator",
    lookup: function lookup(options) {
      var found = [];
      if (typeof navigator !== "undefined") {
        if (navigator.languages) {
          for (var i2 = 0; i2 < navigator.languages.length; i2++) {
            found.push(navigator.languages[i2]);
          }
        }
        if (navigator.userLanguage) {
          found.push(navigator.userLanguage);
        }
        if (navigator.language) {
          found.push(navigator.language);
        }
      }
      return found.length > 0 ? found : void 0;
    }
  };
  var htmlTag = {
    name: "htmlTag",
    lookup: function lookup(options) {
      var found;
      var htmlTag2 = options.htmlTag || (typeof document !== "undefined" ? document.documentElement : null);
      if (htmlTag2 && typeof htmlTag2.getAttribute === "function") {
        found = htmlTag2.getAttribute("lang");
      }
      return found;
    }
  };
  var path = {
    name: "path",
    lookup: function lookup(options) {
      var found;
      if (typeof window !== "undefined") {
        var language = window.location.pathname.match(/\/([a-zA-Z-]*)/g);
        if (language instanceof Array) {
          if (typeof options.lookupFromPathIndex === "number") {
            if (typeof language[options.lookupFromPathIndex] !== "string") {
              return void 0;
            }
            found = language[options.lookupFromPathIndex].replace("/", "");
          } else {
            found = language[0].replace("/", "");
          }
        }
      }
      return found;
    }
  };
  var subdomain = {
    name: "subdomain",
    lookup: function lookup(options) {
      var lookupFromSubdomainIndex = typeof options.lookupFromSubdomainIndex === "number" ? options.lookupFromSubdomainIndex + 1 : 1;
      var language = typeof window !== "undefined" && window.location && window.location.hostname && window.location.hostname.match(/^(\w{2,5})\.(([a-z0-9-]{1,63}\.[a-z]{2,6})|localhost)/i);
      if (!language)
        return void 0;
      return language[lookupFromSubdomainIndex];
    }
  };
  function getDefaults() {
    return {
      order: ["querystring", "cookie", "localStorage", "sessionStorage", "navigator", "htmlTag"],
      lookupQuerystring: "lng",
      lookupCookie: "i18next",
      lookupLocalStorage: "i18nextLng",
      lookupSessionStorage: "i18nextLng",
      // cache user language
      caches: ["localStorage"],
      excludeCacheFor: ["cimode"],
      // cookieMinutes: 10,
      // cookieDomain: 'myDomain'
      convertDetectedLanguage: function convertDetectedLanguage(l2) {
        return l2;
      }
    };
  }
  var Browser = /* @__PURE__ */ function() {
    function Browser2(services) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      _classCallCheck$1(this, Browser2);
      this.type = "languageDetector";
      this.detectors = {};
      this.init(services, options);
    }
    _createClass$1(Browser2, [{
      key: "init",
      value: function init2(services) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var i18nOptions = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        this.services = services || {
          languageUtils: {}
        };
        this.options = defaults$6(options, this.options || {}, getDefaults());
        if (typeof this.options.convertDetectedLanguage === "string" && this.options.convertDetectedLanguage.indexOf("15897") > -1) {
          this.options.convertDetectedLanguage = function(l2) {
            return l2.replace("-", "_");
          };
        }
        if (this.options.lookupFromUrlIndex)
          this.options.lookupFromPathIndex = this.options.lookupFromUrlIndex;
        this.i18nOptions = i18nOptions;
        this.addDetector(cookie$1);
        this.addDetector(querystring);
        this.addDetector(localStorage$1);
        this.addDetector(sessionStorage);
        this.addDetector(navigator$1);
        this.addDetector(htmlTag);
        this.addDetector(path);
        this.addDetector(subdomain);
      }
    }, {
      key: "addDetector",
      value: function addDetector(detector) {
        this.detectors[detector.name] = detector;
      }
    }, {
      key: "detect",
      value: function detect(detectionOrder) {
        var _this = this;
        if (!detectionOrder)
          detectionOrder = this.options.order;
        var detected = [];
        detectionOrder.forEach(function(detectorName) {
          if (_this.detectors[detectorName]) {
            var lookup = _this.detectors[detectorName].lookup(_this.options);
            if (lookup && typeof lookup === "string")
              lookup = [lookup];
            if (lookup)
              detected = detected.concat(lookup);
          }
        });
        detected = detected.map(function(d) {
          return _this.options.convertDetectedLanguage(d);
        });
        if (this.services.languageUtils.getBestMatchFromCodes)
          return detected;
        return detected.length > 0 ? detected[0] : null;
      }
    }, {
      key: "cacheUserLanguage",
      value: function cacheUserLanguage(lng, caches) {
        var _this2 = this;
        if (!caches)
          caches = this.options.caches;
        if (!caches)
          return;
        if (this.options.excludeCacheFor && this.options.excludeCacheFor.indexOf(lng) > -1)
          return;
        caches.forEach(function(cacheName) {
          if (_this2.detectors[cacheName])
            _this2.detectors[cacheName].cacheUserLanguage(lng, _this2.options);
        });
      }
    }]);
    return Browser2;
  }();
  Browser.type = "languageDetector";
  function _assertThisInitialized(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf(o, p);
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass)
      _setPrototypeOf(subClass, superClass);
  }
  function _possibleConstructorReturn(self2, call) {
    if (call && (_typeof$2(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized(self2);
  }
  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf(o);
  }
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
      return Array.from(iter);
  }
  function _toArray(arr2) {
    return _arrayWithHoles(arr2) || _iterableToArray(arr2) || _unsupportedIterableToArray(arr2) || _nonIterableRest();
  }
  function ownKeys(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2] != null ? arguments[i2] : {};
      if (i2 % 2) {
        ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  var consoleLogger = {
    type: "logger",
    log: function log(args) {
      this.output("log", args);
    },
    warn: function warn2(args) {
      this.output("warn", args);
    },
    error: function error(args) {
      this.output("error", args);
    },
    output: function output2(type, args) {
      if (console && console[type])
        console[type].apply(console, args);
    }
  };
  var Logger = function() {
    function Logger2(concreteLogger) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      _classCallCheck$1(this, Logger2);
      this.init(concreteLogger, options);
    }
    _createClass$1(Logger2, [{
      key: "init",
      value: function init2(concreteLogger) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        this.prefix = options.prefix || "i18next:";
        this.logger = concreteLogger || consoleLogger;
        this.options = options;
        this.debug = options.debug;
      }
    }, {
      key: "setDebug",
      value: function setDebug(bool2) {
        this.debug = bool2;
      }
    }, {
      key: "log",
      value: function log() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return this.forward(args, "log", "", true);
      }
    }, {
      key: "warn",
      value: function warn2() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        return this.forward(args, "warn", "", true);
      }
    }, {
      key: "error",
      value: function error() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
        return this.forward(args, "error", "");
      }
    }, {
      key: "deprecate",
      value: function deprecate() {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }
        return this.forward(args, "warn", "WARNING DEPRECATED: ", true);
      }
    }, {
      key: "forward",
      value: function forward(args, lvl, prefix2, debugOnly) {
        if (debugOnly && !this.debug)
          return null;
        if (typeof args[0] === "string")
          args[0] = "".concat(prefix2).concat(this.prefix, " ").concat(args[0]);
        return this.logger[lvl](args);
      }
    }, {
      key: "create",
      value: function create(moduleName) {
        return new Logger2(this.logger, _objectSpread(_objectSpread({}, {
          prefix: "".concat(this.prefix, ":").concat(moduleName, ":")
        }), this.options));
      }
    }, {
      key: "clone",
      value: function clone(options) {
        options = options || this.options;
        options.prefix = options.prefix || this.prefix;
        return new Logger2(this.logger, options);
      }
    }]);
    return Logger2;
  }();
  var baseLogger = new Logger();
  var EventEmitter$1 = function() {
    function EventEmitter2() {
      _classCallCheck$1(this, EventEmitter2);
      this.observers = {};
    }
    _createClass$1(EventEmitter2, [{
      key: "on",
      value: function on(events2, listener) {
        var _this = this;
        events2.split(" ").forEach(function(event) {
          _this.observers[event] = _this.observers[event] || [];
          _this.observers[event].push(listener);
        });
        return this;
      }
    }, {
      key: "off",
      value: function off(event, listener) {
        if (!this.observers[event])
          return;
        if (!listener) {
          delete this.observers[event];
          return;
        }
        this.observers[event] = this.observers[event].filter(function(l2) {
          return l2 !== listener;
        });
      }
    }, {
      key: "emit",
      value: function emit(event) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        if (this.observers[event]) {
          var cloned = [].concat(this.observers[event]);
          cloned.forEach(function(observer) {
            observer.apply(void 0, args);
          });
        }
        if (this.observers["*"]) {
          var _cloned = [].concat(this.observers["*"]);
          _cloned.forEach(function(observer) {
            observer.apply(observer, [event].concat(args));
          });
        }
      }
    }]);
    return EventEmitter2;
  }();
  function defer() {
    var res;
    var rej;
    var promise = new Promise(function(resolve, reject) {
      res = resolve;
      rej = reject;
    });
    promise.resolve = res;
    promise.reject = rej;
    return promise;
  }
  function makeString(object) {
    if (object == null)
      return "";
    return "" + object;
  }
  function copy$1(a, s, t) {
    a.forEach(function(m2) {
      if (s[m2])
        t[m2] = s[m2];
    });
  }
  function getLastOfPath(object, path2, Empty) {
    function cleanKey(key2) {
      return key2 && key2.indexOf("###") > -1 ? key2.replace(/###/g, ".") : key2;
    }
    function canNotTraverseDeeper() {
      return !object || typeof object === "string";
    }
    var stack = typeof path2 !== "string" ? [].concat(path2) : path2.split(".");
    while (stack.length > 1) {
      if (canNotTraverseDeeper())
        return {};
      var key = cleanKey(stack.shift());
      if (!object[key] && Empty)
        object[key] = new Empty();
      if (Object.prototype.hasOwnProperty.call(object, key)) {
        object = object[key];
      } else {
        object = {};
      }
    }
    if (canNotTraverseDeeper())
      return {};
    return {
      obj: object,
      k: cleanKey(stack.shift())
    };
  }
  function setPath(object, path2, newValue) {
    var _getLastOfPath = getLastOfPath(object, path2, Object), obj = _getLastOfPath.obj, k = _getLastOfPath.k;
    obj[k] = newValue;
  }
  function pushPath(object, path2, newValue, concat2) {
    var _getLastOfPath2 = getLastOfPath(object, path2, Object), obj = _getLastOfPath2.obj, k = _getLastOfPath2.k;
    obj[k] = obj[k] || [];
    if (concat2)
      obj[k] = obj[k].concat(newValue);
    if (!concat2)
      obj[k].push(newValue);
  }
  function getPath$1(object, path2) {
    var _getLastOfPath3 = getLastOfPath(object, path2), obj = _getLastOfPath3.obj, k = _getLastOfPath3.k;
    if (!obj)
      return void 0;
    return obj[k];
  }
  function getPathWithDefaults(data2, defaultData, key) {
    var value = getPath$1(data2, key);
    if (value !== void 0) {
      return value;
    }
    return getPath$1(defaultData, key);
  }
  function deepExtend(target, source, overwrite) {
    for (var prop in source) {
      if (prop !== "__proto__" && prop !== "constructor") {
        if (prop in target) {
          if (typeof target[prop] === "string" || target[prop] instanceof String || typeof source[prop] === "string" || source[prop] instanceof String) {
            if (overwrite)
              target[prop] = source[prop];
          } else {
            deepExtend(target[prop], source[prop], overwrite);
          }
        } else {
          target[prop] = source[prop];
        }
      }
    }
    return target;
  }
  function regexEscape(str) {
    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
  }
  var _entityMap = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#39;",
    "/": "&#x2F;"
  };
  function escape(data2) {
    if (typeof data2 === "string") {
      return data2.replace(/[&<>"'\/]/g, function(s) {
        return _entityMap[s];
      });
    }
    return data2;
  }
  var isIE10 = typeof window !== "undefined" && window.navigator && typeof window.navigator.userAgentData === "undefined" && window.navigator.userAgent && window.navigator.userAgent.indexOf("MSIE") > -1;
  var chars = [" ", ",", "?", "!", ";"];
  function looksLikeObjectPath(key, nsSeparator, keySeparator) {
    nsSeparator = nsSeparator || "";
    keySeparator = keySeparator || "";
    var possibleChars = chars.filter(function(c) {
      return nsSeparator.indexOf(c) < 0 && keySeparator.indexOf(c) < 0;
    });
    if (possibleChars.length === 0)
      return true;
    var r2 = new RegExp("(".concat(possibleChars.map(function(c) {
      return c === "?" ? "\\?" : c;
    }).join("|"), ")"));
    var matched = !r2.test(key);
    if (!matched) {
      var ki = key.indexOf(keySeparator);
      if (ki > 0 && !r2.test(key.substring(0, ki))) {
        matched = true;
      }
    }
    return matched;
  }
  function ownKeys$1(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread$1(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2] != null ? arguments[i2] : {};
      if (i2 % 2) {
        ownKeys$1(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$1(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function deepFind(obj, path2) {
    var keySeparator = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ".";
    if (!obj)
      return void 0;
    if (obj[path2])
      return obj[path2];
    var paths = path2.split(keySeparator);
    var current = obj;
    for (var i2 = 0; i2 < paths.length; ++i2) {
      if (!current)
        return void 0;
      if (typeof current[paths[i2]] === "string" && i2 + 1 < paths.length) {
        return void 0;
      }
      if (current[paths[i2]] === void 0) {
        var j = 2;
        var p = paths.slice(i2, i2 + j).join(keySeparator);
        var mix = current[p];
        while (mix === void 0 && paths.length > i2 + j) {
          j++;
          p = paths.slice(i2, i2 + j).join(keySeparator);
          mix = current[p];
        }
        if (mix === void 0)
          return void 0;
        if (mix === null)
          return null;
        if (path2.endsWith(p)) {
          if (typeof mix === "string")
            return mix;
          if (p && typeof mix[p] === "string")
            return mix[p];
        }
        var joinedPath = paths.slice(i2 + j).join(keySeparator);
        if (joinedPath)
          return deepFind(mix, joinedPath, keySeparator);
        return void 0;
      }
      current = current[paths[i2]];
    }
    return current;
  }
  var ResourceStore = function(_EventEmitter) {
    _inherits(ResourceStore2, _EventEmitter);
    var _super = _createSuper(ResourceStore2);
    function ResourceStore2(data2) {
      var _this;
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        ns: ["translation"],
        defaultNS: "translation"
      };
      _classCallCheck$1(this, ResourceStore2);
      _this = _super.call(this);
      if (isIE10) {
        EventEmitter$1.call(_assertThisInitialized(_this));
      }
      _this.data = data2 || {};
      _this.options = options;
      if (_this.options.keySeparator === void 0) {
        _this.options.keySeparator = ".";
      }
      if (_this.options.ignoreJSONStructure === void 0) {
        _this.options.ignoreJSONStructure = true;
      }
      return _this;
    }
    _createClass$1(ResourceStore2, [{
      key: "addNamespaces",
      value: function addNamespaces(ns) {
        if (this.options.ns.indexOf(ns) < 0) {
          this.options.ns.push(ns);
        }
      }
    }, {
      key: "removeNamespaces",
      value: function removeNamespaces(ns) {
        var index2 = this.options.ns.indexOf(ns);
        if (index2 > -1) {
          this.options.ns.splice(index2, 1);
        }
      }
    }, {
      key: "getResource",
      value: function getResource(lng, ns, key) {
        var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
        var keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
        var ignoreJSONStructure = options.ignoreJSONStructure !== void 0 ? options.ignoreJSONStructure : this.options.ignoreJSONStructure;
        var path2 = [lng, ns];
        if (key && typeof key !== "string")
          path2 = path2.concat(key);
        if (key && typeof key === "string")
          path2 = path2.concat(keySeparator ? key.split(keySeparator) : key);
        if (lng.indexOf(".") > -1) {
          path2 = lng.split(".");
        }
        var result = getPath$1(this.data, path2);
        if (result || !ignoreJSONStructure || typeof key !== "string")
          return result;
        return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);
      }
    }, {
      key: "addResource",
      value: function addResource(lng, ns, key, value) {
        var options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
          silent: false
        };
        var keySeparator = this.options.keySeparator;
        if (keySeparator === void 0)
          keySeparator = ".";
        var path2 = [lng, ns];
        if (key)
          path2 = path2.concat(keySeparator ? key.split(keySeparator) : key);
        if (lng.indexOf(".") > -1) {
          path2 = lng.split(".");
          value = ns;
          ns = path2[1];
        }
        this.addNamespaces(ns);
        setPath(this.data, path2, value);
        if (!options.silent)
          this.emit("added", lng, ns, key, value);
      }
    }, {
      key: "addResources",
      value: function addResources(lng, ns, resources) {
        var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
          silent: false
        };
        for (var m2 in resources) {
          if (typeof resources[m2] === "string" || Object.prototype.toString.apply(resources[m2]) === "[object Array]")
            this.addResource(lng, ns, m2, resources[m2], {
              silent: true
            });
        }
        if (!options.silent)
          this.emit("added", lng, ns, resources);
      }
    }, {
      key: "addResourceBundle",
      value: function addResourceBundle(lng, ns, resources, deep, overwrite) {
        var options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {
          silent: false
        };
        var path2 = [lng, ns];
        if (lng.indexOf(".") > -1) {
          path2 = lng.split(".");
          deep = resources;
          resources = ns;
          ns = path2[1];
        }
        this.addNamespaces(ns);
        var pack = getPath$1(this.data, path2) || {};
        if (deep) {
          deepExtend(pack, resources, overwrite);
        } else {
          pack = _objectSpread$1(_objectSpread$1({}, pack), resources);
        }
        setPath(this.data, path2, pack);
        if (!options.silent)
          this.emit("added", lng, ns, resources);
      }
    }, {
      key: "removeResourceBundle",
      value: function removeResourceBundle(lng, ns) {
        if (this.hasResourceBundle(lng, ns)) {
          delete this.data[lng][ns];
        }
        this.removeNamespaces(ns);
        this.emit("removed", lng, ns);
      }
    }, {
      key: "hasResourceBundle",
      value: function hasResourceBundle(lng, ns) {
        return this.getResource(lng, ns) !== void 0;
      }
    }, {
      key: "getResourceBundle",
      value: function getResourceBundle(lng, ns) {
        if (!ns)
          ns = this.options.defaultNS;
        if (this.options.compatibilityAPI === "v1")
          return _objectSpread$1(_objectSpread$1({}, {}), this.getResource(lng, ns));
        return this.getResource(lng, ns);
      }
    }, {
      key: "getDataByLanguage",
      value: function getDataByLanguage(lng) {
        return this.data[lng];
      }
    }, {
      key: "hasLanguageSomeTranslations",
      value: function hasLanguageSomeTranslations(lng) {
        var data2 = this.getDataByLanguage(lng);
        var n = data2 && Object.keys(data2) || [];
        return !!n.find(function(v) {
          return data2[v] && Object.keys(data2[v]).length > 0;
        });
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.data;
      }
    }]);
    return ResourceStore2;
  }(EventEmitter$1);
  var postProcessor = {
    processors: {},
    addPostProcessor: function addPostProcessor(module2) {
      this.processors[module2.name] = module2;
    },
    handle: function handle(processors, value, key, options, translator) {
      var _this = this;
      processors.forEach(function(processor) {
        if (_this.processors[processor])
          value = _this.processors[processor].process(value, key, options, translator);
      });
      return value;
    }
  };
  function ownKeys$2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread$2(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2] != null ? arguments[i2] : {};
      if (i2 % 2) {
        ownKeys$2(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$2(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _createSuper$1(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _isNativeReflectConstruct$1() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  var checkedLoadedFor = {};
  var Translator = function(_EventEmitter) {
    _inherits(Translator2, _EventEmitter);
    var _super = _createSuper$1(Translator2);
    function Translator2(services) {
      var _this;
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      _classCallCheck$1(this, Translator2);
      _this = _super.call(this);
      if (isIE10) {
        EventEmitter$1.call(_assertThisInitialized(_this));
      }
      copy$1(["resourceStore", "languageUtils", "pluralResolver", "interpolator", "backendConnector", "i18nFormat", "utils"], services, _assertThisInitialized(_this));
      _this.options = options;
      if (_this.options.keySeparator === void 0) {
        _this.options.keySeparator = ".";
      }
      _this.logger = baseLogger.create("translator");
      return _this;
    }
    _createClass$1(Translator2, [{
      key: "changeLanguage",
      value: function changeLanguage(lng) {
        if (lng)
          this.language = lng;
      }
    }, {
      key: "exists",
      value: function exists2(key) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
          interpolation: {}
        };
        if (key === void 0 || key === null) {
          return false;
        }
        var resolved2 = this.resolve(key, options);
        return resolved2 && resolved2.res !== void 0;
      }
    }, {
      key: "extractFromKey",
      value: function extractFromKey(key, options) {
        var nsSeparator = options.nsSeparator !== void 0 ? options.nsSeparator : this.options.nsSeparator;
        if (nsSeparator === void 0)
          nsSeparator = ":";
        var keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
        var namespaces = options.ns || this.options.defaultNS || [];
        var wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
        var seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options.keySeparator && !this.options.userDefinedNsSeparator && !options.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);
        if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
          var m2 = key.match(this.interpolator.nestingRegexp);
          if (m2 && m2.length > 0) {
            return {
              key,
              namespaces
            };
          }
          var parts = key.split(nsSeparator);
          if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1)
            namespaces = parts.shift();
          key = parts.join(keySeparator);
        }
        if (typeof namespaces === "string")
          namespaces = [namespaces];
        return {
          key,
          namespaces
        };
      }
    }, {
      key: "translate",
      value: function translate(keys2, options, lastKey) {
        var _this2 = this;
        if (_typeof$2(options) !== "object" && this.options.overloadTranslationOptionHandler) {
          options = this.options.overloadTranslationOptionHandler(arguments);
        }
        if (!options)
          options = {};
        if (keys2 === void 0 || keys2 === null)
          return "";
        if (!Array.isArray(keys2))
          keys2 = [String(keys2)];
        var returnDetails = options.returnDetails !== void 0 ? options.returnDetails : this.options.returnDetails;
        var keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
        var _this$extractFromKey = this.extractFromKey(keys2[keys2.length - 1], options), key = _this$extractFromKey.key, namespaces = _this$extractFromKey.namespaces;
        var namespace = namespaces[namespaces.length - 1];
        var lng = options.lng || this.language;
        var appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
        if (lng && lng.toLowerCase() === "cimode") {
          if (appendNamespaceToCIMode) {
            var nsSeparator = options.nsSeparator || this.options.nsSeparator;
            if (returnDetails) {
              resolved2.res = "".concat(namespace).concat(nsSeparator).concat(key);
              return resolved2;
            }
            return "".concat(namespace).concat(nsSeparator).concat(key);
          }
          if (returnDetails) {
            resolved2.res = key;
            return resolved2;
          }
          return key;
        }
        var resolved2 = this.resolve(keys2, options);
        var res = resolved2 && resolved2.res;
        var resUsedKey = resolved2 && resolved2.usedKey || key;
        var resExactUsedKey = resolved2 && resolved2.exactUsedKey || key;
        var resType = Object.prototype.toString.apply(res);
        var noObject = ["[object Number]", "[object Function]", "[object RegExp]"];
        var joinArrays = options.joinArrays !== void 0 ? options.joinArrays : this.options.joinArrays;
        var handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
        var handleAsObject = typeof res !== "string" && typeof res !== "boolean" && typeof res !== "number";
        if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === "string" && resType === "[object Array]")) {
          if (!options.returnObjects && !this.options.returnObjects) {
            if (!this.options.returnedObjectHandler) {
              this.logger.warn("accessing an object - but returnObjects options is not enabled!");
            }
            var r2 = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, _objectSpread$2(_objectSpread$2({}, options), {}, {
              ns: namespaces
            })) : "key '".concat(key, " (").concat(this.language, ")' returned an object instead of string.");
            if (returnDetails) {
              resolved2.res = r2;
              return resolved2;
            }
            return r2;
          }
          if (keySeparator) {
            var resTypeIsArray = resType === "[object Array]";
            var copy2 = resTypeIsArray ? [] : {};
            var newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
            for (var m2 in res) {
              if (Object.prototype.hasOwnProperty.call(res, m2)) {
                var deepKey = "".concat(newKeyToUse).concat(keySeparator).concat(m2);
                copy2[m2] = this.translate(deepKey, _objectSpread$2(_objectSpread$2({}, options), {
                  joinArrays: false,
                  ns: namespaces
                }));
                if (copy2[m2] === deepKey)
                  copy2[m2] = res[m2];
              }
            }
            res = copy2;
          }
        } else if (handleAsObjectInI18nFormat && typeof joinArrays === "string" && resType === "[object Array]") {
          res = res.join(joinArrays);
          if (res)
            res = this.extendTranslation(res, keys2, options, lastKey);
        } else {
          var usedDefault = false;
          var usedKey = false;
          var needsPluralHandling = options.count !== void 0 && typeof options.count !== "string";
          var hasDefaultValue = Translator2.hasDefaultValue(options);
          var defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, options) : "";
          var defaultValue = options["defaultValue".concat(defaultValueSuffix)] || options.defaultValue;
          if (!this.isValidLookup(res) && hasDefaultValue) {
            usedDefault = true;
            res = defaultValue;
          }
          if (!this.isValidLookup(res)) {
            usedKey = true;
            res = key;
          }
          var missingKeyNoValueFallbackToKey = options.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
          var resForMissing = missingKeyNoValueFallbackToKey && usedKey ? void 0 : res;
          var updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;
          if (usedKey || usedDefault || updateMissing) {
            this.logger.log(updateMissing ? "updateKey" : "missingKey", lng, namespace, key, updateMissing ? defaultValue : res);
            if (keySeparator) {
              var fk = this.resolve(key, _objectSpread$2(_objectSpread$2({}, options), {}, {
                keySeparator: false
              }));
              if (fk && fk.res)
                this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.");
            }
            var lngs = [];
            var fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);
            if (this.options.saveMissingTo === "fallback" && fallbackLngs && fallbackLngs[0]) {
              for (var i2 = 0; i2 < fallbackLngs.length; i2++) {
                lngs.push(fallbackLngs[i2]);
              }
            } else if (this.options.saveMissingTo === "all") {
              lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
            } else {
              lngs.push(options.lng || this.language);
            }
            var send2 = function send3(l2, k, specificDefaultValue) {
              var defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;
              if (_this2.options.missingKeyHandler) {
                _this2.options.missingKeyHandler(l2, namespace, k, defaultForMissing, updateMissing, options);
              } else if (_this2.backendConnector && _this2.backendConnector.saveMissing) {
                _this2.backendConnector.saveMissing(l2, namespace, k, defaultForMissing, updateMissing, options);
              }
              _this2.emit("missingKey", l2, namespace, k, res);
            };
            if (this.options.saveMissing) {
              if (this.options.saveMissingPlurals && needsPluralHandling) {
                lngs.forEach(function(language) {
                  _this2.pluralResolver.getSuffixes(language, options).forEach(function(suffix) {
                    send2([language], key + suffix, options["defaultValue".concat(suffix)] || defaultValue);
                  });
                });
              } else {
                send2(lngs, key, defaultValue);
              }
            }
          }
          res = this.extendTranslation(res, keys2, options, resolved2, lastKey);
          if (usedKey && res === key && this.options.appendNamespaceToMissingKey)
            res = "".concat(namespace, ":").concat(key);
          if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {
            if (this.options.compatibilityAPI !== "v1") {
              res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? "".concat(namespace, ":").concat(key) : key, usedDefault ? res : void 0);
            } else {
              res = this.options.parseMissingKeyHandler(res);
            }
          }
        }
        if (returnDetails) {
          resolved2.res = res;
          return resolved2;
        }
        return res;
      }
    }, {
      key: "extendTranslation",
      value: function extendTranslation(res, key, options, resolved2, lastKey) {
        var _this3 = this;
        if (this.i18nFormat && this.i18nFormat.parse) {
          res = this.i18nFormat.parse(res, _objectSpread$2(_objectSpread$2({}, this.options.interpolation.defaultVariables), options), resolved2.usedLng, resolved2.usedNS, resolved2.usedKey, {
            resolved: resolved2
          });
        } else if (!options.skipInterpolation) {
          if (options.interpolation)
            this.interpolator.init(_objectSpread$2(_objectSpread$2({}, options), {
              interpolation: _objectSpread$2(_objectSpread$2({}, this.options.interpolation), options.interpolation)
            }));
          var skipOnVariables = typeof res === "string" && (options && options.interpolation && options.interpolation.skipOnVariables !== void 0 ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
          var nestBef;
          if (skipOnVariables) {
            var nb = res.match(this.interpolator.nestingRegexp);
            nestBef = nb && nb.length;
          }
          var data2 = options.replace && typeof options.replace !== "string" ? options.replace : options;
          if (this.options.interpolation.defaultVariables)
            data2 = _objectSpread$2(_objectSpread$2({}, this.options.interpolation.defaultVariables), data2);
          res = this.interpolator.interpolate(res, data2, options.lng || this.language, options);
          if (skipOnVariables) {
            var na = res.match(this.interpolator.nestingRegexp);
            var nestAft = na && na.length;
            if (nestBef < nestAft)
              options.nest = false;
          }
          if (options.nest !== false)
            res = this.interpolator.nest(res, function() {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              if (lastKey && lastKey[0] === args[0] && !options.context) {
                _this3.logger.warn("It seems you are nesting recursively key: ".concat(args[0], " in key: ").concat(key[0]));
                return null;
              }
              return _this3.translate.apply(_this3, args.concat([key]));
            }, options);
          if (options.interpolation)
            this.interpolator.reset();
        }
        var postProcess = options.postProcess || this.options.postProcess;
        var postProcessorNames = typeof postProcess === "string" ? [postProcess] : postProcess;
        if (res !== void 0 && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
          res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? _objectSpread$2({
            i18nResolved: resolved2
          }, options) : options, this);
        }
        return res;
      }
    }, {
      key: "resolve",
      value: function resolve(keys2) {
        var _this4 = this;
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var found;
        var usedKey;
        var exactUsedKey;
        var usedLng;
        var usedNS;
        if (typeof keys2 === "string")
          keys2 = [keys2];
        keys2.forEach(function(k) {
          if (_this4.isValidLookup(found))
            return;
          var extracted = _this4.extractFromKey(k, options);
          var key = extracted.key;
          usedKey = key;
          var namespaces = extracted.namespaces;
          if (_this4.options.fallbackNS)
            namespaces = namespaces.concat(_this4.options.fallbackNS);
          var needsPluralHandling = options.count !== void 0 && typeof options.count !== "string";
          var needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && _this4.pluralResolver.shouldUseIntlApi();
          var needsContextHandling = options.context !== void 0 && (typeof options.context === "string" || typeof options.context === "number") && options.context !== "";
          var codes = options.lngs ? options.lngs : _this4.languageUtils.toResolveHierarchy(options.lng || _this4.language, options.fallbackLng);
          namespaces.forEach(function(ns) {
            if (_this4.isValidLookup(found))
              return;
            usedNS = ns;
            if (!checkedLoadedFor["".concat(codes[0], "-").concat(ns)] && _this4.utils && _this4.utils.hasLoadedNamespace && !_this4.utils.hasLoadedNamespace(usedNS)) {
              checkedLoadedFor["".concat(codes[0], "-").concat(ns)] = true;
              _this4.logger.warn('key "'.concat(usedKey, '" for languages "').concat(codes.join(", "), `" won't get resolved as namespace "`).concat(usedNS, '" was not yet loaded'), "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
            }
            codes.forEach(function(code) {
              if (_this4.isValidLookup(found))
                return;
              usedLng = code;
              var finalKeys = [key];
              if (_this4.i18nFormat && _this4.i18nFormat.addLookupKeys) {
                _this4.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);
              } else {
                var pluralSuffix;
                if (needsPluralHandling)
                  pluralSuffix = _this4.pluralResolver.getSuffix(code, options.count, options);
                var zeroSuffix = "".concat(_this4.options.pluralSeparator, "zero");
                if (needsPluralHandling) {
                  finalKeys.push(key + pluralSuffix);
                  if (needsZeroSuffixLookup) {
                    finalKeys.push(key + zeroSuffix);
                  }
                }
                if (needsContextHandling) {
                  var contextKey = "".concat(key).concat(_this4.options.contextSeparator).concat(options.context);
                  finalKeys.push(contextKey);
                  if (needsPluralHandling) {
                    finalKeys.push(contextKey + pluralSuffix);
                    if (needsZeroSuffixLookup) {
                      finalKeys.push(contextKey + zeroSuffix);
                    }
                  }
                }
              }
              var possibleKey;
              while (possibleKey = finalKeys.pop()) {
                if (!_this4.isValidLookup(found)) {
                  exactUsedKey = possibleKey;
                  found = _this4.getResource(code, ns, possibleKey, options);
                }
              }
            });
          });
        });
        return {
          res: found,
          usedKey,
          exactUsedKey,
          usedLng,
          usedNS
        };
      }
    }, {
      key: "isValidLookup",
      value: function isValidLookup(res) {
        return res !== void 0 && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === "");
      }
    }, {
      key: "getResource",
      value: function getResource(code, ns, key) {
        var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
        if (this.i18nFormat && this.i18nFormat.getResource)
          return this.i18nFormat.getResource(code, ns, key, options);
        return this.resourceStore.getResource(code, ns, key, options);
      }
    }], [{
      key: "hasDefaultValue",
      value: function hasDefaultValue(options) {
        var prefix2 = "defaultValue";
        for (var option in options) {
          if (Object.prototype.hasOwnProperty.call(options, option) && prefix2 === option.substring(0, prefix2.length) && void 0 !== options[option]) {
            return true;
          }
        }
        return false;
      }
    }]);
    return Translator2;
  }(EventEmitter$1);
  function capitalize$1(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  }
  var LanguageUtil = function() {
    function LanguageUtil2(options) {
      _classCallCheck$1(this, LanguageUtil2);
      this.options = options;
      this.supportedLngs = this.options.supportedLngs || false;
      this.logger = baseLogger.create("languageUtils");
    }
    _createClass$1(LanguageUtil2, [{
      key: "getScriptPartFromCode",
      value: function getScriptPartFromCode(code) {
        if (!code || code.indexOf("-") < 0)
          return null;
        var p = code.split("-");
        if (p.length === 2)
          return null;
        p.pop();
        if (p[p.length - 1].toLowerCase() === "x")
          return null;
        return this.formatLanguageCode(p.join("-"));
      }
    }, {
      key: "getLanguagePartFromCode",
      value: function getLanguagePartFromCode(code) {
        if (!code || code.indexOf("-") < 0)
          return code;
        var p = code.split("-");
        return this.formatLanguageCode(p[0]);
      }
    }, {
      key: "formatLanguageCode",
      value: function formatLanguageCode(code) {
        if (typeof code === "string" && code.indexOf("-") > -1) {
          var specialCases2 = ["hans", "hant", "latn", "cyrl", "cans", "mong", "arab"];
          var p = code.split("-");
          if (this.options.lowerCaseLng) {
            p = p.map(function(part) {
              return part.toLowerCase();
            });
          } else if (p.length === 2) {
            p[0] = p[0].toLowerCase();
            p[1] = p[1].toUpperCase();
            if (specialCases2.indexOf(p[1].toLowerCase()) > -1)
              p[1] = capitalize$1(p[1].toLowerCase());
          } else if (p.length === 3) {
            p[0] = p[0].toLowerCase();
            if (p[1].length === 2)
              p[1] = p[1].toUpperCase();
            if (p[0] !== "sgn" && p[2].length === 2)
              p[2] = p[2].toUpperCase();
            if (specialCases2.indexOf(p[1].toLowerCase()) > -1)
              p[1] = capitalize$1(p[1].toLowerCase());
            if (specialCases2.indexOf(p[2].toLowerCase()) > -1)
              p[2] = capitalize$1(p[2].toLowerCase());
          }
          return p.join("-");
        }
        return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
      }
    }, {
      key: "isSupportedCode",
      value: function isSupportedCode(code) {
        if (this.options.load === "languageOnly" || this.options.nonExplicitSupportedLngs) {
          code = this.getLanguagePartFromCode(code);
        }
        return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
      }
    }, {
      key: "getBestMatchFromCodes",
      value: function getBestMatchFromCodes(codes) {
        var _this = this;
        if (!codes)
          return null;
        var found;
        codes.forEach(function(code) {
          if (found)
            return;
          var cleanedLng = _this.formatLanguageCode(code);
          if (!_this.options.supportedLngs || _this.isSupportedCode(cleanedLng))
            found = cleanedLng;
        });
        if (!found && this.options.supportedLngs) {
          codes.forEach(function(code) {
            if (found)
              return;
            var lngOnly = _this.getLanguagePartFromCode(code);
            if (_this.isSupportedCode(lngOnly))
              return found = lngOnly;
            found = _this.options.supportedLngs.find(function(supportedLng) {
              if (supportedLng.indexOf(lngOnly) === 0)
                return supportedLng;
            });
          });
        }
        if (!found)
          found = this.getFallbackCodes(this.options.fallbackLng)[0];
        return found;
      }
    }, {
      key: "getFallbackCodes",
      value: function getFallbackCodes(fallbacks, code) {
        if (!fallbacks)
          return [];
        if (typeof fallbacks === "function")
          fallbacks = fallbacks(code);
        if (typeof fallbacks === "string")
          fallbacks = [fallbacks];
        if (Object.prototype.toString.apply(fallbacks) === "[object Array]")
          return fallbacks;
        if (!code)
          return fallbacks["default"] || [];
        var found = fallbacks[code];
        if (!found)
          found = fallbacks[this.getScriptPartFromCode(code)];
        if (!found)
          found = fallbacks[this.formatLanguageCode(code)];
        if (!found)
          found = fallbacks[this.getLanguagePartFromCode(code)];
        if (!found)
          found = fallbacks["default"];
        return found || [];
      }
    }, {
      key: "toResolveHierarchy",
      value: function toResolveHierarchy(code, fallbackCode) {
        var _this2 = this;
        var fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
        var codes = [];
        var addCode = function addCode2(c) {
          if (!c)
            return;
          if (_this2.isSupportedCode(c)) {
            codes.push(c);
          } else {
            _this2.logger.warn("rejecting language code not found in supportedLngs: ".concat(c));
          }
        };
        if (typeof code === "string" && code.indexOf("-") > -1) {
          if (this.options.load !== "languageOnly")
            addCode(this.formatLanguageCode(code));
          if (this.options.load !== "languageOnly" && this.options.load !== "currentOnly")
            addCode(this.getScriptPartFromCode(code));
          if (this.options.load !== "currentOnly")
            addCode(this.getLanguagePartFromCode(code));
        } else if (typeof code === "string") {
          addCode(this.formatLanguageCode(code));
        }
        fallbackCodes.forEach(function(fc) {
          if (codes.indexOf(fc) < 0)
            addCode(_this2.formatLanguageCode(fc));
        });
        return codes;
      }
    }]);
    return LanguageUtil2;
  }();
  var sets = [{
    lngs: ["ach", "ak", "am", "arn", "br", "fil", "gun", "ln", "mfe", "mg", "mi", "oc", "pt", "pt-BR", "tg", "tl", "ti", "tr", "uz", "wa"],
    nr: [1, 2],
    fc: 1
  }, {
    lngs: ["af", "an", "ast", "az", "bg", "bn", "ca", "da", "de", "dev", "el", "en", "eo", "es", "et", "eu", "fi", "fo", "fur", "fy", "gl", "gu", "ha", "hi", "hu", "hy", "ia", "it", "kk", "kn", "ku", "lb", "mai", "ml", "mn", "mr", "nah", "nap", "nb", "ne", "nl", "nn", "no", "nso", "pa", "pap", "pms", "ps", "pt-PT", "rm", "sco", "se", "si", "so", "son", "sq", "sv", "sw", "ta", "te", "tk", "ur", "yo"],
    nr: [1, 2],
    fc: 2
  }, {
    lngs: ["ay", "bo", "cgg", "fa", "ht", "id", "ja", "jbo", "ka", "km", "ko", "ky", "lo", "ms", "sah", "su", "th", "tt", "ug", "vi", "wo", "zh"],
    nr: [1],
    fc: 3
  }, {
    lngs: ["be", "bs", "cnr", "dz", "hr", "ru", "sr", "uk"],
    nr: [1, 2, 5],
    fc: 4
  }, {
    lngs: ["ar"],
    nr: [0, 1, 2, 3, 11, 100],
    fc: 5
  }, {
    lngs: ["cs", "sk"],
    nr: [1, 2, 5],
    fc: 6
  }, {
    lngs: ["csb", "pl"],
    nr: [1, 2, 5],
    fc: 7
  }, {
    lngs: ["cy"],
    nr: [1, 2, 3, 8],
    fc: 8
  }, {
    lngs: ["fr"],
    nr: [1, 2],
    fc: 9
  }, {
    lngs: ["ga"],
    nr: [1, 2, 3, 7, 11],
    fc: 10
  }, {
    lngs: ["gd"],
    nr: [1, 2, 3, 20],
    fc: 11
  }, {
    lngs: ["is"],
    nr: [1, 2],
    fc: 12
  }, {
    lngs: ["jv"],
    nr: [0, 1],
    fc: 13
  }, {
    lngs: ["kw"],
    nr: [1, 2, 3, 4],
    fc: 14
  }, {
    lngs: ["lt"],
    nr: [1, 2, 10],
    fc: 15
  }, {
    lngs: ["lv"],
    nr: [1, 2, 0],
    fc: 16
  }, {
    lngs: ["mk"],
    nr: [1, 2],
    fc: 17
  }, {
    lngs: ["mnk"],
    nr: [0, 1, 2],
    fc: 18
  }, {
    lngs: ["mt"],
    nr: [1, 2, 11, 20],
    fc: 19
  }, {
    lngs: ["or"],
    nr: [2, 1],
    fc: 2
  }, {
    lngs: ["ro"],
    nr: [1, 2, 20],
    fc: 20
  }, {
    lngs: ["sl"],
    nr: [5, 1, 2, 3],
    fc: 21
  }, {
    lngs: ["he", "iw"],
    nr: [1, 2, 20, 21],
    fc: 22
  }];
  var _rulesPluralsTypes = {
    1: function _2(n) {
      return Number(n > 1);
    },
    2: function _2(n) {
      return Number(n != 1);
    },
    3: function _2(n) {
      return 0;
    },
    4: function _2(n) {
      return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
    },
    5: function _2(n) {
      return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);
    },
    6: function _2(n) {
      return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);
    },
    7: function _2(n) {
      return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
    },
    8: function _2(n) {
      return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);
    },
    9: function _2(n) {
      return Number(n >= 2);
    },
    10: function _2(n) {
      return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);
    },
    11: function _2(n) {
      return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);
    },
    12: function _2(n) {
      return Number(n % 10 != 1 || n % 100 == 11);
    },
    13: function _2(n) {
      return Number(n !== 0);
    },
    14: function _2(n) {
      return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);
    },
    15: function _2(n) {
      return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
    },
    16: function _2(n) {
      return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);
    },
    17: function _2(n) {
      return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);
    },
    18: function _2(n) {
      return Number(n == 0 ? 0 : n == 1 ? 1 : 2);
    },
    19: function _2(n) {
      return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);
    },
    20: function _2(n) {
      return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);
    },
    21: function _2(n) {
      return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);
    },
    22: function _2(n) {
      return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);
    }
  };
  var deprecatedJsonVersions = ["v1", "v2", "v3"];
  var suffixesOrder = {
    zero: 0,
    one: 1,
    two: 2,
    few: 3,
    many: 4,
    other: 5
  };
  function createRules() {
    var rules = {};
    sets.forEach(function(set) {
      set.lngs.forEach(function(l2) {
        rules[l2] = {
          numbers: set.nr,
          plurals: _rulesPluralsTypes[set.fc]
        };
      });
    });
    return rules;
  }
  var PluralResolver = function() {
    function PluralResolver2(languageUtils) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      _classCallCheck$1(this, PluralResolver2);
      this.languageUtils = languageUtils;
      this.options = options;
      this.logger = baseLogger.create("pluralResolver");
      if ((!this.options.compatibilityJSON || this.options.compatibilityJSON === "v4") && (typeof Intl === "undefined" || !Intl.PluralRules)) {
        this.options.compatibilityJSON = "v3";
        this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.");
      }
      this.rules = createRules();
    }
    _createClass$1(PluralResolver2, [{
      key: "addRule",
      value: function addRule(lng, obj) {
        this.rules[lng] = obj;
      }
    }, {
      key: "getRule",
      value: function getRule(code) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        if (this.shouldUseIntlApi()) {
          try {
            return new Intl.PluralRules(code, {
              type: options.ordinal ? "ordinal" : "cardinal"
            });
          } catch (_unused) {
            return;
          }
        }
        return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
      }
    }, {
      key: "needsPlural",
      value: function needsPlural(code) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var rule = this.getRule(code, options);
        if (this.shouldUseIntlApi()) {
          return rule && rule.resolvedOptions().pluralCategories.length > 1;
        }
        return rule && rule.numbers.length > 1;
      }
    }, {
      key: "getPluralFormsOfKey",
      value: function getPluralFormsOfKey(code, key) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        return this.getSuffixes(code, options).map(function(suffix) {
          return "".concat(key).concat(suffix);
        });
      }
    }, {
      key: "getSuffixes",
      value: function getSuffixes(code) {
        var _this = this;
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var rule = this.getRule(code, options);
        if (!rule) {
          return [];
        }
        if (this.shouldUseIntlApi()) {
          return rule.resolvedOptions().pluralCategories.sort(function(pluralCategory1, pluralCategory2) {
            return suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2];
          }).map(function(pluralCategory) {
            return "".concat(_this.options.prepend).concat(pluralCategory);
          });
        }
        return rule.numbers.map(function(number2) {
          return _this.getSuffix(code, number2, options);
        });
      }
    }, {
      key: "getSuffix",
      value: function getSuffix(code, count) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var rule = this.getRule(code, options);
        if (rule) {
          if (this.shouldUseIntlApi()) {
            return "".concat(this.options.prepend).concat(rule.select(count));
          }
          return this.getSuffixRetroCompatible(rule, count);
        }
        this.logger.warn("no plural rule found for: ".concat(code));
        return "";
      }
    }, {
      key: "getSuffixRetroCompatible",
      value: function getSuffixRetroCompatible(rule, count) {
        var _this2 = this;
        var idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
        var suffix = rule.numbers[idx];
        if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
          if (suffix === 2) {
            suffix = "plural";
          } else if (suffix === 1) {
            suffix = "";
          }
        }
        var returnSuffix = function returnSuffix2() {
          return _this2.options.prepend && suffix.toString() ? _this2.options.prepend + suffix.toString() : suffix.toString();
        };
        if (this.options.compatibilityJSON === "v1") {
          if (suffix === 1)
            return "";
          if (typeof suffix === "number")
            return "_plural_".concat(suffix.toString());
          return returnSuffix();
        } else if (this.options.compatibilityJSON === "v2") {
          return returnSuffix();
        } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
          return returnSuffix();
        }
        return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
      }
    }, {
      key: "shouldUseIntlApi",
      value: function shouldUseIntlApi() {
        return !deprecatedJsonVersions.includes(this.options.compatibilityJSON);
      }
    }]);
    return PluralResolver2;
  }();
  function ownKeys$3(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread$3(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2] != null ? arguments[i2] : {};
      if (i2 % 2) {
        ownKeys$3(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$3(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  var Interpolator = function() {
    function Interpolator2() {
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      _classCallCheck$1(this, Interpolator2);
      this.logger = baseLogger.create("interpolator");
      this.options = options;
      this.format = options.interpolation && options.interpolation.format || function(value) {
        return value;
      };
      this.init(options);
    }
    _createClass$1(Interpolator2, [{
      key: "init",
      value: function init2() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        if (!options.interpolation)
          options.interpolation = {
            escapeValue: true
          };
        var iOpts = options.interpolation;
        this.escape = iOpts.escape !== void 0 ? iOpts.escape : escape;
        this.escapeValue = iOpts.escapeValue !== void 0 ? iOpts.escapeValue : true;
        this.useRawValueToEscape = iOpts.useRawValueToEscape !== void 0 ? iOpts.useRawValueToEscape : false;
        this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || "{{";
        this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || "}}";
        this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ",";
        this.unescapePrefix = iOpts.unescapeSuffix ? "" : iOpts.unescapePrefix || "-";
        this.unescapeSuffix = this.unescapePrefix ? "" : iOpts.unescapeSuffix || "";
        this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape("$t(");
        this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(")");
        this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || ",";
        this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1e3;
        this.alwaysFormat = iOpts.alwaysFormat !== void 0 ? iOpts.alwaysFormat : false;
        this.resetRegExp();
      }
    }, {
      key: "reset",
      value: function reset() {
        if (this.options)
          this.init(this.options);
      }
    }, {
      key: "resetRegExp",
      value: function resetRegExp() {
        var regexpStr = "".concat(this.prefix, "(.+?)").concat(this.suffix);
        this.regexp = new RegExp(regexpStr, "g");
        var regexpUnescapeStr = "".concat(this.prefix).concat(this.unescapePrefix, "(.+?)").concat(this.unescapeSuffix).concat(this.suffix);
        this.regexpUnescape = new RegExp(regexpUnescapeStr, "g");
        var nestingRegexpStr = "".concat(this.nestingPrefix, "(.+?)").concat(this.nestingSuffix);
        this.nestingRegexp = new RegExp(nestingRegexpStr, "g");
      }
    }, {
      key: "interpolate",
      value: function interpolate(str, data2, lng, options) {
        var _this = this;
        var match2;
        var value;
        var replaces;
        var defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
        function regexSafe(val) {
          return val.replace(/\$/g, "$$$$");
        }
        var handleFormat = function handleFormat2(key) {
          if (key.indexOf(_this.formatSeparator) < 0) {
            var path2 = getPathWithDefaults(data2, defaultData, key);
            return _this.alwaysFormat ? _this.format(path2, void 0, lng, _objectSpread$3(_objectSpread$3(_objectSpread$3({}, options), data2), {}, {
              interpolationkey: key
            })) : path2;
          }
          var p = key.split(_this.formatSeparator);
          var k = p.shift().trim();
          var f = p.join(_this.formatSeparator).trim();
          return _this.format(getPathWithDefaults(data2, defaultData, k), f, lng, _objectSpread$3(_objectSpread$3(_objectSpread$3({}, options), data2), {}, {
            interpolationkey: k
          }));
        };
        this.resetRegExp();
        var missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
        var skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables !== void 0 ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
        var todos = [{
          regex: this.regexpUnescape,
          safeValue: function safeValue(val) {
            return regexSafe(val);
          }
        }, {
          regex: this.regexp,
          safeValue: function safeValue(val) {
            return _this.escapeValue ? regexSafe(_this.escape(val)) : regexSafe(val);
          }
        }];
        todos.forEach(function(todo) {
          replaces = 0;
          while (match2 = todo.regex.exec(str)) {
            var matchedVar = match2[1].trim();
            value = handleFormat(matchedVar);
            if (value === void 0) {
              if (typeof missingInterpolationHandler === "function") {
                var temp = missingInterpolationHandler(str, match2, options);
                value = typeof temp === "string" ? temp : "";
              } else if (options && options.hasOwnProperty(matchedVar)) {
                value = "";
              } else if (skipOnVariables) {
                value = match2[0];
                continue;
              } else {
                _this.logger.warn("missed to pass in variable ".concat(matchedVar, " for interpolating ").concat(str));
                value = "";
              }
            } else if (typeof value !== "string" && !_this.useRawValueToEscape) {
              value = makeString(value);
            }
            var safeValue = todo.safeValue(value);
            str = str.replace(match2[0], safeValue);
            if (skipOnVariables) {
              todo.regex.lastIndex += value.length;
              todo.regex.lastIndex -= match2[0].length;
            } else {
              todo.regex.lastIndex = 0;
            }
            replaces++;
            if (replaces >= _this.maxReplaces) {
              break;
            }
          }
        });
        return str;
      }
    }, {
      key: "nest",
      value: function nest(str, fc) {
        var _this2 = this;
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var match2;
        var value;
        var clonedOptions = _objectSpread$3({}, options);
        clonedOptions.applyPostProcessor = false;
        delete clonedOptions.defaultValue;
        function handleHasOptions(key, inheritedOptions) {
          var sep = this.nestingOptionsSeparator;
          if (key.indexOf(sep) < 0)
            return key;
          var c = key.split(new RegExp("".concat(sep, "[ ]*{")));
          var optionsString = "{".concat(c[1]);
          key = c[0];
          optionsString = this.interpolate(optionsString, clonedOptions);
          var matchedSingleQuotes = optionsString.match(/'/g);
          var matchedDoubleQuotes = optionsString.match(/"/g);
          if (matchedSingleQuotes && matchedSingleQuotes.length % 2 === 0 && !matchedDoubleQuotes || matchedDoubleQuotes.length % 2 !== 0) {
            optionsString = optionsString.replace(/'/g, '"');
          }
          try {
            clonedOptions = JSON.parse(optionsString);
            if (inheritedOptions)
              clonedOptions = _objectSpread$3(_objectSpread$3({}, inheritedOptions), clonedOptions);
          } catch (e) {
            this.logger.warn("failed parsing options string in nesting for key ".concat(key), e);
            return "".concat(key).concat(sep).concat(optionsString);
          }
          delete clonedOptions.defaultValue;
          return key;
        }
        while (match2 = this.nestingRegexp.exec(str)) {
          var formatters = [];
          var doReduce = false;
          if (match2[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match2[1])) {
            var r2 = match2[1].split(this.formatSeparator).map(function(elem) {
              return elem.trim();
            });
            match2[1] = r2.shift();
            formatters = r2;
            doReduce = true;
          }
          value = fc(handleHasOptions.call(this, match2[1].trim(), clonedOptions), clonedOptions);
          if (value && match2[0] === str && typeof value !== "string")
            return value;
          if (typeof value !== "string")
            value = makeString(value);
          if (!value) {
            this.logger.warn("missed to resolve ".concat(match2[1], " for nesting ").concat(str));
            value = "";
          }
          if (doReduce) {
            value = formatters.reduce(function(v, f) {
              return _this2.format(v, f, options.lng, _objectSpread$3(_objectSpread$3({}, options), {}, {
                interpolationkey: match2[1].trim()
              }));
            }, value.trim());
          }
          str = str.replace(match2[0], value);
          this.regexp.lastIndex = 0;
        }
        return str;
      }
    }]);
    return Interpolator2;
  }();
  function ownKeys$4(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread$4(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2] != null ? arguments[i2] : {};
      if (i2 % 2) {
        ownKeys$4(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$4(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function parseFormatStr(formatStr) {
    var formatName = formatStr.toLowerCase().trim();
    var formatOptions = {};
    if (formatStr.indexOf("(") > -1) {
      var p = formatStr.split("(");
      formatName = p[0].toLowerCase().trim();
      var optStr = p[1].substring(0, p[1].length - 1);
      if (formatName === "currency" && optStr.indexOf(":") < 0) {
        if (!formatOptions.currency)
          formatOptions.currency = optStr.trim();
      } else if (formatName === "relativetime" && optStr.indexOf(":") < 0) {
        if (!formatOptions.range)
          formatOptions.range = optStr.trim();
      } else {
        var opts = optStr.split(";");
        opts.forEach(function(opt) {
          if (!opt)
            return;
          var _opt$split = opt.split(":"), _opt$split2 = _toArray(_opt$split), key = _opt$split2[0], rest = _opt$split2.slice(1);
          var val = rest.join(":").trim().replace(/^'+|'+$/g, "");
          if (!formatOptions[key.trim()])
            formatOptions[key.trim()] = val;
          if (val === "false")
            formatOptions[key.trim()] = false;
          if (val === "true")
            formatOptions[key.trim()] = true;
          if (!isNaN(val))
            formatOptions[key.trim()] = parseInt(val, 10);
        });
      }
    }
    return {
      formatName,
      formatOptions
    };
  }
  function createCachedFormatter(fn) {
    var cache = {};
    return function invokeFormatter(val, lng, options) {
      var key = lng + JSON.stringify(options);
      var formatter = cache[key];
      if (!formatter) {
        formatter = fn(lng, options);
        cache[key] = formatter;
      }
      return formatter(val);
    };
  }
  var Formatter = function() {
    function Formatter2() {
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      _classCallCheck$1(this, Formatter2);
      this.logger = baseLogger.create("formatter");
      this.options = options;
      this.formats = {
        number: createCachedFormatter(function(lng, options2) {
          var formatter = new Intl.NumberFormat(lng, options2);
          return function(val) {
            return formatter.format(val);
          };
        }),
        currency: createCachedFormatter(function(lng, options2) {
          var formatter = new Intl.NumberFormat(lng, _objectSpread$4(_objectSpread$4({}, options2), {}, {
            style: "currency"
          }));
          return function(val) {
            return formatter.format(val);
          };
        }),
        datetime: createCachedFormatter(function(lng, options2) {
          var formatter = new Intl.DateTimeFormat(lng, _objectSpread$4({}, options2));
          return function(val) {
            return formatter.format(val);
          };
        }),
        relativetime: createCachedFormatter(function(lng, options2) {
          var formatter = new Intl.RelativeTimeFormat(lng, _objectSpread$4({}, options2));
          return function(val) {
            return formatter.format(val, options2.range || "day");
          };
        }),
        list: createCachedFormatter(function(lng, options2) {
          var formatter = new Intl.ListFormat(lng, _objectSpread$4({}, options2));
          return function(val) {
            return formatter.format(val);
          };
        })
      };
      this.init(options);
    }
    _createClass$1(Formatter2, [{
      key: "init",
      value: function init2(services) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
          interpolation: {}
        };
        var iOpts = options.interpolation;
        this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ",";
      }
    }, {
      key: "add",
      value: function add2(name, fc) {
        this.formats[name.toLowerCase().trim()] = fc;
      }
    }, {
      key: "addCached",
      value: function addCached(name, fc) {
        this.formats[name.toLowerCase().trim()] = createCachedFormatter(fc);
      }
    }, {
      key: "format",
      value: function format(value, _format, lng, options) {
        var _this = this;
        var formats = _format.split(this.formatSeparator);
        var result = formats.reduce(function(mem, f) {
          var _parseFormatStr = parseFormatStr(f), formatName = _parseFormatStr.formatName, formatOptions = _parseFormatStr.formatOptions;
          if (_this.formats[formatName]) {
            var formatted = mem;
            try {
              var valOptions = options && options.formatParams && options.formatParams[options.interpolationkey] || {};
              var l2 = valOptions.locale || valOptions.lng || options.locale || options.lng || lng;
              formatted = _this.formats[formatName](mem, l2, _objectSpread$4(_objectSpread$4(_objectSpread$4({}, formatOptions), options), valOptions));
            } catch (error) {
              _this.logger.warn(error);
            }
            return formatted;
          } else {
            _this.logger.warn("there was no format function for ".concat(formatName));
          }
          return mem;
        }, value);
        return result;
      }
    }]);
    return Formatter2;
  }();
  function ownKeys$5(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread$5(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2] != null ? arguments[i2] : {};
      if (i2 % 2) {
        ownKeys$5(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$5(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _createSuper$2(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct$2();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _isNativeReflectConstruct$2() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function removePending(q, name) {
    if (q.pending[name] !== void 0) {
      delete q.pending[name];
      q.pendingCount--;
    }
  }
  var Connector = function(_EventEmitter) {
    _inherits(Connector2, _EventEmitter);
    var _super = _createSuper$2(Connector2);
    function Connector2(backend, store, services) {
      var _this;
      var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
      _classCallCheck$1(this, Connector2);
      _this = _super.call(this);
      if (isIE10) {
        EventEmitter$1.call(_assertThisInitialized(_this));
      }
      _this.backend = backend;
      _this.store = store;
      _this.services = services;
      _this.languageUtils = services.languageUtils;
      _this.options = options;
      _this.logger = baseLogger.create("backendConnector");
      _this.waitingReads = [];
      _this.maxParallelReads = options.maxParallelReads || 10;
      _this.readingCalls = 0;
      _this.maxRetries = options.maxRetries >= 0 ? options.maxRetries : 5;
      _this.retryTimeout = options.retryTimeout >= 1 ? options.retryTimeout : 350;
      _this.state = {};
      _this.queue = [];
      if (_this.backend && _this.backend.init) {
        _this.backend.init(services, options.backend, options);
      }
      return _this;
    }
    _createClass$1(Connector2, [{
      key: "queueLoad",
      value: function queueLoad(languages, namespaces, options, callback) {
        var _this2 = this;
        var toLoad = {};
        var pending = {};
        var toLoadLanguages = {};
        var toLoadNamespaces = {};
        languages.forEach(function(lng) {
          var hasAllNamespaces = true;
          namespaces.forEach(function(ns) {
            var name = "".concat(lng, "|").concat(ns);
            if (!options.reload && _this2.store.hasResourceBundle(lng, ns)) {
              _this2.state[name] = 2;
            } else if (_this2.state[name] < 0)
              ;
            else if (_this2.state[name] === 1) {
              if (pending[name] === void 0)
                pending[name] = true;
            } else {
              _this2.state[name] = 1;
              hasAllNamespaces = false;
              if (pending[name] === void 0)
                pending[name] = true;
              if (toLoad[name] === void 0)
                toLoad[name] = true;
              if (toLoadNamespaces[ns] === void 0)
                toLoadNamespaces[ns] = true;
            }
          });
          if (!hasAllNamespaces)
            toLoadLanguages[lng] = true;
        });
        if (Object.keys(toLoad).length || Object.keys(pending).length) {
          this.queue.push({
            pending,
            pendingCount: Object.keys(pending).length,
            loaded: {},
            errors: [],
            callback
          });
        }
        return {
          toLoad: Object.keys(toLoad),
          pending: Object.keys(pending),
          toLoadLanguages: Object.keys(toLoadLanguages),
          toLoadNamespaces: Object.keys(toLoadNamespaces)
        };
      }
    }, {
      key: "loaded",
      value: function loaded(name, err, data2) {
        var s = name.split("|");
        var lng = s[0];
        var ns = s[1];
        if (err)
          this.emit("failedLoading", lng, ns, err);
        if (data2) {
          this.store.addResourceBundle(lng, ns, data2);
        }
        this.state[name] = err ? -1 : 2;
        var loaded2 = {};
        this.queue.forEach(function(q) {
          pushPath(q.loaded, [lng], ns);
          removePending(q, name);
          if (err)
            q.errors.push(err);
          if (q.pendingCount === 0 && !q.done) {
            Object.keys(q.loaded).forEach(function(l2) {
              if (!loaded2[l2])
                loaded2[l2] = {};
              var loadedKeys = q.loaded[l2];
              if (loadedKeys.length) {
                loadedKeys.forEach(function(ns2) {
                  if (loaded2[l2][ns2] === void 0)
                    loaded2[l2][ns2] = true;
                });
              }
            });
            q.done = true;
            if (q.errors.length) {
              q.callback(q.errors);
            } else {
              q.callback();
            }
          }
        });
        this.emit("loaded", loaded2);
        this.queue = this.queue.filter(function(q) {
          return !q.done;
        });
      }
    }, {
      key: "read",
      value: function read(lng, ns, fcName) {
        var _this3 = this;
        var tried = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
        var wait2 = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : this.retryTimeout;
        var callback = arguments.length > 5 ? arguments[5] : void 0;
        if (!lng.length)
          return callback(null, {});
        if (this.readingCalls >= this.maxParallelReads) {
          this.waitingReads.push({
            lng,
            ns,
            fcName,
            tried,
            wait: wait2,
            callback
          });
          return;
        }
        this.readingCalls++;
        return this.backend[fcName](lng, ns, function(err, data2) {
          _this3.readingCalls--;
          if (_this3.waitingReads.length > 0) {
            var next2 = _this3.waitingReads.shift();
            _this3.read(next2.lng, next2.ns, next2.fcName, next2.tried, next2.wait, next2.callback);
          }
          if (err && data2 && tried < _this3.maxRetries) {
            setTimeout(function() {
              _this3.read.call(_this3, lng, ns, fcName, tried + 1, wait2 * 2, callback);
            }, wait2);
            return;
          }
          callback(err, data2);
        });
      }
    }, {
      key: "prepareLoading",
      value: function prepareLoading(languages, namespaces) {
        var _this4 = this;
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var callback = arguments.length > 3 ? arguments[3] : void 0;
        if (!this.backend) {
          this.logger.warn("No backend was added via i18next.use. Will not load resources.");
          return callback && callback();
        }
        if (typeof languages === "string")
          languages = this.languageUtils.toResolveHierarchy(languages);
        if (typeof namespaces === "string")
          namespaces = [namespaces];
        var toLoad = this.queueLoad(languages, namespaces, options, callback);
        if (!toLoad.toLoad.length) {
          if (!toLoad.pending.length)
            callback();
          return null;
        }
        toLoad.toLoad.forEach(function(name) {
          _this4.loadOne(name);
        });
      }
    }, {
      key: "load",
      value: function load2(languages, namespaces, callback) {
        this.prepareLoading(languages, namespaces, {}, callback);
      }
    }, {
      key: "reload",
      value: function reload(languages, namespaces, callback) {
        this.prepareLoading(languages, namespaces, {
          reload: true
        }, callback);
      }
    }, {
      key: "loadOne",
      value: function loadOne(name) {
        var _this5 = this;
        var prefix2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
        var s = name.split("|");
        var lng = s[0];
        var ns = s[1];
        this.read(lng, ns, "read", void 0, void 0, function(err, data2) {
          if (err)
            _this5.logger.warn("".concat(prefix2, "loading namespace ").concat(ns, " for language ").concat(lng, " failed"), err);
          if (!err && data2)
            _this5.logger.log("".concat(prefix2, "loaded namespace ").concat(ns, " for language ").concat(lng), data2);
          _this5.loaded(name, err, data2);
        });
      }
    }, {
      key: "saveMissing",
      value: function saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
        var options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
        if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
          this.logger.warn('did not save key "'.concat(key, '" as the namespace "').concat(namespace, '" was not yet loaded'), "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
          return;
        }
        if (key === void 0 || key === null || key === "")
          return;
        if (this.backend && this.backend.create) {
          this.backend.create(languages, namespace, key, fallbackValue, null, _objectSpread$5(_objectSpread$5({}, options), {}, {
            isUpdate
          }));
        }
        if (!languages || !languages[0])
          return;
        this.store.addResource(languages[0], namespace, key, fallbackValue);
      }
    }]);
    return Connector2;
  }(EventEmitter$1);
  function get$2() {
    return {
      debug: false,
      initImmediate: true,
      ns: ["translation"],
      defaultNS: ["translation"],
      fallbackLng: ["dev"],
      fallbackNS: false,
      supportedLngs: false,
      nonExplicitSupportedLngs: false,
      load: "all",
      preload: false,
      simplifyPluralSuffix: true,
      keySeparator: ".",
      nsSeparator: ":",
      pluralSeparator: "_",
      contextSeparator: "_",
      partialBundledLanguages: false,
      saveMissing: false,
      updateMissing: false,
      saveMissingTo: "fallback",
      saveMissingPlurals: true,
      missingKeyHandler: false,
      missingInterpolationHandler: false,
      postProcess: false,
      postProcessPassResolved: false,
      returnNull: true,
      returnEmptyString: true,
      returnObjects: false,
      joinArrays: false,
      returnedObjectHandler: false,
      parseMissingKeyHandler: false,
      appendNamespaceToMissingKey: false,
      appendNamespaceToCIMode: false,
      overloadTranslationOptionHandler: function handle(args) {
        var ret = {};
        if (_typeof$2(args[1]) === "object")
          ret = args[1];
        if (typeof args[1] === "string")
          ret.defaultValue = args[1];
        if (typeof args[2] === "string")
          ret.tDescription = args[2];
        if (_typeof$2(args[2]) === "object" || _typeof$2(args[3]) === "object") {
          var options = args[3] || args[2];
          Object.keys(options).forEach(function(key) {
            ret[key] = options[key];
          });
        }
        return ret;
      },
      interpolation: {
        escapeValue: true,
        format: function format(value, _format, lng, options) {
          return value;
        },
        prefix: "{{",
        suffix: "}}",
        formatSeparator: ",",
        unescapePrefix: "-",
        nestingPrefix: "$t(",
        nestingSuffix: ")",
        nestingOptionsSeparator: ",",
        maxReplaces: 1e3,
        skipOnVariables: true
      }
    };
  }
  function transformOptions(options) {
    if (typeof options.ns === "string")
      options.ns = [options.ns];
    if (typeof options.fallbackLng === "string")
      options.fallbackLng = [options.fallbackLng];
    if (typeof options.fallbackNS === "string")
      options.fallbackNS = [options.fallbackNS];
    if (options.supportedLngs && options.supportedLngs.indexOf("cimode") < 0) {
      options.supportedLngs = options.supportedLngs.concat(["cimode"]);
    }
    return options;
  }
  function ownKeys$6(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread$6(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2] != null ? arguments[i2] : {};
      if (i2 % 2) {
        ownKeys$6(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$6(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _createSuper$3(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct$3();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _isNativeReflectConstruct$3() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function noop$2() {
  }
  function bindMemberFunctions(inst) {
    var mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));
    mems.forEach(function(mem) {
      if (typeof inst[mem] === "function") {
        inst[mem] = inst[mem].bind(inst);
      }
    });
  }
  var I18n = function(_EventEmitter) {
    _inherits(I18n2, _EventEmitter);
    var _super = _createSuper$3(I18n2);
    function I18n2() {
      var _this;
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : void 0;
      _classCallCheck$1(this, I18n2);
      _this = _super.call(this);
      if (isIE10) {
        EventEmitter$1.call(_assertThisInitialized(_this));
      }
      _this.options = transformOptions(options);
      _this.services = {};
      _this.logger = baseLogger;
      _this.modules = {
        external: []
      };
      bindMemberFunctions(_assertThisInitialized(_this));
      if (callback && !_this.isInitialized && !options.isClone) {
        if (!_this.options.initImmediate) {
          _this.init(options, callback);
          return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
        }
        setTimeout(function() {
          _this.init(options, callback);
        }, 0);
      }
      return _this;
    }
    _createClass$1(I18n2, [{
      key: "init",
      value: function init2() {
        var _this2 = this;
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var callback = arguments.length > 1 ? arguments[1] : void 0;
        if (typeof options === "function") {
          callback = options;
          options = {};
        }
        if (!options.defaultNS && options.defaultNS !== false && options.ns) {
          if (typeof options.ns === "string") {
            options.defaultNS = options.ns;
          } else if (options.ns.indexOf("translation") < 0) {
            options.defaultNS = options.ns[0];
          }
        }
        var defOpts = get$2();
        this.options = _objectSpread$6(_objectSpread$6(_objectSpread$6({}, defOpts), this.options), transformOptions(options));
        if (this.options.compatibilityAPI !== "v1") {
          this.options.interpolation = _objectSpread$6(_objectSpread$6({}, defOpts.interpolation), this.options.interpolation);
        }
        if (options.keySeparator !== void 0) {
          this.options.userDefinedKeySeparator = options.keySeparator;
        }
        if (options.nsSeparator !== void 0) {
          this.options.userDefinedNsSeparator = options.nsSeparator;
        }
        function createClassOnDemand(ClassOrObject) {
          if (!ClassOrObject)
            return null;
          if (typeof ClassOrObject === "function")
            return new ClassOrObject();
          return ClassOrObject;
        }
        if (!this.options.isClone) {
          if (this.modules.logger) {
            baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
          } else {
            baseLogger.init(null, this.options);
          }
          var formatter;
          if (this.modules.formatter) {
            formatter = this.modules.formatter;
          } else if (typeof Intl !== "undefined") {
            formatter = Formatter;
          }
          var lu = new LanguageUtil(this.options);
          this.store = new ResourceStore(this.options.resources, this.options);
          var s = this.services;
          s.logger = baseLogger;
          s.resourceStore = this.store;
          s.languageUtils = lu;
          s.pluralResolver = new PluralResolver(lu, {
            prepend: this.options.pluralSeparator,
            compatibilityJSON: this.options.compatibilityJSON,
            simplifyPluralSuffix: this.options.simplifyPluralSuffix
          });
          if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {
            s.formatter = createClassOnDemand(formatter);
            s.formatter.init(s, this.options);
            this.options.interpolation.format = s.formatter.format.bind(s.formatter);
          }
          s.interpolator = new Interpolator(this.options);
          s.utils = {
            hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
          };
          s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
          s.backendConnector.on("*", function(event) {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            _this2.emit.apply(_this2, [event].concat(args));
          });
          if (this.modules.languageDetector) {
            s.languageDetector = createClassOnDemand(this.modules.languageDetector);
            s.languageDetector.init(s, this.options.detection, this.options);
          }
          if (this.modules.i18nFormat) {
            s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
            if (s.i18nFormat.init)
              s.i18nFormat.init(this);
          }
          this.translator = new Translator(this.services, this.options);
          this.translator.on("*", function(event) {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            _this2.emit.apply(_this2, [event].concat(args));
          });
          this.modules.external.forEach(function(m2) {
            if (m2.init)
              m2.init(_this2);
          });
        }
        this.format = this.options.interpolation.format;
        if (!callback)
          callback = noop$2;
        if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
          var codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
          if (codes.length > 0 && codes[0] !== "dev")
            this.options.lng = codes[0];
        }
        if (!this.services.languageDetector && !this.options.lng) {
          this.logger.warn("init: no languageDetector is used and no lng is defined");
        }
        var storeApi = ["getResource", "hasResourceBundle", "getResourceBundle", "getDataByLanguage"];
        storeApi.forEach(function(fcName) {
          _this2[fcName] = function() {
            var _this2$store;
            return (_this2$store = _this2.store)[fcName].apply(_this2$store, arguments);
          };
        });
        var storeApiChained = ["addResource", "addResources", "addResourceBundle", "removeResourceBundle"];
        storeApiChained.forEach(function(fcName) {
          _this2[fcName] = function() {
            var _this2$store2;
            (_this2$store2 = _this2.store)[fcName].apply(_this2$store2, arguments);
            return _this2;
          };
        });
        var deferred = defer();
        var load2 = function load3() {
          var finish = function finish2(err, t) {
            if (_this2.isInitialized && !_this2.initializedStoreOnce)
              _this2.logger.warn("init: i18next is already initialized. You should call init just once!");
            _this2.isInitialized = true;
            if (!_this2.options.isClone)
              _this2.logger.log("initialized", _this2.options);
            _this2.emit("initialized", _this2.options);
            deferred.resolve(t);
            callback(err, t);
          };
          if (_this2.languages && _this2.options.compatibilityAPI !== "v1" && !_this2.isInitialized)
            return finish(null, _this2.t.bind(_this2));
          _this2.changeLanguage(_this2.options.lng, finish);
        };
        if (this.options.resources || !this.options.initImmediate) {
          load2();
        } else {
          setTimeout(load2, 0);
        }
        return deferred;
      }
    }, {
      key: "loadResources",
      value: function loadResources(language) {
        var _this3 = this;
        var callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop$2;
        var usedCallback = callback;
        var usedLng = typeof language === "string" ? language : this.language;
        if (typeof language === "function")
          usedCallback = language;
        if (!this.options.resources || this.options.partialBundledLanguages) {
          if (usedLng && usedLng.toLowerCase() === "cimode")
            return usedCallback();
          var toLoad = [];
          var append2 = function append3(lng) {
            if (!lng)
              return;
            var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);
            lngs.forEach(function(l2) {
              if (toLoad.indexOf(l2) < 0)
                toLoad.push(l2);
            });
          };
          if (!usedLng) {
            var fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
            fallbacks.forEach(function(l2) {
              return append2(l2);
            });
          } else {
            append2(usedLng);
          }
          if (this.options.preload) {
            this.options.preload.forEach(function(l2) {
              return append2(l2);
            });
          }
          this.services.backendConnector.load(toLoad, this.options.ns, function(e) {
            if (!e && !_this3.resolvedLanguage && _this3.language)
              _this3.setResolvedLanguage(_this3.language);
            usedCallback(e);
          });
        } else {
          usedCallback(null);
        }
      }
    }, {
      key: "reloadResources",
      value: function reloadResources(lngs, ns, callback) {
        var deferred = defer();
        if (!lngs)
          lngs = this.languages;
        if (!ns)
          ns = this.options.ns;
        if (!callback)
          callback = noop$2;
        this.services.backendConnector.reload(lngs, ns, function(err) {
          deferred.resolve();
          callback(err);
        });
        return deferred;
      }
    }, {
      key: "use",
      value: function use(module2) {
        if (!module2)
          throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");
        if (!module2.type)
          throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");
        if (module2.type === "backend") {
          this.modules.backend = module2;
        }
        if (module2.type === "logger" || module2.log && module2.warn && module2.error) {
          this.modules.logger = module2;
        }
        if (module2.type === "languageDetector") {
          this.modules.languageDetector = module2;
        }
        if (module2.type === "i18nFormat") {
          this.modules.i18nFormat = module2;
        }
        if (module2.type === "postProcessor") {
          postProcessor.addPostProcessor(module2);
        }
        if (module2.type === "formatter") {
          this.modules.formatter = module2;
        }
        if (module2.type === "3rdParty") {
          this.modules.external.push(module2);
        }
        return this;
      }
    }, {
      key: "setResolvedLanguage",
      value: function setResolvedLanguage(l2) {
        if (!l2 || !this.languages)
          return;
        if (["cimode", "dev"].indexOf(l2) > -1)
          return;
        for (var li = 0; li < this.languages.length; li++) {
          var lngInLngs = this.languages[li];
          if (["cimode", "dev"].indexOf(lngInLngs) > -1)
            continue;
          if (this.store.hasLanguageSomeTranslations(lngInLngs)) {
            this.resolvedLanguage = lngInLngs;
            break;
          }
        }
      }
    }, {
      key: "changeLanguage",
      value: function changeLanguage(lng, callback) {
        var _this4 = this;
        this.isLanguageChangingTo = lng;
        var deferred = defer();
        this.emit("languageChanging", lng);
        var setLngProps = function setLngProps2(l2) {
          _this4.language = l2;
          _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l2);
          _this4.resolvedLanguage = void 0;
          _this4.setResolvedLanguage(l2);
        };
        var done = function done2(err, l2) {
          if (l2) {
            setLngProps(l2);
            _this4.translator.changeLanguage(l2);
            _this4.isLanguageChangingTo = void 0;
            _this4.emit("languageChanged", l2);
            _this4.logger.log("languageChanged", l2);
          } else {
            _this4.isLanguageChangingTo = void 0;
          }
          deferred.resolve(function() {
            return _this4.t.apply(_this4, arguments);
          });
          if (callback)
            callback(err, function() {
              return _this4.t.apply(_this4, arguments);
            });
        };
        var setLng = function setLng2(lngs) {
          if (!lng && !lngs && _this4.services.languageDetector)
            lngs = [];
          var l2 = typeof lngs === "string" ? lngs : _this4.services.languageUtils.getBestMatchFromCodes(lngs);
          if (l2) {
            if (!_this4.language) {
              setLngProps(l2);
            }
            if (!_this4.translator.language)
              _this4.translator.changeLanguage(l2);
            if (_this4.services.languageDetector)
              _this4.services.languageDetector.cacheUserLanguage(l2);
          }
          _this4.loadResources(l2, function(err) {
            done(err, l2);
          });
        };
        if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
          setLng(this.services.languageDetector.detect());
        } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
          this.services.languageDetector.detect(setLng);
        } else {
          setLng(lng);
        }
        return deferred;
      }
    }, {
      key: "getFixedT",
      value: function getFixedT(lng, ns, keyPrefix) {
        var _this5 = this;
        var fixedT = function fixedT2(key, opts) {
          var options;
          if (_typeof$2(opts) !== "object") {
            for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
              rest[_key3 - 2] = arguments[_key3];
            }
            options = _this5.options.overloadTranslationOptionHandler([key, opts].concat(rest));
          } else {
            options = _objectSpread$6({}, opts);
          }
          options.lng = options.lng || fixedT2.lng;
          options.lngs = options.lngs || fixedT2.lngs;
          options.ns = options.ns || fixedT2.ns;
          options.keyPrefix = options.keyPrefix || keyPrefix || fixedT2.keyPrefix;
          var keySeparator = _this5.options.keySeparator || ".";
          var resultKey = options.keyPrefix ? "".concat(options.keyPrefix).concat(keySeparator).concat(key) : key;
          return _this5.t(resultKey, options);
        };
        if (typeof lng === "string") {
          fixedT.lng = lng;
        } else {
          fixedT.lngs = lng;
        }
        fixedT.ns = ns;
        fixedT.keyPrefix = keyPrefix;
        return fixedT;
      }
    }, {
      key: "t",
      value: function t() {
        var _this$translator;
        return this.translator && (_this$translator = this.translator).translate.apply(_this$translator, arguments);
      }
    }, {
      key: "exists",
      value: function exists2() {
        var _this$translator2;
        return this.translator && (_this$translator2 = this.translator).exists.apply(_this$translator2, arguments);
      }
    }, {
      key: "setDefaultNamespace",
      value: function setDefaultNamespace(ns) {
        this.options.defaultNS = ns;
      }
    }, {
      key: "hasLoadedNamespace",
      value: function hasLoadedNamespace2(ns) {
        var _this6 = this;
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        if (!this.isInitialized) {
          this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages);
          return false;
        }
        if (!this.languages || !this.languages.length) {
          this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages);
          return false;
        }
        var lng = this.resolvedLanguage || this.languages[0];
        var fallbackLng = this.options ? this.options.fallbackLng : false;
        var lastLng = this.languages[this.languages.length - 1];
        if (lng.toLowerCase() === "cimode")
          return true;
        var loadNotPending = function loadNotPending2(l2, n) {
          var loadState = _this6.services.backendConnector.state["".concat(l2, "|").concat(n)];
          return loadState === -1 || loadState === 2;
        };
        if (options.precheck) {
          var preResult = options.precheck(this, loadNotPending);
          if (preResult !== void 0)
            return preResult;
        }
        if (this.hasResourceBundle(lng, ns))
          return true;
        if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages)
          return true;
        if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns)))
          return true;
        return false;
      }
    }, {
      key: "loadNamespaces",
      value: function loadNamespaces2(ns, callback) {
        var _this7 = this;
        var deferred = defer();
        if (!this.options.ns) {
          callback && callback();
          return Promise.resolve();
        }
        if (typeof ns === "string")
          ns = [ns];
        ns.forEach(function(n) {
          if (_this7.options.ns.indexOf(n) < 0)
            _this7.options.ns.push(n);
        });
        this.loadResources(function(err) {
          deferred.resolve();
          if (callback)
            callback(err);
        });
        return deferred;
      }
    }, {
      key: "loadLanguages",
      value: function loadLanguages(lngs, callback) {
        var deferred = defer();
        if (typeof lngs === "string")
          lngs = [lngs];
        var preloaded = this.options.preload || [];
        var newLngs = lngs.filter(function(lng) {
          return preloaded.indexOf(lng) < 0;
        });
        if (!newLngs.length) {
          if (callback)
            callback();
          return Promise.resolve();
        }
        this.options.preload = preloaded.concat(newLngs);
        this.loadResources(function(err) {
          deferred.resolve();
          if (callback)
            callback(err);
        });
        return deferred;
      }
    }, {
      key: "dir",
      value: function dir(lng) {
        if (!lng)
          lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);
        if (!lng)
          return "rtl";
        var rtlLngs = ["ar", "shu", "sqr", "ssh", "xaa", "yhd", "yud", "aao", "abh", "abv", "acm", "acq", "acw", "acx", "acy", "adf", "ads", "aeb", "aec", "afb", "ajp", "apc", "apd", "arb", "arq", "ars", "ary", "arz", "auz", "avl", "ayh", "ayl", "ayn", "ayp", "bbz", "pga", "he", "iw", "ps", "pbt", "pbu", "pst", "prp", "prd", "ug", "ur", "ydd", "yds", "yih", "ji", "yi", "hbo", "men", "xmn", "fa", "jpr", "peo", "pes", "prs", "dv", "sam", "ckb"];
        return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf("-arab") > 1 ? "rtl" : "ltr";
      }
    }, {
      key: "cloneInstance",
      value: function cloneInstance() {
        var _this8 = this;
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop$2;
        var mergedOptions = _objectSpread$6(_objectSpread$6(_objectSpread$6({}, this.options), options), {
          isClone: true
        });
        var clone = new I18n2(mergedOptions);
        if (options.debug !== void 0 || options.prefix !== void 0) {
          clone.logger = clone.logger.clone(options);
        }
        var membersToCopy = ["store", "services", "language"];
        membersToCopy.forEach(function(m2) {
          clone[m2] = _this8[m2];
        });
        clone.services = _objectSpread$6({}, this.services);
        clone.services.utils = {
          hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
        };
        clone.translator = new Translator(clone.services, clone.options);
        clone.translator.on("*", function(event) {
          for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
            args[_key4 - 1] = arguments[_key4];
          }
          clone.emit.apply(clone, [event].concat(args));
        });
        clone.init(mergedOptions, callback);
        clone.translator.options = clone.options;
        clone.translator.backendConnector.services.utils = {
          hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
        };
        return clone;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return {
          options: this.options,
          store: this.store,
          language: this.language,
          languages: this.languages,
          resolvedLanguage: this.resolvedLanguage
        };
      }
    }]);
    return I18n2;
  }(EventEmitter$1);
  _defineProperty$1(I18n, "createInstance", function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var callback = arguments.length > 1 ? arguments[1] : void 0;
    return new I18n(options, callback);
  });
  var instance = I18n.createInstance();
  instance.createInstance = I18n.createInstance;
  const i18n = instance;
  const WIDGET = {
    SELECT_ALL: "Izaberite sve slike koje sadrže",
    NEXT: "Sledeće",
    SUBMIT: "Prihvati",
    CANCEL: "Otkaži",
    SELECT_ACCOUNT: "Odaberi nalog",
    NO_ACCOUNTS_FOUND: "Nije pronađen nijedan nalog",
    ACCOUNT_NOT_FOUND: "Nalog nije pronađen",
    NO_EXTENSION_FOUND: "Nije pronađen nijedan dodatak",
    EXTENSION_NOT_FOUND: "Ekstenzija nije pronađena"
  };
  const GENERAL = {
    BAD_SURI: "Loš SURI",
    CANNOT_FIND_CONFIG_FILE: "prosopo.config.js / prosopo.config.ts nije pronađen.",
    JSON_LOAD_FAILED: "Failed to load JSON file",
    CREATE_JSON_FILE_FAILED: "Učitavanje JSON datoteke nije uspelo",
    ASSERT_ERROR: "AssertionError",
    GENERATE_CPATCHAS_JSON_FAILED: "Nešto je pošlo naopako pri pravljenju captchas json datoteke",
    CALCULATE_CAPTCHA_SOLUTION: "Nešto je pošlo naopako pri izračunavanju captcha rešenja",
    MNEMONIC_UNDEFINED: "Mnemonik snabdevača nedefinisan. Podesite `PROVIDER_MNEMONIC` u promenljivama okruženja",
    NO_MNEMONIC_OR_SEED: "Mnemonik / seed snabdevača nedefinisan.",
    ASYNC_FACTORY_CREATE: "Koristite factory metodu „kreiraj“.",
    CANT_FIND_KEYRINGPAIR: "Keyringpair nije pronađen za {{address}}",
    ENVIRONMENT_NOT_READY: "Environment not ready",
    INVALID_SIGNATURE: "Invalid signature",
    PAIR_TYPE_UNDEFINED: "Pair type undefined",
    NOT_IMPLEMENTED: "Ne sprovodi"
  };
  const CONTRACT = {
    INVALID_METHOD: "Nevažeća metoda ugovora",
    TX_ERROR: "Greška pri kreiranju transakcije",
    QUERY_ERROR: "Greška pri kreiranju upita",
    INVALID_ADDRESS: "Kodiranje nevažeće adrese nije uspelo",
    INVALID_STORAGE_NAME: "Pronalaženje datog imena skladišta nije uspelo",
    CAPTCHA_SOLUTION_COMMITMENT_DOES_NOT_EXIST: "Predaja captcha rešenja ne postoji",
    DAPP_NOT_ACTIVE: "Dapp nije aktivan",
    CONTRACT_UNDEFINED: "Ugovor nedefinisan",
    SIGNER_UNDEFINED: "Signer nedefinisan",
    SIGNER_NOT_SUPPORTED: "Signer nije podržan. Umesto toga koristite connect, npr. contract.connect(signer)",
    CANNOT_FIND_KEYPAIR: "Nije moguće pronaći par ključeva",
    INVALID_TYPE: "Invalid type",
    INVALID_ABI: "Invalid ABI",
    NOT_HANDLED: "Not handled",
    INVALID_STORAGE_TYPE: "Invalid storage type"
  };
  const CONFIG = {
    UNKNOWN_ENVIRONMENT: "Zatraženo je nepoznato okruženje",
    INVALID_CAPTCHA_NUMBER: "Molimo vas da ispravno podesite captcha konfiguracije",
    CONFIGURATIONS_LOAD_FAILED: "Učitavanje Prosopo konfiguracija nije uspelo",
    INVALID_LOG_LEVEL: "Nevažeći nivo evidencije"
  };
  const DATASET = {
    PARSE_ERROR: "Greška pri parsiranju skupa podataka",
    HASH_ERROR: "Greška pri heširanju skupa podataka",
    INVALID_DATASET_ID: "Nevažeći ID skupa podataka",
    CAPTCHAS_COUNT_LESS_THAN_CONFIGURED: "Broj captcha u skupu podataka je manji od konfigurisanog broja captcha",
    SOLUTIONS_COUNT_LESS_THAN_CONFIGURED: "Broj rešenja u skupu podataka je manji od konfigurisanog broja rešenja"
  };
  const DATABASE = {
    CONNECT_ERROR: "Neuspelo povezivanje",
    DATABASE_IMPORT_FAILED: "Import engine-a baze podataka nije uspeo",
    DATABASE_UNDEFINED: "Klijent baze podataka nije definisan",
    COLLECTION_UNDEFINED: "Kolekcija baze podataka nije definisana",
    DATASET_LOAD_FAILED: "Učitavanje skupa podataka nije uspelo",
    DATASET_GET_FAILED: "Preuzimanje skupa podataka nije uspelo",
    CAPTCHA_GET_FAILED: "Preuzimanje captcha-e nije uspelo",
    NO_CAPTCHAS_FOUND: "Nema captcha-e koja se podudara sa ID-om skupa podataka",
    PENDING_RECORD_NOT_FOUND: "Nije pronađen nijedan zapis na čekanju",
    INVALID_HASH: "Nevažeći heš",
    SOLUTION_GET_FAILED: "Preuzimanje rešenja nije uspelo",
    DATASET_WITH_SOLUTIONS_GET_FAILED: "Nisu pronađeni skupovi podataka sa potrebnim brojem rešenja",
    SOLUTION_APPROVE_FAILED: "Failed to approve solution",
    SOLUTION_FLAG_FAILED: "Failed to flag solution as processed",
    COMMITMENT_FLAG_FAILED: "Failed to flag commitment as processed"
  };
  const CAPTCHA = {
    PARSE_ERROR: "Greška pri parsiranju captcha",
    INVALID_CAPTCHA_ID: "Nevažeći ID captcha-e",
    SOLUTION_HASH_ERROR: "Greška pri heširanju rešenja",
    INVALID_ITEM_FORMAT: "Dozvoljeni su samo slikovni i tekstualni tipovi stavki",
    DIFFERENT_DATASET_IDS: "ID-ovi skupova podataka se ne podudaraju",
    INVALID_BLOCK_NO: "Broj bloka nije validan",
    ID_MISMATCH: "ID-ovi captcha-i se ne podudaraju",
    MISSING_ITEM_HASH: "Nedostaje heš stavke",
    INVALID_LEAF_HASH: "Nedostaje heš lista",
    INVALID_CAPTCHA_CHALLENGE: "Invalid captcha challenge",
    INVALID_DATASET_CONTENT_ID: "Invalid dataset content id",
    DAPP_USER_SOLUTION_NOT_FOUND: "Dapp user solution not found",
    INVALID_PROVIDER_URL: "Invalid provider url"
  };
  const API = {
    BODY_UNDEFINED: "Body mora biti definisan u API POST pozivu",
    PARAMETER_UNDEFINED: "Parametri moraju biti definisani u API POST pozivu",
    CAPTCHA_FAILED: "Netačno ste odgovorili na jednu ili više captcha. Molim vas, pokušajte ponovo",
    CAPTCHA_PENDING: "Captcha rešenja su predata i čekaju odobrenje",
    CAPTCHA_PASSED: "Tačno ste odgovorili na captcha-e",
    BAD_REQUEST: "Neispravan zahtev",
    PAYMENT_INFO_NOT_FOUND: "Informacije o plaćanju nisu pronađene za date hešove bloka i transakcije",
    USER_VERIFIED: "User verified",
    USER_NOT_VERIFIED: "User not verified"
  };
  const CLI = {
    PARAMETER_ERROR: "Nevažeći parametar"
  };
  const DEVELOPER = {
    DAPP_SITE_KEY_MISSING: "DAPP_SITE_KEY nije podešen u .env datoteci.",
    BALANCE_TOO_LOW: "{{mnemonic}} balans je prenizak: {{balance}}",
    CAPTCHA_ID_MISSING: "Nije moguće pronaći ID podataka captcha-e",
    COMMITMENT_ID_MISSING: "Nedostaje ID predaje",
    PROVIDER_NOT_FOUND: "Snabdevač nije pronađen",
    CREATE_ACCOUNT_FAILED: "Nije moguće kreirati nalog!",
    CREATE_ACCOUNT_FAILED_OUT_OF_FUNDS: "Could not create an account as there are no funds. Restart the substrate node.",
    NO_MOCK_ENV: "MockEnvironment nije podešen",
    ACCOUNT_TYPE_MISSING: "{{accountType}} nije kreiran od strane databasePopulator-a",
    FUNDING_FAILED: "Finansiranje nije uspelo",
    MISSING_PROVIDER_PAIR: "Missing provider pair"
  };
  const translationSr = {
    WIDGET,
    GENERAL,
    CONTRACT,
    CONFIG,
    DATASET,
    DATABASE,
    CAPTCHA,
    API,
    CLI,
    DEVELOPER
  };
  const commonOptions = {
    debug: false,
    fallbackLng: "en",
    resources: {
      en: {
        translation: translationEn
      },
      sr: {
        translation: translationSr
      }
    }
  };
  const reactOptions = {
    react: {
      useSuspense: false
    }
  };
  const nodeOptions = {};
  if (isClientSide()) {
    i18n.use(Browser).use(initReactI18next).init({ ...commonOptions, ...reactOptions });
  } else {
    i18n.use(Backend).use(LanguageDetector).init({ ...commonOptions, ...nodeOptions });
  }
  function useTranslation(options) {
    return useTranslation$1("translation", { i18n, ...options });
  }
  function translateOrFallback(key, options, fallback, i18n$1 = i18n) {
    try {
      if (key) {
        return i18n$1.t(key, options);
      } else {
        return fallback || key;
      }
    } catch {
      return fallback || key;
    }
  }
  class ProsopoBaseError extends Error {
    getTranslated(i18n2) {
      return translateOrFallback(this.tKey, this.tParams, this.message, i18n2);
    }
  }
  class ProsopoEnvError extends ProsopoBaseError {
    constructor(error, context, options, ...params) {
      const isError2 = error instanceof Error;
      super(isError2 ? error.message : translateOrFallback(error, options));
      this.name = context && `${ProsopoEnvError.name}@${translateOrFallback(context, options)}` || ProsopoEnvError.name;
      if (isError2) {
        this.cause = error;
        if (error instanceof ProsopoBaseError) {
          this.tKey = error["tKey"];
          this.tParams = error["tParams"];
        } else if (translationKeys.includes(context)) {
          this.tKey = context;
          this.tParams = options || {};
        }
      } else {
        this.tKey = error;
        this.tParams = options || {};
      }
      console.error("\n********************* ERROR *********************\n");
      console.error(this.cause, this.stack, ...params);
    }
  }
  var util$1;
  (function(util2) {
    util2.assertEqual = (val) => val;
    function assertIs(_arg) {
    }
    util2.assertIs = assertIs;
    function assertNever(_x) {
      throw new Error();
    }
    util2.assertNever = assertNever;
    util2.arrayToEnum = (items) => {
      const obj = {};
      for (const item of items) {
        obj[item] = item;
      }
      return obj;
    };
    util2.getValidEnumValues = (obj) => {
      const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
      const filtered = {};
      for (const k of validKeys) {
        filtered[k] = obj[k];
      }
      return util2.objectValues(filtered);
    };
    util2.objectValues = (obj) => {
      return util2.objectKeys(obj).map(function(e) {
        return obj[e];
      });
    };
    util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
      const keys2 = [];
      for (const key in object) {
        if (Object.prototype.hasOwnProperty.call(object, key)) {
          keys2.push(key);
        }
      }
      return keys2;
    };
    util2.find = (arr2, checker) => {
      for (const item of arr2) {
        if (checker(item))
          return item;
      }
      return void 0;
    };
    util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
    function joinValues(array, separator = " | ") {
      return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
    }
    util2.joinValues = joinValues;
    util2.jsonStringifyReplacer = (_2, value) => {
      if (typeof value === "bigint") {
        return value.toString();
      }
      return value;
    };
  })(util$1 || (util$1 = {}));
  var objectUtil;
  (function(objectUtil2) {
    objectUtil2.mergeShapes = (first2, second) => {
      return {
        ...first2,
        ...second
        // second overwrites first
      };
    };
  })(objectUtil || (objectUtil = {}));
  const ZodParsedType = util$1.arrayToEnum([
    "string",
    "nan",
    "number",
    "integer",
    "float",
    "boolean",
    "date",
    "bigint",
    "symbol",
    "function",
    "undefined",
    "null",
    "array",
    "object",
    "unknown",
    "promise",
    "void",
    "never",
    "map",
    "set"
  ]);
  const getParsedType = (data2) => {
    const t = typeof data2;
    switch (t) {
      case "undefined":
        return ZodParsedType.undefined;
      case "string":
        return ZodParsedType.string;
      case "number":
        return isNaN(data2) ? ZodParsedType.nan : ZodParsedType.number;
      case "boolean":
        return ZodParsedType.boolean;
      case "function":
        return ZodParsedType.function;
      case "bigint":
        return ZodParsedType.bigint;
      case "symbol":
        return ZodParsedType.symbol;
      case "object":
        if (Array.isArray(data2)) {
          return ZodParsedType.array;
        }
        if (data2 === null) {
          return ZodParsedType.null;
        }
        if (data2.then && typeof data2.then === "function" && data2.catch && typeof data2.catch === "function") {
          return ZodParsedType.promise;
        }
        if (typeof Map !== "undefined" && data2 instanceof Map) {
          return ZodParsedType.map;
        }
        if (typeof Set !== "undefined" && data2 instanceof Set) {
          return ZodParsedType.set;
        }
        if (typeof Date !== "undefined" && data2 instanceof Date) {
          return ZodParsedType.date;
        }
        return ZodParsedType.object;
      default:
        return ZodParsedType.unknown;
    }
  };
  const ZodIssueCode = util$1.arrayToEnum([
    "invalid_type",
    "invalid_literal",
    "custom",
    "invalid_union",
    "invalid_union_discriminator",
    "invalid_enum_value",
    "unrecognized_keys",
    "invalid_arguments",
    "invalid_return_type",
    "invalid_date",
    "invalid_string",
    "too_small",
    "too_big",
    "invalid_intersection_types",
    "not_multiple_of",
    "not_finite"
  ]);
  const quotelessJson = (obj) => {
    const json = JSON.stringify(obj, null, 2);
    return json.replace(/"([^"]+)":/g, "$1:");
  };
  class ZodError extends Error {
    constructor(issues) {
      super();
      this.issues = [];
      this.addIssue = (sub) => {
        this.issues = [...this.issues, sub];
      };
      this.addIssues = (subs = []) => {
        this.issues = [...this.issues, ...subs];
      };
      const actualProto = new.target.prototype;
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(this, actualProto);
      } else {
        this.__proto__ = actualProto;
      }
      this.name = "ZodError";
      this.issues = issues;
    }
    get errors() {
      return this.issues;
    }
    format(_mapper) {
      const mapper = _mapper || function(issue) {
        return issue.message;
      };
      const fieldErrors = { _errors: [] };
      const processError = (error) => {
        for (const issue of error.issues) {
          if (issue.code === "invalid_union") {
            issue.unionErrors.map(processError);
          } else if (issue.code === "invalid_return_type") {
            processError(issue.returnTypeError);
          } else if (issue.code === "invalid_arguments") {
            processError(issue.argumentsError);
          } else if (issue.path.length === 0) {
            fieldErrors._errors.push(mapper(issue));
          } else {
            let curr = fieldErrors;
            let i2 = 0;
            while (i2 < issue.path.length) {
              const el = issue.path[i2];
              const terminal = i2 === issue.path.length - 1;
              if (!terminal) {
                curr[el] = curr[el] || { _errors: [] };
              } else {
                curr[el] = curr[el] || { _errors: [] };
                curr[el]._errors.push(mapper(issue));
              }
              curr = curr[el];
              i2++;
            }
          }
        }
      };
      processError(this);
      return fieldErrors;
    }
    toString() {
      return this.message;
    }
    get message() {
      return JSON.stringify(this.issues, util$1.jsonStringifyReplacer, 2);
    }
    get isEmpty() {
      return this.issues.length === 0;
    }
    flatten(mapper = (issue) => issue.message) {
      const fieldErrors = {};
      const formErrors = [];
      for (const sub of this.issues) {
        if (sub.path.length > 0) {
          fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
          fieldErrors[sub.path[0]].push(mapper(sub));
        } else {
          formErrors.push(mapper(sub));
        }
      }
      return { formErrors, fieldErrors };
    }
    get formErrors() {
      return this.flatten();
    }
  }
  ZodError.create = (issues) => {
    const error = new ZodError(issues);
    return error;
  };
  const errorMap = (issue, _ctx) => {
    let message;
    switch (issue.code) {
      case ZodIssueCode.invalid_type:
        if (issue.received === ZodParsedType.undefined) {
          message = "Required";
        } else {
          message = `Expected ${issue.expected}, received ${issue.received}`;
        }
        break;
      case ZodIssueCode.invalid_literal:
        message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util$1.jsonStringifyReplacer)}`;
        break;
      case ZodIssueCode.unrecognized_keys:
        message = `Unrecognized key(s) in object: ${util$1.joinValues(issue.keys, ", ")}`;
        break;
      case ZodIssueCode.invalid_union:
        message = `Invalid input`;
        break;
      case ZodIssueCode.invalid_union_discriminator:
        message = `Invalid discriminator value. Expected ${util$1.joinValues(issue.options)}`;
        break;
      case ZodIssueCode.invalid_enum_value:
        message = `Invalid enum value. Expected ${util$1.joinValues(issue.options)}, received '${issue.received}'`;
        break;
      case ZodIssueCode.invalid_arguments:
        message = `Invalid function arguments`;
        break;
      case ZodIssueCode.invalid_return_type:
        message = `Invalid function return type`;
        break;
      case ZodIssueCode.invalid_date:
        message = `Invalid date`;
        break;
      case ZodIssueCode.invalid_string:
        if (typeof issue.validation === "object") {
          if ("includes" in issue.validation) {
            message = `Invalid input: must include "${issue.validation.includes}"`;
            if (typeof issue.validation.position === "number") {
              message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
            }
          } else if ("startsWith" in issue.validation) {
            message = `Invalid input: must start with "${issue.validation.startsWith}"`;
          } else if ("endsWith" in issue.validation) {
            message = `Invalid input: must end with "${issue.validation.endsWith}"`;
          } else {
            util$1.assertNever(issue.validation);
          }
        } else if (issue.validation !== "regex") {
          message = `Invalid ${issue.validation}`;
        } else {
          message = "Invalid";
        }
        break;
      case ZodIssueCode.too_small:
        if (issue.type === "array")
          message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
        else if (issue.type === "string")
          message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
        else if (issue.type === "number")
          message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
        else if (issue.type === "date")
          message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
        else
          message = "Invalid input";
        break;
      case ZodIssueCode.too_big:
        if (issue.type === "array")
          message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
        else if (issue.type === "string")
          message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
        else if (issue.type === "number")
          message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
        else if (issue.type === "bigint")
          message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
        else if (issue.type === "date")
          message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
        else
          message = "Invalid input";
        break;
      case ZodIssueCode.custom:
        message = `Invalid input`;
        break;
      case ZodIssueCode.invalid_intersection_types:
        message = `Intersection results could not be merged`;
        break;
      case ZodIssueCode.not_multiple_of:
        message = `Number must be a multiple of ${issue.multipleOf}`;
        break;
      case ZodIssueCode.not_finite:
        message = "Number must be finite";
        break;
      default:
        message = _ctx.defaultError;
        util$1.assertNever(issue);
    }
    return { message };
  };
  let overrideErrorMap = errorMap;
  function setErrorMap(map2) {
    overrideErrorMap = map2;
  }
  function getErrorMap() {
    return overrideErrorMap;
  }
  const makeIssue = (params) => {
    const { data: data2, path: path2, errorMaps, issueData } = params;
    const fullPath = [...path2, ...issueData.path || []];
    const fullIssue = {
      ...issueData,
      path: fullPath
    };
    let errorMessage = "";
    const maps = errorMaps.filter((m2) => !!m2).slice().reverse();
    for (const map2 of maps) {
      errorMessage = map2(fullIssue, { data: data2, defaultError: errorMessage }).message;
    }
    return {
      ...issueData,
      path: fullPath,
      message: issueData.message || errorMessage
    };
  };
  const EMPTY_PATH = [];
  function addIssueToContext(ctx, issueData) {
    const issue = makeIssue({
      issueData,
      data: ctx.data,
      path: ctx.path,
      errorMaps: [
        ctx.common.contextualErrorMap,
        ctx.schemaErrorMap,
        getErrorMap(),
        errorMap
        // then global default map
      ].filter((x) => !!x)
    });
    ctx.common.issues.push(issue);
  }
  class ParseStatus {
    constructor() {
      this.value = "valid";
    }
    dirty() {
      if (this.value === "valid")
        this.value = "dirty";
    }
    abort() {
      if (this.value !== "aborted")
        this.value = "aborted";
    }
    static mergeArray(status, results) {
      const arrayValue = [];
      for (const s of results) {
        if (s.status === "aborted")
          return INVALID;
        if (s.status === "dirty")
          status.dirty();
        arrayValue.push(s.value);
      }
      return { status: status.value, value: arrayValue };
    }
    static async mergeObjectAsync(status, pairs) {
      const syncPairs = [];
      for (const pair of pairs) {
        syncPairs.push({
          key: await pair.key,
          value: await pair.value
        });
      }
      return ParseStatus.mergeObjectSync(status, syncPairs);
    }
    static mergeObjectSync(status, pairs) {
      const finalObject = {};
      for (const pair of pairs) {
        const { key, value } = pair;
        if (key.status === "aborted")
          return INVALID;
        if (value.status === "aborted")
          return INVALID;
        if (key.status === "dirty")
          status.dirty();
        if (value.status === "dirty")
          status.dirty();
        if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
          finalObject[key.value] = value.value;
        }
      }
      return { status: status.value, value: finalObject };
    }
  }
  const INVALID = Object.freeze({
    status: "aborted"
  });
  const DIRTY = (value) => ({ status: "dirty", value });
  const OK = (value) => ({ status: "valid", value });
  const isAborted = (x) => x.status === "aborted";
  const isDirty = (x) => x.status === "dirty";
  const isValid = (x) => x.status === "valid";
  const isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;
  var errorUtil;
  (function(errorUtil2) {
    errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
    errorUtil2.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
  })(errorUtil || (errorUtil = {}));
  class ParseInputLazyPath {
    constructor(parent, value, path2, key) {
      this._cachedPath = [];
      this.parent = parent;
      this.data = value;
      this._path = path2;
      this._key = key;
    }
    get path() {
      if (!this._cachedPath.length) {
        if (this._key instanceof Array) {
          this._cachedPath.push(...this._path, ...this._key);
        } else {
          this._cachedPath.push(...this._path, this._key);
        }
      }
      return this._cachedPath;
    }
  }
  const handleResult = (ctx, result) => {
    if (isValid(result)) {
      return { success: true, data: result.value };
    } else {
      if (!ctx.common.issues.length) {
        throw new Error("Validation failed but no issues detected.");
      }
      return {
        success: false,
        get error() {
          if (this._error)
            return this._error;
          const error = new ZodError(ctx.common.issues);
          this._error = error;
          return this._error;
        }
      };
    }
  };
  function processCreateParams(params) {
    if (!params)
      return {};
    const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
    if (errorMap2 && (invalid_type_error || required_error)) {
      throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
    }
    if (errorMap2)
      return { errorMap: errorMap2, description };
    const customMap = (iss, ctx) => {
      if (iss.code !== "invalid_type")
        return { message: ctx.defaultError };
      if (typeof ctx.data === "undefined") {
        return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };
      }
      return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };
    };
    return { errorMap: customMap, description };
  }
  class ZodType {
    constructor(def) {
      this.spa = this.safeParseAsync;
      this._def = def;
      this.parse = this.parse.bind(this);
      this.safeParse = this.safeParse.bind(this);
      this.parseAsync = this.parseAsync.bind(this);
      this.safeParseAsync = this.safeParseAsync.bind(this);
      this.spa = this.spa.bind(this);
      this.refine = this.refine.bind(this);
      this.refinement = this.refinement.bind(this);
      this.superRefine = this.superRefine.bind(this);
      this.optional = this.optional.bind(this);
      this.nullable = this.nullable.bind(this);
      this.nullish = this.nullish.bind(this);
      this.array = this.array.bind(this);
      this.promise = this.promise.bind(this);
      this.or = this.or.bind(this);
      this.and = this.and.bind(this);
      this.transform = this.transform.bind(this);
      this.brand = this.brand.bind(this);
      this.default = this.default.bind(this);
      this.catch = this.catch.bind(this);
      this.describe = this.describe.bind(this);
      this.pipe = this.pipe.bind(this);
      this.readonly = this.readonly.bind(this);
      this.isNullable = this.isNullable.bind(this);
      this.isOptional = this.isOptional.bind(this);
    }
    get description() {
      return this._def.description;
    }
    _getType(input) {
      return getParsedType(input.data);
    }
    _getOrReturnCtx(input, ctx) {
      return ctx || {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      };
    }
    _processInputParams(input) {
      return {
        status: new ParseStatus(),
        ctx: {
          common: input.parent.common,
          data: input.data,
          parsedType: getParsedType(input.data),
          schemaErrorMap: this._def.errorMap,
          path: input.path,
          parent: input.parent
        }
      };
    }
    _parseSync(input) {
      const result = this._parse(input);
      if (isAsync(result)) {
        throw new Error("Synchronous parse encountered promise.");
      }
      return result;
    }
    _parseAsync(input) {
      const result = this._parse(input);
      return Promise.resolve(result);
    }
    parse(data2, params) {
      const result = this.safeParse(data2, params);
      if (result.success)
        return result.data;
      throw result.error;
    }
    safeParse(data2, params) {
      var _a;
      const ctx = {
        common: {
          issues: [],
          async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
          contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
        },
        path: (params === null || params === void 0 ? void 0 : params.path) || [],
        schemaErrorMap: this._def.errorMap,
        parent: null,
        data: data2,
        parsedType: getParsedType(data2)
      };
      const result = this._parseSync({ data: data2, path: ctx.path, parent: ctx });
      return handleResult(ctx, result);
    }
    async parseAsync(data2, params) {
      const result = await this.safeParseAsync(data2, params);
      if (result.success)
        return result.data;
      throw result.error;
    }
    async safeParseAsync(data2, params) {
      const ctx = {
        common: {
          issues: [],
          contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
          async: true
        },
        path: (params === null || params === void 0 ? void 0 : params.path) || [],
        schemaErrorMap: this._def.errorMap,
        parent: null,
        data: data2,
        parsedType: getParsedType(data2)
      };
      const maybeAsyncResult = this._parse({ data: data2, path: ctx.path, parent: ctx });
      const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
      return handleResult(ctx, result);
    }
    refine(check, message) {
      const getIssueProperties = (val) => {
        if (typeof message === "string" || typeof message === "undefined") {
          return { message };
        } else if (typeof message === "function") {
          return message(val);
        } else {
          return message;
        }
      };
      return this._refinement((val, ctx) => {
        const result = check(val);
        const setError = () => ctx.addIssue({
          code: ZodIssueCode.custom,
          ...getIssueProperties(val)
        });
        if (typeof Promise !== "undefined" && result instanceof Promise) {
          return result.then((data2) => {
            if (!data2) {
              setError();
              return false;
            } else {
              return true;
            }
          });
        }
        if (!result) {
          setError();
          return false;
        } else {
          return true;
        }
      });
    }
    refinement(check, refinementData) {
      return this._refinement((val, ctx) => {
        if (!check(val)) {
          ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
          return false;
        } else {
          return true;
        }
      });
    }
    _refinement(refinement) {
      return new ZodEffects({
        schema: this,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect: { type: "refinement", refinement }
      });
    }
    superRefine(refinement) {
      return this._refinement(refinement);
    }
    optional() {
      return ZodOptional.create(this, this._def);
    }
    nullable() {
      return ZodNullable.create(this, this._def);
    }
    nullish() {
      return this.nullable().optional();
    }
    array() {
      return ZodArray.create(this, this._def);
    }
    promise() {
      return ZodPromise.create(this, this._def);
    }
    or(option) {
      return ZodUnion.create([this, option], this._def);
    }
    and(incoming) {
      return ZodIntersection.create(this, incoming, this._def);
    }
    transform(transform) {
      return new ZodEffects({
        ...processCreateParams(this._def),
        schema: this,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect: { type: "transform", transform }
      });
    }
    default(def) {
      const defaultValueFunc = typeof def === "function" ? def : () => def;
      return new ZodDefault({
        ...processCreateParams(this._def),
        innerType: this,
        defaultValue: defaultValueFunc,
        typeName: ZodFirstPartyTypeKind.ZodDefault
      });
    }
    brand() {
      return new ZodBranded({
        typeName: ZodFirstPartyTypeKind.ZodBranded,
        type: this,
        ...processCreateParams(this._def)
      });
    }
    catch(def) {
      const catchValueFunc = typeof def === "function" ? def : () => def;
      return new ZodCatch({
        ...processCreateParams(this._def),
        innerType: this,
        catchValue: catchValueFunc,
        typeName: ZodFirstPartyTypeKind.ZodCatch
      });
    }
    describe(description) {
      const This = this.constructor;
      return new This({
        ...this._def,
        description
      });
    }
    pipe(target) {
      return ZodPipeline.create(this, target);
    }
    readonly() {
      return ZodReadonly.create(this);
    }
    isOptional() {
      return this.safeParse(void 0).success;
    }
    isNullable() {
      return this.safeParse(null).success;
    }
  }
  const cuidRegex = /^c[^\s-]{8,}$/i;
  const cuid2Regex = /^[a-z][a-z0-9]*$/;
  const ulidRegex = /[0-9A-HJKMNP-TV-Z]{26}/;
  const uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
  const emailRegex = /^([A-Z0-9_+-]+\.?)*[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
  const emojiRegex = /^(\p{Extended_Pictographic}|\p{Emoji_Component})+$/u;
  const ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;
  const ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
  const datetimeRegex = (args) => {
    if (args.precision) {
      if (args.offset) {
        return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
      } else {
        return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}Z$`);
      }
    } else if (args.precision === 0) {
      if (args.offset) {
        return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
      } else {
        return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$`);
      }
    } else {
      if (args.offset) {
        return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
      } else {
        return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$`);
      }
    }
  };
  function isValidIP(ip, version2) {
    if ((version2 === "v4" || !version2) && ipv4Regex.test(ip)) {
      return true;
    }
    if ((version2 === "v6" || !version2) && ipv6Regex.test(ip)) {
      return true;
    }
    return false;
  }
  class ZodString extends ZodType {
    constructor() {
      super(...arguments);
      this._regex = (regex, validation, message) => this.refinement((data2) => regex.test(data2), {
        validation,
        code: ZodIssueCode.invalid_string,
        ...errorUtil.errToObj(message)
      });
      this.nonempty = (message) => this.min(1, errorUtil.errToObj(message));
      this.trim = () => new ZodString({
        ...this._def,
        checks: [...this._def.checks, { kind: "trim" }]
      });
      this.toLowerCase = () => new ZodString({
        ...this._def,
        checks: [...this._def.checks, { kind: "toLowerCase" }]
      });
      this.toUpperCase = () => new ZodString({
        ...this._def,
        checks: [...this._def.checks, { kind: "toUpperCase" }]
      });
    }
    _parse(input) {
      if (this._def.coerce) {
        input.data = String(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.string) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(
          ctx2,
          {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.string,
            received: ctx2.parsedType
          }
          //
        );
        return INVALID;
      }
      const status = new ParseStatus();
      let ctx = void 0;
      for (const check of this._def.checks) {
        if (check.kind === "min") {
          if (input.data.length < check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "string",
              inclusive: true,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          if (input.data.length > check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "string",
              inclusive: true,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "length") {
          const tooBig = input.data.length > check.value;
          const tooSmall = input.data.length < check.value;
          if (tooBig || tooSmall) {
            ctx = this._getOrReturnCtx(input, ctx);
            if (tooBig) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: check.value,
                type: "string",
                inclusive: true,
                exact: true,
                message: check.message
              });
            } else if (tooSmall) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: check.value,
                type: "string",
                inclusive: true,
                exact: true,
                message: check.message
              });
            }
            status.dirty();
          }
        } else if (check.kind === "email") {
          if (!emailRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "email",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "emoji") {
          if (!emojiRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "emoji",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "uuid") {
          if (!uuidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "uuid",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "cuid") {
          if (!cuidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "cuid",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "cuid2") {
          if (!cuid2Regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "cuid2",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "ulid") {
          if (!ulidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "ulid",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "url") {
          try {
            new URL(input.data);
          } catch (_a) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "url",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "regex") {
          check.regex.lastIndex = 0;
          const testResult = check.regex.test(input.data);
          if (!testResult) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "regex",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "trim") {
          input.data = input.data.trim();
        } else if (check.kind === "includes") {
          if (!input.data.includes(check.value, check.position)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: { includes: check.value, position: check.position },
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "toLowerCase") {
          input.data = input.data.toLowerCase();
        } else if (check.kind === "toUpperCase") {
          input.data = input.data.toUpperCase();
        } else if (check.kind === "startsWith") {
          if (!input.data.startsWith(check.value)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: { startsWith: check.value },
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "endsWith") {
          if (!input.data.endsWith(check.value)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: { endsWith: check.value },
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "datetime") {
          const regex = datetimeRegex(check);
          if (!regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: "datetime",
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "ip") {
          if (!isValidIP(input.data, check.version)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "ip",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else {
          util$1.assertNever(check);
        }
      }
      return { status: status.value, value: input.data };
    }
    _addCheck(check) {
      return new ZodString({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    email(message) {
      return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
    }
    url(message) {
      return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
    }
    emoji(message) {
      return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
    }
    uuid(message) {
      return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
    }
    cuid(message) {
      return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
    }
    cuid2(message) {
      return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
    }
    ulid(message) {
      return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
    }
    ip(options) {
      return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
    }
    datetime(options) {
      var _a;
      if (typeof options === "string") {
        return this._addCheck({
          kind: "datetime",
          precision: null,
          offset: false,
          message: options
        });
      }
      return this._addCheck({
        kind: "datetime",
        precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
        offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
        ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
      });
    }
    regex(regex, message) {
      return this._addCheck({
        kind: "regex",
        regex,
        ...errorUtil.errToObj(message)
      });
    }
    includes(value, options) {
      return this._addCheck({
        kind: "includes",
        value,
        position: options === null || options === void 0 ? void 0 : options.position,
        ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
      });
    }
    startsWith(value, message) {
      return this._addCheck({
        kind: "startsWith",
        value,
        ...errorUtil.errToObj(message)
      });
    }
    endsWith(value, message) {
      return this._addCheck({
        kind: "endsWith",
        value,
        ...errorUtil.errToObj(message)
      });
    }
    min(minLength, message) {
      return this._addCheck({
        kind: "min",
        value: minLength,
        ...errorUtil.errToObj(message)
      });
    }
    max(maxLength, message) {
      return this._addCheck({
        kind: "max",
        value: maxLength,
        ...errorUtil.errToObj(message)
      });
    }
    length(len, message) {
      return this._addCheck({
        kind: "length",
        value: len,
        ...errorUtil.errToObj(message)
      });
    }
    get isDatetime() {
      return !!this._def.checks.find((ch) => ch.kind === "datetime");
    }
    get isEmail() {
      return !!this._def.checks.find((ch) => ch.kind === "email");
    }
    get isURL() {
      return !!this._def.checks.find((ch) => ch.kind === "url");
    }
    get isEmoji() {
      return !!this._def.checks.find((ch) => ch.kind === "emoji");
    }
    get isUUID() {
      return !!this._def.checks.find((ch) => ch.kind === "uuid");
    }
    get isCUID() {
      return !!this._def.checks.find((ch) => ch.kind === "cuid");
    }
    get isCUID2() {
      return !!this._def.checks.find((ch) => ch.kind === "cuid2");
    }
    get isULID() {
      return !!this._def.checks.find((ch) => ch.kind === "ulid");
    }
    get isIP() {
      return !!this._def.checks.find((ch) => ch.kind === "ip");
    }
    get minLength() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        }
      }
      return min;
    }
    get maxLength() {
      let max2 = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max2 === null || ch.value < max2)
            max2 = ch.value;
        }
      }
      return max2;
    }
  }
  ZodString.create = (params) => {
    var _a;
    return new ZodString({
      checks: [],
      typeName: ZodFirstPartyTypeKind.ZodString,
      coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
      ...processCreateParams(params)
    });
  };
  function floatSafeRemainder(val, step) {
    const valDecCount = (val.toString().split(".")[1] || "").length;
    const stepDecCount = (step.toString().split(".")[1] || "").length;
    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
    const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
    const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
    return valInt % stepInt / Math.pow(10, decCount);
  }
  class ZodNumber extends ZodType {
    constructor() {
      super(...arguments);
      this.min = this.gte;
      this.max = this.lte;
      this.step = this.multipleOf;
    }
    _parse(input) {
      if (this._def.coerce) {
        input.data = Number(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.number) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.number,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      let ctx = void 0;
      const status = new ParseStatus();
      for (const check of this._def.checks) {
        if (check.kind === "int") {
          if (!util$1.isInteger(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: "integer",
              received: "float",
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "min") {
          const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
          if (tooSmall) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "number",
              inclusive: check.inclusive,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
          if (tooBig) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "number",
              inclusive: check.inclusive,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "multipleOf") {
          if (floatSafeRemainder(input.data, check.value) !== 0) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.not_multiple_of,
              multipleOf: check.value,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "finite") {
          if (!Number.isFinite(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.not_finite,
              message: check.message
            });
            status.dirty();
          }
        } else {
          util$1.assertNever(check);
        }
      }
      return { status: status.value, value: input.data };
    }
    gte(value, message) {
      return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
      return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
      return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
      return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
      return new ZodNumber({
        ...this._def,
        checks: [
          ...this._def.checks,
          {
            kind,
            value,
            inclusive,
            message: errorUtil.toString(message)
          }
        ]
      });
    }
    _addCheck(check) {
      return new ZodNumber({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    int(message) {
      return this._addCheck({
        kind: "int",
        message: errorUtil.toString(message)
      });
    }
    positive(message) {
      return this._addCheck({
        kind: "min",
        value: 0,
        inclusive: false,
        message: errorUtil.toString(message)
      });
    }
    negative(message) {
      return this._addCheck({
        kind: "max",
        value: 0,
        inclusive: false,
        message: errorUtil.toString(message)
      });
    }
    nonpositive(message) {
      return this._addCheck({
        kind: "max",
        value: 0,
        inclusive: true,
        message: errorUtil.toString(message)
      });
    }
    nonnegative(message) {
      return this._addCheck({
        kind: "min",
        value: 0,
        inclusive: true,
        message: errorUtil.toString(message)
      });
    }
    multipleOf(value, message) {
      return this._addCheck({
        kind: "multipleOf",
        value,
        message: errorUtil.toString(message)
      });
    }
    finite(message) {
      return this._addCheck({
        kind: "finite",
        message: errorUtil.toString(message)
      });
    }
    safe(message) {
      return this._addCheck({
        kind: "min",
        inclusive: true,
        value: Number.MIN_SAFE_INTEGER,
        message: errorUtil.toString(message)
      })._addCheck({
        kind: "max",
        inclusive: true,
        value: Number.MAX_SAFE_INTEGER,
        message: errorUtil.toString(message)
      });
    }
    get minValue() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        }
      }
      return min;
    }
    get maxValue() {
      let max2 = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max2 === null || ch.value < max2)
            max2 = ch.value;
        }
      }
      return max2;
    }
    get isInt() {
      return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util$1.isInteger(ch.value));
    }
    get isFinite() {
      let max2 = null, min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
          return true;
        } else if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        } else if (ch.kind === "max") {
          if (max2 === null || ch.value < max2)
            max2 = ch.value;
        }
      }
      return Number.isFinite(min) && Number.isFinite(max2);
    }
  }
  ZodNumber.create = (params) => {
    return new ZodNumber({
      checks: [],
      typeName: ZodFirstPartyTypeKind.ZodNumber,
      coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
      ...processCreateParams(params)
    });
  };
  class ZodBigInt extends ZodType {
    constructor() {
      super(...arguments);
      this.min = this.gte;
      this.max = this.lte;
    }
    _parse(input) {
      if (this._def.coerce) {
        input.data = BigInt(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.bigint) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.bigint,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      let ctx = void 0;
      const status = new ParseStatus();
      for (const check of this._def.checks) {
        if (check.kind === "min") {
          const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
          if (tooSmall) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              type: "bigint",
              minimum: check.value,
              inclusive: check.inclusive,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
          if (tooBig) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              type: "bigint",
              maximum: check.value,
              inclusive: check.inclusive,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "multipleOf") {
          if (input.data % check.value !== BigInt(0)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.not_multiple_of,
              multipleOf: check.value,
              message: check.message
            });
            status.dirty();
          }
        } else {
          util$1.assertNever(check);
        }
      }
      return { status: status.value, value: input.data };
    }
    gte(value, message) {
      return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
      return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
      return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
      return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
      return new ZodBigInt({
        ...this._def,
        checks: [
          ...this._def.checks,
          {
            kind,
            value,
            inclusive,
            message: errorUtil.toString(message)
          }
        ]
      });
    }
    _addCheck(check) {
      return new ZodBigInt({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    positive(message) {
      return this._addCheck({
        kind: "min",
        value: BigInt(0),
        inclusive: false,
        message: errorUtil.toString(message)
      });
    }
    negative(message) {
      return this._addCheck({
        kind: "max",
        value: BigInt(0),
        inclusive: false,
        message: errorUtil.toString(message)
      });
    }
    nonpositive(message) {
      return this._addCheck({
        kind: "max",
        value: BigInt(0),
        inclusive: true,
        message: errorUtil.toString(message)
      });
    }
    nonnegative(message) {
      return this._addCheck({
        kind: "min",
        value: BigInt(0),
        inclusive: true,
        message: errorUtil.toString(message)
      });
    }
    multipleOf(value, message) {
      return this._addCheck({
        kind: "multipleOf",
        value,
        message: errorUtil.toString(message)
      });
    }
    get minValue() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        }
      }
      return min;
    }
    get maxValue() {
      let max2 = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max2 === null || ch.value < max2)
            max2 = ch.value;
        }
      }
      return max2;
    }
  }
  ZodBigInt.create = (params) => {
    var _a;
    return new ZodBigInt({
      checks: [],
      typeName: ZodFirstPartyTypeKind.ZodBigInt,
      coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
      ...processCreateParams(params)
    });
  };
  class ZodBoolean extends ZodType {
    _parse(input) {
      if (this._def.coerce) {
        input.data = Boolean(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.boolean) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.boolean,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  }
  ZodBoolean.create = (params) => {
    return new ZodBoolean({
      typeName: ZodFirstPartyTypeKind.ZodBoolean,
      coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
      ...processCreateParams(params)
    });
  };
  class ZodDate extends ZodType {
    _parse(input) {
      if (this._def.coerce) {
        input.data = new Date(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.date) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.date,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      if (isNaN(input.data.getTime())) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_date
        });
        return INVALID;
      }
      const status = new ParseStatus();
      let ctx = void 0;
      for (const check of this._def.checks) {
        if (check.kind === "min") {
          if (input.data.getTime() < check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              message: check.message,
              inclusive: true,
              exact: false,
              minimum: check.value,
              type: "date"
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          if (input.data.getTime() > check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              message: check.message,
              inclusive: true,
              exact: false,
              maximum: check.value,
              type: "date"
            });
            status.dirty();
          }
        } else {
          util$1.assertNever(check);
        }
      }
      return {
        status: status.value,
        value: new Date(input.data.getTime())
      };
    }
    _addCheck(check) {
      return new ZodDate({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    min(minDate, message) {
      return this._addCheck({
        kind: "min",
        value: minDate.getTime(),
        message: errorUtil.toString(message)
      });
    }
    max(maxDate, message) {
      return this._addCheck({
        kind: "max",
        value: maxDate.getTime(),
        message: errorUtil.toString(message)
      });
    }
    get minDate() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        }
      }
      return min != null ? new Date(min) : null;
    }
    get maxDate() {
      let max2 = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max2 === null || ch.value < max2)
            max2 = ch.value;
        }
      }
      return max2 != null ? new Date(max2) : null;
    }
  }
  ZodDate.create = (params) => {
    return new ZodDate({
      checks: [],
      coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
      typeName: ZodFirstPartyTypeKind.ZodDate,
      ...processCreateParams(params)
    });
  };
  class ZodSymbol extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.symbol) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.symbol,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  }
  ZodSymbol.create = (params) => {
    return new ZodSymbol({
      typeName: ZodFirstPartyTypeKind.ZodSymbol,
      ...processCreateParams(params)
    });
  };
  class ZodUndefined extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.undefined) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.undefined,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  }
  ZodUndefined.create = (params) => {
    return new ZodUndefined({
      typeName: ZodFirstPartyTypeKind.ZodUndefined,
      ...processCreateParams(params)
    });
  };
  class ZodNull extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.null) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.null,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  }
  ZodNull.create = (params) => {
    return new ZodNull({
      typeName: ZodFirstPartyTypeKind.ZodNull,
      ...processCreateParams(params)
    });
  };
  class ZodAny extends ZodType {
    constructor() {
      super(...arguments);
      this._any = true;
    }
    _parse(input) {
      return OK(input.data);
    }
  }
  ZodAny.create = (params) => {
    return new ZodAny({
      typeName: ZodFirstPartyTypeKind.ZodAny,
      ...processCreateParams(params)
    });
  };
  class ZodUnknown extends ZodType {
    constructor() {
      super(...arguments);
      this._unknown = true;
    }
    _parse(input) {
      return OK(input.data);
    }
  }
  ZodUnknown.create = (params) => {
    return new ZodUnknown({
      typeName: ZodFirstPartyTypeKind.ZodUnknown,
      ...processCreateParams(params)
    });
  };
  class ZodNever extends ZodType {
    _parse(input) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.never,
        received: ctx.parsedType
      });
      return INVALID;
    }
  }
  ZodNever.create = (params) => {
    return new ZodNever({
      typeName: ZodFirstPartyTypeKind.ZodNever,
      ...processCreateParams(params)
    });
  };
  class ZodVoid extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.undefined) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.void,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  }
  ZodVoid.create = (params) => {
    return new ZodVoid({
      typeName: ZodFirstPartyTypeKind.ZodVoid,
      ...processCreateParams(params)
    });
  };
  class ZodArray extends ZodType {
    _parse(input) {
      const { ctx, status } = this._processInputParams(input);
      const def = this._def;
      if (ctx.parsedType !== ZodParsedType.array) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.array,
          received: ctx.parsedType
        });
        return INVALID;
      }
      if (def.exactLength !== null) {
        const tooBig = ctx.data.length > def.exactLength.value;
        const tooSmall = ctx.data.length < def.exactLength.value;
        if (tooBig || tooSmall) {
          addIssueToContext(ctx, {
            code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
            minimum: tooSmall ? def.exactLength.value : void 0,
            maximum: tooBig ? def.exactLength.value : void 0,
            type: "array",
            inclusive: true,
            exact: true,
            message: def.exactLength.message
          });
          status.dirty();
        }
      }
      if (def.minLength !== null) {
        if (ctx.data.length < def.minLength.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: def.minLength.value,
            type: "array",
            inclusive: true,
            exact: false,
            message: def.minLength.message
          });
          status.dirty();
        }
      }
      if (def.maxLength !== null) {
        if (ctx.data.length > def.maxLength.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: def.maxLength.value,
            type: "array",
            inclusive: true,
            exact: false,
            message: def.maxLength.message
          });
          status.dirty();
        }
      }
      if (ctx.common.async) {
        return Promise.all([...ctx.data].map((item, i2) => {
          return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i2));
        })).then((result2) => {
          return ParseStatus.mergeArray(status, result2);
        });
      }
      const result = [...ctx.data].map((item, i2) => {
        return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i2));
      });
      return ParseStatus.mergeArray(status, result);
    }
    get element() {
      return this._def.type;
    }
    min(minLength, message) {
      return new ZodArray({
        ...this._def,
        minLength: { value: minLength, message: errorUtil.toString(message) }
      });
    }
    max(maxLength, message) {
      return new ZodArray({
        ...this._def,
        maxLength: { value: maxLength, message: errorUtil.toString(message) }
      });
    }
    length(len, message) {
      return new ZodArray({
        ...this._def,
        exactLength: { value: len, message: errorUtil.toString(message) }
      });
    }
    nonempty(message) {
      return this.min(1, message);
    }
  }
  ZodArray.create = (schema, params) => {
    return new ZodArray({
      type: schema,
      minLength: null,
      maxLength: null,
      exactLength: null,
      typeName: ZodFirstPartyTypeKind.ZodArray,
      ...processCreateParams(params)
    });
  };
  function deepPartialify(schema) {
    if (schema instanceof ZodObject) {
      const newShape = {};
      for (const key in schema.shape) {
        const fieldSchema = schema.shape[key];
        newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
      }
      return new ZodObject({
        ...schema._def,
        shape: () => newShape
      });
    } else if (schema instanceof ZodArray) {
      return new ZodArray({
        ...schema._def,
        type: deepPartialify(schema.element)
      });
    } else if (schema instanceof ZodOptional) {
      return ZodOptional.create(deepPartialify(schema.unwrap()));
    } else if (schema instanceof ZodNullable) {
      return ZodNullable.create(deepPartialify(schema.unwrap()));
    } else if (schema instanceof ZodTuple) {
      return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
    } else {
      return schema;
    }
  }
  class ZodObject extends ZodType {
    constructor() {
      super(...arguments);
      this._cached = null;
      this.nonstrict = this.passthrough;
      this.augment = this.extend;
    }
    _getCached() {
      if (this._cached !== null)
        return this._cached;
      const shape2 = this._def.shape();
      const keys2 = util$1.objectKeys(shape2);
      return this._cached = { shape: shape2, keys: keys2 };
    }
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.object) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.object,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      const { status, ctx } = this._processInputParams(input);
      const { shape: shape2, keys: shapeKeys } = this._getCached();
      const extraKeys = [];
      if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
        for (const key in ctx.data) {
          if (!shapeKeys.includes(key)) {
            extraKeys.push(key);
          }
        }
      }
      const pairs = [];
      for (const key of shapeKeys) {
        const keyValidator = shape2[key];
        const value = ctx.data[key];
        pairs.push({
          key: { status: "valid", value: key },
          value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
          alwaysSet: key in ctx.data
        });
      }
      if (this._def.catchall instanceof ZodNever) {
        const unknownKeys = this._def.unknownKeys;
        if (unknownKeys === "passthrough") {
          for (const key of extraKeys) {
            pairs.push({
              key: { status: "valid", value: key },
              value: { status: "valid", value: ctx.data[key] }
            });
          }
        } else if (unknownKeys === "strict") {
          if (extraKeys.length > 0) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.unrecognized_keys,
              keys: extraKeys
            });
            status.dirty();
          }
        } else if (unknownKeys === "strip")
          ;
        else {
          throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
        }
      } else {
        const catchall = this._def.catchall;
        for (const key of extraKeys) {
          const value = ctx.data[key];
          pairs.push({
            key: { status: "valid", value: key },
            value: catchall._parse(
              new ParseInputLazyPath(ctx, value, ctx.path, key)
              //, ctx.child(key), value, getParsedType(value)
            ),
            alwaysSet: key in ctx.data
          });
        }
      }
      if (ctx.common.async) {
        return Promise.resolve().then(async () => {
          const syncPairs = [];
          for (const pair of pairs) {
            const key = await pair.key;
            syncPairs.push({
              key,
              value: await pair.value,
              alwaysSet: pair.alwaysSet
            });
          }
          return syncPairs;
        }).then((syncPairs) => {
          return ParseStatus.mergeObjectSync(status, syncPairs);
        });
      } else {
        return ParseStatus.mergeObjectSync(status, pairs);
      }
    }
    get shape() {
      return this._def.shape();
    }
    strict(message) {
      return new ZodObject({
        ...this._def,
        unknownKeys: "strict",
        ...message !== void 0 ? {
          errorMap: (issue, ctx) => {
            var _a, _b, _c, _d;
            const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
            if (issue.code === "unrecognized_keys")
              return {
                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
              };
            return {
              message: defaultError
            };
          }
        } : {}
      });
    }
    strip() {
      return new ZodObject({
        ...this._def,
        unknownKeys: "strip"
      });
    }
    passthrough() {
      return new ZodObject({
        ...this._def,
        unknownKeys: "passthrough"
      });
    }
    // const AugmentFactory =
    //   <Def extends ZodObjectDef>(def: Def) =>
    //   <Augmentation extends ZodRawShape>(
    //     augmentation: Augmentation
    //   ): ZodObject<
    //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
    //     Def["unknownKeys"],
    //     Def["catchall"]
    //   > => {
    //     return new ZodObject({
    //       ...def,
    //       shape: () => ({
    //         ...def.shape(),
    //         ...augmentation,
    //       }),
    //     }) as any;
    //   };
    extend(augmentation) {
      return new ZodObject({
        ...this._def,
        shape: () => ({
          ...this._def.shape(),
          ...augmentation
        })
      });
    }
    /**
     * Prior to zod@1.0.12 there was a bug in the
     * inferred type of merged objects. Please
     * upgrade if you are experiencing issues.
     */
    merge(merging) {
      const merged = new ZodObject({
        unknownKeys: merging._def.unknownKeys,
        catchall: merging._def.catchall,
        shape: () => ({
          ...this._def.shape(),
          ...merging._def.shape()
        }),
        typeName: ZodFirstPartyTypeKind.ZodObject
      });
      return merged;
    }
    // merge<
    //   Incoming extends AnyZodObject,
    //   Augmentation extends Incoming["shape"],
    //   NewOutput extends {
    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
    //       ? Augmentation[k]["_output"]
    //       : k extends keyof Output
    //       ? Output[k]
    //       : never;
    //   },
    //   NewInput extends {
    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
    //       ? Augmentation[k]["_input"]
    //       : k extends keyof Input
    //       ? Input[k]
    //       : never;
    //   }
    // >(
    //   merging: Incoming
    // ): ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"],
    //   NewOutput,
    //   NewInput
    // > {
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    setKey(key, schema) {
      return this.augment({ [key]: schema });
    }
    // merge<Incoming extends AnyZodObject>(
    //   merging: Incoming
    // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
    // ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"]
    // > {
    //   // const mergedShape = objectUtil.mergeShapes(
    //   //   this._def.shape(),
    //   //   merging._def.shape()
    //   // );
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    catchall(index2) {
      return new ZodObject({
        ...this._def,
        catchall: index2
      });
    }
    pick(mask) {
      const shape2 = {};
      util$1.objectKeys(mask).forEach((key) => {
        if (mask[key] && this.shape[key]) {
          shape2[key] = this.shape[key];
        }
      });
      return new ZodObject({
        ...this._def,
        shape: () => shape2
      });
    }
    omit(mask) {
      const shape2 = {};
      util$1.objectKeys(this.shape).forEach((key) => {
        if (!mask[key]) {
          shape2[key] = this.shape[key];
        }
      });
      return new ZodObject({
        ...this._def,
        shape: () => shape2
      });
    }
    /**
     * @deprecated
     */
    deepPartial() {
      return deepPartialify(this);
    }
    partial(mask) {
      const newShape = {};
      util$1.objectKeys(this.shape).forEach((key) => {
        const fieldSchema = this.shape[key];
        if (mask && !mask[key]) {
          newShape[key] = fieldSchema;
        } else {
          newShape[key] = fieldSchema.optional();
        }
      });
      return new ZodObject({
        ...this._def,
        shape: () => newShape
      });
    }
    required(mask) {
      const newShape = {};
      util$1.objectKeys(this.shape).forEach((key) => {
        if (mask && !mask[key]) {
          newShape[key] = this.shape[key];
        } else {
          const fieldSchema = this.shape[key];
          let newField = fieldSchema;
          while (newField instanceof ZodOptional) {
            newField = newField._def.innerType;
          }
          newShape[key] = newField;
        }
      });
      return new ZodObject({
        ...this._def,
        shape: () => newShape
      });
    }
    keyof() {
      return createZodEnum(util$1.objectKeys(this.shape));
    }
  }
  ZodObject.create = (shape2, params) => {
    return new ZodObject({
      shape: () => shape2,
      unknownKeys: "strip",
      catchall: ZodNever.create(),
      typeName: ZodFirstPartyTypeKind.ZodObject,
      ...processCreateParams(params)
    });
  };
  ZodObject.strictCreate = (shape2, params) => {
    return new ZodObject({
      shape: () => shape2,
      unknownKeys: "strict",
      catchall: ZodNever.create(),
      typeName: ZodFirstPartyTypeKind.ZodObject,
      ...processCreateParams(params)
    });
  };
  ZodObject.lazycreate = (shape2, params) => {
    return new ZodObject({
      shape: shape2,
      unknownKeys: "strip",
      catchall: ZodNever.create(),
      typeName: ZodFirstPartyTypeKind.ZodObject,
      ...processCreateParams(params)
    });
  };
  class ZodUnion extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const options = this._def.options;
      function handleResults(results) {
        for (const result of results) {
          if (result.result.status === "valid") {
            return result.result;
          }
        }
        for (const result of results) {
          if (result.result.status === "dirty") {
            ctx.common.issues.push(...result.ctx.common.issues);
            return result.result;
          }
        }
        const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_union,
          unionErrors
        });
        return INVALID;
      }
      if (ctx.common.async) {
        return Promise.all(options.map(async (option) => {
          const childCtx = {
            ...ctx,
            common: {
              ...ctx.common,
              issues: []
            },
            parent: null
          };
          return {
            result: await option._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: childCtx
            }),
            ctx: childCtx
          };
        })).then(handleResults);
      } else {
        let dirty = void 0;
        const issues = [];
        for (const option of options) {
          const childCtx = {
            ...ctx,
            common: {
              ...ctx.common,
              issues: []
            },
            parent: null
          };
          const result = option._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          });
          if (result.status === "valid") {
            return result;
          } else if (result.status === "dirty" && !dirty) {
            dirty = { result, ctx: childCtx };
          }
          if (childCtx.common.issues.length) {
            issues.push(childCtx.common.issues);
          }
        }
        if (dirty) {
          ctx.common.issues.push(...dirty.ctx.common.issues);
          return dirty.result;
        }
        const unionErrors = issues.map((issues2) => new ZodError(issues2));
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_union,
          unionErrors
        });
        return INVALID;
      }
    }
    get options() {
      return this._def.options;
    }
  }
  ZodUnion.create = (types2, params) => {
    return new ZodUnion({
      options: types2,
      typeName: ZodFirstPartyTypeKind.ZodUnion,
      ...processCreateParams(params)
    });
  };
  const getDiscriminator = (type) => {
    if (type instanceof ZodLazy) {
      return getDiscriminator(type.schema);
    } else if (type instanceof ZodEffects) {
      return getDiscriminator(type.innerType());
    } else if (type instanceof ZodLiteral) {
      return [type.value];
    } else if (type instanceof ZodEnum) {
      return type.options;
    } else if (type instanceof ZodNativeEnum) {
      return Object.keys(type.enum);
    } else if (type instanceof ZodDefault) {
      return getDiscriminator(type._def.innerType);
    } else if (type instanceof ZodUndefined) {
      return [void 0];
    } else if (type instanceof ZodNull) {
      return [null];
    } else {
      return null;
    }
  };
  class ZodDiscriminatedUnion extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.object) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.object,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const discriminator = this.discriminator;
      const discriminatorValue = ctx.data[discriminator];
      const option = this.optionsMap.get(discriminatorValue);
      if (!option) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_union_discriminator,
          options: Array.from(this.optionsMap.keys()),
          path: [discriminator]
        });
        return INVALID;
      }
      if (ctx.common.async) {
        return option._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
      } else {
        return option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
      }
    }
    get discriminator() {
      return this._def.discriminator;
    }
    get options() {
      return this._def.options;
    }
    get optionsMap() {
      return this._def.optionsMap;
    }
    /**
     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
     * have a different value for each object in the union.
     * @param discriminator the name of the discriminator property
     * @param types an array of object schemas
     * @param params
     */
    static create(discriminator, options, params) {
      const optionsMap = /* @__PURE__ */ new Map();
      for (const type of options) {
        const discriminatorValues = getDiscriminator(type.shape[discriminator]);
        if (!discriminatorValues) {
          throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
        }
        for (const value of discriminatorValues) {
          if (optionsMap.has(value)) {
            throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
          }
          optionsMap.set(value, type);
        }
      }
      return new ZodDiscriminatedUnion({
        typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
        discriminator,
        options,
        optionsMap,
        ...processCreateParams(params)
      });
    }
  }
  function mergeValues(a, b) {
    const aType = getParsedType(a);
    const bType = getParsedType(b);
    if (a === b) {
      return { valid: true, data: a };
    } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
      const bKeys = util$1.objectKeys(b);
      const sharedKeys = util$1.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
      const newObj = { ...a, ...b };
      for (const key of sharedKeys) {
        const sharedValue = mergeValues(a[key], b[key]);
        if (!sharedValue.valid) {
          return { valid: false };
        }
        newObj[key] = sharedValue.data;
      }
      return { valid: true, data: newObj };
    } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
      if (a.length !== b.length) {
        return { valid: false };
      }
      const newArray = [];
      for (let index2 = 0; index2 < a.length; index2++) {
        const itemA = a[index2];
        const itemB = b[index2];
        const sharedValue = mergeValues(itemA, itemB);
        if (!sharedValue.valid) {
          return { valid: false };
        }
        newArray.push(sharedValue.data);
      }
      return { valid: true, data: newArray };
    } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {
      return { valid: true, data: a };
    } else {
      return { valid: false };
    }
  }
  class ZodIntersection extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      const handleParsed = (parsedLeft, parsedRight) => {
        if (isAborted(parsedLeft) || isAborted(parsedRight)) {
          return INVALID;
        }
        const merged = mergeValues(parsedLeft.value, parsedRight.value);
        if (!merged.valid) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_intersection_types
          });
          return INVALID;
        }
        if (isDirty(parsedLeft) || isDirty(parsedRight)) {
          status.dirty();
        }
        return { status: status.value, value: merged.data };
      };
      if (ctx.common.async) {
        return Promise.all([
          this._def.left._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }),
          this._def.right._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          })
        ]).then(([left, right]) => handleParsed(left, right));
      } else {
        return handleParsed(this._def.left._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }), this._def.right._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }));
      }
    }
  }
  ZodIntersection.create = (left, right, params) => {
    return new ZodIntersection({
      left,
      right,
      typeName: ZodFirstPartyTypeKind.ZodIntersection,
      ...processCreateParams(params)
    });
  };
  class ZodTuple extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.array) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.array,
          received: ctx.parsedType
        });
        return INVALID;
      }
      if (ctx.data.length < this._def.items.length) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: this._def.items.length,
          inclusive: true,
          exact: false,
          type: "array"
        });
        return INVALID;
      }
      const rest = this._def.rest;
      if (!rest && ctx.data.length > this._def.items.length) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: this._def.items.length,
          inclusive: true,
          exact: false,
          type: "array"
        });
        status.dirty();
      }
      const items = [...ctx.data].map((item, itemIndex) => {
        const schema = this._def.items[itemIndex] || this._def.rest;
        if (!schema)
          return null;
        return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
      }).filter((x) => !!x);
      if (ctx.common.async) {
        return Promise.all(items).then((results) => {
          return ParseStatus.mergeArray(status, results);
        });
      } else {
        return ParseStatus.mergeArray(status, items);
      }
    }
    get items() {
      return this._def.items;
    }
    rest(rest) {
      return new ZodTuple({
        ...this._def,
        rest
      });
    }
  }
  ZodTuple.create = (schemas, params) => {
    if (!Array.isArray(schemas)) {
      throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
    }
    return new ZodTuple({
      items: schemas,
      typeName: ZodFirstPartyTypeKind.ZodTuple,
      rest: null,
      ...processCreateParams(params)
    });
  };
  class ZodRecord extends ZodType {
    get keySchema() {
      return this._def.keyType;
    }
    get valueSchema() {
      return this._def.valueType;
    }
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.object) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.object,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const pairs = [];
      const keyType = this._def.keyType;
      const valueType = this._def.valueType;
      for (const key in ctx.data) {
        pairs.push({
          key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
          value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key))
        });
      }
      if (ctx.common.async) {
        return ParseStatus.mergeObjectAsync(status, pairs);
      } else {
        return ParseStatus.mergeObjectSync(status, pairs);
      }
    }
    get element() {
      return this._def.valueType;
    }
    static create(first2, second, third) {
      if (second instanceof ZodType) {
        return new ZodRecord({
          keyType: first2,
          valueType: second,
          typeName: ZodFirstPartyTypeKind.ZodRecord,
          ...processCreateParams(third)
        });
      }
      return new ZodRecord({
        keyType: ZodString.create(),
        valueType: first2,
        typeName: ZodFirstPartyTypeKind.ZodRecord,
        ...processCreateParams(second)
      });
    }
  }
  class ZodMap extends ZodType {
    get keySchema() {
      return this._def.keyType;
    }
    get valueSchema() {
      return this._def.valueType;
    }
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.map) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.map,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const keyType = this._def.keyType;
      const valueType = this._def.valueType;
      const pairs = [...ctx.data.entries()].map(([key, value], index2) => {
        return {
          key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index2, "key"])),
          value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index2, "value"]))
        };
      });
      if (ctx.common.async) {
        const finalMap = /* @__PURE__ */ new Map();
        return Promise.resolve().then(async () => {
          for (const pair of pairs) {
            const key = await pair.key;
            const value = await pair.value;
            if (key.status === "aborted" || value.status === "aborted") {
              return INVALID;
            }
            if (key.status === "dirty" || value.status === "dirty") {
              status.dirty();
            }
            finalMap.set(key.value, value.value);
          }
          return { status: status.value, value: finalMap };
        });
      } else {
        const finalMap = /* @__PURE__ */ new Map();
        for (const pair of pairs) {
          const key = pair.key;
          const value = pair.value;
          if (key.status === "aborted" || value.status === "aborted") {
            return INVALID;
          }
          if (key.status === "dirty" || value.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      }
    }
  }
  ZodMap.create = (keyType, valueType, params) => {
    return new ZodMap({
      valueType,
      keyType,
      typeName: ZodFirstPartyTypeKind.ZodMap,
      ...processCreateParams(params)
    });
  };
  class ZodSet extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.set) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.set,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const def = this._def;
      if (def.minSize !== null) {
        if (ctx.data.size < def.minSize.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: def.minSize.value,
            type: "set",
            inclusive: true,
            exact: false,
            message: def.minSize.message
          });
          status.dirty();
        }
      }
      if (def.maxSize !== null) {
        if (ctx.data.size > def.maxSize.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: def.maxSize.value,
            type: "set",
            inclusive: true,
            exact: false,
            message: def.maxSize.message
          });
          status.dirty();
        }
      }
      const valueType = this._def.valueType;
      function finalizeSet(elements2) {
        const parsedSet = /* @__PURE__ */ new Set();
        for (const element of elements2) {
          if (element.status === "aborted")
            return INVALID;
          if (element.status === "dirty")
            status.dirty();
          parsedSet.add(element.value);
        }
        return { status: status.value, value: parsedSet };
      }
      const elements = [...ctx.data.values()].map((item, i2) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i2)));
      if (ctx.common.async) {
        return Promise.all(elements).then((elements2) => finalizeSet(elements2));
      } else {
        return finalizeSet(elements);
      }
    }
    min(minSize, message) {
      return new ZodSet({
        ...this._def,
        minSize: { value: minSize, message: errorUtil.toString(message) }
      });
    }
    max(maxSize, message) {
      return new ZodSet({
        ...this._def,
        maxSize: { value: maxSize, message: errorUtil.toString(message) }
      });
    }
    size(size, message) {
      return this.min(size, message).max(size, message);
    }
    nonempty(message) {
      return this.min(1, message);
    }
  }
  ZodSet.create = (valueType, params) => {
    return new ZodSet({
      valueType,
      minSize: null,
      maxSize: null,
      typeName: ZodFirstPartyTypeKind.ZodSet,
      ...processCreateParams(params)
    });
  };
  class ZodFunction extends ZodType {
    constructor() {
      super(...arguments);
      this.validate = this.implement;
    }
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.function) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.function,
          received: ctx.parsedType
        });
        return INVALID;
      }
      function makeArgsIssue(args, error) {
        return makeIssue({
          data: args,
          path: ctx.path,
          errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            getErrorMap(),
            errorMap
          ].filter((x) => !!x),
          issueData: {
            code: ZodIssueCode.invalid_arguments,
            argumentsError: error
          }
        });
      }
      function makeReturnsIssue(returns, error) {
        return makeIssue({
          data: returns,
          path: ctx.path,
          errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            getErrorMap(),
            errorMap
          ].filter((x) => !!x),
          issueData: {
            code: ZodIssueCode.invalid_return_type,
            returnTypeError: error
          }
        });
      }
      const params = { errorMap: ctx.common.contextualErrorMap };
      const fn = ctx.data;
      if (this._def.returns instanceof ZodPromise) {
        const me = this;
        return OK(async function(...args) {
          const error = new ZodError([]);
          const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {
            error.addIssue(makeArgsIssue(args, e));
            throw error;
          });
          const result = await Reflect.apply(fn, this, parsedArgs);
          const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e) => {
            error.addIssue(makeReturnsIssue(result, e));
            throw error;
          });
          return parsedReturns;
        });
      } else {
        const me = this;
        return OK(function(...args) {
          const parsedArgs = me._def.args.safeParse(args, params);
          if (!parsedArgs.success) {
            throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
          }
          const result = Reflect.apply(fn, this, parsedArgs.data);
          const parsedReturns = me._def.returns.safeParse(result, params);
          if (!parsedReturns.success) {
            throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
          }
          return parsedReturns.data;
        });
      }
    }
    parameters() {
      return this._def.args;
    }
    returnType() {
      return this._def.returns;
    }
    args(...items) {
      return new ZodFunction({
        ...this._def,
        args: ZodTuple.create(items).rest(ZodUnknown.create())
      });
    }
    returns(returnType) {
      return new ZodFunction({
        ...this._def,
        returns: returnType
      });
    }
    implement(func) {
      const validatedFunc = this.parse(func);
      return validatedFunc;
    }
    strictImplement(func) {
      const validatedFunc = this.parse(func);
      return validatedFunc;
    }
    static create(args, returns, params) {
      return new ZodFunction({
        args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
        returns: returns || ZodUnknown.create(),
        typeName: ZodFirstPartyTypeKind.ZodFunction,
        ...processCreateParams(params)
      });
    }
  }
  class ZodLazy extends ZodType {
    get schema() {
      return this._def.getter();
    }
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const lazySchema = this._def.getter();
      return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
    }
  }
  ZodLazy.create = (getter, params) => {
    return new ZodLazy({
      getter,
      typeName: ZodFirstPartyTypeKind.ZodLazy,
      ...processCreateParams(params)
    });
  };
  class ZodLiteral extends ZodType {
    _parse(input) {
      if (input.data !== this._def.value) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          received: ctx.data,
          code: ZodIssueCode.invalid_literal,
          expected: this._def.value
        });
        return INVALID;
      }
      return { status: "valid", value: input.data };
    }
    get value() {
      return this._def.value;
    }
  }
  ZodLiteral.create = (value, params) => {
    return new ZodLiteral({
      value,
      typeName: ZodFirstPartyTypeKind.ZodLiteral,
      ...processCreateParams(params)
    });
  };
  function createZodEnum(values2, params) {
    return new ZodEnum({
      values: values2,
      typeName: ZodFirstPartyTypeKind.ZodEnum,
      ...processCreateParams(params)
    });
  }
  class ZodEnum extends ZodType {
    _parse(input) {
      if (typeof input.data !== "string") {
        const ctx = this._getOrReturnCtx(input);
        const expectedValues = this._def.values;
        addIssueToContext(ctx, {
          expected: util$1.joinValues(expectedValues),
          received: ctx.parsedType,
          code: ZodIssueCode.invalid_type
        });
        return INVALID;
      }
      if (this._def.values.indexOf(input.data) === -1) {
        const ctx = this._getOrReturnCtx(input);
        const expectedValues = this._def.values;
        addIssueToContext(ctx, {
          received: ctx.data,
          code: ZodIssueCode.invalid_enum_value,
          options: expectedValues
        });
        return INVALID;
      }
      return OK(input.data);
    }
    get options() {
      return this._def.values;
    }
    get enum() {
      const enumValues = {};
      for (const val of this._def.values) {
        enumValues[val] = val;
      }
      return enumValues;
    }
    get Values() {
      const enumValues = {};
      for (const val of this._def.values) {
        enumValues[val] = val;
      }
      return enumValues;
    }
    get Enum() {
      const enumValues = {};
      for (const val of this._def.values) {
        enumValues[val] = val;
      }
      return enumValues;
    }
    extract(values2) {
      return ZodEnum.create(values2);
    }
    exclude(values2) {
      return ZodEnum.create(this.options.filter((opt) => !values2.includes(opt)));
    }
  }
  ZodEnum.create = createZodEnum;
  class ZodNativeEnum extends ZodType {
    _parse(input) {
      const nativeEnumValues = util$1.getValidEnumValues(this._def.values);
      const ctx = this._getOrReturnCtx(input);
      if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
        const expectedValues = util$1.objectValues(nativeEnumValues);
        addIssueToContext(ctx, {
          expected: util$1.joinValues(expectedValues),
          received: ctx.parsedType,
          code: ZodIssueCode.invalid_type
        });
        return INVALID;
      }
      if (nativeEnumValues.indexOf(input.data) === -1) {
        const expectedValues = util$1.objectValues(nativeEnumValues);
        addIssueToContext(ctx, {
          received: ctx.data,
          code: ZodIssueCode.invalid_enum_value,
          options: expectedValues
        });
        return INVALID;
      }
      return OK(input.data);
    }
    get enum() {
      return this._def.values;
    }
  }
  ZodNativeEnum.create = (values2, params) => {
    return new ZodNativeEnum({
      values: values2,
      typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
      ...processCreateParams(params)
    });
  };
  class ZodPromise extends ZodType {
    unwrap() {
      return this._def.type;
    }
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.promise,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
      return OK(promisified.then((data2) => {
        return this._def.type.parseAsync(data2, {
          path: ctx.path,
          errorMap: ctx.common.contextualErrorMap
        });
      }));
    }
  }
  ZodPromise.create = (schema, params) => {
    return new ZodPromise({
      type: schema,
      typeName: ZodFirstPartyTypeKind.ZodPromise,
      ...processCreateParams(params)
    });
  };
  class ZodEffects extends ZodType {
    innerType() {
      return this._def.schema;
    }
    sourceType() {
      return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
    }
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      const effect = this._def.effect || null;
      const checkCtx = {
        addIssue: (arg) => {
          addIssueToContext(ctx, arg);
          if (arg.fatal) {
            status.abort();
          } else {
            status.dirty();
          }
        },
        get path() {
          return ctx.path;
        }
      };
      checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
      if (effect.type === "preprocess") {
        const processed = effect.transform(ctx.data, checkCtx);
        if (ctx.common.issues.length) {
          return {
            status: "dirty",
            value: ctx.data
          };
        }
        if (ctx.common.async) {
          return Promise.resolve(processed).then((processed2) => {
            return this._def.schema._parseAsync({
              data: processed2,
              path: ctx.path,
              parent: ctx
            });
          });
        } else {
          return this._def.schema._parseSync({
            data: processed,
            path: ctx.path,
            parent: ctx
          });
        }
      }
      if (effect.type === "refinement") {
        const executeRefinement = (acc) => {
          const result = effect.refinement(acc, checkCtx);
          if (ctx.common.async) {
            return Promise.resolve(result);
          }
          if (result instanceof Promise) {
            throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
          }
          return acc;
        };
        if (ctx.common.async === false) {
          const inner = this._def.schema._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (inner.status === "aborted")
            return INVALID;
          if (inner.status === "dirty")
            status.dirty();
          executeRefinement(inner.value);
          return { status: status.value, value: inner.value };
        } else {
          return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
            if (inner.status === "aborted")
              return INVALID;
            if (inner.status === "dirty")
              status.dirty();
            return executeRefinement(inner.value).then(() => {
              return { status: status.value, value: inner.value };
            });
          });
        }
      }
      if (effect.type === "transform") {
        if (ctx.common.async === false) {
          const base = this._def.schema._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (!isValid(base))
            return base;
          const result = effect.transform(base.value, checkCtx);
          if (result instanceof Promise) {
            throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
          }
          return { status: status.value, value: result };
        } else {
          return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
            if (!isValid(base))
              return base;
            return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
          });
        }
      }
      util$1.assertNever(effect);
    }
  }
  ZodEffects.create = (schema, effect, params) => {
    return new ZodEffects({
      schema,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect,
      ...processCreateParams(params)
    });
  };
  ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
    return new ZodEffects({
      schema,
      effect: { type: "preprocess", transform: preprocess },
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      ...processCreateParams(params)
    });
  };
  class ZodOptional extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType === ZodParsedType.undefined) {
        return OK(void 0);
      }
      return this._def.innerType._parse(input);
    }
    unwrap() {
      return this._def.innerType;
    }
  }
  ZodOptional.create = (type, params) => {
    return new ZodOptional({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodOptional,
      ...processCreateParams(params)
    });
  };
  class ZodNullable extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType === ZodParsedType.null) {
        return OK(null);
      }
      return this._def.innerType._parse(input);
    }
    unwrap() {
      return this._def.innerType;
    }
  }
  ZodNullable.create = (type, params) => {
    return new ZodNullable({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodNullable,
      ...processCreateParams(params)
    });
  };
  class ZodDefault extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      let data2 = ctx.data;
      if (ctx.parsedType === ZodParsedType.undefined) {
        data2 = this._def.defaultValue();
      }
      return this._def.innerType._parse({
        data: data2,
        path: ctx.path,
        parent: ctx
      });
    }
    removeDefault() {
      return this._def.innerType;
    }
  }
  ZodDefault.create = (type, params) => {
    return new ZodDefault({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodDefault,
      defaultValue: typeof params.default === "function" ? params.default : () => params.default,
      ...processCreateParams(params)
    });
  };
  class ZodCatch extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const newCtx = {
        ...ctx,
        common: {
          ...ctx.common,
          issues: []
        }
      };
      const result = this._def.innerType._parse({
        data: newCtx.data,
        path: newCtx.path,
        parent: {
          ...newCtx
        }
      });
      if (isAsync(result)) {
        return result.then((result2) => {
          return {
            status: "valid",
            value: result2.status === "valid" ? result2.value : this._def.catchValue({
              get error() {
                return new ZodError(newCtx.common.issues);
              },
              input: newCtx.data
            })
          };
        });
      } else {
        return {
          status: "valid",
          value: result.status === "valid" ? result.value : this._def.catchValue({
            get error() {
              return new ZodError(newCtx.common.issues);
            },
            input: newCtx.data
          })
        };
      }
    }
    removeCatch() {
      return this._def.innerType;
    }
  }
  ZodCatch.create = (type, params) => {
    return new ZodCatch({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodCatch,
      catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
      ...processCreateParams(params)
    });
  };
  class ZodNaN extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.nan) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.nan,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return { status: "valid", value: input.data };
    }
  }
  ZodNaN.create = (params) => {
    return new ZodNaN({
      typeName: ZodFirstPartyTypeKind.ZodNaN,
      ...processCreateParams(params)
    });
  };
  const BRAND = Symbol("zod_brand");
  class ZodBranded extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const data2 = ctx.data;
      return this._def.type._parse({
        data: data2,
        path: ctx.path,
        parent: ctx
      });
    }
    unwrap() {
      return this._def.type;
    }
  }
  class ZodPipeline extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.common.async) {
        const handleAsync = async () => {
          const inResult = await this._def.in._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (inResult.status === "aborted")
            return INVALID;
          if (inResult.status === "dirty") {
            status.dirty();
            return DIRTY(inResult.value);
          } else {
            return this._def.out._parseAsync({
              data: inResult.value,
              path: ctx.path,
              parent: ctx
            });
          }
        };
        return handleAsync();
      } else {
        const inResult = this._def.in._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inResult.status === "aborted")
          return INVALID;
        if (inResult.status === "dirty") {
          status.dirty();
          return {
            status: "dirty",
            value: inResult.value
          };
        } else {
          return this._def.out._parseSync({
            data: inResult.value,
            path: ctx.path,
            parent: ctx
          });
        }
      }
    }
    static create(a, b) {
      return new ZodPipeline({
        in: a,
        out: b,
        typeName: ZodFirstPartyTypeKind.ZodPipeline
      });
    }
  }
  class ZodReadonly extends ZodType {
    _parse(input) {
      const result = this._def.innerType._parse(input);
      if (isValid(result)) {
        result.value = Object.freeze(result.value);
      }
      return result;
    }
  }
  ZodReadonly.create = (type, params) => {
    return new ZodReadonly({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodReadonly,
      ...processCreateParams(params)
    });
  };
  const custom = (check, params = {}, fatal) => {
    if (check)
      return ZodAny.create().superRefine((data2, ctx) => {
        var _a, _b;
        if (!check(data2)) {
          const p = typeof params === "function" ? params(data2) : typeof params === "string" ? { message: params } : params;
          const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
          const p2 = typeof p === "string" ? { message: p } : p;
          ctx.addIssue({ code: "custom", ...p2, fatal: _fatal });
        }
      });
    return ZodAny.create();
  };
  const late = {
    object: ZodObject.lazycreate
  };
  var ZodFirstPartyTypeKind;
  (function(ZodFirstPartyTypeKind2) {
    ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
    ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
    ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
    ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
    ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
    ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
    ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
    ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
    ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
    ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
    ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
    ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
    ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
    ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
    ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
    ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
    ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
    ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
    ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
    ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
    ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
    ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
    ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
    ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
    ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
    ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
    ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
    ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
    ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
    ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
    ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
    ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
    ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
    ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
    ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
    ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
  })(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
  const instanceOfType = (cls, params = {
    message: `Input not instance of ${cls.name}`
  }) => custom((data2) => data2 instanceof cls, params);
  const stringType = ZodString.create;
  const numberType = ZodNumber.create;
  const nanType = ZodNaN.create;
  const bigIntType = ZodBigInt.create;
  const booleanType = ZodBoolean.create;
  const dateType = ZodDate.create;
  const symbolType = ZodSymbol.create;
  const undefinedType = ZodUndefined.create;
  const nullType = ZodNull.create;
  const anyType = ZodAny.create;
  const unknownType = ZodUnknown.create;
  const neverType = ZodNever.create;
  const voidType = ZodVoid.create;
  const arrayType = ZodArray.create;
  const objectType = ZodObject.create;
  const strictObjectType = ZodObject.strictCreate;
  const unionType = ZodUnion.create;
  const discriminatedUnionType = ZodDiscriminatedUnion.create;
  const intersectionType = ZodIntersection.create;
  const tupleType = ZodTuple.create;
  const recordType = ZodRecord.create;
  const mapType = ZodMap.create;
  const setType = ZodSet.create;
  const functionType = ZodFunction.create;
  const lazyType = ZodLazy.create;
  const literalType = ZodLiteral.create;
  const enumType = ZodEnum.create;
  const nativeEnumType = ZodNativeEnum.create;
  const promiseType = ZodPromise.create;
  const effectsType = ZodEffects.create;
  const optionalType = ZodOptional.create;
  const nullableType = ZodNullable.create;
  const preprocessType = ZodEffects.createWithPreprocess;
  const pipelineType = ZodPipeline.create;
  const ostring = () => stringType().optional();
  const onumber = () => numberType().optional();
  const oboolean = () => booleanType().optional();
  const coerce = {
    string: (arg) => ZodString.create({ ...arg, coerce: true }),
    number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
    boolean: (arg) => ZodBoolean.create({
      ...arg,
      coerce: true
    }),
    bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
    date: (arg) => ZodDate.create({ ...arg, coerce: true })
  };
  const NEVER = INVALID;
  var z = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    defaultErrorMap: errorMap,
    setErrorMap,
    getErrorMap,
    makeIssue,
    EMPTY_PATH,
    addIssueToContext,
    ParseStatus,
    INVALID,
    DIRTY,
    OK,
    isAborted,
    isDirty,
    isValid,
    isAsync,
    get util() {
      return util$1;
    },
    get objectUtil() {
      return objectUtil;
    },
    ZodParsedType,
    getParsedType,
    ZodType,
    ZodString,
    ZodNumber,
    ZodBigInt,
    ZodBoolean,
    ZodDate,
    ZodSymbol,
    ZodUndefined,
    ZodNull,
    ZodAny,
    ZodUnknown,
    ZodNever,
    ZodVoid,
    ZodArray,
    ZodObject,
    ZodUnion,
    ZodDiscriminatedUnion,
    ZodIntersection,
    ZodTuple,
    ZodRecord,
    ZodMap,
    ZodSet,
    ZodFunction,
    ZodLazy,
    ZodLiteral,
    ZodEnum,
    ZodNativeEnum,
    ZodPromise,
    ZodEffects,
    ZodTransformer: ZodEffects,
    ZodOptional,
    ZodNullable,
    ZodDefault,
    ZodCatch,
    ZodNaN,
    BRAND,
    ZodBranded,
    ZodPipeline,
    ZodReadonly,
    custom,
    Schema: ZodType,
    ZodSchema: ZodType,
    late,
    get ZodFirstPartyTypeKind() {
      return ZodFirstPartyTypeKind;
    },
    coerce,
    any: anyType,
    array: arrayType,
    bigint: bigIntType,
    boolean: booleanType,
    date: dateType,
    discriminatedUnion: discriminatedUnionType,
    effect: effectsType,
    "enum": enumType,
    "function": functionType,
    "instanceof": instanceOfType,
    intersection: intersectionType,
    lazy: lazyType,
    literal: literalType,
    map: mapType,
    nan: nanType,
    nativeEnum: nativeEnumType,
    never: neverType,
    "null": nullType,
    nullable: nullableType,
    number: numberType,
    object: objectType,
    oboolean,
    onumber,
    optional: optionalType,
    ostring,
    pipeline: pipelineType,
    preprocess: preprocessType,
    promise: promiseType,
    record: recordType,
    set: setType,
    strictObject: strictObjectType,
    string: stringType,
    symbol: symbolType,
    transformer: effectsType,
    tuple: tupleType,
    "undefined": undefinedType,
    union: unionType,
    unknown: unknownType,
    "void": voidType,
    NEVER,
    ZodIssueCode,
    quotelessJson,
    ZodError
  });
  const LogLevels = {
    silent: Number.NEGATIVE_INFINITY,
    fatal: 0,
    error: 0,
    warn: 1,
    log: 2,
    info: 3,
    success: 3,
    fail: 3,
    ready: 3,
    start: 3,
    box: 3,
    debug: 4,
    trace: 5,
    verbose: Number.POSITIVE_INFINITY
  };
  const LogTypes = {
    // Silent
    silent: {
      level: -1
    },
    // Level 0
    fatal: {
      level: LogLevels.fatal
    },
    error: {
      level: LogLevels.error
    },
    // Level 1
    warn: {
      level: LogLevels.warn
    },
    // Level 2
    log: {
      level: LogLevels.log
    },
    // Level 3
    info: {
      level: LogLevels.info
    },
    success: {
      level: LogLevels.success
    },
    fail: {
      level: LogLevels.fail
    },
    ready: {
      level: LogLevels.info
    },
    start: {
      level: LogLevels.info
    },
    box: {
      level: LogLevels.info
    },
    // Level 4
    debug: {
      level: LogLevels.debug
    },
    // Level 5
    trace: {
      level: LogLevels.trace
    },
    // Verbose
    verbose: {
      level: LogLevels.verbose
    }
  };
  function isObject$1(value) {
    return value !== null && typeof value === "object";
  }
  function _defu(baseObject, defaults2, namespace = ".", merger) {
    if (!isObject$1(defaults2)) {
      return _defu(baseObject, {}, namespace, merger);
    }
    const object = Object.assign({}, defaults2);
    for (const key in baseObject) {
      if (key === "__proto__" || key === "constructor") {
        continue;
      }
      const value = baseObject[key];
      if (value === null || value === void 0) {
        continue;
      }
      if (merger && merger(object, key, value, namespace)) {
        continue;
      }
      if (Array.isArray(value) && Array.isArray(object[key])) {
        object[key] = [...value, ...object[key]];
      } else if (isObject$1(value) && isObject$1(object[key])) {
        object[key] = _defu(
          value,
          object[key],
          (namespace ? `${namespace}.` : "") + key.toString(),
          merger
        );
      } else {
        object[key] = value;
      }
    }
    return object;
  }
  function createDefu(merger) {
    return (...arguments_) => (
      // eslint-disable-next-line unicorn/no-array-reduce
      arguments_.reduce((p, c) => _defu(p, c, "", merger), {})
    );
  }
  const defu = createDefu();
  function isPlainObject$3(obj) {
    return Object.prototype.toString.call(obj) === "[object Object]";
  }
  function isLogObj(arg) {
    if (!isPlainObject$3(arg)) {
      return false;
    }
    if (!arg.message && !arg.args) {
      return false;
    }
    if (arg.stack) {
      return false;
    }
    return true;
  }
  let paused = false;
  const queue = [];
  class Consola {
    constructor(options = {}) {
      const types2 = options.types || LogTypes;
      this.options = defu(
        {
          ...options,
          defaults: { ...options.defaults },
          level: _normalizeLogLevel(options.level, types2),
          reporters: [...options.reporters || []]
        },
        {
          types: LogTypes,
          throttle: 1e3,
          throttleMin: 5,
          formatOptions: {
            date: true,
            colors: false,
            compact: true
          }
        }
      );
      for (const type in types2) {
        const defaults2 = {
          type,
          ...this.options.defaults,
          ...types2[type]
        };
        this[type] = this._wrapLogFn(defaults2);
        this[type].raw = this._wrapLogFn(
          defaults2,
          true
        );
      }
      if (this.options.mockFn) {
        this.mockTypes();
      }
      this._lastLog = {};
    }
    get level() {
      return this.options.level;
    }
    set level(level) {
      this.options.level = _normalizeLogLevel(
        level,
        this.options.types,
        this.options.level
      );
    }
    prompt(message, opts) {
      if (!this.options.prompt) {
        throw new Error("prompt is not supported!");
      }
      return this.options.prompt(message, opts);
    }
    create(options) {
      const instance2 = new Consola({
        ...this.options,
        ...options
      });
      if (this._mockFn) {
        instance2.mockTypes(this._mockFn);
      }
      return instance2;
    }
    withDefaults(defaults2) {
      return this.create({
        ...this.options,
        defaults: {
          ...this.options.defaults,
          ...defaults2
        }
      });
    }
    withTag(tag) {
      return this.withDefaults({
        tag: this.options.defaults.tag ? this.options.defaults.tag + ":" + tag : tag
      });
    }
    addReporter(reporter) {
      this.options.reporters.push(reporter);
      return this;
    }
    removeReporter(reporter) {
      if (reporter) {
        const i2 = this.options.reporters.indexOf(reporter);
        if (i2 >= 0) {
          return this.options.reporters.splice(i2, 1);
        }
      } else {
        this.options.reporters.splice(0);
      }
      return this;
    }
    setReporters(reporters) {
      this.options.reporters = Array.isArray(reporters) ? reporters : [reporters];
      return this;
    }
    wrapAll() {
      this.wrapConsole();
      this.wrapStd();
    }
    restoreAll() {
      this.restoreConsole();
      this.restoreStd();
    }
    wrapConsole() {
      for (const type in this.options.types) {
        if (!console["__" + type]) {
          console["__" + type] = console[type];
        }
        console[type] = this[type].raw;
      }
    }
    restoreConsole() {
      for (const type in this.options.types) {
        if (console["__" + type]) {
          console[type] = console["__" + type];
          delete console["__" + type];
        }
      }
    }
    wrapStd() {
      this._wrapStream(this.options.stdout, "log");
      this._wrapStream(this.options.stderr, "log");
    }
    _wrapStream(stream, type) {
      if (!stream) {
        return;
      }
      if (!stream.__write) {
        stream.__write = stream.write;
      }
      stream.write = (data2) => {
        this[type].raw(String(data2).trim());
      };
    }
    restoreStd() {
      this._restoreStream(this.options.stdout);
      this._restoreStream(this.options.stderr);
    }
    _restoreStream(stream) {
      if (!stream) {
        return;
      }
      if (stream.__write) {
        stream.write = stream.__write;
        delete stream.__write;
      }
    }
    pauseLogs() {
      paused = true;
    }
    resumeLogs() {
      paused = false;
      const _queue = queue.splice(0);
      for (const item of _queue) {
        item[0]._logFn(item[1], item[2]);
      }
    }
    mockTypes(mockFn) {
      const _mockFn = mockFn || this.options.mockFn;
      this._mockFn = _mockFn;
      if (typeof _mockFn !== "function") {
        return;
      }
      for (const type in this.options.types) {
        this[type] = _mockFn(type, this.options.types[type]) || this[type];
        this[type].raw = this[type];
      }
    }
    _wrapLogFn(defaults2, isRaw) {
      return (...args) => {
        if (paused) {
          queue.push([this, defaults2, args, isRaw]);
          return;
        }
        return this._logFn(defaults2, args, isRaw);
      };
    }
    _logFn(defaults2, args, isRaw) {
      if ((defaults2.level || 0) > this.level) {
        return false;
      }
      const logObj = {
        date: /* @__PURE__ */ new Date(),
        args: [],
        ...defaults2,
        level: _normalizeLogLevel(defaults2.level, this.options.types)
      };
      if (!isRaw && args.length === 1 && isLogObj(args[0])) {
        Object.assign(logObj, args[0]);
      } else {
        logObj.args = [...args];
      }
      if (logObj.message) {
        logObj.args.unshift(logObj.message);
        delete logObj.message;
      }
      if (logObj.additional) {
        if (!Array.isArray(logObj.additional)) {
          logObj.additional = logObj.additional.split("\n");
        }
        logObj.args.push("\n" + logObj.additional.join("\n"));
        delete logObj.additional;
      }
      logObj.type = typeof logObj.type === "string" ? logObj.type.toLowerCase() : "log";
      logObj.tag = typeof logObj.tag === "string" ? logObj.tag : "";
      const resolveLog = (newLog = false) => {
        const repeated = (this._lastLog.count || 0) - this.options.throttleMin;
        if (this._lastLog.object && repeated > 0) {
          const args2 = [...this._lastLog.object.args];
          if (repeated > 1) {
            args2.push(`(repeated ${repeated} times)`);
          }
          this._log({ ...this._lastLog.object, args: args2 });
          this._lastLog.count = 1;
        }
        if (newLog) {
          this._lastLog.object = logObj;
          this._log(logObj);
        }
      };
      clearTimeout(this._lastLog.timeout);
      const diffTime = this._lastLog.time && logObj.date ? logObj.date.getTime() - this._lastLog.time.getTime() : 0;
      this._lastLog.time = logObj.date;
      if (diffTime < this.options.throttle) {
        try {
          const serializedLog = JSON.stringify([
            logObj.type,
            logObj.tag,
            logObj.args
          ]);
          const isSameLog = this._lastLog.serialized === serializedLog;
          this._lastLog.serialized = serializedLog;
          if (isSameLog) {
            this._lastLog.count = (this._lastLog.count || 0) + 1;
            if (this._lastLog.count > this.options.throttleMin) {
              this._lastLog.timeout = setTimeout(
                resolveLog,
                this.options.throttle
              );
              return;
            }
          }
        } catch {
        }
      }
      resolveLog(true);
    }
    _log(logObj) {
      for (const reporter of this.options.reporters) {
        reporter.log(logObj, {
          options: this.options
        });
      }
    }
  }
  function _normalizeLogLevel(input, types2 = {}, defaultLevel = 3) {
    if (input === void 0) {
      return defaultLevel;
    }
    if (typeof input === "number") {
      return input;
    }
    if (types2[input] && types2[input].level !== void 0) {
      return types2[input].level;
    }
    return defaultLevel;
  }
  Consola.prototype.add = Consola.prototype.addReporter;
  Consola.prototype.remove = Consola.prototype.removeReporter;
  Consola.prototype.clear = Consola.prototype.removeReporter;
  Consola.prototype.withScope = Consola.prototype.withTag;
  Consola.prototype.mock = Consola.prototype.mockTypes;
  Consola.prototype.pause = Consola.prototype.pauseLogs;
  Consola.prototype.resume = Consola.prototype.resumeLogs;
  function createConsola$1(options = {}) {
    return new Consola(options);
  }
  class BrowserReporter {
    constructor(options) {
      this.options = { ...options };
      this.defaultColor = "#7f8c8d";
      this.levelColorMap = {
        0: "#c0392b",
        // Red
        1: "#f39c12",
        // Yellow
        3: "#00BCD4"
        // Cyan
      };
      this.typeColorMap = {
        success: "#2ecc71"
        // Green
      };
    }
    _getLogFn(level) {
      if (level < 1) {
        return console.__error || console.error;
      }
      if (level === 1) {
        return console.__warn || console.warn;
      }
      return console.__log || console.log;
    }
    log(logObj) {
      const consoleLogFn = this._getLogFn(logObj.level);
      const type = logObj.type === "log" ? "" : logObj.type;
      const tag = logObj.tag || "";
      const color2 = this.typeColorMap[logObj.type] || this.levelColorMap[logObj.level] || this.defaultColor;
      const style2 = `
      background: ${color2};
      border-radius: 0.5em;
      color: white;
      font-weight: bold;
      padding: 2px 0.5em;
    `;
      const badge = `%c${[tag, type].filter(Boolean).join(":")}`;
      if (typeof logObj.args[0] === "string") {
        consoleLogFn(
          `${badge}%c ${logObj.args[0]}`,
          style2,
          // Empty string as style resets to default console style
          "",
          ...logObj.args.slice(1)
        );
      } else {
        consoleLogFn(badge, style2, ...logObj.args);
      }
    }
  }
  function createConsola(options = {}) {
    const consola2 = createConsola$1({
      reporters: options.reporters || [new BrowserReporter({})],
      prompt(message, options2 = {}) {
        if (options2.type === "confirm") {
          return Promise.resolve(confirm(message));
        }
        return Promise.resolve(prompt(message));
      },
      ...options
    });
    return consola2;
  }
  const consola = createConsola();
  const LogLevel = z.enum(["trace", "debug", "info", "warn", "error", "fatal"]);
  function getLogger(logLevel, scope) {
    return getLoggerAdapterConsola(getLogLevel(logLevel), scope);
  }
  const getLoggerAdapterConsola = (logLevel, scope) => {
    const logger2 = consola.create({}).withTag(scope);
    let currentLevel = logLevel;
    const result = {
      log: logger2.log,
      info: logger2.info,
      debug: logger2.debug,
      trace: logger2.trace,
      warn: logger2.warn,
      error: logger2.error,
      fatal: logger2.fatal,
      setLogLevel: (level) => {
        let logLevel2 = NaN;
        level = getLogLevel(level);
        switch (level) {
          case LogLevel.enum.trace:
            logLevel2 = LogLevels.trace;
            break;
          case LogLevel.enum.debug:
            logLevel2 = LogLevels.debug;
            break;
          case LogLevel.enum.info:
            logLevel2 = LogLevels.info;
            break;
          case LogLevel.enum.warn:
            logLevel2 = LogLevels.warn;
            break;
          case LogLevel.enum.error:
            logLevel2 = LogLevels.error;
            break;
          case LogLevel.enum.fatal:
            logLevel2 = LogLevels.fatal;
            break;
          default:
            throw new Error("LOG.INVALID_LOG_LEVEL");
        }
        logger2.level = logLevel2;
        currentLevel = level;
      },
      getLogLevel: () => {
        return currentLevel;
      }
    };
    result.setLogLevel(logLevel);
    return result;
  };
  function getLogLevel(logLevel) {
    logLevel = logLevel || process.env.LOG_LEVEL || "Info";
    logLevel = logLevel.toString().toLowerCase();
    try {
      return LogLevel.parse(logLevel);
    } catch (e) {
      throw new ProsopoEnvError("CONFIG.INVALID_LOG_LEVEL", logLevel);
    }
  }
  function evaluateThis$2(fn) {
    return fn("return this");
  }
  const xglobal$2 = typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : evaluateThis$2(Function);
  const crypto$1 = xglobal$2.crypto;
  function getRandomValues(arr2) {
    return crypto$1.getRandomValues(arr2);
  }
  function evaluateThis$1(fn) {
    return fn("return this");
  }
  const xglobal$1 = typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : evaluateThis$1(Function);
  function extractGlobal(name, fallback) {
    return typeof xglobal$1[name] === "undefined" ? fallback : xglobal$1[name];
  }
  function invalidFallback() {
    return Number.NaN;
  }
  const BigInt$1 = /* @__PURE__ */ extractGlobal("BigInt", invalidFallback);
  const DEFAULT_CRYPTO = { getRandomValues };
  const DEFAULT_SELF = { crypto: DEFAULT_CRYPTO };
  class Wbg {
    constructor(bridge2) {
      this.abort = () => {
        throw new Error("abort");
      };
      this.__wbindgen_is_undefined = (idx) => {
        return this.__internal__bridge.getObject(idx) === void 0;
      };
      this.__wbindgen_throw = (ptr, len) => {
        throw new Error(this.__internal__bridge.getString(ptr, len));
      };
      this.__wbg_self_1b7a39e3a92c949c = () => {
        return this.__internal__bridge.addObject(DEFAULT_SELF);
      };
      this.__wbg_require_604837428532a733 = (ptr, len) => {
        throw new Error(`Unable to require ${this.__internal__bridge.getString(ptr, len)}`);
      };
      this.__wbg_crypto_968f1772287e2df0 = (_idx) => {
        return this.__internal__bridge.addObject(DEFAULT_CRYPTO);
      };
      this.__wbg_getRandomValues_a3d34b4fee3c2869 = (_idx) => {
        return this.__internal__bridge.addObject(DEFAULT_CRYPTO.getRandomValues);
      };
      this.__wbg_getRandomValues_f5e14ab7ac8e995d = (_arg0, ptr, len) => {
        DEFAULT_CRYPTO.getRandomValues(this.__internal__bridge.getU8a(ptr, len));
      };
      this.__wbg_randomFillSync_d5bd2d655fdf256a = (_idx, _ptr, _len) => {
        throw new Error("randomFillsync is not available");
      };
      this.__wbindgen_object_drop_ref = (idx) => {
        this.__internal__bridge.takeObject(idx);
      };
      this.__internal__bridge = bridge2;
    }
  }
  class Bridge {
    constructor(createWasm2) {
      this.__internal__createWasm = createWasm2;
      this.__internal__cachegetInt32 = null;
      this.__internal__cachegetUint8 = null;
      this.__internal__heap = new Array(32).fill(void 0).concat(void 0, null, true, false);
      this.__internal__heapNext = this.__internal__heap.length;
      this.__internal__type = "none";
      this.__internal__wasm = null;
      this.__internal__wasmError = null;
      this.__internal__wasmPromise = null;
      this.__internal__wbg = { ...new Wbg(this) };
    }
    /** @description Returns the init error */
    get error() {
      return this.__internal__wasmError;
    }
    /** @description Returns the init type */
    get type() {
      return this.__internal__type;
    }
    /** @description Returns the created wasm interface */
    get wasm() {
      return this.__internal__wasm;
    }
    /** @description Performs the wasm initialization */
    async init(createWasm2) {
      if (!this.__internal__wasmPromise || createWasm2) {
        this.__internal__wasmPromise = (createWasm2 || this.__internal__createWasm)(this.__internal__wbg);
      }
      const { error, type, wasm } = await this.__internal__wasmPromise;
      this.__internal__type = type;
      this.__internal__wasm = wasm;
      this.__internal__wasmError = error;
      return this.__internal__wasm;
    }
    /**
     * @internal
     * @description Gets an object from the heap
     */
    getObject(idx) {
      return this.__internal__heap[idx];
    }
    /**
     * @internal
     * @description Removes an object from the heap
     */
    dropObject(idx) {
      if (idx < 36) {
        return;
      }
      this.__internal__heap[idx] = this.__internal__heapNext;
      this.__internal__heapNext = idx;
    }
    /**
     * @internal
     * @description Retrieves and removes an object to the heap
     */
    takeObject(idx) {
      const ret = this.getObject(idx);
      this.dropObject(idx);
      return ret;
    }
    /**
     * @internal
     * @description Adds an object to the heap
     */
    addObject(obj) {
      if (this.__internal__heapNext === this.__internal__heap.length) {
        this.__internal__heap.push(this.__internal__heap.length + 1);
      }
      const idx = this.__internal__heapNext;
      this.__internal__heapNext = this.__internal__heap[idx];
      this.__internal__heap[idx] = obj;
      return idx;
    }
    /**
     * @internal
     * @description Retrieve an Int32 in the WASM interface
     */
    getInt32() {
      if (this.__internal__cachegetInt32 === null || this.__internal__cachegetInt32.buffer !== this.__internal__wasm.memory.buffer) {
        this.__internal__cachegetInt32 = new Int32Array(this.__internal__wasm.memory.buffer);
      }
      return this.__internal__cachegetInt32;
    }
    /**
     * @internal
     * @description Retrieve an Uint8Array in the WASM interface
     */
    getUint8() {
      if (this.__internal__cachegetUint8 === null || this.__internal__cachegetUint8.buffer !== this.__internal__wasm.memory.buffer) {
        this.__internal__cachegetUint8 = new Uint8Array(this.__internal__wasm.memory.buffer);
      }
      return this.__internal__cachegetUint8;
    }
    /**
     * @internal
     * @description Retrieves an Uint8Array in the WASM interface
     */
    getU8a(ptr, len) {
      return this.getUint8().subarray(ptr / 1, ptr / 1 + len);
    }
    /**
     * @internal
     * @description Retrieves a string in the WASM interface
     */
    getString(ptr, len) {
      return u8aToString(this.getU8a(ptr, len));
    }
    /**
     * @internal
     * @description Allocates an Uint8Array in the WASM interface
     */
    allocU8a(arg) {
      const ptr = this.__internal__wasm.__wbindgen_malloc(arg.length * 1);
      this.getUint8().set(arg, ptr / 1);
      return [ptr, arg.length];
    }
    /**
     * @internal
     * @description Allocates a string in the WASM interface
     */
    allocString(arg) {
      return this.allocU8a(stringToU8a(arg));
    }
    /**
     * @internal
     * @description Retrieves an Uint8Array from the WASM interface
     */
    resultU8a() {
      const r0 = this.getInt32()[8 / 4 + 0];
      const r1 = this.getInt32()[8 / 4 + 1];
      const ret = this.getU8a(r0, r1).slice();
      this.__internal__wasm.__wbindgen_free(r0, r1 * 1);
      return ret;
    }
    /**
     * @internal
     * @description Retrieve a string from the WASM interface
     */
    resultString() {
      return u8aToString(this.resultU8a());
    }
  }
  function createWasmFn(root, wasmBytes2, asmFn) {
    return async (wbg) => {
      const result = {
        error: null,
        type: "none",
        wasm: null
      };
      try {
        if (!(wasmBytes2 == null ? void 0 : wasmBytes2.length)) {
          throw new Error("No WebAssembly provided for initialization");
        } else if (typeof WebAssembly !== "object" || typeof WebAssembly.instantiate !== "function") {
          throw new Error("WebAssembly is not available in your environment");
        }
        const source = await WebAssembly.instantiate(wasmBytes2, { wbg });
        result.wasm = source.instance.exports;
        result.type = "wasm";
      } catch (error) {
        if (typeof asmFn === "function") {
          result.wasm = asmFn(wbg);
          result.type = "asm";
        } else {
          result.error = `FATAL: Unable to initialize @polkadot/wasm-${root}:: ${error.message}`;
          console.error(result.error);
        }
      }
      return result;
    };
  }
  const chr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  const map$1 = new Array(256);
  for (let i2 = 0, count = chr.length; i2 < count; i2++) {
    map$1[chr.charCodeAt(i2)] = i2;
  }
  function base64Decode$1(data2, out) {
    let byte = 0;
    let bits2 = 0;
    let pos = -1;
    for (let i2 = 0, count = out.length; pos < count; i2++) {
      byte = byte << 6 | map$1[data2.charCodeAt(i2)];
      if ((bits2 += 6) >= 8) {
        out[++pos] = byte >>> (bits2 -= 8) & 255;
      }
    }
    return out;
  }
  const u8$1 = Uint8Array, u16$1 = Uint16Array, u32$2 = Uint32Array;
  const clim = new u8$1([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
  const fleb = new u8$1([
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    0,
    /* unused */
    0,
    0,
    /* impossible */
    0
  ]);
  const fdeb = new u8$1([
    0,
    0,
    0,
    0,
    1,
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    5,
    5,
    6,
    6,
    7,
    7,
    8,
    8,
    9,
    9,
    10,
    10,
    11,
    11,
    12,
    12,
    13,
    13,
    /* unused */
    0,
    0
  ]);
  const freb = (eb, start) => {
    const b = new u16$1(31);
    for (let i2 = 0; i2 < 31; ++i2) {
      b[i2] = start += 1 << eb[i2 - 1];
    }
    const r2 = new u32$2(b[30]);
    for (let i2 = 1; i2 < 30; ++i2) {
      for (let j = b[i2]; j < b[i2 + 1]; ++j) {
        r2[j] = j - b[i2] << 5 | i2;
      }
    }
    return [b, r2];
  };
  const [fl, revfl] = freb(fleb, 2);
  fl[28] = 258, revfl[258] = 28;
  const [fd] = freb(fdeb, 0);
  const rev = new u16$1(32768);
  for (let i2 = 0; i2 < 32768; ++i2) {
    let x = (i2 & 43690) >>> 1 | (i2 & 21845) << 1;
    x = (x & 52428) >>> 2 | (x & 13107) << 2;
    x = (x & 61680) >>> 4 | (x & 3855) << 4;
    rev[i2] = ((x & 65280) >>> 8 | (x & 255) << 8) >>> 1;
  }
  const hMap = (cd, mb, r2) => {
    const s = cd.length;
    let i2 = 0;
    const l2 = new u16$1(mb);
    for (; i2 < s; ++i2)
      ++l2[cd[i2] - 1];
    const le = new u16$1(mb);
    for (i2 = 0; i2 < mb; ++i2) {
      le[i2] = le[i2 - 1] + l2[i2 - 1] << 1;
    }
    let co;
    if (r2) {
      co = new u16$1(1 << mb);
      const rvb = 15 - mb;
      for (i2 = 0; i2 < s; ++i2) {
        if (cd[i2]) {
          const sv = i2 << 4 | cd[i2];
          const r3 = mb - cd[i2];
          let v = le[cd[i2] - 1]++ << r3;
          for (const m2 = v | (1 << r3) - 1; v <= m2; ++v) {
            co[rev[v] >>> rvb] = sv;
          }
        }
      }
    } else {
      co = new u16$1(s);
      for (i2 = 0; i2 < s; ++i2)
        co[i2] = rev[le[cd[i2] - 1]++] >>> 15 - cd[i2];
    }
    return co;
  };
  const flt = new u8$1(288);
  for (let i2 = 0; i2 < 144; ++i2)
    flt[i2] = 8;
  for (let i2 = 144; i2 < 256; ++i2)
    flt[i2] = 9;
  for (let i2 = 256; i2 < 280; ++i2)
    flt[i2] = 7;
  for (let i2 = 280; i2 < 288; ++i2)
    flt[i2] = 8;
  const fdt = new u8$1(32);
  for (let i2 = 0; i2 < 32; ++i2)
    fdt[i2] = 5;
  const flrm = hMap(flt, 9, 1);
  const fdrm = hMap(fdt, 5, 1);
  const bits = (d, p, m2) => {
    const o = p >>> 3;
    return (d[o] | d[o + 1] << 8) >>> (p & 7) & m2;
  };
  const bits16 = (d, p) => {
    const o = p >>> 3;
    return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >>> (p & 7);
  };
  const shft = (p) => (p >>> 3) + (p & 7 && 1);
  const slc = (v, s, e) => {
    if (s == null || s < 0)
      s = 0;
    if (e == null || e > v.length)
      e = v.length;
    const n = new (v instanceof u16$1 ? u16$1 : v instanceof u32$2 ? u32$2 : u8$1)(e - s);
    n.set(v.subarray(s, e));
    return n;
  };
  const max = (a) => {
    let m2 = a[0];
    for (let i2 = 1, count = a.length; i2 < count; ++i2) {
      if (a[i2] > m2)
        m2 = a[i2];
    }
    return m2;
  };
  const inflt = (dat, buf, st) => {
    const noSt = !st || st.i;
    if (!st)
      st = {};
    const sl = dat.length;
    const noBuf = !buf || !noSt;
    if (!buf)
      buf = new u8$1(sl * 3);
    const cbuf = (l2) => {
      let bl = buf.length;
      if (l2 > bl) {
        const nbuf = new u8$1(Math.max(bl << 1, l2));
        nbuf.set(buf);
        buf = nbuf;
      }
    };
    let final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
    if (final && !lm)
      return buf;
    const tbts = sl << 3;
    do {
      if (!lm) {
        st.f = final = bits(dat, pos, 1);
        const type = bits(dat, pos + 1, 3);
        pos += 3;
        if (!type) {
          const s = shft(pos) + 4, l2 = dat[s - 4] | dat[s - 3] << 8, t = s + l2;
          if (t > sl) {
            if (noSt)
              throw "unexpected EOF";
            break;
          }
          if (noBuf)
            cbuf(bt + l2);
          buf.set(dat.subarray(s, t), bt);
          st.b = bt += l2, st.p = pos = t << 3;
          continue;
        } else if (type == 1)
          lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
        else if (type == 2) {
          const hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
          const tl = hLit + bits(dat, pos + 5, 31) + 1;
          pos += 14;
          const ldt = new u8$1(tl);
          const clt = new u8$1(19);
          for (let i2 = 0; i2 < hcLen; ++i2) {
            clt[clim[i2]] = bits(dat, pos + i2 * 3, 7);
          }
          pos += hcLen * 3;
          const clb = max(clt), clbmsk = (1 << clb) - 1;
          if (!noSt && pos + tl * (clb + 7) > tbts)
            break;
          const clm = hMap(clt, clb, 1);
          for (let i2 = 0; i2 < tl; ) {
            const r2 = clm[bits(dat, pos, clbmsk)];
            pos += r2 & 15;
            const s = r2 >>> 4;
            if (s < 16) {
              ldt[i2++] = s;
            } else {
              let c = 0, n = 0;
              if (s == 16)
                n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i2 - 1];
              else if (s == 17)
                n = 3 + bits(dat, pos, 7), pos += 3;
              else if (s == 18)
                n = 11 + bits(dat, pos, 127), pos += 7;
              while (n--)
                ldt[i2++] = c;
            }
          }
          const lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
          lbt = max(lt);
          dbt = max(dt);
          lm = hMap(lt, lbt, 1);
          dm = hMap(dt, dbt, 1);
        } else
          throw "invalid block type";
        if (pos > tbts)
          throw "unexpected EOF";
      }
      if (noBuf)
        cbuf(bt + 131072);
      const lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
      const mxa = lbt + dbt + 18;
      while (noSt || pos + mxa < tbts) {
        const c = lm[bits16(dat, pos) & lms], sym = c >>> 4;
        pos += c & 15;
        if (pos > tbts)
          throw "unexpected EOF";
        if (!c)
          throw "invalid length/literal";
        if (sym < 256)
          buf[bt++] = sym;
        else if (sym == 256) {
          lm = void 0;
          break;
        } else {
          let add2 = sym - 254;
          if (sym > 264) {
            const i2 = sym - 257, b = fleb[i2];
            add2 = bits(dat, pos, (1 << b) - 1) + fl[i2];
            pos += b;
          }
          const d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;
          if (!d)
            throw "invalid distance";
          pos += d & 15;
          let dt = fd[dsym];
          if (dsym > 3) {
            const b = fdeb[dsym];
            dt += bits16(dat, pos) & (1 << b) - 1, pos += b;
          }
          if (pos > tbts)
            throw "unexpected EOF";
          if (noBuf)
            cbuf(bt + 131072);
          const end = bt + add2;
          for (; bt < end; bt += 4) {
            buf[bt] = buf[bt - dt];
            buf[bt + 1] = buf[bt + 1 - dt];
            buf[bt + 2] = buf[bt + 2 - dt];
            buf[bt + 3] = buf[bt + 3 - dt];
          }
          bt = end;
        }
      }
      st.l = lm, st.p = pos, st.b = bt;
      if (lm)
        final = 1, st.m = lbt, st.d = dm, st.n = dbt;
    } while (!final);
    return bt == buf.length ? buf : slc(buf, 0, bt);
  };
  const zlv = (d) => {
    if ((d[0] & 15) != 8 || d[0] >>> 4 > 7 || (d[0] << 8 | d[1]) % 31)
      throw "invalid zlib data";
    if (d[1] & 32)
      throw "invalid zlib data: preset dictionaries not supported";
  };
  function unzlibSync(data2, out) {
    return inflt((zlv(data2), data2.subarray(2, -4)), out);
  }
  var lenIn = 171008;
  var lenOut = 339468;
  var bytes_1 = "";
  const wasmBytes = /* @__PURE__ */ unzlibSync(base64Decode$1(bytes_1, new Uint8Array(lenIn)), new Uint8Array(lenOut));
  const createWasm = /* @__PURE__ */ createWasmFn("crypto", wasmBytes, null);
  const bridge = new Bridge(createWasm);
  async function initBridge(createWasm2) {
    return bridge.init(createWasm2);
  }
  function withWasm(fn) {
    return (...params) => {
      if (!bridge.wasm) {
        throw new Error("The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.");
      }
      return fn(bridge.wasm, ...params);
    };
  }
  const bip39ToEntropy = /* @__PURE__ */ withWasm((wasm, phrase) => {
    wasm.ext_bip39_to_entropy(8, ...bridge.allocString(phrase));
    return bridge.resultU8a();
  });
  const bip39ToMiniSecret = /* @__PURE__ */ withWasm((wasm, phrase, password) => {
    wasm.ext_bip39_to_mini_secret(8, ...bridge.allocString(phrase), ...bridge.allocString(password));
    return bridge.resultU8a();
  });
  const bip39ToSeed = /* @__PURE__ */ withWasm((wasm, phrase, password) => {
    wasm.ext_bip39_to_seed(8, ...bridge.allocString(phrase), ...bridge.allocString(password));
    return bridge.resultU8a();
  });
  const bip39Validate = /* @__PURE__ */ withWasm((wasm, phrase) => {
    const ret = wasm.ext_bip39_validate(...bridge.allocString(phrase));
    return ret !== 0;
  });
  const ed25519KeypairFromSeed = /* @__PURE__ */ withWasm((wasm, seed) => {
    wasm.ext_ed_from_seed(8, ...bridge.allocU8a(seed));
    return bridge.resultU8a();
  });
  const ed25519Sign$1 = /* @__PURE__ */ withWasm((wasm, pubkey, seckey, message) => {
    wasm.ext_ed_sign(8, ...bridge.allocU8a(pubkey), ...bridge.allocU8a(seckey), ...bridge.allocU8a(message));
    return bridge.resultU8a();
  });
  const ed25519Verify$1 = /* @__PURE__ */ withWasm((wasm, signature, message, pubkey) => {
    const ret = wasm.ext_ed_verify(...bridge.allocU8a(signature), ...bridge.allocU8a(message), ...bridge.allocU8a(pubkey));
    return ret !== 0;
  });
  const secp256k1FromSeed = /* @__PURE__ */ withWasm((wasm, seckey) => {
    wasm.ext_secp_from_seed(8, ...bridge.allocU8a(seckey));
    return bridge.resultU8a();
  });
  const secp256k1Compress$1 = /* @__PURE__ */ withWasm((wasm, pubkey) => {
    wasm.ext_secp_pub_compress(8, ...bridge.allocU8a(pubkey));
    return bridge.resultU8a();
  });
  const secp256k1Expand$1 = /* @__PURE__ */ withWasm((wasm, pubkey) => {
    wasm.ext_secp_pub_expand(8, ...bridge.allocU8a(pubkey));
    return bridge.resultU8a();
  });
  const secp256k1Recover$1 = /* @__PURE__ */ withWasm((wasm, msgHash, sig2, recovery) => {
    wasm.ext_secp_recover(8, ...bridge.allocU8a(msgHash), ...bridge.allocU8a(sig2), recovery);
    return bridge.resultU8a();
  });
  const secp256k1Sign$1 = /* @__PURE__ */ withWasm((wasm, msgHash, seckey) => {
    wasm.ext_secp_sign(8, ...bridge.allocU8a(msgHash), ...bridge.allocU8a(seckey));
    return bridge.resultU8a();
  });
  const sr25519DeriveKeypairHard = /* @__PURE__ */ withWasm((wasm, pair, cc) => {
    wasm.ext_sr_derive_keypair_hard(8, ...bridge.allocU8a(pair), ...bridge.allocU8a(cc));
    return bridge.resultU8a();
  });
  const sr25519DeriveKeypairSoft = /* @__PURE__ */ withWasm((wasm, pair, cc) => {
    wasm.ext_sr_derive_keypair_soft(8, ...bridge.allocU8a(pair), ...bridge.allocU8a(cc));
    return bridge.resultU8a();
  });
  const sr25519KeypairFromSeed = /* @__PURE__ */ withWasm((wasm, seed) => {
    wasm.ext_sr_from_seed(8, ...bridge.allocU8a(seed));
    return bridge.resultU8a();
  });
  const sr25519Sign$1 = /* @__PURE__ */ withWasm((wasm, pubkey, secret, message) => {
    wasm.ext_sr_sign(8, ...bridge.allocU8a(pubkey), ...bridge.allocU8a(secret), ...bridge.allocU8a(message));
    return bridge.resultU8a();
  });
  const sr25519Verify$1 = /* @__PURE__ */ withWasm((wasm, signature, message, pubkey) => {
    const ret = wasm.ext_sr_verify(...bridge.allocU8a(signature), ...bridge.allocU8a(message), ...bridge.allocU8a(pubkey));
    return ret !== 0;
  });
  const vrfSign = /* @__PURE__ */ withWasm((wasm, secret, context, message, extra) => {
    wasm.ext_vrf_sign(8, ...bridge.allocU8a(secret), ...bridge.allocU8a(context), ...bridge.allocU8a(message), ...bridge.allocU8a(extra));
    return bridge.resultU8a();
  });
  const vrfVerify = /* @__PURE__ */ withWasm((wasm, pubkey, context, message, extra, outAndProof) => {
    const ret = wasm.ext_vrf_verify(...bridge.allocU8a(pubkey), ...bridge.allocU8a(context), ...bridge.allocU8a(message), ...bridge.allocU8a(extra), ...bridge.allocU8a(outAndProof));
    return ret !== 0;
  });
  const blake2b$1 = /* @__PURE__ */ withWasm((wasm, data2, key, size) => {
    wasm.ext_blake2b(8, ...bridge.allocU8a(data2), ...bridge.allocU8a(key), size);
    return bridge.resultU8a();
  });
  const hmacSha256 = /* @__PURE__ */ withWasm((wasm, key, data2) => {
    wasm.ext_hmac_sha256(8, ...bridge.allocU8a(key), ...bridge.allocU8a(data2));
    return bridge.resultU8a();
  });
  const hmacSha512 = /* @__PURE__ */ withWasm((wasm, key, data2) => {
    wasm.ext_hmac_sha512(8, ...bridge.allocU8a(key), ...bridge.allocU8a(data2));
    return bridge.resultU8a();
  });
  const keccak256 = /* @__PURE__ */ withWasm((wasm, data2) => {
    wasm.ext_keccak256(8, ...bridge.allocU8a(data2));
    return bridge.resultU8a();
  });
  const keccak512 = /* @__PURE__ */ withWasm((wasm, data2) => {
    wasm.ext_keccak512(8, ...bridge.allocU8a(data2));
    return bridge.resultU8a();
  });
  const pbkdf2$1 = /* @__PURE__ */ withWasm((wasm, data2, salt, rounds) => {
    wasm.ext_pbkdf2(8, ...bridge.allocU8a(data2), ...bridge.allocU8a(salt), rounds);
    return bridge.resultU8a();
  });
  const scrypt$1 = /* @__PURE__ */ withWasm((wasm, password, salt, log2n, r2, p) => {
    wasm.ext_scrypt(8, ...bridge.allocU8a(password), ...bridge.allocU8a(salt), log2n, r2, p);
    return bridge.resultU8a();
  });
  const sha256$1 = /* @__PURE__ */ withWasm((wasm, data2) => {
    wasm.ext_sha256(8, ...bridge.allocU8a(data2));
    return bridge.resultU8a();
  });
  const sha512$1 = /* @__PURE__ */ withWasm((wasm, data2) => {
    wasm.ext_sha512(8, ...bridge.allocU8a(data2));
    return bridge.resultU8a();
  });
  const twox = /* @__PURE__ */ withWasm((wasm, data2, rounds) => {
    wasm.ext_twox(8, ...bridge.allocU8a(data2), rounds);
    return bridge.resultU8a();
  });
  function isReady() {
    return !!bridge.wasm;
  }
  async function waitReady() {
    try {
      const wasm = await initBridge();
      return !!wasm;
    } catch {
      return false;
    }
  }
  function cryptoWaitReady() {
    return waitReady().then(() => {
      if (!isReady()) {
        throw new Error("Unable to initialize @polkadot/util-crypto");
      }
      return true;
    }).catch(() => false);
  }
  /*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  function assertNumber(n) {
    if (!Number.isSafeInteger(n))
      throw new Error(`Wrong integer: ${n}`);
  }
  function chain$1(...args) {
    const wrap = (a, b) => (c) => a(b(c));
    const encode2 = Array.from(args).reverse().reduce((acc, i2) => acc ? wrap(acc, i2.encode) : i2.encode, void 0);
    const decode2 = args.reduce((acc, i2) => acc ? wrap(acc, i2.decode) : i2.decode, void 0);
    return { encode: encode2, decode: decode2 };
  }
  function alphabet(alphabet2) {
    return {
      encode: (digits) => {
        if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
          throw new Error("alphabet.encode input should be an array of numbers");
        return digits.map((i2) => {
          assertNumber(i2);
          if (i2 < 0 || i2 >= alphabet2.length)
            throw new Error(`Digit index outside alphabet: ${i2} (alphabet: ${alphabet2.length})`);
          return alphabet2[i2];
        });
      },
      decode: (input) => {
        if (!Array.isArray(input) || input.length && typeof input[0] !== "string")
          throw new Error("alphabet.decode input should be array of strings");
        return input.map((letter) => {
          if (typeof letter !== "string")
            throw new Error(`alphabet.decode: not string element=${letter}`);
          const index2 = alphabet2.indexOf(letter);
          if (index2 === -1)
            throw new Error(`Unknown letter: "${letter}". Allowed: ${alphabet2}`);
          return index2;
        });
      }
    };
  }
  function join(separator = "") {
    if (typeof separator !== "string")
      throw new Error("join separator should be string");
    return {
      encode: (from2) => {
        if (!Array.isArray(from2) || from2.length && typeof from2[0] !== "string")
          throw new Error("join.encode input should be array of strings");
        for (let i2 of from2)
          if (typeof i2 !== "string")
            throw new Error(`join.encode: non-string input=${i2}`);
        return from2.join(separator);
      },
      decode: (to) => {
        if (typeof to !== "string")
          throw new Error("join.decode input should be string");
        return to.split(separator);
      }
    };
  }
  function padding$1(bits2, chr2 = "=") {
    assertNumber(bits2);
    if (typeof chr2 !== "string")
      throw new Error("padding chr should be string");
    return {
      encode(data2) {
        if (!Array.isArray(data2) || data2.length && typeof data2[0] !== "string")
          throw new Error("padding.encode input should be array of strings");
        for (let i2 of data2)
          if (typeof i2 !== "string")
            throw new Error(`padding.encode: non-string input=${i2}`);
        while (data2.length * bits2 % 8)
          data2.push(chr2);
        return data2;
      },
      decode(input) {
        if (!Array.isArray(input) || input.length && typeof input[0] !== "string")
          throw new Error("padding.encode input should be array of strings");
        for (let i2 of input)
          if (typeof i2 !== "string")
            throw new Error(`padding.decode: non-string input=${i2}`);
        let end = input.length;
        if (end * bits2 % 8)
          throw new Error("Invalid padding: string should have whole number of bytes");
        for (; end > 0 && input[end - 1] === chr2; end--) {
          if (!((end - 1) * bits2 % 8))
            throw new Error("Invalid padding: string has too much padding");
        }
        return input.slice(0, end);
      }
    };
  }
  function normalize$1(fn) {
    if (typeof fn !== "function")
      throw new Error("normalize fn should be function");
    return { encode: (from2) => from2, decode: (to) => fn(to) };
  }
  function convertRadix(data2, from2, to) {
    if (from2 < 2)
      throw new Error(`convertRadix: wrong from=${from2}, base cannot be less than 2`);
    if (to < 2)
      throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);
    if (!Array.isArray(data2))
      throw new Error("convertRadix: data should be array");
    if (!data2.length)
      return [];
    let pos = 0;
    const res = [];
    const digits = Array.from(data2);
    digits.forEach((d) => {
      assertNumber(d);
      if (d < 0 || d >= from2)
        throw new Error(`Wrong integer: ${d}`);
    });
    while (true) {
      let carry = 0;
      let done = true;
      for (let i2 = pos; i2 < digits.length; i2++) {
        const digit = digits[i2];
        const digitBase = from2 * carry + digit;
        if (!Number.isSafeInteger(digitBase) || from2 * carry / from2 !== carry || digitBase - digit !== from2 * carry) {
          throw new Error("convertRadix: carry overflow");
        }
        carry = digitBase % to;
        digits[i2] = Math.floor(digitBase / to);
        if (!Number.isSafeInteger(digits[i2]) || digits[i2] * to + carry !== digitBase)
          throw new Error("convertRadix: carry overflow");
        if (!done)
          continue;
        else if (!digits[i2])
          pos = i2;
        else
          done = false;
      }
      res.push(carry);
      if (done)
        break;
    }
    for (let i2 = 0; i2 < data2.length - 1 && data2[i2] === 0; i2++)
      res.push(0);
    return res.reverse();
  }
  const gcd = (a, b) => !b ? a : gcd(b, a % b);
  const radix2carry = (from2, to) => from2 + (to - gcd(from2, to));
  function convertRadix2(data2, from2, to, padding2) {
    if (!Array.isArray(data2))
      throw new Error("convertRadix2: data should be array");
    if (from2 <= 0 || from2 > 32)
      throw new Error(`convertRadix2: wrong from=${from2}`);
    if (to <= 0 || to > 32)
      throw new Error(`convertRadix2: wrong to=${to}`);
    if (radix2carry(from2, to) > 32) {
      throw new Error(`convertRadix2: carry overflow from=${from2} to=${to} carryBits=${radix2carry(from2, to)}`);
    }
    let carry = 0;
    let pos = 0;
    const mask = 2 ** to - 1;
    const res = [];
    for (const n of data2) {
      assertNumber(n);
      if (n >= 2 ** from2)
        throw new Error(`convertRadix2: invalid data word=${n} from=${from2}`);
      carry = carry << from2 | n;
      if (pos + from2 > 32)
        throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from2}`);
      pos += from2;
      for (; pos >= to; pos -= to)
        res.push((carry >> pos - to & mask) >>> 0);
      carry &= 2 ** pos - 1;
    }
    carry = carry << to - pos & mask;
    if (!padding2 && pos >= from2)
      throw new Error("Excess padding");
    if (!padding2 && carry)
      throw new Error(`Non-zero padding: ${carry}`);
    if (padding2 && pos > 0)
      res.push(carry >>> 0);
    return res;
  }
  function radix(num) {
    assertNumber(num);
    return {
      encode: (bytes2) => {
        if (!(bytes2 instanceof Uint8Array))
          throw new Error("radix.encode input should be Uint8Array");
        return convertRadix(Array.from(bytes2), 2 ** 8, num);
      },
      decode: (digits) => {
        if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
          throw new Error("radix.decode input should be array of strings");
        return Uint8Array.from(convertRadix(digits, num, 2 ** 8));
      }
    };
  }
  function radix2(bits2, revPadding = false) {
    assertNumber(bits2);
    if (bits2 <= 0 || bits2 > 32)
      throw new Error("radix2: bits should be in (0..32]");
    if (radix2carry(8, bits2) > 32 || radix2carry(bits2, 8) > 32)
      throw new Error("radix2: carry overflow");
    return {
      encode: (bytes2) => {
        if (!(bytes2 instanceof Uint8Array))
          throw new Error("radix2.encode input should be Uint8Array");
        return convertRadix2(Array.from(bytes2), 8, bits2, !revPadding);
      },
      decode: (digits) => {
        if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
          throw new Error("radix2.decode input should be array of strings");
        return Uint8Array.from(convertRadix2(digits, bits2, 8, revPadding));
      }
    };
  }
  function unsafeWrapper(fn) {
    if (typeof fn !== "function")
      throw new Error("unsafeWrapper fn should be function");
    return function(...args) {
      try {
        return fn.apply(null, args);
      } catch (e) {
      }
    };
  }
  const base16 = chain$1(radix2(4), alphabet("0123456789ABCDEF"), join(""));
  const base32 = chain$1(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), padding$1(5), join(""));
  chain$1(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), padding$1(5), join(""));
  chain$1(radix2(5), alphabet("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), join(""), normalize$1((s) => s.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
  const base64 = chain$1(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), padding$1(6), join(""));
  const base64url = chain$1(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), padding$1(6), join(""));
  const genBase58 = (abc) => chain$1(radix(58), alphabet(abc), join(""));
  const base58 = genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
  genBase58("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
  genBase58("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
  const XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];
  const base58xmr = {
    encode(data2) {
      let res = "";
      for (let i2 = 0; i2 < data2.length; i2 += 8) {
        const block = data2.subarray(i2, i2 + 8);
        res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], "1");
      }
      return res;
    },
    decode(str) {
      let res = [];
      for (let i2 = 0; i2 < str.length; i2 += 11) {
        const slice2 = str.slice(i2, i2 + 11);
        const blockLen = XMR_BLOCK_LEN.indexOf(slice2.length);
        const block = base58.decode(slice2);
        for (let j = 0; j < block.length - blockLen; j++) {
          if (block[j] !== 0)
            throw new Error("base58xmr: wrong padding");
        }
        res = res.concat(Array.from(block.slice(block.length - blockLen)));
      }
      return Uint8Array.from(res);
    }
  };
  const BECH_ALPHABET = chain$1(alphabet("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), join(""));
  const POLYMOD_GENERATORS = [996825010, 642813549, 513874426, 1027748829, 705979059];
  function bech32Polymod(pre) {
    const b = pre >> 25;
    let chk = (pre & 33554431) << 5;
    for (let i2 = 0; i2 < POLYMOD_GENERATORS.length; i2++) {
      if ((b >> i2 & 1) === 1)
        chk ^= POLYMOD_GENERATORS[i2];
    }
    return chk;
  }
  function bechChecksum(prefix2, words, encodingConst = 1) {
    const len = prefix2.length;
    let chk = 1;
    for (let i2 = 0; i2 < len; i2++) {
      const c = prefix2.charCodeAt(i2);
      if (c < 33 || c > 126)
        throw new Error(`Invalid prefix (${prefix2})`);
      chk = bech32Polymod(chk) ^ c >> 5;
    }
    chk = bech32Polymod(chk);
    for (let i2 = 0; i2 < len; i2++)
      chk = bech32Polymod(chk) ^ prefix2.charCodeAt(i2) & 31;
    for (let v of words)
      chk = bech32Polymod(chk) ^ v;
    for (let i2 = 0; i2 < 6; i2++)
      chk = bech32Polymod(chk);
    chk ^= encodingConst;
    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));
  }
  function genBech32(encoding) {
    const ENCODING_CONST = encoding === "bech32" ? 1 : 734539939;
    const _words = radix2(5);
    const fromWords = _words.decode;
    const toWords = _words.encode;
    const fromWordsUnsafe = unsafeWrapper(fromWords);
    function encode2(prefix2, words, limit = 90) {
      if (typeof prefix2 !== "string")
        throw new Error(`bech32.encode prefix should be string, not ${typeof prefix2}`);
      if (!Array.isArray(words) || words.length && typeof words[0] !== "number")
        throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);
      const actualLength = prefix2.length + 7 + words.length;
      if (limit !== false && actualLength > limit)
        throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);
      prefix2 = prefix2.toLowerCase();
      return `${prefix2}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix2, words, ENCODING_CONST)}`;
    }
    function decode2(str, limit = 90) {
      if (typeof str !== "string")
        throw new Error(`bech32.decode input should be string, not ${typeof str}`);
      if (str.length < 8 || limit !== false && str.length > limit)
        throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);
      const lowered = str.toLowerCase();
      if (str !== lowered && str !== str.toUpperCase())
        throw new Error(`String must be lowercase or uppercase`);
      str = lowered;
      const sepIndex = str.lastIndexOf("1");
      if (sepIndex === 0 || sepIndex === -1)
        throw new Error(`Letter "1" must be present between prefix and data only`);
      const prefix2 = str.slice(0, sepIndex);
      const _words2 = str.slice(sepIndex + 1);
      if (_words2.length < 6)
        throw new Error("Data must be at least 6 characters long");
      const words = BECH_ALPHABET.decode(_words2).slice(0, -6);
      const sum = bechChecksum(prefix2, words, ENCODING_CONST);
      if (!_words2.endsWith(sum))
        throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
      return { prefix: prefix2, words };
    }
    const decodeUnsafe = unsafeWrapper(decode2);
    function decodeToBytes(str) {
      const { prefix: prefix2, words } = decode2(str, false);
      return { prefix: prefix2, words, bytes: fromWords(words) };
    }
    return { encode: encode2, decode: decode2, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };
  }
  genBech32("bech32");
  genBech32("bech32m");
  const utf8 = {
    encode: (data2) => new TextDecoder().decode(data2),
    decode: (str) => new TextEncoder().encode(str)
  };
  const hex = chain$1(radix2(4), alphabet("0123456789abcdef"), join(""), normalize$1((s) => {
    if (typeof s !== "string" || s.length % 2)
      throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);
    return s.toLowerCase();
  }));
  const CODERS = {
    utf8,
    hex,
    base16,
    base32,
    base64,
    base64url,
    base58,
    base58xmr
  };
  `Invalid encoding type. Available types: ${Object.keys(CODERS).join(", ")}`;
  function createDecode({ coder, ipfs }, validate) {
    return (value, ipfsCompat) => {
      validate(value, ipfsCompat);
      return coder.decode(ipfs && ipfsCompat ? value.substring(1) : value);
    };
  }
  function createEncode({ coder, ipfs }) {
    return (value, ipfsCompat) => {
      const out = coder.encode(u8aToU8a(value));
      return ipfs && ipfsCompat ? `${ipfs}${out}` : out;
    };
  }
  function createValidate({ chars: chars2, ipfs, type, withPadding }) {
    return (value, ipfsCompat) => {
      if (typeof value !== "string") {
        throw new Error(`Expected ${type} string input`);
      } else if (ipfs && ipfsCompat && value[0] !== ipfs) {
        throw new Error(`Expected ipfs-compatible ${type} to start with '${ipfs}'`);
      }
      for (let i2 = ipfsCompat ? 1 : 0, count = value.length; i2 < count; i2++) {
        if (chars2.includes(value[i2]))
          ;
        else if (withPadding && value[i2] === "=") {
          if (i2 === count - 1)
            ;
          else if (value[i2 + 1] === "=")
            ;
          else {
            throw new Error(`Invalid ${type} padding sequence "${value[i2]}${value[i2 + 1]}" at index ${i2}`);
          }
        } else {
          throw new Error(`Invalid ${type} character "${value[i2]}" (0x${value.charCodeAt(i2).toString(16)}) at index ${i2}`);
        }
      }
      return true;
    };
  }
  const config$3 = {
    chars: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
    coder: base58,
    ipfs: "z",
    type: "base58"
  };
  const base58Validate = /* @__PURE__ */ createValidate(config$3);
  const base58Decode = /* @__PURE__ */ createDecode(config$3, base58Validate);
  const base58Encode = /* @__PURE__ */ createEncode(config$3);
  function number(n) {
    if (!Number.isSafeInteger(n) || n < 0)
      throw new Error(`Wrong positive integer: ${n}`);
  }
  function bool$1(b) {
    if (typeof b !== "boolean")
      throw new Error(`Expected boolean, not ${b}`);
  }
  function bytes(b, ...lengths) {
    if (!(b instanceof Uint8Array))
      throw new Error("Expected Uint8Array");
    if (lengths.length > 0 && !lengths.includes(b.length))
      throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
  }
  function hash$1(hash2) {
    if (typeof hash2 !== "function" || typeof hash2.create !== "function")
      throw new Error("Hash should be wrapped by utils.wrapConstructor");
    number(hash2.outputLen);
    number(hash2.blockLen);
  }
  function exists(instance2, checkFinished = true) {
    if (instance2.destroyed)
      throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance2.finished)
      throw new Error("Hash#digest() has already been called");
  }
  function output(out, instance2) {
    bytes(out);
    const min = instance2.outputLen;
    if (out.length < min) {
      throw new Error(`digestInto() expects output buffer of length at least ${min}`);
    }
  }
  const assert = {
    number,
    bool: bool$1,
    bytes,
    hash: hash$1,
    exists,
    output
  };
  const crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
  /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  const u8a$1 = (a) => a instanceof Uint8Array;
  const u32$1 = (arr2) => new Uint32Array(arr2.buffer, arr2.byteOffset, Math.floor(arr2.byteLength / 4));
  const createView = (arr2) => new DataView(arr2.buffer, arr2.byteOffset, arr2.byteLength);
  const rotr = (word, shift) => word << 32 - shift | word >>> shift;
  const isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
  if (!isLE)
    throw new Error("Non little-endian hardware is not supported");
  Array.from({ length: 256 }, (v, i2) => i2.toString(16).padStart(2, "0"));
  function utf8ToBytes$1(str) {
    if (typeof str !== "string")
      throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
    return new Uint8Array(new TextEncoder().encode(str));
  }
  function toBytes(data2) {
    if (typeof data2 === "string")
      data2 = utf8ToBytes$1(data2);
    if (!u8a$1(data2))
      throw new Error(`expected Uint8Array, got ${typeof data2}`);
    return data2;
  }
  function concatBytes$1(...arrays) {
    const r2 = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
    let pad = 0;
    arrays.forEach((a) => {
      if (!u8a$1(a))
        throw new Error("Uint8Array expected");
      r2.set(a, pad);
      pad += a.length;
    });
    return r2;
  }
  class Hash {
    // Safe version that clones internal state
    clone() {
      return this._cloneInto();
    }
  }
  const isPlainObject$2 = (obj) => Object.prototype.toString.call(obj) === "[object Object]" && obj.constructor === Object;
  function checkOpts(defaults2, opts) {
    if (opts !== void 0 && (typeof opts !== "object" || !isPlainObject$2(opts)))
      throw new Error("Options should be object or undefined");
    const merged = Object.assign(defaults2, opts);
    return merged;
  }
  function wrapConstructor(hashCons) {
    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
    const tmp = hashCons();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = () => hashCons();
    return hashC;
  }
  function wrapConstructorWithOpts(hashCons) {
    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts) => hashCons(opts);
    return hashC;
  }
  function wrapXOFConstructorWithOpts(hashCons) {
    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts) => hashCons(opts);
    return hashC;
  }
  function randomBytes(bytesLength = 32) {
    if (crypto && typeof crypto.getRandomValues === "function") {
      return crypto.getRandomValues(new Uint8Array(bytesLength));
    }
    throw new Error("crypto.getRandomValues must be defined");
  }
  const SIGMA = new Uint8Array([
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    14,
    10,
    4,
    8,
    9,
    15,
    13,
    6,
    1,
    12,
    0,
    2,
    11,
    7,
    5,
    3,
    11,
    8,
    12,
    0,
    5,
    2,
    15,
    13,
    10,
    14,
    3,
    6,
    7,
    1,
    9,
    4,
    7,
    9,
    3,
    1,
    13,
    12,
    11,
    14,
    2,
    6,
    5,
    10,
    4,
    0,
    15,
    8,
    9,
    0,
    5,
    7,
    2,
    4,
    10,
    15,
    14,
    1,
    11,
    12,
    6,
    8,
    3,
    13,
    2,
    12,
    6,
    10,
    0,
    11,
    8,
    3,
    4,
    13,
    7,
    5,
    15,
    14,
    1,
    9,
    12,
    5,
    1,
    15,
    14,
    13,
    4,
    10,
    0,
    7,
    6,
    3,
    9,
    2,
    8,
    11,
    13,
    11,
    7,
    14,
    12,
    1,
    3,
    9,
    5,
    0,
    15,
    4,
    8,
    6,
    2,
    10,
    6,
    15,
    14,
    9,
    11,
    3,
    0,
    8,
    12,
    2,
    13,
    7,
    1,
    4,
    10,
    5,
    10,
    2,
    8,
    4,
    7,
    6,
    1,
    5,
    15,
    11,
    9,
    14,
    3,
    12,
    13,
    0,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    14,
    10,
    4,
    8,
    9,
    15,
    13,
    6,
    1,
    12,
    0,
    2,
    11,
    7,
    5,
    3
  ]);
  class BLAKE2 extends Hash {
    constructor(blockLen, outputLen, opts = {}, keyLen, saltLen, persLen) {
      super();
      this.blockLen = blockLen;
      this.outputLen = outputLen;
      this.length = 0;
      this.pos = 0;
      this.finished = false;
      this.destroyed = false;
      assert.number(blockLen);
      assert.number(outputLen);
      assert.number(keyLen);
      if (outputLen < 0 || outputLen > keyLen)
        throw new Error("outputLen bigger than keyLen");
      if (opts.key !== void 0 && (opts.key.length < 1 || opts.key.length > keyLen))
        throw new Error(`key must be up 1..${keyLen} byte long or undefined`);
      if (opts.salt !== void 0 && opts.salt.length !== saltLen)
        throw new Error(`salt must be ${saltLen} byte long or undefined`);
      if (opts.personalization !== void 0 && opts.personalization.length !== persLen)
        throw new Error(`personalization must be ${persLen} byte long or undefined`);
      this.buffer32 = u32$1(this.buffer = new Uint8Array(blockLen));
    }
    update(data2) {
      assert.exists(this);
      const { blockLen, buffer, buffer32 } = this;
      data2 = toBytes(data2);
      const len = data2.length;
      const offset = data2.byteOffset;
      const buf = data2.buffer;
      for (let pos = 0; pos < len; ) {
        if (this.pos === blockLen) {
          this.compress(buffer32, 0, false);
          this.pos = 0;
        }
        const take2 = Math.min(blockLen - this.pos, len - pos);
        const dataOffset = offset + pos;
        if (take2 === blockLen && !(dataOffset % 4) && pos + take2 < len) {
          const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));
          for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {
            this.length += blockLen;
            this.compress(data32, pos32, false);
          }
          continue;
        }
        buffer.set(data2.subarray(pos, pos + take2), this.pos);
        this.pos += take2;
        this.length += take2;
        pos += take2;
      }
      return this;
    }
    digestInto(out) {
      assert.exists(this);
      assert.output(out, this);
      const { pos, buffer32 } = this;
      this.finished = true;
      this.buffer.subarray(pos).fill(0);
      this.compress(buffer32, 0, true);
      const out32 = u32$1(out);
      this.get().forEach((v, i2) => out32[i2] = v);
    }
    digest() {
      const { buffer, outputLen } = this;
      this.digestInto(buffer);
      const res = buffer.slice(0, outputLen);
      this.destroy();
      return res;
    }
    _cloneInto(to) {
      const { buffer, length: length2, finished, destroyed, outputLen, pos } = this;
      to || (to = new this.constructor({ dkLen: outputLen }));
      to.set(...this.get());
      to.length = length2;
      to.finished = finished;
      to.destroyed = destroyed;
      to.outputLen = outputLen;
      to.buffer.set(buffer);
      to.pos = pos;
      return to;
    }
  }
  const U32_MASK64 = BigInt(2 ** 32 - 1);
  const _32n$1 = BigInt(32);
  function fromBig(n, le = false) {
    if (le)
      return { h: Number(n & U32_MASK64), l: Number(n >> _32n$1 & U32_MASK64) };
    return { h: Number(n >> _32n$1 & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
  }
  function split(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for (let i2 = 0; i2 < lst.length; i2++) {
      const { h, l: l2 } = fromBig(lst[i2], le);
      [Ah[i2], Al[i2]] = [h, l2];
    }
    return [Ah, Al];
  }
  const toBig = (h, l2) => BigInt(h >>> 0) << _32n$1 | BigInt(l2 >>> 0);
  const shrSH = (h, l2, s) => h >>> s;
  const shrSL = (h, l2, s) => h << 32 - s | l2 >>> s;
  const rotrSH = (h, l2, s) => h >>> s | l2 << 32 - s;
  const rotrSL = (h, l2, s) => h << 32 - s | l2 >>> s;
  const rotrBH = (h, l2, s) => h << 64 - s | l2 >>> s - 32;
  const rotrBL = (h, l2, s) => h >>> s - 32 | l2 << 64 - s;
  const rotr32H = (h, l2) => l2;
  const rotr32L = (h, l2) => h;
  const rotlSH = (h, l2, s) => h << s | l2 >>> 32 - s;
  const rotlSL = (h, l2, s) => l2 << s | h >>> 32 - s;
  const rotlBH = (h, l2, s) => l2 << s - 32 | h >>> 64 - s;
  const rotlBL = (h, l2, s) => h << s - 32 | l2 >>> 64 - s;
  function add(Ah, Al, Bh, Bl) {
    const l2 = (Al >>> 0) + (Bl >>> 0);
    return { h: Ah + Bh + (l2 / 2 ** 32 | 0) | 0, l: l2 | 0 };
  }
  const add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
  const add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
  const add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
  const add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
  const add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
  const add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
  const u64$1 = {
    fromBig,
    split,
    toBig,
    shrSH,
    shrSL,
    rotrSH,
    rotrSL,
    rotrBH,
    rotrBL,
    rotr32H,
    rotr32L,
    rotlSH,
    rotlSL,
    rotlBH,
    rotlBL,
    add,
    add3L,
    add3H,
    add4L,
    add4H,
    add5H,
    add5L
  };
  const IV$1 = new Uint32Array([
    4089235720,
    1779033703,
    2227873595,
    3144134277,
    4271175723,
    1013904242,
    1595750129,
    2773480762,
    2917565137,
    1359893119,
    725511199,
    2600822924,
    4215389547,
    528734635,
    327033209,
    1541459225
  ]);
  const BUF = new Uint32Array(32);
  function G1(a, b, c, d, msg, x) {
    const Xl = msg[x], Xh = msg[x + 1];
    let Al = BUF[2 * a], Ah = BUF[2 * a + 1];
    let Bl = BUF[2 * b], Bh = BUF[2 * b + 1];
    let Cl = BUF[2 * c], Ch = BUF[2 * c + 1];
    let Dl = BUF[2 * d], Dh = BUF[2 * d + 1];
    let ll = u64$1.add3L(Al, Bl, Xl);
    Ah = u64$1.add3H(ll, Ah, Bh, Xh);
    Al = ll | 0;
    ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
    ({ Dh, Dl } = { Dh: u64$1.rotr32H(Dh, Dl), Dl: u64$1.rotr32L(Dh, Dl) });
    ({ h: Ch, l: Cl } = u64$1.add(Ch, Cl, Dh, Dl));
    ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
    ({ Bh, Bl } = { Bh: u64$1.rotrSH(Bh, Bl, 24), Bl: u64$1.rotrSL(Bh, Bl, 24) });
    BUF[2 * a] = Al, BUF[2 * a + 1] = Ah;
    BUF[2 * b] = Bl, BUF[2 * b + 1] = Bh;
    BUF[2 * c] = Cl, BUF[2 * c + 1] = Ch;
    BUF[2 * d] = Dl, BUF[2 * d + 1] = Dh;
  }
  function G2(a, b, c, d, msg, x) {
    const Xl = msg[x], Xh = msg[x + 1];
    let Al = BUF[2 * a], Ah = BUF[2 * a + 1];
    let Bl = BUF[2 * b], Bh = BUF[2 * b + 1];
    let Cl = BUF[2 * c], Ch = BUF[2 * c + 1];
    let Dl = BUF[2 * d], Dh = BUF[2 * d + 1];
    let ll = u64$1.add3L(Al, Bl, Xl);
    Ah = u64$1.add3H(ll, Ah, Bh, Xh);
    Al = ll | 0;
    ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
    ({ Dh, Dl } = { Dh: u64$1.rotrSH(Dh, Dl, 16), Dl: u64$1.rotrSL(Dh, Dl, 16) });
    ({ h: Ch, l: Cl } = u64$1.add(Ch, Cl, Dh, Dl));
    ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
    ({ Bh, Bl } = { Bh: u64$1.rotrBH(Bh, Bl, 63), Bl: u64$1.rotrBL(Bh, Bl, 63) });
    BUF[2 * a] = Al, BUF[2 * a + 1] = Ah;
    BUF[2 * b] = Bl, BUF[2 * b + 1] = Bh;
    BUF[2 * c] = Cl, BUF[2 * c + 1] = Ch;
    BUF[2 * d] = Dl, BUF[2 * d + 1] = Dh;
  }
  class BLAKE2b extends BLAKE2 {
    constructor(opts = {}) {
      super(128, opts.dkLen === void 0 ? 64 : opts.dkLen, opts, 64, 16, 16);
      this.v0l = IV$1[0] | 0;
      this.v0h = IV$1[1] | 0;
      this.v1l = IV$1[2] | 0;
      this.v1h = IV$1[3] | 0;
      this.v2l = IV$1[4] | 0;
      this.v2h = IV$1[5] | 0;
      this.v3l = IV$1[6] | 0;
      this.v3h = IV$1[7] | 0;
      this.v4l = IV$1[8] | 0;
      this.v4h = IV$1[9] | 0;
      this.v5l = IV$1[10] | 0;
      this.v5h = IV$1[11] | 0;
      this.v6l = IV$1[12] | 0;
      this.v6h = IV$1[13] | 0;
      this.v7l = IV$1[14] | 0;
      this.v7h = IV$1[15] | 0;
      const keyLength = opts.key ? opts.key.length : 0;
      this.v0l ^= this.outputLen | keyLength << 8 | 1 << 16 | 1 << 24;
      if (opts.salt) {
        const salt = u32$1(toBytes(opts.salt));
        this.v4l ^= salt[0];
        this.v4h ^= salt[1];
        this.v5l ^= salt[2];
        this.v5h ^= salt[3];
      }
      if (opts.personalization) {
        const pers = u32$1(toBytes(opts.personalization));
        this.v6l ^= pers[0];
        this.v6h ^= pers[1];
        this.v7l ^= pers[2];
        this.v7h ^= pers[3];
      }
      if (opts.key) {
        const tmp = new Uint8Array(this.blockLen);
        tmp.set(toBytes(opts.key));
        this.update(tmp);
      }
    }
    // prettier-ignore
    get() {
      let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;
      return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];
    }
    // prettier-ignore
    set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {
      this.v0l = v0l | 0;
      this.v0h = v0h | 0;
      this.v1l = v1l | 0;
      this.v1h = v1h | 0;
      this.v2l = v2l | 0;
      this.v2h = v2h | 0;
      this.v3l = v3l | 0;
      this.v3h = v3h | 0;
      this.v4l = v4l | 0;
      this.v4h = v4h | 0;
      this.v5l = v5l | 0;
      this.v5h = v5h | 0;
      this.v6l = v6l | 0;
      this.v6h = v6h | 0;
      this.v7l = v7l | 0;
      this.v7h = v7h | 0;
    }
    compress(msg, offset, isLast) {
      this.get().forEach((v, i2) => BUF[i2] = v);
      BUF.set(IV$1, 16);
      let { h, l: l2 } = u64$1.fromBig(BigInt(this.length));
      BUF[24] = IV$1[8] ^ l2;
      BUF[25] = IV$1[9] ^ h;
      if (isLast) {
        BUF[28] = ~BUF[28];
        BUF[29] = ~BUF[29];
      }
      let j = 0;
      const s = SIGMA;
      for (let i2 = 0; i2 < 12; i2++) {
        G1(0, 4, 8, 12, msg, offset + 2 * s[j++]);
        G2(0, 4, 8, 12, msg, offset + 2 * s[j++]);
        G1(1, 5, 9, 13, msg, offset + 2 * s[j++]);
        G2(1, 5, 9, 13, msg, offset + 2 * s[j++]);
        G1(2, 6, 10, 14, msg, offset + 2 * s[j++]);
        G2(2, 6, 10, 14, msg, offset + 2 * s[j++]);
        G1(3, 7, 11, 15, msg, offset + 2 * s[j++]);
        G2(3, 7, 11, 15, msg, offset + 2 * s[j++]);
        G1(0, 5, 10, 15, msg, offset + 2 * s[j++]);
        G2(0, 5, 10, 15, msg, offset + 2 * s[j++]);
        G1(1, 6, 11, 12, msg, offset + 2 * s[j++]);
        G2(1, 6, 11, 12, msg, offset + 2 * s[j++]);
        G1(2, 7, 8, 13, msg, offset + 2 * s[j++]);
        G2(2, 7, 8, 13, msg, offset + 2 * s[j++]);
        G1(3, 4, 9, 14, msg, offset + 2 * s[j++]);
        G2(3, 4, 9, 14, msg, offset + 2 * s[j++]);
      }
      this.v0l ^= BUF[0] ^ BUF[16];
      this.v0h ^= BUF[1] ^ BUF[17];
      this.v1l ^= BUF[2] ^ BUF[18];
      this.v1h ^= BUF[3] ^ BUF[19];
      this.v2l ^= BUF[4] ^ BUF[20];
      this.v2h ^= BUF[5] ^ BUF[21];
      this.v3l ^= BUF[6] ^ BUF[22];
      this.v3h ^= BUF[7] ^ BUF[23];
      this.v4l ^= BUF[8] ^ BUF[24];
      this.v4h ^= BUF[9] ^ BUF[25];
      this.v5l ^= BUF[10] ^ BUF[26];
      this.v5h ^= BUF[11] ^ BUF[27];
      this.v6l ^= BUF[12] ^ BUF[28];
      this.v6h ^= BUF[13] ^ BUF[29];
      this.v7l ^= BUF[14] ^ BUF[30];
      this.v7h ^= BUF[15] ^ BUF[31];
      BUF.fill(0);
    }
    destroy() {
      this.destroyed = true;
      this.buffer32.fill(0);
      this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
  }
  const blake2b = wrapConstructorWithOpts((opts) => new BLAKE2b(opts));
  function createAsHex(fn) {
    return (...args) => u8aToHex(fn(...args));
  }
  function createBitHasher(bitLength, fn) {
    return (data2, onlyJs) => fn(data2, bitLength, onlyJs);
  }
  function createDualHasher(wa, js) {
    return (value, bitLength = 256, onlyJs) => {
      const u8a2 = u8aToU8a(value);
      return !hasBigInt || !onlyJs && isReady() ? wa[bitLength](u8a2) : js[bitLength](u8a2);
    };
  }
  function blake2AsU8a(data2, bitLength = 256, key, onlyJs) {
    const byteLength = Math.ceil(bitLength / 8);
    const u8a2 = u8aToU8a(data2);
    return !hasBigInt || !onlyJs && isReady() ? blake2b$1(u8a2, u8aToU8a(key), byteLength) : key ? blake2b(u8a2, { dkLen: byteLength, key }) : blake2b(u8a2, { dkLen: byteLength });
  }
  const blake2AsHex = /* @__PURE__ */ createAsHex(blake2AsU8a);
  const SS58_PREFIX = stringToU8a("SS58PRE");
  function sshash(key) {
    return blake2AsU8a(u8aConcat(SS58_PREFIX, key), 512);
  }
  function checkAddressChecksum(decoded) {
    const ss58Length = decoded[0] & 64 ? 2 : 1;
    const ss58Decoded = ss58Length === 1 ? decoded[0] : (decoded[0] & 63) << 2 | decoded[1] >> 6 | (decoded[1] & 63) << 8;
    const isPublicKey = [34 + ss58Length, 35 + ss58Length].includes(decoded.length);
    const length2 = decoded.length - (isPublicKey ? 2 : 1);
    const hash2 = sshash(decoded.subarray(0, length2));
    const isValid2 = (decoded[0] & 128) === 0 && ![46, 47].includes(decoded[0]) && (isPublicKey ? decoded[decoded.length - 2] === hash2[0] && decoded[decoded.length - 1] === hash2[1] : decoded[decoded.length - 1] === hash2[0]);
    return [isValid2, length2, ss58Length, ss58Decoded];
  }
  const knownSubstrate = [
    {
      "prefix": 0,
      "network": "polkadot",
      "displayName": "Polkadot Relay Chain",
      "symbols": [
        "DOT"
      ],
      "decimals": [
        10
      ],
      "standardAccount": "*25519",
      "website": "https://polkadot.network"
    },
    {
      "prefix": 1,
      "network": "BareSr25519",
      "displayName": "Bare 32-bit Schnorr/Ristretto (S/R 25519) public key.",
      "symbols": [],
      "decimals": [],
      "standardAccount": "Sr25519",
      "website": null
    },
    {
      "prefix": 2,
      "network": "kusama",
      "displayName": "Kusama Relay Chain",
      "symbols": [
        "KSM"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://kusama.network"
    },
    {
      "prefix": 3,
      "network": "BareEd25519",
      "displayName": "Bare 32-bit Ed25519 public key.",
      "symbols": [],
      "decimals": [],
      "standardAccount": "Ed25519",
      "website": null
    },
    {
      "prefix": 4,
      "network": "katalchain",
      "displayName": "Katal Chain",
      "symbols": [],
      "decimals": [],
      "standardAccount": "*25519",
      "website": null
    },
    {
      "prefix": 5,
      "network": "astar",
      "displayName": "Astar Network",
      "symbols": [
        "ASTR"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://astar.network"
    },
    {
      "prefix": 6,
      "network": "bifrost",
      "displayName": "Bifrost",
      "symbols": [
        "BNC"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://bifrost.finance/"
    },
    {
      "prefix": 7,
      "network": "edgeware",
      "displayName": "Edgeware",
      "symbols": [
        "EDG"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://edgewa.re"
    },
    {
      "prefix": 8,
      "network": "karura",
      "displayName": "Karura",
      "symbols": [
        "KAR"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://karura.network/"
    },
    {
      "prefix": 9,
      "network": "reynolds",
      "displayName": "Laminar Reynolds Canary",
      "symbols": [
        "REY"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "http://laminar.network/"
    },
    {
      "prefix": 10,
      "network": "acala",
      "displayName": "Acala",
      "symbols": [
        "ACA"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://acala.network/"
    },
    {
      "prefix": 11,
      "network": "laminar",
      "displayName": "Laminar",
      "symbols": [
        "LAMI"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "http://laminar.network/"
    },
    {
      "prefix": 12,
      "network": "polymesh",
      "displayName": "Polymesh",
      "symbols": [
        "POLYX"
      ],
      "decimals": [
        6
      ],
      "standardAccount": "*25519",
      "website": "https://polymath.network/"
    },
    {
      "prefix": 13,
      "network": "integritee",
      "displayName": "Integritee",
      "symbols": [
        "TEER"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://integritee.network"
    },
    {
      "prefix": 14,
      "network": "totem",
      "displayName": "Totem",
      "symbols": [
        "TOTEM"
      ],
      "decimals": [
        0
      ],
      "standardAccount": "*25519",
      "website": "https://totemaccounting.com"
    },
    {
      "prefix": 15,
      "network": "synesthesia",
      "displayName": "Synesthesia",
      "symbols": [
        "SYN"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://synesthesia.network/"
    },
    {
      "prefix": 16,
      "network": "kulupu",
      "displayName": "Kulupu",
      "symbols": [
        "KLP"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://kulupu.network/"
    },
    {
      "prefix": 17,
      "network": "dark",
      "displayName": "Dark Mainnet",
      "symbols": [],
      "decimals": [],
      "standardAccount": "*25519",
      "website": null
    },
    {
      "prefix": 18,
      "network": "darwinia",
      "displayName": "Darwinia Network",
      "symbols": [
        "RING"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "secp256k1",
      "website": "https://darwinia.network"
    },
    {
      "prefix": 19,
      "network": "watr",
      "displayName": "Watr Protocol",
      "symbols": [
        "WATR"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://www.watr.org"
    },
    {
      "prefix": 20,
      "network": "stafi",
      "displayName": "Stafi",
      "symbols": [
        "FIS"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://stafi.io"
    },
    {
      "prefix": 21,
      "network": "karmachain",
      "displayName": "Karmacoin",
      "symbols": [
        "KCOIN"
      ],
      "decimals": [
        6
      ],
      "standardAccount": "*25519",
      "website": "https://karmaco.in"
    },
    {
      "prefix": 22,
      "network": "dock-pos-mainnet",
      "displayName": "Dock Mainnet",
      "symbols": [
        "DCK"
      ],
      "decimals": [
        6
      ],
      "standardAccount": "*25519",
      "website": "https://dock.io"
    },
    {
      "prefix": 23,
      "network": "shift",
      "displayName": "ShiftNrg",
      "symbols": [],
      "decimals": [],
      "standardAccount": "*25519",
      "website": null
    },
    {
      "prefix": 24,
      "network": "zero",
      "displayName": "ZERO",
      "symbols": [
        "ZERO"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://zero.io"
    },
    {
      "prefix": 25,
      "network": "zero-alphaville",
      "displayName": "ZERO Alphaville",
      "symbols": [
        "ZERO"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://zero.io"
    },
    {
      "prefix": 26,
      "network": "jupiter",
      "displayName": "Jupiter",
      "symbols": [
        "jDOT"
      ],
      "decimals": [
        10
      ],
      "standardAccount": "*25519",
      "website": "https://jupiter.patract.io"
    },
    {
      "prefix": 27,
      "network": "kabocha",
      "displayName": "Kabocha",
      "symbols": [
        "KAB"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://kabocha.network"
    },
    {
      "prefix": 28,
      "network": "subsocial",
      "displayName": "Subsocial",
      "symbols": [],
      "decimals": [],
      "standardAccount": "*25519",
      "website": null
    },
    {
      "prefix": 29,
      "network": "cord",
      "displayName": "CORD Network",
      "symbols": [
        "DHI",
        "WAY"
      ],
      "decimals": [
        12,
        12
      ],
      "standardAccount": "*25519",
      "website": "https://cord.network/"
    },
    {
      "prefix": 30,
      "network": "phala",
      "displayName": "Phala Network",
      "symbols": [
        "PHA"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://phala.network"
    },
    {
      "prefix": 31,
      "network": "litentry",
      "displayName": "Litentry Network",
      "symbols": [
        "LIT"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://litentry.com/"
    },
    {
      "prefix": 32,
      "network": "robonomics",
      "displayName": "Robonomics",
      "symbols": [
        "XRT"
      ],
      "decimals": [
        9
      ],
      "standardAccount": "*25519",
      "website": "https://robonomics.network"
    },
    {
      "prefix": 33,
      "network": "datahighway",
      "displayName": "DataHighway",
      "symbols": [],
      "decimals": [],
      "standardAccount": "*25519",
      "website": null
    },
    {
      "prefix": 34,
      "network": "ares",
      "displayName": "Ares Protocol",
      "symbols": [
        "ARES"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://www.aresprotocol.com/"
    },
    {
      "prefix": 35,
      "network": "vln",
      "displayName": "Valiu Liquidity Network",
      "symbols": [
        "USDv"
      ],
      "decimals": [
        15
      ],
      "standardAccount": "*25519",
      "website": "https://valiu.com/"
    },
    {
      "prefix": 36,
      "network": "centrifuge",
      "displayName": "Centrifuge Chain",
      "symbols": [
        "CFG"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://centrifuge.io/"
    },
    {
      "prefix": 37,
      "network": "nodle",
      "displayName": "Nodle Chain",
      "symbols": [
        "NODL"
      ],
      "decimals": [
        11
      ],
      "standardAccount": "*25519",
      "website": "https://nodle.io/"
    },
    {
      "prefix": 38,
      "network": "kilt",
      "displayName": "KILT Spiritnet",
      "symbols": [
        "KILT"
      ],
      "decimals": [
        15
      ],
      "standardAccount": "*25519",
      "website": "https://kilt.io/"
    },
    {
      "prefix": 39,
      "network": "mathchain",
      "displayName": "MathChain mainnet",
      "symbols": [
        "MATH"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://mathwallet.org"
    },
    {
      "prefix": 40,
      "network": "mathchain-testnet",
      "displayName": "MathChain testnet",
      "symbols": [
        "MATH"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://mathwallet.org"
    },
    {
      "prefix": 41,
      "network": "poli",
      "displayName": "Polimec Chain",
      "symbols": [],
      "decimals": [],
      "standardAccount": "*25519",
      "website": "https://polimec.io/"
    },
    {
      "prefix": 42,
      "network": "substrate",
      "displayName": "Substrate",
      "symbols": [],
      "decimals": [],
      "standardAccount": "*25519",
      "website": "https://substrate.io/"
    },
    {
      "prefix": 43,
      "network": "BareSecp256k1",
      "displayName": "Bare 32-bit ECDSA SECP-256k1 public key.",
      "symbols": [],
      "decimals": [],
      "standardAccount": "secp256k1",
      "website": null
    },
    {
      "prefix": 44,
      "network": "chainx",
      "displayName": "ChainX",
      "symbols": [
        "PCX"
      ],
      "decimals": [
        8
      ],
      "standardAccount": "*25519",
      "website": "https://chainx.org/"
    },
    {
      "prefix": 45,
      "network": "uniarts",
      "displayName": "UniArts Network",
      "symbols": [
        "UART",
        "UINK"
      ],
      "decimals": [
        12,
        12
      ],
      "standardAccount": "*25519",
      "website": "https://uniarts.me"
    },
    {
      "prefix": 46,
      "network": "reserved46",
      "displayName": "This prefix is reserved.",
      "symbols": [],
      "decimals": [],
      "standardAccount": null,
      "website": null
    },
    {
      "prefix": 47,
      "network": "reserved47",
      "displayName": "This prefix is reserved.",
      "symbols": [],
      "decimals": [],
      "standardAccount": null,
      "website": null
    },
    {
      "prefix": 48,
      "network": "neatcoin",
      "displayName": "Neatcoin Mainnet",
      "symbols": [
        "NEAT"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://neatcoin.org"
    },
    {
      "prefix": 49,
      "network": "picasso",
      "displayName": "Picasso",
      "symbols": [
        "PICA"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://picasso.composable.finance"
    },
    {
      "prefix": 50,
      "network": "composable",
      "displayName": "Composable Finance",
      "symbols": [
        "LAYR"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://composable.finance"
    },
    {
      "prefix": 51,
      "network": "oak",
      "displayName": "OAK Network",
      "symbols": [
        "OAK",
        "TUR"
      ],
      "decimals": [
        10,
        10
      ],
      "standardAccount": "*25519",
      "website": "https://oak.tech"
    },
    {
      "prefix": 52,
      "network": "KICO",
      "displayName": "KICO",
      "symbols": [
        "KICO"
      ],
      "decimals": [
        14
      ],
      "standardAccount": "*25519",
      "website": "https://dico.io"
    },
    {
      "prefix": 53,
      "network": "DICO",
      "displayName": "DICO",
      "symbols": [
        "DICO"
      ],
      "decimals": [
        14
      ],
      "standardAccount": "*25519",
      "website": "https://dico.io"
    },
    {
      "prefix": 54,
      "network": "cere",
      "displayName": "Cere Network",
      "symbols": [
        "CERE"
      ],
      "decimals": [
        10
      ],
      "standardAccount": "*25519",
      "website": "https://cere.network"
    },
    {
      "prefix": 55,
      "network": "xxnetwork",
      "displayName": "xx network",
      "symbols": [
        "XX"
      ],
      "decimals": [
        9
      ],
      "standardAccount": "*25519",
      "website": "https://xx.network"
    },
    {
      "prefix": 56,
      "network": "pendulum",
      "displayName": "Pendulum chain",
      "symbols": [
        "PEN"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://pendulumchain.org/"
    },
    {
      "prefix": 57,
      "network": "amplitude",
      "displayName": "Amplitude chain",
      "symbols": [
        "AMPE"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://pendulumchain.org/"
    },
    {
      "prefix": 63,
      "network": "hydradx",
      "displayName": "HydraDX",
      "symbols": [
        "HDX"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://hydradx.io"
    },
    {
      "prefix": 64,
      "network": "ewx",
      "displayName": "Energy Web X",
      "symbols": [
        "EWT"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://www.energyweb.org"
    },
    {
      "prefix": 65,
      "network": "aventus",
      "displayName": "Aventus Mainnet",
      "symbols": [
        "AVT"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://aventus.io"
    },
    {
      "prefix": 66,
      "network": "crust",
      "displayName": "Crust Network",
      "symbols": [
        "CRU"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://crust.network"
    },
    {
      "prefix": 67,
      "network": "genshiro",
      "displayName": "Genshiro Network",
      "symbols": [
        "GENS",
        "EQD",
        "LPT0"
      ],
      "decimals": [
        9,
        9,
        9
      ],
      "standardAccount": "*25519",
      "website": "https://genshiro.equilibrium.io"
    },
    {
      "prefix": 68,
      "network": "equilibrium",
      "displayName": "Equilibrium Network",
      "symbols": [
        "EQ"
      ],
      "decimals": [
        9
      ],
      "standardAccount": "*25519",
      "website": "https://equilibrium.io"
    },
    {
      "prefix": 69,
      "network": "sora",
      "displayName": "SORA Network",
      "symbols": [
        "XOR"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://sora.org"
    },
    {
      "prefix": 71,
      "network": "p3d",
      "displayName": "3DP network",
      "symbols": [
        "P3D"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://3dpass.org"
    },
    {
      "prefix": 72,
      "network": "p3dt",
      "displayName": "3DP test network",
      "symbols": [
        "P3Dt"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://3dpass.org"
    },
    {
      "prefix": 73,
      "network": "zeitgeist",
      "displayName": "Zeitgeist",
      "symbols": [
        "ZTG"
      ],
      "decimals": [
        10
      ],
      "standardAccount": "*25519",
      "website": "https://zeitgeist.pm"
    },
    {
      "prefix": 77,
      "network": "manta",
      "displayName": "Manta network",
      "symbols": [
        "MANTA"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://manta.network"
    },
    {
      "prefix": 78,
      "network": "calamari",
      "displayName": "Calamari: Manta Canary Network",
      "symbols": [
        "KMA"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://manta.network"
    },
    {
      "prefix": 81,
      "network": "sora_dot_para",
      "displayName": "SORA Polkadot Parachain",
      "symbols": [
        "XOR"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://sora.org"
    },
    {
      "prefix": 88,
      "network": "polkadex",
      "displayName": "Polkadex Mainnet",
      "symbols": [
        "PDEX"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://polkadex.trade"
    },
    {
      "prefix": 89,
      "network": "polkadexparachain",
      "displayName": "Polkadex Parachain",
      "symbols": [
        "PDEX"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://polkadex.trade"
    },
    {
      "prefix": 90,
      "network": "frequency",
      "displayName": "Frequency",
      "symbols": [
        "FRQCY"
      ],
      "decimals": [
        8
      ],
      "standardAccount": "*25519",
      "website": "https://www.frequency.xyz"
    },
    {
      "prefix": 92,
      "network": "anmol",
      "displayName": "Anmol Network",
      "symbols": [
        "ANML"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://anmol.network/"
    },
    {
      "prefix": 93,
      "network": "fragnova",
      "displayName": "Fragnova Network",
      "symbols": [
        "NOVA"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://fragnova.com"
    },
    {
      "prefix": 98,
      "network": "polkasmith",
      "displayName": "PolkaSmith Canary Network",
      "symbols": [
        "PKS"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://polkafoundry.com"
    },
    {
      "prefix": 99,
      "network": "polkafoundry",
      "displayName": "PolkaFoundry Network",
      "symbols": [
        "PKF"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://polkafoundry.com"
    },
    {
      "prefix": 100,
      "network": "ibtida",
      "displayName": "Anmol Network Ibtida Canary network",
      "symbols": [
        "IANML"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://anmol.network/"
    },
    {
      "prefix": 101,
      "network": "origintrail-parachain",
      "displayName": "OriginTrail Parachain",
      "symbols": [
        "OTP"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://parachain.origintrail.io/"
    },
    {
      "prefix": 105,
      "network": "pontem-network",
      "displayName": "Pontem Network",
      "symbols": [
        "PONT"
      ],
      "decimals": [
        10
      ],
      "standardAccount": "*25519",
      "website": "https://pontem.network"
    },
    {
      "prefix": 110,
      "network": "heiko",
      "displayName": "Heiko",
      "symbols": [
        "HKO"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://parallel.fi/"
    },
    {
      "prefix": 113,
      "network": "integritee-incognito",
      "displayName": "Integritee Incognito",
      "symbols": [],
      "decimals": [],
      "standardAccount": "*25519",
      "website": "https://integritee.network"
    },
    {
      "prefix": 117,
      "network": "tinker",
      "displayName": "Tinker",
      "symbols": [
        "TNKR"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://invarch.network"
    },
    {
      "prefix": 126,
      "network": "joystream",
      "displayName": "Joystream",
      "symbols": [
        "JOY"
      ],
      "decimals": [
        10
      ],
      "standardAccount": "*25519",
      "website": "https://www.joystream.org"
    },
    {
      "prefix": 128,
      "network": "clover",
      "displayName": "Clover Finance",
      "symbols": [
        "CLV"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://clover.finance"
    },
    {
      "prefix": 129,
      "network": "dorafactory-polkadot",
      "displayName": "Dorafactory Polkadot Network",
      "symbols": [
        "DORA"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://dorafactory.org"
    },
    {
      "prefix": 131,
      "network": "litmus",
      "displayName": "Litmus Network",
      "symbols": [
        "LIT"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://litentry.com/"
    },
    {
      "prefix": 136,
      "network": "altair",
      "displayName": "Altair",
      "symbols": [
        "AIR"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://centrifuge.io/"
    },
    {
      "prefix": 137,
      "network": "vara",
      "displayName": "Vara Network",
      "symbols": [
        "VARA"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://vara-network.io/"
    },
    {
      "prefix": 172,
      "network": "parallel",
      "displayName": "Parallel",
      "symbols": [
        "PARA"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://parallel.fi/"
    },
    {
      "prefix": 252,
      "network": "social-network",
      "displayName": "Social Network",
      "symbols": [
        "NET"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://social.network"
    },
    {
      "prefix": 255,
      "network": "quartz_mainnet",
      "displayName": "QUARTZ by UNIQUE",
      "symbols": [
        "QTZ"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://unique.network"
    },
    {
      "prefix": 268,
      "network": "pioneer_network",
      "displayName": "Pioneer Network by Bit.Country",
      "symbols": [
        "NEER"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://bit.country"
    },
    {
      "prefix": 420,
      "network": "sora_kusama_para",
      "displayName": "SORA Kusama Parachain",
      "symbols": [
        "XOR"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://sora.org"
    },
    {
      "prefix": 440,
      "network": "allfeat_network",
      "displayName": "Allfeat Network",
      "symbols": [
        "AFT"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://allfeat.network"
    },
    {
      "prefix": 666,
      "network": "metaquity_network",
      "displayName": "Metaquity Network",
      "symbols": [
        "MQTY"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://metaquity.xyz/"
    },
    {
      "prefix": 789,
      "network": "geek",
      "displayName": "GEEK Network",
      "symbols": [
        "GEEK"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://geek.gl"
    },
    {
      "prefix": 995,
      "network": "ternoa",
      "displayName": "Ternoa",
      "symbols": [
        "CAPS"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://www.ternoa.network"
    },
    {
      "prefix": 1110,
      "network": "efinity",
      "displayName": "Efinity",
      "symbols": [
        "EFI"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://efinity.io/"
    },
    {
      "prefix": 1221,
      "network": "peaq",
      "displayName": "Peaq Network",
      "symbols": [
        "PEAQ"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "Sr25519",
      "website": "https://www.peaq.network/"
    },
    {
      "prefix": 1222,
      "network": "krest",
      "displayName": "Krest Network",
      "symbols": [
        "KREST"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "Sr25519",
      "website": "https://www.peaq.network/"
    },
    {
      "prefix": 1284,
      "network": "moonbeam",
      "displayName": "Moonbeam",
      "symbols": [
        "GLMR"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "secp256k1",
      "website": "https://moonbeam.network"
    },
    {
      "prefix": 1285,
      "network": "moonriver",
      "displayName": "Moonriver",
      "symbols": [
        "MOVR"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "secp256k1",
      "website": "https://moonbeam.network"
    },
    {
      "prefix": 1328,
      "network": "ajuna",
      "displayName": "Ajuna Network",
      "symbols": [
        "AJUN"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://ajuna.io"
    },
    {
      "prefix": 1337,
      "network": "bajun",
      "displayName": "Bajun Network",
      "symbols": [
        "BAJU"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://ajuna.io"
    },
    {
      "prefix": 1516,
      "network": "societal",
      "displayName": "Societal",
      "symbols": [
        "SCTL"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://www.sctl.xyz"
    },
    {
      "prefix": 1985,
      "network": "seals",
      "displayName": "Seals Network",
      "symbols": [
        "SEAL"
      ],
      "decimals": [
        9
      ],
      "standardAccount": "*25519",
      "website": "https://seals.app"
    },
    {
      "prefix": 2007,
      "network": "kapex",
      "displayName": "Kapex",
      "symbols": [
        "KAPEX"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://totemaccounting.com"
    },
    {
      "prefix": 2009,
      "network": "cloudwalk_mainnet",
      "displayName": "CloudWalk Network Mainnet",
      "symbols": [
        "CWN"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://explorer.mainnet.cloudwalk.io"
    },
    {
      "prefix": 2021,
      "network": "logion",
      "displayName": "logion network",
      "symbols": [
        "LGNT"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://logion.network"
    },
    {
      "prefix": 2032,
      "network": "interlay",
      "displayName": "Interlay",
      "symbols": [
        "INTR"
      ],
      "decimals": [
        10
      ],
      "standardAccount": "*25519",
      "website": "https://interlay.io/"
    },
    {
      "prefix": 2092,
      "network": "kintsugi",
      "displayName": "Kintsugi",
      "symbols": [
        "KINT"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://interlay.io/"
    },
    {
      "prefix": 2106,
      "network": "bitgreen",
      "displayName": "Bitgreen",
      "symbols": [
        "BBB"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://bitgreen.org/"
    },
    {
      "prefix": 2112,
      "network": "chainflip",
      "displayName": "Chainflip",
      "symbols": [
        "FLIP"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://chainflip.io/"
    },
    {
      "prefix": 2199,
      "network": "moonsama",
      "displayName": "Moonsama",
      "symbols": [
        "SAMA"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "secp256k1",
      "website": "https://moonsama.com"
    },
    {
      "prefix": 2206,
      "network": "ICE",
      "displayName": "ICE Network",
      "symbols": [
        "ICY"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://icenetwork.io"
    },
    {
      "prefix": 2207,
      "network": "SNOW",
      "displayName": "SNOW: ICE Canary Network",
      "symbols": [
        "ICZ"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://icenetwork.io"
    },
    {
      "prefix": 2254,
      "network": "subspace_testnet",
      "displayName": "Subspace testnet",
      "symbols": [
        "tSSC"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://subspace.network"
    },
    {
      "prefix": 3333,
      "network": "peerplays",
      "displayName": "Peerplays",
      "symbols": [
        "PPY"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "secp256k1",
      "website": "https://www.peerplays.com/"
    },
    {
      "prefix": 4006,
      "network": "tangle",
      "displayName": "Tangle Network",
      "symbols": [
        "TNT"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://www.webb.tools/"
    },
    {
      "prefix": 4450,
      "network": "g1",
      "displayName": "Ğ1",
      "symbols": [
        "G1"
      ],
      "decimals": [
        2
      ],
      "standardAccount": "*25519",
      "website": "https://duniter.org"
    },
    {
      "prefix": 5234,
      "network": "humanode",
      "displayName": "Humanode Network",
      "symbols": [
        "HMND"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://humanode.io"
    },
    {
      "prefix": 6094,
      "network": "subspace",
      "displayName": "Subspace",
      "symbols": [
        "SSC"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://subspace.network"
    },
    {
      "prefix": 7007,
      "network": "tidefi",
      "displayName": "Tidefi",
      "symbols": [
        "TDFY"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://tidefi.com"
    },
    {
      "prefix": 7013,
      "network": "gm",
      "displayName": "GM",
      "symbols": [
        "FREN",
        "GM",
        "GN"
      ],
      "decimals": [
        12,
        0,
        0
      ],
      "standardAccount": "*25519",
      "website": "https://gmordie.com"
    },
    {
      "prefix": 7306,
      "network": "krigan",
      "displayName": "Krigan Network",
      "symbols": [
        "KRGN"
      ],
      "decimals": [
        9
      ],
      "standardAccount": "*25519",
      "website": "https://krigan.network"
    },
    {
      "prefix": 7391,
      "network": "unique_mainnet",
      "displayName": "Unique Network",
      "symbols": [
        "UNQ"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://unique.network"
    },
    {
      "prefix": 8866,
      "network": "golden_gate",
      "displayName": "Golden Gate",
      "symbols": [
        "GGX"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://ggxchain.io/"
    },
    {
      "prefix": 8883,
      "network": "sapphire_mainnet",
      "displayName": "Sapphire by Unique",
      "symbols": [
        "QTZ"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://unique.network"
    },
    {
      "prefix": 8886,
      "network": "golden_gate_sydney",
      "displayName": "Golden Gate Sydney",
      "symbols": [
        "GGXT"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://ggxchain.io/"
    },
    {
      "prefix": 9072,
      "network": "hashed",
      "displayName": "Hashed Network",
      "symbols": [
        "HASH"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://hashed.network"
    },
    {
      "prefix": 9807,
      "network": "dentnet",
      "displayName": "DENTNet",
      "symbols": [
        "DENTX"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://www.dentnet.io"
    },
    {
      "prefix": 9935,
      "network": "t3rn",
      "displayName": "t3rn",
      "symbols": [
        "TRN"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://t3rn.io/"
    },
    {
      "prefix": 10041,
      "network": "basilisk",
      "displayName": "Basilisk",
      "symbols": [
        "BSX"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://bsx.fi"
    },
    {
      "prefix": 11330,
      "network": "cess-testnet",
      "displayName": "CESS Testnet",
      "symbols": [
        "TCESS"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://cess.cloud"
    },
    {
      "prefix": 11331,
      "network": "cess",
      "displayName": "CESS",
      "symbols": [
        "CESS"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://cess.cloud"
    },
    {
      "prefix": 11486,
      "network": "luhn",
      "displayName": "Luhn Network",
      "symbols": [
        "LUHN"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://luhn.network"
    },
    {
      "prefix": 11820,
      "network": "contextfree",
      "displayName": "Automata ContextFree",
      "symbols": [
        "CTX"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://ata.network"
    },
    {
      "prefix": 12155,
      "network": "impact",
      "displayName": "Impact Protocol Network",
      "symbols": [
        "BSTY"
      ],
      "decimals": [
        18
      ],
      "standardAccount": "*25519",
      "website": "https://impactprotocol.network/"
    },
    {
      "prefix": 12191,
      "network": "nftmart",
      "displayName": "NFTMart",
      "symbols": [
        "NMT"
      ],
      "decimals": [
        12
      ],
      "standardAccount": "*25519",
      "website": "https://nftmart.io"
    },
    {
      "prefix": 13116,
      "network": "bittensor",
      "displayName": "Bittensor",
      "symbols": [
        "TAO"
      ],
      "decimals": [
        9
      ],
      "standardAccount": "*25519",
      "website": "https://bittensor.com"
    },
    {
      "prefix": 14697,
      "network": "goro",
      "displayName": "GORO Network",
      "symbols": [
        "GORO"
      ],
      "decimals": [
        9
      ],
      "standardAccount": "*25519",
      "website": "https://goro.network"
    }
  ];
  const knownGenesis$1 = {
    acala: [
      "0xfc41b9bd8ef8fe53d58c7ea67c794c7ec9a73daf05e6d54b14ff6342c99ba64c"
    ],
    ajuna: [
      "0xe358eb1d11b31255a286c12e44fe6780b7edb171d657905a97e39f71d9c6c3ee"
    ],
    "aleph-node": [
      "0x70255b4d28de0fc4e1a193d7e175ad1ccef431598211c55538f1018651a0344e"
    ],
    astar: [
      "0x9eb76c5184c4ab8679d2d5d819fdf90b9c001403e9e17da2e14b6d8aec4029c6"
    ],
    basilisk: [
      "0xa85cfb9b9fd4d622a5b28289a02347af987d8f73fa3108450e2b4a11c1ce5755"
    ],
    bifrost: [
      "0x262e1b2ad728475fd6fe88e62d34c200abe6fd693931ddad144059b1eb884e5b"
    ],
    "bifrost-kusama": [
      "0x9f28c6a68e0fc9646eff64935684f6eeeece527e37bbe1f213d22caa1d9d6bed"
    ],
    bittensor: [
      "0x2f0555cc76fc2840a25a6ea3b9637146806f1f44b090c175ffde2a7e5ab36c03"
    ],
    centrifuge: [
      "0xb3db41421702df9a7fcac62b53ffeac85f7853cc4e689e0b93aeb3db18c09d82",
      "0x67dddf2673b69e5f875f6f25277495834398eafd67f492e09f3f3345e003d1b5"
    ],
    cere: [
      "0x81443836a9a24caaa23f1241897d1235717535711d1d3fe24eae4fdc942c092c"
    ],
    composable: [
      "0xdaab8df776eb52ec604a5df5d388bb62a050a0aaec4556a64265b9d42755552d"
    ],
    darwinia: [
      "0xe71578b37a7c799b0ab4ee87ffa6f059a6b98f71f06fb8c84a8d88013a548ad6"
    ],
    "dock-mainnet": [
      "0x6bfe24dca2a3be10f22212678ac13a6446ec764103c0f3471c71609eac384aae",
      "0xf73467c6544aa68df2ee546b135f955c46b90fa627e9b5d7935f41061bb8a5a9"
    ],
    edgeware: [
      "0x742a2ca70c2fda6cee4f8df98d64c4c670a052d9568058982dad9d5a7a135c5b"
    ],
    equilibrium: [
      "0x6f1a800de3daff7f5e037ddf66ab22ce03ab91874debeddb1086f5f7dbd48925"
    ],
    genshiro: [
      "0x9b8cefc0eb5c568b527998bdd76c184e2b76ae561be76e4667072230217ea243"
    ],
    hydradx: [
      "0xafdc188f45c71dacbaa0b62e16a91f726c7b8699a9748cdf715459de6b7f366d",
      "0xd2a620c27ec5cbc5621ff9a522689895074f7cca0d08e7134a7804e1a3ba86fc",
      "0x10af6e84234477d84dc572bac0789813b254aa490767ed06fb9591191d1073f9",
      "0x3d75507dd46301767e601265791da1d9cb47b6ebc94e87347b635e5bf58bd047",
      "0x0ed32bfcab4a83517fac88f2aa7cbc2f88d3ab93be9a12b6188a036bf8a943c2"
      // Snakenet Gen1
    ],
    "interlay-parachain": [
      "0xbf88efe70e9e0e916416e8bed61f2b45717f517d7f3523e33c7b001e5ffcbc72"
    ],
    karura: [
      "0xbaf5aabe40646d11f0ee8abbdc64f4a4b7674925cba08e4a05ff9ebed6e2126b"
    ],
    khala: [
      "0xd43540ba6d3eb4897c28a77d48cb5b729fea37603cbbfc7a86a73b72adb3be8d"
    ],
    kulupu: [
      "0xf7a99d3cb92853d00d5275c971c132c074636256583fee53b3bbe60d7b8769ba"
    ],
    kusama: [
      "0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe",
      "0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636",
      "0x3fd7b9eb6a00376e5be61f01abb429ffb0b104be05eaff4d458da48fcd425baf"
      // Kusama CC1
    ],
    nodle: [
      "0x97da7ede98d7bad4e36b4d734b6055425a3be036da2a332ea5a7037656427a21"
    ],
    origintrail: [
      "0xe7e0962324a3b86c83404dbea483f25fb5dab4c224791c81b756cfc948006174"
    ],
    p3d: [
      "0x6c5894837ad89b6d92b114a2fb3eafa8fe3d26a54848e3447015442cd6ef4e66"
    ],
    parallel: [
      "0xe61a41c53f5dcd0beb09df93b34402aada44cb05117b71059cce40a2723a4e97"
    ],
    pendulum: [
      "0x5d3c298622d5634ed019bf61ea4b71655030015bde9beb0d6a24743714462c86"
    ],
    phala: [
      "0x1bb969d85965e4bb5a651abbedf21a54b6b31a21f66b5401cc3f1e286268d736"
    ],
    picasso: [
      "0x6811a339673c9daa897944dcdac99c6e2939cc88245ed21951a0a3c9a2be75bc",
      "0xe8e7f0f4c4f5a00720b4821dbfddefea7490bcf0b19009961cc46957984e2c1c"
    ],
    polkadex: [
      "0x3920bcb4960a1eef5580cd5367ff3f430eef052774f78468852f7b9cb39f8a3c"
    ],
    polkadot: [
      "0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3"
    ],
    polymesh: [
      "0x6fbd74e5e1d0a61d52ccfe9d4adaed16dd3a7caa37c6bc4d0c2fa12e8b2f4063"
    ],
    rococo: [
      "0x6408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063e",
      "0xaaf2cd1b74b5f726895921259421b534124726263982522174147046b8827897",
      "0x037f5f3c8e67b314062025fc886fcd6238ea25a4a9b45dce8d246815c9ebe770",
      "0xc196f81260cf1686172b47a79cf002120735d7cb0eb1474e8adce56618456fff",
      "0xf6e9983c37baf68846fedafe21e56718790e39fb1c582abc408b81bc7b208f9a",
      "0x5fce687da39305dfe682b117f0820b319348e8bb37eb16cf34acbf6a202de9d9",
      "0xe7c3d5edde7db964317cd9b51a3a059d7cd99f81bdbce14990047354334c9779",
      "0x1611e1dbf0405379b861e2e27daa90f480b2e6d3682414a80835a52e8cb8a215",
      "0x343442f12fa715489a8714e79a7b264ea88c0d5b8c66b684a7788a516032f6b9",
      "0x78bcd530c6b3a068bc17473cf5d2aff9c287102bed9af3ae3c41c33b9d6c6147",
      "0x47381ee0697153d64404fc578392c8fd5cba9073391908f46c888498415647bd",
      "0x19c0e4fa8ab75f5ac7865e0b8f74ff91eb9a100d336f423cd013a8befba40299"
    ],
    sora: [
      "0x7e4e32d0feafd4f9c9414b0be86373f9a1efa904809b683453a9af6856d38ad5"
    ],
    stafi: [
      "0x290a4149f09ea0e402c74c1c7e96ae4239588577fe78932f94f5404c68243d80"
    ],
    statemine: [
      "0x48239ef607d7928874027a43a67689209727dfb3d3dc5e5b03a39bdc2eda771a"
    ],
    statemint: [
      "0x68d56f15f85d3136970ec16946040bc1752654e906147f7e43e9d539d7c3de2f"
    ],
    subsocial: [
      "0x0bd72c1c305172e1275278aaeb3f161e02eccb7a819e63f62d47bd53a28189f8"
    ],
    ternoa: [
      "0x6859c81ca95ef624c9dfe4dc6e3381c33e5d6509e35e147092bfbc780f777c4e"
    ],
    unique: [
      "0x84322d9cddbf35088f1e54e9a85c967a41a56a4f43445768125e61af166c7d31"
    ],
    vtb: [
      "0x286bc8414c7000ce1d6ee6a834e29a54c1784814b76243eb77ed0b2c5573c60f",
      "0x7483b89572fb2bd687c7b9a93b242d0b237f9aba463aba07ec24503931038aaa"
    ],
    westend: [
      "0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"
    ],
    xxnetwork: [
      "0x50dd5d206917bf10502c68fb4d18a59fc8aa31586f4e8856b493e43544aa82aa"
    ],
    zeitgeist: [
      "0x1bf2a2ecb4a868de66ea8610f2ce7c8c43706561b6476031315f6640fe38e060"
    ]
  };
  const knownIcon$1 = {
    centrifuge: "polkadot",
    kusama: "polkadot",
    polkadot: "polkadot",
    sora: "polkadot",
    statemine: "polkadot",
    statemint: "polkadot",
    westmint: "polkadot"
  };
  const knownLedger$1 = {
    acala: 787,
    ajuna: 354,
    "aleph-node": 643,
    astar: 810,
    bifrost: 788,
    "bifrost-kusama": 788,
    centrifuge: 747,
    composable: 354,
    darwinia: 354,
    "dock-mainnet": 594,
    edgeware: 523,
    equilibrium: 99999997,
    genshiro: 99999996,
    hydradx: 354,
    "interlay-parachain": 354,
    karura: 686,
    khala: 434,
    kusama: 434,
    nodle: 1003,
    origintrail: 354,
    parallel: 354,
    pendulum: 354,
    phala: 354,
    picasso: 434,
    polkadex: 799,
    polkadot: 354,
    polymesh: 595,
    sora: 617,
    stafi: 907,
    statemine: 434,
    statemint: 354,
    ternoa: 995,
    unique: 354,
    vtb: 694,
    xxnetwork: 1955,
    zeitgeist: 354
  };
  const knownTestnet$1 = {
    "": true,
    "cess-testnet": true,
    "dock-testnet": true,
    jupiter: true,
    "mathchain-testnet": true,
    p3dt: true,
    subspace_testnet: true,
    "zero-alphaville": true
  };
  const UNSORTED$1 = [0, 2, 42];
  const TESTNETS$1 = ["testnet"];
  function toExpanded$1(o) {
    const network = o.network || "";
    const nameParts = network.replace(/_/g, "-").split("-");
    const n = o;
    n.slip44 = knownLedger$1[network];
    n.hasLedgerSupport = !!n.slip44;
    n.genesisHash = knownGenesis$1[network] || [];
    n.icon = knownIcon$1[network] || "substrate";
    n.isTestnet = !!knownTestnet$1[network] || TESTNETS$1.includes(nameParts[nameParts.length - 1]);
    n.isIgnored = n.isTestnet || !(o.standardAccount && o.decimals && o.decimals.length && o.symbols && o.symbols.length) && o.prefix !== 42;
    return n;
  }
  function filterSelectable$1({ genesisHash, prefix: prefix2 }) {
    return !!genesisHash.length || prefix2 === 42;
  }
  function filterAvailable$1(n) {
    return !n.isIgnored && !!n.network;
  }
  function sortNetworks$1(a, b) {
    const isUnSortedA = UNSORTED$1.includes(a.prefix);
    const isUnSortedB = UNSORTED$1.includes(b.prefix);
    return isUnSortedA === isUnSortedB ? isUnSortedA ? 0 : a.displayName.localeCompare(b.displayName) : isUnSortedA ? -1 : 1;
  }
  const allNetworks$1 = knownSubstrate.map(toExpanded$1);
  const availableNetworks$1 = allNetworks$1.filter(filterAvailable$1).sort(sortNetworks$1);
  availableNetworks$1.filter(filterSelectable$1);
  const defaults$5 = {
    allowedDecodedLengths: [1, 2, 4, 8, 32, 33],
    // publicKey has prefix + 2 checksum bytes, short only prefix + 1 checksum byte
    allowedEncodedLengths: [3, 4, 6, 10, 35, 36, 37, 38],
    allowedPrefix: availableNetworks$1.map(({ prefix: prefix2 }) => prefix2),
    prefix: 42
  };
  function decodeAddress(encoded, ignoreChecksum, ss58Format = -1) {
    if (!encoded) {
      throw new Error("Invalid empty address passed");
    }
    if (isU8a(encoded) || isHex(encoded)) {
      return u8aToU8a(encoded);
    }
    try {
      const decoded = base58Decode(encoded);
      if (!defaults$5.allowedEncodedLengths.includes(decoded.length)) {
        throw new Error("Invalid decoded address length");
      }
      const [isValid2, endPos, ss58Length, ss58Decoded] = checkAddressChecksum(decoded);
      if (!isValid2 && !ignoreChecksum) {
        throw new Error("Invalid decoded address checksum");
      } else if (ss58Format !== -1 && ss58Format !== ss58Decoded) {
        throw new Error(`Expected ss58Format ${ss58Format}, received ${ss58Decoded}`);
      }
      return decoded.slice(ss58Length, endPos);
    } catch (error) {
      throw new Error(`Decoding ${encoded}: ${error.message}`);
    }
  }
  const BN_BE_OPTS = { isLe: false };
  const BN_LE_OPTS = { isLe: true };
  const BN_BE_32_OPTS = { bitLength: 32, isLe: false };
  const BN_LE_32_OPTS = { bitLength: 32, isLe: true };
  const BN_BE_256_OPTS = { bitLength: 256, isLe: false };
  const BN_LE_256_OPTS = { bitLength: 256, isLe: true };
  const RE_NUMBER = /^\d+$/;
  const JUNCTION_ID_LEN = 32;
  class DeriveJunction {
    constructor() {
      this.__internal__chainCode = new Uint8Array(32);
      this.__internal__isHard = false;
    }
    static from(value) {
      const result = new DeriveJunction();
      const [code, isHard] = value.startsWith("/") ? [value.substring(1), true] : [value, false];
      result.soft(RE_NUMBER.test(code) ? new BN(code, 10) : code);
      return isHard ? result.harden() : result;
    }
    get chainCode() {
      return this.__internal__chainCode;
    }
    get isHard() {
      return this.__internal__isHard;
    }
    get isSoft() {
      return !this.__internal__isHard;
    }
    hard(value) {
      return this.soft(value).harden();
    }
    harden() {
      this.__internal__isHard = true;
      return this;
    }
    soft(value) {
      if (isNumber$1(value) || isBn(value) || isBigInt(value)) {
        return this.soft(bnToU8a(value, BN_LE_256_OPTS));
      } else if (isHex(value)) {
        return this.soft(hexToU8a(value));
      } else if (isString$1(value)) {
        return this.soft(compactAddLength(stringToU8a(value)));
      } else if (value.length > JUNCTION_ID_LEN) {
        return this.soft(blake2AsU8a(value));
      }
      this.__internal__chainCode.fill(0);
      this.__internal__chainCode.set(value, 0);
      return this;
    }
    soften() {
      this.__internal__isHard = false;
      return this;
    }
  }
  const RE_JUNCTION = /\/(\/?)([^/]+)/g;
  function keyExtractPath(derivePath) {
    const parts = derivePath.match(RE_JUNCTION);
    const path2 = [];
    let constructed = "";
    if (parts) {
      constructed = parts.join("");
      for (const p of parts) {
        path2.push(DeriveJunction.from(p.substring(1)));
      }
    }
    if (constructed !== derivePath) {
      throw new Error(`Re-constructed path "${constructed}" does not match input`);
    }
    return {
      parts,
      path: path2
    };
  }
  const RE_CAPTURE = /^(\w+( \w+)*)((\/\/?[^/]+)*)(\/\/\/(.*))?$/;
  function keyExtractSuri(suri) {
    const matches = suri.match(RE_CAPTURE);
    if (matches === null) {
      throw new Error("Unable to match provided value to a secret URI");
    }
    const [, phrase, , derivePath, , , password] = matches;
    const { path: path2 } = keyExtractPath(derivePath);
    return {
      derivePath,
      password,
      path: path2,
      phrase
    };
  }
  const HDKD$1 = compactAddLength(stringToU8a("Secp256k1HDKD"));
  function secp256k1DeriveHard(seed, chainCode) {
    if (!isU8a(chainCode) || chainCode.length !== 32) {
      throw new Error("Invalid chainCode passed to derive");
    }
    return blake2AsU8a(u8aConcat(HDKD$1, seed, chainCode), 256);
  }
  function setBigUint64(view, byteOffset, value, isLE2) {
    if (typeof view.setBigUint64 === "function")
      return view.setBigUint64(byteOffset, value, isLE2);
    const _32n2 = BigInt(32);
    const _u32_max = BigInt(4294967295);
    const wh = Number(value >> _32n2 & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE2 ? 4 : 0;
    const l2 = isLE2 ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE2);
    view.setUint32(byteOffset + l2, wl, isLE2);
  }
  class SHA2 extends Hash {
    constructor(blockLen, outputLen, padOffset, isLE2) {
      super();
      this.blockLen = blockLen;
      this.outputLen = outputLen;
      this.padOffset = padOffset;
      this.isLE = isLE2;
      this.finished = false;
      this.length = 0;
      this.pos = 0;
      this.destroyed = false;
      this.buffer = new Uint8Array(blockLen);
      this.view = createView(this.buffer);
    }
    update(data2) {
      assert.exists(this);
      const { view, buffer, blockLen } = this;
      data2 = toBytes(data2);
      const len = data2.length;
      for (let pos = 0; pos < len; ) {
        const take2 = Math.min(blockLen - this.pos, len - pos);
        if (take2 === blockLen) {
          const dataView = createView(data2);
          for (; blockLen <= len - pos; pos += blockLen)
            this.process(dataView, pos);
          continue;
        }
        buffer.set(data2.subarray(pos, pos + take2), this.pos);
        this.pos += take2;
        pos += take2;
        if (this.pos === blockLen) {
          this.process(view, 0);
          this.pos = 0;
        }
      }
      this.length += data2.length;
      this.roundClean();
      return this;
    }
    digestInto(out) {
      assert.exists(this);
      assert.output(out, this);
      this.finished = true;
      const { buffer, view, blockLen, isLE: isLE2 } = this;
      let { pos } = this;
      buffer[pos++] = 128;
      this.buffer.subarray(pos).fill(0);
      if (this.padOffset > blockLen - pos) {
        this.process(view, 0);
        pos = 0;
      }
      for (let i2 = pos; i2 < blockLen; i2++)
        buffer[i2] = 0;
      setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE2);
      this.process(view, 0);
      const oview = createView(out);
      const len = this.outputLen;
      if (len % 4)
        throw new Error("_sha2: outputLen should be aligned to 32bit");
      const outLen = len / 4;
      const state = this.get();
      if (outLen > state.length)
        throw new Error("_sha2: outputLen bigger than state");
      for (let i2 = 0; i2 < outLen; i2++)
        oview.setUint32(4 * i2, state[i2], isLE2);
    }
    digest() {
      const { buffer, outputLen } = this;
      this.digestInto(buffer);
      const res = buffer.slice(0, outputLen);
      this.destroy();
      return res;
    }
    _cloneInto(to) {
      to || (to = new this.constructor());
      to.set(...this.get());
      const { blockLen, buffer, length: length2, finished, destroyed, pos } = this;
      to.length = length2;
      to.pos = pos;
      to.finished = finished;
      to.destroyed = destroyed;
      if (length2 % blockLen)
        to.buffer.set(buffer);
      return to;
    }
  }
  const Chi = (a, b, c) => a & b ^ ~a & c;
  const Maj = (a, b, c) => a & b ^ a & c ^ b & c;
  const SHA256_K = new Uint32Array([
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
  ]);
  const IV = new Uint32Array([
    1779033703,
    3144134277,
    1013904242,
    2773480762,
    1359893119,
    2600822924,
    528734635,
    1541459225
  ]);
  const SHA256_W = new Uint32Array(64);
  class SHA256 extends SHA2 {
    constructor() {
      super(64, 32, 8, false);
      this.A = IV[0] | 0;
      this.B = IV[1] | 0;
      this.C = IV[2] | 0;
      this.D = IV[3] | 0;
      this.E = IV[4] | 0;
      this.F = IV[5] | 0;
      this.G = IV[6] | 0;
      this.H = IV[7] | 0;
    }
    get() {
      const { A, B, C, D, E, F, G, H } = this;
      return [A, B, C, D, E, F, G, H];
    }
    // prettier-ignore
    set(A, B, C, D, E, F, G, H) {
      this.A = A | 0;
      this.B = B | 0;
      this.C = C | 0;
      this.D = D | 0;
      this.E = E | 0;
      this.F = F | 0;
      this.G = G | 0;
      this.H = H | 0;
    }
    process(view, offset) {
      for (let i2 = 0; i2 < 16; i2++, offset += 4)
        SHA256_W[i2] = view.getUint32(offset, false);
      for (let i2 = 16; i2 < 64; i2++) {
        const W15 = SHA256_W[i2 - 15];
        const W2 = SHA256_W[i2 - 2];
        const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
        const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;
        SHA256_W[i2] = s1 + SHA256_W[i2 - 7] + s0 + SHA256_W[i2 - 16] | 0;
      }
      let { A, B, C, D, E, F, G, H } = this;
      for (let i2 = 0; i2 < 64; i2++) {
        const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
        const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i2] + SHA256_W[i2] | 0;
        const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
        const T2 = sigma0 + Maj(A, B, C) | 0;
        H = G;
        G = F;
        F = E;
        E = D + T1 | 0;
        D = C;
        C = B;
        B = A;
        A = T1 + T2 | 0;
      }
      A = A + this.A | 0;
      B = B + this.B | 0;
      C = C + this.C | 0;
      D = D + this.D | 0;
      E = E + this.E | 0;
      F = F + this.F | 0;
      G = G + this.G | 0;
      H = H + this.H | 0;
      this.set(A, B, C, D, E, F, G, H);
    }
    roundClean() {
      SHA256_W.fill(0);
    }
    destroy() {
      this.set(0, 0, 0, 0, 0, 0, 0, 0);
      this.buffer.fill(0);
    }
  }
  class SHA224 extends SHA256 {
    constructor() {
      super();
      this.A = 3238371032 | 0;
      this.B = 914150663 | 0;
      this.C = 812702999 | 0;
      this.D = 4144912697 | 0;
      this.E = 4290775857 | 0;
      this.F = 1750603025 | 0;
      this.G = 1694076839 | 0;
      this.H = 3204075428 | 0;
      this.outputLen = 28;
    }
  }
  const sha256 = wrapConstructor(() => new SHA256());
  wrapConstructor(() => new SHA224());
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  const _0n$5 = BigInt(0);
  const _1n$7 = BigInt(1);
  const _2n$5 = BigInt(2);
  const u8a = (a) => a instanceof Uint8Array;
  const hexes = Array.from({ length: 256 }, (v, i2) => i2.toString(16).padStart(2, "0"));
  function bytesToHex(bytes2) {
    if (!u8a(bytes2))
      throw new Error("Uint8Array expected");
    let hex2 = "";
    for (let i2 = 0; i2 < bytes2.length; i2++) {
      hex2 += hexes[bytes2[i2]];
    }
    return hex2;
  }
  function numberToHexUnpadded(num) {
    const hex2 = num.toString(16);
    return hex2.length & 1 ? `0${hex2}` : hex2;
  }
  function hexToNumber(hex2) {
    if (typeof hex2 !== "string")
      throw new Error("hex string expected, got " + typeof hex2);
    return BigInt(hex2 === "" ? "0" : `0x${hex2}`);
  }
  function hexToBytes(hex2) {
    if (typeof hex2 !== "string")
      throw new Error("hex string expected, got " + typeof hex2);
    const len = hex2.length;
    if (len % 2)
      throw new Error("padded hex string expected, got unpadded hex of length " + len);
    const array = new Uint8Array(len / 2);
    for (let i2 = 0; i2 < array.length; i2++) {
      const j = i2 * 2;
      const hexByte = hex2.slice(j, j + 2);
      const byte = Number.parseInt(hexByte, 16);
      if (Number.isNaN(byte) || byte < 0)
        throw new Error("Invalid byte sequence");
      array[i2] = byte;
    }
    return array;
  }
  function bytesToNumberBE(bytes2) {
    return hexToNumber(bytesToHex(bytes2));
  }
  function bytesToNumberLE(bytes2) {
    if (!u8a(bytes2))
      throw new Error("Uint8Array expected");
    return hexToNumber(bytesToHex(Uint8Array.from(bytes2).reverse()));
  }
  function numberToBytesBE(n, len) {
    return hexToBytes(n.toString(16).padStart(len * 2, "0"));
  }
  function numberToBytesLE(n, len) {
    return numberToBytesBE(n, len).reverse();
  }
  function numberToVarBytesBE(n) {
    return hexToBytes(numberToHexUnpadded(n));
  }
  function ensureBytes(title, hex2, expectedLength) {
    let res;
    if (typeof hex2 === "string") {
      try {
        res = hexToBytes(hex2);
      } catch (e) {
        throw new Error(`${title} must be valid hex string, got "${hex2}". Cause: ${e}`);
      }
    } else if (u8a(hex2)) {
      res = Uint8Array.from(hex2);
    } else {
      throw new Error(`${title} must be hex string or Uint8Array`);
    }
    const len = res.length;
    if (typeof expectedLength === "number" && len !== expectedLength)
      throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
    return res;
  }
  function concatBytes(...arrays) {
    const r2 = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
    let pad = 0;
    arrays.forEach((a) => {
      if (!u8a(a))
        throw new Error("Uint8Array expected");
      r2.set(a, pad);
      pad += a.length;
    });
    return r2;
  }
  function equalBytes(b1, b2) {
    if (b1.length !== b2.length)
      return false;
    for (let i2 = 0; i2 < b1.length; i2++)
      if (b1[i2] !== b2[i2])
        return false;
    return true;
  }
  function utf8ToBytes(str) {
    if (typeof str !== "string")
      throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
    return new Uint8Array(new TextEncoder().encode(str));
  }
  function bitLen(n) {
    let len;
    for (len = 0; n > _0n$5; n >>= _1n$7, len += 1)
      ;
    return len;
  }
  function bitGet(n, pos) {
    return n >> BigInt(pos) & _1n$7;
  }
  const bitSet = (n, pos, value) => {
    return n | (value ? _1n$7 : _0n$5) << BigInt(pos);
  };
  const bitMask = (n) => (_2n$5 << BigInt(n - 1)) - _1n$7;
  const u8n = (data2) => new Uint8Array(data2);
  const u8fr = (arr2) => Uint8Array.from(arr2);
  function createHmacDrbg(hashLen, qByteLen, hmacFn) {
    if (typeof hashLen !== "number" || hashLen < 2)
      throw new Error("hashLen must be a number");
    if (typeof qByteLen !== "number" || qByteLen < 2)
      throw new Error("qByteLen must be a number");
    if (typeof hmacFn !== "function")
      throw new Error("hmacFn must be a function");
    let v = u8n(hashLen);
    let k = u8n(hashLen);
    let i2 = 0;
    const reset = () => {
      v.fill(1);
      k.fill(0);
      i2 = 0;
    };
    const h = (...b) => hmacFn(k, v, ...b);
    const reseed = (seed = u8n()) => {
      k = h(u8fr([0]), seed);
      v = h();
      if (seed.length === 0)
        return;
      k = h(u8fr([1]), seed);
      v = h();
    };
    const gen2 = () => {
      if (i2++ >= 1e3)
        throw new Error("drbg: tried 1000 values");
      let len = 0;
      const out = [];
      while (len < qByteLen) {
        v = h();
        const sl = v.slice();
        out.push(sl);
        len += v.length;
      }
      return concatBytes(...out);
    };
    const genUntil = (seed, pred) => {
      reset();
      reseed(seed);
      let res = void 0;
      while (!(res = pred(gen2())))
        reseed();
      reset();
      return res;
    };
    return genUntil;
  }
  const validatorFns = {
    bigint: (val) => typeof val === "bigint",
    function: (val) => typeof val === "function",
    boolean: (val) => typeof val === "boolean",
    string: (val) => typeof val === "string",
    isSafeInteger: (val) => Number.isSafeInteger(val),
    array: (val) => Array.isArray(val),
    field: (val, object) => object.Fp.isValid(val),
    hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
  };
  function validateObject(object, validators2, optValidators = {}) {
    const checkField = (fieldName, type, isOptional) => {
      const checkVal = validatorFns[type];
      if (typeof checkVal !== "function")
        throw new Error(`Invalid validator "${type}", expected function`);
      const val = object[fieldName];
      if (isOptional && val === void 0)
        return;
      if (!checkVal(val, object)) {
        throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
      }
    };
    for (const [fieldName, type] of Object.entries(validators2))
      checkField(fieldName, type, false);
    for (const [fieldName, type] of Object.entries(optValidators))
      checkField(fieldName, type, true);
    return object;
  }
  const ut = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    bitGet,
    bitLen,
    bitMask,
    bitSet,
    bytesToHex,
    bytesToNumberBE,
    bytesToNumberLE,
    concatBytes,
    createHmacDrbg,
    ensureBytes,
    equalBytes,
    hexToBytes,
    hexToNumber,
    numberToBytesBE,
    numberToBytesLE,
    numberToHexUnpadded,
    numberToVarBytesBE,
    utf8ToBytes,
    validateObject
  }, Symbol.toStringTag, { value: "Module" }));
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  const _0n$4 = BigInt(0), _1n$6 = BigInt(1), _2n$4 = BigInt(2), _3n$1 = BigInt(3);
  const _4n = BigInt(4), _5n$1 = BigInt(5), _8n$1 = BigInt(8);
  BigInt(9);
  BigInt(16);
  function mod(a, b) {
    const result = a % b;
    return result >= _0n$4 ? result : b + result;
  }
  function pow(num, power, modulo) {
    if (modulo <= _0n$4 || power < _0n$4)
      throw new Error("Expected power/modulo > 0");
    if (modulo === _1n$6)
      return _0n$4;
    let res = _1n$6;
    while (power > _0n$4) {
      if (power & _1n$6)
        res = res * num % modulo;
      num = num * num % modulo;
      power >>= _1n$6;
    }
    return res;
  }
  function pow2(x, power, modulo) {
    let res = x;
    while (power-- > _0n$4) {
      res *= res;
      res %= modulo;
    }
    return res;
  }
  function invert(number2, modulo) {
    if (number2 === _0n$4 || modulo <= _0n$4) {
      throw new Error(`invert: expected positive integers, got n=${number2} mod=${modulo}`);
    }
    let a = mod(number2, modulo);
    let b = modulo;
    let x = _0n$4, u = _1n$6;
    while (a !== _0n$4) {
      const q = b / a;
      const r2 = b % a;
      const m2 = x - u * q;
      b = a, a = r2, x = u, u = m2;
    }
    const gcd2 = b;
    if (gcd2 !== _1n$6)
      throw new Error("invert: does not exist");
    return mod(x, modulo);
  }
  function tonelliShanks(P) {
    const legendreC = (P - _1n$6) / _2n$4;
    let Q, S, Z;
    for (Q = P - _1n$6, S = 0; Q % _2n$4 === _0n$4; Q /= _2n$4, S++)
      ;
    for (Z = _2n$4; Z < P && pow(Z, legendreC, P) !== P - _1n$6; Z++)
      ;
    if (S === 1) {
      const p1div4 = (P + _1n$6) / _4n;
      return function tonelliFast(Fp2, n) {
        const root = Fp2.pow(n, p1div4);
        if (!Fp2.eql(Fp2.sqr(root), n))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    const Q1div2 = (Q + _1n$6) / _2n$4;
    return function tonelliSlow(Fp2, n) {
      if (Fp2.pow(n, legendreC) === Fp2.neg(Fp2.ONE))
        throw new Error("Cannot find square root");
      let r2 = S;
      let g = Fp2.pow(Fp2.mul(Fp2.ONE, Z), Q);
      let x = Fp2.pow(n, Q1div2);
      let b = Fp2.pow(n, Q);
      while (!Fp2.eql(b, Fp2.ONE)) {
        if (Fp2.eql(b, Fp2.ZERO))
          return Fp2.ZERO;
        let m2 = 1;
        for (let t2 = Fp2.sqr(b); m2 < r2; m2++) {
          if (Fp2.eql(t2, Fp2.ONE))
            break;
          t2 = Fp2.sqr(t2);
        }
        const ge = Fp2.pow(g, _1n$6 << BigInt(r2 - m2 - 1));
        g = Fp2.sqr(ge);
        x = Fp2.mul(x, ge);
        b = Fp2.mul(b, g);
        r2 = m2;
      }
      return x;
    };
  }
  function FpSqrt(P) {
    if (P % _4n === _3n$1) {
      const p1div4 = (P + _1n$6) / _4n;
      return function sqrt3mod4(Fp2, n) {
        const root = Fp2.pow(n, p1div4);
        if (!Fp2.eql(Fp2.sqr(root), n))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    if (P % _8n$1 === _5n$1) {
      const c1 = (P - _5n$1) / _8n$1;
      return function sqrt5mod8(Fp2, n) {
        const n2 = Fp2.mul(n, _2n$4);
        const v = Fp2.pow(n2, c1);
        const nv = Fp2.mul(n, v);
        const i2 = Fp2.mul(Fp2.mul(nv, _2n$4), v);
        const root = Fp2.mul(nv, Fp2.sub(i2, Fp2.ONE));
        if (!Fp2.eql(Fp2.sqr(root), n))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    return tonelliShanks(P);
  }
  const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n$6) === _1n$6;
  const FIELD_FIELDS = [
    "create",
    "isValid",
    "is0",
    "neg",
    "inv",
    "sqrt",
    "sqr",
    "eql",
    "add",
    "sub",
    "mul",
    "pow",
    "div",
    "addN",
    "subN",
    "mulN",
    "sqrN"
  ];
  function validateField(field) {
    const initial = {
      ORDER: "bigint",
      MASK: "bigint",
      BYTES: "isSafeInteger",
      BITS: "isSafeInteger"
    };
    const opts = FIELD_FIELDS.reduce((map2, val) => {
      map2[val] = "function";
      return map2;
    }, initial);
    return validateObject(field, opts);
  }
  function FpPow(f, num, power) {
    if (power < _0n$4)
      throw new Error("Expected power > 0");
    if (power === _0n$4)
      return f.ONE;
    if (power === _1n$6)
      return num;
    let p = f.ONE;
    let d = num;
    while (power > _0n$4) {
      if (power & _1n$6)
        p = f.mul(p, d);
      d = f.sqr(d);
      power >>= _1n$6;
    }
    return p;
  }
  function FpInvertBatch(f, nums) {
    const tmp = new Array(nums.length);
    const lastMultiplied = nums.reduce((acc, num, i2) => {
      if (f.is0(num))
        return acc;
      tmp[i2] = acc;
      return f.mul(acc, num);
    }, f.ONE);
    const inverted = f.inv(lastMultiplied);
    nums.reduceRight((acc, num, i2) => {
      if (f.is0(num))
        return acc;
      tmp[i2] = f.mul(acc, tmp[i2]);
      return f.mul(acc, num);
    }, inverted);
    return tmp;
  }
  function nLength(n, nBitLength) {
    const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;
    const nByteLength = Math.ceil(_nBitLength / 8);
    return { nBitLength: _nBitLength, nByteLength };
  }
  function Field(ORDER, bitLen2, isLE2 = false, redef = {}) {
    if (ORDER <= _0n$4)
      throw new Error(`Expected Fp ORDER > 0, got ${ORDER}`);
    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen2);
    if (BYTES > 2048)
      throw new Error("Field lengths over 2048 bytes are not supported");
    const sqrtP = FpSqrt(ORDER);
    const f = Object.freeze({
      ORDER,
      BITS,
      BYTES,
      MASK: bitMask(BITS),
      ZERO: _0n$4,
      ONE: _1n$6,
      create: (num) => mod(num, ORDER),
      isValid: (num) => {
        if (typeof num !== "bigint")
          throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
        return _0n$4 <= num && num < ORDER;
      },
      is0: (num) => num === _0n$4,
      isOdd: (num) => (num & _1n$6) === _1n$6,
      neg: (num) => mod(-num, ORDER),
      eql: (lhs, rhs) => lhs === rhs,
      sqr: (num) => mod(num * num, ORDER),
      add: (lhs, rhs) => mod(lhs + rhs, ORDER),
      sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
      mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
      pow: (num, power) => FpPow(f, num, power),
      div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
      // Same as above, but doesn't normalize
      sqrN: (num) => num * num,
      addN: (lhs, rhs) => lhs + rhs,
      subN: (lhs, rhs) => lhs - rhs,
      mulN: (lhs, rhs) => lhs * rhs,
      inv: (num) => invert(num, ORDER),
      sqrt: redef.sqrt || ((n) => sqrtP(f, n)),
      invertBatch: (lst) => FpInvertBatch(f, lst),
      // TODO: do we really need constant cmov?
      // We don't have const-time bigints anyway, so probably will be not very useful
      cmov: (a, b, c) => c ? b : a,
      toBytes: (num) => isLE2 ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES),
      fromBytes: (bytes2) => {
        if (bytes2.length !== BYTES)
          throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes2.length}`);
        return isLE2 ? bytesToNumberLE(bytes2) : bytesToNumberBE(bytes2);
      }
    });
    return Object.freeze(f);
  }
  function FpSqrtEven(Fp2, elm) {
    if (!Fp2.isOdd)
      throw new Error(`Field doesn't have isOdd`);
    const root = Fp2.sqrt(elm);
    return Fp2.isOdd(root) ? Fp2.neg(root) : root;
  }
  function hashToPrivateScalar(hash2, groupOrder, isLE2 = false) {
    hash2 = ensureBytes("privateHash", hash2);
    const hashLen = hash2.length;
    const minLen = nLength(groupOrder).nByteLength + 8;
    if (minLen < 24 || hashLen < minLen || hashLen > 1024)
      throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);
    const num = isLE2 ? bytesToNumberLE(hash2) : bytesToNumberBE(hash2);
    return mod(num, groupOrder - _1n$6) + _1n$6;
  }
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  const _0n$3 = BigInt(0);
  const _1n$5 = BigInt(1);
  function wNAF(c, bits2) {
    const constTimeNegate = (condition, item) => {
      const neg = item.negate();
      return condition ? neg : item;
    };
    const opts = (W) => {
      const windows = Math.ceil(bits2 / W) + 1;
      const windowSize = 2 ** (W - 1);
      return { windows, windowSize };
    };
    return {
      constTimeNegate,
      // non-const time multiplication ladder
      unsafeLadder(elm, n) {
        let p = c.ZERO;
        let d = elm;
        while (n > _0n$3) {
          if (n & _1n$5)
            p = p.add(d);
          d = d.double();
          n >>= _1n$5;
        }
        return p;
      },
      /**
       * Creates a wNAF precomputation window. Used for caching.
       * Default window size is set by `utils.precompute()` and is equal to 8.
       * Number of precomputed points depends on the curve size:
       * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
       * - 𝑊 is the window size
       * - 𝑛 is the bitlength of the curve order.
       * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
       * @returns precomputed point tables flattened to a single array
       */
      precomputeWindow(elm, W) {
        const { windows, windowSize } = opts(W);
        const points = [];
        let p = elm;
        let base = p;
        for (let window2 = 0; window2 < windows; window2++) {
          base = p;
          points.push(base);
          for (let i2 = 1; i2 < windowSize; i2++) {
            base = base.add(p);
            points.push(base);
          }
          p = base.double();
        }
        return points;
      },
      /**
       * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
       * @param W window size
       * @param precomputes precomputed tables
       * @param n scalar (we don't check here, but should be less than curve order)
       * @returns real and fake (for const-time) points
       */
      wNAF(W, precomputes, n) {
        const { windows, windowSize } = opts(W);
        let p = c.ZERO;
        let f = c.BASE;
        const mask = BigInt(2 ** W - 1);
        const maxNumber = 2 ** W;
        const shiftBy = BigInt(W);
        for (let window2 = 0; window2 < windows; window2++) {
          const offset = window2 * windowSize;
          let wbits = Number(n & mask);
          n >>= shiftBy;
          if (wbits > windowSize) {
            wbits -= maxNumber;
            n += _1n$5;
          }
          const offset1 = offset;
          const offset2 = offset + Math.abs(wbits) - 1;
          const cond1 = window2 % 2 !== 0;
          const cond2 = wbits < 0;
          if (wbits === 0) {
            f = f.add(constTimeNegate(cond1, precomputes[offset1]));
          } else {
            p = p.add(constTimeNegate(cond2, precomputes[offset2]));
          }
        }
        return { p, f };
      },
      wNAFCached(P, precomputesMap, n, transform) {
        const W = P._WINDOW_SIZE || 1;
        let comp = precomputesMap.get(P);
        if (!comp) {
          comp = this.precomputeWindow(P, W);
          if (W !== 1) {
            precomputesMap.set(P, transform(comp));
          }
        }
        return this.wNAF(W, comp, n);
      }
    };
  }
  function validateBasic(curve) {
    validateField(curve.Fp);
    validateObject(curve, {
      n: "bigint",
      h: "bigint",
      Gx: "field",
      Gy: "field"
    }, {
      nBitLength: "isSafeInteger",
      nByteLength: "isSafeInteger"
    });
    return Object.freeze({
      ...nLength(curve.n, curve.nBitLength),
      ...curve,
      ...{ p: curve.Fp.ORDER }
    });
  }
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  function validatePointOpts(curve) {
    const opts = validateBasic(curve);
    validateObject(opts, {
      a: "field",
      b: "field"
    }, {
      allowedPrivateKeyLengths: "array",
      wrapPrivateKey: "boolean",
      isTorsionFree: "function",
      clearCofactor: "function",
      allowInfinityPoint: "boolean",
      fromBytes: "function",
      toBytes: "function"
    });
    const { endo, Fp: Fp2, a } = opts;
    if (endo) {
      if (!Fp2.eql(a, Fp2.ZERO)) {
        throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
      }
      if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
        throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
      }
    }
    return Object.freeze({ ...opts });
  }
  const { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;
  const DER = {
    // asn.1 DER encoding utils
    Err: class DERErr extends Error {
      constructor(m2 = "") {
        super(m2);
      }
    },
    _parseInt(data2) {
      const { Err: E } = DER;
      if (data2.length < 2 || data2[0] !== 2)
        throw new E("Invalid signature integer tag");
      const len = data2[1];
      const res = data2.subarray(2, len + 2);
      if (!len || res.length !== len)
        throw new E("Invalid signature integer: wrong length");
      if (res[0] & 128)
        throw new E("Invalid signature integer: negative");
      if (res[0] === 0 && !(res[1] & 128))
        throw new E("Invalid signature integer: unnecessary leading zero");
      return { d: b2n(res), l: data2.subarray(len + 2) };
    },
    toSig(hex2) {
      const { Err: E } = DER;
      const data2 = typeof hex2 === "string" ? h2b(hex2) : hex2;
      if (!(data2 instanceof Uint8Array))
        throw new Error("ui8a expected");
      let l2 = data2.length;
      if (l2 < 2 || data2[0] != 48)
        throw new E("Invalid signature tag");
      if (data2[1] !== l2 - 2)
        throw new E("Invalid signature: incorrect length");
      const { d: r2, l: sBytes } = DER._parseInt(data2.subarray(2));
      const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);
      if (rBytesLeft.length)
        throw new E("Invalid signature: left bytes after parsing");
      return { r: r2, s };
    },
    hexFromSig(sig2) {
      const slice2 = (s2) => Number.parseInt(s2[0], 16) & 8 ? "00" + s2 : s2;
      const h = (num) => {
        const hex2 = num.toString(16);
        return hex2.length & 1 ? `0${hex2}` : hex2;
      };
      const s = slice2(h(sig2.s));
      const r2 = slice2(h(sig2.r));
      const shl = s.length / 2;
      const rhl = r2.length / 2;
      const sl = h(shl);
      const rl = h(rhl);
      return `30${h(rhl + shl + 4)}02${rl}${r2}02${sl}${s}`;
    }
  };
  const _0n$2 = BigInt(0), _1n$4 = BigInt(1);
  BigInt(2);
  const _3n = BigInt(3);
  BigInt(4);
  function weierstrassPoints(opts) {
    const CURVE = validatePointOpts(opts);
    const { Fp: Fp2 } = CURVE;
    const toBytes2 = CURVE.toBytes || ((c, point, isCompressed) => {
      const a = point.toAffine();
      return concatBytes(Uint8Array.from([4]), Fp2.toBytes(a.x), Fp2.toBytes(a.y));
    });
    const fromBytes = CURVE.fromBytes || ((bytes2) => {
      const tail = bytes2.subarray(1);
      const x = Fp2.fromBytes(tail.subarray(0, Fp2.BYTES));
      const y = Fp2.fromBytes(tail.subarray(Fp2.BYTES, 2 * Fp2.BYTES));
      return { x, y };
    });
    function weierstrassEquation(x) {
      const { a, b } = CURVE;
      const x2 = Fp2.sqr(x);
      const x3 = Fp2.mul(x2, x);
      return Fp2.add(Fp2.add(x3, Fp2.mul(x, a)), b);
    }
    if (!Fp2.eql(Fp2.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
      throw new Error("bad generator point: equation left != right");
    function isWithinCurveOrder(num) {
      return typeof num === "bigint" && _0n$2 < num && num < CURVE.n;
    }
    function assertGE(num) {
      if (!isWithinCurveOrder(num))
        throw new Error("Expected valid bigint: 0 < bigint < curve.n");
    }
    function normPrivateKeyToScalar(key) {
      const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
      if (lengths && typeof key !== "bigint") {
        if (key instanceof Uint8Array)
          key = bytesToHex(key);
        if (typeof key !== "string" || !lengths.includes(key.length))
          throw new Error("Invalid key");
        key = key.padStart(nByteLength * 2, "0");
      }
      let num;
      try {
        num = typeof key === "bigint" ? key : bytesToNumberBE(ensureBytes("private key", key, nByteLength));
      } catch (error) {
        throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
      }
      if (wrapPrivateKey)
        num = mod(num, n);
      assertGE(num);
      return num;
    }
    const pointPrecomputes = /* @__PURE__ */ new Map();
    function assertPrjPoint(other) {
      if (!(other instanceof Point))
        throw new Error("ProjectivePoint expected");
    }
    class Point {
      constructor(px, py, pz) {
        this.px = px;
        this.py = py;
        this.pz = pz;
        if (px == null || !Fp2.isValid(px))
          throw new Error("x required");
        if (py == null || !Fp2.isValid(py))
          throw new Error("y required");
        if (pz == null || !Fp2.isValid(pz))
          throw new Error("z required");
      }
      // Does not validate if the point is on-curve.
      // Use fromHex instead, or call assertValidity() later.
      static fromAffine(p) {
        const { x, y } = p || {};
        if (!p || !Fp2.isValid(x) || !Fp2.isValid(y))
          throw new Error("invalid affine point");
        if (p instanceof Point)
          throw new Error("projective point not allowed");
        const is0 = (i2) => Fp2.eql(i2, Fp2.ZERO);
        if (is0(x) && is0(y))
          return Point.ZERO;
        return new Point(x, y, Fp2.ONE);
      }
      get x() {
        return this.toAffine().x;
      }
      get y() {
        return this.toAffine().y;
      }
      /**
       * Takes a bunch of Projective Points but executes only one
       * inversion on all of them. Inversion is very slow operation,
       * so this improves performance massively.
       * Optimization: converts a list of projective points to a list of identical points with Z=1.
       */
      static normalizeZ(points) {
        const toInv = Fp2.invertBatch(points.map((p) => p.pz));
        return points.map((p, i2) => p.toAffine(toInv[i2])).map(Point.fromAffine);
      }
      /**
       * Converts hash string or Uint8Array to Point.
       * @param hex short/long ECDSA hex
       */
      static fromHex(hex2) {
        const P = Point.fromAffine(fromBytes(ensureBytes("pointHex", hex2)));
        P.assertValidity();
        return P;
      }
      // Multiplies generator point by privateKey.
      static fromPrivateKey(privateKey) {
        return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));
      }
      // "Private method", don't use it directly
      _setWindowSize(windowSize) {
        this._WINDOW_SIZE = windowSize;
        pointPrecomputes.delete(this);
      }
      // A point on curve is valid if it conforms to equation.
      assertValidity() {
        if (this.is0()) {
          if (CURVE.allowInfinityPoint)
            return;
          throw new Error("bad point: ZERO");
        }
        const { x, y } = this.toAffine();
        if (!Fp2.isValid(x) || !Fp2.isValid(y))
          throw new Error("bad point: x or y not FE");
        const left = Fp2.sqr(y);
        const right = weierstrassEquation(x);
        if (!Fp2.eql(left, right))
          throw new Error("bad point: equation left != right");
        if (!this.isTorsionFree())
          throw new Error("bad point: not in prime-order subgroup");
      }
      hasEvenY() {
        const { y } = this.toAffine();
        if (Fp2.isOdd)
          return !Fp2.isOdd(y);
        throw new Error("Field doesn't support isOdd");
      }
      /**
       * Compare one point to another.
       */
      equals(other) {
        assertPrjPoint(other);
        const { px: X1, py: Y1, pz: Z1 } = this;
        const { px: X2, py: Y2, pz: Z2 } = other;
        const U1 = Fp2.eql(Fp2.mul(X1, Z2), Fp2.mul(X2, Z1));
        const U2 = Fp2.eql(Fp2.mul(Y1, Z2), Fp2.mul(Y2, Z1));
        return U1 && U2;
      }
      /**
       * Flips point to one corresponding to (x, -y) in Affine coordinates.
       */
      negate() {
        return new Point(this.px, Fp2.neg(this.py), this.pz);
      }
      // Renes-Costello-Batina exception-free doubling formula.
      // There is 30% faster Jacobian formula, but it is not complete.
      // https://eprint.iacr.org/2015/1060, algorithm 3
      // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
      double() {
        const { a, b } = CURVE;
        const b3 = Fp2.mul(b, _3n);
        const { px: X1, py: Y1, pz: Z1 } = this;
        let X3 = Fp2.ZERO, Y3 = Fp2.ZERO, Z3 = Fp2.ZERO;
        let t0 = Fp2.mul(X1, X1);
        let t1 = Fp2.mul(Y1, Y1);
        let t2 = Fp2.mul(Z1, Z1);
        let t3 = Fp2.mul(X1, Y1);
        t3 = Fp2.add(t3, t3);
        Z3 = Fp2.mul(X1, Z1);
        Z3 = Fp2.add(Z3, Z3);
        X3 = Fp2.mul(a, Z3);
        Y3 = Fp2.mul(b3, t2);
        Y3 = Fp2.add(X3, Y3);
        X3 = Fp2.sub(t1, Y3);
        Y3 = Fp2.add(t1, Y3);
        Y3 = Fp2.mul(X3, Y3);
        X3 = Fp2.mul(t3, X3);
        Z3 = Fp2.mul(b3, Z3);
        t2 = Fp2.mul(a, t2);
        t3 = Fp2.sub(t0, t2);
        t3 = Fp2.mul(a, t3);
        t3 = Fp2.add(t3, Z3);
        Z3 = Fp2.add(t0, t0);
        t0 = Fp2.add(Z3, t0);
        t0 = Fp2.add(t0, t2);
        t0 = Fp2.mul(t0, t3);
        Y3 = Fp2.add(Y3, t0);
        t2 = Fp2.mul(Y1, Z1);
        t2 = Fp2.add(t2, t2);
        t0 = Fp2.mul(t2, t3);
        X3 = Fp2.sub(X3, t0);
        Z3 = Fp2.mul(t2, t1);
        Z3 = Fp2.add(Z3, Z3);
        Z3 = Fp2.add(Z3, Z3);
        return new Point(X3, Y3, Z3);
      }
      // Renes-Costello-Batina exception-free addition formula.
      // There is 30% faster Jacobian formula, but it is not complete.
      // https://eprint.iacr.org/2015/1060, algorithm 1
      // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
      add(other) {
        assertPrjPoint(other);
        const { px: X1, py: Y1, pz: Z1 } = this;
        const { px: X2, py: Y2, pz: Z2 } = other;
        let X3 = Fp2.ZERO, Y3 = Fp2.ZERO, Z3 = Fp2.ZERO;
        const a = CURVE.a;
        const b3 = Fp2.mul(CURVE.b, _3n);
        let t0 = Fp2.mul(X1, X2);
        let t1 = Fp2.mul(Y1, Y2);
        let t2 = Fp2.mul(Z1, Z2);
        let t3 = Fp2.add(X1, Y1);
        let t4 = Fp2.add(X2, Y2);
        t3 = Fp2.mul(t3, t4);
        t4 = Fp2.add(t0, t1);
        t3 = Fp2.sub(t3, t4);
        t4 = Fp2.add(X1, Z1);
        let t5 = Fp2.add(X2, Z2);
        t4 = Fp2.mul(t4, t5);
        t5 = Fp2.add(t0, t2);
        t4 = Fp2.sub(t4, t5);
        t5 = Fp2.add(Y1, Z1);
        X3 = Fp2.add(Y2, Z2);
        t5 = Fp2.mul(t5, X3);
        X3 = Fp2.add(t1, t2);
        t5 = Fp2.sub(t5, X3);
        Z3 = Fp2.mul(a, t4);
        X3 = Fp2.mul(b3, t2);
        Z3 = Fp2.add(X3, Z3);
        X3 = Fp2.sub(t1, Z3);
        Z3 = Fp2.add(t1, Z3);
        Y3 = Fp2.mul(X3, Z3);
        t1 = Fp2.add(t0, t0);
        t1 = Fp2.add(t1, t0);
        t2 = Fp2.mul(a, t2);
        t4 = Fp2.mul(b3, t4);
        t1 = Fp2.add(t1, t2);
        t2 = Fp2.sub(t0, t2);
        t2 = Fp2.mul(a, t2);
        t4 = Fp2.add(t4, t2);
        t0 = Fp2.mul(t1, t4);
        Y3 = Fp2.add(Y3, t0);
        t0 = Fp2.mul(t5, t4);
        X3 = Fp2.mul(t3, X3);
        X3 = Fp2.sub(X3, t0);
        t0 = Fp2.mul(t3, t1);
        Z3 = Fp2.mul(t5, Z3);
        Z3 = Fp2.add(Z3, t0);
        return new Point(X3, Y3, Z3);
      }
      subtract(other) {
        return this.add(other.negate());
      }
      is0() {
        return this.equals(Point.ZERO);
      }
      wNAF(n) {
        return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {
          const toInv = Fp2.invertBatch(comp.map((p) => p.pz));
          return comp.map((p, i2) => p.toAffine(toInv[i2])).map(Point.fromAffine);
        });
      }
      /**
       * Non-constant-time multiplication. Uses double-and-add algorithm.
       * It's faster, but should only be used when you don't care about
       * an exposed private key e.g. sig verification, which works over *public* keys.
       */
      multiplyUnsafe(n) {
        const I = Point.ZERO;
        if (n === _0n$2)
          return I;
        assertGE(n);
        if (n === _1n$4)
          return this;
        const { endo } = CURVE;
        if (!endo)
          return wnaf.unsafeLadder(this, n);
        let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
        let k1p = I;
        let k2p = I;
        let d = this;
        while (k1 > _0n$2 || k2 > _0n$2) {
          if (k1 & _1n$4)
            k1p = k1p.add(d);
          if (k2 & _1n$4)
            k2p = k2p.add(d);
          d = d.double();
          k1 >>= _1n$4;
          k2 >>= _1n$4;
        }
        if (k1neg)
          k1p = k1p.negate();
        if (k2neg)
          k2p = k2p.negate();
        k2p = new Point(Fp2.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
        return k1p.add(k2p);
      }
      /**
       * Constant time multiplication.
       * Uses wNAF method. Windowed method may be 10% faster,
       * but takes 2x longer to generate and consumes 2x memory.
       * Uses precomputes when available.
       * Uses endomorphism for Koblitz curves.
       * @param scalar by which the point would be multiplied
       * @returns New point
       */
      multiply(scalar) {
        assertGE(scalar);
        let n = scalar;
        let point, fake;
        const { endo } = CURVE;
        if (endo) {
          const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
          let { p: k1p, f: f1p } = this.wNAF(k1);
          let { p: k2p, f: f2p } = this.wNAF(k2);
          k1p = wnaf.constTimeNegate(k1neg, k1p);
          k2p = wnaf.constTimeNegate(k2neg, k2p);
          k2p = new Point(Fp2.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
          point = k1p.add(k2p);
          fake = f1p.add(f2p);
        } else {
          const { p, f } = this.wNAF(n);
          point = p;
          fake = f;
        }
        return Point.normalizeZ([point, fake])[0];
      }
      /**
       * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
       * Not using Strauss-Shamir trick: precomputation tables are faster.
       * The trick could be useful if both P and Q are not G (not in our case).
       * @returns non-zero affine point
       */
      multiplyAndAddUnsafe(Q, a, b) {
        const G = Point.BASE;
        const mul = (P, a2) => a2 === _0n$2 || a2 === _1n$4 || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
        const sum = mul(this, a).add(mul(Q, b));
        return sum.is0() ? void 0 : sum;
      }
      // Converts Projective point to affine (x, y) coordinates.
      // Can accept precomputed Z^-1 - for example, from invertBatch.
      // (x, y, z) ∋ (x=x/z, y=y/z)
      toAffine(iz) {
        const { px: x, py: y, pz: z2 } = this;
        const is0 = this.is0();
        if (iz == null)
          iz = is0 ? Fp2.ONE : Fp2.inv(z2);
        const ax = Fp2.mul(x, iz);
        const ay = Fp2.mul(y, iz);
        const zz = Fp2.mul(z2, iz);
        if (is0)
          return { x: Fp2.ZERO, y: Fp2.ZERO };
        if (!Fp2.eql(zz, Fp2.ONE))
          throw new Error("invZ was invalid");
        return { x: ax, y: ay };
      }
      isTorsionFree() {
        const { h: cofactor, isTorsionFree } = CURVE;
        if (cofactor === _1n$4)
          return true;
        if (isTorsionFree)
          return isTorsionFree(Point, this);
        throw new Error("isTorsionFree() has not been declared for the elliptic curve");
      }
      clearCofactor() {
        const { h: cofactor, clearCofactor } = CURVE;
        if (cofactor === _1n$4)
          return this;
        if (clearCofactor)
          return clearCofactor(Point, this);
        return this.multiplyUnsafe(CURVE.h);
      }
      toRawBytes(isCompressed = true) {
        this.assertValidity();
        return toBytes2(Point, this, isCompressed);
      }
      toHex(isCompressed = true) {
        return bytesToHex(this.toRawBytes(isCompressed));
      }
    }
    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp2.ONE);
    Point.ZERO = new Point(Fp2.ZERO, Fp2.ONE, Fp2.ZERO);
    const _bits = CURVE.nBitLength;
    const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
    return {
      CURVE,
      ProjectivePoint: Point,
      normPrivateKeyToScalar,
      weierstrassEquation,
      isWithinCurveOrder
    };
  }
  function validateOpts$1(curve) {
    const opts = validateBasic(curve);
    validateObject(opts, {
      hash: "hash",
      hmac: "function",
      randomBytes: "function"
    }, {
      bits2int: "function",
      bits2int_modN: "function",
      lowS: "boolean"
    });
    return Object.freeze({ lowS: true, ...opts });
  }
  function weierstrass(curveDef) {
    const CURVE = validateOpts$1(curveDef);
    const { Fp: Fp2, n: CURVE_ORDER } = CURVE;
    const compressedLen = Fp2.BYTES + 1;
    const uncompressedLen = 2 * Fp2.BYTES + 1;
    function isValidFieldElement(num) {
      return _0n$2 < num && num < Fp2.ORDER;
    }
    function modN(a) {
      return mod(a, CURVE_ORDER);
    }
    function invN(a) {
      return invert(a, CURVE_ORDER);
    }
    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
      ...CURVE,
      toBytes(c, point, isCompressed) {
        const a = point.toAffine();
        const x = Fp2.toBytes(a.x);
        const cat = concatBytes;
        if (isCompressed) {
          return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
        } else {
          return cat(Uint8Array.from([4]), x, Fp2.toBytes(a.y));
        }
      },
      fromBytes(bytes2) {
        const len = bytes2.length;
        const head = bytes2[0];
        const tail = bytes2.subarray(1);
        if (len === compressedLen && (head === 2 || head === 3)) {
          const x = bytesToNumberBE(tail);
          if (!isValidFieldElement(x))
            throw new Error("Point is not on curve");
          const y2 = weierstrassEquation(x);
          let y = Fp2.sqrt(y2);
          const isYOdd = (y & _1n$4) === _1n$4;
          const isHeadOdd = (head & 1) === 1;
          if (isHeadOdd !== isYOdd)
            y = Fp2.neg(y);
          return { x, y };
        } else if (len === uncompressedLen && head === 4) {
          const x = Fp2.fromBytes(tail.subarray(0, Fp2.BYTES));
          const y = Fp2.fromBytes(tail.subarray(Fp2.BYTES, 2 * Fp2.BYTES));
          return { x, y };
        } else {
          throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
        }
      }
    });
    const numToNByteStr = (num) => bytesToHex(numberToBytesBE(num, CURVE.nByteLength));
    function isBiggerThanHalfOrder(number2) {
      const HALF = CURVE_ORDER >> _1n$4;
      return number2 > HALF;
    }
    function normalizeS(s) {
      return isBiggerThanHalfOrder(s) ? modN(-s) : s;
    }
    const slcNum = (b, from2, to) => bytesToNumberBE(b.slice(from2, to));
    class Signature {
      constructor(r2, s, recovery) {
        this.r = r2;
        this.s = s;
        this.recovery = recovery;
        this.assertValidity();
      }
      // pair (bytes of r, bytes of s)
      static fromCompact(hex2) {
        const l2 = CURVE.nByteLength;
        hex2 = ensureBytes("compactSignature", hex2, l2 * 2);
        return new Signature(slcNum(hex2, 0, l2), slcNum(hex2, l2, 2 * l2));
      }
      // DER encoded ECDSA signature
      // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
      static fromDER(hex2) {
        const { r: r2, s } = DER.toSig(ensureBytes("DER", hex2));
        return new Signature(r2, s);
      }
      assertValidity() {
        if (!isWithinCurveOrder(this.r))
          throw new Error("r must be 0 < r < CURVE.n");
        if (!isWithinCurveOrder(this.s))
          throw new Error("s must be 0 < s < CURVE.n");
      }
      addRecoveryBit(recovery) {
        return new Signature(this.r, this.s, recovery);
      }
      recoverPublicKey(msgHash) {
        const { r: r2, s, recovery: rec } = this;
        const h = bits2int_modN(ensureBytes("msgHash", msgHash));
        if (rec == null || ![0, 1, 2, 3].includes(rec))
          throw new Error("recovery id invalid");
        const radj = rec === 2 || rec === 3 ? r2 + CURVE.n : r2;
        if (radj >= Fp2.ORDER)
          throw new Error("recovery id 2 or 3 invalid");
        const prefix2 = (rec & 1) === 0 ? "02" : "03";
        const R = Point.fromHex(prefix2 + numToNByteStr(radj));
        const ir = invN(radj);
        const u1 = modN(-h * ir);
        const u2 = modN(s * ir);
        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);
        if (!Q)
          throw new Error("point at infinify");
        Q.assertValidity();
        return Q;
      }
      // Signatures should be low-s, to prevent malleability.
      hasHighS() {
        return isBiggerThanHalfOrder(this.s);
      }
      normalizeS() {
        return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
      }
      // DER-encoded
      toDERRawBytes() {
        return hexToBytes(this.toDERHex());
      }
      toDERHex() {
        return DER.hexFromSig({ r: this.r, s: this.s });
      }
      // padded bytes of r, then padded bytes of s
      toCompactRawBytes() {
        return hexToBytes(this.toCompactHex());
      }
      toCompactHex() {
        return numToNByteStr(this.r) + numToNByteStr(this.s);
      }
    }
    const utils2 = {
      isValidPrivateKey(privateKey) {
        try {
          normPrivateKeyToScalar(privateKey);
          return true;
        } catch (error) {
          return false;
        }
      },
      normPrivateKeyToScalar,
      /**
       * Produces cryptographically secure private key from random of size (nBitLength+64)
       * as per FIPS 186 B.4.1 with modulo bias being neglible.
       */
      randomPrivateKey: () => {
        const rand = CURVE.randomBytes(Fp2.BYTES + 8);
        const num = hashToPrivateScalar(rand, CURVE_ORDER);
        return numberToBytesBE(num, CURVE.nByteLength);
      },
      /**
       * Creates precompute table for an arbitrary EC point. Makes point "cached".
       * Allows to massively speed-up `point.multiply(scalar)`.
       * @returns cached point
       * @example
       * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
       * fast.multiply(privKey); // much faster ECDH now
       */
      precompute(windowSize = 8, point = Point.BASE) {
        point._setWindowSize(windowSize);
        point.multiply(BigInt(3));
        return point;
      }
    };
    function getPublicKey(privateKey, isCompressed = true) {
      return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
    }
    function isProbPub(item) {
      const arr2 = item instanceof Uint8Array;
      const str = typeof item === "string";
      const len = (arr2 || str) && item.length;
      if (arr2)
        return len === compressedLen || len === uncompressedLen;
      if (str)
        return len === 2 * compressedLen || len === 2 * uncompressedLen;
      if (item instanceof Point)
        return true;
      return false;
    }
    function getSharedSecret(privateA, publicB, isCompressed = true) {
      if (isProbPub(privateA))
        throw new Error("first arg must be private key");
      if (!isProbPub(publicB))
        throw new Error("second arg must be public key");
      const b = Point.fromHex(publicB);
      return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
    }
    const bits2int = CURVE.bits2int || function(bytes2) {
      const num = bytesToNumberBE(bytes2);
      const delta = bytes2.length * 8 - CURVE.nBitLength;
      return delta > 0 ? num >> BigInt(delta) : num;
    };
    const bits2int_modN = CURVE.bits2int_modN || function(bytes2) {
      return modN(bits2int(bytes2));
    };
    const ORDER_MASK = bitMask(CURVE.nBitLength);
    function int2octets(num) {
      if (typeof num !== "bigint")
        throw new Error("bigint expected");
      if (!(_0n$2 <= num && num < ORDER_MASK))
        throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
      return numberToBytesBE(num, CURVE.nByteLength);
    }
    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
      if (["recovered", "canonical"].some((k) => k in opts))
        throw new Error("sign() legacy options not supported");
      const { hash: hash2, randomBytes: randomBytes2 } = CURVE;
      let { lowS, prehash, extraEntropy: ent } = opts;
      if (lowS == null)
        lowS = true;
      msgHash = ensureBytes("msgHash", msgHash);
      if (prehash)
        msgHash = ensureBytes("prehashed msgHash", hash2(msgHash));
      const h1int = bits2int_modN(msgHash);
      const d = normPrivateKeyToScalar(privateKey);
      const seedArgs = [int2octets(d), int2octets(h1int)];
      if (ent != null) {
        const e = ent === true ? randomBytes2(Fp2.BYTES) : ent;
        seedArgs.push(ensureBytes("extraEntropy", e, Fp2.BYTES));
      }
      const seed = concatBytes(...seedArgs);
      const m2 = h1int;
      function k2sig(kBytes) {
        const k = bits2int(kBytes);
        if (!isWithinCurveOrder(k))
          return;
        const ik = invN(k);
        const q = Point.BASE.multiply(k).toAffine();
        const r2 = modN(q.x);
        if (r2 === _0n$2)
          return;
        const s = modN(ik * modN(m2 + r2 * d));
        if (s === _0n$2)
          return;
        let recovery = (q.x === r2 ? 0 : 2) | Number(q.y & _1n$4);
        let normS = s;
        if (lowS && isBiggerThanHalfOrder(s)) {
          normS = normalizeS(s);
          recovery ^= 1;
        }
        return new Signature(r2, normS, recovery);
      }
      return { seed, k2sig };
    }
    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
    function sign2(msgHash, privKey, opts = defaultSigOpts) {
      const { seed, k2sig } = prepSig(msgHash, privKey, opts);
      const C = CURVE;
      const drbg = createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
      return drbg(seed, k2sig);
    }
    Point.BASE._setWindowSize(8);
    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
      var _a;
      const sg = signature;
      msgHash = ensureBytes("msgHash", msgHash);
      publicKey = ensureBytes("publicKey", publicKey);
      if ("strict" in opts)
        throw new Error("options.strict was renamed to lowS");
      const { lowS, prehash } = opts;
      let _sig = void 0;
      let P;
      try {
        if (typeof sg === "string" || sg instanceof Uint8Array) {
          try {
            _sig = Signature.fromDER(sg);
          } catch (derError) {
            if (!(derError instanceof DER.Err))
              throw derError;
            _sig = Signature.fromCompact(sg);
          }
        } else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
          const { r: r3, s: s2 } = sg;
          _sig = new Signature(r3, s2);
        } else {
          throw new Error("PARSE");
        }
        P = Point.fromHex(publicKey);
      } catch (error) {
        if (error.message === "PARSE")
          throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
        return false;
      }
      if (lowS && _sig.hasHighS())
        return false;
      if (prehash)
        msgHash = CURVE.hash(msgHash);
      const { r: r2, s } = _sig;
      const h = bits2int_modN(msgHash);
      const is = invN(s);
      const u1 = modN(h * is);
      const u2 = modN(r2 * is);
      const R = (_a = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)) == null ? void 0 : _a.toAffine();
      if (!R)
        return false;
      const v = modN(R.x);
      return v === r2;
    }
    return {
      CURVE,
      getPublicKey,
      getSharedSecret,
      sign: sign2,
      verify,
      ProjectivePoint: Point,
      Signature,
      utils: utils2
    };
  }
  class HMAC extends Hash {
    constructor(hash2, _key) {
      super();
      this.finished = false;
      this.destroyed = false;
      assert.hash(hash2);
      const key = toBytes(_key);
      this.iHash = hash2.create();
      if (typeof this.iHash.update !== "function")
        throw new Error("Expected instance of class which extends utils.Hash");
      this.blockLen = this.iHash.blockLen;
      this.outputLen = this.iHash.outputLen;
      const blockLen = this.blockLen;
      const pad = new Uint8Array(blockLen);
      pad.set(key.length > blockLen ? hash2.create().update(key).digest() : key);
      for (let i2 = 0; i2 < pad.length; i2++)
        pad[i2] ^= 54;
      this.iHash.update(pad);
      this.oHash = hash2.create();
      for (let i2 = 0; i2 < pad.length; i2++)
        pad[i2] ^= 54 ^ 92;
      this.oHash.update(pad);
      pad.fill(0);
    }
    update(buf) {
      assert.exists(this);
      this.iHash.update(buf);
      return this;
    }
    digestInto(out) {
      assert.exists(this);
      assert.bytes(out, this.outputLen);
      this.finished = true;
      this.iHash.digestInto(out);
      this.oHash.update(out);
      this.oHash.digestInto(out);
      this.destroy();
    }
    digest() {
      const out = new Uint8Array(this.oHash.outputLen);
      this.digestInto(out);
      return out;
    }
    _cloneInto(to) {
      to || (to = Object.create(Object.getPrototypeOf(this), {}));
      const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
      to = to;
      to.finished = finished;
      to.destroyed = destroyed;
      to.blockLen = blockLen;
      to.outputLen = outputLen;
      to.oHash = oHash._cloneInto(to.oHash);
      to.iHash = iHash._cloneInto(to.iHash);
      return to;
    }
    destroy() {
      this.destroyed = true;
      this.oHash.destroy();
      this.iHash.destroy();
    }
  }
  const hmac = (hash2, key, message) => new HMAC(hash2, key).update(message).digest();
  hmac.create = (hash2, key) => new HMAC(hash2, key);
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  function getHash$2(hash2) {
    return {
      hash: hash2,
      hmac: (key, ...msgs) => hmac(hash2, key, concatBytes$1(...msgs)),
      randomBytes
    };
  }
  function createCurve(curveDef, defHash) {
    const create = (hash2) => weierstrass({ ...curveDef, ...getHash$2(hash2) });
    return Object.freeze({ ...create(defHash), create });
  }
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  const secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
  const secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
  const _1n$3 = BigInt(1);
  const _2n$3 = BigInt(2);
  const divNearest = (a, b) => (a + b / _2n$3) / b;
  function sqrtMod(y) {
    const P = secp256k1P;
    const _3n2 = BigInt(3), _6n2 = BigInt(6), _11n2 = BigInt(11), _22n = BigInt(22);
    const _23n2 = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
    const b2 = y * y * y % P;
    const b3 = b2 * b2 * y % P;
    const b6 = pow2(b3, _3n2, P) * b3 % P;
    const b9 = pow2(b6, _3n2, P) * b3 % P;
    const b11 = pow2(b9, _2n$3, P) * b2 % P;
    const b22 = pow2(b11, _11n2, P) * b11 % P;
    const b44 = pow2(b22, _22n, P) * b22 % P;
    const b88 = pow2(b44, _44n, P) * b44 % P;
    const b176 = pow2(b88, _88n, P) * b88 % P;
    const b220 = pow2(b176, _44n, P) * b44 % P;
    const b223 = pow2(b220, _3n2, P) * b3 % P;
    const t1 = pow2(b223, _23n2, P) * b22 % P;
    const t2 = pow2(t1, _6n2, P) * b2 % P;
    const root = pow2(t2, _2n$3, P);
    if (!Fp$1.eql(Fp$1.sqr(root), y))
      throw new Error("Cannot find square root");
    return root;
  }
  const Fp$1 = Field(secp256k1P, void 0, void 0, { sqrt: sqrtMod });
  const secp256k1 = createCurve({
    a: BigInt(0),
    b: BigInt(7),
    Fp: Fp$1,
    n: secp256k1N,
    // Base point (x, y) aka generator point
    Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
    Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
    h: BigInt(1),
    lowS: true,
    /**
     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
     */
    endo: {
      beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
      splitScalar: (k) => {
        const n = secp256k1N;
        const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
        const b1 = -_1n$3 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
        const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
        const b2 = a1;
        const POW_2_128 = BigInt("0x100000000000000000000000000000000");
        const c1 = divNearest(b2 * k, n);
        const c2 = divNearest(-b1 * k, n);
        let k1 = mod(k - c1 * a1 - c2 * a2, n);
        let k2 = mod(-c1 * b1 - c2 * b2, n);
        const k1neg = k1 > POW_2_128;
        const k2neg = k2 > POW_2_128;
        if (k1neg)
          k1 = n - k1;
        if (k2neg)
          k2 = n - k2;
        if (k1 > POW_2_128 || k2 > POW_2_128) {
          throw new Error("splitScalar: Endomorphism failed, k=" + k);
        }
        return { k1neg, k1, k2neg, k2 };
      }
    }
  }, sha256);
  BigInt(0);
  function secp256k1PairFromSeed(seed, onlyJs) {
    if (seed.length !== 32) {
      throw new Error("Expected valid 32-byte private key as a seed");
    }
    if (!hasBigInt || !onlyJs && isReady()) {
      const full = secp256k1FromSeed(seed);
      const publicKey = full.slice(32);
      if (u8aEmpty(publicKey)) {
        throw new Error("Invalid publicKey generated from WASM interface");
      }
      return {
        publicKey,
        secretKey: full.slice(0, 32)
      };
    }
    return {
      publicKey: secp256k1.getPublicKey(seed, true),
      secretKey: seed
    };
  }
  function createSeedDeriveFn(fromSeed, derive2) {
    return (keypair, { chainCode, isHard }) => {
      if (!isHard) {
        throw new Error("A soft key was found in the path and is not supported");
      }
      return fromSeed(derive2(keypair.secretKey.subarray(0, 32), chainCode));
    };
  }
  const keyHdkdEcdsa = /* @__PURE__ */ createSeedDeriveFn(secp256k1PairFromSeed, secp256k1DeriveHard);
  const HDKD = compactAddLength(stringToU8a("Ed25519HDKD"));
  function ed25519DeriveHard(seed, chainCode) {
    if (!isU8a(chainCode) || chainCode.length !== 32) {
      throw new Error("Invalid chainCode passed to derive");
    }
    return blake2AsU8a(u8aConcat(HDKD, seed, chainCode));
  }
  function randomAsU8a(length2 = 32) {
    return getRandomValues(new Uint8Array(length2));
  }
  const randomAsHex = /* @__PURE__ */ createAsHex(randomAsU8a);
  const [SHA512_Kh, SHA512_Kl] = u64$1.split([
    "0x428a2f98d728ae22",
    "0x7137449123ef65cd",
    "0xb5c0fbcfec4d3b2f",
    "0xe9b5dba58189dbbc",
    "0x3956c25bf348b538",
    "0x59f111f1b605d019",
    "0x923f82a4af194f9b",
    "0xab1c5ed5da6d8118",
    "0xd807aa98a3030242",
    "0x12835b0145706fbe",
    "0x243185be4ee4b28c",
    "0x550c7dc3d5ffb4e2",
    "0x72be5d74f27b896f",
    "0x80deb1fe3b1696b1",
    "0x9bdc06a725c71235",
    "0xc19bf174cf692694",
    "0xe49b69c19ef14ad2",
    "0xefbe4786384f25e3",
    "0x0fc19dc68b8cd5b5",
    "0x240ca1cc77ac9c65",
    "0x2de92c6f592b0275",
    "0x4a7484aa6ea6e483",
    "0x5cb0a9dcbd41fbd4",
    "0x76f988da831153b5",
    "0x983e5152ee66dfab",
    "0xa831c66d2db43210",
    "0xb00327c898fb213f",
    "0xbf597fc7beef0ee4",
    "0xc6e00bf33da88fc2",
    "0xd5a79147930aa725",
    "0x06ca6351e003826f",
    "0x142929670a0e6e70",
    "0x27b70a8546d22ffc",
    "0x2e1b21385c26c926",
    "0x4d2c6dfc5ac42aed",
    "0x53380d139d95b3df",
    "0x650a73548baf63de",
    "0x766a0abb3c77b2a8",
    "0x81c2c92e47edaee6",
    "0x92722c851482353b",
    "0xa2bfe8a14cf10364",
    "0xa81a664bbc423001",
    "0xc24b8b70d0f89791",
    "0xc76c51a30654be30",
    "0xd192e819d6ef5218",
    "0xd69906245565a910",
    "0xf40e35855771202a",
    "0x106aa07032bbd1b8",
    "0x19a4c116b8d2d0c8",
    "0x1e376c085141ab53",
    "0x2748774cdf8eeb99",
    "0x34b0bcb5e19b48a8",
    "0x391c0cb3c5c95a63",
    "0x4ed8aa4ae3418acb",
    "0x5b9cca4f7763e373",
    "0x682e6ff3d6b2b8a3",
    "0x748f82ee5defb2fc",
    "0x78a5636f43172f60",
    "0x84c87814a1f0ab72",
    "0x8cc702081a6439ec",
    "0x90befffa23631e28",
    "0xa4506cebde82bde9",
    "0xbef9a3f7b2c67915",
    "0xc67178f2e372532b",
    "0xca273eceea26619c",
    "0xd186b8c721c0c207",
    "0xeada7dd6cde0eb1e",
    "0xf57d4f7fee6ed178",
    "0x06f067aa72176fba",
    "0x0a637dc5a2c898a6",
    "0x113f9804bef90dae",
    "0x1b710b35131c471b",
    "0x28db77f523047d84",
    "0x32caab7b40c72493",
    "0x3c9ebe0a15c9bebc",
    "0x431d67c49c100d4c",
    "0x4cc5d4becb3e42b6",
    "0x597f299cfc657e2a",
    "0x5fcb6fab3ad6faec",
    "0x6c44198c4a475817"
  ].map((n) => BigInt(n)));
  const SHA512_W_H = new Uint32Array(80);
  const SHA512_W_L = new Uint32Array(80);
  class SHA512 extends SHA2 {
    constructor() {
      super(128, 64, 16, false);
      this.Ah = 1779033703 | 0;
      this.Al = 4089235720 | 0;
      this.Bh = 3144134277 | 0;
      this.Bl = 2227873595 | 0;
      this.Ch = 1013904242 | 0;
      this.Cl = 4271175723 | 0;
      this.Dh = 2773480762 | 0;
      this.Dl = 1595750129 | 0;
      this.Eh = 1359893119 | 0;
      this.El = 2917565137 | 0;
      this.Fh = 2600822924 | 0;
      this.Fl = 725511199 | 0;
      this.Gh = 528734635 | 0;
      this.Gl = 4215389547 | 0;
      this.Hh = 1541459225 | 0;
      this.Hl = 327033209 | 0;
    }
    // prettier-ignore
    get() {
      const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
      return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
    }
    // prettier-ignore
    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
      this.Ah = Ah | 0;
      this.Al = Al | 0;
      this.Bh = Bh | 0;
      this.Bl = Bl | 0;
      this.Ch = Ch | 0;
      this.Cl = Cl | 0;
      this.Dh = Dh | 0;
      this.Dl = Dl | 0;
      this.Eh = Eh | 0;
      this.El = El | 0;
      this.Fh = Fh | 0;
      this.Fl = Fl | 0;
      this.Gh = Gh | 0;
      this.Gl = Gl | 0;
      this.Hh = Hh | 0;
      this.Hl = Hl | 0;
    }
    process(view, offset) {
      for (let i2 = 0; i2 < 16; i2++, offset += 4) {
        SHA512_W_H[i2] = view.getUint32(offset);
        SHA512_W_L[i2] = view.getUint32(offset += 4);
      }
      for (let i2 = 16; i2 < 80; i2++) {
        const W15h = SHA512_W_H[i2 - 15] | 0;
        const W15l = SHA512_W_L[i2 - 15] | 0;
        const s0h = u64$1.rotrSH(W15h, W15l, 1) ^ u64$1.rotrSH(W15h, W15l, 8) ^ u64$1.shrSH(W15h, W15l, 7);
        const s0l = u64$1.rotrSL(W15h, W15l, 1) ^ u64$1.rotrSL(W15h, W15l, 8) ^ u64$1.shrSL(W15h, W15l, 7);
        const W2h = SHA512_W_H[i2 - 2] | 0;
        const W2l = SHA512_W_L[i2 - 2] | 0;
        const s1h = u64$1.rotrSH(W2h, W2l, 19) ^ u64$1.rotrBH(W2h, W2l, 61) ^ u64$1.shrSH(W2h, W2l, 6);
        const s1l = u64$1.rotrSL(W2h, W2l, 19) ^ u64$1.rotrBL(W2h, W2l, 61) ^ u64$1.shrSL(W2h, W2l, 6);
        const SUMl = u64$1.add4L(s0l, s1l, SHA512_W_L[i2 - 7], SHA512_W_L[i2 - 16]);
        const SUMh = u64$1.add4H(SUMl, s0h, s1h, SHA512_W_H[i2 - 7], SHA512_W_H[i2 - 16]);
        SHA512_W_H[i2] = SUMh | 0;
        SHA512_W_L[i2] = SUMl | 0;
      }
      let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
      for (let i2 = 0; i2 < 80; i2++) {
        const sigma1h = u64$1.rotrSH(Eh, El, 14) ^ u64$1.rotrSH(Eh, El, 18) ^ u64$1.rotrBH(Eh, El, 41);
        const sigma1l = u64$1.rotrSL(Eh, El, 14) ^ u64$1.rotrSL(Eh, El, 18) ^ u64$1.rotrBL(Eh, El, 41);
        const CHIh = Eh & Fh ^ ~Eh & Gh;
        const CHIl = El & Fl ^ ~El & Gl;
        const T1ll = u64$1.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i2], SHA512_W_L[i2]);
        const T1h = u64$1.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i2], SHA512_W_H[i2]);
        const T1l = T1ll | 0;
        const sigma0h = u64$1.rotrSH(Ah, Al, 28) ^ u64$1.rotrBH(Ah, Al, 34) ^ u64$1.rotrBH(Ah, Al, 39);
        const sigma0l = u64$1.rotrSL(Ah, Al, 28) ^ u64$1.rotrBL(Ah, Al, 34) ^ u64$1.rotrBL(Ah, Al, 39);
        const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
        const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
        Hh = Gh | 0;
        Hl = Gl | 0;
        Gh = Fh | 0;
        Gl = Fl | 0;
        Fh = Eh | 0;
        Fl = El | 0;
        ({ h: Eh, l: El } = u64$1.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
        Dh = Ch | 0;
        Dl = Cl | 0;
        Ch = Bh | 0;
        Cl = Bl | 0;
        Bh = Ah | 0;
        Bl = Al | 0;
        const All = u64$1.add3L(T1l, sigma0l, MAJl);
        Ah = u64$1.add3H(All, T1h, sigma0h, MAJh);
        Al = All | 0;
      }
      ({ h: Ah, l: Al } = u64$1.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
      ({ h: Bh, l: Bl } = u64$1.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
      ({ h: Ch, l: Cl } = u64$1.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
      ({ h: Dh, l: Dl } = u64$1.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
      ({ h: Eh, l: El } = u64$1.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
      ({ h: Fh, l: Fl } = u64$1.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
      ({ h: Gh, l: Gl } = u64$1.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
      ({ h: Hh, l: Hl } = u64$1.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
      this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
    }
    roundClean() {
      SHA512_W_H.fill(0);
      SHA512_W_L.fill(0);
    }
    destroy() {
      this.buffer.fill(0);
      this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
  }
  class SHA512_224 extends SHA512 {
    constructor() {
      super();
      this.Ah = 2352822216 | 0;
      this.Al = 424955298 | 0;
      this.Bh = 1944164710 | 0;
      this.Bl = 2312950998 | 0;
      this.Ch = 502970286 | 0;
      this.Cl = 855612546 | 0;
      this.Dh = 1738396948 | 0;
      this.Dl = 1479516111 | 0;
      this.Eh = 258812777 | 0;
      this.El = 2077511080 | 0;
      this.Fh = 2011393907 | 0;
      this.Fl = 79989058 | 0;
      this.Gh = 1067287976 | 0;
      this.Gl = 1780299464 | 0;
      this.Hh = 286451373 | 0;
      this.Hl = 2446758561 | 0;
      this.outputLen = 28;
    }
  }
  class SHA512_256 extends SHA512 {
    constructor() {
      super();
      this.Ah = 573645204 | 0;
      this.Al = 4230739756 | 0;
      this.Bh = 2673172387 | 0;
      this.Bl = 3360449730 | 0;
      this.Ch = 596883563 | 0;
      this.Cl = 1867755857 | 0;
      this.Dh = 2520282905 | 0;
      this.Dl = 1497426621 | 0;
      this.Eh = 2519219938 | 0;
      this.El = 2827943907 | 0;
      this.Fh = 3193839141 | 0;
      this.Fl = 1401305490 | 0;
      this.Gh = 721525244 | 0;
      this.Gl = 746961066 | 0;
      this.Hh = 246885852 | 0;
      this.Hl = 2177182882 | 0;
      this.outputLen = 32;
    }
  }
  class SHA384 extends SHA512 {
    constructor() {
      super();
      this.Ah = 3418070365 | 0;
      this.Al = 3238371032 | 0;
      this.Bh = 1654270250 | 0;
      this.Bl = 914150663 | 0;
      this.Ch = 2438529370 | 0;
      this.Cl = 812702999 | 0;
      this.Dh = 355462360 | 0;
      this.Dl = 4144912697 | 0;
      this.Eh = 1731405415 | 0;
      this.El = 4290775857 | 0;
      this.Fh = 2394180231 | 0;
      this.Fl = 1750603025 | 0;
      this.Gh = 3675008525 | 0;
      this.Gl = 1694076839 | 0;
      this.Hh = 1203062813 | 0;
      this.Hl = 3204075428 | 0;
      this.outputLen = 48;
    }
  }
  const sha512 = wrapConstructor(() => new SHA512());
  wrapConstructor(() => new SHA512_224());
  wrapConstructor(() => new SHA512_256());
  wrapConstructor(() => new SHA384());
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  const _0n$1 = BigInt(0), _1n$2 = BigInt(1), _2n$2 = BigInt(2), _8n = BigInt(8);
  const VERIFY_DEFAULT = { zip215: true };
  function validateOpts(curve) {
    const opts = validateBasic(curve);
    validateObject(curve, {
      hash: "function",
      a: "bigint",
      d: "bigint",
      randomBytes: "function"
    }, {
      adjustScalarBytes: "function",
      domain: "function",
      uvRatio: "function",
      mapToCurve: "function"
    });
    return Object.freeze({ ...opts });
  }
  function twistedEdwards(curveDef) {
    const CURVE = validateOpts(curveDef);
    const { Fp: Fp2, n: CURVE_ORDER, prehash, hash: cHash, randomBytes: randomBytes2, nByteLength, h: cofactor } = CURVE;
    const MASK = _2n$2 << BigInt(nByteLength * 8) - _1n$2;
    const modP = Fp2.create;
    const uvRatio2 = CURVE.uvRatio || ((u, v) => {
      try {
        return { isValid: true, value: Fp2.sqrt(u * Fp2.inv(v)) };
      } catch (e) {
        return { isValid: false, value: _0n$1 };
      }
    });
    const adjustScalarBytes2 = CURVE.adjustScalarBytes || ((bytes2) => bytes2);
    const domain = CURVE.domain || ((data2, ctx, phflag) => {
      if (ctx.length || phflag)
        throw new Error("Contexts/pre-hash are not supported");
      return data2;
    });
    const inBig = (n) => typeof n === "bigint" && _0n$1 < n;
    const inRange = (n, max2) => inBig(n) && inBig(max2) && n < max2;
    const in0MaskRange = (n) => n === _0n$1 || inRange(n, MASK);
    function assertInRange(n, max2) {
      if (inRange(n, max2))
        return n;
      throw new Error(`Expected valid scalar < ${max2}, got ${typeof n} ${n}`);
    }
    function assertGE0(n) {
      return n === _0n$1 ? n : assertInRange(n, CURVE_ORDER);
    }
    const pointPrecomputes = /* @__PURE__ */ new Map();
    function isPoint(other) {
      if (!(other instanceof Point))
        throw new Error("ExtendedPoint expected");
    }
    class Point {
      constructor(ex, ey, ez, et) {
        this.ex = ex;
        this.ey = ey;
        this.ez = ez;
        this.et = et;
        if (!in0MaskRange(ex))
          throw new Error("x required");
        if (!in0MaskRange(ey))
          throw new Error("y required");
        if (!in0MaskRange(ez))
          throw new Error("z required");
        if (!in0MaskRange(et))
          throw new Error("t required");
      }
      get x() {
        return this.toAffine().x;
      }
      get y() {
        return this.toAffine().y;
      }
      static fromAffine(p) {
        if (p instanceof Point)
          throw new Error("extended point not allowed");
        const { x, y } = p || {};
        if (!in0MaskRange(x) || !in0MaskRange(y))
          throw new Error("invalid affine point");
        return new Point(x, y, _1n$2, modP(x * y));
      }
      static normalizeZ(points) {
        const toInv = Fp2.invertBatch(points.map((p) => p.ez));
        return points.map((p, i2) => p.toAffine(toInv[i2])).map(Point.fromAffine);
      }
      // "Private method", don't use it directly
      _setWindowSize(windowSize) {
        this._WINDOW_SIZE = windowSize;
        pointPrecomputes.delete(this);
      }
      // Not required for fromHex(), which always creates valid points.
      // Could be useful for fromAffine().
      assertValidity() {
        const { a, d } = CURVE;
        if (this.is0())
          throw new Error("bad point: ZERO");
        const { ex: X, ey: Y, ez: Z, et: T } = this;
        const X2 = modP(X * X);
        const Y2 = modP(Y * Y);
        const Z2 = modP(Z * Z);
        const Z4 = modP(Z2 * Z2);
        const aX2 = modP(X2 * a);
        const left = modP(Z2 * modP(aX2 + Y2));
        const right = modP(Z4 + modP(d * modP(X2 * Y2)));
        if (left !== right)
          throw new Error("bad point: equation left != right (1)");
        const XY = modP(X * Y);
        const ZT = modP(Z * T);
        if (XY !== ZT)
          throw new Error("bad point: equation left != right (2)");
      }
      // Compare one point to another.
      equals(other) {
        isPoint(other);
        const { ex: X1, ey: Y1, ez: Z1 } = this;
        const { ex: X2, ey: Y2, ez: Z2 } = other;
        const X1Z2 = modP(X1 * Z2);
        const X2Z1 = modP(X2 * Z1);
        const Y1Z2 = modP(Y1 * Z2);
        const Y2Z1 = modP(Y2 * Z1);
        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;
      }
      is0() {
        return this.equals(Point.ZERO);
      }
      negate() {
        return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));
      }
      // Fast algo for doubling Extended Point.
      // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd
      // Cost: 4M + 4S + 1*a + 6add + 1*2.
      double() {
        const { a } = CURVE;
        const { ex: X1, ey: Y1, ez: Z1 } = this;
        const A = modP(X1 * X1);
        const B = modP(Y1 * Y1);
        const C = modP(_2n$2 * modP(Z1 * Z1));
        const D = modP(a * A);
        const x1y1 = X1 + Y1;
        const E = modP(modP(x1y1 * x1y1) - A - B);
        const G3 = D + B;
        const F = G3 - C;
        const H = D - B;
        const X3 = modP(E * F);
        const Y3 = modP(G3 * H);
        const T3 = modP(E * H);
        const Z3 = modP(F * G3);
        return new Point(X3, Y3, Z3, T3);
      }
      // Fast algo for adding 2 Extended Points.
      // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd
      // Cost: 9M + 1*a + 1*d + 7add.
      add(other) {
        isPoint(other);
        const { a, d } = CURVE;
        const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;
        const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;
        if (a === BigInt(-1)) {
          const A2 = modP((Y1 - X1) * (Y2 + X2));
          const B2 = modP((Y1 + X1) * (Y2 - X2));
          const F2 = modP(B2 - A2);
          if (F2 === _0n$1)
            return this.double();
          const C2 = modP(Z1 * _2n$2 * T2);
          const D2 = modP(T1 * _2n$2 * Z2);
          const E2 = D2 + C2;
          const G4 = B2 + A2;
          const H2 = D2 - C2;
          const X32 = modP(E2 * F2);
          const Y32 = modP(G4 * H2);
          const T32 = modP(E2 * H2);
          const Z32 = modP(F2 * G4);
          return new Point(X32, Y32, Z32, T32);
        }
        const A = modP(X1 * X2);
        const B = modP(Y1 * Y2);
        const C = modP(T1 * d * T2);
        const D = modP(Z1 * Z2);
        const E = modP((X1 + Y1) * (X2 + Y2) - A - B);
        const F = D - C;
        const G3 = D + C;
        const H = modP(B - a * A);
        const X3 = modP(E * F);
        const Y3 = modP(G3 * H);
        const T3 = modP(E * H);
        const Z3 = modP(F * G3);
        return new Point(X3, Y3, Z3, T3);
      }
      subtract(other) {
        return this.add(other.negate());
      }
      wNAF(n) {
        return wnaf.wNAFCached(this, pointPrecomputes, n, Point.normalizeZ);
      }
      // Constant-time multiplication.
      multiply(scalar) {
        const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));
        return Point.normalizeZ([p, f])[0];
      }
      // Non-constant-time multiplication. Uses double-and-add algorithm.
      // It's faster, but should only be used when you don't care about
      // an exposed private key e.g. sig verification.
      // Does NOT allow scalars higher than CURVE.n.
      multiplyUnsafe(scalar) {
        let n = assertGE0(scalar);
        if (n === _0n$1)
          return I;
        if (this.equals(I) || n === _1n$2)
          return this;
        if (this.equals(G))
          return this.wNAF(n).p;
        return wnaf.unsafeLadder(this, n);
      }
      // Checks if point is of small order.
      // If you add something to small order point, you will have "dirty"
      // point with torsion component.
      // Multiplies point by cofactor and checks if the result is 0.
      isSmallOrder() {
        return this.multiplyUnsafe(cofactor).is0();
      }
      // Multiplies point by curve order and checks if the result is 0.
      // Returns `false` is the point is dirty.
      isTorsionFree() {
        return wnaf.unsafeLadder(this, CURVE_ORDER).is0();
      }
      // Converts Extended point to default (x, y) coordinates.
      // Can accept precomputed Z^-1 - for example, from invertBatch.
      toAffine(iz) {
        const { ex: x, ey: y, ez: z2 } = this;
        const is0 = this.is0();
        if (iz == null)
          iz = is0 ? _8n : Fp2.inv(z2);
        const ax = modP(x * iz);
        const ay = modP(y * iz);
        const zz = modP(z2 * iz);
        if (is0)
          return { x: _0n$1, y: _1n$2 };
        if (zz !== _1n$2)
          throw new Error("invZ was invalid");
        return { x: ax, y: ay };
      }
      clearCofactor() {
        const { h: cofactor2 } = CURVE;
        if (cofactor2 === _1n$2)
          return this;
        return this.multiplyUnsafe(cofactor2);
      }
      // Converts hash string or Uint8Array to Point.
      // Uses algo from RFC8032 5.1.3.
      static fromHex(hex2, zip215 = false) {
        const { d, a } = CURVE;
        const len = Fp2.BYTES;
        hex2 = ensureBytes("pointHex", hex2, len);
        const normed = hex2.slice();
        const lastByte = hex2[len - 1];
        normed[len - 1] = lastByte & ~128;
        const y = bytesToNumberLE(normed);
        if (y === _0n$1)
          ;
        else {
          if (zip215)
            assertInRange(y, MASK);
          else
            assertInRange(y, Fp2.ORDER);
        }
        const y2 = modP(y * y);
        const u = modP(y2 - _1n$2);
        const v = modP(d * y2 - a);
        let { isValid: isValid2, value: x } = uvRatio2(u, v);
        if (!isValid2)
          throw new Error("Point.fromHex: invalid y coordinate");
        const isXOdd = (x & _1n$2) === _1n$2;
        const isLastByteOdd = (lastByte & 128) !== 0;
        if (!zip215 && x === _0n$1 && isLastByteOdd)
          throw new Error("Point.fromHex: x=0 and x_0=1");
        if (isLastByteOdd !== isXOdd)
          x = modP(-x);
        return Point.fromAffine({ x, y });
      }
      static fromPrivateKey(privKey) {
        return getExtendedPublicKey(privKey).point;
      }
      toRawBytes() {
        const { x, y } = this.toAffine();
        const bytes2 = numberToBytesLE(y, Fp2.BYTES);
        bytes2[bytes2.length - 1] |= x & _1n$2 ? 128 : 0;
        return bytes2;
      }
      toHex() {
        return bytesToHex(this.toRawBytes());
      }
    }
    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n$2, modP(CURVE.Gx * CURVE.Gy));
    Point.ZERO = new Point(_0n$1, _1n$2, _1n$2, _0n$1);
    const { BASE: G, ZERO: I } = Point;
    const wnaf = wNAF(Point, nByteLength * 8);
    function modN(a) {
      return mod(a, CURVE_ORDER);
    }
    function modN_LE(hash2) {
      return modN(bytesToNumberLE(hash2));
    }
    function getExtendedPublicKey(key) {
      const len = nByteLength;
      key = ensureBytes("private key", key, len);
      const hashed = ensureBytes("hashed private key", cHash(key), 2 * len);
      const head = adjustScalarBytes2(hashed.slice(0, len));
      const prefix2 = hashed.slice(len, 2 * len);
      const scalar = modN_LE(head);
      const point = G.multiply(scalar);
      const pointBytes = point.toRawBytes();
      return { head, prefix: prefix2, scalar, point, pointBytes };
    }
    function getPublicKey(privKey) {
      return getExtendedPublicKey(privKey).pointBytes;
    }
    function hashDomainToScalar(context = new Uint8Array(), ...msgs) {
      const msg = concatBytes(...msgs);
      return modN_LE(cHash(domain(msg, ensureBytes("context", context), !!prehash)));
    }
    function sign2(msg, privKey, options = {}) {
      msg = ensureBytes("message", msg);
      if (prehash)
        msg = prehash(msg);
      const { prefix: prefix2, scalar, pointBytes } = getExtendedPublicKey(privKey);
      const r2 = hashDomainToScalar(options.context, prefix2, msg);
      const R = G.multiply(r2).toRawBytes();
      const k = hashDomainToScalar(options.context, R, pointBytes, msg);
      const s = modN(r2 + k * scalar);
      assertGE0(s);
      const res = concatBytes(R, numberToBytesLE(s, Fp2.BYTES));
      return ensureBytes("result", res, nByteLength * 2);
    }
    const verifyOpts = VERIFY_DEFAULT;
    function verify(sig2, msg, publicKey, options = verifyOpts) {
      const { context, zip215 } = options;
      const len = Fp2.BYTES;
      sig2 = ensureBytes("signature", sig2, 2 * len);
      msg = ensureBytes("message", msg);
      if (prehash)
        msg = prehash(msg);
      const s = bytesToNumberLE(sig2.slice(len, 2 * len));
      let A, R, SB;
      try {
        A = Point.fromHex(publicKey, zip215);
        R = Point.fromHex(sig2.slice(0, len), zip215);
        SB = G.multiplyUnsafe(s);
      } catch (error) {
        return false;
      }
      if (!zip215 && A.isSmallOrder())
        return false;
      const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);
      const RkA = R.add(A.multiplyUnsafe(k));
      return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);
    }
    G._setWindowSize(8);
    const utils2 = {
      getExtendedPublicKey,
      // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.
      randomPrivateKey: () => randomBytes2(Fp2.BYTES),
      /**
       * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT
       * values. This slows down first getPublicKey() by milliseconds (see Speed section),
       * but allows to speed-up subsequent getPublicKey() calls up to 20x.
       * @param windowSize 2, 4, 8, 16
       */
      precompute(windowSize = 8, point = Point.BASE) {
        point._setWindowSize(windowSize);
        point.multiply(BigInt(3));
        return point;
      }
    };
    return {
      CURVE,
      getPublicKey,
      sign: sign2,
      verify,
      ExtendedPoint: Point,
      utils: utils2
    };
  }
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  BigInt(0);
  BigInt(1);
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  const ED25519_P = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
  const ED25519_SQRT_M1 = BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");
  BigInt(0);
  const _1n$1 = BigInt(1), _2n$1 = BigInt(2), _5n = BigInt(5);
  const _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);
  function ed25519_pow_2_252_3(x) {
    const P = ED25519_P;
    const x2 = x * x % P;
    const b2 = x2 * x % P;
    const b4 = pow2(b2, _2n$1, P) * b2 % P;
    const b5 = pow2(b4, _1n$1, P) * x % P;
    const b10 = pow2(b5, _5n, P) * b5 % P;
    const b20 = pow2(b10, _10n, P) * b10 % P;
    const b40 = pow2(b20, _20n, P) * b20 % P;
    const b80 = pow2(b40, _40n, P) * b40 % P;
    const b160 = pow2(b80, _80n, P) * b80 % P;
    const b240 = pow2(b160, _80n, P) * b80 % P;
    const b250 = pow2(b240, _10n, P) * b10 % P;
    const pow_p_5_8 = pow2(b250, _2n$1, P) * x % P;
    return { pow_p_5_8, b2 };
  }
  function adjustScalarBytes(bytes2) {
    bytes2[0] &= 248;
    bytes2[31] &= 127;
    bytes2[31] |= 64;
    return bytes2;
  }
  function uvRatio(u, v) {
    const P = ED25519_P;
    const v3 = mod(v * v * v, P);
    const v7 = mod(v3 * v3 * v, P);
    const pow3 = ed25519_pow_2_252_3(u * v7).pow_p_5_8;
    let x = mod(u * v3 * pow3, P);
    const vx2 = mod(v * x * x, P);
    const root1 = x;
    const root2 = mod(x * ED25519_SQRT_M1, P);
    const useRoot1 = vx2 === u;
    const useRoot2 = vx2 === mod(-u, P);
    const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P);
    if (useRoot1)
      x = root1;
    if (useRoot2 || noRoot)
      x = root2;
    if (isNegativeLE(x, P))
      x = mod(-x, P);
    return { isValid: useRoot1 || useRoot2, value: x };
  }
  const Fp = Field(ED25519_P, void 0, true);
  const ed25519Defaults = {
    // Param: a
    a: BigInt(-1),
    // d is equal to -121665/121666 over finite field.
    // Negative number is P - number, and division is invert(number, P)
    d: BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"),
    // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n
    Fp,
    // Subgroup order: how many points curve has
    // 2n**252n + 27742317777372353535851937790883648493n;
    n: BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"),
    // Cofactor
    h: BigInt(8),
    // Base point (x, y) aka generator point
    Gx: BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"),
    Gy: BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"),
    hash: sha512,
    randomBytes,
    adjustScalarBytes,
    // dom2
    // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.
    // Constant-time, u/√v
    uvRatio
  };
  const ed25519 = twistedEdwards(ed25519Defaults);
  function ed25519_domain(data2, ctx, phflag) {
    if (ctx.length > 255)
      throw new Error("Context is too big");
    return concatBytes$1(utf8ToBytes$1("SigEd25519 no Ed25519 collisions"), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data2);
  }
  twistedEdwards({ ...ed25519Defaults, domain: ed25519_domain });
  twistedEdwards({
    ...ed25519Defaults,
    domain: ed25519_domain,
    prehash: sha512
  });
  const ELL2_C1 = (Fp.ORDER + BigInt(3)) / BigInt(8);
  Fp.pow(_2n$1, ELL2_C1);
  Fp.sqrt(Fp.neg(Fp.ONE));
  (Fp.ORDER - BigInt(5)) / BigInt(8);
  BigInt(486662);
  FpSqrtEven(Fp, Fp.neg(BigInt(486664)));
  BigInt("25063068953384623474111414158702152701244531502492656460079210482610430750235");
  BigInt("54469307008909316920995813868745141605393597292927456921205312896311721017578");
  BigInt("1159843021668779879193775521855586647937357759715417654439879720876111806838");
  BigInt("40440834346308536858101042469323190826248399146238708352240133220865137265952");
  BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  function ed25519PairFromSeed(seed, onlyJs) {
    if (!hasBigInt || !onlyJs && isReady()) {
      const full = ed25519KeypairFromSeed(seed);
      return {
        publicKey: full.slice(32),
        secretKey: full.slice(0, 64)
      };
    }
    const publicKey = ed25519.getPublicKey(seed);
    return {
      publicKey,
      secretKey: u8aConcatStrict([seed, publicKey])
    };
  }
  function ed25519Sign(message, { publicKey, secretKey }, onlyJs) {
    if (!secretKey) {
      throw new Error("Expected a valid secretKey");
    } else if (!publicKey) {
      throw new Error("Expected a valid publicKey");
    }
    const messageU8a = u8aToU8a(message);
    const privateU8a = secretKey.subarray(0, 32);
    return !hasBigInt || !onlyJs && isReady() ? ed25519Sign$1(publicKey, privateU8a, messageU8a) : ed25519.sign(messageU8a, privateU8a);
  }
  function ed25519Verify(message, signature, publicKey, onlyJs) {
    const messageU8a = u8aToU8a(message);
    const publicKeyU8a = u8aToU8a(publicKey);
    const signatureU8a = u8aToU8a(signature);
    if (publicKeyU8a.length !== 32) {
      throw new Error(`Invalid publicKey, received ${publicKeyU8a.length}, expected 32`);
    } else if (signatureU8a.length !== 64) {
      throw new Error(`Invalid signature, received ${signatureU8a.length} bytes, expected 64`);
    }
    try {
      return !hasBigInt || !onlyJs && isReady() ? ed25519Verify$1(signatureU8a, messageU8a, publicKeyU8a) : ed25519.verify(signatureU8a, messageU8a, publicKeyU8a);
    } catch {
      return false;
    }
  }
  const keyHdkdEd25519 = /* @__PURE__ */ createSeedDeriveFn(ed25519PairFromSeed, ed25519DeriveHard);
  const SEC_LEN = 64;
  const PUB_LEN = 32;
  const TOT_LEN = SEC_LEN + PUB_LEN;
  function sr25519PairFromU8a(full) {
    const fullU8a = u8aToU8a(full);
    if (fullU8a.length !== TOT_LEN) {
      throw new Error(`Expected keypair with ${TOT_LEN} bytes, found ${fullU8a.length}`);
    }
    return {
      publicKey: fullU8a.slice(SEC_LEN, TOT_LEN),
      secretKey: fullU8a.slice(0, SEC_LEN)
    };
  }
  function sr25519KeypairToU8a({ publicKey, secretKey }) {
    return u8aConcat(secretKey, publicKey).slice();
  }
  function createDeriveFn(derive2) {
    return (keypair, chainCode) => {
      if (!isU8a(chainCode) || chainCode.length !== 32) {
        throw new Error("Invalid chainCode passed to derive");
      }
      return sr25519PairFromU8a(derive2(sr25519KeypairToU8a(keypair), chainCode));
    };
  }
  const sr25519DeriveHard = /* @__PURE__ */ createDeriveFn(sr25519DeriveKeypairHard);
  const sr25519DeriveSoft = /* @__PURE__ */ createDeriveFn(sr25519DeriveKeypairSoft);
  function keyHdkdSr25519(keypair, { chainCode, isSoft }) {
    return isSoft ? sr25519DeriveSoft(keypair, chainCode) : sr25519DeriveHard(keypair, chainCode);
  }
  const generators = {
    ecdsa: keyHdkdEcdsa,
    ed25519: keyHdkdEd25519,
    // FIXME This is Substrate-compatible, not Ethereum-compatible
    ethereum: keyHdkdEcdsa,
    sr25519: keyHdkdSr25519
  };
  function keyFromPath(pair, path2, type) {
    const keyHdkd = generators[type];
    let result = pair;
    for (const junction of path2) {
      result = keyHdkd(result, junction);
    }
    return result;
  }
  function sr25519PairFromSeed(seed) {
    const seedU8a = u8aToU8a(seed);
    if (seedU8a.length !== 32) {
      throw new Error(`Expected a seed matching 32 bytes, found ${seedU8a.length}`);
    }
    return sr25519PairFromU8a(sr25519KeypairFromSeed(seedU8a));
  }
  function sr25519Sign(message, { publicKey, secretKey }) {
    if ((publicKey == null ? void 0 : publicKey.length) !== 32) {
      throw new Error("Expected a valid publicKey, 32-bytes");
    } else if ((secretKey == null ? void 0 : secretKey.length) !== 64) {
      throw new Error("Expected a valid secretKey, 64-bytes");
    }
    return sr25519Sign$1(publicKey, secretKey, u8aToU8a(message));
  }
  function sr25519Verify(message, signature, publicKey) {
    const publicKeyU8a = u8aToU8a(publicKey);
    const signatureU8a = u8aToU8a(signature);
    if (publicKeyU8a.length !== 32) {
      throw new Error(`Invalid publicKey, received ${publicKeyU8a.length} bytes, expected 32`);
    } else if (signatureU8a.length !== 64) {
      throw new Error(`Invalid signature, received ${signatureU8a.length} bytes, expected 64`);
    }
    return sr25519Verify$1(signatureU8a, u8aToU8a(message), publicKeyU8a);
  }
  const EMPTY_U8A$2 = new Uint8Array();
  function sr25519VrfSign(message, { secretKey }, context = EMPTY_U8A$2, extra = EMPTY_U8A$2) {
    if ((secretKey == null ? void 0 : secretKey.length) !== 64) {
      throw new Error("Invalid secretKey, expected 64-bytes");
    }
    return vrfSign(secretKey, u8aToU8a(context), u8aToU8a(message), u8aToU8a(extra));
  }
  const EMPTY_U8A$1 = new Uint8Array();
  function sr25519VrfVerify(message, signOutput, publicKey, context = EMPTY_U8A$1, extra = EMPTY_U8A$1) {
    const publicKeyU8a = u8aToU8a(publicKey);
    const proofU8a = u8aToU8a(signOutput);
    if (publicKeyU8a.length !== 32) {
      throw new Error("Invalid publicKey, expected 32-bytes");
    } else if (proofU8a.length !== 96) {
      throw new Error("Invalid vrfSign output, expected 96 bytes");
    }
    return vrfVerify(publicKeyU8a, u8aToU8a(context), u8aToU8a(message), u8aToU8a(extra), proofU8a);
  }
  function encodeAddress(key, ss58Format = defaults$5.prefix) {
    const u8a2 = decodeAddress(key);
    if (ss58Format < 0 || ss58Format > 16383 || [46, 47].includes(ss58Format)) {
      throw new Error("Out of range ss58Format specified");
    } else if (!defaults$5.allowedDecodedLengths.includes(u8a2.length)) {
      throw new Error(`Expected a valid key to convert, with length ${defaults$5.allowedDecodedLengths.join(", ")}`);
    }
    const input = u8aConcat(ss58Format < 64 ? [ss58Format] : [
      (ss58Format & 252) >> 2 | 64,
      ss58Format >> 8 | (ss58Format & 3) << 6
    ], u8a2);
    return base58Encode(u8aConcat(input, sshash(input).subarray(0, [32, 33].includes(u8a2.length) ? 2 : 1)));
  }
  const [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];
  const _0n = BigInt(0);
  const _1n = BigInt(1);
  const _2n = BigInt(2);
  const _7n$1 = BigInt(7);
  const _256n$1 = BigInt(256);
  const _0x71n = BigInt(113);
  for (let round2 = 0, R = _1n, x = 1, y = 0; round2 < 24; round2++) {
    [x, y] = [y, (2 * x + 3 * y) % 5];
    SHA3_PI.push(2 * (5 * y + x));
    SHA3_ROTL.push((round2 + 1) * (round2 + 2) / 2 % 64);
    let t = _0n;
    for (let j = 0; j < 7; j++) {
      R = (R << _1n ^ (R >> _7n$1) * _0x71n) % _256n$1;
      if (R & _2n)
        t ^= _1n << (_1n << BigInt(j)) - _1n;
    }
    _SHA3_IOTA.push(t);
  }
  const [SHA3_IOTA_H, SHA3_IOTA_L] = u64$1.split(_SHA3_IOTA, true);
  const rotlH = (h, l2, s) => s > 32 ? u64$1.rotlBH(h, l2, s) : u64$1.rotlSH(h, l2, s);
  const rotlL = (h, l2, s) => s > 32 ? u64$1.rotlBL(h, l2, s) : u64$1.rotlSL(h, l2, s);
  function keccakP(s, rounds = 24) {
    const B = new Uint32Array(5 * 2);
    for (let round2 = 24 - rounds; round2 < 24; round2++) {
      for (let x = 0; x < 10; x++)
        B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
      for (let x = 0; x < 10; x += 2) {
        const idx1 = (x + 8) % 10;
        const idx0 = (x + 2) % 10;
        const B0 = B[idx0];
        const B1 = B[idx0 + 1];
        const Th = rotlH(B0, B1, 1) ^ B[idx1];
        const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
        for (let y = 0; y < 50; y += 10) {
          s[x + y] ^= Th;
          s[x + y + 1] ^= Tl;
        }
      }
      let curH = s[2];
      let curL = s[3];
      for (let t = 0; t < 24; t++) {
        const shift = SHA3_ROTL[t];
        const Th = rotlH(curH, curL, shift);
        const Tl = rotlL(curH, curL, shift);
        const PI = SHA3_PI[t];
        curH = s[PI];
        curL = s[PI + 1];
        s[PI] = Th;
        s[PI + 1] = Tl;
      }
      for (let y = 0; y < 50; y += 10) {
        for (let x = 0; x < 10; x++)
          B[x] = s[y + x];
        for (let x = 0; x < 10; x++)
          s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
      }
      s[0] ^= SHA3_IOTA_H[round2];
      s[1] ^= SHA3_IOTA_L[round2];
    }
    B.fill(0);
  }
  class Keccak extends Hash {
    // NOTE: we accept arguments in bytes instead of bits here.
    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
      super();
      this.blockLen = blockLen;
      this.suffix = suffix;
      this.outputLen = outputLen;
      this.enableXOF = enableXOF;
      this.rounds = rounds;
      this.pos = 0;
      this.posOut = 0;
      this.finished = false;
      this.destroyed = false;
      assert.number(outputLen);
      if (0 >= this.blockLen || this.blockLen >= 200)
        throw new Error("Sha3 supports only keccak-f1600 function");
      this.state = new Uint8Array(200);
      this.state32 = u32$1(this.state);
    }
    keccak() {
      keccakP(this.state32, this.rounds);
      this.posOut = 0;
      this.pos = 0;
    }
    update(data2) {
      assert.exists(this);
      const { blockLen, state } = this;
      data2 = toBytes(data2);
      const len = data2.length;
      for (let pos = 0; pos < len; ) {
        const take2 = Math.min(blockLen - this.pos, len - pos);
        for (let i2 = 0; i2 < take2; i2++)
          state[this.pos++] ^= data2[pos++];
        if (this.pos === blockLen)
          this.keccak();
      }
      return this;
    }
    finish() {
      if (this.finished)
        return;
      this.finished = true;
      const { state, suffix, pos, blockLen } = this;
      state[pos] ^= suffix;
      if ((suffix & 128) !== 0 && pos === blockLen - 1)
        this.keccak();
      state[blockLen - 1] ^= 128;
      this.keccak();
    }
    writeInto(out) {
      assert.exists(this, false);
      assert.bytes(out);
      this.finish();
      const bufferOut = this.state;
      const { blockLen } = this;
      for (let pos = 0, len = out.length; pos < len; ) {
        if (this.posOut >= blockLen)
          this.keccak();
        const take2 = Math.min(blockLen - this.posOut, len - pos);
        out.set(bufferOut.subarray(this.posOut, this.posOut + take2), pos);
        this.posOut += take2;
        pos += take2;
      }
      return out;
    }
    xofInto(out) {
      if (!this.enableXOF)
        throw new Error("XOF is not possible for this instance");
      return this.writeInto(out);
    }
    xof(bytes2) {
      assert.number(bytes2);
      return this.xofInto(new Uint8Array(bytes2));
    }
    digestInto(out) {
      assert.output(out, this);
      if (this.finished)
        throw new Error("digest() was already called");
      this.writeInto(out);
      this.destroy();
      return out;
    }
    digest() {
      return this.digestInto(new Uint8Array(this.outputLen));
    }
    destroy() {
      this.destroyed = true;
      this.state.fill(0);
    }
    _cloneInto(to) {
      const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
      to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
      to.state32.set(this.state32);
      to.pos = this.pos;
      to.posOut = this.posOut;
      to.finished = this.finished;
      to.rounds = rounds;
      to.suffix = suffix;
      to.outputLen = outputLen;
      to.enableXOF = enableXOF;
      to.destroyed = this.destroyed;
      return to;
    }
  }
  const gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));
  gen(6, 144, 224 / 8);
  gen(6, 136, 256 / 8);
  gen(6, 104, 384 / 8);
  gen(6, 72, 512 / 8);
  gen(1, 144, 224 / 8);
  const keccak_256 = gen(1, 136, 256 / 8);
  gen(1, 104, 384 / 8);
  const keccak_512 = gen(1, 72, 512 / 8);
  const genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
  genShake(31, 168, 128 / 8);
  genShake(31, 136, 256 / 8);
  const keccakAsU8a = /* @__PURE__ */ createDualHasher({ 256: keccak256, 512: keccak512 }, { 256: keccak_256, 512: keccak_512 });
  function hasher(hashType, data2, onlyJs) {
    return hashType === "keccak" ? keccakAsU8a(data2, void 0, onlyJs) : blake2AsU8a(data2, void 0, void 0, onlyJs);
  }
  const config$2 = {
    chars: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
    coder: base64,
    type: "base64",
    withPadding: true
  };
  const base64Validate = /* @__PURE__ */ createValidate(config$2);
  const base64Decode = /* @__PURE__ */ createDecode(config$2, base64Validate);
  const base64Encode = /* @__PURE__ */ createEncode(config$2);
  function secp256k1Compress(publicKey, onlyJs) {
    if (![33, 65].includes(publicKey.length)) {
      throw new Error(`Invalid publicKey provided, received ${publicKey.length} bytes input`);
    }
    if (publicKey.length === 33) {
      return publicKey;
    }
    return !hasBigInt || !onlyJs && isReady() ? secp256k1Compress$1(publicKey) : secp256k1.ProjectivePoint.fromHex(publicKey).toRawBytes(true);
  }
  function secp256k1Expand(publicKey, onlyJs) {
    if (![33, 65].includes(publicKey.length)) {
      throw new Error(`Invalid publicKey provided, received ${publicKey.length} bytes input`);
    }
    if (publicKey.length === 65) {
      return publicKey.subarray(1);
    }
    if (!hasBigInt || !onlyJs && isReady()) {
      return secp256k1Expand$1(publicKey).subarray(1);
    }
    const { px, py } = secp256k1.ProjectivePoint.fromHex(publicKey);
    return u8aConcat(bnToU8a(px, BN_BE_256_OPTS), bnToU8a(py, BN_BE_256_OPTS));
  }
  function secp256k1Recover(msgHash, signature, recovery, hashType = "blake2", onlyJs) {
    const sig2 = u8aToU8a(signature).subarray(0, 64);
    const msg = u8aToU8a(msgHash);
    const publicKey = !hasBigInt || !onlyJs && isReady() ? secp256k1Recover$1(msg, sig2, recovery) : secp256k1.Signature.fromCompact(sig2).addRecoveryBit(recovery).recoverPublicKey(msg).toRawBytes();
    if (!publicKey) {
      throw new Error("Unable to recover publicKey from signature");
    }
    return hashType === "keccak" ? secp256k1Expand(publicKey, onlyJs) : secp256k1Compress(publicKey, onlyJs);
  }
  function secp256k1Sign(message, { secretKey }, hashType = "blake2", onlyJs) {
    if ((secretKey == null ? void 0 : secretKey.length) !== 32) {
      throw new Error("Expected valid secp256k1 secretKey, 32-bytes");
    }
    const data2 = hasher(hashType, message, onlyJs);
    if (!hasBigInt || !onlyJs && isReady()) {
      return secp256k1Sign$1(data2, secretKey);
    }
    const signature = secp256k1.sign(data2, secretKey, { lowS: true });
    return u8aConcat(bnToU8a(signature.r, BN_BE_256_OPTS), bnToU8a(signature.s, BN_BE_256_OPTS), new Uint8Array([signature.recovery || 0]));
  }
  const N = "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141".replace(/ /g, "");
  const N_BI = BigInt$1(`0x${N}`);
  const N_BN = new BN(N, "hex");
  function addBi(seckey, tweak) {
    let res = u8aToBigInt(tweak, BN_BE_OPTS);
    if (res >= N_BI) {
      throw new Error("Tweak parameter is out of range");
    }
    res += u8aToBigInt(seckey, BN_BE_OPTS);
    if (res >= N_BI) {
      res -= N_BI;
    }
    if (res === _0n$6) {
      throw new Error("Invalid resulting private key");
    }
    return nToU8a(res, BN_BE_256_OPTS);
  }
  function addBn(seckey, tweak) {
    const res = new BN(tweak);
    if (res.cmp(N_BN) >= 0) {
      throw new Error("Tweak parameter is out of range");
    }
    res.iadd(new BN(seckey));
    if (res.cmp(N_BN) >= 0) {
      res.isub(N_BN);
    }
    if (res.isZero()) {
      throw new Error("Invalid resulting private key");
    }
    return bnToU8a(res, BN_BE_256_OPTS);
  }
  function secp256k1PrivateKeyTweakAdd(seckey, tweak, onlyBn) {
    if (!isU8a(seckey) || seckey.length !== 32) {
      throw new Error("Expected seckey to be an Uint8Array with length 32");
    } else if (!isU8a(tweak) || tweak.length !== 32) {
      throw new Error("Expected tweak to be an Uint8Array with length 32");
    }
    return !hasBigInt || onlyBn ? addBn(seckey, tweak) : addBi(seckey, tweak);
  }
  function secp256k1Verify(msgHash, signature, address, hashType = "blake2", onlyJs) {
    const sig2 = u8aToU8a(signature);
    if (sig2.length !== 65) {
      throw new Error(`Expected signature with 65 bytes, ${sig2.length} found instead`);
    }
    const publicKey = secp256k1Recover(hasher(hashType, msgHash), sig2, sig2[64], hashType, onlyJs);
    const signerAddr = hasher(hashType, publicKey, onlyJs);
    const inputAddr = u8aToU8a(address);
    return u8aEq(publicKey, inputAddr) || (hashType === "keccak" ? u8aEq(signerAddr.slice(-20), inputAddr.slice(-20)) : u8aEq(signerAddr, inputAddr));
  }
  function getH160(u8a2) {
    if ([33, 65].includes(u8a2.length)) {
      u8a2 = keccakAsU8a(secp256k1Expand(u8a2));
    }
    return u8a2.slice(-20);
  }
  function ethereumEncode(addressOrPublic) {
    if (!addressOrPublic) {
      return "0x";
    }
    const u8aAddress = u8aToU8a(addressOrPublic);
    if (![20, 32, 33, 65].includes(u8aAddress.length)) {
      throw new Error(`Invalid address or publicKey provided, received ${u8aAddress.length} bytes input`);
    }
    const address = u8aToHex(getH160(u8aAddress), -1, false);
    const hash2 = u8aToHex(keccakAsU8a(address), -1, false);
    let result = "";
    for (let i2 = 0; i2 < 40; i2++) {
      result = `${result}${parseInt(hash2[i2], 16) > 7 ? address[i2].toUpperCase() : address[i2]}`;
    }
    return `0x${result}`;
  }
  function isInvalidChar(char2, byte) {
    return char2 !== (byte > 7 ? char2.toUpperCase() : char2.toLowerCase());
  }
  function isEthereumChecksum(_address) {
    const address = _address.replace("0x", "");
    const hash2 = u8aToHex(keccakAsU8a(address.toLowerCase()), -1, false);
    for (let i2 = 0; i2 < 40; i2++) {
      if (isInvalidChar(address[i2], parseInt(hash2[i2], 16))) {
        return false;
      }
    }
    return true;
  }
  function isEthereumAddress(address) {
    if (!address || address.length !== 42 || !isHex(address)) {
      return false;
    } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
      return true;
    }
    return isEthereumChecksum(address);
  }
  const JS_HASH = {
    256: sha256,
    512: sha512
  };
  const WA_MHAC = {
    256: hmacSha256,
    512: hmacSha512
  };
  function hmacShaAsU8a(key, data2, bitLength = 256, onlyJs) {
    const u8aKey = u8aToU8a(key);
    return !hasBigInt || !onlyJs && isReady() ? WA_MHAC[bitLength](u8aKey, data2) : hmac(JS_HASH[bitLength], u8aKey, data2);
  }
  const HARDENED = 2147483648;
  function hdValidatePath(path2) {
    if (!path2.startsWith("m/")) {
      return false;
    }
    const parts = path2.split("/").slice(1);
    for (const p of parts) {
      const n = /^\d+'?$/.test(p) ? parseInt(p.replace(/'$/, ""), 10) : Number.NaN;
      if (isNaN(n) || n >= HARDENED || n < 0) {
        return false;
      }
    }
    return true;
  }
  const MASTER_SECRET = stringToU8a("Bitcoin seed");
  function createCoded(secretKey, chainCode) {
    return {
      chainCode,
      publicKey: secp256k1PairFromSeed(secretKey).publicKey,
      secretKey
    };
  }
  function deriveChild(hd, index2) {
    const indexBuffer = bnToU8a(index2, BN_BE_32_OPTS);
    const data2 = index2 >= HARDENED ? u8aConcat(new Uint8Array(1), hd.secretKey, indexBuffer) : u8aConcat(hd.publicKey, indexBuffer);
    try {
      const I = hmacShaAsU8a(hd.chainCode, data2, 512);
      return createCoded(secp256k1PrivateKeyTweakAdd(hd.secretKey, I.slice(0, 32)), I.slice(32));
    } catch {
      return deriveChild(hd, index2 + 1);
    }
  }
  function hdEthereum(seed, path2 = "") {
    const I = hmacShaAsU8a(MASTER_SECRET, seed, 512);
    let hd = createCoded(I.slice(0, 32), I.slice(32));
    if (!path2 || path2 === "m" || path2 === "M" || path2 === "m'" || path2 === "M'") {
      return hd;
    }
    if (!hdValidatePath(path2)) {
      throw new Error("Invalid derivation path");
    }
    const parts = path2.split("/").slice(1);
    for (const p of parts) {
      hd = deriveChild(hd, parseInt(p, 10) + (p.length > 1 && p.endsWith("'") ? HARDENED : 0));
    }
    return hd;
  }
  function pbkdf2Init(hash2, _password, _salt, _opts) {
    assert.hash(hash2);
    const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);
    const { c, dkLen, asyncTick } = opts;
    assert.number(c);
    assert.number(dkLen);
    assert.number(asyncTick);
    if (c < 1)
      throw new Error("PBKDF2: iterations (c) should be >= 1");
    const password = toBytes(_password);
    const salt = toBytes(_salt);
    const DK = new Uint8Array(dkLen);
    const PRF = hmac.create(hash2, password);
    const PRFSalt = PRF._cloneInto().update(salt);
    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
  }
  function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
    PRF.destroy();
    PRFSalt.destroy();
    if (prfW)
      prfW.destroy();
    u.fill(0);
    return DK;
  }
  function pbkdf2(hash2, password, salt, opts) {
    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash2, password, salt, opts);
    let prfW;
    const arr2 = new Uint8Array(4);
    const view = createView(arr2);
    const u = new Uint8Array(PRF.outputLen);
    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
      const Ti = DK.subarray(pos, pos + PRF.outputLen);
      view.setInt32(0, ti, false);
      (prfW = PRFSalt._cloneInto(prfW)).update(arr2).digestInto(u);
      Ti.set(u.subarray(0, Ti.length));
      for (let ui = 1; ui < c; ui++) {
        PRF._cloneInto(prfW).update(u).digestInto(u);
        for (let i2 = 0; i2 < Ti.length; i2++)
          Ti[i2] ^= u[i2];
      }
    }
    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
  }
  function pbkdf2Encode(passphrase, salt = randomAsU8a(), rounds = 2048, onlyJs) {
    const u8aPass = u8aToU8a(passphrase);
    const u8aSalt = u8aToU8a(salt);
    return {
      password: !hasBigInt || !onlyJs && isReady() ? pbkdf2$1(u8aPass, u8aSalt, rounds) : pbkdf2(sha512, u8aPass, u8aSalt, { c: rounds, dkLen: 64 }),
      rounds,
      salt
    };
  }
  const shaAsU8a = /* @__PURE__ */ createDualHasher({ 256: sha256$1, 512: sha512$1 }, { 256: sha256, 512: sha512 });
  const sha256AsU8a = /* @__PURE__ */ createBitHasher(256, shaAsU8a);
  const DEFAULT_WORDLIST = "abandon|ability|able|about|above|absent|absorb|abstract|absurd|abuse|access|accident|account|accuse|achieve|acid|acoustic|acquire|across|act|action|actor|actress|actual|adapt|add|addict|address|adjust|admit|adult|advance|advice|aerobic|affair|afford|afraid|again|age|agent|agree|ahead|aim|air|airport|aisle|alarm|album|alcohol|alert|alien|all|alley|allow|almost|alone|alpha|already|also|alter|always|amateur|amazing|among|amount|amused|analyst|anchor|ancient|anger|angle|angry|animal|ankle|announce|annual|another|answer|antenna|antique|anxiety|any|apart|apology|appear|apple|approve|april|arch|arctic|area|arena|argue|arm|armed|armor|army|around|arrange|arrest|arrive|arrow|art|artefact|artist|artwork|ask|aspect|assault|asset|assist|assume|asthma|athlete|atom|attack|attend|attitude|attract|auction|audit|august|aunt|author|auto|autumn|average|avocado|avoid|awake|aware|away|awesome|awful|awkward|axis|baby|bachelor|bacon|badge|bag|balance|balcony|ball|bamboo|banana|banner|bar|barely|bargain|barrel|base|basic|basket|battle|beach|bean|beauty|because|become|beef|before|begin|behave|behind|believe|below|belt|bench|benefit|best|betray|better|between|beyond|bicycle|bid|bike|bind|biology|bird|birth|bitter|black|blade|blame|blanket|blast|bleak|bless|blind|blood|blossom|blouse|blue|blur|blush|board|boat|body|boil|bomb|bone|bonus|book|boost|border|boring|borrow|boss|bottom|bounce|box|boy|bracket|brain|brand|brass|brave|bread|breeze|brick|bridge|brief|bright|bring|brisk|broccoli|broken|bronze|broom|brother|brown|brush|bubble|buddy|budget|buffalo|build|bulb|bulk|bullet|bundle|bunker|burden|burger|burst|bus|business|busy|butter|buyer|buzz|cabbage|cabin|cable|cactus|cage|cake|call|calm|camera|camp|can|canal|cancel|candy|cannon|canoe|canvas|canyon|capable|capital|captain|car|carbon|card|cargo|carpet|carry|cart|case|cash|casino|castle|casual|cat|catalog|catch|category|cattle|caught|cause|caution|cave|ceiling|celery|cement|census|century|cereal|certain|chair|chalk|champion|change|chaos|chapter|charge|chase|chat|cheap|check|cheese|chef|cherry|chest|chicken|chief|child|chimney|choice|choose|chronic|chuckle|chunk|churn|cigar|cinnamon|circle|citizen|city|civil|claim|clap|clarify|claw|clay|clean|clerk|clever|click|client|cliff|climb|clinic|clip|clock|clog|close|cloth|cloud|clown|club|clump|cluster|clutch|coach|coast|coconut|code|coffee|coil|coin|collect|color|column|combine|come|comfort|comic|common|company|concert|conduct|confirm|congress|connect|consider|control|convince|cook|cool|copper|copy|coral|core|corn|correct|cost|cotton|couch|country|couple|course|cousin|cover|coyote|crack|cradle|craft|cram|crane|crash|crater|crawl|crazy|cream|credit|creek|crew|cricket|crime|crisp|critic|crop|cross|crouch|crowd|crucial|cruel|cruise|crumble|crunch|crush|cry|crystal|cube|culture|cup|cupboard|curious|current|curtain|curve|cushion|custom|cute|cycle|dad|damage|damp|dance|danger|daring|dash|daughter|dawn|day|deal|debate|debris|decade|december|decide|decline|decorate|decrease|deer|defense|define|defy|degree|delay|deliver|demand|demise|denial|dentist|deny|depart|depend|deposit|depth|deputy|derive|describe|desert|design|desk|despair|destroy|detail|detect|develop|device|devote|diagram|dial|diamond|diary|dice|diesel|diet|differ|digital|dignity|dilemma|dinner|dinosaur|direct|dirt|disagree|discover|disease|dish|dismiss|disorder|display|distance|divert|divide|divorce|dizzy|doctor|document|dog|doll|dolphin|domain|donate|donkey|donor|door|dose|double|dove|draft|dragon|drama|drastic|draw|dream|dress|drift|drill|drink|drip|drive|drop|drum|dry|duck|dumb|dune|during|dust|dutch|duty|dwarf|dynamic|eager|eagle|early|earn|earth|easily|east|easy|echo|ecology|economy|edge|edit|educate|effort|egg|eight|either|elbow|elder|electric|elegant|element|elephant|elevator|elite|else|embark|embody|embrace|emerge|emotion|employ|empower|empty|enable|enact|end|endless|endorse|enemy|energy|enforce|engage|engine|enhance|enjoy|enlist|enough|enrich|enroll|ensure|enter|entire|entry|envelope|episode|equal|equip|era|erase|erode|erosion|error|erupt|escape|essay|essence|estate|eternal|ethics|evidence|evil|evoke|evolve|exact|example|excess|exchange|excite|exclude|excuse|execute|exercise|exhaust|exhibit|exile|exist|exit|exotic|expand|expect|expire|explain|expose|express|extend|extra|eye|eyebrow|fabric|face|faculty|fade|faint|faith|fall|false|fame|family|famous|fan|fancy|fantasy|farm|fashion|fat|fatal|father|fatigue|fault|favorite|feature|february|federal|fee|feed|feel|female|fence|festival|fetch|fever|few|fiber|fiction|field|figure|file|film|filter|final|find|fine|finger|finish|fire|firm|first|fiscal|fish|fit|fitness|fix|flag|flame|flash|flat|flavor|flee|flight|flip|float|flock|floor|flower|fluid|flush|fly|foam|focus|fog|foil|fold|follow|food|foot|force|forest|forget|fork|fortune|forum|forward|fossil|foster|found|fox|fragile|frame|frequent|fresh|friend|fringe|frog|front|frost|frown|frozen|fruit|fuel|fun|funny|furnace|fury|future|gadget|gain|galaxy|gallery|game|gap|garage|garbage|garden|garlic|garment|gas|gasp|gate|gather|gauge|gaze|general|genius|genre|gentle|genuine|gesture|ghost|giant|gift|giggle|ginger|giraffe|girl|give|glad|glance|glare|glass|glide|glimpse|globe|gloom|glory|glove|glow|glue|goat|goddess|gold|good|goose|gorilla|gospel|gossip|govern|gown|grab|grace|grain|grant|grape|grass|gravity|great|green|grid|grief|grit|grocery|group|grow|grunt|guard|guess|guide|guilt|guitar|gun|gym|habit|hair|half|hammer|hamster|hand|happy|harbor|hard|harsh|harvest|hat|have|hawk|hazard|head|health|heart|heavy|hedgehog|height|hello|helmet|help|hen|hero|hidden|high|hill|hint|hip|hire|history|hobby|hockey|hold|hole|holiday|hollow|home|honey|hood|hope|horn|horror|horse|hospital|host|hotel|hour|hover|hub|huge|human|humble|humor|hundred|hungry|hunt|hurdle|hurry|hurt|husband|hybrid|ice|icon|idea|identify|idle|ignore|ill|illegal|illness|image|imitate|immense|immune|impact|impose|improve|impulse|inch|include|income|increase|index|indicate|indoor|industry|infant|inflict|inform|inhale|inherit|initial|inject|injury|inmate|inner|innocent|input|inquiry|insane|insect|inside|inspire|install|intact|interest|into|invest|invite|involve|iron|island|isolate|issue|item|ivory|jacket|jaguar|jar|jazz|jealous|jeans|jelly|jewel|job|join|joke|journey|joy|judge|juice|jump|jungle|junior|junk|just|kangaroo|keen|keep|ketchup|key|kick|kid|kidney|kind|kingdom|kiss|kit|kitchen|kite|kitten|kiwi|knee|knife|knock|know|lab|label|labor|ladder|lady|lake|lamp|language|laptop|large|later|latin|laugh|laundry|lava|law|lawn|lawsuit|layer|lazy|leader|leaf|learn|leave|lecture|left|leg|legal|legend|leisure|lemon|lend|length|lens|leopard|lesson|letter|level|liar|liberty|library|license|life|lift|light|like|limb|limit|link|lion|liquid|list|little|live|lizard|load|loan|lobster|local|lock|logic|lonely|long|loop|lottery|loud|lounge|love|loyal|lucky|luggage|lumber|lunar|lunch|luxury|lyrics|machine|mad|magic|magnet|maid|mail|main|major|make|mammal|man|manage|mandate|mango|mansion|manual|maple|marble|march|margin|marine|market|marriage|mask|mass|master|match|material|math|matrix|matter|maximum|maze|meadow|mean|measure|meat|mechanic|medal|media|melody|melt|member|memory|mention|menu|mercy|merge|merit|merry|mesh|message|metal|method|middle|midnight|milk|million|mimic|mind|minimum|minor|minute|miracle|mirror|misery|miss|mistake|mix|mixed|mixture|mobile|model|modify|mom|moment|monitor|monkey|monster|month|moon|moral|more|morning|mosquito|mother|motion|motor|mountain|mouse|move|movie|much|muffin|mule|multiply|muscle|museum|mushroom|music|must|mutual|myself|mystery|myth|naive|name|napkin|narrow|nasty|nation|nature|near|neck|need|negative|neglect|neither|nephew|nerve|nest|net|network|neutral|never|news|next|nice|night|noble|noise|nominee|noodle|normal|north|nose|notable|note|nothing|notice|novel|now|nuclear|number|nurse|nut|oak|obey|object|oblige|obscure|observe|obtain|obvious|occur|ocean|october|odor|off|offer|office|often|oil|okay|old|olive|olympic|omit|once|one|onion|online|only|open|opera|opinion|oppose|option|orange|orbit|orchard|order|ordinary|organ|orient|original|orphan|ostrich|other|outdoor|outer|output|outside|oval|oven|over|own|owner|oxygen|oyster|ozone|pact|paddle|page|pair|palace|palm|panda|panel|panic|panther|paper|parade|parent|park|parrot|party|pass|patch|path|patient|patrol|pattern|pause|pave|payment|peace|peanut|pear|peasant|pelican|pen|penalty|pencil|people|pepper|perfect|permit|person|pet|phone|photo|phrase|physical|piano|picnic|picture|piece|pig|pigeon|pill|pilot|pink|pioneer|pipe|pistol|pitch|pizza|place|planet|plastic|plate|play|please|pledge|pluck|plug|plunge|poem|poet|point|polar|pole|police|pond|pony|pool|popular|portion|position|possible|post|potato|pottery|poverty|powder|power|practice|praise|predict|prefer|prepare|present|pretty|prevent|price|pride|primary|print|priority|prison|private|prize|problem|process|produce|profit|program|project|promote|proof|property|prosper|protect|proud|provide|public|pudding|pull|pulp|pulse|pumpkin|punch|pupil|puppy|purchase|purity|purpose|purse|push|put|puzzle|pyramid|quality|quantum|quarter|question|quick|quit|quiz|quote|rabbit|raccoon|race|rack|radar|radio|rail|rain|raise|rally|ramp|ranch|random|range|rapid|rare|rate|rather|raven|raw|razor|ready|real|reason|rebel|rebuild|recall|receive|recipe|record|recycle|reduce|reflect|reform|refuse|region|regret|regular|reject|relax|release|relief|rely|remain|remember|remind|remove|render|renew|rent|reopen|repair|repeat|replace|report|require|rescue|resemble|resist|resource|response|result|retire|retreat|return|reunion|reveal|review|reward|rhythm|rib|ribbon|rice|rich|ride|ridge|rifle|right|rigid|ring|riot|ripple|risk|ritual|rival|river|road|roast|robot|robust|rocket|romance|roof|rookie|room|rose|rotate|rough|round|route|royal|rubber|rude|rug|rule|run|runway|rural|sad|saddle|sadness|safe|sail|salad|salmon|salon|salt|salute|same|sample|sand|satisfy|satoshi|sauce|sausage|save|say|scale|scan|scare|scatter|scene|scheme|school|science|scissors|scorpion|scout|scrap|screen|script|scrub|sea|search|season|seat|second|secret|section|security|seed|seek|segment|select|sell|seminar|senior|sense|sentence|series|service|session|settle|setup|seven|shadow|shaft|shallow|share|shed|shell|sheriff|shield|shift|shine|ship|shiver|shock|shoe|shoot|shop|short|shoulder|shove|shrimp|shrug|shuffle|shy|sibling|sick|side|siege|sight|sign|silent|silk|silly|silver|similar|simple|since|sing|siren|sister|situate|six|size|skate|sketch|ski|skill|skin|skirt|skull|slab|slam|sleep|slender|slice|slide|slight|slim|slogan|slot|slow|slush|small|smart|smile|smoke|smooth|snack|snake|snap|sniff|snow|soap|soccer|social|sock|soda|soft|solar|soldier|solid|solution|solve|someone|song|soon|sorry|sort|soul|sound|soup|source|south|space|spare|spatial|spawn|speak|special|speed|spell|spend|sphere|spice|spider|spike|spin|spirit|split|spoil|sponsor|spoon|sport|spot|spray|spread|spring|spy|square|squeeze|squirrel|stable|stadium|staff|stage|stairs|stamp|stand|start|state|stay|steak|steel|stem|step|stereo|stick|still|sting|stock|stomach|stone|stool|story|stove|strategy|street|strike|strong|struggle|student|stuff|stumble|style|subject|submit|subway|success|such|sudden|suffer|sugar|suggest|suit|summer|sun|sunny|sunset|super|supply|supreme|sure|surface|surge|surprise|surround|survey|suspect|sustain|swallow|swamp|swap|swarm|swear|sweet|swift|swim|swing|switch|sword|symbol|symptom|syrup|system|table|tackle|tag|tail|talent|talk|tank|tape|target|task|taste|tattoo|taxi|teach|team|tell|ten|tenant|tennis|tent|term|test|text|thank|that|theme|then|theory|there|they|thing|this|thought|three|thrive|throw|thumb|thunder|ticket|tide|tiger|tilt|timber|time|tiny|tip|tired|tissue|title|toast|tobacco|today|toddler|toe|together|toilet|token|tomato|tomorrow|tone|tongue|tonight|tool|tooth|top|topic|topple|torch|tornado|tortoise|toss|total|tourist|toward|tower|town|toy|track|trade|traffic|tragic|train|transfer|trap|trash|travel|tray|treat|tree|trend|trial|tribe|trick|trigger|trim|trip|trophy|trouble|truck|true|truly|trumpet|trust|truth|try|tube|tuition|tumble|tuna|tunnel|turkey|turn|turtle|twelve|twenty|twice|twin|twist|two|type|typical|ugly|umbrella|unable|unaware|uncle|uncover|under|undo|unfair|unfold|unhappy|uniform|unique|unit|universe|unknown|unlock|until|unusual|unveil|update|upgrade|uphold|upon|upper|upset|urban|urge|usage|use|used|useful|useless|usual|utility|vacant|vacuum|vague|valid|valley|valve|van|vanish|vapor|various|vast|vault|vehicle|velvet|vendor|venture|venue|verb|verify|version|very|vessel|veteran|viable|vibrant|vicious|victory|video|view|village|vintage|violin|virtual|virus|visa|visit|visual|vital|vivid|vocal|voice|void|volcano|volume|vote|voyage|wage|wagon|wait|walk|wall|walnut|want|warfare|warm|warrior|wash|wasp|waste|water|wave|way|wealth|weapon|wear|weasel|weather|web|wedding|weekend|weird|welcome|west|wet|whale|what|wheat|wheel|when|where|whip|whisper|wide|width|wife|wild|will|win|window|wine|wing|wink|winner|winter|wire|wisdom|wise|wish|witness|wolf|woman|wonder|wood|wool|word|work|world|worry|worth|wrap|wreck|wrestle|wrist|write|wrong|yard|year|yellow|you|young|youth|zebra|zero|zone|zoo".split("|");
  const INVALID_MNEMONIC = "Invalid mnemonic";
  const INVALID_ENTROPY = "Invalid entropy";
  const INVALID_CHECKSUM = "Invalid mnemonic checksum";
  function normalize(str) {
    return (str || "").normalize("NFKD");
  }
  function binaryToByte(bin) {
    return parseInt(bin, 2);
  }
  function bytesToBinary(bytes2) {
    return bytes2.map((x) => x.toString(2).padStart(8, "0")).join("");
  }
  function deriveChecksumBits(entropyBuffer) {
    return bytesToBinary(Array.from(sha256AsU8a(entropyBuffer))).slice(0, entropyBuffer.length * 8 / 32);
  }
  function mnemonicToSeedSync(mnemonic, password) {
    return pbkdf2Encode(stringToU8a(normalize(mnemonic)), stringToU8a(`mnemonic${normalize(password)}`)).password;
  }
  function mnemonicToEntropy$1(mnemonic, wordlist = DEFAULT_WORDLIST) {
    const words = normalize(mnemonic).split(" ");
    if (words.length % 3 !== 0) {
      throw new Error(INVALID_MNEMONIC);
    }
    const bits2 = words.map((word) => {
      const index2 = wordlist.indexOf(word);
      if (index2 === -1) {
        throw new Error(INVALID_MNEMONIC);
      }
      return index2.toString(2).padStart(11, "0");
    }).join("");
    const dividerIndex = Math.floor(bits2.length / 33) * 32;
    const entropyBits = bits2.slice(0, dividerIndex);
    const checksumBits = bits2.slice(dividerIndex);
    const matched = entropyBits.match(/(.{1,8})/g);
    const entropyBytes = matched && matched.map(binaryToByte);
    if (!entropyBytes || entropyBytes.length % 4 !== 0 || entropyBytes.length < 16 || entropyBytes.length > 32) {
      throw new Error(INVALID_ENTROPY);
    }
    const entropy = u8aToU8a(entropyBytes);
    if (deriveChecksumBits(entropy) !== checksumBits) {
      throw new Error(INVALID_CHECKSUM);
    }
    return entropy;
  }
  function entropyToMnemonic(entropy, wordlist = DEFAULT_WORDLIST) {
    if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {
      throw new Error(INVALID_ENTROPY);
    }
    const matched = `${bytesToBinary(Array.from(entropy))}${deriveChecksumBits(entropy)}`.match(/(.{1,11})/g);
    const mapped = matched && matched.map((b) => wordlist[binaryToByte(b)]);
    if (!mapped || mapped.length < 12) {
      throw new Error("Unable to map entropy to mnemonic");
    }
    return mapped.join(" ");
  }
  function validateMnemonic(mnemonic, wordlist) {
    try {
      mnemonicToEntropy$1(mnemonic, wordlist);
    } catch {
      return false;
    }
    return true;
  }
  function mnemonicToEntropy(mnemonic, wordlist, onlyJs) {
    return !hasBigInt || !wordlist && !onlyJs && isReady() ? bip39ToEntropy(mnemonic) : mnemonicToEntropy$1(mnemonic, wordlist);
  }
  function mnemonicValidate(mnemonic, wordlist, onlyJs) {
    return !hasBigInt || !wordlist && !onlyJs && isReady() ? bip39Validate(mnemonic) : validateMnemonic(mnemonic, wordlist);
  }
  function mnemonicToLegacySeed(mnemonic, password = "", onlyJs, byteLength = 32) {
    if (!mnemonicValidate(mnemonic)) {
      throw new Error("Invalid bip39 mnemonic specified");
    } else if (![32, 64].includes(byteLength)) {
      throw new Error(`Invalid seed length ${byteLength}, expected 32 or 64`);
    }
    return byteLength === 32 ? !hasBigInt || !onlyJs && isReady() ? bip39ToSeed(mnemonic, password) : mnemonicToSeedSync(mnemonic, password).subarray(0, 32) : mnemonicToSeedSync(mnemonic, password);
  }
  function mnemonicToMiniSecret(mnemonic, password = "", wordlist, onlyJs) {
    if (!mnemonicValidate(mnemonic, wordlist, onlyJs)) {
      throw new Error("Invalid bip39 mnemonic specified");
    } else if (!wordlist && !onlyJs && isReady()) {
      return bip39ToMiniSecret(mnemonic, password);
    }
    const entropy = mnemonicToEntropy(mnemonic, wordlist);
    const salt = stringToU8a(`mnemonic${password}`);
    return pbkdf2Encode(entropy, salt).password.slice(0, 32);
  }
  function L32(x, c) {
    return x << c | x >>> 32 - c;
  }
  function ld32(x, i2) {
    let u = x[i2 + 3] & 255;
    u = u << 8 | x[i2 + 2] & 255;
    u = u << 8 | x[i2 + 1] & 255;
    return u << 8 | x[i2 + 0] & 255;
  }
  function st32(x, j, u) {
    for (let i2 = 0; i2 < 4; i2++) {
      x[j + i2] = u & 255;
      u >>>= 8;
    }
  }
  function vn(x, xi, y, yi, n) {
    let d = 0;
    for (let i2 = 0; i2 < n; i2++)
      d |= x[xi + i2] ^ y[yi + i2];
    return (1 & d - 1 >>> 8) - 1;
  }
  function core(out, inp, k, c, h) {
    const w = new Uint32Array(16), x = new Uint32Array(16), y = new Uint32Array(16), t = new Uint32Array(4);
    let i2, j, m2;
    for (i2 = 0; i2 < 4; i2++) {
      x[5 * i2] = ld32(c, 4 * i2);
      x[1 + i2] = ld32(k, 4 * i2);
      x[6 + i2] = ld32(inp, 4 * i2);
      x[11 + i2] = ld32(k, 16 + 4 * i2);
    }
    for (i2 = 0; i2 < 16; i2++)
      y[i2] = x[i2];
    for (i2 = 0; i2 < 20; i2++) {
      for (j = 0; j < 4; j++) {
        for (m2 = 0; m2 < 4; m2++)
          t[m2] = x[(5 * j + 4 * m2) % 16];
        t[1] ^= L32(t[0] + t[3] | 0, 7);
        t[2] ^= L32(t[1] + t[0] | 0, 9);
        t[3] ^= L32(t[2] + t[1] | 0, 13);
        t[0] ^= L32(t[3] + t[2] | 0, 18);
        for (m2 = 0; m2 < 4; m2++)
          w[4 * j + (j + m2) % 4] = t[m2];
      }
      for (m2 = 0; m2 < 16; m2++)
        x[m2] = w[m2];
    }
    if (h) {
      for (i2 = 0; i2 < 16; i2++)
        x[i2] = x[i2] + y[i2] | 0;
      for (i2 = 0; i2 < 4; i2++) {
        x[5 * i2] = x[5 * i2] - ld32(c, 4 * i2) | 0;
        x[6 + i2] = x[6 + i2] - ld32(inp, 4 * i2) | 0;
      }
      for (i2 = 0; i2 < 4; i2++) {
        st32(out, 4 * i2, x[5 * i2]);
        st32(out, 16 + 4 * i2, x[6 + i2]);
      }
    } else {
      for (i2 = 0; i2 < 16; i2++)
        st32(out, 4 * i2, x[i2] + y[i2] | 0);
    }
  }
  const sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
  function crypto_stream_salsa20_xor(c, cpos, m2, mpos, b, n, k) {
    const z2 = new Uint8Array(16), x = new Uint8Array(64);
    let u, i2;
    if (!b)
      return 0;
    for (i2 = 0; i2 < 16; i2++)
      z2[i2] = 0;
    for (i2 = 0; i2 < 8; i2++)
      z2[i2] = n[i2];
    while (b >= 64) {
      core(x, z2, k, sigma, false);
      for (i2 = 0; i2 < 64; i2++)
        c[cpos + i2] = (m2 ? m2[mpos + i2] : 0) ^ x[i2];
      u = 1;
      for (i2 = 8; i2 < 16; i2++) {
        u = u + (z2[i2] & 255) | 0;
        z2[i2] = u & 255;
        u >>>= 8;
      }
      b -= 64;
      cpos += 64;
      if (m2)
        mpos += 64;
    }
    if (b > 0) {
      core(x, z2, k, sigma, false);
      for (i2 = 0; i2 < b; i2++)
        c[cpos + i2] = (m2 ? m2[mpos + i2] : 0) ^ x[i2];
    }
    return 0;
  }
  function crypto_stream_xor(c, cpos, m2, mpos, d, n, k) {
    const s = new Uint8Array(32);
    core(s, n, k, sigma, true);
    return crypto_stream_salsa20_xor(c, cpos, m2, mpos, d, n.subarray(16), s);
  }
  function add1305(h, c) {
    let u = 0;
    for (let j = 0; j < 17; j++) {
      u = u + (h[j] + c[j] | 0) | 0;
      h[j] = u & 255;
      u >>>= 8;
    }
  }
  const minusp = new Uint32Array([5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252]);
  function crypto_onetimeauth(out, outpos, m2, mpos, n, k) {
    let i2, j, u;
    const x = new Uint32Array(17), r2 = new Uint32Array(17), h = new Uint32Array(17), c = new Uint32Array(17), g = new Uint32Array(17);
    for (j = 0; j < 17; j++)
      r2[j] = h[j] = 0;
    for (j = 0; j < 16; j++)
      r2[j] = k[j];
    r2[3] &= 15;
    r2[4] &= 252;
    r2[7] &= 15;
    r2[8] &= 252;
    r2[11] &= 15;
    r2[12] &= 252;
    r2[15] &= 15;
    while (n > 0) {
      for (j = 0; j < 17; j++)
        c[j] = 0;
      for (j = 0; j < 16 && j < n; ++j)
        c[j] = m2[mpos + j];
      c[j] = 1;
      mpos += j;
      n -= j;
      add1305(h, c);
      for (i2 = 0; i2 < 17; i2++) {
        x[i2] = 0;
        for (j = 0; j < 17; j++)
          x[i2] = x[i2] + h[j] * (j <= i2 ? r2[i2 - j] : 320 * r2[i2 + 17 - j] | 0) | 0 | 0;
      }
      for (i2 = 0; i2 < 17; i2++)
        h[i2] = x[i2];
      u = 0;
      for (j = 0; j < 16; j++) {
        u = u + h[j] | 0;
        h[j] = u & 255;
        u >>>= 8;
      }
      u = u + h[16] | 0;
      h[16] = u & 3;
      u = 5 * (u >>> 2) | 0;
      for (j = 0; j < 16; j++) {
        u = u + h[j] | 0;
        h[j] = u & 255;
        u >>>= 8;
      }
      u = u + h[16] | 0;
      h[16] = u;
    }
    for (j = 0; j < 17; j++)
      g[j] = h[j];
    add1305(h, minusp);
    const s = -(h[16] >>> 7) | 0;
    for (j = 0; j < 17; j++)
      h[j] ^= s & (g[j] ^ h[j]);
    for (j = 0; j < 16; j++)
      c[j] = k[j + 16];
    c[16] = 0;
    add1305(h, c);
    for (j = 0; j < 16; j++)
      out[outpos + j] = h[j];
    return 0;
  }
  function crypto_onetimeauth_verify(h, hpos, m2, mpos, n, k) {
    const x = new Uint8Array(16);
    crypto_onetimeauth(x, 0, m2, mpos, n, k);
    return vn(h, hpos, x, 0, 16);
  }
  function crypto_secretbox(c, m2, d, n, k) {
    if (d < 32)
      return -1;
    crypto_stream_xor(c, 0, m2, 0, d, n, k);
    crypto_onetimeauth(c, 16, c, 32, d - 32, c);
    for (let i2 = 0; i2 < 16; i2++)
      c[i2] = 0;
    return 0;
  }
  function crypto_secretbox_open(m2, c, d, n, k) {
    const x = new Uint8Array(32);
    if (d < 32)
      return -1;
    crypto_stream_xor(x, 0, null, 0, 32, n, k);
    if (crypto_onetimeauth_verify(c, 16, c, 32, d - 32, x) !== 0)
      return -1;
    crypto_stream_xor(m2, 0, c, 0, d, n, k);
    for (let i2 = 0; i2 < 32; i2++)
      m2[i2] = 0;
    return 0;
  }
  const crypto_secretbox_KEYBYTES = 32;
  const crypto_secretbox_NONCEBYTES = 24;
  const crypto_secretbox_ZEROBYTES = 32;
  const crypto_secretbox_BOXZEROBYTES = 16;
  function checkLengths(k, n) {
    if (k.length !== crypto_secretbox_KEYBYTES)
      throw new Error("bad key size");
    if (n.length !== crypto_secretbox_NONCEBYTES)
      throw new Error("bad nonce size");
  }
  function checkArrayTypes(...args) {
    for (let i2 = 0; i2 < args.length; i2++) {
      if (!(args[i2] instanceof Uint8Array))
        throw new TypeError("unexpected type, use Uint8Array");
    }
  }
  function naclSecretbox(msg, nonce, key) {
    checkArrayTypes(msg, nonce, key);
    checkLengths(key, nonce);
    const m2 = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
    const c = new Uint8Array(m2.length);
    for (let i2 = 0; i2 < msg.length; i2++)
      m2[i2 + crypto_secretbox_ZEROBYTES] = msg[i2];
    crypto_secretbox(c, m2, m2.length, nonce, key);
    return c.subarray(crypto_secretbox_BOXZEROBYTES);
  }
  function naclSecretboxOpen(box, nonce, key) {
    checkArrayTypes(box, nonce, key);
    checkLengths(key, nonce);
    const c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
    const m2 = new Uint8Array(c.length);
    for (let i2 = 0; i2 < box.length; i2++)
      c[i2 + crypto_secretbox_BOXZEROBYTES] = box[i2];
    if (c.length < 32)
      return null;
    if (crypto_secretbox_open(m2, c, c.length, nonce, key) !== 0)
      return null;
    return m2.subarray(crypto_secretbox_ZEROBYTES);
  }
  function naclDecrypt(encrypted, nonce, secret) {
    return naclSecretboxOpen(encrypted, nonce, secret);
  }
  function naclEncrypt(message, secret, nonce = randomAsU8a(24)) {
    return {
      encrypted: naclSecretbox(message, nonce, secret),
      nonce
    };
  }
  const rotl$1 = (a, b) => a << b | a >>> 32 - b;
  function XorAndSalsa(prev2, pi, input, ii, out, oi) {
    let y00 = prev2[pi++] ^ input[ii++], y01 = prev2[pi++] ^ input[ii++];
    let y02 = prev2[pi++] ^ input[ii++], y03 = prev2[pi++] ^ input[ii++];
    let y04 = prev2[pi++] ^ input[ii++], y05 = prev2[pi++] ^ input[ii++];
    let y06 = prev2[pi++] ^ input[ii++], y07 = prev2[pi++] ^ input[ii++];
    let y08 = prev2[pi++] ^ input[ii++], y09 = prev2[pi++] ^ input[ii++];
    let y10 = prev2[pi++] ^ input[ii++], y11 = prev2[pi++] ^ input[ii++];
    let y12 = prev2[pi++] ^ input[ii++], y13 = prev2[pi++] ^ input[ii++];
    let y14 = prev2[pi++] ^ input[ii++], y15 = prev2[pi++] ^ input[ii++];
    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
    for (let i2 = 0; i2 < 8; i2 += 2) {
      x04 ^= rotl$1(x00 + x12 | 0, 7);
      x08 ^= rotl$1(x04 + x00 | 0, 9);
      x12 ^= rotl$1(x08 + x04 | 0, 13);
      x00 ^= rotl$1(x12 + x08 | 0, 18);
      x09 ^= rotl$1(x05 + x01 | 0, 7);
      x13 ^= rotl$1(x09 + x05 | 0, 9);
      x01 ^= rotl$1(x13 + x09 | 0, 13);
      x05 ^= rotl$1(x01 + x13 | 0, 18);
      x14 ^= rotl$1(x10 + x06 | 0, 7);
      x02 ^= rotl$1(x14 + x10 | 0, 9);
      x06 ^= rotl$1(x02 + x14 | 0, 13);
      x10 ^= rotl$1(x06 + x02 | 0, 18);
      x03 ^= rotl$1(x15 + x11 | 0, 7);
      x07 ^= rotl$1(x03 + x15 | 0, 9);
      x11 ^= rotl$1(x07 + x03 | 0, 13);
      x15 ^= rotl$1(x11 + x07 | 0, 18);
      x01 ^= rotl$1(x00 + x03 | 0, 7);
      x02 ^= rotl$1(x01 + x00 | 0, 9);
      x03 ^= rotl$1(x02 + x01 | 0, 13);
      x00 ^= rotl$1(x03 + x02 | 0, 18);
      x06 ^= rotl$1(x05 + x04 | 0, 7);
      x07 ^= rotl$1(x06 + x05 | 0, 9);
      x04 ^= rotl$1(x07 + x06 | 0, 13);
      x05 ^= rotl$1(x04 + x07 | 0, 18);
      x11 ^= rotl$1(x10 + x09 | 0, 7);
      x08 ^= rotl$1(x11 + x10 | 0, 9);
      x09 ^= rotl$1(x08 + x11 | 0, 13);
      x10 ^= rotl$1(x09 + x08 | 0, 18);
      x12 ^= rotl$1(x15 + x14 | 0, 7);
      x13 ^= rotl$1(x12 + x15 | 0, 9);
      x14 ^= rotl$1(x13 + x12 | 0, 13);
      x15 ^= rotl$1(x14 + x13 | 0, 18);
    }
    out[oi++] = y00 + x00 | 0;
    out[oi++] = y01 + x01 | 0;
    out[oi++] = y02 + x02 | 0;
    out[oi++] = y03 + x03 | 0;
    out[oi++] = y04 + x04 | 0;
    out[oi++] = y05 + x05 | 0;
    out[oi++] = y06 + x06 | 0;
    out[oi++] = y07 + x07 | 0;
    out[oi++] = y08 + x08 | 0;
    out[oi++] = y09 + x09 | 0;
    out[oi++] = y10 + x10 | 0;
    out[oi++] = y11 + x11 | 0;
    out[oi++] = y12 + x12 | 0;
    out[oi++] = y13 + x13 | 0;
    out[oi++] = y14 + x14 | 0;
    out[oi++] = y15 + x15 | 0;
  }
  function BlockMix(input, ii, out, oi, r2) {
    let head = oi + 0;
    let tail = oi + 16 * r2;
    for (let i2 = 0; i2 < 16; i2++)
      out[tail + i2] = input[ii + (2 * r2 - 1) * 16 + i2];
    for (let i2 = 0; i2 < r2; i2++, head += 16, ii += 16) {
      XorAndSalsa(out, tail, input, ii, out, head);
      if (i2 > 0)
        tail += 16;
      XorAndSalsa(out, head, input, ii += 16, out, tail);
    }
  }
  function scryptInit(password, salt, _opts) {
    const opts = checkOpts({
      dkLen: 32,
      asyncTick: 10,
      maxmem: 1024 ** 3 + 1024
    }, _opts);
    const { N: N2, r: r2, p, dkLen, asyncTick, maxmem, onProgress } = opts;
    assert.number(N2);
    assert.number(r2);
    assert.number(p);
    assert.number(dkLen);
    assert.number(asyncTick);
    assert.number(maxmem);
    if (onProgress !== void 0 && typeof onProgress !== "function")
      throw new Error("progressCb should be function");
    const blockSize = 128 * r2;
    const blockSize32 = blockSize / 4;
    if (N2 <= 1 || (N2 & N2 - 1) !== 0 || N2 >= 2 ** (blockSize / 8) || N2 > 2 ** 32) {
      throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");
    }
    if (p < 0 || p > (2 ** 32 - 1) * 32 / blockSize) {
      throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
    }
    if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {
      throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
    }
    const memUsed = blockSize * (N2 + p);
    if (memUsed > maxmem) {
      throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
    }
    const B = pbkdf2(sha256, password, salt, { c: 1, dkLen: blockSize * p });
    const B32 = u32$1(B);
    const V = u32$1(new Uint8Array(blockSize * N2));
    const tmp = u32$1(new Uint8Array(blockSize));
    let blockMixCb = () => {
    };
    if (onProgress) {
      const totalBlockMix = 2 * N2 * p;
      const callbackPer = Math.max(Math.floor(totalBlockMix / 1e4), 1);
      let blockMixCnt = 0;
      blockMixCb = () => {
        blockMixCnt++;
        if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
          onProgress(blockMixCnt / totalBlockMix);
      };
    }
    return { N: N2, r: r2, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };
  }
  function scryptOutput(password, dkLen, B, V, tmp) {
    const res = pbkdf2(sha256, password, B, { c: 1, dkLen });
    B.fill(0);
    V.fill(0);
    tmp.fill(0);
    return res;
  }
  function scrypt(password, salt, opts) {
    const { N: N2, r: r2, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);
    for (let pi = 0; pi < p; pi++) {
      const Pi = blockSize32 * pi;
      for (let i2 = 0; i2 < blockSize32; i2++)
        V[i2] = B32[Pi + i2];
      for (let i2 = 0, pos = 0; i2 < N2 - 1; i2++) {
        BlockMix(V, pos, V, pos += blockSize32, r2);
        blockMixCb();
      }
      BlockMix(V, (N2 - 1) * blockSize32, B32, Pi, r2);
      blockMixCb();
      for (let i2 = 0; i2 < N2; i2++) {
        const j = B32[Pi + blockSize32 - 16] % N2;
        for (let k = 0; k < blockSize32; k++)
          tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k];
        BlockMix(tmp, 0, B32, Pi, r2);
        blockMixCb();
      }
    }
    return scryptOutput(password, dkLen, B, V, tmp);
  }
  const DEFAULT_PARAMS = {
    N: 1 << 15,
    p: 1,
    r: 8
  };
  function scryptEncode(passphrase, salt = randomAsU8a(), params = DEFAULT_PARAMS, onlyJs) {
    const u8a2 = u8aToU8a(passphrase);
    return {
      params,
      password: !hasBigInt || !onlyJs && isReady() ? scrypt$1(u8a2, salt, Math.log2(params.N), params.r, params.p) : scrypt(u8a2, salt, objectSpread({ dkLen: 64 }, params)),
      salt
    };
  }
  function scryptFromU8a(data2) {
    const salt = data2.subarray(0, 32);
    const N2 = u8aToBn(data2.subarray(32 + 0, 32 + 4), BN_LE_OPTS).toNumber();
    const p = u8aToBn(data2.subarray(32 + 4, 32 + 8), BN_LE_OPTS).toNumber();
    const r2 = u8aToBn(data2.subarray(32 + 8, 32 + 12), BN_LE_OPTS).toNumber();
    if (N2 !== DEFAULT_PARAMS.N || p !== DEFAULT_PARAMS.p || r2 !== DEFAULT_PARAMS.r) {
      throw new Error("Invalid injected scrypt params found");
    }
    return { params: { N: N2, p, r: r2 }, salt };
  }
  function scryptToU8a(salt, { N: N2, p, r: r2 }) {
    return u8aConcat(salt, bnToU8a(N2, BN_LE_32_OPTS), bnToU8a(p, BN_LE_32_OPTS), bnToU8a(r2, BN_LE_32_OPTS));
  }
  const ENCODING = ["scrypt", "xsalsa20-poly1305"];
  const ENCODING_NONE = ["none"];
  const ENCODING_VERSION = "3";
  const NONCE_LENGTH = 24;
  const SCRYPT_LENGTH = 32 + 3 * 4;
  function jsonDecryptData(encrypted, passphrase, encType = ENCODING) {
    if (!encrypted) {
      throw new Error("No encrypted data available to decode");
    } else if (encType.includes("xsalsa20-poly1305") && !passphrase) {
      throw new Error("Password required to decode encrypted data");
    }
    let encoded = encrypted;
    if (passphrase) {
      let password;
      if (encType.includes("scrypt")) {
        const { params, salt } = scryptFromU8a(encrypted);
        password = scryptEncode(passphrase, salt, params).password;
        encrypted = encrypted.subarray(SCRYPT_LENGTH);
      } else {
        password = stringToU8a(passphrase);
      }
      encoded = naclDecrypt(encrypted.subarray(NONCE_LENGTH), encrypted.subarray(0, NONCE_LENGTH), u8aFixLength(password, 256, true));
    }
    if (!encoded) {
      throw new Error("Unable to decode using the supplied passphrase");
    }
    return encoded;
  }
  function jsonEncryptFormat(encoded, contentType, isEncrypted) {
    return {
      encoded: base64Encode(encoded),
      encoding: {
        content: contentType,
        type: isEncrypted ? ENCODING : ENCODING_NONE,
        version: ENCODING_VERSION
      }
    };
  }
  const secp256k1VerifyHasher = (hashType) => (message, signature, publicKey) => secp256k1Verify(message, signature, publicKey, hashType);
  const VERIFIERS_ECDSA = [
    ["ecdsa", secp256k1VerifyHasher("blake2")],
    ["ethereum", secp256k1VerifyHasher("keccak")]
  ];
  const VERIFIERS = [
    ["ed25519", ed25519Verify],
    ["sr25519", sr25519Verify],
    ...VERIFIERS_ECDSA
  ];
  const CRYPTO_TYPES = ["ed25519", "sr25519", "ecdsa"];
  function verifyDetect(result, { message, publicKey, signature }, verifiers = VERIFIERS) {
    result.isValid = verifiers.some(([crypto2, verify]) => {
      try {
        if (verify(message, signature, publicKey)) {
          result.crypto = crypto2;
          return true;
        }
      } catch {
      }
      return false;
    });
    return result;
  }
  function verifyMultisig(result, { message, publicKey, signature }) {
    if (![0, 1, 2].includes(signature[0])) {
      throw new Error(`Unknown crypto type, expected signature prefix [0..2], found ${signature[0]}`);
    }
    const type = CRYPTO_TYPES[signature[0]] || "none";
    result.crypto = type;
    try {
      result.isValid = {
        ecdsa: () => verifyDetect(result, { message, publicKey, signature: signature.subarray(1) }, VERIFIERS_ECDSA).isValid,
        ed25519: () => ed25519Verify(message, signature.subarray(1), publicKey),
        none: () => {
          throw Error("no verify for `none` crypto type");
        },
        sr25519: () => sr25519Verify(message, signature.subarray(1), publicKey)
      }[type]();
    } catch {
    }
    return result;
  }
  function getVerifyFn(signature) {
    return [0, 1, 2].includes(signature[0]) && [65, 66].includes(signature.length) ? verifyMultisig : verifyDetect;
  }
  function signatureVerify(message, signature, addressOrPublicKey) {
    const signatureU8a = u8aToU8a(signature);
    if (![64, 65, 66].includes(signatureU8a.length)) {
      throw new Error(`Invalid signature length, expected [64..66] bytes, found ${signatureU8a.length}`);
    }
    const publicKey = decodeAddress(addressOrPublicKey);
    const input = { message: u8aToU8a(message), publicKey, signature: signatureU8a };
    const result = { crypto: "none", isValid: false, isWrapped: u8aIsWrapped(input.message, true), publicKey };
    const isWrappedBytes = u8aIsWrapped(input.message, false);
    const verifyFn = getVerifyFn(signatureU8a);
    verifyFn(result, input);
    if (result.crypto !== "none" || result.isWrapped && !isWrappedBytes) {
      return result;
    }
    input.message = isWrappedBytes ? u8aUnwrapBytes(input.message) : u8aWrapBytes(input.message);
    return verifyFn(result, input);
  }
  const P64_1 = BigInt$1("11400714785074694791");
  const P64_2 = BigInt$1("14029467366897019727");
  const P64_3 = BigInt$1("1609587929392839161");
  const P64_4 = BigInt$1("9650029242287828579");
  const P64_5 = BigInt$1("2870177450012600261");
  const U64 = BigInt$1("0xffffffffffffffff");
  const _7n = BigInt$1(7);
  const _11n = BigInt$1(11);
  const _12n = BigInt$1(12);
  const _16n = BigInt$1(16);
  const _18n = BigInt$1(18);
  const _23n = BigInt$1(23);
  const _27n = BigInt$1(27);
  const _29n = BigInt$1(29);
  const _31n = BigInt$1(31);
  const _32n = BigInt$1(32);
  const _33n = BigInt$1(33);
  const _64n = BigInt$1(64);
  const _256n = BigInt$1(256);
  function rotl(a, b) {
    const c = a & U64;
    return (c << b | c >> _64n - b) & U64;
  }
  function fromU8a(u8a2, p, count) {
    const bigints = new Array(count);
    let offset = 0;
    for (let i2 = 0; i2 < count; i2++, offset += 2) {
      bigints[i2] = BigInt$1(u8a2[p + offset] | u8a2[p + 1 + offset] << 8);
    }
    let result = _0n$6;
    for (let i2 = count - 1; i2 >= 0; i2--) {
      result = (result << _16n) + bigints[i2];
    }
    return result;
  }
  function init(seed, input) {
    const state = {
      seed,
      u8a: new Uint8Array(32),
      u8asize: 0,
      v1: seed + P64_1 + P64_2,
      v2: seed + P64_2,
      v3: seed,
      v4: seed - P64_1
    };
    if (input.length < 32) {
      state.u8a.set(input);
      state.u8asize = input.length;
      return state;
    }
    const limit = input.length - 32;
    let p = 0;
    if (limit >= 0) {
      const adjustV = (v) => P64_1 * rotl(v + P64_2 * fromU8a(input, p, 4), _31n);
      do {
        state.v1 = adjustV(state.v1);
        p += 8;
        state.v2 = adjustV(state.v2);
        p += 8;
        state.v3 = adjustV(state.v3);
        p += 8;
        state.v4 = adjustV(state.v4);
        p += 8;
      } while (p <= limit);
    }
    if (p < input.length) {
      state.u8a.set(input.subarray(p, input.length));
      state.u8asize = input.length - p;
    }
    return state;
  }
  function xxhash64(input, initSeed) {
    const { seed, u8a: u8a2, u8asize, v1: v16, v2: v22, v3, v4: v42 } = init(BigInt$1(initSeed), input);
    let p = 0;
    let h64 = U64 & BigInt$1(input.length) + (input.length >= 32 ? ((((rotl(v16, _1n$8) + rotl(v22, _7n) + rotl(v3, _12n) + rotl(v42, _18n) ^ P64_1 * rotl(v16 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v22 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v3 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v42 * P64_2, _31n)) * P64_1 + P64_4 : seed + P64_5);
    while (p <= u8asize - 8) {
      h64 = U64 & P64_4 + P64_1 * rotl(h64 ^ P64_1 * rotl(P64_2 * fromU8a(u8a2, p, 4), _31n), _27n);
      p += 8;
    }
    if (p + 4 <= u8asize) {
      h64 = U64 & P64_3 + P64_2 * rotl(h64 ^ P64_1 * fromU8a(u8a2, p, 2), _23n);
      p += 4;
    }
    while (p < u8asize) {
      h64 = U64 & P64_1 * rotl(h64 ^ P64_5 * BigInt$1(u8a2[p++]), _11n);
    }
    h64 = U64 & P64_2 * (h64 ^ h64 >> _33n);
    h64 = U64 & P64_3 * (h64 ^ h64 >> _29n);
    h64 = U64 & (h64 ^ h64 >> _32n);
    const result = new Uint8Array(8);
    for (let i2 = 7; i2 >= 0; i2--) {
      result[i2] = Number(h64 % _256n);
      h64 = h64 / _256n;
    }
    return result;
  }
  function xxhashAsU8a(data2, bitLength = 64, onlyJs) {
    const rounds = Math.ceil(bitLength / 64);
    const u8a2 = u8aToU8a(data2);
    if (!hasBigInt || !onlyJs && isReady()) {
      return twox(u8a2, rounds);
    }
    const result = new Uint8Array(rounds * 8);
    for (let seed = 0; seed < rounds; seed++) {
      result.set(xxhash64(u8a2, seed).reverse(), seed * 8);
    }
    return result;
  }
  const PKCS8_DIVIDER = new Uint8Array([161, 35, 3, 33, 0]);
  const PKCS8_HEADER = new Uint8Array([48, 83, 2, 1, 1, 48, 5, 6, 3, 43, 101, 112, 4, 34, 4, 32]);
  const PUB_LENGTH = 32;
  const SEC_LENGTH = 64;
  const SEED_LENGTH = 32;
  const SEED_OFFSET = PKCS8_HEADER.length;
  function decodePair(passphrase, encrypted, _encType) {
    const encType = Array.isArray(_encType) || _encType === void 0 ? _encType : [_encType];
    const decrypted = jsonDecryptData(encrypted, passphrase, encType);
    const header = decrypted.subarray(0, PKCS8_HEADER.length);
    if (!u8aEq(header, PKCS8_HEADER)) {
      throw new Error("Invalid Pkcs8 header found in body");
    }
    let secretKey = decrypted.subarray(SEED_OFFSET, SEED_OFFSET + SEC_LENGTH);
    let divOffset = SEED_OFFSET + SEC_LENGTH;
    let divider = decrypted.subarray(divOffset, divOffset + PKCS8_DIVIDER.length);
    if (!u8aEq(divider, PKCS8_DIVIDER)) {
      divOffset = SEED_OFFSET + SEED_LENGTH;
      secretKey = decrypted.subarray(SEED_OFFSET, divOffset);
      divider = decrypted.subarray(divOffset, divOffset + PKCS8_DIVIDER.length);
      if (!u8aEq(divider, PKCS8_DIVIDER)) {
        throw new Error("Invalid Pkcs8 divider found in body");
      }
    }
    const pubOffset = divOffset + PKCS8_DIVIDER.length;
    const publicKey = decrypted.subarray(pubOffset, pubOffset + PUB_LENGTH);
    return {
      publicKey,
      secretKey
    };
  }
  function encodePair({ publicKey, secretKey }, passphrase) {
    if (!secretKey) {
      throw new Error("Expected a valid secretKey to be passed to encode");
    }
    const encoded = u8aConcat(PKCS8_HEADER, secretKey, PKCS8_DIVIDER, publicKey);
    if (!passphrase) {
      return encoded;
    }
    const { params, password, salt } = scryptEncode(passphrase);
    const { encrypted, nonce } = naclEncrypt(encoded, password.subarray(0, 32));
    return u8aConcat(scryptToU8a(salt, params), nonce, encrypted);
  }
  function pairToJson(type, { address, meta }, encoded, isEncrypted) {
    return objectSpread(jsonEncryptFormat(encoded, ["pkcs8", type], isEncrypted), {
      address,
      meta
    });
  }
  const SIG_TYPE_NONE = new Uint8Array();
  const TYPE_FROM_SEED = {
    ecdsa: secp256k1PairFromSeed,
    ed25519: ed25519PairFromSeed,
    ethereum: secp256k1PairFromSeed,
    sr25519: sr25519PairFromSeed
  };
  const TYPE_PREFIX = {
    ecdsa: new Uint8Array([2]),
    ed25519: new Uint8Array([0]),
    ethereum: new Uint8Array([2]),
    sr25519: new Uint8Array([1])
  };
  const TYPE_SIGNATURE = {
    ecdsa: (m2, p) => secp256k1Sign(m2, p, "blake2"),
    ed25519: ed25519Sign,
    ethereum: (m2, p) => secp256k1Sign(m2, p, "keccak"),
    sr25519: sr25519Sign
  };
  const TYPE_ADDRESS = {
    ecdsa: (p) => p.length > 32 ? blake2AsU8a(p) : p,
    ed25519: (p) => p,
    ethereum: (p) => p.length === 20 ? p : keccakAsU8a(secp256k1Expand(p)),
    sr25519: (p) => p
  };
  function isLocked(secretKey) {
    return !secretKey || u8aEmpty(secretKey);
  }
  function vrfHash(proof, context, extra) {
    return blake2AsU8a(u8aConcat(context || "", extra || "", proof));
  }
  function createPair({ toSS58, type }, { publicKey, secretKey }, meta = {}, encoded = null, encTypes) {
    const decodePkcs8 = (passphrase, userEncoded) => {
      const decoded = decodePair(passphrase, userEncoded || encoded, encTypes);
      if (decoded.secretKey.length === 64) {
        publicKey = decoded.publicKey;
        secretKey = decoded.secretKey;
      } else {
        const pair = TYPE_FROM_SEED[type](decoded.secretKey);
        publicKey = pair.publicKey;
        secretKey = pair.secretKey;
      }
    };
    const recode = (passphrase) => {
      isLocked(secretKey) && encoded && decodePkcs8(passphrase, encoded);
      encoded = encodePair({ publicKey, secretKey }, passphrase);
      encTypes = void 0;
      return encoded;
    };
    const encodeAddress2 = () => {
      const raw = TYPE_ADDRESS[type](publicKey);
      return type === "ethereum" ? ethereumEncode(raw) : toSS58(raw);
    };
    return {
      get address() {
        return encodeAddress2();
      },
      get addressRaw() {
        const raw = TYPE_ADDRESS[type](publicKey);
        return type === "ethereum" ? raw.slice(-20) : raw;
      },
      get isLocked() {
        return isLocked(secretKey);
      },
      get meta() {
        return meta;
      },
      get publicKey() {
        return publicKey;
      },
      get type() {
        return type;
      },
      // eslint-disable-next-line sort-keys
      decodePkcs8,
      derive: (suri, meta2) => {
        if (type === "ethereum") {
          throw new Error("Unable to derive on this keypair");
        } else if (isLocked(secretKey)) {
          throw new Error("Cannot derive on a locked keypair");
        }
        const { path: path2 } = keyExtractPath(suri);
        const derived = keyFromPath({ publicKey, secretKey }, path2, type);
        return createPair({ toSS58, type }, derived, meta2, null);
      },
      encodePkcs8: (passphrase) => {
        return recode(passphrase);
      },
      lock: () => {
        secretKey = new Uint8Array();
      },
      setMeta: (additional) => {
        meta = objectSpread({}, meta, additional);
      },
      sign: (message, options = {}) => {
        if (isLocked(secretKey)) {
          throw new Error("Cannot sign with a locked key pair");
        }
        return u8aConcat(options.withType ? TYPE_PREFIX[type] : SIG_TYPE_NONE, TYPE_SIGNATURE[type](u8aToU8a(message), { publicKey, secretKey }));
      },
      toJson: (passphrase) => {
        const address = ["ecdsa", "ethereum"].includes(type) ? publicKey.length === 20 ? u8aToHex(publicKey) : u8aToHex(secp256k1Compress(publicKey)) : encodeAddress2();
        return pairToJson(type, { address, meta }, recode(passphrase), !!passphrase);
      },
      unlock: (passphrase) => {
        return decodePkcs8(passphrase);
      },
      verify: (message, signature, signerPublic) => {
        return signatureVerify(message, signature, TYPE_ADDRESS[type](u8aToU8a(signerPublic))).isValid;
      },
      vrfSign: (message, context, extra) => {
        if (isLocked(secretKey)) {
          throw new Error("Cannot sign with a locked key pair");
        }
        if (type === "sr25519") {
          return sr25519VrfSign(message, { secretKey }, context, extra);
        }
        const proof = TYPE_SIGNATURE[type](u8aToU8a(message), { publicKey, secretKey });
        return u8aConcat(vrfHash(proof, context, extra), proof);
      },
      vrfVerify: (message, vrfResult, signerPublic, context, extra) => {
        if (type === "sr25519") {
          return sr25519VrfVerify(message, vrfResult, publicKey, context, extra);
        }
        const result = signatureVerify(message, u8aConcat(TYPE_PREFIX[type], vrfResult.subarray(32)), TYPE_ADDRESS[type](u8aToU8a(signerPublic)));
        return result.isValid && u8aEq(vrfResult.subarray(0, 32), vrfHash(vrfResult.subarray(32), context, extra));
      }
    };
  }
  const DEV_PHRASE = "bottom drive obey lake curtain smoke basket hold race lonely fit walk";
  class Pairs {
    constructor() {
      this.__internal__map = {};
    }
    add(pair) {
      this.__internal__map[decodeAddress(pair.address).toString()] = pair;
      return pair;
    }
    all() {
      return Object.values(this.__internal__map);
    }
    get(address) {
      const pair = this.__internal__map[decodeAddress(address).toString()];
      if (!pair) {
        throw new Error(`Unable to retrieve keypair '${isU8a(address) || isHex(address) ? u8aToHex(u8aToU8a(address)) : address}'`);
      }
      return pair;
    }
    remove(address) {
      delete this.__internal__map[decodeAddress(address).toString()];
    }
  }
  const PairFromSeed = {
    ecdsa: (seed) => secp256k1PairFromSeed(seed),
    ed25519: (seed) => ed25519PairFromSeed(seed),
    ethereum: (seed) => secp256k1PairFromSeed(seed),
    sr25519: (seed) => sr25519PairFromSeed(seed)
  };
  function pairToPublic({ publicKey }) {
    return publicKey;
  }
  class Keyring {
    constructor(options = {}) {
      this.decodeAddress = decodeAddress;
      this.encodeAddress = (address, ss58Format) => {
        return this.type === "ethereum" ? ethereumEncode(address) : encodeAddress(address, ss58Format ?? this.__internal__ss58);
      };
      options.type = options.type || "ed25519";
      if (!["ecdsa", "ethereum", "ed25519", "sr25519"].includes(options.type || "undefined")) {
        throw new Error(`Expected a keyring type of either 'ed25519', 'sr25519', 'ethereum' or 'ecdsa', found '${options.type || "unknown"}`);
      }
      this.__internal__pairs = new Pairs();
      this.__internal__ss58 = options.ss58Format;
      this.__internal__type = options.type;
    }
    /**
     * @description retrieve the pairs (alias for getPairs)
     */
    get pairs() {
      return this.getPairs();
    }
    /**
     * @description retrieve the publicKeys (alias for getPublicKeys)
     */
    get publicKeys() {
      return this.getPublicKeys();
    }
    /**
     * @description Returns the type of the keyring, ed25519, sr25519 or ecdsa
     */
    get type() {
      return this.__internal__type;
    }
    /**
     * @name addPair
     * @summary Stores an account, given a keyring pair, as a Key/Value (public key, pair) in Keyring Pair Dictionary
     */
    addPair(pair) {
      return this.__internal__pairs.add(pair);
    }
    /**
     * @name addFromAddress
     * @summary Stores an account, given an account address, as a Key/Value (public key, pair) in Keyring Pair Dictionary
     * @description Allows user to explicitly provide separate inputs including account address or public key, and optionally
     * the associated account metadata, and the default encoded value as arguments (that may be obtained from the json file
     * of an account backup), and then generates a keyring pair from them that it passes to
     * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
     */
    addFromAddress(address, meta = {}, encoded = null, type = this.type, ignoreChecksum, encType) {
      const publicKey = this.decodeAddress(address, ignoreChecksum);
      return this.addPair(createPair({ toSS58: this.encodeAddress, type }, { publicKey, secretKey: new Uint8Array() }, meta, encoded, encType));
    }
    /**
     * @name addFromJson
     * @summary Stores an account, given JSON data, as a Key/Value (public key, pair) in Keyring Pair Dictionary
     * @description Allows user to provide a json object argument that contains account information (that may be obtained from the json file
     * of an account backup), and then generates a keyring pair from it that it passes to
     * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
     */
    addFromJson(json, ignoreChecksum) {
      return this.addPair(this.createFromJson(json, ignoreChecksum));
    }
    /**
     * @name addFromMnemonic
     * @summary Stores an account, given a mnemonic, as a Key/Value (public key, pair) in Keyring Pair Dictionary
     * @description Allows user to provide a mnemonic (seed phrase that is provided when account is originally created)
     * argument and a metadata argument that contains account information (that may be obtained from the json file
     * of an account backup), and then generates a keyring pair from it that it passes to
     * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
     */
    addFromMnemonic(mnemonic, meta = {}, type = this.type) {
      return this.addFromUri(mnemonic, meta, type);
    }
    /**
     * @name addFromPair
     * @summary Stores an account created from an explicit publicKey/secreteKey combination
     */
    addFromPair(pair, meta = {}, type = this.type) {
      return this.addPair(this.createFromPair(pair, meta, type));
    }
    /**
     * @name addFromSeed
     * @summary Stores an account, given seed data, as a Key/Value (public key, pair) in Keyring Pair Dictionary
     * @description Stores in a keyring pair dictionary the public key of the pair as a key and the pair as the associated value.
     * Allows user to provide the account seed as an argument, and then generates a keyring pair from it that it passes to
     * `addPair` to store in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
     */
    addFromSeed(seed, meta = {}, type = this.type) {
      return this.addPair(createPair({ toSS58: this.encodeAddress, type }, PairFromSeed[type](seed), meta, null));
    }
    /**
     * @name addFromUri
     * @summary Creates an account via an suri
     * @description Extracts the phrase, path and password from a SURI format for specifying secret keys `<secret>/<soft-key>//<hard-key>///<password>` (the `///password` may be omitted, and `/<soft-key>` and `//<hard-key>` maybe repeated and mixed). The secret can be a hex string, mnemonic phrase or a string (to be padded)
     */
    addFromUri(suri, meta = {}, type = this.type) {
      return this.addPair(this.createFromUri(suri, meta, type));
    }
    /**
     * @name createFromJson
     * @description Creates a pair from a JSON keyfile
     */
    createFromJson({ address, encoded, encoding: { content, type, version: version2 }, meta }, ignoreChecksum) {
      if (version2 === "3" && content[0] !== "pkcs8") {
        throw new Error(`Unable to decode non-pkcs8 type, [${content.join(",")}] found}`);
      }
      const cryptoType = version2 === "0" || !Array.isArray(content) ? this.type : content[1];
      const encType = !Array.isArray(type) ? [type] : type;
      if (!["ed25519", "sr25519", "ecdsa", "ethereum"].includes(cryptoType)) {
        throw new Error(`Unknown crypto type ${cryptoType}`);
      }
      const publicKey = isHex(address) ? hexToU8a(address) : this.decodeAddress(address, ignoreChecksum);
      const decoded = isHex(encoded) ? hexToU8a(encoded) : base64Decode(encoded);
      return createPair({ toSS58: this.encodeAddress, type: cryptoType }, { publicKey, secretKey: new Uint8Array() }, meta, decoded, encType);
    }
    /**
     * @name createFromPair
     * @summary Creates a pair from an explicit publicKey/secreteKey combination
     */
    createFromPair(pair, meta = {}, type = this.type) {
      return createPair({ toSS58: this.encodeAddress, type }, pair, meta, null);
    }
    /**
     * @name createFromUri
     * @summary Creates a Keypair from an suri
     * @description This creates a pair from the suri, but does not add it to the keyring
     */
    createFromUri(_suri, meta = {}, type = this.type) {
      const suri = _suri.startsWith("//") ? `${DEV_PHRASE}${_suri}` : _suri;
      const { derivePath, password, path: path2, phrase } = keyExtractSuri(suri);
      let seed;
      const isPhraseHex = isHex(phrase, 256);
      if (isPhraseHex) {
        seed = hexToU8a(phrase);
      } else {
        const parts = phrase.split(" ");
        if ([12, 15, 18, 21, 24].includes(parts.length)) {
          seed = type === "ethereum" ? mnemonicToLegacySeed(phrase, "", false, 64) : mnemonicToMiniSecret(phrase, password);
        } else {
          if (phrase.length > 32) {
            throw new Error("specified phrase is not a valid mnemonic and is invalid as a raw seed at > 32 bytes");
          }
          seed = stringToU8a(phrase.padEnd(32));
        }
      }
      const derived = type === "ethereum" ? isPhraseHex ? PairFromSeed[type](seed) : hdEthereum(seed, derivePath.substring(1)) : keyFromPath(PairFromSeed[type](seed), path2, type);
      return createPair({ toSS58: this.encodeAddress, type }, derived, meta, null);
    }
    /**
     * @name getPair
     * @summary Retrieves an account keyring pair from the Keyring Pair Dictionary, given an account address
     * @description Returns a keyring pair value from the keyring pair dictionary by performing
     * a key lookup using the provided account address or public key (after decoding it).
     */
    getPair(address) {
      return this.__internal__pairs.get(address);
    }
    /**
     * @name getPairs
     * @summary Retrieves all account keyring pairs from the Keyring Pair Dictionary
     * @description Returns an array list of all the keyring pair values that are stored in the keyring pair dictionary.
     */
    getPairs() {
      return this.__internal__pairs.all();
    }
    /**
     * @name getPublicKeys
     * @summary Retrieves Public Keys of all Keyring Pairs stored in the Keyring Pair Dictionary
     * @description Returns an array list of all the public keys associated with each of the keyring pair values that are stored in the keyring pair dictionary.
     */
    getPublicKeys() {
      return this.__internal__pairs.all().map(pairToPublic);
    }
    /**
     * @name removePair
     * @description Deletes the provided input address or public key from the stored Keyring Pair Dictionary.
     */
    removePair(address) {
      this.__internal__pairs.remove(address);
    }
    /**
     * @name setSS58Format;
     * @description Sets the ss58 format for the keyring
     */
    setSS58Format(ss58) {
      this.__internal__ss58 = ss58;
    }
    /**
     * @name toJson
     * @summary Returns a JSON object associated with the input argument that contains metadata assocated with an account
     * @description Returns a JSON object containing the metadata associated with an account
     * when valid address or public key and when the account passphrase is provided if the account secret
     * is not already unlocked and available in memory. Note that in [Polkadot-JS Apps](https://github.com/polkadot-js/apps) the user
     * may backup their account to a JSON file that contains this information.
     */
    toJson(address, passphrase) {
      return this.__internal__pairs.get(address).toJson(passphrase);
    }
  }
  const ARRAY_JOINER = "";
  function arrayJoin(arr2, joiner) {
    return arr2.join(joiner ? joiner : ARRAY_JOINER);
  }
  function hexHash(data2, bitLength) {
    return blake2AsHex(data2, bitLength);
  }
  function hexHashArray(arr2) {
    return hexHash(arrayJoin(arr2));
  }
  z.enum(["mongo", "mongoMemory"]);
  const EnvironmentTypesSchema = z.enum(["development", "rococo", "kusama", "polkadot", "shiden"]);
  const NetworkNamesSchema = EnvironmentTypesSchema;
  const DatabaseConfigSchema = z.record(EnvironmentTypesSchema, z.object({
    type: z.string(),
    endpoint: z.string(),
    dbname: z.string(),
    authSource: z.string()
  })).optional();
  const BatchCommitConfigSchema = z.object({
    interval: z.number().positive(),
    maxBatchExtrinsicPercentage: z.number().positive()
  });
  const ProsopoBaseConfigSchema = z.object({
    logLevel: LogLevel,
    defaultEnvironment: EnvironmentTypesSchema.default(EnvironmentTypesSchema.Values.development),
    // The account with which to query the contract and sign transactions
    account: z.object({
      address: z.string(),
      secret: z.string().optional(),
      password: z.string().optional()
    })
  });
  const NetworkConfigSchema = z.object({
    endpoint: z.string().url(),
    contract: z.object({
      address: z.string(),
      name: z.string()
    }),
    accounts: z.array(z.string()).optional()
  });
  const ProsopoNetworksSchema = z.record(NetworkNamesSchema, NetworkConfigSchema.required()).default({
    development: {
      endpoint: "ws://127.0.0.1:9944",
      contract: {
        address: "",
        name: ""
      },
      accounts: []
    }
  });
  const ProsopoBasicConfigSchema = ProsopoBaseConfigSchema.merge(z.object({
    networks: ProsopoNetworksSchema,
    database: DatabaseConfigSchema.optional()
  }));
  const ProsopoCaptchaCountConfigSchema = z.object({
    solved: z.object({
      count: z.number().positive()
    }),
    unsolved: z.object({
      count: z.number().nonnegative()
    })
  });
  const ProsopoImageServerConfigSchema = z.object({
    baseURL: z.string().url(),
    port: z.number().optional().default(9229)
  });
  const ProsopoCaptchaSolutionConfigSchema = z.object({
    requiredNumberOfSolutions: z.number().positive().min(2),
    solutionWinningPercentage: z.number().positive().max(100),
    captchaFilePath: z.string(),
    captchaBlockRecency: z.number().positive().min(2)
  });
  const ProsopoClientConfigSchema = ProsopoBasicConfigSchema.merge(z.object({
    userAccountAddress: z.string().optional(),
    web2: z.boolean(),
    solutionThreshold: z.number().positive().max(100),
    dappName: z.string(),
    serverUrl: z.string().url()
  }));
  const AccountCreatorConfigSchema = z.object({
    area: z.object({
      width: z.number().positive(),
      height: z.number().positive()
    }),
    offsetParameter: z.number().positive(),
    multiplier: z.number().positive(),
    fontSizeFactor: z.number().positive(),
    maxShadowBlur: z.number().positive(),
    numberOfRounds: z.number().positive(),
    seed: z.number().positive()
  });
  const ThemeType = z.union([z.literal("light"), z.literal("dark")]);
  ProsopoClientConfigSchema.merge(z.object({
    accountCreator: AccountCreatorConfigSchema.optional(),
    theme: ThemeType.optional()
  }));
  ProsopoBasicConfigSchema.merge(z.object({
    captchas: ProsopoCaptchaCountConfigSchema,
    captchaSolutions: ProsopoCaptchaSolutionConfigSchema,
    batchCommit: BatchCommitConfigSchema,
    server: ProsopoImageServerConfigSchema
  }));
  const AllHashers = {
    Blake2_128: null,
    Blake2_256: null,
    Blake2_128Concat: null,
    Twox128: null,
    Twox256: null,
    Twox64Concat: null,
    // new in v11
    Identity: null
  };
  const META_V1_TO_V2 = {
    metadata: {
      description: "Returns the metadata of a runtime",
      params: [],
      type: "OpaqueMetadata"
    }
  };
  const runtime$s = {
    Metadata: [
      {
        methods: {
          metadata_at_version: {
            description: "Returns the metadata at a given version.",
            params: [
              {
                name: "version",
                type: "u32"
              }
            ],
            type: "Option<OpaqueMetadata>"
          },
          metadata_versions: {
            description: "Returns the supported metadata versions.",
            params: [],
            type: "Vec<u32>"
          },
          ...META_V1_TO_V2
        },
        version: 2
      },
      {
        methods: {
          ...META_V1_TO_V2
        },
        version: 1
      }
    ]
  };
  const v9 = {
    // v9
    ErrorMetadataV9: {
      name: "Text",
      docs: "Vec<Text>"
    },
    EventMetadataV9: {
      name: "Text",
      args: "Vec<Type>",
      docs: "Vec<Text>"
    },
    FunctionArgumentMetadataV9: {
      name: "Text",
      type: "Type"
    },
    FunctionMetadataV9: {
      name: "Text",
      args: "Vec<FunctionArgumentMetadataV9>",
      docs: "Vec<Text>"
    },
    MetadataV9: {
      modules: "Vec<ModuleMetadataV9>"
    },
    ModuleConstantMetadataV9: {
      name: "Text",
      type: "Type",
      value: "Bytes",
      docs: "Vec<Text>"
    },
    ModuleMetadataV9: {
      name: "Text",
      storage: "Option<StorageMetadataV9>",
      calls: "Option<Vec<FunctionMetadataV9>>",
      events: "Option<Vec<EventMetadataV9>>",
      constants: "Vec<ModuleConstantMetadataV9>",
      errors: "Vec<ErrorMetadataV9>"
    },
    StorageEntryMetadataV9: {
      name: "Text",
      modifier: "StorageEntryModifierV9",
      type: "StorageEntryTypeV9",
      fallback: "Bytes",
      docs: "Vec<Text>"
    },
    StorageEntryModifierV9: {
      _enum: ["Optional", "Default", "Required"]
    },
    StorageEntryTypeV9: {
      _enum: {
        Plain: "Type",
        Map: {
          hasher: "StorageHasherV9",
          key: "Type",
          value: "Type",
          linked: "bool"
        },
        DoubleMap: {
          hasher: "StorageHasherV9",
          key1: "Type",
          key2: "Type",
          value: "Type",
          key2Hasher: "StorageHasherV9"
        }
      }
    },
    StorageHasherV9: {
      _enum: {
        Blake2_128: null,
        Blake2_256: null,
        Twox128: null,
        Twox256: null,
        Twox64Concat: null
      }
    },
    StorageMetadataV9: {
      prefix: "Text",
      items: "Vec<StorageEntryMetadataV9>"
    }
  };
  const v10 = {
    // v10
    ErrorMetadataV10: "ErrorMetadataV9",
    EventMetadataV10: "EventMetadataV9",
    FunctionArgumentMetadataV10: "FunctionArgumentMetadataV9",
    FunctionMetadataV10: "FunctionMetadataV9",
    MetadataV10: {
      modules: "Vec<ModuleMetadataV10>"
    },
    ModuleConstantMetadataV10: "ModuleConstantMetadataV9",
    ModuleMetadataV10: {
      name: "Text",
      storage: "Option<StorageMetadataV10>",
      calls: "Option<Vec<FunctionMetadataV10>>",
      events: "Option<Vec<EventMetadataV10>>",
      constants: "Vec<ModuleConstantMetadataV10>",
      errors: "Vec<ErrorMetadataV10>"
    },
    StorageEntryModifierV10: "StorageEntryModifierV9",
    StorageEntryMetadataV10: {
      name: "Text",
      modifier: "StorageEntryModifierV10",
      type: "StorageEntryTypeV10",
      fallback: "Bytes",
      docs: "Vec<Text>"
    },
    StorageEntryTypeV10: {
      _enum: {
        Plain: "Type",
        Map: {
          hasher: "StorageHasherV10",
          key: "Type",
          value: "Type",
          linked: "bool"
        },
        DoubleMap: {
          hasher: "StorageHasherV10",
          key1: "Type",
          key2: "Type",
          value: "Type",
          key2Hasher: "StorageHasherV10"
        }
      }
    },
    StorageMetadataV10: {
      prefix: "Text",
      items: "Vec<StorageEntryMetadataV10>"
    },
    StorageHasherV10: {
      _enum: {
        Blake2_128: null,
        Blake2_256: null,
        Blake2_128Concat: null,
        Twox128: null,
        Twox256: null,
        Twox64Concat: null
      }
    }
  };
  const v11 = {
    // v11
    ErrorMetadataV11: "ErrorMetadataV10",
    EventMetadataV11: "EventMetadataV10",
    ExtrinsicMetadataV11: {
      version: "u8",
      signedExtensions: "Vec<Text>"
    },
    FunctionArgumentMetadataV11: "FunctionArgumentMetadataV10",
    FunctionMetadataV11: "FunctionMetadataV10",
    MetadataV11: {
      modules: "Vec<ModuleMetadataV11>",
      extrinsic: "ExtrinsicMetadataV11"
    },
    ModuleConstantMetadataV11: "ModuleConstantMetadataV10",
    ModuleMetadataV11: {
      name: "Text",
      storage: "Option<StorageMetadataV11>",
      calls: "Option<Vec<FunctionMetadataV11>>",
      events: "Option<Vec<EventMetadataV11>>",
      constants: "Vec<ModuleConstantMetadataV11>",
      errors: "Vec<ErrorMetadataV11>"
    },
    StorageEntryModifierV11: "StorageEntryModifierV10",
    StorageEntryMetadataV11: {
      name: "Text",
      modifier: "StorageEntryModifierV11",
      type: "StorageEntryTypeV11",
      fallback: "Bytes",
      docs: "Vec<Text>"
    },
    StorageEntryTypeV11: {
      _enum: {
        Plain: "Type",
        Map: {
          hasher: "StorageHasherV11",
          key: "Type",
          value: "Type",
          linked: "bool"
        },
        DoubleMap: {
          hasher: "StorageHasherV11",
          key1: "Type",
          key2: "Type",
          value: "Type",
          key2Hasher: "StorageHasherV11"
        }
      }
    },
    StorageMetadataV11: {
      prefix: "Text",
      items: "Vec<StorageEntryMetadataV11>"
    },
    StorageHasherV11: {
      _enum: AllHashers
    }
  };
  const v12 = {
    // v12
    ErrorMetadataV12: "ErrorMetadataV11",
    EventMetadataV12: "EventMetadataV11",
    ExtrinsicMetadataV12: "ExtrinsicMetadataV11",
    FunctionArgumentMetadataV12: "FunctionArgumentMetadataV11",
    FunctionMetadataV12: "FunctionMetadataV11",
    MetadataV12: {
      modules: "Vec<ModuleMetadataV12>",
      extrinsic: "ExtrinsicMetadataV12"
    },
    ModuleConstantMetadataV12: "ModuleConstantMetadataV11",
    ModuleMetadataV12: {
      name: "Text",
      storage: "Option<StorageMetadataV12>",
      calls: "Option<Vec<FunctionMetadataV12>>",
      events: "Option<Vec<EventMetadataV12>>",
      constants: "Vec<ModuleConstantMetadataV12>",
      errors: "Vec<ErrorMetadataV12>",
      index: "u8"
    },
    StorageEntryModifierV12: "StorageEntryModifierV11",
    StorageEntryMetadataV12: "StorageEntryMetadataV11",
    StorageEntryTypeV12: "StorageEntryTypeV11",
    StorageMetadataV12: "StorageMetadataV11",
    StorageHasherV12: "StorageHasherV11"
  };
  const v13 = {
    // v13
    ErrorMetadataV13: "ErrorMetadataV12",
    EventMetadataV13: "EventMetadataV12",
    ExtrinsicMetadataV13: "ExtrinsicMetadataV12",
    FunctionArgumentMetadataV13: "FunctionArgumentMetadataV12",
    FunctionMetadataV13: "FunctionMetadataV12",
    MetadataV13: {
      modules: "Vec<ModuleMetadataV13>",
      extrinsic: "ExtrinsicMetadataV13"
    },
    ModuleConstantMetadataV13: "ModuleConstantMetadataV12",
    ModuleMetadataV13: {
      name: "Text",
      storage: "Option<StorageMetadataV13>",
      calls: "Option<Vec<FunctionMetadataV13>>",
      events: "Option<Vec<EventMetadataV13>>",
      constants: "Vec<ModuleConstantMetadataV13>",
      errors: "Vec<ErrorMetadataV13>",
      index: "u8"
    },
    StorageEntryModifierV13: "StorageEntryModifierV12",
    StorageEntryMetadataV13: {
      name: "Text",
      modifier: "StorageEntryModifierV13",
      type: "StorageEntryTypeV13",
      fallback: "Bytes",
      docs: "Vec<Text>"
    },
    StorageEntryTypeV13: {
      _enum: {
        Plain: "Type",
        Map: {
          hasher: "StorageHasherV13",
          key: "Type",
          value: "Type",
          linked: "bool"
        },
        DoubleMap: {
          hasher: "StorageHasherV13",
          key1: "Type",
          key2: "Type",
          value: "Type",
          key2Hasher: "StorageHasherV13"
        },
        NMap: {
          keyVec: "Vec<Type>",
          hashers: "Vec<StorageHasherV13>",
          value: "Type"
        }
      }
    },
    StorageMetadataV13: {
      prefix: "Text",
      items: "Vec<StorageEntryMetadataV13>"
    },
    StorageHasherV13: "StorageHasherV12"
  };
  const Si1Variant = {
    name: "Text",
    fields: "Vec<Si1Field>",
    index: "u8",
    docs: "Vec<Text>"
  };
  const v1$1 = {
    Si1Field: {
      name: "Option<Text>",
      type: "Si1LookupTypeId",
      typeName: "Option<Text>",
      docs: "Vec<Text>"
    },
    Si1LookupTypeId: "Compact<u32>",
    Si1Path: "Si0Path",
    Si1Type: {
      path: "Si1Path",
      params: "Vec<Si1TypeParameter>",
      def: "Si1TypeDef",
      docs: "Vec<Text>"
    },
    Si1TypeDef: {
      _enum: {
        Composite: "Si1TypeDefComposite",
        Variant: "Si1TypeDefVariant",
        Sequence: "Si1TypeDefSequence",
        Array: "Si1TypeDefArray",
        Tuple: "Si1TypeDefTuple",
        Primitive: "Si1TypeDefPrimitive",
        Compact: "Si1TypeDefCompact",
        BitSequence: "Si1TypeDefBitSequence",
        // NOTE: This is specific to the implementation for pre-v14 metadata
        // compatibility (always keep this as the last entry in the enum)
        HistoricMetaCompat: "Type"
      }
    },
    Si1TypeDefArray: {
      len: "u32",
      type: "Si1LookupTypeId"
    },
    Si1TypeDefBitSequence: {
      bitStoreType: "Si1LookupTypeId",
      bitOrderType: "Si1LookupTypeId"
    },
    Si1TypeDefCompact: {
      type: "Si1LookupTypeId"
    },
    Si1TypeDefComposite: {
      fields: "Vec<Si1Field>"
    },
    Si1TypeDefPrimitive: "Si0TypeDefPrimitive",
    Si1TypeDefSequence: {
      type: "Si1LookupTypeId"
    },
    Si1TypeDefTuple: "Vec<Si1LookupTypeId>",
    Si1TypeParameter: {
      name: "Text",
      type: "Option<Si1LookupTypeId>"
    },
    Si1TypeDefVariant: {
      variants: "Vec<Si1Variant>"
    },
    Si1Variant
  };
  const v14 = {
    // registry
    PortableTypeV14: {
      id: "Si1LookupTypeId",
      type: "Si1Type"
    },
    // compatibility with earlier layouts, i.e. don't break previous users
    ErrorMetadataV14: {
      ...Si1Variant,
      args: "Vec<Type>"
    },
    EventMetadataV14: {
      ...Si1Variant,
      args: "Vec<Type>"
    },
    FunctionArgumentMetadataV14: {
      name: "Text",
      type: "Type",
      typeName: "Option<Type>"
    },
    FunctionMetadataV14: {
      ...Si1Variant,
      args: "Vec<FunctionArgumentMetadataV14>"
    },
    // V14
    ExtrinsicMetadataV14: {
      type: "SiLookupTypeId",
      version: "u8",
      signedExtensions: "Vec<SignedExtensionMetadataV14>"
    },
    MetadataV14: {
      lookup: "PortableRegistry",
      pallets: "Vec<PalletMetadataV14>",
      extrinsic: "ExtrinsicMetadataV14",
      type: "SiLookupTypeId"
    },
    PalletCallMetadataV14: {
      type: "SiLookupTypeId"
    },
    PalletConstantMetadataV14: {
      name: "Text",
      type: "SiLookupTypeId",
      value: "Bytes",
      docs: "Vec<Text>"
    },
    PalletErrorMetadataV14: {
      type: "SiLookupTypeId"
    },
    PalletEventMetadataV14: {
      type: "SiLookupTypeId"
    },
    PalletMetadataV14: {
      name: "Text",
      storage: "Option<PalletStorageMetadataV14>",
      calls: "Option<PalletCallMetadataV14>",
      events: "Option<PalletEventMetadataV14>",
      constants: "Vec<PalletConstantMetadataV14>",
      errors: "Option<PalletErrorMetadataV14>",
      index: "u8"
    },
    PalletStorageMetadataV14: {
      prefix: "Text",
      // NOTE: Renamed from entries
      items: "Vec<StorageEntryMetadataV14>"
    },
    SignedExtensionMetadataV14: {
      identifier: "Text",
      type: "SiLookupTypeId",
      additionalSigned: "SiLookupTypeId"
    },
    StorageEntryMetadataV14: {
      name: "Text",
      modifier: "StorageEntryModifierV14",
      type: "StorageEntryTypeV14",
      fallback: "Bytes",
      docs: "Vec<Text>"
    },
    StorageEntryModifierV14: "StorageEntryModifierV13",
    StorageEntryTypeV14: {
      _enum: {
        Plain: "SiLookupTypeId",
        Map: {
          hashers: "Vec<StorageHasherV14>",
          key: "SiLookupTypeId",
          value: "SiLookupTypeId"
        }
      }
    },
    StorageHasherV14: "StorageHasherV13"
  };
  const v15 = {
    // new/adjusted in v15
    PalletMetadataV15: {
      name: "Text",
      storage: "Option<PalletStorageMetadataV14>",
      calls: "Option<PalletCallMetadataV14>",
      events: "Option<PalletEventMetadataV14>",
      constants: "Vec<PalletConstantMetadataV14>",
      errors: "Option<PalletErrorMetadataV14>",
      index: "u8",
      docs: "Vec<Text>"
    },
    RuntimeApiMetadataV15: {
      name: "Text",
      methods: "Vec<RuntimeApiMethodMetadataV15>",
      docs: "Vec<Text>"
    },
    RuntimeApiMethodMetadataV15: {
      name: "Text",
      inputs: "Vec<RuntimeApiMethodParamMetadataV15>",
      output: "SiLookupTypeId",
      docs: "Vec<Text>"
    },
    RuntimeApiMethodParamMetadataV15: {
      name: "Text",
      type: "SiLookupTypeId"
    },
    // actual v15 definition
    MetadataV15: {
      lookup: "PortableRegistry",
      pallets: "Vec<PalletMetadataV15>",
      extrinsic: "ExtrinsicMetadataV14",
      type: "SiLookupTypeId",
      apis: "Vec<RuntimeApiMetadataV15>"
    }
  };
  const definitions$15 = {
    rpc: {},
    runtime: runtime$s,
    types: {
      // all known
      ...v9,
      ...v10,
      ...v11,
      ...v12,
      ...v13,
      ...v14,
      ...v15,
      // latest mappings
      // NOTE: For v15, we only added the runtime defintions,
      // hence latest for most pointing to the previous V14
      ErrorMetadataLatest: "ErrorMetadataV14",
      EventMetadataLatest: "EventMetadataV14",
      ExtrinsicMetadataLatest: "ExtrinsicMetadataV14",
      FunctionArgumentMetadataLatest: "FunctionArgumentMetadataV14",
      FunctionMetadataLatest: "FunctionMetadataV14",
      MetadataLatest: "MetadataV15",
      PalletCallMetadataLatest: "PalletCallMetadataV14",
      PalletConstantMetadataLatest: "PalletConstantMetadataV14",
      PalletErrorMetadataLatest: "PalletErrorMetadataV14",
      PalletEventMetadataLatest: "PalletEventMetadataV14",
      PalletMetadataLatest: "PalletMetadataV15",
      PalletStorageMetadataLatest: "PalletStorageMetadataV14",
      PortableType: "PortableTypeV14",
      RuntimeApiMetadataLatest: "RuntimeApiMetadataV15",
      SignedExtensionMetadataLatest: "SignedExtensionMetadataV14",
      StorageEntryMetadataLatest: "StorageEntryMetadataV14",
      StorageEntryModifierLatest: "StorageEntryModifierV14",
      StorageEntryTypeLatest: "StorageEntryTypeV14",
      StorageHasher: "StorageHasherV14",
      // additional types
      OpaqueMetadata: "Opaque<Bytes>",
      // the enum containing all the mappings
      MetadataAll: {
        _enum: {
          V0: "DoNotConstruct<MetadataV0>",
          V1: "DoNotConstruct<MetadataV1>",
          V2: "DoNotConstruct<MetadataV2>",
          V3: "DoNotConstruct<MetadataV3>",
          V4: "DoNotConstruct<MetadataV4>",
          V5: "DoNotConstruct<MetadataV5>",
          V6: "DoNotConstruct<MetadataV6>",
          V7: "DoNotConstruct<MetadataV7>",
          V8: "DoNotConstruct<MetadataV8>",
          // First version on Kusama in V9, dropping will be problematic
          V9: "MetadataV9",
          V10: "MetadataV10",
          V11: "MetadataV11",
          V12: "MetadataV12",
          V13: "MetadataV13",
          V14: "MetadataV14",
          V15: "MetadataV15"
        }
      }
    }
  };
  const CORE_V1_TO_V4 = {
    execute_block: {
      description: "Execute the given block.",
      params: [
        {
          name: "block",
          type: "Block"
        }
      ],
      type: "Null"
    }
  };
  const CORE_V1_TO_V2 = {
    version: {
      description: "Returns the version of the runtime.",
      params: [],
      type: "RuntimeVersionPre3"
    }
  };
  const CORE_V2_TO_V4 = {
    initialize_block: {
      description: "Initialize a block with the given header.",
      params: [
        {
          name: "header",
          type: "Header"
        }
      ],
      type: "Null"
    }
  };
  const runtime$r = {
    Core: [
      {
        methods: {
          version: {
            description: "Returns the version of the runtime.",
            params: [],
            type: "RuntimeVersion"
          },
          ...CORE_V1_TO_V4,
          ...CORE_V2_TO_V4
        },
        version: 4
      },
      {
        methods: {
          version: {
            description: "Returns the version of the runtime.",
            params: [],
            type: "RuntimeVersionPre4"
          },
          ...CORE_V1_TO_V4,
          ...CORE_V2_TO_V4
        },
        version: 3
      },
      {
        methods: {
          ...CORE_V1_TO_V2,
          ...CORE_V1_TO_V4,
          ...CORE_V2_TO_V4
        },
        version: 2
      },
      {
        methods: {
          initialise_block: {
            description: "Initialize a block with the given header.",
            params: [
              {
                name: "header",
                type: "Header"
              }
            ],
            type: "Null"
          },
          ...CORE_V1_TO_V2,
          ...CORE_V1_TO_V4
        },
        version: 1
      }
    ]
  };
  const numberTypes = {
    Fixed64: "Int<64, Fixed64>",
    FixedI64: "Int<64, FixedI64>",
    FixedU64: "UInt<64, FixedU64>",
    Fixed128: "Int<128, Fixed128>",
    FixedI128: "Int<128, FixedI128>",
    FixedU128: "UInt<128, FixedU128>",
    I32F32: "Int<64, I32F32>",
    U32F32: "UInt<64, U32F32>",
    PerU16: "UInt<16, PerU16>",
    Perbill: "UInt<32, Perbill>",
    Percent: "UInt<8, Percent>",
    Permill: "UInt<32, Permill>",
    Perquintill: "UInt<64, Perquintill>"
  };
  const knownOrigins = {
    //
    // (1) Defaults from Substrate
    //
    Council: "CollectiveOrigin",
    System: "SystemOrigin",
    TechnicalCommittee: "CollectiveOrigin",
    //
    // (2) Defaults from Polkadot
    //
    Xcm: "XcmOrigin",
    XcmPallet: "XcmOrigin",
    //
    // (3) Defaults from Acala
    //
    Authority: "AuthorityOrigin",
    GeneralCouncil: "CollectiveOrigin"
  };
  const definitions$14 = {
    rpc: {},
    runtime: runtime$r,
    types: {
      ...numberTypes,
      AccountId: "AccountId32",
      AccountId20: "GenericEthereumAccountId",
      AccountId32: "GenericAccountId32",
      AccountId33: "GenericAccountId33",
      AccountIdOf: "AccountId",
      AccountIndex: "GenericAccountIndex",
      Address: "MultiAddress",
      AssetId: "u32",
      Balance: "UInt<128, Balance>",
      BalanceOf: "Balance",
      Block: "GenericBlock",
      BlockNumber: "u32",
      BlockNumberFor: "BlockNumber",
      BlockNumberOf: "BlockNumber",
      Call: "GenericCall",
      CallHash: "Hash",
      CallHashOf: "CallHash",
      ChangesTrieConfiguration: {
        digestInterval: "u32",
        digestLevels: "u32"
      },
      ChangesTrieSignal: {
        _enum: {
          NewConfiguration: "Option<ChangesTrieConfiguration>"
        }
      },
      ConsensusEngineId: "GenericConsensusEngineId",
      CodecHash: "Hash",
      CrateVersion: {
        major: "u16",
        minor: "u8",
        patch: "u8"
      },
      Digest: {
        logs: "Vec<DigestItem>"
      },
      DigestItem: {
        _enum: {
          Other: "Bytes",
          AuthoritiesChange: "Vec<AuthorityId>",
          ChangesTrieRoot: "Hash",
          SealV0: "SealV0",
          Consensus: "Consensus",
          Seal: "Seal",
          PreRuntime: "PreRuntime",
          ChangesTrieSignal: "ChangesTrieSignal",
          RuntimeEnvironmentUpdated: "Null"
          // 8
        }
      },
      ExtrinsicsWeight: {
        normal: "Weight",
        operational: "Weight"
      },
      H32: "[u8; 4; H32]",
      H64: "[u8; 8; H64]",
      H128: "[u8; 16; H128]",
      H160: "[u8; 20; H160]",
      H256: "[u8; 32; H256]",
      H512: "[u8; 64; H512]",
      H1024: "[u8; 128; H1024]",
      H2048: "[u8; 256; H2048]",
      Hash: "H256",
      Header: {
        parentHash: "Hash",
        number: "Compact<BlockNumber>",
        stateRoot: "Hash",
        extrinsicsRoot: "Hash",
        digest: "Digest"
      },
      HeaderPartial: {
        parentHash: "Hash",
        // since we only parse JSON with this, having non-compact works
        number: "BlockNumber"
      },
      IndicesLookupSource: "GenericLookupSource",
      Index: "u32",
      Justification: "(ConsensusEngineId, EncodedJustification)",
      EncodedJustification: "Bytes",
      Justifications: "Vec<Justification>",
      KeyValue: "(StorageKey, StorageData)",
      KeyTypeId: "u32",
      LockIdentifier: "[u8; 8]",
      LookupSource: "MultiAddress",
      LookupTarget: "AccountId",
      ModuleId: "LockIdentifier",
      MultiAddress: "GenericMultiAddress",
      MultiSigner: {
        _enum: {
          Ed25519: "[u8; 32]",
          Sr25519: "[u8; 32]",
          Ecdsa: "[u8; 33]"
        }
      },
      Moment: "UInt<64, Moment>",
      OpaqueCall: "Bytes",
      Origin: "DoNotConstruct<Origin>",
      OriginCaller: {
        _enum: {
          // this should be dynamically built from the actual modules, based on index
          System: "SystemOrigin"
        }
      },
      PalletId: "LockIdentifier",
      PalletsOrigin: "OriginCaller",
      PalletVersion: {
        major: "u16",
        minor: "u8",
        patch: "u8"
      },
      Pays: {
        _enum: ["Yes", "No"]
      },
      Phantom: "Null",
      PhantomData: "Null",
      Releases: {
        _enum: ["V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9", "V10"]
      },
      RuntimeCall: "Call",
      RuntimeEvent: "Event",
      RuntimeDbWeight: {
        read: "Weight",
        write: "Weight"
      },
      SignedBlock: "SignedBlockWithJustifications",
      SignedBlockWithJustification: {
        block: "Block",
        justification: "Option<EncodedJustification>"
      },
      SignedBlockWithJustifications: {
        block: "Block",
        justifications: "Option<Justifications>"
      },
      Slot: "u64",
      SlotDuration: "u64",
      StorageData: "Bytes",
      StorageInfo: {
        palletName: "Bytes",
        storage_name: "Bytes",
        prefix: "Bytes",
        maxValues: "Option<u32>",
        maxSize: "Option<u32>"
      },
      StorageProof: {
        trieNodes: "Vec<Bytes>"
      },
      TransactionPriority: "u64",
      TransactionLongevity: "u64",
      TransactionTag: "Bytes",
      TransactionInfo: {
        _alias: {
          dataSize: "size"
        },
        chunkRoot: "H256",
        contentHash: "H256",
        dataSize: "u32",
        blockChunks: "u32"
      },
      TransactionStorageProof: {
        chunk: "Vec<u8>",
        proof: "Vec<Vec<u8>>"
      },
      ValidatorId: "AccountId",
      ValidatorIdOf: "ValidatorId",
      WeightV0: "u32",
      WeightV1: "u64",
      WeightV2: {
        refTime: "Compact<u64>",
        proofSize: "Compact<u64>"
      },
      Weight: "WeightV2",
      WeightMultiplier: "Fixed64",
      // digest
      PreRuntime: "(ConsensusEngineId, Bytes)",
      SealV0: "(u64, Signature)",
      Seal: "(ConsensusEngineId, Bytes)",
      Consensus: "(ConsensusEngineId, Bytes)"
    }
  };
  const v0$1 = {
    Si0Field: {
      name: "Option<Text>",
      type: "Si0LookupTypeId",
      typeName: "Option<Text>",
      docs: "Vec<Text>"
    },
    Si0LookupTypeId: "u32",
    Si0Path: "Vec<Text>",
    Si0Type: {
      path: "Si0Path",
      params: "Vec<Si0LookupTypeId>",
      def: "Si0TypeDef"
    },
    Si0TypeDef: {
      _enum: {
        Composite: "Si0TypeDefComposite",
        Variant: "Si0TypeDefVariant",
        Sequence: "Si0TypeDefSequence",
        Array: "Si0TypeDefArray",
        Tuple: "Si0TypeDefTuple",
        Primitive: "Si0TypeDefPrimitive",
        Compact: "Si0TypeDefCompact",
        Phantom: "Si0TypeDefPhantom",
        BitSequence: "Si0TypeDefBitSequence"
      }
    },
    Si0TypeDefArray: {
      len: "u32",
      type: "Si0LookupTypeId"
    },
    Si0TypeDefBitSequence: {
      bitStoreType: "Si0LookupTypeId",
      bitOrderType: "Si0LookupTypeId"
    },
    Si0TypeDefCompact: {
      type: "Si0LookupTypeId"
    },
    Si0TypeDefComposite: {
      fields: "Vec<Si0Field>"
    },
    Si0TypeDefPhantom: "Null",
    Si0TypeDefVariant: {
      variants: "Vec<Si0Variant>"
    },
    Si0TypeDefPrimitive: {
      _enum: ["Bool", "Char", "Str", "U8", "U16", "U32", "U64", "U128", "U256", "I8", "I16", "I32", "I64", "I128", "I256"]
    },
    Si0TypeDefSequence: {
      type: "Si0LookupTypeId"
    },
    Si0TypeDefTuple: "Vec<Si0LookupTypeId>",
    Si0TypeParameter: {
      name: "Text",
      type: "Option<Si0LookupTypeId>"
    },
    Si0Variant: {
      name: "Text",
      fields: "Vec<Si0Field>",
      index: "Option<u8>",
      discriminant: "Option<u64>",
      docs: "Vec<Text>"
    }
  };
  const definitions$13 = {
    rpc: {},
    types: {
      ...v0$1,
      ...v1$1,
      // latest mappings
      SiField: "Si1Field",
      SiLookupTypeId: "Si1LookupTypeId",
      SiPath: "Si1Path",
      SiType: "Si1Type",
      SiTypeDef: "Si1TypeDef",
      SiTypeDefArray: "Si1TypeDefArray",
      SiTypeDefBitSequence: "Si1TypeDefBitSequence",
      SiTypeDefCompact: "Si1TypeDefCompact",
      SiTypeDefComposite: "Si1TypeDefComposite",
      SiTypeDefPrimitive: "Si1TypeDefPrimitive",
      SiTypeDefSequence: "Si1TypeDefSequence",
      SiTypeDefTuple: "Si1TypeDefTuple",
      SiTypeParameter: "Si1TypeParameter",
      SiTypeDefVariant: "Si1TypeDefVariant",
      SiVariant: "Si1Variant"
    }
  };
  const runtime$q = {
    AssetsApi: [
      {
        methods: {
          account_balances: {
            description: "Return the current set of authorities.",
            params: [
              {
                name: "account",
                type: "AccountId"
              }
            ],
            type: "Vec<(u32, TAssetBalance)>"
          }
        },
        version: 1
      }
    ]
  };
  const definitions$12 = {
    rpc: {},
    runtime: runtime$q,
    types: {
      AssetApprovalKey: {
        owner: "AccountId",
        delegate: "AccountId"
      },
      AssetApproval: {
        amount: "TAssetBalance",
        deposit: "TAssetDepositBalance"
      },
      AssetBalance: {
        balance: "TAssetBalance",
        isFrozen: "bool",
        isSufficient: "bool"
      },
      AssetDestroyWitness: {
        accounts: "Compact<u32>",
        sufficients: "Compact<u32>",
        approvals: "Compact<u32>"
      },
      AssetDetails: {
        owner: "AccountId",
        issuer: "AccountId",
        admin: "AccountId",
        freezer: "AccountId",
        supply: "TAssetBalance",
        deposit: "TAssetDepositBalance",
        minBalance: "TAssetBalance",
        isSufficient: "bool",
        accounts: "u32",
        sufficients: "u32",
        approvals: "u32",
        isFrozen: "bool"
      },
      AssetMetadata: {
        deposit: "TAssetDepositBalance",
        name: "Vec<u8>",
        symbol: "Vec<u8>",
        decimals: "u8",
        isFrozen: "bool"
      },
      TAssetBalance: "u64",
      TAssetDepositBalance: "BalanceOf"
    }
  };
  const runtime$p = {
    AuraApi: [
      {
        methods: {
          authorities: {
            description: "Return the current set of authorities.",
            params: [],
            type: "Vec<AuthorityId>"
          },
          slot_duration: {
            description: "Returns the slot duration for Aura.",
            params: [],
            type: "SlotDuration"
          }
        },
        version: 1
      }
    ]
  };
  const definitions$11 = {
    rpc: {},
    runtime: runtime$p,
    types: {
      RawAuraPreDigest: {
        slotNumber: "u64"
      }
    }
  };
  const definitions$10 = {
    rpc: {},
    types: {
      UncleEntryItem: {
        _enum: {
          InclusionHeight: "BlockNumber",
          Uncle: "(Hash, Option<AccountId>)"
        }
      }
    }
  };
  const rpc$g = {
    epochAuthorship: {
      description: "Returns data about which slots (primary or secondary) can be claimed in the current epoch with the keys in the keystore",
      isUnsafe: true,
      params: [],
      type: "HashMap<AuthorityId, EpochAuthorship>"
    }
  };
  const V1_V2_SHARED = {
    current_epoch: {
      description: "Returns information regarding the current epoch.",
      params: [],
      type: "Epoch"
    },
    current_epoch_start: {
      description: "Returns the slot that started the current epoch.",
      params: [],
      type: "Slot"
    },
    generate_key_ownership_proof: {
      description: "Generates a proof of key ownership for the given authority in the current epoch.",
      params: [
        {
          name: "slot",
          type: "Slot"
        },
        {
          name: "authorityId",
          type: "AuthorityId"
        }
      ],
      type: "Option<OpaqueKeyOwnershipProof>"
    },
    next_epoch: {
      description: "Returns information regarding the next epoch (which was already previously announced).",
      params: [],
      type: "Epoch"
    },
    submit_report_equivocation_unsigned_extrinsic: {
      description: "Submits an unsigned extrinsic to report an equivocation.",
      params: [
        {
          name: "equivocationProof",
          type: "BabeEquivocationProof"
        },
        {
          name: "keyOwnerProof",
          type: "OpaqueKeyOwnershipProof"
        }
      ],
      type: "Option<Null>"
    }
  };
  const runtime$o = {
    BabeApi: [
      {
        methods: {
          configuration: {
            description: "Return the genesis configuration for BABE. The configuration is only read on genesis.",
            params: [],
            type: "BabeGenesisConfiguration"
          },
          ...V1_V2_SHARED
        },
        version: 2
      },
      {
        methods: {
          configuration: {
            description: "Return the configuration for BABE. Version 1.",
            params: [],
            type: "BabeGenesisConfigurationV1"
          },
          ...V1_V2_SHARED
        },
        version: 1
      }
    ]
  };
  const definitions$$ = {
    rpc: rpc$g,
    runtime: runtime$o,
    types: {
      AllowedSlots: {
        _enum: ["PrimarySlots", "PrimaryAndSecondaryPlainSlots", "PrimaryAndSecondaryVRFSlots"]
      },
      BabeAuthorityWeight: "u64",
      BabeEpochConfiguration: {
        c: "(u64, u64)",
        allowedSlots: "AllowedSlots"
      },
      BabeBlockWeight: "u32",
      BabeEquivocationProof: {
        offender: "AuthorityId",
        slotNumber: "SlotNumber",
        firstHeader: "Header",
        secondHeader: "Header"
      },
      BabeGenesisConfiguration: {
        slotDuration: "u64",
        epochLength: "u64",
        c: "(u64, u64)",
        genesisAuthorities: "Vec<(AuthorityId, BabeAuthorityWeight)>",
        randomness: "Randomness",
        allowedSlots: "AllowedSlots"
      },
      BabeGenesisConfigurationV1: {
        slotDuration: "u64",
        epochLength: "u64",
        c: "(u64, u64)",
        genesisAuthorities: "Vec<(AuthorityId, BabeAuthorityWeight)>",
        randomness: "Randomness",
        secondarySlots: "bool"
      },
      BabeWeight: "u64",
      MaybeRandomness: "Option<Randomness>",
      MaybeVrf: "Option<VrfData>",
      Epoch: {
        epochIndex: "u64",
        startSlot: "Slot",
        duration: "u64",
        authorities: "Vec<(AuthorityId, BabeAuthorityWeight)>",
        randomness: "Hash",
        config: "BabeEpochConfiguration"
      },
      EpochAuthorship: {
        primary: "Vec<u64>",
        secondary: "Vec<u64>",
        secondary_vrf: "Vec<u64>"
      },
      NextConfigDescriptor: {
        _enum: {
          V0: "Null",
          V1: "NextConfigDescriptorV1"
        }
      },
      NextConfigDescriptorV1: {
        c: "(u64, u64)",
        allowedSlots: "AllowedSlots"
      },
      OpaqueKeyOwnershipProof: "Bytes",
      Randomness: "Hash",
      RawBabePreDigest: {
        _enum: {
          Phantom: "Null",
          Primary: "RawBabePreDigestPrimary",
          SecondaryPlain: "RawBabePreDigestSecondaryPlain",
          SecondaryVRF: "RawBabePreDigestSecondaryVRF"
        }
      },
      RawBabePreDigestPrimary: {
        authorityIndex: "u32",
        slotNumber: "SlotNumber",
        vrfOutput: "VrfOutput",
        vrfProof: "VrfProof"
      },
      RawBabePreDigestSecondaryPlain: {
        authorityIndex: "u32",
        slotNumber: "SlotNumber"
      },
      RawBabePreDigestSecondaryVRF: {
        authorityIndex: "u32",
        slotNumber: "SlotNumber",
        vrfOutput: "VrfOutput",
        vrfProof: "VrfProof"
      },
      RawBabePreDigestTo159: {
        _enum: {
          Primary: "RawBabePreDigestPrimaryTo159",
          Secondary: "RawBabePreDigestSecondaryTo159"
        }
      },
      RawBabePreDigestPrimaryTo159: {
        authorityIndex: "u32",
        slotNumber: "SlotNumber",
        weight: "BabeBlockWeight",
        vrfOutput: "VrfOutput",
        vrfProof: "VrfProof"
      },
      RawBabePreDigestSecondaryTo159: {
        authorityIndex: "u32",
        slotNumber: "SlotNumber",
        weight: "BabeBlockWeight"
      },
      // a cross old/new compatible version of the digest, that is _only_ useful
      // for partial parsing and extraction of the author. This assumes that all
      // entries has the authorityIndex in the first position - and that it is all
      // we are interested in
      RawBabePreDigestCompat: {
        _enum: {
          Zero: "u32",
          One: "u32",
          Two: "u32",
          Three: "u32"
        }
      },
      SlotNumber: "u64",
      VrfData: "[u8; 32]",
      VrfOutput: "[u8; 32]",
      VrfProof: "[u8; 64]"
    }
  };
  const definitions$_ = {
    rpc: {},
    types: {
      AccountData: {
        free: "Balance",
        reserved: "Balance",
        miscFrozen: "Balance",
        feeFrozen: "Balance"
      },
      BalanceLockTo212: {
        id: "LockIdentifier",
        amount: "Balance",
        until: "BlockNumber",
        reasons: "WithdrawReasons"
      },
      BalanceLock: {
        id: "LockIdentifier",
        amount: "Balance",
        reasons: "Reasons"
      },
      BalanceStatus: {
        _enum: ["Free", "Reserved"]
      },
      Reasons: {
        _enum: ["Fee", "Misc", "All"]
      },
      ReserveData: {
        id: "ReserveIdentifier",
        amount: "Balance"
      },
      ReserveIdentifier: "[u8; 8]",
      VestingSchedule: {
        offset: "Balance",
        perBlock: "Balance",
        startingBlock: "BlockNumber"
      },
      WithdrawReasons: {
        _set: {
          TransactionPayment: 1,
          Transfer: 2,
          Reserve: 4,
          Fee: 8,
          Tip: 16
        }
      }
    }
  };
  const rpc$f = {
    getFinalizedHead: {
      description: "Returns hash of the latest BEEFY finalized block as seen by this client.",
      params: [],
      type: "H256"
    },
    subscribeJustifications: {
      description: "Returns the block most recently finalized by BEEFY, alongside side its justification.",
      params: [],
      pubsub: [
        "justifications",
        "subscribeJustifications",
        "unsubscribeJustifications"
      ],
      type: "BeefySignedCommitment"
    }
  };
  const BEEFY_V1_V2 = {
    beefy_genesis: {
      description: "Return the block number where BEEFY consensus is enabled/started",
      params: [],
      type: "Option<BlockNumber>"
    },
    generate_key_ownership_proof: {
      description: "Generates a proof of key ownership for the given authority in the given set.",
      params: [
        {
          name: "setId",
          type: "ValidatorSetId"
        },
        {
          name: "authorityId",
          type: "AuthorityId"
        }
      ],
      type: "Option<OpaqueKeyOwnershipProof>"
    },
    submit_report_equivocation_unsigned_extrinsic: {
      description: "Submits an unsigned extrinsic to report an equivocation.",
      params: [
        {
          name: "equivocationProof",
          type: "BeefyEquivocationProof"
        },
        {
          name: "keyOwnerProof",
          type: "OpaqueKeyOwnershipProof"
        }
      ],
      type: "Option<Null>"
    },
    validator_set: {
      description: "Return the current active BEEFY validator set",
      params: [],
      type: "Option<ValidatorSet>"
    }
  };
  const BEEFY_MMR_V1 = {
    authority_set_proof: {
      description: "Return the currently active BEEFY authority set proof.",
      params: [],
      type: "BeefyAuthoritySet"
    },
    next_authority_set_proof: {
      description: "Return the next/queued BEEFY authority set proof.",
      params: [],
      type: "BeefyNextAuthoritySet"
    }
  };
  const runtime$n = {
    BeefyApi: [
      {
        methods: BEEFY_V1_V2,
        version: 2
      },
      {
        methods: BEEFY_V1_V2,
        version: 1
      }
    ],
    BeefyMmrApi: [
      {
        methods: BEEFY_MMR_V1,
        version: 1
      }
    ]
  };
  const definitions$Z = {
    rpc: rpc$f,
    runtime: runtime$n,
    types: {
      BeefyAuthoritySet: {
        id: "u64",
        len: "u32",
        root: "H256"
      },
      BeefyCommitment: {
        payload: "BeefyPayload",
        blockNumber: "BlockNumber",
        validatorSetId: "ValidatorSetId"
      },
      BeefyId: "[u8; 33]",
      BeefyEquivocationProof: {
        first: "BeefyVoteMessage",
        second: "BeefyVoteMessage"
      },
      BeefySignedCommitment: {
        commitment: "BeefyCommitment",
        signatures: "Vec<Option<EcdsaSignature>>"
      },
      BeefyNextAuthoritySet: {
        id: "u64",
        len: "u32",
        root: "H256"
      },
      BeefyPayload: "Vec<(BeefyPayloadId, Bytes)>",
      BeefyPayloadId: "[u8;2]",
      BeefyVoteMessage: {
        commitment: "BeefyCommitment",
        id: "AuthorityId",
        signature: "Signature"
      },
      MmrRootHash: "H256",
      ValidatorSetId: "u64",
      ValidatorSet: {
        validators: "Vec<AuthorityId>",
        id: "ValidatorSetId"
      }
    }
  };
  const runtime$m = {
    Benchmark: [
      {
        methods: {
          benchmark_metadata: {
            description: "Get the benchmark metadata available for this runtime.",
            params: [
              {
                name: "extra",
                type: "bool"
              }
            ],
            type: "(Vec<BenchmarkList>, Vec<StorageInfo>)"
          },
          dispatch_benchmark: {
            description: "Dispatch the given benchmark.",
            params: [
              {
                name: "config",
                type: "BenchmarkConfig"
              }
            ],
            type: "Result<Vec<BenchmarkBatch>, Text>"
          }
        },
        version: 1
      }
    ]
  };
  const definitions$Y = {
    rpc: {},
    runtime: runtime$m,
    types: {
      BenchmarkBatch: {
        pallet: "Text",
        instance: "Text",
        benchmark: "Text",
        results: "Vec<BenchmarkResult>"
      },
      BenchmarkConfig: {
        pallet: "Bytes",
        benchmark: "Bytes",
        selectedComponents: "Vec<(BenchmarkParameter, u32)>",
        verify: "bool",
        internalRepeats: "u32"
      },
      BenchmarkList: {
        pallet: "Bytes",
        instance: "Bytes",
        benchmarks: "Vec<BenchmarkMetadata>"
      },
      BenchmarkMetadata: {
        name: "Bytes",
        components: "Vec<(BenchmarkParameter, u32, u32)>"
      },
      BenchmarkParameter: {
        _enum: ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
      },
      BenchmarkResult: {
        components: "Vec<(BenchmarkParameter, u32)>",
        extrinsicTime: "u128",
        storageRootTime: "u128",
        reads: "u32",
        repeatReads: "u32",
        writes: "u32",
        repeatWrites: "u32",
        proofSize: "u32",
        benchKeys: "Vec<(Vec<u8>, u32, u32, bool)>"
      }
    }
  };
  const BB_V2_TO_V4 = {
    // this was removed after V4
    random_seed: {
      description: "Generate a random seed.",
      params: [],
      type: "Hash"
    }
  };
  const BB_V2_TO_V5 = {
    apply_extrinsic: {
      description: "Apply the given extrinsic.",
      params: [
        {
          name: "extrinsic",
          type: "Extrinsic"
        }
      ],
      type: "ApplyExtrinsicResultPre6"
    }
  };
  const BB_V2_TO_V6 = {
    check_inherents: {
      description: "Check that the inherents are valid.",
      params: [
        {
          name: "block",
          type: "Block"
        },
        {
          name: "data",
          type: "InherentData"
        }
      ],
      type: "CheckInherentsResult"
    },
    inherent_extrinsics: {
      description: "Generate inherent extrinsics.",
      params: [
        {
          name: "inherent",
          type: "InherentData"
        }
      ],
      type: "Vec<Extrinsic>"
    }
  };
  const BB_V3_TO_V6 = {
    // renamed in v3 from finalize_block
    finalize_block: {
      description: "Finish the current block.",
      params: [],
      type: "Header"
    }
  };
  const runtime$l = {
    BlockBuilder: [
      {
        methods: {
          apply_extrinsic: {
            description: "Apply the given extrinsic.",
            params: [
              {
                name: "extrinsic",
                type: "Extrinsic"
              }
            ],
            type: "ApplyExtrinsicResult"
          },
          ...BB_V2_TO_V6,
          ...BB_V3_TO_V6
        },
        version: 6
      },
      {
        methods: {
          // apply_extrinsic result changed in 6
          ...BB_V2_TO_V5,
          ...BB_V2_TO_V6,
          ...BB_V3_TO_V6
        },
        version: 5
      },
      {
        methods: {
          // random_seed removed
          ...BB_V2_TO_V4,
          ...BB_V2_TO_V5,
          ...BB_V2_TO_V6,
          ...BB_V3_TO_V6
        },
        version: 4
      },
      {
        methods: {
          // finalize_block renamed
          ...BB_V2_TO_V4,
          ...BB_V2_TO_V6,
          ...BB_V3_TO_V6
        },
        version: 3
      },
      {
        methods: {
          finalise_block: {
            description: "Finish the current block.",
            params: [],
            type: "Header"
          },
          ...BB_V2_TO_V4,
          ...BB_V2_TO_V6
        },
        version: 2
      }
    ]
  };
  const definitions$X = {
    rpc: {},
    runtime: runtime$l,
    types: {
      CheckInherentsResult: {
        okay: "bool",
        fatalError: "bool",
        errors: "InherentData"
      },
      InherentData: {
        data: "BTreeMap<InherentIdentifier, Bytes>"
      },
      InherentIdentifier: "[u8; 8]"
    }
  };
  const definitions$W = {
    rpc: {},
    types: {
      CollectiveOrigin: {
        _enum: {
          Members: "(MemberCount, MemberCount)",
          Member: "AccountId"
        }
      },
      MemberCount: "u32",
      ProposalIndex: "u32",
      VotesTo230: {
        index: "ProposalIndex",
        threshold: "MemberCount",
        ayes: "Vec<AccountId>",
        nays: "Vec<AccountId>"
      },
      Votes: {
        index: "ProposalIndex",
        threshold: "MemberCount",
        ayes: "Vec<AccountId>",
        nays: "Vec<AccountId>",
        end: "BlockNumber"
      }
    }
  };
  const definitions$V = {
    rpc: {},
    types: {
      AuthorityId: "AccountId",
      RawVRFOutput: "[u8; 32]"
    }
  };
  const rpc$e = {
    call: {
      deprecated: "Use the runtime interface `api.call.contractsApi.call` instead",
      description: "Executes a call to a contract",
      params: [
        {
          name: "callRequest",
          type: "ContractCallRequest"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "ContractExecResult"
    },
    getStorage: {
      deprecated: "Use the runtime interface `api.call.contractsApi.getStorage` instead",
      description: "Returns the value under a specified storage key in a contract",
      params: [
        {
          name: "address",
          type: "AccountId"
        },
        {
          name: "key",
          type: "H256"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "Option<Bytes>"
    },
    instantiate: {
      deprecated: "Use the runtime interface `api.call.contractsApi.instantiate` instead",
      description: "Instantiate a new contract",
      params: [
        {
          name: "request",
          type: "InstantiateRequestV1"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "ContractInstantiateResult"
    },
    rentProjection: {
      deprecated: "Not available in newer versions of the contracts interfaces",
      description: "Returns the projected time a given contract will be able to sustain paying its rent",
      params: [
        {
          name: "address",
          type: "AccountId"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "Option<BlockNumber>"
    },
    uploadCode: {
      deprecated: "Use the runtime interface `api.call.contractsApi.uploadCode` instead",
      description: "Upload new code without instantiating a contract from it",
      // The RPC here is terribly misnamed - somebody forgot how the RPCs
      // are actually done, ie. <module>_<camelCasedMethod>
      endpoint: "contracts_upload_code",
      params: [
        {
          name: "uploadRequest",
          type: "CodeUploadRequest"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "CodeUploadResult"
    }
  };
  const SHARED_V1_V2 = {
    get_storage: {
      description: "Query a given storage key in a given contract.",
      params: [
        {
          name: "address",
          type: "AccountId"
        },
        {
          name: "key",
          type: "Bytes"
        }
      ],
      type: "Option<Bytes>"
    },
    upload_code: {
      description: "Upload new code without instantiating a contract from it.",
      params: [
        {
          name: "origin",
          type: "AccountId"
        },
        {
          name: "code",
          type: "Bytes"
        },
        {
          name: "storageDepositLimit",
          type: "Option<Balance>"
        }
      ],
      type: "CodeUploadResult"
    }
  };
  const runtime$k = {
    ContractsApi: [
      {
        methods: {
          call: {
            description: "Perform a call from a specified account to a given contract.",
            params: [
              {
                name: "origin",
                type: "AccountId"
              },
              {
                name: "dest",
                type: "AccountId"
              },
              {
                name: "value",
                type: "Balance"
              },
              {
                name: "gasLimit",
                type: "Option<WeightV2>"
              },
              {
                name: "storageDepositLimit",
                type: "Option<Balance>"
              },
              {
                name: "inputData",
                type: "Vec<u8>"
              }
            ],
            type: "ContractExecResult"
          },
          instantiate: {
            description: "Instantiate a new contract.",
            params: [
              {
                name: "origin",
                type: "AccountId"
              },
              {
                name: "value",
                type: "Balance"
              },
              {
                name: "gasLimit",
                type: "Option<WeightV2>"
              },
              {
                name: "storageDepositLimit",
                type: "Option<Balance>"
              },
              {
                name: "code",
                type: "CodeSource"
              },
              {
                name: "data",
                type: "Bytes"
              },
              {
                name: "salt",
                type: "Bytes"
              }
            ],
            type: "ContractInstantiateResult"
          },
          ...SHARED_V1_V2
        },
        version: 2
      },
      {
        methods: {
          call: {
            description: "Perform a call from a specified account to a given contract.",
            params: [
              {
                name: "origin",
                type: "AccountId"
              },
              {
                name: "dest",
                type: "AccountId"
              },
              {
                name: "value",
                type: "Balance"
              },
              {
                name: "gasLimit",
                type: "u64"
              },
              {
                name: "storageDepositLimit",
                type: "Option<Balance>"
              },
              {
                name: "inputData",
                type: "Vec<u8>"
              }
            ],
            type: "ContractExecResultU64"
          },
          instantiate: {
            description: "Instantiate a new contract.",
            params: [
              {
                name: "origin",
                type: "AccountId"
              },
              {
                name: "value",
                type: "Balance"
              },
              {
                name: "gasLimit",
                type: "u64"
              },
              {
                name: "storageDepositLimit",
                type: "Option<Balance>"
              },
              {
                name: "code",
                type: "CodeSource"
              },
              {
                name: "data",
                type: "Bytes"
              },
              {
                name: "salt",
                type: "Bytes"
              }
            ],
            type: "ContractInstantiateResultU64"
          },
          ...SHARED_V1_V2
        },
        version: 1
      }
    ]
  };
  const definitions$U = {
    rpc: rpc$e,
    runtime: runtime$k,
    types: {
      AliveContractInfo: {
        trieId: "TrieId",
        storageSize: "u32",
        pairCount: "u32",
        codeHash: "CodeHash",
        rentAllowance: "Balance",
        rentPaid: "Balance",
        deductBlock: "BlockNumber",
        lastWrite: "Option<BlockNumber>",
        _reserved: "Option<Null>"
      },
      CodeHash: "Hash",
      CodeSource: {
        _enum: {
          Upload: "Bytes",
          Existing: "Hash"
        }
      },
      CodeUploadRequest: {
        origin: "AccountId",
        code: "Bytes",
        storageDepositLimit: "Option<Balance>"
      },
      CodeUploadResult: "Result<CodeUploadResultValue, DispatchError>",
      CodeUploadResultValue: {
        codeHash: "CodeHash",
        deposit: "Balance"
      },
      ContractCallRequest: {
        origin: "AccountId",
        dest: "AccountId",
        value: "Balance",
        gasLimit: "u64",
        storageDepositLimit: "Option<Balance>",
        inputData: "Bytes"
      },
      ContractExecResultSuccessTo255: {
        status: "u8",
        data: "Raw"
      },
      ContractExecResultTo255: {
        _enum: {
          Success: "ContractExecResultSuccessTo255",
          Error: "Null"
        }
      },
      ContractExecResultSuccessTo260: {
        flags: "ContractReturnFlags",
        data: "Bytes",
        gasConsumed: "u64"
      },
      ContractExecResultTo260: {
        _enum: {
          Success: "ContractExecResultSuccessTo260",
          Error: "Null"
        }
      },
      ContractExecResultOk: {
        flags: "ContractReturnFlags",
        data: "Bytes"
      },
      ContractExecResultResult: "Result<ContractExecResultOk, DispatchError>",
      ContractExecResultTo267: {
        gasConsumed: "u64",
        debugMessage: "Text",
        result: "ContractExecResultResult"
      },
      ContractExecResult: {
        gasConsumed: "Weight",
        gasRequired: "Weight",
        storageDeposit: "StorageDeposit",
        debugMessage: "Text",
        result: "ContractExecResultResult"
      },
      ContractExecResultU64: {
        gasConsumed: "u64",
        gasRequired: "u64",
        storageDeposit: "StorageDeposit",
        debugMessage: "Text",
        result: "ContractExecResultResult"
      },
      ContractInfo: {
        _enum: {
          Alive: "AliveContractInfo",
          Tombstone: "TombstoneContractInfo"
        }
      },
      ContractCallFlags: {
        _set: {
          _bitLength: 32,
          ForwardInput: 1,
          CloneInput: 2,
          TailCall: 4,
          AllowReentry: 8
        }
      },
      ContractReturnFlags: {
        _set: {
          _bitLength: 32,
          Revert: 1
        }
      },
      ContractStorageKey: "[u8; 32]",
      DeletedContract: {
        pairCount: "u32",
        trieId: "TrieId"
      },
      ExecReturnValue: {
        flags: "ContractReturnFlags",
        data: "Bytes"
      },
      Gas: "u64",
      HostFnWeightsTo264: {
        caller: "Weight",
        address: "Weight",
        gasLeft: "Weight",
        balance: "Weight",
        valueTransferred: "Weight",
        minimumBalance: "Weight",
        tombstoneDeposit: "Weight",
        rentAllowance: "Weight",
        blockNumber: "Weight",
        now: "Weight",
        weightToFee: "Weight",
        gas: "Weight",
        input: "Weight",
        inputPerByte: "Weight",
        return: "Weight",
        returnPerByte: "Weight",
        terminate: "Weight",
        restoreTo: "Weight",
        restoreToPerDelta: "Weight",
        random: "Weight",
        depositEvent: "Weight",
        depositEventPerTopic: "Weight",
        depositEventPerByte: "Weight",
        setRentAllowance: "Weight",
        setStorage: "Weight",
        setStoragePerByte: "Weight",
        clearStorage: "Weight",
        getStorage: "Weight",
        getStoragePerByte: "Weight",
        transfer: "Weight",
        call: "Weight",
        callTransferSurcharge: "Weight",
        callPerInputByte: "Weight",
        callPerOutputByte: "Weight",
        instantiate: "Weight",
        instantiatePerInputByte: "Weight",
        instantiatePerOutputByte: "Weight",
        hashSha2256: "Weight",
        hashSha2256PerByte: "Weight",
        hashKeccak256: "Weight",
        hashKeccak256PerByte: "Weight",
        hashBlake2256: "Weight",
        hashBlake2256PerByte: "Weight",
        hashBlake2128: "Weight",
        hashBlake2128PerByte: "Weight"
      },
      HostFnWeights: {
        caller: "Weight",
        address: "Weight",
        gasLeft: "Weight",
        balance: "Weight",
        valueTransferred: "Weight",
        minimumBalance: "Weight",
        tombstoneDeposit: "Weight",
        rentAllowance: "Weight",
        blockNumber: "Weight",
        now: "Weight",
        weightToFee: "Weight",
        gas: "Weight",
        input: "Weight",
        inputPerByte: "Weight",
        return: "Weight",
        returnPerByte: "Weight",
        terminate: "Weight",
        terminatePerCodeByte: "Weight",
        restoreTo: "Weight",
        restoreToPerCallerCodeByte: "Weight",
        restoreToPerTombstoneCodeByte: "Weight",
        restoreToPerDelta: "Weight",
        random: "Weight",
        depositEvent: "Weight",
        depositEventPerTopic: "Weight",
        depositEventPerByte: "Weight",
        setRentAllowance: "Weight",
        setStorage: "Weight",
        setStoragePerByte: "Weight",
        clearStorage: "Weight",
        getStorage: "Weight",
        getStoragePerByte: "Weight",
        transfer: "Weight",
        call: "Weight",
        callPerCodeByte: "Weight",
        callTransferSurcharge: "Weight",
        callPerInputByte: "Weight",
        callPerOutputByte: "Weight",
        instantiate: "Weight",
        instantiatePerCodeByte: "Weight",
        instantiatePerInputByte: "Weight",
        instantiatePerOutputByte: "Weight",
        instantiatePerSaltByte: "Weight",
        hashSha2256: "Weight",
        hashSha2256PerByte: "Weight",
        hashKeccak256: "Weight",
        hashKeccak256PerByte: "Weight",
        hashBlake2256: "Weight",
        hashBlake2256PerByte: "Weight",
        hashBlake2128: "Weight",
        hashBlake2128PerByte: "Weight",
        rentParams: "Weight"
      },
      InstantiateRequestV1: {
        origin: "AccountId",
        value: "Balance",
        gasLimit: "Gas",
        code: "Bytes",
        data: "Bytes",
        salt: "Bytes"
      },
      InstantiateRequestV2: {
        _fallback: "InstantiateRequestV1",
        origin: "AccountId",
        value: "Balance",
        gasLimit: "Gas",
        storageDepositLimit: "Option<Balance>",
        code: "Bytes",
        data: "Bytes",
        salt: "Bytes"
      },
      InstantiateRequest: {
        _fallback: "InstantiateRequestV2",
        origin: "AccountId",
        value: "Balance",
        gasLimit: "Gas",
        storageDepositLimit: "Option<Balance>",
        code: "CodeSource",
        data: "Bytes",
        salt: "Bytes"
      },
      ContractInstantiateResultTo267: "Result<InstantiateReturnValueTo267, Null>",
      ContractInstantiateResultTo299: "Result<InstantiateReturnValueOk, Null>",
      ContractInstantiateResult: {
        gasConsumed: "WeightV2",
        gasRequired: "WeightV2",
        storageDeposit: "StorageDeposit",
        debugMessage: "Text",
        result: "InstantiateReturnValue"
      },
      ContractInstantiateResultU64: {
        // only this one can fail, the current version (above) _should_ be correctly
        // versioned now, aka no more deprecated RPCs involved, only runtime calls
        _fallback: "ContractInstantiateResultTo299",
        gasConsumed: "u64",
        gasRequired: "u64",
        storageDeposit: "StorageDeposit",
        debugMessage: "Text",
        result: "InstantiateReturnValue"
      },
      InstantiateReturnValueTo267: {
        result: "ExecReturnValue",
        accountId: "AccountId",
        rentProjection: "Option<RentProjection>"
      },
      InstantiateReturnValueOk: {
        result: "ExecReturnValue",
        accountId: "AccountId"
      },
      InstantiateReturnValue: "Result<InstantiateReturnValueOk, DispatchError>",
      InstructionWeights: {
        i64const: "u32",
        i64load: "u32",
        i64store: "u32",
        select: "u32",
        rIf: "u32",
        br: "u32",
        brIf: "u32",
        brIable: "u32",
        brIablePerEntry: "u32",
        call: "u32",
        callIndirect: "u32",
        callIndirectPerParam: "u32",
        localGet: "u32",
        localSet: "u32",
        local_tee: "u32",
        globalGet: "u32",
        globalSet: "u32",
        memoryCurrent: "u32",
        memoryGrow: "u32",
        i64clz: "u32",
        i64ctz: "u32",
        i64popcnt: "u32",
        i64eqz: "u32",
        i64extendsi32: "u32",
        i64extendui32: "u32",
        i32wrapi64: "u32",
        i64eq: "u32",
        i64ne: "u32",
        i64lts: "u32",
        i64ltu: "u32",
        i64gts: "u32",
        i64gtu: "u32",
        i64les: "u32",
        i64leu: "u32",
        i64ges: "u32",
        i64geu: "u32",
        i64add: "u32",
        i64sub: "u32",
        i64mul: "u32",
        i64divs: "u32",
        i64divu: "u32",
        i64rems: "u32",
        i64remu: "u32",
        i64and: "u32",
        i64or: "u32",
        i64xor: "u32",
        i64shl: "u32",
        i64shrs: "u32",
        i64shru: "u32",
        i64rotl: "u32",
        i64rotr: "u32"
      },
      LimitsTo264: {
        eventTopics: "u32",
        stackHeight: "u32",
        globals: "u32",
        parameters: "u32",
        memoryPages: "u32",
        tableSize: "u32",
        brTableSize: "u32",
        subjectLen: "u32",
        codeSize: "u32"
      },
      Limits: {
        eventTopics: "u32",
        stackHeight: "u32",
        globals: "u32",
        parameters: "u32",
        memoryPages: "u32",
        tableSize: "u32",
        brTableSize: "u32",
        subjectLen: "u32"
      },
      PrefabWasmModule: {
        scheduleVersion: "Compact<u32>",
        initial: "Compact<u32>",
        maximum: "Compact<u32>",
        refcount: "Compact<u64>",
        _reserved: "Option<Null>",
        code: "Bytes",
        originalCodeLen: "u32"
      },
      RentProjection: {
        _enum: {
          EvictionAt: "BlockNumber",
          NoEviction: "Null"
        }
      },
      ScheduleTo212: {
        version: "u32",
        putCodePerByteCost: "Gas",
        growMemCost: "Gas",
        regularOpCost: "Gas",
        returnDataPerByteCost: "Gas",
        eventDataPerByteCost: "Gas",
        eventPerTopicCost: "Gas",
        eventBaseCost: "Gas",
        sandboxDataReadCost: "Gas",
        sandboxDataWriteCost: "Gas",
        maxEventTopics: "u32",
        maxStackHeight: "u32",
        maxMemoryPages: "u32",
        enablePrintln: "bool",
        maxSubjectLen: "u32"
      },
      ScheduleTo258: {
        version: "u32",
        putCodePerByteCost: "Gas",
        growMemCost: "Gas",
        regularOpCost: "Gas",
        returnDataPerByteCost: "Gas",
        eventDataPerByteCost: "Gas",
        eventPerTopicCost: "Gas",
        eventBaseCost: "Gas",
        sandboxDataReadCost: "Gas",
        sandboxDataWriteCost: "Gas",
        transferCost: "Gas",
        maxEventTopics: "u32",
        maxStackHeight: "u32",
        maxMemoryPages: "u32",
        enablePrintln: "bool",
        maxSubjectLen: "u32"
      },
      ScheduleTo264: {
        version: "u32",
        enablePrintln: "bool",
        limits: "LimitsTo264",
        instructionWeights: "InstructionWeights",
        hostFnWeights: "HostFnWeightsTo264"
      },
      Schedule: {
        version: "u32",
        enablePrintln: "bool",
        limits: "Limits",
        instructionWeights: "InstructionWeights",
        hostFnWeights: "HostFnWeights"
      },
      SeedOf: "Hash",
      StorageDeposit: {
        _enum: {
          Refund: "Balance",
          Charge: "Balance"
        }
      },
      TombstoneContractInfo: "Hash",
      TrieId: "Bytes"
    }
  };
  const AllConvictions = [
    // 0.1x votes, unlocked.
    "None",
    // 1x votes, locked for an enactment period following a successful vote.
    "Locked1x",
    // 2x votes, locked for 2x enactment periods following a successful vote.
    "Locked2x",
    // 3x votes, locked for 4x...
    "Locked3x",
    // 4x votes, locked for 8x...
    "Locked4x",
    // 5x votes, locked for 16x...
    "Locked5x",
    // 6x votes, locked for 32x...
    "Locked6x"
  ];
  const definitions$T = {
    rpc: {},
    types: {
      AccountVote: {
        _enum: {
          Standard: "AccountVoteStandard",
          Split: "AccountVoteSplit"
        }
      },
      AccountVoteSplit: {
        aye: "Balance",
        nay: "Balance"
      },
      AccountVoteStandard: {
        vote: "Vote",
        balance: "Balance"
      },
      Conviction: {
        _enum: AllConvictions
      },
      Delegations: {
        votes: "Balance",
        capital: "Balance"
      },
      PreimageStatus: {
        _enum: {
          Missing: "BlockNumber",
          Available: "PreimageStatusAvailable"
        }
      },
      PreimageStatusAvailable: {
        data: "Bytes",
        provider: "AccountId",
        deposit: "Balance",
        since: "BlockNumber",
        expiry: "Option<BlockNumber>"
      },
      PriorLock: "(BlockNumber, Balance)",
      PropIndex: "u32",
      Proposal: "Call",
      ProxyState: {
        _enum: {
          Open: "AccountId",
          Active: "AccountId"
        }
      },
      ReferendumIndex: "u32",
      ReferendumInfoTo239: {
        end: "BlockNumber",
        proposalHash: "Hash",
        threshold: "VoteThreshold",
        delay: "BlockNumber"
      },
      ReferendumInfo: {
        _enum: {
          Ongoing: "ReferendumStatus",
          Finished: "ReferendumInfoFinished"
        }
      },
      ReferendumInfoFinished: {
        approved: "bool",
        end: "BlockNumber"
      },
      ReferendumStatus: {
        end: "BlockNumber",
        proposalHash: "Hash",
        threshold: "VoteThreshold",
        delay: "BlockNumber",
        tally: "Tally"
      },
      Tally: {
        ayes: "Balance",
        nays: "Balance",
        turnout: "Balance"
      },
      Voting: {
        _enum: {
          Direct: "VotingDirect",
          Delegating: "VotingDelegating"
        }
      },
      VotingDirect: {
        votes: "Vec<VotingDirectVote>",
        delegations: "Delegations",
        prior: "PriorLock"
      },
      VotingDirectVote: "(ReferendumIndex, AccountVote)",
      VotingDelegating: {
        balance: "Balance",
        target: "AccountId",
        conviction: "Conviction",
        delegations: "Delegations",
        prior: "PriorLock"
      }
    }
  };
  const rpc$d = {
    getBlockStats: {
      description: "Reexecute the specified `block_hash` and gather statistics while doing so",
      isUnsafe: true,
      params: [
        {
          isHistoric: true,
          name: "at",
          type: "Hash"
        }
      ],
      type: "Option<BlockStats>"
    }
  };
  const definitions$S = {
    rpc: rpc$d,
    types: {
      BlockStats: {
        witnessLen: "u64",
        witnessCompactLen: "u64",
        blockLen: "u64",
        blockNumExtrinsics: "u64"
      }
    }
  };
  const runtime$j = {
    AuthorityDiscoveryApi: [
      {
        methods: {
          authorities: {
            description: "Retrieve authority identifiers of the current and next authority set.",
            params: [],
            type: "Vec<AuthorityId>"
          }
        },
        version: 1
      }
    ]
  };
  const definitions$R = {
    rpc: {},
    runtime: runtime$j,
    types: {}
  };
  const definitions$Q = {
    rpc: {},
    types: {
      ApprovalFlag: "u32",
      DefunctVoter: {
        who: "AccountId",
        voteCount: "Compact<u32>",
        candidateCount: "Compact<u32>"
      },
      Renouncing: {
        _enum: {
          Member: "Null",
          RunnerUp: "Null",
          Candidate: "Compact<u32>"
        }
      },
      SetIndex: "u32",
      Vote: "GenericVote",
      VoteIndex: "u32",
      VoterInfo: {
        lastActive: "VoteIndex",
        lastWin: "VoteIndex",
        pot: "Balance",
        stake: "Balance"
      },
      VoteThreshold: {
        _enum: [
          "Super Majority Approve",
          "Super Majority Against",
          "Simple Majority"
        ]
      }
    }
  };
  const rpc$c = {
    createBlock: {
      description: "Instructs the manual-seal authorship task to create a new block",
      params: [
        {
          name: "createEmpty",
          type: "bool"
        },
        {
          name: "finalize",
          type: "bool"
        },
        {
          isOptional: true,
          name: "parentHash",
          type: "BlockHash"
        }
      ],
      type: "CreatedBlock"
    },
    finalizeBlock: {
      description: "Instructs the manual-seal authorship task to finalize a block",
      params: [
        {
          name: "hash",
          type: "BlockHash"
        },
        {
          isOptional: true,
          name: "justification",
          type: "Justification"
        }
      ],
      type: "bool"
    }
  };
  const definitions$P = {
    rpc: rpc$c,
    types: {
      CreatedBlock: {
        _alias: {
          blockHash: "hash"
        },
        blockHash: "BlockHash",
        aux: "ImportedAux"
      },
      ImportedAux: {
        headerOnly: "bool",
        clearJustificationRequests: "bool",
        needsJustification: "bool",
        badJustification: "bool",
        needsFinalityProof: "bool",
        isNewBest: "bool"
      }
    }
  };
  const definitions$O = {
    rpc: {},
    types: {
      EvmAccount: {
        nonce: "u256",
        balance: "u256"
      },
      EvmCallInfo: {
        exitReason: "ExitReason",
        value: "Bytes",
        usedGas: "U256",
        logs: "Vec<EvmLog>"
      },
      EvmCreateInfo: {
        exitReason: "ExitReason",
        value: "H160",
        usedGas: "U256",
        logs: "Vec<EvmLog>"
      },
      EvmLog: {
        address: "H160",
        topics: "Vec<H256>",
        data: "Bytes"
      },
      EvmVicinity: {
        gasPrice: "u256",
        origin: "H160"
      },
      ExitError: {
        _enum: {
          StackUnderflow: "Null",
          StackOverflow: "Null",
          InvalidJump: "Null",
          InvalidRange: "Null",
          DesignatedInvalid: "Null",
          CallTooDeep: "Null",
          CreateCollision: "Null",
          CreateContractLimit: "Null",
          OutOfOffset: "Null",
          OutOfGas: "Null",
          OutOfFund: "Null",
          PCUnderflow: "Null",
          CreateEmpty: "Null",
          Other: "Text"
        }
      },
      ExitFatal: {
        _enum: {
          NotSupported: "Null",
          UnhandledInterrupt: "Null",
          CallErrorAsFatal: "ExitError",
          Other: "Text"
        }
      },
      ExitReason: {
        _enum: {
          Succeed: "ExitSucceed",
          Error: "ExitError",
          Revert: "ExitRevert",
          Fatal: "ExitFatal"
        }
      },
      ExitRevert: {
        _enum: ["Reverted"]
      },
      ExitSucceed: {
        _enum: ["Stopped", "Returned", "Suicided"]
      }
    }
  };
  const definitions$N = {
    rpc: {},
    types: {
      Extrinsic: "GenericExtrinsic",
      ExtrinsicEra: "GenericExtrinsicEra",
      ExtrinsicPayload: "GenericExtrinsicPayload",
      ExtrinsicSignature: "MultiSignature",
      ExtrinsicV4: "GenericExtrinsicV4",
      ExtrinsicPayloadV4: "GenericExtrinsicPayloadV4",
      ExtrinsicSignatureV4: "GenericExtrinsicSignatureV4",
      ExtrinsicUnknown: "GenericExtrinsicUnknown",
      ExtrinsicPayloadUnknown: "GenericExtrinsicPayloadUnknown",
      // eras
      Era: "ExtrinsicEra",
      ImmortalEra: "GenericImmortalEra",
      MortalEra: "GenericMortalEra",
      // signatures & signer
      AnySignature: "H512",
      MultiSignature: {
        _enum: {
          Ed25519: "Ed25519Signature",
          Sr25519: "Sr25519Signature",
          Ecdsa: "EcdsaSignature"
        }
      },
      Signature: "H512",
      SignerPayload: "GenericSignerPayload",
      EcdsaSignature: "[u8; 65]",
      Ed25519Signature: "H512",
      Sr25519Signature: "H512"
    }
  };
  const runtime$i = {
    FungiblesApi: [
      {
        methods: {
          query_account_balances: {
            description: "Returns the list of all `MultiAsset` that an `AccountId` has",
            params: [
              {
                name: "account",
                type: "AccountId"
              }
            ],
            type: "Result<Vec<XcmV3MultiAsset>, FungiblesAccessError>"
          }
        },
        version: 1
      }
    ]
  };
  const definitions$M = {
    rpc: {},
    runtime: runtime$i,
    types: {
      FungiblesAccessError: {
        _enum: ["AssetIdConversionFailed", "AmountToBalanceConversionFailed"]
      }
    }
  };
  const definitions$L = {
    rpc: {},
    types: {
      AssetOptions: {
        initalIssuance: "Compact<Balance>",
        permissions: "PermissionLatest"
      },
      Owner: {
        _enum: {
          None: "Null",
          Address: "AccountId"
        }
      },
      PermissionsV1: {
        update: "Owner",
        mint: "Owner",
        burn: "Owner"
      },
      PermissionVersions: {
        _enum: {
          V1: "PermissionsV1"
        }
      },
      PermissionLatest: "PermissionsV1"
    }
  };
  const definitions$K = {
    rpc: {},
    types: {
      ActiveGilt: {
        proportion: "Perquintill",
        amount: "Balance",
        who: "AccountId",
        expiry: "BlockNumber"
      },
      ActiveGiltsTotal: {
        frozen: "Balance",
        proportion: "Perquintill",
        index: "ActiveIndex",
        target: "Perquintill"
      },
      ActiveIndex: "u32",
      GiltBid: {
        amount: "Balance",
        who: "AccountId"
      }
    }
  };
  const rpc$b = {
    proveFinality: {
      description: "Prove finality for the given block number, returning the Justification for the last block in the set.",
      params: [
        {
          name: "blockNumber",
          type: "BlockNumber"
        }
      ],
      type: "Option<EncodedFinalityProofs>"
    },
    roundState: {
      description: "Returns the state of the current best round state as well as the ongoing background rounds",
      params: [],
      type: "ReportedRoundStates"
    },
    subscribeJustifications: {
      description: "Subscribes to grandpa justifications",
      params: [],
      pubsub: [
        "justifications",
        "subscribeJustifications",
        "unsubscribeJustifications"
      ],
      type: "JustificationNotification"
    }
  };
  const GRANDPA_V2_V3 = {
    generate_key_ownership_proof: {
      description: "Generates a proof of key ownership for the given authority in the given set.",
      params: [
        {
          name: "setId",
          type: "SetId"
        },
        {
          name: "authorityId",
          type: "AuthorityId"
        }
      ],
      type: "Option<OpaqueKeyOwnershipProof>"
    },
    grandpa_authorities: {
      description: "Get the current GRANDPA authorities and weights. This should not change except for when changes are scheduled and the corresponding delay has passed.",
      params: [],
      type: "AuthorityList"
    },
    submit_report_equivocation_unsigned_extrinsic: {
      description: "Submits an unsigned extrinsic to report an equivocation.",
      params: [
        {
          name: "equivocationProof",
          type: "GrandpaEquivocationProof"
        },
        {
          name: "keyOwnerProof",
          type: "OpaqueKeyOwnershipProof"
        }
      ],
      type: "Option<Null>"
    }
  };
  const runtime$h = {
    GrandpaApi: [
      {
        methods: {
          current_set_id: {
            description: "Get current GRANDPA authority set id.",
            params: [],
            type: "SetId"
          },
          ...GRANDPA_V2_V3
        },
        version: 3
      },
      {
        methods: GRANDPA_V2_V3,
        version: 2
      }
    ]
  };
  const definitions$J = {
    rpc: rpc$b,
    runtime: runtime$h,
    types: {
      AuthorityIndex: "u64",
      AuthorityList: "Vec<NextAuthority>",
      AuthoritySet: {
        currentAuthorities: "AuthorityList",
        setId: "u64",
        pendingStandardChanges: "ForkTreePendingChange",
        pendingForcedChanges: "Vec<PendingChange>",
        authoritySetChanges: "AuthoritySetChanges"
      },
      ForkTreePendingChange: {
        roots: "Vec<ForkTreePendingChangeNode>",
        bestFinalizedNumber: "Option<BlockNumber>"
      },
      ForkTreePendingChangeNode: {
        hash: "BlockHash",
        number: "BlockNumber",
        data: "PendingChange",
        children: "Vec<ForkTreePendingChangeNode>"
      },
      AuthoritySetChange: "(U64, BlockNumber)",
      AuthoritySetChanges: "Vec<AuthoritySetChange>",
      AuthorityWeight: "u64",
      DelayKind: {
        _enum: {
          Finalized: "Null",
          Best: "DelayKindBest"
        }
      },
      DelayKindBest: {
        medianLastFinalized: "BlockNumber"
      },
      EncodedFinalityProofs: "Bytes",
      GrandpaEquivocation: {
        _enum: {
          Prevote: "GrandpaEquivocationValue",
          Precommit: "GrandpaEquivocationValue"
        }
      },
      GrandpaEquivocationProof: {
        setId: "SetId",
        equivocation: "GrandpaEquivocation"
      },
      GrandpaEquivocationValue: {
        roundNumber: "u64",
        identity: "AuthorityId",
        first: "(GrandpaPrevote, AuthoritySignature)",
        second: "(GrandpaPrevote, AuthoritySignature)"
      },
      GrandpaPrevote: {
        targetHash: "Hash",
        targetNumber: "BlockNumber"
      },
      GrandpaCommit: {
        targetHash: "BlockHash",
        targetNumber: "BlockNumber",
        precommits: "Vec<GrandpaSignedPrecommit>"
      },
      GrandpaPrecommit: {
        targetHash: "BlockHash",
        targetNumber: "BlockNumber"
      },
      GrandpaSignedPrecommit: {
        precommit: "GrandpaPrecommit",
        signature: "AuthoritySignature",
        id: "AuthorityId"
      },
      GrandpaJustification: {
        round: "u64",
        commit: "GrandpaCommit",
        votesAncestries: "Vec<Header>"
      },
      JustificationNotification: "Bytes",
      KeyOwnerProof: "MembershipProof",
      NextAuthority: "(AuthorityId, AuthorityWeight)",
      PendingChange: {
        nextAuthorities: "AuthorityList",
        delay: "BlockNumber",
        canonHeight: "BlockNumber",
        canonHash: "BlockHash",
        delayKind: "DelayKind"
      },
      PendingPause: {
        scheduledAt: "BlockNumber",
        delay: "BlockNumber"
      },
      PendingResume: {
        scheduledAt: "BlockNumber",
        delay: "BlockNumber"
      },
      Precommits: {
        currentWeight: "u32",
        missing: "BTreeSet<AuthorityId>"
      },
      Prevotes: {
        currentWeight: "u32",
        missing: "BTreeSet<AuthorityId>"
      },
      ReportedRoundStates: {
        setId: "u32",
        best: "RoundState",
        background: "Vec<RoundState>"
      },
      RoundState: {
        round: "u32",
        totalWeight: "u32",
        thresholdWeight: "u32",
        prevotes: "Prevotes",
        precommits: "Precommits"
      },
      SetId: "u64",
      StoredPendingChange: {
        scheduledAt: "BlockNumber",
        delay: "BlockNumber",
        nextAuthorities: "AuthorityList"
      },
      StoredState: {
        _enum: {
          Live: "Null",
          PendingPause: "PendingPause",
          Paused: "Null",
          PendingResume: "PendingResume"
        }
      }
    }
  };
  const definitions$I = {
    rpc: {},
    types: {
      IdentityFields: {
        _set: {
          _bitLength: 64,
          // Mapped here to 32 bits, in Rust these are 64-bit values
          Display: 1,
          Legal: 2,
          Web: 4,
          Riot: 8,
          Email: 16,
          PgpFingerprint: 32,
          Image: 64,
          Twitter: 128
        }
      },
      IdentityInfoAdditional: "(Data, Data)",
      IdentityInfoTo198: {
        additional: "Vec<IdentityInfoAdditional>",
        display: "Data",
        legal: "Data",
        web: "Data",
        riot: "Data",
        email: "Data",
        pgpFingerprint: "Option<H160>",
        image: "Data"
      },
      IdentityInfo: {
        _fallback: "IdentityInfoTo198",
        additional: "Vec<IdentityInfoAdditional>",
        display: "Data",
        legal: "Data",
        web: "Data",
        riot: "Data",
        email: "Data",
        pgpFingerprint: "Option<H160>",
        image: "Data",
        twitter: "Data"
      },
      IdentityJudgement: {
        _enum: {
          Unknown: "Null",
          FeePaid: "Balance",
          Reasonable: "Null",
          KnownGood: "Null",
          OutOfDate: "Null",
          LowQuality: "Null",
          Erroneous: "Null"
        }
      },
      RegistrationJudgement: "(RegistrarIndex, IdentityJudgement)",
      RegistrationTo198: {
        judgements: "Vec<RegistrationJudgement>",
        deposit: "Balance",
        info: "IdentityInfoTo198"
      },
      Registration: {
        _fallback: "RegistrationTo198",
        judgements: "Vec<RegistrationJudgement>",
        deposit: "Balance",
        info: "IdentityInfo"
      },
      RegistrarIndex: "u32",
      RegistrarInfo: {
        account: "AccountId",
        fee: "Balance",
        fields: "IdentityFields"
      }
    }
  };
  const definitions$H = {
    rpc: {},
    types: {
      AuthIndex: "u32",
      AuthoritySignature: "Signature",
      Heartbeat: {
        blockNumber: "BlockNumber",
        networkState: "OpaqueNetworkState",
        sessionIndex: "SessionIndex",
        authorityIndex: "AuthIndex",
        validatorsLen: "u32"
      },
      HeartbeatTo244: {
        blockNumber: "BlockNumber",
        networkState: "OpaqueNetworkState",
        sessionIndex: "SessionIndex",
        authorityIndex: "AuthIndex"
      },
      OpaqueMultiaddr: "Opaque<Bytes>",
      OpaquePeerId: "Opaque<Bytes>",
      OpaqueNetworkState: {
        peerId: "OpaquePeerId",
        externalAddresses: "Vec<OpaqueMultiaddr>"
      }
    }
  };
  const definitions$G = {
    rpc: {},
    types: {
      CallIndex: "(u8, u8)",
      LotteryConfig: {
        price: "Balance",
        start: "BlockNumber",
        length: "BlockNumber",
        delay: "BlockNumber",
        repeat: "bool"
      }
    }
  };
  const rpc$a = {
    generateProof: {
      description: "Generate MMR proof for the given block numbers.",
      params: [
        {
          name: "blockNumbers",
          type: "Vec<u64>"
        },
        {
          isOptional: true,
          name: "bestKnownBlockNumber",
          type: "u64"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "MmrLeafBatchProof"
    },
    root: {
      description: "Get the MMR root hash for the current best block.",
      params: [
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "MmrHash"
    },
    verifyProof: {
      description: "Verify an MMR proof",
      params: [
        {
          name: "proof",
          type: "MmrLeafBatchProof"
        }
      ],
      type: "bool"
    },
    verifyProofStateless: {
      description: "Verify an MMR proof statelessly given an mmr_root",
      params: [
        {
          name: "root",
          type: "MmrHash"
        },
        {
          name: "proof",
          type: "MmrLeafBatchProof"
        }
      ],
      type: "bool"
    }
  };
  const MMR_V2 = {
    generate_proof: {
      description: "Generate MMR proof for the given block numbers.",
      params: [
        {
          name: "blockNumbers",
          type: "Vec<BlockNumber>"
        },
        {
          name: "bestKnownBlockNumber",
          type: "Option<BlockNumber>"
        }
      ],
      type: "Result<(Vec<MmrEncodableOpaqueLeaf>, MmrBatchProof), MmrError>"
    },
    root: {
      description: "Return the on-chain MMR root hash.",
      params: [],
      type: "Result<Hash, MmrError>"
    },
    verify_proof: {
      description: "Verify MMR proof against on-chain MMR.",
      params: [
        {
          name: "leaves",
          type: "Vec<MmrEncodableOpaqueLeaf>"
        },
        {
          name: "proof",
          type: "MmrBatchProof"
        }
      ],
      type: "Result<(), MmrError>"
    },
    verify_proof_stateless: {
      description: "Verify MMR proof against given root hash.",
      params: [
        {
          name: "root",
          type: "Hash"
        },
        {
          name: "leaves",
          type: "Vec<MmrEncodableOpaqueLeaf>"
        },
        {
          name: "proof",
          type: "MmrBatchProof"
        }
      ],
      type: "Result<(), MmrError>"
    }
  };
  const MMR_V1 = {
    generate_batch_proof: {
      description: "Generate MMR proof for a series of leaves under given indices.",
      params: [
        {
          name: "leafIndices",
          type: "Vec<MmrLeafIndex>"
        }
      ],
      type: "Result<(Vec<MmrEncodableOpaqueLeaf>, MmrBatchProof), MmrError>"
    },
    generate_proof: {
      description: "Generate MMR proof for a leaf under given index.",
      params: [
        {
          name: "leafIndex",
          type: "MmrLeafIndex"
        }
      ],
      type: "Result<(MmrEncodableOpaqueLeaf, MmrProof), MmrError>"
    },
    mmr_root: {
      description: "Return the on-chain MMR root hash.",
      params: [],
      type: "Result<Hash, MmrError>"
    },
    verify_batch_proof: {
      description: "Verify MMR proof against on-chain MMR for a batch of leaves.",
      params: [
        {
          name: "leaves",
          type: "Vec<MmrEncodableOpaqueLeaf>"
        },
        {
          name: "proof",
          type: "MmrBatchProof"
        }
      ],
      type: "Result<(), MmrError>"
    },
    verify_batch_proof_stateless: {
      description: "Verify MMR proof against given root hash or a batch of leaves.",
      params: [
        {
          name: "root",
          type: "Hash"
        },
        {
          name: "leaves",
          type: "Vec<MmrEncodableOpaqueLeaf>"
        },
        {
          name: "proof",
          type: "MmrBatchProof"
        }
      ],
      type: "Result<(), MmrError>"
    },
    verify_proof: {
      description: "Verify MMR proof against on-chain MMR.",
      params: [
        {
          name: "leaf",
          type: "MmrEncodableOpaqueLeaf"
        },
        {
          name: "proof",
          type: "MmrProof"
        }
      ],
      type: "Result<(), MmrError>"
    },
    verify_proof_stateless: {
      description: "Verify MMR proof against given root hash.",
      params: [
        {
          name: "root",
          type: "Hash"
        },
        {
          name: "leaf",
          type: "MmrEncodableOpaqueLeaf"
        },
        {
          name: "proof",
          type: "MmrProof"
        }
      ],
      type: "Result<(), MmrError>"
    }
  };
  const runtime$g = {
    MmrApi: [
      {
        methods: MMR_V2,
        version: 2
      },
      {
        methods: MMR_V1,
        version: 1
      }
    ]
  };
  const definitions$F = {
    rpc: rpc$a,
    runtime: runtime$g,
    types: {
      MmrBatchProof: {
        leafIndices: "Vec<MmrLeafIndex>",
        leafCount: "MmrNodeIndex",
        items: "Vec<Hash>"
      },
      MmrEncodableOpaqueLeaf: "Bytes",
      MmrError: {
        _enum: ["Push", "GetRoot", "Commit", "GenerateProof", "Verify", "LeafNotFound", " PalletNotIncluded", "InvalidLeafIndex"]
      },
      MmrHash: "Hash",
      MmrLeafBatchProof: {
        blockHash: "BlockHash",
        leaves: "Bytes",
        proof: "Bytes"
      },
      MmrLeafIndex: "u64",
      MmrLeafProof: {
        blockHash: "BlockHash",
        leaf: "Bytes",
        proof: "Bytes"
      },
      MmrNodeIndex: "u64",
      MmrProof: {
        leafIndex: "MmrLeafIndex",
        leafCount: "MmrNodeIndex",
        items: "Vec<Hash>"
      }
    }
  };
  const runtime$f = {
    NftsApi: [
      {
        methods: {
          attribute: {
            description: "An attribute",
            params: [
              {
                name: "collection",
                type: "NftCollectionId"
              },
              {
                name: "item",
                type: "NftItemId"
              },
              {
                name: "key",
                type: "Bytes"
              }
            ],
            type: "Option<Bytes>"
          },
          collection_attribute: {
            description: "A collection attribute",
            params: [
              {
                name: "collection",
                type: "NftCollectionId"
              },
              {
                name: "key",
                type: "Bytes"
              }
            ],
            type: "Option<Bytes>"
          },
          collection_owner: {
            description: "A collection owner",
            params: [
              {
                name: "collection",
                type: "NftCollectionId"
              }
            ],
            type: "Option<AccountId>"
          },
          custom_attribute: {
            description: "A custom attribute",
            params: [
              {
                name: "account",
                type: "AccountId"
              },
              {
                name: "collection",
                type: "NftCollectionId"
              },
              {
                name: "item",
                type: "NftItemId"
              },
              {
                name: "key",
                type: "Bytes"
              }
            ],
            type: "Option<Bytes>"
          },
          owner: {
            description: "Collection owner",
            params: [
              {
                name: "collection",
                type: "NftCollectionId"
              },
              {
                name: "item",
                type: "NftItemId"
              }
            ],
            type: "Option<AccountId>"
          },
          system_attribute: {
            description: "System attribute",
            params: [
              {
                name: "collection",
                type: "NftCollectionId"
              },
              {
                name: "item",
                type: "NftItemId"
              },
              {
                name: "key",
                type: "Bytes"
              }
            ],
            type: "Option<Bytes>"
          }
        },
        version: 1
      }
    ]
  };
  const definitions$E = {
    rpc: {},
    runtime: runtime$f,
    types: {
      NftCollectionId: "u32",
      NftItemId: "u32"
    }
  };
  const runtime$e = {
    NominationPoolsApi: [
      {
        methods: {
          balance_to_points: {
            description: "Returns the equivalent points of `new_funds` for a given pool.",
            params: [
              {
                name: "poolId",
                type: "NpPoolId"
              },
              {
                name: "newFunds",
                type: "Balance"
              }
            ],
            type: "Balance"
          },
          pending_rewards: {
            description: "Returns the pending rewards for the given member.",
            params: [
              {
                name: "member",
                type: "AccountId"
              }
            ],
            type: "Balance"
          },
          points_to_balance: {
            description: "Returns the equivalent balance of `points` for a given pool.",
            params: [
              {
                name: "poolId",
                type: "NpPoolId"
              },
              {
                name: "points",
                type: "Balance"
              }
            ],
            type: "Balance"
          }
        },
        version: 1
      }
    ]
  };
  const definitions$D = {
    rpc: {},
    runtime: runtime$e,
    types: {
      NpApiError: {
        _enum: ["MemberNotFound", "OverflowInPendingRewards"]
      },
      NpPoolId: "u32"
    }
  };
  const definitions$C = {
    rpc: {},
    types: {
      DeferredOffenceOf: "(Vec<OffenceDetails>, Vec<Perbill>, SessionIndex)",
      Kind: "[u8; 16]",
      OffenceDetails: {
        offender: "Offender",
        reporters: "Vec<Reporter>"
      },
      Offender: "IdentificationTuple",
      OpaqueTimeSlot: "Bytes",
      ReportIdOf: "Hash",
      Reporter: "AccountId"
    }
  };
  const runtime$d = {
    DifficultyApi: [
      {
        methods: {
          difficulty: {
            description: "Return the target difficulty of the next block.",
            params: [],
            // This is Difficulty in the original, however this is chain-specific
            type: "Raw"
          }
        },
        version: 1
      }
    ],
    TimestampApi: [
      {
        methods: {
          timestamp: {
            description: "API necessary for timestamp-based difficulty adjustment algorithms.",
            params: [],
            type: "Moment"
          }
        },
        version: 1
      }
    ]
  };
  const definitions$B = {
    rpc: {},
    runtime: runtime$d,
    types: {}
  };
  const definitions$A = {
    rpc: {},
    types: {
      ProxyDefinition: {
        delegate: "AccountId",
        proxyType: "ProxyType",
        delay: "BlockNumber"
      },
      ProxyType: {
        _enum: ["Any", "NonTransfer", "Governance", "Staking"]
      },
      ProxyAnnouncement: {
        real: "AccountId",
        callHash: "Hash",
        height: "BlockNumber"
      }
    }
  };
  const definitions$z = {
    rpc: {},
    types: {
      ActiveRecovery: {
        created: "BlockNumber",
        deposit: "Balance",
        friends: "Vec<AccountId>"
      },
      RecoveryConfig: {
        delayPeriod: "BlockNumber",
        deposit: "Balance",
        friends: "Vec<AccountId>",
        threshold: "u16"
      }
    }
  };
  const definitions$y = {
    rpc: {},
    types: {
      Period: "(BlockNumber, u32)",
      Priority: "u8",
      SchedulePeriod: "Period",
      SchedulePriority: "Priority",
      Scheduled: {
        maybeId: "Option<Bytes>",
        priority: "SchedulePriority",
        call: "Call",
        maybePeriodic: "Option<SchedulePeriod>",
        origin: "PalletsOrigin"
      },
      ScheduledTo254: {
        maybeId: "Option<Bytes>",
        priority: "SchedulePriority",
        call: "Call",
        maybePeriodic: "Option<SchedulePeriod>"
      },
      TaskAddress: "(BlockNumber, u32)"
    }
  };
  const runtime$c = {
    SessionKeys: [
      {
        methods: {
          decode_session_keys: {
            description: "Decode the given public session keys.",
            params: [
              {
                name: "encoded",
                type: "Bytes"
              }
            ],
            type: "Option<Vec<(Bytes, KeyTypeId)>>"
          },
          generate_session_keys: {
            description: "Generate a set of session keys with optionally using the given seed.",
            params: [
              {
                name: "seed",
                type: "Option<Bytes>"
              }
            ],
            type: "Bytes"
          }
        },
        version: 1
      }
    ]
  };
  const keyTypes = {
    // key for beefy
    BeefyKey: "[u8; 33]",
    // default to Substrate master defaults, 4 keys (polkadot master, 5 keys)
    Keys: "SessionKeys4",
    SessionKeys1: "(AccountId)",
    SessionKeys2: "(AccountId, AccountId)",
    SessionKeys3: "(AccountId, AccountId, AccountId)",
    SessionKeys4: "(AccountId, AccountId, AccountId, AccountId)",
    SessionKeys5: "(AccountId, AccountId, AccountId, AccountId, AccountId)",
    SessionKeys6: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
    SessionKeys6B: "(AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
    SessionKeys7: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
    SessionKeys7B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
    SessionKeys8: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
    SessionKeys8B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
    SessionKeys9: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
    SessionKeys9B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
    SessionKeys10: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
    SessionKeys10B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)"
  };
  const definitions$x = {
    rpc: {},
    runtime: runtime$c,
    types: {
      ...keyTypes,
      FullIdentification: "Exposure",
      IdentificationTuple: "(ValidatorId, FullIdentification)",
      MembershipProof: {
        session: "SessionIndex",
        trieNodes: "Vec<Bytes>",
        validatorCount: "ValidatorCount"
      },
      SessionIndex: "u32",
      ValidatorCount: "u32"
    }
  };
  const definitions$w = {
    rpc: {},
    types: {
      Bid: {
        who: "AccountId",
        kind: "BidKind",
        value: "Balance"
      },
      BidKind: {
        _enum: {
          Deposit: "Balance",
          Vouch: "(AccountId, Balance)"
        }
      },
      // a society-specific Judgement (not the same as identity Judgement)
      SocietyJudgement: {
        _enum: ["Rebid", "Reject", "Approve"]
      },
      // a society-specific Vote
      SocietyVote: {
        _enum: ["Skeptic", "Reject", "Approve"]
      },
      StrikeCount: "u32",
      VouchingStatus: {
        _enum: ["Vouching", "Banned"]
      }
    }
  };
  const runtime$b = {
    StakingApi: [
      {
        methods: {
          nominations_quota: {
            description: "Returns the nominations quota for a nominator with a given balance.",
            params: [
              {
                name: "balance",
                type: "Balance"
              }
            ],
            type: "u32"
          }
        },
        version: 1
      }
    ]
  };
  const deprecated = {
    Points: "u32",
    EraPoints: {
      total: "Points",
      individual: "Vec<Points>"
    }
  };
  const phragmen = {
    CompactAssignments: "CompactAssignmentsWith16",
    CompactAssignmentsWith16: {
      votes1: "Vec<(NominatorIndexCompact, ValidatorIndexCompact)>",
      votes2: "Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>",
      votes3: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>",
      votes4: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>",
      votes5: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>",
      votes6: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>",
      votes7: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>",
      votes8: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>",
      votes9: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>",
      votes10: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>",
      votes11: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>",
      votes12: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>",
      votes13: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>",
      votes14: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>",
      votes15: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>",
      votes16: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>"
    },
    CompactAssignmentsWith24: {
      votes1: "Vec<(NominatorIndexCompact, ValidatorIndexCompact)>",
      votes2: "Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>",
      votes3: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>",
      votes4: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>",
      votes5: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>",
      votes6: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>",
      votes7: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>",
      votes8: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>",
      votes9: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>",
      votes10: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>",
      votes11: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>",
      votes12: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>",
      votes13: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>",
      votes14: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>",
      votes15: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>",
      votes16: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>",
      votes17: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 16], ValidatorIndexCompact)>",
      votes18: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 17], ValidatorIndexCompact)>",
      votes19: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 18], ValidatorIndexCompact)>",
      votes20: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 19], ValidatorIndexCompact)>",
      votes21: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 20], ValidatorIndexCompact)>",
      votes22: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 21], ValidatorIndexCompact)>",
      votes23: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 22], ValidatorIndexCompact)>",
      votes24: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 23], ValidatorIndexCompact)>"
    },
    CompactAssignmentsTo265: "CompactAssignmentsWith16",
    CompactAssignmentsTo257: {
      votes1: "Vec<(NominatorIndex, [CompactScore; 0], ValidatorIndex)>",
      votes2: "Vec<(NominatorIndex, [CompactScore; 1], ValidatorIndex)>",
      votes3: "Vec<(NominatorIndex, [CompactScore; 2], ValidatorIndex)>",
      votes4: "Vec<(NominatorIndex, [CompactScore; 3], ValidatorIndex)>",
      votes5: "Vec<(NominatorIndex, [CompactScore; 4], ValidatorIndex)>",
      votes6: "Vec<(NominatorIndex, [CompactScore; 5], ValidatorIndex)>",
      votes7: "Vec<(NominatorIndex, [CompactScore; 6], ValidatorIndex)>",
      votes8: "Vec<(NominatorIndex, [CompactScore; 7], ValidatorIndex)>",
      votes9: "Vec<(NominatorIndex, [CompactScore; 8], ValidatorIndex)>",
      votes10: "Vec<(NominatorIndex, [CompactScore; 9], ValidatorIndex)>",
      votes11: "Vec<(NominatorIndex, [CompactScore; 10], ValidatorIndex)>",
      votes12: "Vec<(NominatorIndex, [CompactScore; 11], ValidatorIndex)>",
      votes13: "Vec<(NominatorIndex, [CompactScore; 12], ValidatorIndex)>",
      votes14: "Vec<(NominatorIndex, [CompactScore; 13], ValidatorIndex)>",
      votes15: "Vec<(NominatorIndex, [CompactScore; 14], ValidatorIndex)>",
      votes16: "Vec<(NominatorIndex, [CompactScore; 15], ValidatorIndex)>"
    },
    CompactScore: "(ValidatorIndex, OffchainAccuracy)",
    CompactScoreCompact: "(ValidatorIndexCompact, OffchainAccuracyCompact)",
    ElectionCompute: {
      // in previous versions the last entry was "AuthorityId"
      // (since no data attached, and it is via SCALE can rename)
      _enum: ["OnChain", "Signed", "Unsigned"]
    },
    ElectionPhase: {
      _enum: {
        Off: null,
        Signed: null,
        Unsigned: "(bool, BlockNumber)",
        Emergency: null
      }
    },
    ElectionResult: {
      compute: "ElectionCompute",
      slotStake: "Balance",
      electedStashes: "Vec<AccountId>",
      exposures: "Vec<(AccountId, Exposure)>"
    },
    ElectionScore: "[u128; 3]",
    ElectionSize: {
      validators: "Compact<ValidatorIndex>",
      nominators: "Compact<NominatorIndex>"
    },
    ElectionStatus: {
      _enum: {
        Close: "Null",
        Open: "BlockNumber"
      }
    },
    ExtendedBalance: "u128",
    RawSolution: "RawSolutionWith16",
    RawSolutionWith16: {
      compact: "CompactAssignmentsWith16",
      score: "ElectionScore",
      round: "u32"
    },
    RawSolutionWith24: {
      compact: "CompactAssignmentsWith24",
      score: "ElectionScore",
      round: "u32"
    },
    RawSolutionTo265: "RawSolutionWith16",
    ReadySolution: {
      supports: "SolutionSupports",
      score: "ElectionScore",
      compute: "ElectionCompute"
    },
    RoundSnapshot: {
      voters: "Vec<(AccountId, VoteWeight, Vec<AccountId>)>",
      targets: "Vec<AccountId>"
    },
    SeatHolder: {
      who: "AccountId",
      stake: "Balance",
      deposit: "Balance"
    },
    SignedSubmission: {
      _fallback: "SignedSubmissionTo276",
      who: "AccountId",
      deposit: "Balance",
      solution: "RawSolution",
      reward: "Balance"
    },
    SignedSubmissionTo276: {
      who: "AccountId",
      deposit: "Balance",
      solution: "RawSolution"
    },
    SignedSubmissionOf: "SignedSubmission",
    SolutionOrSnapshotSize: {
      voters: "Compact<u32>",
      targets: "Compact<u32>"
    },
    SolutionSupport: {
      total: "ExtendedBalance",
      voters: "Vec<(AccountId, ExtendedBalance)>"
    },
    SolutionSupports: "Vec<(AccountId, SolutionSupport)>",
    Supports: "SolutionSupports",
    SubmissionIndicesOf: "BTreeMap<ElectionScore, u32>",
    Voter: {
      votes: "Vec<AccountId>",
      stake: "Balance",
      deposit: "Balance"
    },
    VoteWeight: "u64"
  };
  const definitions$v = {
    rpc: {},
    runtime: runtime$b,
    types: {
      ...deprecated,
      ...phragmen,
      ActiveEraInfo: {
        index: "EraIndex",
        start: "Option<Moment>"
      },
      EraIndex: "u32",
      EraRewardPoints: {
        total: "RewardPoint",
        individual: "BTreeMap<AccountId, RewardPoint>"
      },
      EraRewards: {
        total: "u32",
        rewards: "Vec<u32>"
      },
      Exposure: {
        total: "Compact<Balance>",
        own: "Compact<Balance>",
        others: "Vec<IndividualExposure>"
      },
      Forcing: {
        _enum: [
          "NotForcing",
          "ForceNew",
          "ForceNone",
          "ForceAlways"
        ]
      },
      IndividualExposure: {
        who: "AccountId",
        value: "Compact<Balance>"
      },
      KeyType: "AccountId",
      MomentOf: "Moment",
      Nominations: {
        targets: "Vec<AccountId>",
        submittedIn: "EraIndex",
        suppressed: "bool"
      },
      NominatorIndex: "u32",
      NominatorIndexCompact: "Compact<NominatorIndex>",
      OffchainAccuracy: "PerU16",
      OffchainAccuracyCompact: "Compact<OffchainAccuracy>",
      PhragmenScore: "[u128; 3]",
      Points: "u32",
      RewardDestination: {
        _enum: {
          Staked: "Null",
          Stash: "Null",
          Controller: "Null",
          Account: "AccountId",
          None: "Null"
        }
      },
      RewardPoint: "u32",
      SlashJournalEntry: {
        who: "AccountId",
        amount: "Balance",
        ownSlash: "Balance"
      },
      SlashingSpansTo204: {
        spanIndex: "SpanIndex",
        lastStart: "EraIndex",
        prior: "Vec<EraIndex>"
      },
      SlashingSpans: {
        spanIndex: "SpanIndex",
        lastStart: "EraIndex",
        lastNonzeroSlash: "EraIndex",
        prior: "Vec<EraIndex>"
      },
      SpanIndex: "u32",
      SpanRecord: {
        slashed: "Balance",
        paidOut: "Balance"
      },
      StakingLedgerTo223: {
        stash: "AccountId",
        total: "Compact<Balance>",
        active: "Compact<Balance>",
        unlocking: "Vec<UnlockChunk>"
      },
      StakingLedgerTo240: {
        _fallback: "StakingLedgerTo223",
        stash: "AccountId",
        total: "Compact<Balance>",
        active: "Compact<Balance>",
        unlocking: "Vec<UnlockChunk>",
        lastReward: "Option<EraIndex>"
      },
      StakingLedger: {
        stash: "AccountId",
        total: "Compact<Balance>",
        active: "Compact<Balance>",
        unlocking: "Vec<UnlockChunk>",
        claimedRewards: "Vec<EraIndex>"
      },
      UnappliedSlashOther: "(AccountId, Balance)",
      UnappliedSlash: {
        validator: "AccountId",
        own: "Balance",
        others: "Vec<UnappliedSlashOther>",
        reporters: "Vec<AccountId>",
        payout: "Balance"
      },
      UnlockChunk: {
        value: "Compact<Balance>",
        era: "Compact<BlockNumber>"
      },
      ValidatorIndex: "u16",
      ValidatorIndexCompact: "Compact<ValidatorIndex>",
      ValidatorPrefs: "ValidatorPrefsWithBlocked",
      ValidatorPrefsWithCommission: {
        commission: "Compact<Perbill>"
      },
      ValidatorPrefsWithBlocked: {
        commission: "Compact<Perbill>",
        blocked: "bool"
      },
      ValidatorPrefsTo196: {
        validatorPayment: "Compact<Balance>"
      },
      ValidatorPrefsTo145: {
        unstakeThreshold: "Compact<u32>",
        validatorPayment: "Compact<Balance>"
      }
    }
  };
  const definitions$u = {
    rpc: {},
    types: {
      WeightToFeeCoefficient: {
        coeffInteger: "Balance",
        coeffFrac: "Perbill",
        negative: "bool",
        degree: "u8"
      }
    }
  };
  const rpc$9 = {
    genSyncSpec: {
      description: "Returns the json-serialized chainspec running the node, with a sync state.",
      endpoint: "sync_state_genSyncSpec",
      params: [
        {
          name: "raw",
          type: "bool"
        }
      ],
      type: "Json"
    }
  };
  const definitions$t = {
    rpc: rpc$9,
    types: {}
  };
  const rpc$8 = {
    accountNextIndex: {
      alias: ["account_nextIndex"],
      description: "Retrieves the next accountIndex as available on the node",
      params: [
        {
          name: "accountId",
          type: "AccountId"
        }
      ],
      type: "Index"
    },
    addLogFilter: {
      description: "Adds the supplied directives to the current log filter",
      isUnsafe: true,
      params: [
        {
          name: "directives",
          type: "Text"
        }
      ],
      type: "Null"
    },
    addReservedPeer: {
      description: "Adds a reserved peer",
      isUnsafe: true,
      params: [
        {
          name: "peer",
          type: "Text"
        }
      ],
      type: "Text"
    },
    chain: {
      description: "Retrieves the chain",
      params: [],
      type: "Text"
    },
    chainType: {
      description: "Retrieves the chain type",
      params: [],
      type: "ChainType"
    },
    dryRun: {
      alias: ["system_dryRunAt"],
      description: "Dry run an extrinsic at a given block",
      isUnsafe: true,
      params: [
        {
          name: "extrinsic",
          type: "Bytes"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "ApplyExtrinsicResult"
    },
    health: {
      description: "Return health status of the node",
      noErrorLog: true,
      params: [],
      type: "Health"
    },
    localListenAddresses: {
      description: "The addresses include a trailing /p2p/ with the local PeerId, and are thus suitable to be passed to addReservedPeer or as a bootnode address for example",
      params: [],
      type: "Vec<Text>"
    },
    localPeerId: {
      description: "Returns the base58-encoded PeerId of the node",
      params: [],
      type: "Text"
    },
    name: {
      description: "Retrieves the node name",
      params: [],
      type: "Text"
    },
    networkState: {
      alias: ["system_unstable_networkState"],
      description: "Returns current state of the network",
      isUnsafe: true,
      params: [],
      type: "NetworkState"
    },
    nodeRoles: {
      description: "Returns the roles the node is running as",
      params: [],
      type: "Vec<NodeRole>"
    },
    peers: {
      description: "Returns the currently connected peers",
      isUnsafe: true,
      params: [],
      type: "Vec<PeerInfo>"
    },
    properties: {
      description: "Get a custom set of properties as a JSON object, defined in the chain spec",
      params: [],
      type: "ChainProperties"
    },
    removeReservedPeer: {
      description: "Remove a reserved peer",
      isUnsafe: true,
      params: [
        {
          name: "peerId",
          type: "Text"
        }
      ],
      type: "Text"
    },
    reservedPeers: {
      description: "Returns the list of reserved peers",
      params: [],
      type: "Vec<Text>"
    },
    resetLogFilter: {
      description: "Resets the log filter to Substrate defaults",
      isUnsafe: true,
      params: [],
      type: "Null"
    },
    syncState: {
      description: "Returns the state of the syncing of the node",
      params: [],
      type: "SyncState"
    },
    version: {
      description: "Retrieves the version of the node",
      params: [],
      type: "Text"
    }
  };
  const runtime$a = {
    AccountNonceApi: [
      {
        methods: {
          account_nonce: {
            description: "The API to query account nonce (aka transaction index)",
            params: [
              {
                name: "accountId",
                type: "AccountId"
              }
            ],
            type: "Index"
          }
        },
        version: 1
      }
    ]
  };
  const definitions$s = {
    rpc: rpc$8,
    runtime: runtime$a,
    types: {
      AccountInfo: "AccountInfoWithTripleRefCount",
      AccountInfoWithRefCountU8: {
        nonce: "Index",
        refcount: "u8",
        data: "AccountData"
      },
      AccountInfoWithRefCount: {
        _fallback: "AccountInfoWithRefCountU8",
        nonce: "Index",
        refcount: "RefCount",
        data: "AccountData"
      },
      AccountInfoWithDualRefCount: {
        _fallback: "AccountInfoWithRefCount",
        nonce: "Index",
        consumers: "RefCount",
        providers: "RefCount",
        data: "AccountData"
      },
      // original naming
      AccountInfoWithProviders: "AccountInfoWithDualRefCount",
      AccountInfoWithTripleRefCount: {
        _fallback: "AccountInfoWithDualRefCount",
        nonce: "Index",
        consumers: "RefCount",
        providers: "RefCount",
        sufficients: "RefCount",
        data: "AccountData"
      },
      ApplyExtrinsicResult: "Result<DispatchOutcome, TransactionValidityError>",
      ApplyExtrinsicResultPre6: "Result<DispatchOutcomePre6, TransactionValidityError>",
      ArithmeticError: {
        _enum: [
          "Underflow",
          "Overflow",
          "DivisionByZero"
        ]
      },
      BlockLength: {
        max: "PerDispatchClassU32"
      },
      BlockWeights: {
        baseBlock: "Weight",
        maxBlock: "Weight",
        perClass: "PerDispatchClassWeightsPerClass"
      },
      ChainProperties: "GenericChainProperties",
      ChainType: {
        _enum: {
          Development: "Null",
          Local: "Null",
          Live: "Null",
          Custom: "Text"
        }
      },
      ConsumedWeight: "PerDispatchClassWeight",
      DigestOf: "Digest",
      DispatchClass: {
        _enum: ["Normal", "Operational", "Mandatory"]
      },
      DispatchError: {
        _enum: {
          Other: "Null",
          CannotLookup: "Null",
          BadOrigin: "Null",
          Module: "DispatchErrorModule",
          ConsumerRemaining: "Null",
          NoProviders: "Null",
          TooManyConsumers: "Null",
          Token: "TokenError",
          Arithmetic: "ArithmeticError",
          Transactional: "TransactionalError",
          Exhausted: "Null",
          Corruption: "Null",
          Unavailable: "Null"
        }
      },
      DispatchErrorPre6: {
        _enum: {
          Other: "Null",
          CannotLookup: "Null",
          BadOrigin: "Null",
          Module: "DispatchErrorModulePre6",
          ConsumerRemaining: "Null",
          NoProviders: "Null",
          TooManyConsumers: "Null",
          Token: "TokenError",
          Arithmetic: "ArithmeticError",
          Transactional: "TransactionalError"
        }
      },
      DispatchErrorPre6First: {
        // The enum was modified mid-flight, affecting asset chains -
        // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
        _enum: {
          Other: "Null",
          CannotLookup: "Null",
          BadOrigin: "Null",
          Module: "DispatchErrorModulePre6",
          ConsumerRemaining: "Null",
          NoProviders: "Null",
          Token: "TokenError",
          Arithmetic: "ArithmeticError",
          Transactional: "TransactionalError"
        }
      },
      DispatchErrorModuleU8: {
        index: "u8",
        error: "u8"
      },
      DispatchErrorModuleU8a: {
        index: "u8",
        error: "[u8; 4]"
      },
      DispatchErrorModule: "DispatchErrorModuleU8a",
      DispatchErrorModulePre6: "DispatchErrorModuleU8",
      DispatchErrorTo198: {
        module: "Option<u8>",
        error: "u8"
      },
      DispatchInfo: {
        weight: "Weight",
        class: "DispatchClass",
        paysFee: "Pays"
      },
      DispatchInfoTo190: {
        weight: "Weight",
        class: "DispatchClass"
      },
      DispatchInfoTo244: {
        weight: "Weight",
        class: "DispatchClass",
        paysFee: "bool"
      },
      DispatchOutcome: "Result<(), DispatchError>",
      DispatchOutcomePre6: "Result<(), DispatchErrorPre6>",
      DispatchResult: "Result<(), DispatchError>",
      DispatchResultOf: "DispatchResult",
      DispatchResultTo198: "Result<(), Text>",
      Event: "GenericEvent",
      EventId: "[u8; 2]",
      EventIndex: "u32",
      EventRecord: {
        phase: "Phase",
        event: "Event",
        topics: "Vec<Hash>"
      },
      Health: {
        peers: "u64",
        isSyncing: "bool",
        shouldHavePeers: "bool"
      },
      InvalidTransaction: {
        _enum: {
          Call: "Null",
          Payment: "Null",
          Future: "Null",
          Stale: "Null",
          BadProof: "Null",
          AncientBirthBlock: "Null",
          ExhaustsResources: "Null",
          Custom: "u8",
          BadMandatory: "Null",
          MandatoryDispatch: "Null",
          BadSigner: "Null"
        }
      },
      Key: "Bytes",
      LastRuntimeUpgradeInfo: {
        specVersion: "Compact<u32>",
        specName: "Text"
      },
      NetworkState: {
        peerId: "Text",
        listenedAddresses: "Vec<Text>",
        externalAddresses: "Vec<Text>",
        connectedPeers: "HashMap<Text, Peer>",
        notConnectedPeers: "HashMap<Text, NotConnectedPeer>",
        averageDownloadPerSec: "u64",
        averageUploadPerSec: "u64",
        peerset: "NetworkStatePeerset"
      },
      NetworkStatePeerset: {
        messageQueue: "u64",
        nodes: "HashMap<Text, NetworkStatePeersetInfo>"
      },
      NetworkStatePeersetInfo: {
        connected: "bool",
        reputation: "i32"
      },
      NodeRole: {
        _enum: {
          Full: "Null",
          LightClient: "Null",
          Authority: "Null",
          UnknownRole: "u8"
        }
      },
      NotConnectedPeer: {
        knownAddresses: "Vec<Text>",
        latestPingTime: "Option<PeerPing>",
        versionString: "Option<Text>"
      },
      Peer: {
        enabled: "bool",
        endpoint: "PeerEndpoint",
        knownAddresses: "Vec<Text>",
        latestPingTime: "PeerPing",
        open: "bool",
        versionString: "Text"
      },
      PeerEndpoint: {
        listening: "PeerEndpointAddr"
      },
      PeerEndpointAddr: {
        _alias: {
          localAddr: "local_addr",
          sendBackAddr: "send_back_addr"
        },
        localAddr: "Text",
        sendBackAddr: "Text"
      },
      PeerPing: {
        nanos: "u64",
        secs: "u64"
      },
      PeerInfo: {
        peerId: "Text",
        roles: "Text",
        protocolVersion: "u32",
        bestHash: "Hash",
        bestNumber: "BlockNumber"
      },
      PerDispatchClassU32: {
        normal: "u32",
        operational: "u32",
        mandatory: "u32"
      },
      PerDispatchClassWeight: {
        normal: "Weight",
        operational: "Weight",
        mandatory: "Weight"
      },
      PerDispatchClassWeightsPerClass: {
        normal: "WeightPerClass",
        operational: "WeightPerClass",
        mandatory: "WeightPerClass"
      },
      Phase: {
        _enum: {
          ApplyExtrinsic: "u32",
          Finalization: "Null",
          Initialization: "Null"
        }
      },
      RawOrigin: {
        _enum: {
          Root: "Null",
          Signed: "AccountId",
          None: "Null"
        }
      },
      RefCount: "u32",
      RefCountTo259: "u8",
      SyncState: {
        startingBlock: "BlockNumber",
        currentBlock: "BlockNumber",
        highestBlock: "Option<BlockNumber>"
      },
      SystemOrigin: "RawOrigin",
      TokenError: {
        _enum: [
          "NoFunds",
          "WouldDie",
          "BelowMinimum",
          "CannotCreate",
          "UnknownAsset",
          "Frozen",
          "Unsupported",
          // these are dropped, but still in older versions
          // (if this adjusts, will need to take a re-look)
          "Underflow",
          "Overflow"
        ]
      },
      TransactionValidityError: {
        _enum: {
          Invalid: "InvalidTransaction",
          Unknown: "UnknownTransaction"
        }
      },
      TransactionalError: {
        _enum: [
          "LimitReached",
          "NoLayer"
        ]
      },
      UnknownTransaction: {
        _enum: {
          CannotLookup: "Null",
          NoUnsignedValidator: "Null",
          Custom: "u8"
        }
      },
      WeightPerClass: {
        baseExtrinsic: "Weight",
        maxExtrinsic: "Option<Weight>",
        maxTotal: "Option<Weight>",
        reserved: "Option<Weight>"
      }
    }
  };
  const definitions$r = {
    rpc: {},
    types: {
      Bounty: {
        proposer: "AccountId",
        value: "Balance",
        fee: "Balance",
        curatorDeposit: "Balance",
        bond: "Balance",
        status: "BountyStatus"
      },
      BountyIndex: "u32",
      BountyStatus: {
        _enum: {
          Proposed: "Null",
          Approved: "Null",
          Funded: "Null",
          CuratorProposed: "BountyStatusCuratorProposed",
          Active: "BountyStatusActive",
          PendingPayout: "BountyStatusPendingPayout"
        }
      },
      BountyStatusActive: {
        curator: "AccountId",
        updateDue: "BlockNumber"
      },
      BountyStatusCuratorProposed: {
        curator: "AccountId"
      },
      BountyStatusPendingPayout: {
        curator: "AccountId",
        beneficiary: "AccountId",
        unlockAt: "BlockNumber"
      },
      OpenTip: {
        reason: "Hash",
        who: "AccountId",
        finder: "AccountId",
        deposit: "Balance",
        closes: "Option<BlockNumber>",
        tips: "Vec<OpenTipTip>",
        findersFee: "bool"
      },
      OpenTipTo225: {
        reason: "Hash",
        who: "AccountId",
        finder: "Option<OpenTipFinderTo225>",
        closes: "Option<BlockNumber>",
        tips: "Vec<OpenTipTip>"
      },
      OpenTipFinderTo225: "(AccountId, Balance)",
      OpenTipTip: "(AccountId, Balance)",
      TreasuryProposal: {
        proposer: "AccountId",
        value: "Balance",
        beneficiary: "AccountId",
        bond: "Balance"
      }
    }
  };
  const definitions$q = {
    rpc: {},
    types: {
      Multiplier: "Fixed128"
    }
  };
  const runtime$9 = {
    TaggedTransactionQueue: [
      {
        methods: {
          validate_transaction: {
            description: "Validate the transaction.",
            params: [
              {
                name: "source",
                type: "TransactionSource"
              },
              {
                name: "tx",
                type: "Extrinsic"
              },
              {
                name: "blockHash",
                type: "BlockHash"
              }
            ],
            type: "TransactionValidity"
          }
        },
        version: 3
      },
      {
        methods: {
          validate_transaction: {
            description: "Validate the transaction.",
            params: [
              {
                name: "source",
                type: "TransactionSource"
              },
              {
                name: "tx",
                type: "Extrinsic"
              }
            ],
            type: "TransactionValidity"
          }
        },
        version: 2
      },
      {
        methods: {
          validate_transaction: {
            description: "Validate the transaction.",
            params: [
              {
                name: "tx",
                type: "Extrinsic"
              }
            ],
            type: "TransactionValidity"
          }
        },
        version: 1
      }
    ]
  };
  const definitions$p = {
    rpc: {},
    runtime: runtime$9,
    types: {
      TransactionSource: {
        _enum: ["InBlock", "Local", "External"]
      },
      TransactionValidity: "Result<ValidTransaction, TransactionValidityError>",
      ValidTransaction: {
        priority: "TransactionPriority",
        requires: "Vec<TransactionTag>",
        provides: "Vec<TransactionTag>",
        longevity: "TransactionLongevity",
        propagate: "bool"
      }
    }
  };
  const definitions$o = {
    rpc: {},
    types: {
      ClassId: "u32",
      InstanceId: "u32",
      DepositBalance: "Balance",
      DepositBalanceOf: "Balance",
      ClassDetails: {
        owner: "AccountId",
        issuer: "AccountId",
        admin: "AccountId",
        freezer: "AccountId",
        totalDeposit: "DepositBalance",
        freeHolding: "bool",
        instances: "u32",
        instanceMetadatas: "u32",
        attributes: "u32",
        isFrozen: "bool"
      },
      DestroyWitness: {
        instances: "Compact<u32>",
        instanceMetadatas: "Compact<u32>",
        attributes: "Compact<u32>"
      },
      InstanceDetails: {
        owner: "AccountId",
        approved: "Option<AccountId>",
        isFrozen: "bool",
        deposit: "DepositBalance"
      },
      ClassMetadata: {
        deposit: "DepositBalance",
        data: "Vec<u8>",
        isFrozen: "bool"
      },
      InstanceMetadata: {
        deposit: "DepositBalance",
        data: "Vec<u8>",
        isFrozen: "bool"
      }
    }
  };
  const definitions$n = {
    rpc: {},
    types: {
      Multisig: {
        when: "Timepoint",
        deposit: "Balance",
        depositor: "AccountId",
        approvals: "Vec<AccountId>"
      },
      Timepoint: {
        height: "BlockNumber",
        index: "u32"
      }
    }
  };
  const definitions$m = {
    rpc: {},
    types: {
      VestingInfo: {
        locked: "Balance",
        perBlock: "Balance",
        startingBlock: "BlockNumber"
      }
    }
  };
  const definitions$l = {
    rpc: {},
    types: {
      BlockAttestations: {
        receipt: "CandidateReceipt",
        valid: "Vec<AccountId>",
        invalid: "Vec<AccountId>"
      },
      IncludedBlocks: {
        actualNumber: "BlockNumber",
        session: "SessionIndex",
        randomSeed: "H256",
        activeParachains: "Vec<ParaId>",
        paraBlocks: "Vec<Hash>"
      },
      MoreAttestations: {}
    }
  };
  const definitions$k = {
    rpc: {},
    types: {
      BridgedBlockHash: "H256",
      BridgedBlockNumber: "BlockNumber",
      BridgedHeader: "Header",
      BridgeMessageId: "(LaneId, MessageNonce)",
      CallOrigin: {
        _enum: {
          SourceRoot: "Null",
          TargetAccount: "(AccountId, MultiSigner, MultiSignature)",
          SourceAccount: "AccountId"
        }
      },
      ChainId: "[u8; 4]",
      DeliveredMessages: {
        begin: "MessageNonce",
        end: "MessageNonce",
        // pub type DispatchResultsBitVec = BitVec<Msb0, u8>;
        dispatchResults: "BitVec"
      },
      DispatchFeePayment: {
        _enum: ["AtSourceChain", "AtTargetChain"]
      },
      InboundLaneData: {
        relayers: "Vec<UnrewardedRelayer>",
        lastConfirmedNonce: "MessageNonce"
      },
      InboundRelayer: "AccountId",
      InitializationData: {
        header: "Header",
        authorityList: "AuthorityList",
        setId: "SetId",
        isHalted: "bool"
      },
      LaneId: "[u8; 4]",
      MessageData: {
        payload: "Bytes",
        fee: "Balance"
      },
      MessagesDeliveryProofOf: {
        bridgedHeaderHash: "BlockHash",
        storageProof: "Vec<Bytes>",
        lane: "LaneId"
      },
      MessageKey: {
        laneId: "LaneId",
        nonce: "MessageNonce"
      },
      MessageNonce: "u64",
      MessagesProofOf: {
        bridgedHeaderHash: "BridgedBlockHash",
        storageProof: "Vec<Bytes>",
        lane: "LaneId",
        noncesStart: "MessageNonce",
        noncesEnd: "MessageNonce"
      },
      OperatingMode: {
        _enum: ["Normal", "RejectingOutboundMessages", "Halted"]
      },
      OutboundLaneData: {
        oldestUnprunedNonce: "MessageNonce",
        latestReceivedNonce: "MessageNonce",
        latestGeneratedNonce: "MessageNonce"
      },
      OutboundMessageFee: "Balance",
      OutboundPayload: {
        specVersion: "u32",
        weight: "Weight",
        origin: "CallOrigin",
        dispatchFeePayment: "DispatchFeePayment",
        call: "Bytes"
      },
      Parameter: "Null",
      RelayerId: "AccountId",
      UnrewardedRelayer: {
        relayer: "RelayerId",
        messages: "DeliveredMessages"
      },
      UnrewardedRelayersState: {
        unrewardedRelayer_Entries: "MessageNonce",
        messagesInOldestEntry: "MessageNonce",
        totalMessages: "MessageNonce"
      }
    }
  };
  const definitions$j = {
    rpc: {},
    types: {
      StatementKind: {
        _enum: ["Regular", "Saft"]
      }
    }
  };
  const definitions$i = {
    rpc: {},
    types: {
      FundIndex: "u32",
      LastContribution: {
        _enum: {
          Never: "Null",
          PreEnding: "u32",
          Ending: "BlockNumber"
        }
      },
      FundInfo: {
        depositor: "AccountId",
        verifier: "Option<MultiSigner>",
        deposit: "Balance",
        raised: "Balance",
        end: "BlockNumber",
        cap: "Balance",
        lastContribution: "LastContribution",
        firstPeriod: "LeasePeriod",
        lastPeriod: "LeasePeriod",
        trieIndex: "TrieIndex"
      },
      TrieIndex: "u32"
    }
  };
  const runtime$8 = {
    CollectCollationInfo: [
      {
        methods: {
          collect_collation_info: {
            description: "Collect information about a collation.",
            params: [
              {
                name: "header",
                type: "Header"
              }
            ],
            type: "CollationInfo"
          }
        },
        version: 2
      },
      {
        methods: {
          collect_collation_info: {
            description: "Collect information about a collation.",
            params: [],
            type: "CollationInfoV1"
          }
        },
        version: 1
      }
    ]
  };
  const dmpQueue = {
    CollationInfo: {
      upwardMessages: "Vec<UpwardMessage>",
      horizontalMessages: "Vec<OutboundHrmpMessage>",
      newValidationCode: "Option<ValidationCode>",
      processedDownwardMessages: "u32",
      hrmpWatermark: "RelayBlockNumber",
      headData: "HeadData"
    },
    CollationInfoV1: {
      upwardMessages: "Vec<UpwardMessage>",
      horizontalMessages: "Vec<OutboundHrmpMessage>",
      newValidationCode: "Option<ValidationCode>",
      processedDownwardMessages: "u32",
      hrmpWatermark: "RelayBlockNumber"
    },
    ConfigData: {
      maxIndividual: "Weight"
    },
    MessageId: "[u8; 32]",
    OverweightIndex: "u64",
    PageCounter: "u32",
    PageIndexData: {
      beginUsed: "PageCounter",
      endUsed: "PageCounter",
      overweightCount: "OverweightIndex"
    }
  };
  const definitions$h = {
    rpc: {},
    runtime: runtime$8,
    types: dmpQueue
  };
  const finalityV1 = {
    methods: {
      best_finalized: {
        description: "Returns number and hash of the best finalized header known to the bridge module.",
        params: [],
        type: "(BlockNumber, Hash)"
      }
    },
    version: 1
  };
  const runtime$7 = {
    KusamaFinalityApi: [finalityV1],
    PolkadotFinalityApi: [finalityV1],
    RococoFinalityApi: [finalityV1],
    WestendFinalityApi: [finalityV1]
  };
  const definitions$g = {
    rpc: {},
    runtime: runtime$7,
    types: {}
  };
  const hrmpTypes = {
    HrmpChannel: {
      maxCapacity: "u32",
      maxTotalSize: "u32",
      maxMessageSize: "u32",
      msgCount: "u32",
      totalSize: "u32",
      mqcHead: "Option<Hash>",
      senderDeposit: "Balance",
      recipientDeposit: "Balance"
    },
    HrmpChannelId: {
      sender: "u32",
      receiver: "u32"
    },
    HrmpOpenChannelRequest: {
      confirmed: "bool",
      age: "SessionIndex",
      senderDeposit: "Balance",
      maxMessageSize: "u32",
      maxCapacity: "u32",
      maxTotalSize: "u32"
    }
  };
  const PH_V1_TO_V2 = {
    assumed_validation_data: {
      description: "Returns the persisted validation data for the given `ParaId` along with the corresponding validation code hash.",
      params: [
        {
          name: "paraId",
          type: "ParaId"
        },
        {
          name: "hash",
          type: "Hash"
        }
      ],
      type: "Option<(PersistedValidationData, ValidationCodeHash)>"
    },
    availability_cores: {
      description: "Yields information on all availability cores as relevant to the child block.",
      params: [],
      type: "Vec<CoreState>"
    },
    candidate_events: {
      description: "Get a vector of events concerning candidates that occurred within a block.",
      params: [],
      type: "Vec<CandidateEvent>"
    },
    candidate_pending_availability: {
      description: "Get the receipt of a candidate pending availability.",
      params: [
        {
          name: "paraId",
          type: "ParaId"
        }
      ],
      type: "Option<CommittedCandidateReceipt>"
    },
    check_validation_outputs: {
      description: "Checks if the given validation outputs pass the acceptance criteria.",
      params: [
        {
          name: "paraId",
          type: "ParaId"
        },
        {
          name: "outputs",
          type: "CandidateCommitments"
        }
      ],
      type: "bool"
    },
    dmq_contents: {
      description: "Get all the pending inbound messages in the downward message queue for a para.",
      params: [
        {
          name: "paraId",
          type: "ParaId"
        }
      ],
      type: "Vec<InboundDownwardMessage>"
    },
    inbound_hrmp_channels_contents: {
      description: "Get the contents of all channels addressed to the given recipient.",
      params: [
        {
          name: "paraId",
          type: "ParaId"
        }
      ],
      type: "Vec<InboundHrmpMessage>"
    },
    on_chain_votes: {
      description: "Scrape dispute relevant from on-chain, backing votes and resolved disputes.",
      params: [],
      type: "Option<ScrapedOnChainVotes>"
    },
    persisted_validation_data: {
      description: "Yields the persisted validation data for the given `ParaId` along with an assumption that should be used if the para currently occupies a core.",
      params: [
        {
          name: "paraId",
          type: "ParaId"
        },
        {
          name: "assumption",
          type: "OccupiedCoreAssumption"
        }
      ],
      type: "Option<PersistedValidationData>"
    },
    session_index_for_child: {
      description: "Returns the session index expected at a child of the block.",
      params: [],
      type: "SessionIndex"
    },
    validation_code: {
      description: "Fetch the validation code used by a para, making the given `OccupiedCoreAssumption`.",
      params: [
        {
          name: "paraId",
          type: "ParaId"
        },
        {
          name: "assumption",
          type: "OccupiedCoreAssumption"
        }
      ],
      type: "ValidationCode"
    },
    validation_code_by_hash: {
      description: "Get the validation code from its hash.",
      params: [
        {
          name: "hash",
          type: "ValidationCodeHash"
        }
      ],
      type: "Option<ValidationCode>"
    },
    validator_groups: {
      description: "Returns the validator groups and rotation info localized based on the hypothetical child of a block whose state  this is invoked on",
      params: [],
      type: "(Vec<Vec<ParaValidatorIndex>>, GroupRotationInfo)"
    },
    validators: {
      description: "Get the current validators.",
      params: [],
      type: "Vec<ValidatorId>"
    }
  };
  const PH_V2_TO_V3 = {
    pvfs_require_precheck: {
      description: "Returns code hashes of PVFs that require pre-checking by validators in the active set.",
      params: [],
      type: "Vec<ValidationCodeHash>"
    },
    session_info: {
      description: "Get the session info for the given session, if stored.",
      params: [
        {
          name: "index",
          type: "SessionIndex"
        }
      ],
      type: "Option<SessionInfo>"
    },
    submit_pvf_check_statement: {
      description: "Submits a PVF pre-checking statement into the transaction pool.",
      params: [
        {
          name: "stmt",
          type: "PvfCheckStatement"
        },
        {
          name: "signature",
          type: "ValidatorSignature"
        }
      ],
      type: "Null"
    },
    validation_code_hash: {
      description: "Fetch the hash of the validation code used by a para, making the given `OccupiedCoreAssumption`.",
      params: [
        {
          name: "paraId",
          type: "ParaId"
        },
        {
          name: "assumption",
          type: "OccupiedCoreAssumption"
        }
      ],
      type: "Option<ValidationCodeHash>"
    }
  };
  const PH_V3 = {
    disputes: {
      description: "Returns all onchain disputes.",
      params: [],
      type: "Vec<(SessionIndex, CandidateHash, DisputeState)>"
    }
  };
  const PH_V4 = {
    session_executor_params: {
      description: "Returns execution parameters for the session.",
      params: [
        {
          name: "sessionIndex",
          type: "SessionIndex"
        }
      ],
      type: "Option<ExecutorParams>"
    }
  };
  const runtime$6 = {
    ParachainHost: [
      {
        methods: {
          ...PH_V1_TO_V2,
          ...PH_V2_TO_V3,
          ...PH_V3,
          ...PH_V4
        },
        version: 4
      },
      {
        methods: {
          ...PH_V1_TO_V2,
          ...PH_V2_TO_V3,
          ...PH_V3
        },
        version: 3
      },
      {
        methods: {
          ...PH_V1_TO_V2,
          ...PH_V2_TO_V3
        },
        version: 2
      },
      {
        methods: {
          session_info: {
            description: "Get the session info for the given session, if stored.",
            params: [
              {
                name: "index",
                type: "SessionIndex"
              }
            ],
            type: "Option<OldV1SessionInfo>"
          },
          ...PH_V1_TO_V2
        },
        version: 1
      }
    ]
  };
  const SlotRange10 = {
    _enum: ["ZeroZero", "ZeroOne", "ZeroTwo", "ZeroThree", "OneOne", "OneTwo", "OneThree", "TwoTwo", "TwoThree", "ThreeThree"]
  };
  const SlotRange = {
    _enum: ["ZeroZero", "ZeroOne", "ZeroTwo", "ZeroThree", "ZeroFour", "ZeroFive", "ZeroSix", "ZeroSeven", "OneOne", "OneTwo", "OneThree", "OneFour", "OneFive", "OneSix", "OneSeven", "TwoTwo", "TwoThree", "TwoFour", "TwoFive", "TwoSix", "TwoSeven", "ThreeThree", "ThreeFour", "ThreeFive", "ThreeSix", "ThreeSeven", "FourFour", "FourFive", "FourSix", "FourSeven", "FiveFive", "FiveSix", "FiveSeven", "SixSix", "SixSeven", "SevenSeven"]
  };
  const oldTypes = {
    Bidder: {
      _enum: {
        New: "NewBidder",
        Existing: "ParaId"
      }
    },
    IncomingParachain: {
      _enum: {
        Unset: "NewBidder",
        Fixed: "IncomingParachainFixed",
        Deploy: "IncomingParachainDeploy"
      }
    },
    IncomingParachainDeploy: {
      code: "ValidationCode",
      initialHeadData: "HeadData"
    },
    IncomingParachainFixed: {
      codeHash: "Hash",
      codeSize: "u32",
      initialHeadData: "HeadData"
    },
    NewBidder: {
      who: "AccountId",
      sub: "SubId"
    },
    SubId: "u32"
  };
  const slotTypes = {
    ...oldTypes,
    AuctionIndex: "u32",
    LeasePeriod: "BlockNumber",
    LeasePeriodOf: "BlockNumber",
    SlotRange10,
    SlotRange,
    WinningData10: `[WinningDataEntry; ${SlotRange10._enum.length}]`,
    WinningData: `[WinningDataEntry; ${SlotRange._enum.length}]`,
    WinningDataEntry: "Option<(AccountId, ParaId, BalanceOf)>",
    WinnersData10: "Vec<WinnersDataTuple10>",
    WinnersData: "Vec<WinnersDataTuple>",
    WinnersDataTuple10: "(AccountId, ParaId, BalanceOf, SlotRange10)",
    WinnersDataTuple: "(AccountId, ParaId, BalanceOf, SlotRange)"
  };
  const proposeTypes = {
    ParachainProposal: {
      proposer: "AccountId",
      genesisHead: "HeadData",
      validators: "Vec<ValidatorId>",
      name: "Bytes",
      balance: "Balance"
    },
    RegisteredParachainInfo: {
      validators: "Vec<ValidatorId>",
      proposer: "AccountId"
    }
  };
  const cumulusTypes = {
    ServiceQuality: {
      _enum: ["Ordered", "Fast"]
    }
  };
  const disputeTypes = {
    DisputeLocation: {
      _enum: ["Local", "Remote"]
    },
    DisputeResult: {
      _enum: ["Valid", "Invalid"]
    },
    DisputeState: {
      validatorsFor: "BitVec",
      validatorsAgainst: "BitVec",
      start: "BlockNumber",
      concludedAt: "Option<BlockNumber>"
    },
    DisputeStatement: {
      _enum: {
        Valid: "ValidDisputeStatementKind",
        Invalid: "InvalidDisputeStatementKind"
      }
    },
    DisputeStatementSet: {
      candidateHash: "CandidateHash",
      session: "SessionIndex",
      statements: "Vec<(DisputeStatement, ParaValidatorIndex, ValidatorSignature)>"
    },
    ExecutorParam: {
      _enum: {
        Phantom: "Null",
        MaxMemoryPages: "u32",
        StackLogicalMax: "u32",
        StackNativeMax: "u32",
        PrecheckingMaxMemory: "u64",
        PvfPrepTimeout: "(PvfPrepTimeoutKind, u64)",
        PvfExecTimeout: "(PvfExecTimeoutKind, u64)"
      }
    },
    ExecutorParamsHash: "Hash",
    ExecutorParams: "Vec<ExecutorParam>",
    ExplicitDisputeStatement: {
      valid: "bool",
      candidateHash: "CandidateHash",
      session: "SessionIndex"
    },
    InvalidDisputeStatementKind: {
      _enum: ["Explicit"]
    },
    MultiDisputeStatementSet: "Vec<DisputeStatementSet>",
    PvfExecTimeoutKind: {
      _enum: ["Backing", "Approval"]
    },
    PvfPrepTimeoutKind: {
      _enum: ["Precheck", "Lenient"]
    },
    ValidDisputeStatementKind: {
      _enum: {
        Explicit: "Null",
        BackingSeconded: "Hash",
        BackingValid: "Hash",
        ApprovalChecking: "Null"
      }
    }
  };
  const definitions$f = {
    rpc: {},
    runtime: runtime$6,
    types: {
      ...cumulusTypes,
      ...disputeTypes,
      ...hrmpTypes,
      ...proposeTypes,
      ...slotTypes,
      AbridgedCandidateReceipt: {
        parachainIndex: "ParaId",
        relayParent: "Hash",
        headData: "HeadData",
        collator: "CollatorId",
        signature: "CollatorSignature",
        povBlockHash: "Hash",
        commitments: "CandidateCommitments"
      },
      AbridgedHostConfiguration: {
        maxCodeSize: "u32",
        maxHeadDataSize: "u32",
        maxUpwardQueueCount: "u32",
        maxUpwardQueueSize: "u32",
        maxUpwardMessageSize: "u32",
        maxUpwardMessageNumPerCandidate: "u32",
        hrmpMaxMessageNumPerCandidate: "u32",
        validationUpgradeFrequency: "BlockNumber",
        validationUpgradeDelay: "BlockNumber"
      },
      AbridgedHrmpChannel: {
        maxCapacity: "u32",
        maxTotalSize: "u32",
        maxMessageSize: "u32",
        msgCount: "u32",
        totalSize: "u32",
        mqcHead: "Option<Hash>"
      },
      AssignmentId: "AccountId",
      AssignmentKind: {
        _enum: {
          Parachain: "Null",
          Parathread: "(CollatorId, u32)"
        }
      },
      AttestedCandidate: {
        candidate: "AbridgedCandidateReceipt",
        validityVotes: "Vec<ValidityAttestation>",
        validatorIndices: "BitVec"
      },
      AuthorityDiscoveryId: "AccountId",
      AvailabilityBitfield: "BitVec",
      AvailabilityBitfieldRecord: {
        bitfield: "AvailabilityBitfield",
        submittedTt: "BlockNumber"
      },
      BackedCandidate: {
        candidate: "CommittedCandidateReceipt",
        validityVotes: "Vec<ValidityAttestation>",
        validatorIndices: "BitVec"
      },
      BufferedSessionChange: {
        applyAt: "BlockNumber",
        validators: "Vec<ValidatorId>",
        queued: "Vec<ValidatorId>",
        sessionIndex: "SessionIndex"
      },
      CandidateCommitments: {
        upwardMessages: "Vec<UpwardMessage>",
        horizontalMessages: "Vec<OutboundHrmpMessage>",
        newValidationCode: "Option<ValidationCode>",
        headData: "HeadData",
        processedDownwardMessages: "u32",
        hrmpWatermark: "BlockNumber"
      },
      CandidateDescriptor: {
        paraId: "ParaId",
        relayParent: "RelayChainHash",
        collatorId: "CollatorId",
        persistedValidationDataHash: "Hash",
        povHash: "Hash",
        erasureRoot: "Hash",
        signature: "CollatorSignature",
        paraHead: "Hash",
        validationCodeHash: "ValidationCodeHash"
      },
      CandidateEvent: {
        _enum: {
          CandidateBacked: "(CandidateReceipt, HeadData, CoreIndex, GroupIndex)",
          CandidateIncluded: "(CandidateReceipt, HeadData, CoreIndex, GroupIndex)",
          CandidateTimedOut: "(CandidateReceipt, HeadData, CoreIndex)"
        }
      },
      CandidateHash: "Hash",
      CandidateInfo: {
        who: "AccountId",
        deposit: "Balance"
      },
      CandidatePendingAvailability: {
        core: "CoreIndex",
        hash: "CandidateHash",
        descriptor: "CandidateDescriptor",
        availabilityVotes: "BitVec",
        backers: "BitVec",
        relayParentNumber: "BlockNumber",
        backedInNumber: "BlockNumber",
        backingGroup: "GroupIndex"
      },
      CandidateReceipt: {
        descriptor: "CandidateDescriptor",
        commitmentsHash: "Hash"
      },
      GlobalValidationData: {
        maxCodeSize: "u32",
        maxHeadDataSize: "u32",
        blockNumber: "BlockNumber"
      },
      CollatorId: "H256",
      CollatorSignature: "Signature",
      CommittedCandidateReceipt: {
        descriptor: "CandidateDescriptor",
        commitments: "CandidateCommitments"
      },
      CoreAssignment: {
        core: "CoreIndex",
        paraId: "ParaId",
        kind: "AssignmentKind",
        groupIdx: "GroupIndex"
      },
      CoreIndex: "u32",
      CoreOccupied: {
        _enum: {
          Parathread: "ParathreadEntry",
          Parachain: "Null"
        }
      },
      CoreState: {
        _enum: {
          Occupied: "OccupiedCore",
          Scheduled: "ScheduledCore",
          Free: "Null"
        }
      },
      DoubleVoteReport: {
        identity: "ValidatorId",
        first: "(Statement, ValidatorSignature)",
        second: "(Statement, ValidatorSignature)",
        proof: "MembershipProof",
        signingContext: "SigningContext"
      },
      DownwardMessage: "Bytes",
      GroupIndex: "u32",
      GroupRotationInfo: {
        sessionStartBlock: "BlockNumber",
        groupRotationFrequency: "BlockNumber",
        now: "BlockNumber"
      },
      GlobalValidationSchedule: {
        maxCodeSize: "u32",
        maxHeadDataSize: "u32",
        blockNumber: "BlockNumber"
      },
      HeadData: "Bytes",
      HostConfiguration: {
        maxCodeSize: "u32",
        maxHeadDataSize: "u32",
        maxUpwardQueueCount: "u32",
        maxUpwardQueueSize: "u32",
        maxUpwardMessageSize: "u32",
        maxUpwardMessageNumPerCandidate: "u32",
        hrmpMaxMessageNumPerCandidate: "u32",
        validationUpgradeFrequency: "BlockNumber",
        validationUpgradeDelay: "BlockNumber",
        maxPovSize: "u32",
        maxDownwardMessageSize: "u32",
        preferredDispatchableUpwardMessagesStepWeight: "Weight",
        hrmpMaxParachainOutboundChannels: "u32",
        hrmpMaxParathreadOutboundChannels: "u32",
        hrmpOpenRequestTtl: "u32",
        hrmpSenderDeposit: "Balance",
        hrmpRecipientDeposit: "Balance",
        hrmpChannelMaxCapacity: "u32",
        hrmpChannelMaxTotalSize: "u32",
        hrmpMaxParachainInboundChannels: "u32",
        hrmpMaxParathreadInboundChannels: "u32",
        hrmpChannelMaxMessageSize: "u32",
        codeRetentionPeriod: "BlockNumber",
        parathreadCores: "u32",
        parathreadRetries: "u32",
        groupRotationFrequency: "BlockNumber",
        chainAvailabilityPeriod: "BlockNumber",
        threadAvailabilityPeriod: "BlockNumber",
        schedulingLookahead: "u32",
        maxValidatorsPerCore: "Option<u32>",
        maxValidators: "Option<u32>",
        disputePeriod: "SessionIndex",
        disputePostConclusionAcceptancePeriod: "BlockNumber",
        disputeMaxSpamSlots: "u32",
        disputeConclusionByTimeOutPeriod: "BlockNumber",
        noShowSlots: "u32",
        nDelayTranches: "u32",
        zerothDelayTrancheWidth: "u32",
        neededApprovals: "u32",
        relayVrfModuloSamples: "u32"
      },
      InboundDownwardMessage: {
        pubSentAt: "BlockNumber",
        pubMsg: "DownwardMessage"
      },
      InboundHrmpMessage: {
        sentAt: "BlockNumber",
        data: "Bytes"
      },
      InboundHrmpMessages: "Vec<InboundHrmpMessage>",
      LocalValidationData: {
        parentHead: "HeadData",
        balance: "Balance",
        codeUpgradeAllowed: "Option<BlockNumber>"
      },
      MessageIngestionType: {
        downwardMessages: "Vec<InboundDownwardMessage>",
        horizontalMessages: "BTreeMap<ParaId, InboundHrmpMessages>"
      },
      MessageQueueChain: "RelayChainHash",
      OccupiedCore: {
        nextUpOnAvailable: "Option<ScheduledCore>",
        occupiedSince: "BlockNumber",
        timeOutAt: "BlockNumber",
        nextUpOnTimeOut: "Option<ScheduledCore>",
        availability: "BitVec",
        groupResponsible: "GroupIndex",
        candidateHash: "CandidateHash",
        candidateDescriptor: "CandidateDescriptor"
      },
      OccupiedCoreAssumption: {
        _enum: ["Included,", "TimedOut", "Free"]
      },
      OutboundHrmpMessage: {
        recipient: "u32",
        data: "Bytes"
      },
      ParachainDispatchOrigin: {
        _enum: ["Signed", "Parachain", "Root"]
      },
      ParachainInherentData: {
        validationData: "PersistedValidationData",
        relayChainState: "StorageProof",
        downwardMessages: "Vec<InboundDownwardMessage>",
        horizontalMessages: "BTreeMap<ParaId, VecInboundHrmpMessage>"
      },
      ParachainsInherentData: {
        bitfields: "SignedAvailabilityBitfields",
        backedCandidates: "Vec<BackedCandidate>",
        disputes: "MultiDisputeStatementSet",
        parentHeader: "Header"
      },
      ParaGenesisArgs: {
        genesisHead: "Bytes",
        validationCode: "Bytes",
        parachain: "bool"
      },
      ParaId: "u32",
      ParaInfo: {
        manager: "AccountId",
        deposit: "Balance",
        locked: "bool"
      },
      ParaLifecycle: {
        _enum: ["Onboarding", "Parathread", "Parachain", "UpgradingToParachain", "DowngradingToParathread", "OutgoingParathread", "OutgoingParachain"]
      },
      ParaPastCodeMeta: {
        upgradeTimes: "Vec<ReplacementTimes>",
        lastPruned: "Option<BlockNumber>"
      },
      ParaScheduling: {
        _enum: ["Always", "Dynamic"]
      },
      ParathreadClaim: "(ParaId, CollatorId)",
      ParathreadClaimQueue: {
        queue: "Vec<QueuedParathread>",
        nextCoreOffset: "u32"
      },
      ParathreadEntry: {
        claim: "ParathreadClaim",
        retries: "u32"
      },
      ParaValidatorIndex: "u32",
      PersistedValidationData: {
        parentHead: "HeadData",
        relayParentNumber: "RelayChainBlockNumber",
        relayParentStorageRoot: "Hash",
        maxPovSize: "u32"
      },
      PvfCheckStatement: {
        accept: "bool",
        subject: "ValidationCodeHash",
        sessionIndex: "SessionIndex",
        validatorIndex: "ParaValidatorIndex"
      },
      QueuedParathread: {
        claim: "ParathreadEntry",
        coreOffset: "u32"
      },
      RelayBlockNumber: "u32",
      RelayChainBlockNumber: "RelayBlockNumber",
      RelayHash: "Hash",
      RelayChainHash: "RelayHash",
      Remark: "[u8; 32]",
      ReplacementTimes: {
        expectedAt: "BlockNumber",
        activatedAt: "BlockNumber"
      },
      Retriable: {
        _enum: {
          Never: "Null",
          WithRetries: "u32"
        }
      },
      ScheduledCore: {
        paraId: "ParaId",
        collator: "Option<CollatorId>"
      },
      Scheduling: {
        _enum: ["Always", "Dynamic"]
      },
      ScrapedOnChainVotes: {
        session: "SessionIndex",
        backingValidatorsPerCandidate: "Vec<(CandidateReceipt, Vec<(ParaValidatorIndex, ValidityAttestation)>)>",
        disputes: "MultiDisputeStatementSet"
      },
      SessionInfo: {
        activeValidatorIndices: "Vec<ParaValidatorIndex>",
        randomSeed: "[u8; 32]",
        disputePeriod: "SessionIndex",
        validators: "Vec<ValidatorId>",
        discoveryKeys: "Vec<AuthorityDiscoveryId>",
        assignmentKeys: "Vec<AssignmentId>",
        validatorGroups: "Vec<Vec<ValidatorIndex>>",
        nCores: "u32",
        zerothDelayTrancheWidth: "u32",
        relayVrfModuloSamples: "u32",
        nDelayTranches: "u32",
        noShowSlots: "u32",
        neededApprovals: "u32"
      },
      OldV1SessionInfo: {
        validators: "Vec<ValidatorId>",
        discoveryKeys: "Vec<AuthorityDiscoveryId>",
        assignmentKeys: "Vec<AssignmentId>",
        validatorGroups: "Vec<Vec<ParaValidatorIndex>>",
        nCores: "u32",
        zerothDelayTrancheWidth: "u32",
        relayVrfModuloSamples: "u32",
        nDelayTranches: "u32",
        noShowSlots: "u32",
        neededApprovals: "u32"
      },
      SessionInfoValidatorGroup: "Vec<ParaValidatorIndex>",
      SignedAvailabilityBitfield: {
        payload: "BitVec",
        validatorIndex: "ParaValidatorIndex",
        signature: "ValidatorSignature"
      },
      SignedAvailabilityBitfields: "Vec<SignedAvailabilityBitfield>",
      SigningContext: {
        sessionIndex: "SessionIndex",
        parentHash: "Hash"
      },
      Statement: {
        _enum: {
          Never: "Null",
          Candidate: "Hash",
          Valid: "Hash",
          Invalid: "Hash"
        }
      },
      TransientValidationData: {
        maxCodeSize: "u32",
        maxHeadDataSize: "u32",
        balance: "Balance",
        codeUpgradeAllowed: "Option<BlockNumber>",
        dmqLength: "u32"
      },
      UpgradeGoAhead: {
        _enum: ["Abort", "GoAhead"]
      },
      UpgradeRestriction: {
        _enum: ["Present"]
      },
      UpwardMessage: "Bytes",
      ValidationFunctionParams: {
        maxCodeSize: "u32",
        relayChainHeight: "RelayChainBlockNumber",
        codeUpgradeAllowed: "Option<RelayChainBlockNumber>"
      },
      ValidationCode: "Bytes",
      ValidationCodeHash: "Hash",
      ValidationData: {
        persisted: "PersistedValidationData",
        transient: "TransientValidationData"
      },
      ValidationDataType: {
        validationData: "ValidationData",
        relayChainState: "Vec<Bytes>"
      },
      ValidatorSignature: "Signature",
      ValidityAttestation: {
        _enum: {
          Never: "Null",
          Implicit: "ValidatorSignature",
          Explicit: "ValidatorSignature"
        }
      },
      MessagingStateSnapshot: {
        relayDispatchQueueSize: "(u32, u32)",
        egressChannels: "Vec<MessagingStateSnapshotEgressEntry>"
      },
      MessagingStateSnapshotEgressEntry: "(ParaId, AbridgedHrmpChannel)",
      SystemInherentData: "ParachainInherentData",
      VecInboundHrmpMessage: "Vec<InboundHrmpMessage>"
    }
  };
  const definitions$e = {
    rpc: {},
    types: {
      Approvals: "[bool; 4]"
    }
  };
  const definitions$d = {
    rpc: {},
    types: {
      AccountStatus: {
        validity: "AccountValidity",
        freeBalance: "Balance",
        lockedBalance: "Balance",
        signature: "Vec<u8>",
        vat: "Permill"
      },
      AccountValidity: {
        _enum: ["Invalid", "Initiated", "Pending", "ValidLow", "ValidHigh", "Completed"]
      }
    }
  };
  var TypeDefInfo;
  (function(TypeDefInfo2) {
    TypeDefInfo2[TypeDefInfo2["BTreeMap"] = 0] = "BTreeMap";
    TypeDefInfo2[TypeDefInfo2["BTreeSet"] = 1] = "BTreeSet";
    TypeDefInfo2[TypeDefInfo2["Compact"] = 2] = "Compact";
    TypeDefInfo2[TypeDefInfo2["DoNotConstruct"] = 3] = "DoNotConstruct";
    TypeDefInfo2[TypeDefInfo2["Enum"] = 4] = "Enum";
    TypeDefInfo2[TypeDefInfo2["HashMap"] = 5] = "HashMap";
    TypeDefInfo2[TypeDefInfo2["Int"] = 6] = "Int";
    TypeDefInfo2[TypeDefInfo2["Linkage"] = 7] = "Linkage";
    TypeDefInfo2[TypeDefInfo2["Null"] = 8] = "Null";
    TypeDefInfo2[TypeDefInfo2["Option"] = 9] = "Option";
    TypeDefInfo2[TypeDefInfo2["Plain"] = 10] = "Plain";
    TypeDefInfo2[TypeDefInfo2["Range"] = 11] = "Range";
    TypeDefInfo2[TypeDefInfo2["RangeInclusive"] = 12] = "RangeInclusive";
    TypeDefInfo2[TypeDefInfo2["Result"] = 13] = "Result";
    TypeDefInfo2[TypeDefInfo2["Set"] = 14] = "Set";
    TypeDefInfo2[TypeDefInfo2["Si"] = 15] = "Si";
    TypeDefInfo2[TypeDefInfo2["Struct"] = 16] = "Struct";
    TypeDefInfo2[TypeDefInfo2["Tuple"] = 17] = "Tuple";
    TypeDefInfo2[TypeDefInfo2["UInt"] = 18] = "UInt";
    TypeDefInfo2[TypeDefInfo2["Vec"] = 19] = "Vec";
    TypeDefInfo2[TypeDefInfo2["VecFixed"] = 20] = "VecFixed";
    TypeDefInfo2[TypeDefInfo2["WrapperKeepOpaque"] = 21] = "WrapperKeepOpaque";
    TypeDefInfo2[TypeDefInfo2["WrapperOpaque"] = 22] = "WrapperOpaque";
  })(TypeDefInfo || (TypeDefInfo = {}));
  function hasEq(o) {
    return isFunction$2(o.eq);
  }
  function compareArray(a, b) {
    if (Array.isArray(b)) {
      return a.length === b.length && isUndefined$1(a.find((v, index2) => hasEq(v) ? !v.eq(b[index2]) : v !== b[index2]));
    }
    return false;
  }
  class AbstractArray extends Array {
    /**
     * @description This ensures that operators such as clice, filter, map, etc. return
     * new Array instances (without this we need to apply overrides)
     */
    static get [Symbol.species]() {
      return Array;
    }
    constructor(registry, length2) {
      super(length2);
      this.registry = registry;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
      const count = this.length;
      let total = compactToU8a(count).length;
      for (let i2 = 0; i2 < count; i2++) {
        total += this[i2].encodedLength;
      }
      return total;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
      return this.length === 0;
    }
    /**
     * @description The length of the value
     */
    get length() {
      return super.length;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
      return compareArray(this, other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
      return {
        inner: this.inspectInner(),
        outer: [compactToU8a(this.length)]
      };
    }
    /**
     * @internal
     * @description Internal per-item inspection of internal values
     */
    inspectInner() {
      const count = this.length;
      const inner = new Array(count);
      for (let i2 = 0; i2 < count; i2++) {
        inner[i2] = this[i2].inspect();
      }
      return inner;
    }
    /**
     * @description Converts the Object to an standard JavaScript Array
     */
    toArray() {
      return Array.from(this);
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
      const count = this.length;
      const result = new Array(count);
      for (let i2 = 0; i2 < count; i2++) {
        result[i2] = this[i2] && this[i2].toHuman(isExtended);
      }
      return result;
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
      const count = this.length;
      const result = new Array(count);
      for (let i2 = 0; i2 < count; i2++) {
        result[i2] = this[i2] && this[i2].toJSON();
      }
      return result;
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
      const count = this.length;
      const result = new Array(count);
      for (let i2 = 0; i2 < count; i2++) {
        result[i2] = this[i2] && this[i2].toPrimitive();
      }
      return result;
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
      const count = this.length;
      const result = new Array(count);
      for (let i2 = 0; i2 < count; i2++) {
        result[i2] = this[i2].toString();
      }
      return `[${result.join(", ")}]`;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
      const encoded = this.toU8aInner();
      return isBare ? u8aConcatStrict(encoded) : u8aConcatStrict([compactToU8a(this.length), ...encoded]);
    }
    /**
     * @internal
     * @description Internal per-item SCALE encoding of contained values
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8aInner(isBare) {
      const count = this.length;
      const encoded = new Array(count);
      for (let i2 = 0; i2 < count; i2++) {
        encoded[i2] = this[i2].toU8a(isBare);
      }
      return encoded;
    }
  }
  class AbstractBase {
    constructor(registry, value, initialU8aLength) {
      this.initialU8aLength = initialU8aLength;
      this.__internal__raw = value;
      this.registry = registry;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
      return this.toU8a().length;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description returns the inner (wrapped value)
     */
    get inner() {
      return this.__internal__raw;
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
      return this.__internal__raw.isEmpty;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
      return this.__internal__raw.eq(other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
      return this.__internal__raw.inspect();
    }
    /**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */
    toHex(isLe) {
      return this.__internal__raw.toHex(isLe);
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
      return this.__internal__raw.toHuman(isExtended);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
      return this.__internal__raw.toJSON();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
      return this.__internal__raw.toPrimitive();
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
      return this.__internal__raw.toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
      return this.__internal__raw.toU8a(isBare);
    }
    /**
     * @description Returns the inner wrapped value (equivalent to valueOf)
     */
    unwrap() {
      return this.__internal__raw;
    }
    /**
     * @description Returns the inner wrapped value
     */
    valueOf() {
      return this.__internal__raw;
    }
  }
  const DEFAULT_UINT_BITS = 64;
  const MAX_NUMBER_BITS = 52;
  const MUL_P = new BN(1e4);
  const FORMATTERS = [
    ["Perquintill", BN_QUINTILL],
    ["Perbill", BN_BILLION],
    ["Permill", BN_MILLION],
    ["Percent", BN_HUNDRED]
  ];
  function isToBn(value) {
    return isFunction$2(value.toBn);
  }
  function toPercentage(value, divisor) {
    return `${(value.mul(MUL_P).div(divisor).toNumber() / 100).toFixed(2)}%`;
  }
  function decodeAbstractInt(value, isNegative) {
    if (isNumber$1(value)) {
      if (!Number.isInteger(value) || value > Number.MAX_SAFE_INTEGER || value < Number.MIN_SAFE_INTEGER) {
        throw new Error("Number needs to be an integer <= Number.MAX_SAFE_INTEGER, i.e. 2 ^ 53 - 1");
      }
      return value;
    } else if (isString$1(value)) {
      if (isHex(value, -1, true)) {
        return hexToBn(value, { isLe: false, isNegative }).toString();
      }
      if (value.includes(".") || value.includes(",") || value.includes("e")) {
        throw new Error("String should not contain decimal points or scientific notation");
      }
      return value;
    } else if (isBn(value) || isBigInt(value)) {
      return value.toString();
    } else if (isObject$2(value)) {
      if (isToBn(value)) {
        return value.toBn().toString();
      }
      const keys2 = Object.keys(value);
      if (keys2.length !== 1) {
        throw new Error("Unable to construct number from multi-key object");
      }
      return decodeAbstractInt(value[keys2[0]], isNegative);
    } else if (!value) {
      return 0;
    }
    throw new Error(`Unable to create BN from unknown type ${typeof value}`);
  }
  class AbstractInt extends BN {
    constructor(registry, value = 0, bitLength = DEFAULT_UINT_BITS, isSigned = false) {
      super(
        // shortcut isU8a as used in SCALE decoding
        isU8a(value) ? bitLength <= 48 ? u8aToNumber(value.subarray(0, bitLength / 8), { isNegative: isSigned }) : u8aToBn(value.subarray(0, bitLength / 8), { isLe: true, isNegative: isSigned }).toString() : decodeAbstractInt(value, isSigned)
      );
      this.registry = registry;
      this.__internal__bitLength = bitLength;
      this.encodedLength = this.__internal__bitLength / 8;
      this.initialU8aLength = this.__internal__bitLength / 8;
      this.isUnsigned = !isSigned;
      const isNegative = this.isNeg();
      const maxBits = bitLength - (isSigned && !isNegative ? 1 : 0);
      if (isNegative && !isSigned) {
        throw new Error(`${this.toRawType()}: Negative number passed to unsigned type`);
      } else if (super.bitLength() > maxBits) {
        throw new Error(`${this.toRawType()}: Input too large. Found input with ${super.bitLength()} bits, expected ${maxBits}`);
      }
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is a zero value (align elsewhere)
     */
    get isEmpty() {
      return this.isZero();
    }
    /**
     * @description Returns the number of bits in the value
     */
    bitLength() {
      return this.__internal__bitLength;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    eq(other) {
      return super.eq(isHex(other) ? hexToBn(other.toString(), { isLe: false, isNegative: !this.isUnsigned }) : bnToBn(other));
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
      return {
        outer: [this.toU8a()]
      };
    }
    /**
     * @description True if this value is the max of the type
     */
    isMax() {
      const u8a2 = this.toU8a().filter((b) => b === 255);
      return u8a2.length === this.__internal__bitLength / 8;
    }
    /**
     * @description Returns a BigInt representation of the number
     */
    toBigInt() {
      return BigInt(this.toString());
    }
    /**
     * @description Returns the BN representation of the number. (Compatibility)
     */
    toBn() {
      return this;
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex(isLe = false) {
      return bnToHex(this, {
        bitLength: this.bitLength(),
        isLe,
        isNegative: !this.isUnsigned
      });
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(_isExpanded) {
      const rawType = this.toRawType();
      if (rawType === "Balance") {
        return this.isMax() ? "everything" : formatBalance(this, { decimals: this.registry.chainDecimals[0], withSi: true, withUnit: this.registry.chainTokens[0] });
      }
      const [, divisor] = FORMATTERS.find(([type]) => type === rawType) || [];
      return divisor ? toPercentage(this, divisor) : formatNumber(this);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON(onlyHex = false) {
      return onlyHex || this.__internal__bitLength > 128 || super.bitLength() > MAX_NUMBER_BITS ? this.toHex() : this.toNumber();
    }
    /**
     * @description Returns the value in a primitive form, either number when <= 52 bits, or string otherwise
     */
    toPrimitive() {
      return super.bitLength() > MAX_NUMBER_BITS ? this.toString() : this.toNumber();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return this instanceof this.registry.createClassUnsafe("Balance") ? "Balance" : `${this.isUnsigned ? "u" : "i"}${this.bitLength()}`;
    }
    /**
     * @description Returns the string representation of the value
     * @param base The base to use for the conversion
     */
    toString(base) {
      return super.toString(base);
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */
    toU8a(_isBare) {
      return bnToU8a(this, {
        bitLength: this.bitLength(),
        isLe: true,
        isNegative: !this.isUnsigned
      });
    }
  }
  function hasMismatch(a, b) {
    return isUndefined$1(a) || (hasEq(a) ? !a.eq(b) : a !== b);
  }
  function notEntry(value) {
    return !Array.isArray(value) || value.length !== 2;
  }
  function compareMapArray(a, b) {
    return a.size === b.length && !b.some((e) => notEntry(e) || hasMismatch(a.get(e[0]), e[1]));
  }
  function compareMap(a, b) {
    if (Array.isArray(b)) {
      return compareMapArray(a, b);
    } else if (b instanceof Map) {
      return compareMapArray(a, [...b.entries()]);
    } else if (isObject$2(b)) {
      return compareMapArray(a, Object.entries(b));
    }
    return false;
  }
  function compareSetArray(a, b) {
    return a.size === b.length && !b.some((e) => !a.has(e));
  }
  function compareSet(a, b) {
    if (Array.isArray(b)) {
      return compareSetArray(a, b);
    } else if (b instanceof Set) {
      return compareSetArray(a, [...b.values()]);
    } else if (isObject$2(b)) {
      return compareSetArray(a, Object.values(b));
    }
    return false;
  }
  function formatFailure(registry, fn, _result, { message }, u8a2, i2, count, Type2, key) {
    let type = "";
    try {
      type = `: ${new Type2(registry).toRawType()}`;
    } catch {
    }
    return `${fn}: failed at ${u8aToHex(u8a2.subarray(0, 16))}…${key ? ` on ${key}` : ""} (index ${i2 + 1}/${count})${type}:: ${message}`;
  }
  function decodeU8a$6(registry, result, u8a2, [Types, keys2]) {
    const count = result.length;
    let offset = 0;
    let i2 = 0;
    try {
      while (i2 < count) {
        const value = new Types[i2](registry, u8a2.subarray(offset));
        offset += value.initialU8aLength || value.encodedLength;
        result[i2] = value;
        i2++;
      }
    } catch (error) {
      throw new Error(formatFailure(registry, "decodeU8a", result, error, u8a2.subarray(offset), i2, count, Types[i2], keys2[i2]));
    }
    return [result, offset];
  }
  function decodeU8aStruct(registry, result, u8a2, [Types, keys2]) {
    const count = result.length;
    let offset = 0;
    let i2 = 0;
    try {
      while (i2 < count) {
        const value = new Types[i2](registry, u8a2.subarray(offset));
        offset += value.initialU8aLength || value.encodedLength;
        result[i2] = [keys2[i2], value];
        i2++;
      }
    } catch (error) {
      throw new Error(formatFailure(registry, "decodeU8aStruct", result, error, u8a2.subarray(offset), i2, count, Types[i2], keys2[i2]));
    }
    return [result, offset];
  }
  function decodeU8aVec(registry, result, u8a2, startAt, Type2) {
    const count = result.length;
    let offset = startAt;
    let i2 = 0;
    try {
      while (i2 < count) {
        const value = new Type2(registry, u8a2.subarray(offset));
        offset += value.initialU8aLength || value.encodedLength;
        result[i2] = value;
        i2++;
      }
    } catch (error) {
      throw new Error(formatFailure(registry, "decodeU8aVec", result, error, u8a2.subarray(offset), i2, count, Type2));
    }
    return [offset, offset - startAt];
  }
  const BOUNDED = ["BTreeMap", "BTreeSet", "HashMap", "Vec"];
  const ALLOWED_BOXES = BOUNDED.concat(["Compact", "DoNotConstruct", "Int", "Linkage", "Range", "RangeInclusive", "Result", "Opaque", "Option", "UInt", "WrapperKeepOpaque", "WrapperOpaque"]);
  const BOX_PRECEDING = ["<", "(", "[", '"', ",", " "];
  const mappings = [
    // alias <T::InherentOfflineReport as InherentOfflineReport>::Inherent -> InherentOfflineReport
    alias("<T::InherentOfflineReport as InherentOfflineReport>::Inherent", "InherentOfflineReport", false),
    alias("VecDeque<", "Vec<", false),
    // <T::Balance as HasCompact>
    cleanupCompact(),
    // Change BoundedVec<Type, Size> to Vec<Type>
    removeExtensions("Bounded", true),
    // Change WeakVec<Type> to Vec<Type>
    removeExtensions("Weak", false),
    // Remove all the trait prefixes
    removeTraits(),
    // remove PairOf<T> -> (T, T)
    removePairOf(),
    // remove boxing, `Box<Proposal>` -> `Proposal`
    removeWrap("Box<"),
    // remove generics, `MisbehaviorReport<Hash, BlockNumber>` -> `MisbehaviorReport`
    removeGenerics(),
    // alias String -> Text (compat with jsonrpc methods)
    alias("String", "Text"),
    // alias Vec<u8> -> Bytes
    alias("Vec<u8>", "Bytes"),
    alias("&\\[u8\\]", "Bytes"),
    alias("&'static\\[u8\\]", "Bytes"),
    // alias RawAddress -> Address
    alias("RawAddress", "Address"),
    // lookups, mapped to Address/AccountId as appropriate in runtime
    alias("Lookup::Source", "LookupSource"),
    alias("Lookup::Target", "LookupTarget"),
    // HACK duplication between contracts & primitives, however contracts prefixed with exec
    alias("exec::StorageKey", "ContractStorageKey"),
    // flattens tuples with one value, `(AccountId)` -> `AccountId`
    flattenSingleTuple(),
    // converts ::Type to Type, <T as Trait<I>>::Proposal -> Proposal
    removeColons(),
    // remove all trailing spaces - this should always be the last
    trim$2()
  ];
  function trim$2() {
    return (value) => value.trim();
  }
  function findClosing(value, start) {
    let depth = 0;
    for (let i2 = start, count = value.length; i2 < count; i2++) {
      if (value[i2] === ">") {
        if (!depth) {
          return i2;
        }
        depth--;
      } else if (value[i2] === "<") {
        depth++;
      }
    }
    throw new Error(`Unable to find closing matching <> on '${value}' (start ${start})`);
  }
  function alias(src2, dest, withChecks = true) {
    const from2 = new RegExp(`(^${src2}|${BOX_PRECEDING.map((box) => `\\${box}${src2}`).join("|")})`, "g");
    const to = (src3) => {
      from2.lastIndex = 0;
      return withChecks && BOX_PRECEDING.includes(src3[0]) ? `${src3[0]}${dest}` : dest;
    };
    return (value) => value.replace(from2, to);
  }
  function cleanupCompact() {
    return (value) => {
      if (value.includes(" as HasCompact")) {
        for (let i2 = 0, count = value.length; i2 < count; i2++) {
          if (value[i2] === "<") {
            const end = findClosing(value, i2 + 1) - 14;
            if (value.substring(end, end + 14) === " as HasCompact") {
              value = `Compact<${value.substring(i2 + 1, end)}>`;
            }
          }
        }
      }
      return value;
    };
  }
  function flattenSingleTuple() {
    const from1 = /,\)/g;
    const from2 = /\(([^,]+)\)/;
    return (value) => {
      from1.lastIndex = 0;
      return value.replace(from1, ")").replace(from2, "$1");
    };
  }
  function replaceTagWith(value, matcher, replacer2) {
    let index2 = -1;
    while (true) {
      index2 = value.indexOf(matcher, index2 + 1);
      if (index2 === -1) {
        return value;
      }
      const start = index2 + matcher.length;
      const end = findClosing(value, start);
      value = `${value.substring(0, index2)}${replacer2(value.substring(start, end))}${value.substring(end + 1)}`;
    }
  }
  function removeExtensions(type, isSized) {
    return (value) => {
      for (let i2 = 0, count = BOUNDED.length; i2 < count; i2++) {
        const tag = BOUNDED[i2];
        value = replaceTagWith(value, `${type}${tag}<`, (v) => {
          const parts = v.split(",").map((s) => s.trim()).filter((s) => s);
          if (isSized) {
            parts.pop();
          }
          return `${tag}<${parts.join(",")}>`;
        });
      }
      return value;
    };
  }
  function removeColons() {
    return (value) => {
      let index2 = 0;
      while (index2 !== -1) {
        index2 = value.indexOf("::");
        if (index2 === 0) {
          value = value.substring(2);
        } else if (index2 !== -1) {
          let start = index2;
          while (start !== -1 && !BOX_PRECEDING.includes(value[start])) {
            start--;
          }
          value = `${value.substring(0, start + 1)}${value.substring(index2 + 2)}`;
        }
      }
      return value;
    };
  }
  function removeGenerics() {
    return (value) => {
      for (let i2 = 0, count = value.length; i2 < count; i2++) {
        if (value[i2] === "<") {
          const box = ALLOWED_BOXES.find((box2) => {
            const start = i2 - box2.length;
            return start >= 0 && value.substring(start, i2) === box2 && // make sure it is stand-alone, i.e. don't catch ElectionResult<...> as Result<...>
            (start === 0 || BOX_PRECEDING.includes(value[start - 1]));
          });
          if (!box) {
            const end = findClosing(value, i2 + 1);
            value = `${value.substring(0, i2)}${value.substring(end + 1)}`;
          }
        }
      }
      return value;
    };
  }
  function removePairOf() {
    const replacer2 = (v) => `(${v},${v})`;
    return (value) => replaceTagWith(value, "PairOf<", replacer2);
  }
  function removeTraits() {
    const from1 = /\s/g;
    const from2 = /(T|Self)::/g;
    const from3 = /<(T|Self)asTrait>::/g;
    const from4 = /<Tas[a-z]+::Trait>::/g;
    const from5 = /<LookupasStaticLookup>/g;
    const from6 = /::Type/g;
    return (value) => {
      from1.lastIndex = 0;
      from2.lastIndex = 0;
      from3.lastIndex = 0;
      from4.lastIndex = 0;
      from5.lastIndex = 0;
      from6.lastIndex = 0;
      return value.replace(from1, "").replace(from2, "").replace(from3, "").replace(from4, "").replace(from5, "Lookup").replace(from6, "");
    };
  }
  function removeWrap(check) {
    const replacer2 = (v) => v;
    return (value) => replaceTagWith(value, check, replacer2);
  }
  const sanitizeMap = /* @__PURE__ */ new Map();
  function sanitize(value) {
    const startValue = value.toString();
    const memoized = sanitizeMap.get(startValue);
    if (memoized) {
      return memoized;
    }
    let result = startValue;
    for (let i2 = 0, count = mappings.length; i2 < count; i2++) {
      result = mappings[i2](result);
    }
    sanitizeMap.set(startValue, result);
    return result;
  }
  function isArrayLike$1(arg) {
    return arg instanceof Uint8Array || Array.isArray(arg);
  }
  function isEnum(arg) {
    return isCodec(arg) && isNumber$1(arg.index) && isCodec(arg.value);
  }
  function isNumberLike(arg) {
    return isNumber$1(arg) || isBn(arg) || isBigInt(arg);
  }
  function sortArray(a, b) {
    let sortRes = 0;
    const minLen = Math.min(a.length, b.length);
    for (let i2 = 0; i2 < minLen; ++i2) {
      sortRes = sortAsc(a[i2], b[i2]);
      if (sortRes !== 0) {
        return sortRes;
      }
    }
    return a.length - b.length;
  }
  function sortAsc(a, b) {
    if (isNumberLike(a) && isNumberLike(b)) {
      return bnToBn(a).cmp(bnToBn(b));
    } else if (a instanceof Map && b instanceof Map) {
      return sortAsc(Array.from(a.values()), Array.from(b.values()));
    } else if (isEnum(a) && isEnum(b)) {
      return sortAsc(a.index, b.index) || sortAsc(a.value, b.value);
    } else if (isArrayLike$1(a) && isArrayLike$1(b)) {
      return sortArray(a, b);
    } else if (isCodec(a) && isCodec(b)) {
      return sortAsc(a.toU8a(true), b.toU8a(true));
    }
    throw new Error(`Attempting to sort unrecognized values: ${stringify$1(a)} (typeof ${typeof a}) <-> ${stringify$1(b)} (typeof ${typeof b})`);
  }
  function sortSet(set) {
    return new Set(Array.from(set).sort(sortAsc));
  }
  function sortMap(map2) {
    return new Map(Array.from(map2.entries()).sort(([keyA], [keyB]) => sortAsc(keyA, keyB)));
  }
  function typeToConstructor(registry, type) {
    return typeof type === "function" ? type : registry.createClassUnsafe(type);
  }
  function typesToConstructors(registry, types2) {
    const count = types2.length;
    const result = new Array(count);
    for (let i2 = 0; i2 < count; i2++) {
      result[i2] = typeToConstructor(registry, types2[i2]);
    }
    return result;
  }
  function mapToTypeMap(registry, input) {
    const entries = Object.entries(input);
    const count = entries.length;
    const output2 = [new Array(count), new Array(count)];
    for (let i2 = 0; i2 < count; i2++) {
      output2[1][i2] = entries[i2][0];
      output2[0][i2] = typeToConstructor(registry, entries[i2][1]);
    }
    return output2;
  }
  function typesToMap(registry, [Types, keys2]) {
    const result = {};
    for (let i2 = 0, count = keys2.length; i2 < count; i2++) {
      result[keys2[i2]] = registry.getClassName(Types[i2]) || new Types[i2](registry).toRawType();
    }
    return result;
  }
  function decodeCompact(registry, Type2, value) {
    if (isU8a(value)) {
      const [decodedLength, bn2] = (value[0] & 3) < 3 ? compactFromU8aLim(value) : compactFromU8a(value);
      return [new Type2(registry, bn2), decodedLength];
    } else if (value instanceof Compact) {
      const raw = value.unwrap();
      return raw instanceof Type2 ? [raw, 0] : [new Type2(registry, raw), 0];
    } else if (value instanceof Type2) {
      return [value, 0];
    }
    return [new Type2(registry, value), 0];
  }
  class Compact {
    constructor(registry, Type2, value = 0, { definition, setDefinition = identity$2 } = {}) {
      this.registry = registry;
      this.__internal__Type = definition || setDefinition(typeToConstructor(registry, Type2));
      const [raw, decodedLength] = decodeCompact(registry, this.__internal__Type, value);
      this.initialU8aLength = decodedLength;
      this.__internal__raw = raw;
    }
    static with(Type2) {
      let definition;
      const setDefinition = (d) => definition = d;
      return class extends Compact {
        constructor(registry, value) {
          super(registry, Type2, value, { definition, setDefinition });
        }
      };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
      return this.toU8a().length;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
      return this.__internal__raw.isEmpty;
    }
    /**
     * @description Returns the number of bits in the value
     */
    bitLength() {
      return this.__internal__raw.bitLength();
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
      return this.__internal__raw.eq(other instanceof Compact ? other.__internal__raw : other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
      return {
        outer: [this.toU8a()]
      };
    }
    /**
     * @description Returns a BigInt representation of the number
     */
    toBigInt() {
      return this.__internal__raw.toBigInt();
    }
    /**
     * @description Returns the BN representation of the number
     */
    toBn() {
      return this.__internal__raw.toBn();
    }
    /**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */
    toHex(isLe) {
      return this.__internal__raw.toHex(isLe);
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
      return this.__internal__raw.toHuman(isExtended);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
      return this.__internal__raw.toJSON();
    }
    /**
     * @description Returns the number representation for the value
     */
    toNumber() {
      return this.__internal__raw.toNumber();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
      return this.__internal__raw.toPrimitive();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return `Compact<${this.registry.getClassName(this.__internal__Type) || this.__internal__raw.toRawType()}>`;
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
      return this.__internal__raw.toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */
    toU8a(_isBare) {
      return compactToU8a(this.__internal__raw.toBn());
    }
    /**
     * @description Returns the embedded [[UInt]] or [[Moment]] value
     */
    unwrap() {
      return this.__internal__raw;
    }
  }
  class DoNotConstruct {
    constructor(registry, typeName = "DoNotConstruct") {
      this.registry = registry;
      this.__internal__neverError = new Error(`DoNotConstruct: Cannot construct unknown type ${typeName}`);
      throw this.__internal__neverError;
    }
    static with(typeName) {
      return class extends DoNotConstruct {
        constructor(registry) {
          super(registry, typeName);
        }
      };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
      throw this.__internal__neverError;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
      throw this.__internal__neverError;
    }
    /**
     * @description Checks if the value is an empty value (always true)
     */
    get isEmpty() {
      throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */
    eq() {
      throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */
    inspect() {
      throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */
    toHex() {
      throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */
    toHuman() {
      throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */
    toJSON() {
      throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */
    toPrimitive() {
      throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */
    toRawType() {
      throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */
    toString() {
      throw this.__internal__neverError;
    }
    /**
     * @description Unimplemented
     */
    toU8a() {
      throw this.__internal__neverError;
    }
  }
  class Null {
    constructor(registry) {
      this.encodedLength = 0;
      this.isEmpty = true;
      this.initialU8aLength = 0;
      this.registry = registry;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
      throw new Error(".hash is not implemented on Null");
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
      return other instanceof Null || isNull(other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
      return {};
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
      return "0x";
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
      return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
      return null;
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
      return null;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return "Null";
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
      return "";
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */
    toU8a(_isBare) {
      return new Uint8Array();
    }
  }
  function isRustEnum$1(def) {
    const defValues = Object.values(def);
    if (defValues.some((v) => isNumber$1(v))) {
      if (!defValues.every((v) => isNumber$1(v) && v >= 0 && v <= 255)) {
        throw new Error("Invalid number-indexed enum definition");
      }
      return false;
    }
    return true;
  }
  function extractDef(registry, _def) {
    const def = {};
    let isBasic;
    let isIndexed;
    if (Array.isArray(_def)) {
      for (let i2 = 0, count = _def.length; i2 < count; i2++) {
        def[_def[i2]] = { Type: Null, index: i2 };
      }
      isBasic = true;
      isIndexed = false;
    } else if (isRustEnum$1(_def)) {
      const [Types, keys2] = mapToTypeMap(registry, _def);
      for (let i2 = 0, count = keys2.length; i2 < count; i2++) {
        def[keys2[i2]] = { Type: Types[i2], index: i2 };
      }
      isBasic = !Object.values(def).some(({ Type: Type2 }) => Type2 !== Null);
      isIndexed = false;
    } else {
      const entries = Object.entries(_def);
      for (let i2 = 0, count = entries.length; i2 < count; i2++) {
        const [key, index2] = entries[i2];
        def[key] = { Type: Null, index: index2 };
      }
      isBasic = true;
      isIndexed = true;
    }
    return {
      def,
      isBasic,
      isIndexed
    };
  }
  function getEntryType(def, checkIdx) {
    const values2 = Object.values(def);
    for (let i2 = 0; i2 < values2.length; i2++) {
      const { Type: Type2, index: index2 } = values2[i2];
      if (index2 === checkIdx) {
        return Type2;
      }
    }
    throw new Error(`Unable to create Enum via index ${checkIdx}, in ${Object.keys(def).join(", ")}`);
  }
  function createFromU8a(registry, def, index2, value) {
    const Type2 = getEntryType(def, index2);
    return {
      index: index2,
      value: new Type2(registry, value)
    };
  }
  function createFromValue(registry, def, index2 = 0, value) {
    const Type2 = getEntryType(def, index2);
    return {
      index: index2,
      value: value instanceof Type2 ? value : new Type2(registry, value)
    };
  }
  function decodeFromJSON(registry, def, key, value) {
    const keys2 = Object.keys(def).map((k) => k.toLowerCase());
    const keyLower = key.toLowerCase();
    const index2 = keys2.indexOf(keyLower);
    if (index2 === -1) {
      throw new Error(`Cannot map Enum JSON, unable to find '${key}' in ${keys2.join(", ")}`);
    }
    try {
      return createFromValue(registry, def, Object.values(def)[index2].index, value);
    } catch (error) {
      throw new Error(`Enum(${key}):: ${error.message}`);
    }
  }
  function decodeEnum(registry, def, value, index2) {
    if (isNumber$1(index2)) {
      return createFromValue(registry, def, index2, value);
    } else if (isU8a(value) || isHex(value)) {
      const u8a2 = u8aToU8a(value);
      if (u8a2.length) {
        return createFromU8a(registry, def, u8a2[0], u8a2.subarray(1));
      }
    } else if (value instanceof Enum) {
      return createFromValue(registry, def, value.index, value.value);
    } else if (isNumber$1(value)) {
      return createFromValue(registry, def, value);
    } else if (isString$1(value)) {
      return decodeFromJSON(registry, def, value.toString());
    } else if (isObject$2(value)) {
      const key = Object.keys(value)[0];
      return decodeFromJSON(registry, def, key, value[key]);
    }
    return createFromValue(registry, def, Object.values(def)[0].index);
  }
  class Enum {
    constructor(registry, Types, value, index2, { definition, setDefinition = identity$2 } = {}) {
      const { def, isBasic, isIndexed } = definition || setDefinition(extractDef(registry, Types));
      const decoded = isU8a(value) && value.length && !isNumber$1(index2) ? createFromU8a(registry, def, value[0], value.subarray(1)) : decodeEnum(registry, def, value, index2);
      this.registry = registry;
      this.__internal__def = def;
      this.__internal__isBasic = isBasic;
      this.__internal__isIndexed = isIndexed;
      this.__internal__indexes = Object.values(def).map(({ index: index3 }) => index3);
      this.__internal__entryIndex = this.__internal__indexes.indexOf(decoded.index);
      this.__internal__raw = decoded.value;
      if (this.__internal__raw.initialU8aLength) {
        this.initialU8aLength = 1 + this.__internal__raw.initialU8aLength;
      }
    }
    static with(Types) {
      var _a;
      let definition;
      const setDefinition = (d) => definition = d;
      return _a = class extends Enum {
        constructor(registry, value, index2) {
          super(registry, Types, value, index2, { definition, setDefinition });
        }
      }, (() => {
        const keys2 = Array.isArray(Types) ? Types : Object.keys(Types);
        const count = keys2.length;
        const asKeys = new Array(count);
        const isKeys = new Array(count);
        for (let i2 = 0; i2 < count; i2++) {
          const name = stringPascalCase(keys2[i2]);
          asKeys[i2] = `as${name}`;
          isKeys[i2] = `is${name}`;
        }
        objectProperties(_a.prototype, isKeys, (_2, i2, self2) => self2.type === keys2[i2]);
        objectProperties(_a.prototype, asKeys, (k, i2, self2) => {
          if (self2.type !== keys2[i2]) {
            throw new Error(`Cannot convert '${self2.type}' via ${k}`);
          }
          return self2.value;
        });
      })(), _a;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
      return 1 + this.__internal__raw.encodedLength;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description The index of the enum value
     */
    get index() {
      return this.__internal__indexes[this.__internal__entryIndex];
    }
    /**
     * @description The value of the enum
     */
    get inner() {
      return this.__internal__raw;
    }
    /**
     * @description true if this is a basic enum (no values)
     */
    get isBasic() {
      return this.__internal__isBasic;
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
      return this.__internal__raw.isEmpty;
    }
    /**
     * @description Checks if the Enum points to a [[Null]] type
     */
    get isNone() {
      return this.__internal__raw instanceof Null;
    }
    /**
     * @description The available keys for this enum
     */
    get defIndexes() {
      return this.__internal__indexes;
    }
    /**
     * @description The available keys for this enum
     */
    get defKeys() {
      return Object.keys(this.__internal__def);
    }
    /**
     * @description The name of the type this enum value represents
     */
    get type() {
      return this.defKeys[this.__internal__entryIndex];
    }
    /**
     * @description The value of the enum
     */
    get value() {
      return this.__internal__raw;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
      if (isU8a(other)) {
        return !this.toU8a().some((entry, index2) => entry !== other[index2]);
      } else if (isNumber$1(other)) {
        return this.toNumber() === other;
      } else if (this.__internal__isBasic && isString$1(other)) {
        return this.type === other;
      } else if (isHex(other)) {
        return this.toHex() === other;
      } else if (other instanceof Enum) {
        return this.index === other.index && this.value.eq(other.value);
      } else if (isObject$2(other)) {
        return this.value.eq(other[this.type]);
      }
      return this.value.eq(other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
      if (this.__internal__isBasic) {
        return { outer: [new Uint8Array([this.index])] };
      }
      const { inner, outer = [] } = this.__internal__raw.inspect();
      return {
        inner,
        outer: [new Uint8Array([this.index]), ...outer]
      };
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
      return this.__internal__isBasic || this.isNone ? this.type : { [this.type]: this.__internal__raw.toHuman(isExtended) };
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
      return this.__internal__isBasic ? this.type : { [stringCamelCase(this.type)]: this.__internal__raw.toJSON() };
    }
    /**
     * @description Returns the number representation for the value
     */
    toNumber() {
      return this.index;
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
      return this.__internal__isBasic ? this.type : { [stringCamelCase(this.type)]: this.__internal__raw.toPrimitive() };
    }
    /**
     * @description Returns a raw struct representation of the enum types
     */
    _toRawStruct() {
      if (this.__internal__isBasic) {
        return this.__internal__isIndexed ? this.defKeys.reduce((out, key, index2) => {
          out[key] = this.__internal__indexes[index2];
          return out;
        }, {}) : this.defKeys;
      }
      const entries = Object.entries(this.__internal__def);
      return typesToMap(this.registry, entries.reduce((out, [key, { Type: Type2 }], i2) => {
        out[0][i2] = Type2;
        out[1][i2] = key;
        return out;
      }, [new Array(entries.length), new Array(entries.length)]));
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return stringify$1({ _enum: this._toRawStruct() });
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
      return this.isNone ? this.type : stringify$1(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
      return isBare ? this.__internal__raw.toU8a(isBare) : u8aConcatStrict([
        new Uint8Array([this.index]),
        this.__internal__raw.toU8a(isBare)
      ]);
    }
  }
  class Int extends AbstractInt {
    constructor(registry, value = 0, bitLength) {
      super(registry, value, bitLength, true);
    }
    static with(bitLength, typeName) {
      return class extends Int {
        constructor(registry, value) {
          super(registry, value, bitLength);
        }
        toRawType() {
          return typeName || super.toRawType();
        }
      };
    }
  }
  class None extends Null {
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return "None";
    }
  }
  function decodeOption(registry, Type2, value) {
    if (value instanceof Type2) {
      return value;
    } else if (value instanceof Option) {
      if (value.value instanceof Type2) {
        return value.value;
      } else if (value.isNone) {
        return new None(registry);
      }
      return new Type2(registry, value.value);
    } else if (isNull(value) || isUndefined$1(value) || value === "0x" || value instanceof None) {
      return new None(registry);
    } else if (isU8a(value)) {
      return !value.length || value[0] === 0 ? new None(registry) : new Type2(registry, value.subarray(1));
    }
    return new Type2(registry, value);
  }
  class Option {
    constructor(registry, typeName, value, { definition, setDefinition = identity$2 } = {}) {
      const Type2 = definition || setDefinition(typeToConstructor(registry, typeName));
      const decoded = isU8a(value) && value.length && !isCodec(value) ? value[0] === 0 ? new None(registry) : new Type2(registry, value.subarray(1)) : decodeOption(registry, Type2, value);
      this.registry = registry;
      this.__internal__Type = Type2;
      this.__internal__raw = decoded;
      if (decoded == null ? void 0 : decoded.initialU8aLength) {
        this.initialU8aLength = 1 + decoded.initialU8aLength;
      }
    }
    static with(Type2) {
      let definition;
      const setDefinition = (d) => {
        definition = d;
        return d;
      };
      return class extends Option {
        constructor(registry, value) {
          super(registry, Type2, value, { definition, setDefinition });
        }
      };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
      return 1 + this.__internal__raw.encodedLength;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the Option has no value
     */
    get isEmpty() {
      return this.isNone;
    }
    /**
     * @description Checks if the Option has no value
     */
    get isNone() {
      return this.__internal__raw instanceof None;
    }
    /**
     * @description Checks if the Option has a value
     */
    get isSome() {
      return !this.isNone;
    }
    /**
     * @description The actual value for the Option
     */
    get value() {
      return this.__internal__raw;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
      if (other instanceof Option) {
        return this.isSome === other.isSome && this.value.eq(other.value);
      }
      return this.value.eq(other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
      if (this.isNone) {
        return { outer: [new Uint8Array([0])] };
      }
      const { inner, outer = [] } = this.__internal__raw.inspect();
      return {
        inner,
        outer: [new Uint8Array([1]), ...outer]
      };
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
      return this.isNone ? "0x" : u8aToHex(this.toU8a().subarray(1));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
      return this.__internal__raw.toHuman(isExtended);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
      return this.isNone ? null : this.__internal__raw.toJSON();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
      return this.isNone ? null : this.__internal__raw.toPrimitive();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType(isBare) {
      const wrapped = this.registry.getClassName(this.__internal__Type) || new this.__internal__Type(this.registry).toRawType();
      return isBare ? wrapped : `Option<${wrapped}>`;
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
      return this.__internal__raw.toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
      if (isBare) {
        return this.__internal__raw.toU8a(true);
      }
      const u8a2 = new Uint8Array(this.encodedLength);
      if (this.isSome) {
        u8a2.set([1]);
        u8a2.set(this.__internal__raw.toU8a(), 1);
      }
      return u8a2;
    }
    /**
     * @description Returns the value that the Option represents (if available), throws if null
     */
    unwrap() {
      if (this.isNone) {
        throw new Error("Option: unwrapping a None value");
      }
      return this.__internal__raw;
    }
    /**
     * @description Returns the value that the Option represents (if available) or defaultValue if none
     * @param defaultValue The value to return if the option isNone
     */
    unwrapOr(defaultValue) {
      return this.isSome ? this.unwrap() : defaultValue;
    }
    /**
     * @description Returns the value that the Option represents (if available) or defaultValue if none
     * @param defaultValue The value to return if the option isNone
     */
    unwrapOrDefault() {
      return this.isSome ? this.unwrap() : new this.__internal__Type(this.registry);
    }
  }
  let Result$1 = class Result2 extends Enum {
    constructor(registry, Ok, Err, value) {
      super(registry, { Ok, Err }, value);
    }
    static with(Types) {
      return class extends Result2 {
        constructor(registry, value) {
          super(registry, Types.Ok, Types.Err, value);
        }
      };
    }
    /**
     * @description Returns the wrapper Err value (if isErr)
     */
    get asErr() {
      if (!this.isErr) {
        throw new Error("Cannot extract Err value from Ok result, check isErr first");
      }
      return this.value;
    }
    /**
     * @description Returns the wrapper Ok value (if isOk)
     */
    get asOk() {
      if (!this.isOk) {
        throw new Error("Cannot extract Ok value from Err result, check isOk first");
      }
      return this.value;
    }
    /**
     * @description Checks if the Result has no value
     */
    get isEmpty() {
      return this.isOk && this.value.isEmpty;
    }
    /**
     * @description Checks if the Result wraps an Err value
     */
    get isErr() {
      return !this.isOk;
    }
    /**
     * @description Checks if the Result wraps an Ok value
     */
    get isOk() {
      return this.index === 0;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      const Types = this._toRawStruct();
      return `Result<${Types.Ok},${Types.Err}>`;
    }
  };
  function decodeTuple(registry, result, value, Classes) {
    if (Array.isArray(value)) {
      const Types = Classes[0];
      for (let i2 = 0, count = Types.length; i2 < count; i2++) {
        try {
          const entry = value == null ? void 0 : value[i2];
          result[i2] = entry instanceof Types[i2] ? entry : new Types[i2](registry, entry);
        } catch (error) {
          throw new Error(`Tuple: failed on ${i2}:: ${error.message}`);
        }
      }
      return [result, 0];
    } else if (isHex(value)) {
      return decodeU8a$6(registry, result, u8aToU8a(value), Classes);
    } else if (!value || !result.length) {
      const Types = Classes[0];
      for (let i2 = 0, count = Types.length; i2 < count; i2++) {
        result[i2] = new Types[i2](registry);
      }
      return [result, 0];
    }
    throw new Error(`Expected array input to Tuple decoding, found ${typeof value}: ${stringify$1(value)}`);
  }
  class Tuple extends AbstractArray {
    constructor(registry, Types, value, { definition, setDefinition = identity$2 } = {}) {
      const Classes = definition || setDefinition(Array.isArray(Types) ? [typesToConstructors(registry, Types), []] : isFunction$2(Types) || isString$1(Types) ? [[typeToConstructor(registry, Types)], []] : mapToTypeMap(registry, Types));
      super(registry, Classes[0].length);
      this.initialU8aLength = (isU8a(value) ? decodeU8a$6(registry, this, value, Classes) : decodeTuple(registry, this, value, Classes))[1];
      this.__internal__Types = Classes;
    }
    static with(Types) {
      let definition;
      const setDefinition = (d) => definition = d;
      return class extends Tuple {
        constructor(registry, value) {
          super(registry, Types, value, { definition, setDefinition });
        }
      };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
      let total = 0;
      for (let i2 = 0, count = this.length; i2 < count; i2++) {
        total += this[i2].encodedLength;
      }
      return total;
    }
    /**
     * @description The types definition of the tuple
     */
    get Types() {
      return this.__internal__Types[1].length ? this.__internal__Types[1] : this.__internal__Types[0].map((T) => new T(this.registry).toRawType());
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
      return {
        inner: this.inspectInner()
      };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      const types2 = this.__internal__Types[0].map((T) => this.registry.getClassName(T) || new T(this.registry).toRawType());
      return `(${types2.join(",")})`;
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
      return stringify$1(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
      return u8aConcatStrict(this.toU8aInner(isBare));
    }
  }
  class UInt extends AbstractInt {
    static with(bitLength, typeName) {
      return class extends UInt {
        constructor(registry, value) {
          super(registry, value, bitLength);
        }
        toRawType() {
          return typeName || super.toRawType();
        }
      };
    }
  }
  const MAX_LENGTH$2 = 64 * 1024;
  const l$d = logger("Vec");
  function decodeVecLength(value) {
    if (Array.isArray(value)) {
      return [value, value.length, 0];
    } else if (isU8a(value) || isHex(value)) {
      const u8a2 = u8aToU8a(value);
      const [startAt, length2] = compactFromU8aLim(u8a2);
      if (length2 > MAX_LENGTH$2) {
        throw new Error(`Vec length ${length2.toString()} exceeds ${MAX_LENGTH$2}`);
      }
      return [u8a2, length2, startAt];
    } else if (!value) {
      return [null, 0, 0];
    }
    throw new Error(`Expected array/hex input to Vec<*> decoding, found ${typeof value}: ${stringify$1(value)}`);
  }
  function decodeVec(registry, result, value, startAt, Type2) {
    if (Array.isArray(value)) {
      const count = result.length;
      for (let i2 = 0; i2 < count; i2++) {
        const entry = value[i2];
        try {
          result[i2] = entry instanceof Type2 ? entry : new Type2(registry, entry);
        } catch (error) {
          l$d.error(`Unable to decode on index ${i2}`, error.message);
          throw error;
        }
      }
      return [0, 0];
    } else if (!value) {
      return [0, 0];
    }
    return decodeU8aVec(registry, result, u8aToU8a(value), startAt, Type2);
  }
  class Vec extends AbstractArray {
    constructor(registry, Type2, value = [], { definition, setDefinition = identity$2 } = {}) {
      const [decodeFrom, length2, startAt] = decodeVecLength(value);
      super(registry, length2);
      this.__internal__Type = definition || setDefinition(typeToConstructor(registry, Type2));
      this.initialU8aLength = (isU8a(decodeFrom) ? decodeU8aVec(registry, this, decodeFrom, startAt, this.__internal__Type) : decodeVec(registry, this, decodeFrom, startAt, this.__internal__Type))[0];
    }
    static with(Type2) {
      let definition;
      const setDefinition = (d) => definition = d;
      return class extends Vec {
        constructor(registry, value) {
          super(registry, Type2, value, { definition, setDefinition });
        }
      };
    }
    /**
     * @description The type for the items
     */
    get Type() {
      return this.__internal__Type.name;
    }
    /**
     * @description Finds the index of the value in the array
     */
    indexOf(other) {
      const check = other instanceof this.__internal__Type ? other : new this.__internal__Type(this.registry, other);
      for (let i2 = 0, count = this.length; i2 < count; i2++) {
        if (check.eq(this[i2])) {
          return i2;
        }
      }
      return -1;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return `Vec<${this.registry.getClassName(this.__internal__Type) || new this.__internal__Type(this.registry).toRawType()}>`;
    }
  }
  class VecFixed extends AbstractArray {
    constructor(registry, Type2, length2, value = [], { definition, setDefinition = identity$2 } = {}) {
      super(registry, length2);
      this.__internal__Type = definition || setDefinition(typeToConstructor(registry, Type2));
      this.initialU8aLength = (isU8a(value) ? decodeU8aVec(registry, this, value, 0, this.__internal__Type) : decodeVec(registry, this, value, 0, this.__internal__Type))[1];
    }
    static with(Type2, length2) {
      let definition;
      const setDefinition = (d) => definition = d;
      return class extends VecFixed {
        constructor(registry, value) {
          super(registry, Type2, length2, value, { definition, setDefinition });
        }
      };
    }
    /**
     * @description The type for the items
     */
    get Type() {
      return new this.__internal__Type(this.registry).toRawType();
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
      let total = 0;
      for (let i2 = 0, count = this.length; i2 < count; i2++) {
        total += this[i2].encodedLength;
      }
      return total;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
      return {
        inner: this.inspectInner()
      };
    }
    toU8a() {
      const encoded = this.toU8aInner();
      return encoded.length ? u8aConcatStrict(encoded) : new Uint8Array([]);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return `[${this.Type};${this.length}]`;
    }
  }
  class Raw extends Uint8Array {
    /**
     * @description This ensures that operators such as clice, filter, map, etc. return
     * new Array instances (without this we need to apply overrides)
     */
    static get [Symbol.species]() {
      return Uint8Array;
    }
    constructor(registry, value, initialU8aLength) {
      super(u8aToU8a(value));
      this.registry = registry;
      this.initialU8aLength = initialU8aLength;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
      return this.length;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Returns true if the wrapped value contains only ASCII printable characters
     */
    get isAscii() {
      return isAscii(this);
    }
    /**
     * @description Returns true if the type wraps an empty/default all-0 value
     */
    get isEmpty() {
      return !this.length || isUndefined$1(this.find((b) => !!b));
    }
    /**
     * @description Returns true if the wrapped value contains only utf8 characters
     */
    get isUtf8() {
      return isUtf8(this);
    }
    /**
     * @description Returns the number of bits in the value
     */
    bitLength() {
      return this.length * 8;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
      if (other instanceof Uint8Array) {
        return this.length === other.length && !this.some((b, index2) => b !== other[index2]);
      }
      return this.eq(u8aToU8a(other));
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
      return {
        outer: [this.toU8a()]
      };
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
      return u8aToHex(this);
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
      return this.toPrimitive();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
      return this.toHex();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
      if (this.isAscii) {
        const text = this.toUtf8();
        if (isAscii(text)) {
          return text;
        }
      }
      return this.toJSON();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return "Raw";
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
      return this.toHex();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */
    toU8a(_isBare) {
      return Uint8Array.from(this);
    }
    /**
     * @description Returns the wrapped data as a UTF-8 string
     */
    toUtf8() {
      if (!this.isUtf8) {
        throw new Error("The character sequence is not a valid Utf8 string");
      }
      return u8aToString(this);
    }
  }
  function decodeBitVecU8a(value) {
    if (!value || !value.length) {
      return [0, new Uint8Array()];
    }
    const [offset, length2] = compactFromU8aLim(value);
    const total = offset + Math.ceil(length2 / 8);
    if (total > value.length) {
      throw new Error(`BitVec: required length less than remainder, expected at least ${total}, found ${value.length}`);
    }
    return [length2, value.subarray(offset, total)];
  }
  function decodeBitVec(value) {
    if (Array.isArray(value) || isString$1(value)) {
      const u8a2 = u8aToU8a(value);
      return [u8a2.length / 8, u8a2];
    }
    return decodeBitVecU8a(value);
  }
  class BitVec extends Raw {
    // In lieu of having the Msb/Lsb identifiers passed through, we default to assuming
    // we are dealing with Lsb, which is the default (as of writing) BitVec format used
    // in the Polkadot code (this only affects the toHuman displays)
    constructor(registry, value, isMsb = false) {
      const [decodedLength, u8a2] = decodeBitVec(value);
      super(registry, u8a2);
      this.__internal__decodedLength = decodedLength;
      this.__internal__isMsb = isMsb;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
      return this.length + compactToU8a(this.__internal__decodedLength).length;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
      return {
        outer: [compactToU8a(this.__internal__decodedLength), super.toU8a()]
      };
    }
    /**
     * @description Creates a boolean array of the bit values
     */
    toBoolArray() {
      const map2 = [...this.toU8a(true)].map((v) => [
        !!(v & 128),
        !!(v & 64),
        !!(v & 32),
        !!(v & 16),
        !!(v & 8),
        !!(v & 4),
        !!(v & 2),
        !!(v & 1)
      ]);
      const count = map2.length;
      const result = new Array(8 * count);
      for (let i2 = 0; i2 < count; i2++) {
        const off = i2 * 8;
        const v = map2[i2];
        for (let j = 0; j < 8; j++) {
          result[off + j] = this.__internal__isMsb ? v[j] : v[7 - j];
        }
      }
      return result;
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
      return `0b${[...this.toU8a(true)].map((d) => `00000000${d.toString(2)}`.slice(-8)).map((s) => this.__internal__isMsb ? s : s.split("").reverse().join("")).join("_")}`;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return "BitVec";
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
      const bitVec = super.toU8a(isBare);
      return isBare ? bitVec : u8aConcatStrict([compactToU8a(this.__internal__decodedLength), bitVec]);
    }
  }
  function noopSetDefinition(d) {
    return d;
  }
  function decodeStructFromObject(registry, [Types, keys2], value, jsonMap) {
    let jsonObj;
    const typeofArray = Array.isArray(value);
    const typeofMap = value instanceof Map;
    const count = keys2.length;
    if (!typeofArray && !typeofMap && !isObject$2(value)) {
      throw new Error(`Struct: Cannot decode value ${stringify$1(value)} (typeof ${typeof value}), expected an input object, map or array`);
    } else if (typeofArray && value.length !== count) {
      throw new Error(`Struct: Unable to map ${stringify$1(value)} array to object with known keys ${keys2.join(", ")}`);
    }
    const raw = new Array(count);
    for (let i2 = 0; i2 < count; i2++) {
      const key = keys2[i2];
      const jsonKey = jsonMap.get(key) || key;
      const Type2 = Types[i2];
      let assign2;
      try {
        if (typeofArray) {
          assign2 = value[i2];
        } else if (typeofMap) {
          assign2 = jsonKey && value.get(jsonKey);
        } else {
          assign2 = jsonKey && value[jsonKey];
          if (isUndefined$1(assign2)) {
            if (isUndefined$1(jsonObj)) {
              const entries = Object.entries(value);
              jsonObj = {};
              for (let e = 0, ecount = entries.length; e < ecount; e++) {
                jsonObj[stringCamelCase(entries[e][0])] = entries[e][1];
              }
            }
            assign2 = jsonKey && jsonObj[jsonKey];
          }
        }
        raw[i2] = [
          key,
          assign2 instanceof Type2 ? assign2 : new Type2(registry, assign2)
        ];
      } catch (error) {
        let type = Type2.name;
        try {
          type = new Type2(registry).toRawType();
        } catch {
        }
        throw new Error(`Struct: failed on ${jsonKey}: ${type}:: ${error.message}`);
      }
    }
    return [raw, 0];
  }
  class Struct extends Map {
    constructor(registry, Types, value, jsonMap = /* @__PURE__ */ new Map(), { definition, setDefinition = noopSetDefinition } = {}) {
      const typeMap = definition || setDefinition(mapToTypeMap(registry, Types));
      const [decoded, decodedLength] = isU8a(value) || isHex(value) ? decodeU8aStruct(registry, new Array(typeMap[0].length), u8aToU8a(value), typeMap) : value instanceof Struct ? [value, 0] : decodeStructFromObject(registry, typeMap, value || {}, jsonMap);
      super(decoded);
      this.initialU8aLength = decodedLength;
      this.registry = registry;
      this.__internal__jsonMap = jsonMap;
      this.__internal__Types = typeMap;
    }
    static with(Types, jsonMap) {
      var _a;
      let definition;
      const setDefinition = (d) => definition = d;
      return _a = class extends Struct {
        constructor(registry, value) {
          super(registry, Types, value, jsonMap, { definition, setDefinition });
        }
      }, (() => {
        const keys2 = Object.keys(Types);
        objectProperties(_a.prototype, keys2, (k, _2, self2) => self2.get(k));
      })(), _a;
    }
    /**
     * @description The available keys for this struct
     */
    get defKeys() {
      return this.__internal__Types[1];
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
      for (const v of this.values()) {
        if (!v.isEmpty) {
          return false;
        }
      }
      return true;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
      let total = 0;
      for (const v of this.values()) {
        total += v.encodedLength;
      }
      return total;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Returns the Type description of the structure
     */
    get Type() {
      const result = {};
      const [Types, keys2] = this.__internal__Types;
      for (let i2 = 0, count = keys2.length; i2 < count; i2++) {
        result[keys2[i2]] = new Types[i2](this.registry).toRawType();
      }
      return result;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
      return compareMap(this, other);
    }
    /**
     * @description Returns a specific names entry in the structure
     * @param key The name of the entry to retrieve
     */
    get(key) {
      return super.get(key);
    }
    /**
     * @description Returns the values of a member at a specific index (Rather use get(name) for performance)
     */
    getAtIndex(index2) {
      return this.toArray()[index2];
    }
    /**
     * @description Returns the a types value by name
     */
    getT(key) {
      return super.get(key);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect(isBare) {
      const inner = [];
      for (const [k, v] of this.entries()) {
        inner.push({
          ...v.inspect(!isBare || isBoolean(isBare) ? isBare : isBare[k]),
          name: stringCamelCase(k)
        });
      }
      return {
        inner
      };
    }
    /**
     * @description Converts the Object to an standard JavaScript Array
     */
    toArray() {
      return [...this.values()];
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
      const json = {};
      for (const [k, v] of this.entries()) {
        json[k] = v.toHuman(isExtended);
      }
      return json;
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
      const json = {};
      for (const [k, v] of this.entries()) {
        json[this.__internal__jsonMap.get(k) || k] = v.toJSON();
      }
      return json;
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
      const json = {};
      for (const [k, v] of this.entries()) {
        json[k] = v.toPrimitive();
      }
      return json;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return stringify$1(typesToMap(this.registry, this.__internal__Types));
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
      return stringify$1(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
      const encoded = [];
      for (const [k, v] of this.entries()) {
        encoded.push(v.toU8a(!isBare || isBoolean(isBare) ? isBare : isBare[k]));
      }
      return u8aConcatStrict(encoded);
    }
  }
  const l$c = logger("Map");
  function decodeMapFromU8a(registry, KeyClass, ValClass, u8a2) {
    const output2 = /* @__PURE__ */ new Map();
    const [offset, count] = compactFromU8aLim(u8a2);
    const types2 = [];
    for (let i2 = 0; i2 < count; i2++) {
      types2.push(KeyClass, ValClass);
    }
    const [values2, decodedLength] = decodeU8a$6(registry, new Array(types2.length), u8a2.subarray(offset), [types2, []]);
    for (let i2 = 0, count2 = values2.length; i2 < count2; i2 += 2) {
      output2.set(values2[i2], values2[i2 + 1]);
    }
    return [KeyClass, ValClass, output2, offset + decodedLength];
  }
  function decodeMapFromMap(registry, KeyClass, ValClass, value) {
    const output2 = /* @__PURE__ */ new Map();
    for (const [key, val] of value.entries()) {
      const isComplex = KeyClass.prototype instanceof AbstractArray || KeyClass.prototype instanceof Struct || KeyClass.prototype instanceof Enum;
      try {
        output2.set(key instanceof KeyClass ? key : new KeyClass(registry, isComplex && typeof key === "string" ? JSON.parse(key) : key), val instanceof ValClass ? val : new ValClass(registry, val));
      } catch (error) {
        l$c.error("Failed to decode key or value:", error.message);
        throw error;
      }
    }
    return [KeyClass, ValClass, output2, 0];
  }
  function decodeMap(registry, keyType, valType, value) {
    const KeyClass = typeToConstructor(registry, keyType);
    const ValClass = typeToConstructor(registry, valType);
    if (!value) {
      return [KeyClass, ValClass, /* @__PURE__ */ new Map(), 0];
    } else if (isU8a(value) || isHex(value)) {
      return decodeMapFromU8a(registry, KeyClass, ValClass, u8aToU8a(value));
    } else if (value instanceof Map) {
      return decodeMapFromMap(registry, KeyClass, ValClass, value);
    } else if (isObject$2(value)) {
      return decodeMapFromMap(registry, KeyClass, ValClass, new Map(Object.entries(value)));
    }
    throw new Error("Map: cannot decode type");
  }
  class CodecMap extends Map {
    constructor(registry, keyType, valType, rawValue, type = "HashMap") {
      const [KeyClass, ValClass, decoded, decodedLength] = decodeMap(registry, keyType, valType, rawValue);
      super(type === "BTreeMap" ? sortMap(decoded) : decoded);
      this.registry = registry;
      this.initialU8aLength = decodedLength;
      this.__internal__KeyClass = KeyClass;
      this.__internal__ValClass = ValClass;
      this.__internal__type = type;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
      let len = compactToU8a(this.size).length;
      for (const [k, v] of this.entries()) {
        len += k.encodedLength + v.encodedLength;
      }
      return len;
    }
    /**
     * @description Returns a hash of the value
     */
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
      return this.size === 0;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
      return compareMap(this, other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
      const inner = [];
      for (const [k, v] of this.entries()) {
        inner.push(k.inspect());
        inner.push(v.inspect());
      }
      return {
        inner,
        outer: [compactToU8a(this.size)]
      };
    }
    /**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */
    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
      const json = {};
      for (const [k, v] of this.entries()) {
        json[k instanceof Raw && k.isAscii ? k.toUtf8() : k.toString()] = v.toHuman(isExtended);
      }
      return json;
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
      const json = {};
      for (const [k, v] of this.entries()) {
        json[k.toString()] = v.toJSON();
      }
      return json;
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
      const json = {};
      for (const [k, v] of this.entries()) {
        json[k instanceof Raw && k.isAscii ? k.toUtf8() : k.toString()] = v.toPrimitive();
      }
      return json;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return `${this.__internal__type}<${this.registry.getClassName(this.__internal__KeyClass) || new this.__internal__KeyClass(this.registry).toRawType()},${this.registry.getClassName(this.__internal__ValClass) || new this.__internal__ValClass(this.registry).toRawType()}>`;
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
      return stringify$1(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
      const encoded = [];
      if (!isBare) {
        encoded.push(compactToU8a(this.size));
      }
      for (const [k, v] of this.entries()) {
        encoded.push(k.toU8a(isBare), v.toU8a(isBare));
      }
      return u8aConcatStrict(encoded);
    }
  }
  class BTreeMap extends CodecMap {
    static with(keyType, valType) {
      return class extends BTreeMap {
        constructor(registry, value) {
          super(registry, keyType, valType, value, "BTreeMap");
        }
      };
    }
  }
  const l$b = logger("BTreeSet");
  function decodeSetFromU8a(registry, ValClass, u8a2) {
    const output2 = /* @__PURE__ */ new Set();
    const [offset, count] = compactFromU8aLim(u8a2);
    const result = new Array(count);
    const [decodedLength] = decodeU8aVec(registry, result, u8a2, offset, ValClass);
    for (let i2 = 0; i2 < count; i2++) {
      output2.add(result[i2]);
    }
    return [ValClass, output2, decodedLength];
  }
  function decodeSetFromSet(registry, ValClass, value) {
    const output2 = /* @__PURE__ */ new Set();
    value.forEach((val) => {
      try {
        output2.add(val instanceof ValClass ? val : new ValClass(registry, val));
      } catch (error) {
        l$b.error("Failed to decode key or value:", error.message);
        throw error;
      }
    });
    return [ValClass, output2, 0];
  }
  function decodeSet$1(registry, valType, value) {
    const ValClass = typeToConstructor(registry, valType);
    if (!value) {
      return [ValClass, /* @__PURE__ */ new Set(), 0];
    } else if (isU8a(value) || isHex(value)) {
      return decodeSetFromU8a(registry, ValClass, u8aToU8a(value));
    } else if (Array.isArray(value) || value instanceof Set) {
      return decodeSetFromSet(registry, ValClass, value);
    }
    throw new Error("BTreeSet: cannot decode type");
  }
  class BTreeSet extends Set {
    constructor(registry, valType, rawValue) {
      const [ValClass, values2, decodedLength] = decodeSet$1(registry, valType, rawValue);
      super(sortSet(values2));
      this.registry = registry;
      this.initialU8aLength = decodedLength;
      this.__internal__ValClass = ValClass;
    }
    static with(valType) {
      return class extends BTreeSet {
        constructor(registry, value) {
          super(registry, valType, value);
        }
      };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
      let len = compactToU8a(this.size).length;
      for (const v of this.values()) {
        len += v.encodedLength;
      }
      return len;
    }
    /**
     * @description Returns a hash of the value
     */
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
      return this.size === 0;
    }
    /**
     * @description The actual set values as a string[]
     */
    get strings() {
      return [...super.values()].map((v) => v.toString());
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
      return compareSet(this, other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
      const inner = [];
      for (const v of this.values()) {
        inner.push(v.inspect());
      }
      return {
        inner,
        outer: [compactToU8a(this.size)]
      };
    }
    /**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */
    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
      const json = [];
      for (const v of this.values()) {
        json.push(v.toHuman(isExtended));
      }
      return json;
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
      const json = [];
      for (const v of this.values()) {
        json.push(v.toJSON());
      }
      return json;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return `BTreeSet<${this.registry.getClassName(this.__internal__ValClass) || new this.__internal__ValClass(this.registry).toRawType()}>`;
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
      const json = [];
      for (const v of this.values()) {
        json.push(v.toPrimitive());
      }
      return json;
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
      return stringify$1(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
      const encoded = [];
      if (!isBare) {
        encoded.push(compactToU8a(this.size));
      }
      for (const v of this.values()) {
        encoded.push(v.toU8a(isBare));
      }
      return u8aConcatStrict(encoded);
    }
  }
  const MAX_LENGTH$1 = 10 * 1024 * 1024;
  function decodeBytesU8a(value) {
    if (!value.length) {
      return [new Uint8Array(), 0];
    }
    const [offset, length2] = compactFromU8aLim(value);
    const total = offset + length2;
    if (length2 > MAX_LENGTH$1) {
      throw new Error(`Bytes length ${length2.toString()} exceeds ${MAX_LENGTH$1}`);
    } else if (total > value.length) {
      throw new Error(`Bytes: required length less than remainder, expected at least ${total}, found ${value.length}`);
    }
    return [value.subarray(offset, total), total];
  }
  class Bytes extends Raw {
    constructor(registry, value) {
      const [u8a2, decodedLength] = isU8a(value) && !(value instanceof Raw) ? decodeBytesU8a(value) : Array.isArray(value) || isString$1(value) ? [u8aToU8a(value), 0] : [value, 0];
      super(registry, u8a2, decodedLength);
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
      return this.length + compactToU8a(this.length).length;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect(isBare) {
      const clength = compactToU8a(this.length);
      return {
        outer: isBare ? [super.toU8a()] : this.length ? [clength, super.toU8a()] : [clength]
      };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return "Bytes";
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
      return isBare ? super.toU8a(isBare) : compactAddLength(this);
    }
  }
  class HashMap extends CodecMap {
    static with(keyType, valType) {
      return class extends HashMap {
        constructor(registry, value) {
          super(registry, keyType, valType, value);
        }
      };
    }
  }
  class bool extends Boolean {
    constructor(registry, value = false) {
      super(isU8a(value) ? value[0] === 1 : value instanceof Boolean ? value.valueOf() : !!value);
      this.initialU8aLength = 1;
      this.registry = registry;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
      return 1;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value (true when it wraps false/default)
     */
    get isEmpty() {
      return this.isFalse;
    }
    /**
     * @description Checks if the value is an empty value (always false)
     */
    get isFalse() {
      return !this.isTrue;
    }
    /**
     * @description Checks if the value is an empty value (always false)
     */
    get isTrue() {
      return this.valueOf();
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
      return this.valueOf() === (other instanceof Boolean ? other.valueOf() : other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
      return {
        outer: [this.toU8a()]
      };
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
      return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
      return this.valueOf();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
      return this.toJSON();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return "bool";
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
      return this.toJSON().toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */
    toU8a(_isBare) {
      return new Uint8Array([this.valueOf() ? 1 : 0]);
    }
  }
  function decodeU8a$5(registry, value) {
    return value[0] === 0 ? null : new bool(registry, value[0] === 1);
  }
  class OptionBool extends Option {
    constructor(registry, value) {
      super(registry, bool, isU8a(value) || isHex(value) ? decodeU8a$5(registry, u8aToU8a(value)) : value);
      this.initialU8aLength = 1;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
      return 1;
    }
    /**
     * @description Checks if the value is an empty value (always false)
     */
    get isFalse() {
      return this.isSome ? !this.value.valueOf() : false;
    }
    /**
     * @description Checks if the value is an empty value (always false)
     */
    get isTrue() {
      return this.isSome ? this.value.valueOf() : false;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
      return { outer: [this.toU8a()] };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType(isBare) {
      return isBare ? "bool" : "Option<bool>";
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
      if (isBare) {
        return super.toU8a(true);
      }
      return this.isSome ? new Uint8Array([this.isTrue ? 1 : 2]) : new Uint8Array([0]);
    }
  }
  class Range extends Tuple {
    constructor(registry, Type2, value, { rangeName = "Range" } = {}) {
      super(registry, [Type2, Type2], value);
      this.__internal__rangeName = rangeName;
    }
    static with(Type2) {
      return class extends Range {
        constructor(registry, value) {
          super(registry, Type2, value);
        }
      };
    }
    /**
     * @description Returns the starting range value
     */
    get start() {
      return this[0];
    }
    /**
     * @description Returns the ending range value
     */
    get end() {
      return this[1];
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return `${this.__internal__rangeName}<${this.start.toRawType()}>`;
    }
  }
  class RangeInclusive extends Range {
    constructor(registry, Type2, value) {
      super(registry, Type2, value, { rangeName: "RangeInclusive" });
    }
    static with(Type2) {
      return class extends RangeInclusive {
        constructor(registry, value) {
          super(registry, Type2, value);
        }
      };
    }
  }
  const MAX_LENGTH = 128 * 1024;
  function decodeText(value) {
    if (isU8a(value)) {
      if (!value.length) {
        return ["", 0];
      }
      if (value instanceof Raw) {
        return [u8aToString(value), 0];
      }
      const [offset, length2] = compactFromU8aLim(value);
      const total = offset + length2;
      if (length2 > MAX_LENGTH) {
        throw new Error(`Text: length ${length2.toString()} exceeds ${MAX_LENGTH}`);
      } else if (total > value.length) {
        throw new Error(`Text: required length less than remainder, expected at least ${total}, found ${value.length}`);
      }
      return [u8aToString(value.subarray(offset, total)), total];
    } else if (isHex(value)) {
      return [u8aToString(hexToU8a(value)), 0];
    }
    return [value ? value.toString() : "", 0];
  }
  class Text extends String {
    constructor(registry, value) {
      const [str, decodedLength] = decodeText(value);
      super(str);
      this.__internal__override = null;
      this.registry = registry;
      this.initialU8aLength = decodedLength;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
      return this.toU8a().length;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
      return this.length === 0;
    }
    /**
     * @description The length of the value
     */
    get length() {
      return super.length;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
      return isString$1(other) ? this.toString() === other.toString() : false;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
      const value = stringToU8a(super.toString());
      return {
        outer: value.length ? [compactToU8a(value.length), value] : [compactToU8a(value.length)]
      };
    }
    /**
     * @description Set an override value for this
     */
    setOverride(override) {
      this.__internal__override = override;
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
      return u8aToHex(this.toU8a(true));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
      return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
      return this.toString();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
      return this.toJSON();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return "Text";
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
      return this.__internal__override || super.toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
      const encoded = stringToU8a(super.toString());
      return isBare ? encoded : compactAddLength(encoded);
    }
  }
  class Type extends Text {
    constructor(registry, value = "") {
      super(registry, value);
      this.setOverride(sanitize(this.toString()));
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return "Type";
    }
  }
  function decodeU8aFixed(value, bitLength) {
    const u8a2 = u8aToU8a(value);
    const byteLength = bitLength / 8;
    if (!u8a2.length) {
      return [new Uint8Array(byteLength), 0];
    }
    if (isU8a(value) ? u8a2.length < byteLength : u8a2.length !== byteLength) {
      throw new Error(`Expected input with ${byteLength} bytes (${bitLength} bits), found ${u8a2.length} bytes`);
    }
    return [u8a2.subarray(0, byteLength), byteLength];
  }
  class U8aFixed extends Raw {
    constructor(registry, value = new Uint8Array(), bitLength = 256) {
      const [u8a2, decodedLength] = decodeU8aFixed(value, bitLength);
      super(registry, u8a2, decodedLength);
    }
    static with(bitLength, typeName) {
      return class extends U8aFixed {
        constructor(registry, value) {
          super(registry, value, bitLength);
        }
        toRawType() {
          return typeName || super.toRawType();
        }
      };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return `[u8;${this.length}]`;
    }
  }
  function decodeRaw(registry, typeName, value) {
    const Type2 = typeToConstructor(registry, typeName);
    if (isU8a(value) || isHex(value)) {
      try {
        const [, u8a2] = isHex(value) ? [0, u8aToU8a(value)] : value instanceof Raw ? [0, value.subarray()] : compactStripLength(value);
        return [Type2, new Type2(registry, u8a2), value];
      } catch {
        return [Type2, null, value];
      }
    }
    const instance2 = new Type2(registry, value);
    return [Type2, instance2, compactAddLength(instance2.toU8a())];
  }
  class WrapperKeepOpaque extends Bytes {
    constructor(registry, typeName, value, { opaqueName = "WrapperKeepOpaque" } = {}) {
      const [Type2, decoded, u8a2] = decodeRaw(registry, typeName, value);
      super(registry, u8a2);
      this.__internal__Type = Type2;
      this.__internal__decoded = decoded;
      this.__internal__opaqueName = opaqueName;
    }
    static with(Type2) {
      return class extends WrapperKeepOpaque {
        constructor(registry, value) {
          super(registry, Type2, value);
        }
      };
    }
    /**
     * @description Checks if the wrapper is decodable
     */
    get isDecoded() {
      return !!this.__internal__decoded;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
      return this.__internal__decoded ? {
        inner: [this.__internal__decoded.inspect()],
        outer: [compactToU8a(this.length)]
      } : {
        outer: [compactToU8a(this.length), this.toU8a(true)]
      };
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
      return this.__internal__decoded ? this.__internal__decoded.toHuman(isExtended) : super.toHuman();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
      return this.__internal__decoded ? this.__internal__decoded.toPrimitive() : super.toPrimitive();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return `${this.__internal__opaqueName}<${this.registry.getClassName(this.__internal__Type) || (this.__internal__decoded ? this.__internal__decoded.toRawType() : new this.__internal__Type(this.registry).toRawType())}>`;
    }
    /**
     * @description Converts the Object to to a string (either decoded or bytes)
     */
    toString() {
      return this.__internal__decoded ? this.__internal__decoded.toString() : super.toString();
    }
    /**
     * @description Returns the decoded that the WrapperKeepOpaque represents (if available), throws if non-decodable
     */
    unwrap() {
      if (!this.__internal__decoded) {
        throw new Error(`${this.__internal__opaqueName}: unwrapping an undecodable value`);
      }
      return this.__internal__decoded;
    }
  }
  class WrapperOpaque extends WrapperKeepOpaque {
    constructor(registry, typeName, value) {
      super(registry, typeName, value, { opaqueName: "WrapperOpaque" });
    }
    static with(Type2) {
      return class extends WrapperOpaque {
        constructor(registry, value) {
          super(registry, Type2, value);
        }
      };
    }
    /**
     * @description The inner value for this wrapper, in all cases it _should_ be decodable (unlike KeepOpaque)
     */
    get inner() {
      return this.unwrap();
    }
  }
  class Float extends Number {
    constructor(registry, value, { bitLength = 32 } = {}) {
      super(isU8a(value) || isHex(value) ? value.length === 0 ? 0 : u8aToFloat(u8aToU8a(value), { bitLength }) : value || 0);
      this.__internal__bitLength = bitLength;
      this.encodedLength = bitLength / 8;
      this.initialU8aLength = this.encodedLength;
      this.registry = registry;
    }
    static with(bitLength) {
      return class extends Float {
        constructor(registry, value) {
          super(registry, value, { bitLength });
        }
      };
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Returns true if the type wraps an empty/default all-0 value
     */
    get isEmpty() {
      return this.valueOf() === 0;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
      return this.valueOf() === Number(other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
      return {
        outer: [this.toU8a()]
      };
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
      return this.toString();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
      return this.toHex();
    }
    /**
     * @description Returns the number representation (Same as valueOf)
     */
    toNumber() {
      return this.valueOf();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
      return this.toNumber();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return `f${this.__internal__bitLength}`;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */
    toU8a(_isBare) {
      return floatToU8a(this, {
        bitLength: this.__internal__bitLength
      });
    }
  }
  function decodeJson(value) {
    return Object.entries(value || {});
  }
  class Json extends Map {
    constructor(registry, value) {
      const decoded = decodeJson(value);
      super(decoded);
      this.registry = registry;
      objectProperties(this, decoded.map(([k]) => k), (k) => this.get(k));
    }
    /**
     * @description Always 0, never encodes as a Uint8Array
     */
    get encodedLength() {
      return 0;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
      return [...this.keys()].length === 0;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
      return compareMap(this, other);
    }
    /**
     * @description Returns a typed value from the internal map
     */
    getT(key) {
      return this.get(key);
    }
    /**
     * @description Unimplemented, will throw
     */
    inspect() {
      throw new Error("Unimplemented");
    }
    /**
     * @description Unimplemented, will throw
     */
    toHex() {
      throw new Error("Unimplemented");
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
      return [...this.entries()].reduce((json, [key, value]) => {
        json[key] = isFunction$2(value.toHuman) ? value.toHuman() : value;
        return json;
      }, {});
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
      return [...this.entries()].reduce((json, [key, value]) => {
        json[key] = value;
        return json;
      }, {});
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
      return [...this.entries()].reduce((json, [key, value]) => {
        json[key] = isFunction$2(value.toPrimitive) ? value.toPrimitive() : value;
        return json;
      }, {});
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return "Json";
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
      return stringify$1(this.toJSON());
    }
    /**
     * @description Unimplemented, will throw
     */
    toU8a(_isBare) {
      throw new Error("Unimplemented");
    }
  }
  function encodeSet(setValues, values2) {
    const encoded = new BN(0);
    for (let i2 = 0, count = values2.length; i2 < count; i2++) {
      encoded.ior(bnToBn(setValues[values2[i2]] || 0));
    }
    return encoded;
  }
  function decodeSetArray(setValues, values2) {
    const count = values2.length;
    const result = new Array(count);
    for (let i2 = 0; i2 < count; i2++) {
      const key = values2[i2];
      if (isUndefined$1(setValues[key])) {
        throw new Error(`Set: Invalid key '${key}' passed to Set, allowed ${Object.keys(setValues).join(", ")}`);
      }
      result[i2] = key;
    }
    return result;
  }
  function decodeSetNumber(setValues, _value) {
    const bn2 = bnToBn(_value);
    const keys2 = Object.keys(setValues);
    const result = [];
    for (let i2 = 0, count = keys2.length; i2 < count; i2++) {
      const key = keys2[i2];
      if (bn2.and(bnToBn(setValues[key])).eq(bnToBn(setValues[key]))) {
        result.push(key);
      }
    }
    const computed = encodeSet(setValues, result);
    if (!bn2.eq(computed)) {
      throw new Error(`Set: Mismatch decoding '${bn2.toString()}', computed as '${computed.toString()}' with ${result.join(", ")}`);
    }
    return result;
  }
  function decodeSet(setValues, value = 0, bitLength) {
    if (bitLength % 8 !== 0) {
      throw new Error(`Expected valid bitLength, power of 8, found ${bitLength}`);
    }
    const byteLength = bitLength / 8;
    if (isU8a(value)) {
      return value.length === 0 ? [] : decodeSetNumber(setValues, u8aToBn(value.subarray(0, byteLength), { isLe: true }));
    } else if (isString$1(value)) {
      return decodeSet(setValues, u8aToU8a(value), byteLength);
    } else if (value instanceof Set || Array.isArray(value)) {
      const input = Array.isArray(value) ? value : [...value.values()];
      return decodeSetArray(setValues, input);
    }
    return decodeSetNumber(setValues, value);
  }
  class CodecSet extends Set {
    constructor(registry, setValues, value, bitLength = 8) {
      super(decodeSet(setValues, value, bitLength));
      this.add = (key) => {
        if (this.__internal__allowed && isUndefined$1(this.__internal__allowed[key])) {
          throw new Error(`Set: Invalid key '${key}' on add`);
        }
        super.add(key);
        return this;
      };
      this.registry = registry;
      this.__internal__allowed = setValues;
      this.__internal__byteLength = bitLength / 8;
    }
    static with(values2, bitLength) {
      var _a;
      return _a = class extends CodecSet {
        constructor(registry, value) {
          super(registry, values2, value, bitLength);
        }
      }, (() => {
        const keys2 = Object.keys(values2);
        const count = keys2.length;
        const isKeys = new Array(count);
        for (let i2 = 0; i2 < count; i2++) {
          isKeys[i2] = `is${stringPascalCase(keys2[i2])}`;
        }
        objectProperties(_a.prototype, isKeys, (_2, i2, self2) => self2.strings.includes(keys2[i2]));
      })(), _a;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
      return this.__internal__byteLength;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description true is the Set contains no values
     */
    get isEmpty() {
      return this.size === 0;
    }
    /**
     * @description The actual set values as a string[]
     */
    get strings() {
      return [...super.values()];
    }
    /**
     * @description The encoded value for the set members
     */
    get valueEncoded() {
      return encodeSet(this.__internal__allowed, this.strings);
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
      if (Array.isArray(other)) {
        return compareArray(this.strings.sort(), other.sort());
      } else if (other instanceof Set) {
        return this.eq([...other.values()]);
      } else if (isNumber$1(other) || isBn(other)) {
        return this.valueEncoded.eq(bnToBn(other));
      }
      return false;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
      return {
        outer: [this.toU8a()]
      };
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
      return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
      return this.strings;
    }
    /**
     * @description The encoded value for the set members
     */
    toNumber() {
      return this.valueEncoded.toNumber();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
      return this.toJSON();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return stringify$1({ _set: this.__internal__allowed });
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
      return `[${this.strings.join(", ")}]`;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */
    toU8a(_isBare) {
      return bnToU8a(this.valueEncoded, {
        bitLength: this.__internal__byteLength * 8,
        isLe: true
      });
    }
  }
  class f32 extends Float.with(32) {
    constructor() {
      super(...arguments);
      this.__FloatType = "f32";
    }
  }
  class f64 extends Float.with(64) {
    constructor() {
      super(...arguments);
      this.__FloatType = "f64";
    }
  }
  class i8 extends Int.with(8) {
    constructor() {
      super(...arguments);
      this.__IntType = "i8";
    }
  }
  class i16 extends Int.with(16) {
    constructor() {
      super(...arguments);
      this.__IntType = "i16";
    }
  }
  class i32 extends Int.with(32) {
    constructor() {
      super(...arguments);
      this.__IntType = "i32";
    }
  }
  class i64 extends Int.with(64) {
    constructor() {
      super(...arguments);
      this.__IntType = "i64";
    }
  }
  class i128 extends Int.with(128) {
    constructor() {
      super(...arguments);
      this.__IntType = "i128";
    }
  }
  class i256 extends Int.with(256) {
    constructor() {
      super(...arguments);
      this.__IntType = "i256";
    }
  }
  class isize extends i32 {
    constructor(registry, value) {
      super(registry, value);
      throw new Error("The `isize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally i64) and WASM (always i32) code. Use one of the `i32` or `i64` types explicitly.");
    }
  }
  class u8 extends UInt.with(8) {
    constructor() {
      super(...arguments);
      this.__UIntType = "u8";
    }
  }
  class u16 extends UInt.with(16) {
    constructor() {
      super(...arguments);
      this.__UIntType = "u16";
    }
  }
  class u32 extends UInt.with(32) {
    constructor() {
      super(...arguments);
      this.__UIntType = "u32";
    }
  }
  class u64 extends UInt.with(64) {
    constructor() {
      super(...arguments);
      this.__UIntType = "u64";
    }
  }
  class u128 extends UInt.with(128) {
    constructor() {
      super(...arguments);
      this.__UIntType = "u128";
    }
  }
  class u256 extends UInt.with(256) {
    constructor() {
      super(...arguments);
      this.__UIntType = "u256";
    }
  }
  class usize extends u32 {
    constructor(registry, value) {
      super(registry, value);
      throw new Error("The `usize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally u64) and WASM (always u32) code. Use one of the `u32` or `u64` types explicitly.");
    }
  }
  function typeSplit(type) {
    const result = [];
    let c = 0;
    let f = 0;
    let s = 0;
    let t = 0;
    let start = 0;
    for (let i2 = 0, count = type.length; i2 < count; i2++) {
      switch (type[i2]) {
        case ",": {
          if (!(c || f || s || t)) {
            result.push(type.substring(start, i2).trim());
            start = i2 + 1;
          }
          break;
        }
        case "<":
          c++;
          break;
        case ">":
          c--;
          break;
        case "[":
          f++;
          break;
        case "]":
          f--;
          break;
        case "{":
          s++;
          break;
        case "}":
          s--;
          break;
        case "(":
          t++;
          break;
        case ")":
          t--;
          break;
      }
    }
    if (c || f || s || t) {
      throw new Error(`Invalid definition (missing terminators) found in ${type}`);
    }
    result.push(type.substring(start, type.length).trim());
    return result;
  }
  const KNOWN_INTERNALS = ["_alias", "_fallback"];
  function getTypeString(typeOrObj) {
    return isString$1(typeOrObj) ? typeOrObj.toString() : JSON.stringify(typeOrObj);
  }
  function isRustEnum(details) {
    const values2 = Object.values(details);
    if (values2.some((v) => isNumber$1(v))) {
      if (!values2.every((v) => isNumber$1(v) && v >= 0 && v <= 255)) {
        throw new Error("Invalid number-indexed enum definition");
      }
      return false;
    }
    return true;
  }
  function _decodeEnum(value, details, count, fallbackType) {
    value.info = TypeDefInfo.Enum;
    value.fallbackType = fallbackType;
    if (Array.isArray(details)) {
      value.sub = details.map((name, index2) => ({
        index: index2,
        info: TypeDefInfo.Plain,
        name,
        type: "Null"
      }));
    } else if (isRustEnum(details)) {
      value.sub = Object.entries(details).map(([name, typeOrObj], index2) => objectSpread({}, getTypeDef(getTypeString(typeOrObj || "Null"), { name }, count), { index: index2 }));
    } else {
      value.sub = Object.entries(details).map(([name, index2]) => ({
        index: index2,
        info: TypeDefInfo.Plain,
        name,
        type: "Null"
      }));
    }
    return value;
  }
  function _decodeSet(value, details, fallbackType) {
    value.info = TypeDefInfo.Set;
    value.fallbackType = fallbackType;
    value.length = details._bitLength;
    value.sub = Object.entries(details).filter(([name]) => !name.startsWith("_")).map(([name, index2]) => ({
      index: index2,
      info: TypeDefInfo.Plain,
      name,
      type: "Null"
    }));
    return value;
  }
  function _decodeStruct(value, type, _2, count) {
    const parsed = JSON.parse(type);
    const keys2 = Object.keys(parsed);
    if (parsed._enum) {
      return _decodeEnum(value, parsed._enum, count, parsed._fallback);
    } else if (parsed._set) {
      return _decodeSet(value, parsed._set, parsed._fallback);
    }
    value.alias = parsed._alias ? new Map(Object.entries(parsed._alias)) : void 0;
    value.fallbackType = parsed._fallback;
    value.sub = keys2.filter((name) => !KNOWN_INTERNALS.includes(name)).map((name) => getTypeDef(getTypeString(parsed[name]), { name }, count));
    return value;
  }
  function _decodeFixedVec(value, type, _2, count) {
    const max2 = type.length - 1;
    let index2 = -1;
    let inner = 0;
    for (let i2 = 1; i2 < max2 && index2 === -1; i2++) {
      switch (type[i2]) {
        case ";": {
          if (inner === 0) {
            index2 = i2;
          }
          break;
        }
        case "[":
        case "(":
        case "<":
          inner++;
          break;
        case "]":
        case ")":
        case ">":
          inner--;
          break;
      }
    }
    if (index2 === -1) {
      throw new Error(`${type}: Unable to extract location of ';'`);
    }
    const vecType = type.substring(1, index2);
    const [strLength, displayName] = type.substring(index2 + 1, max2).split(";");
    const length2 = parseInt(strLength.trim(), 10);
    if (length2 > 2048) {
      throw new Error(`${type}: Only support for [Type; <length>], where length <= 2048`);
    }
    value.displayName = displayName;
    value.length = length2;
    value.sub = getTypeDef(vecType, {}, count);
    return value;
  }
  function _decodeTuple(value, _2, subType, count) {
    value.sub = subType.length === 0 ? [] : typeSplit(subType).map((inner) => getTypeDef(inner, {}, count));
    return value;
  }
  function _decodeAnyInt(value, type, _2, clazz) {
    const [strLength, displayName] = type.substring(clazz.length + 1, type.length - 1).split(",");
    const length2 = parseInt(strLength.trim(), 10);
    if (length2 > 8192 || length2 % 8) {
      throw new Error(`${type}: Only support for ${clazz}<bitLength>, where length <= 8192 and a power of 8, found ${length2}`);
    }
    value.displayName = displayName;
    value.length = length2;
    return value;
  }
  function _decodeInt(value, type, subType) {
    return _decodeAnyInt(value, type, subType, "Int");
  }
  function _decodeUInt(value, type, subType) {
    return _decodeAnyInt(value, type, subType, "UInt");
  }
  function _decodeDoNotConstruct(value, type, _2) {
    const NAME_LENGTH = "DoNotConstruct".length;
    value.displayName = type.substring(NAME_LENGTH + 1, type.length - 1);
    return value;
  }
  function hasWrapper(type, [start, end]) {
    return type.substring(0, start.length) === start && type.slice(-1 * end.length) === end;
  }
  const nestedExtraction = [
    ["[", "]", TypeDefInfo.VecFixed, _decodeFixedVec],
    ["{", "}", TypeDefInfo.Struct, _decodeStruct],
    ["(", ")", TypeDefInfo.Tuple, _decodeTuple],
    // the inner for these are the same as tuple, multiple values
    ["BTreeMap<", ">", TypeDefInfo.BTreeMap, _decodeTuple],
    ["HashMap<", ">", TypeDefInfo.HashMap, _decodeTuple],
    ["Int<", ">", TypeDefInfo.Int, _decodeInt],
    ["Result<", ">", TypeDefInfo.Result, _decodeTuple],
    ["UInt<", ">", TypeDefInfo.UInt, _decodeUInt],
    ["DoNotConstruct<", ">", TypeDefInfo.DoNotConstruct, _decodeDoNotConstruct]
  ];
  const wrappedExtraction = [
    ["BTreeSet<", ">", TypeDefInfo.BTreeSet],
    ["Compact<", ">", TypeDefInfo.Compact],
    ["Linkage<", ">", TypeDefInfo.Linkage],
    ["Opaque<", ">", TypeDefInfo.WrapperOpaque],
    ["Option<", ">", TypeDefInfo.Option],
    ["Range<", ">", TypeDefInfo.Range],
    ["RangeInclusive<", ">", TypeDefInfo.RangeInclusive],
    ["Vec<", ">", TypeDefInfo.Vec],
    ["WrapperKeepOpaque<", ">", TypeDefInfo.WrapperKeepOpaque],
    ["WrapperOpaque<", ">", TypeDefInfo.WrapperOpaque]
  ];
  function extractSubType(type, [start, end]) {
    return type.substring(start.length, type.length - end.length);
  }
  function getTypeDef(_type, { displayName, name } = {}, count = 0) {
    const type = sanitize(_type);
    const value = { displayName, info: TypeDefInfo.Plain, name, type };
    if (++count > 64) {
      throw new Error("getTypeDef: Maximum nested limit reached");
    }
    const nested2 = nestedExtraction.find((nested3) => hasWrapper(type, nested3));
    if (nested2) {
      value.info = nested2[2];
      return nested2[3](value, type, extractSubType(type, nested2), count);
    }
    const wrapped = wrappedExtraction.find((wrapped2) => hasWrapper(type, wrapped2));
    if (wrapped) {
      value.info = wrapped[2];
      value.sub = getTypeDef(extractSubType(type, wrapped), {}, count);
    }
    return value;
  }
  function getTypeDefType({ lookupName, type }) {
    return lookupName || type;
  }
  function getSubDefArray(value) {
    if (!Array.isArray(value.sub)) {
      throw new Error(`Expected subtype as TypeDef[] in ${stringify$1(value)}`);
    }
    return value.sub;
  }
  function getSubDef(value) {
    if (!value.sub || Array.isArray(value.sub)) {
      throw new Error(`Expected subtype as TypeDef in ${stringify$1(value)}`);
    }
    return value.sub;
  }
  function getSubType(value) {
    return getTypeDefType(getSubDef(value));
  }
  function getTypeClassMap(value) {
    const subs = getSubDefArray(value);
    const map2 = {};
    for (let i2 = 0, count = subs.length; i2 < count; i2++) {
      map2[subs[i2].name] = getTypeDefType(subs[i2]);
    }
    return map2;
  }
  function getTypeClassArray(value) {
    return getSubDefArray(value).map(getTypeDefType);
  }
  function createInt(Clazz, { displayName, length: length2 }) {
    if (!isNumber$1(length2)) {
      throw new Error(`Expected bitLength information for ${displayName || Clazz.constructor.name}<bitLength>`);
    }
    return Clazz.with(length2, displayName);
  }
  function createHashMap(Clazz, value) {
    const [keyType, valueType] = getTypeClassArray(value);
    return Clazz.with(keyType, valueType);
  }
  function createWithSub(Clazz, value) {
    return Clazz.with(getSubType(value));
  }
  const infoMapping = {
    [TypeDefInfo.BTreeMap]: (_registry, value) => createHashMap(BTreeMap, value),
    [TypeDefInfo.BTreeSet]: (_registry, value) => createWithSub(BTreeSet, value),
    [TypeDefInfo.Compact]: (_registry, value) => createWithSub(Compact, value),
    [TypeDefInfo.DoNotConstruct]: (_registry, value) => DoNotConstruct.with(value.displayName || value.type),
    [TypeDefInfo.Enum]: (_registry, value) => {
      const subs = getSubDefArray(value);
      return Enum.with(subs.every(({ type }) => type === "Null") ? subs.reduce((out, { index: index2, name }, count) => {
        out[name] = index2 || count;
        return out;
      }, {}) : getTypeClassMap(value));
    },
    [TypeDefInfo.HashMap]: (_registry, value) => createHashMap(HashMap, value),
    [TypeDefInfo.Int]: (_registry, value) => createInt(Int, value),
    // We have circular deps between Linkage & Struct
    [TypeDefInfo.Linkage]: (_registry, value) => {
      const type = `Option<${getSubType(value)}>`;
      const Clazz = Struct.with({ previous: type, next: type });
      Clazz.prototype.toRawType = function() {
        return `Linkage<${this.next.toRawType(true)}>`;
      };
      return Clazz;
    },
    [TypeDefInfo.Null]: (_registry, _value) => Null,
    [TypeDefInfo.Option]: (_registry, value) => {
      if (!value.sub || Array.isArray(value.sub)) {
        throw new Error("Expected type information for Option");
      }
      return createWithSub(Option, value);
    },
    [TypeDefInfo.Plain]: (registry, value) => registry.getOrUnknown(value.type),
    [TypeDefInfo.Range]: (_registry, value) => createWithSub(Range, value),
    [TypeDefInfo.RangeInclusive]: (_registry, value) => createWithSub(RangeInclusive, value),
    [TypeDefInfo.Result]: (_registry, value) => {
      const [Ok, Err] = getTypeClassArray(value);
      return Result$1.with({ Err, Ok });
    },
    [TypeDefInfo.Set]: (_registry, value) => CodecSet.with(getSubDefArray(value).reduce((result, { index: index2, name }) => {
      result[name] = index2;
      return result;
    }, {}), value.length),
    [TypeDefInfo.Si]: (registry, value) => getTypeClass(registry, registry.lookup.getTypeDef(value.type)),
    [TypeDefInfo.Struct]: (_registry, value) => Struct.with(getTypeClassMap(value), value.alias),
    [TypeDefInfo.Tuple]: (_registry, value) => Tuple.with(getTypeClassArray(value)),
    [TypeDefInfo.UInt]: (_registry, value) => createInt(UInt, value),
    [TypeDefInfo.Vec]: (_registry, { sub }) => {
      if (!sub || Array.isArray(sub)) {
        throw new Error("Expected type information for vector");
      }
      return sub.type === "u8" ? Bytes : Vec.with(getTypeDefType(sub));
    },
    [TypeDefInfo.VecFixed]: (_registry, { displayName, length: length2, sub }) => {
      if (!isNumber$1(length2) || !sub || Array.isArray(sub)) {
        throw new Error("Expected length & type information for fixed vector");
      }
      return sub.type === "u8" ? U8aFixed.with(length2 * 8, displayName) : VecFixed.with(getTypeDefType(sub), length2);
    },
    [TypeDefInfo.WrapperKeepOpaque]: (_registry, value) => createWithSub(WrapperKeepOpaque, value),
    [TypeDefInfo.WrapperOpaque]: (_registry, value) => createWithSub(WrapperOpaque, value)
  };
  function constructTypeClass(registry, typeDef) {
    try {
      const Type2 = infoMapping[typeDef.info](registry, typeDef);
      if (!Type2) {
        throw new Error("No class created");
      }
      if (!Type2.__fallbackType && typeDef.fallbackType) {
        Type2.__fallbackType = typeDef.fallbackType;
      }
      return Type2;
    } catch (error) {
      throw new Error(`Unable to construct class from ${stringify$1(typeDef)}: ${error.message}`);
    }
  }
  function getTypeClass(registry, typeDef) {
    return registry.getUnsafe(typeDef.type, false, typeDef);
  }
  function createClassUnsafe(registry, type) {
    return (
      // just retrieve via name, no creation via typeDef
      registry.getUnsafe(type) || // we don't have an existing type, create the class via typeDef
      getTypeClass(registry, registry.isLookupType(type) ? registry.lookup.getTypeDef(type) : getTypeDef(type))
    );
  }
  function checkInstance(created, matcher) {
    const u8a2 = created.toU8a();
    const rawType = created.toRawType();
    const isOk = (
      // full match, all ok
      u8aEq(u8a2, matcher) || // on a length-prefixed type, just check the actual length
      ["Bytes", "Text", "Type"].includes(rawType) && matcher.length === created.length || // when the created is empty and matcher is also empty, let it slide...
      created.isEmpty && matcher.every((v) => !v)
    );
    if (!isOk) {
      throw new Error(`${rawType}:: Decoded input doesn't match input, received ${u8aToHex(matcher, 512)} (${matcher.length} bytes), created ${u8aToHex(u8a2, 512)} (${u8a2.length} bytes)`);
    }
  }
  function checkPedantic(created, [value]) {
    if (isU8a(value)) {
      checkInstance(created, value);
    } else if (isHex(value)) {
      checkInstance(created, u8aToU8a(value));
    }
  }
  function initType(registry, Type2, params = [], { blockHash, isFallback, isOptional, isPedantic } = {}) {
    const created = new (isOptional ? Option.with(Type2) : Type2)(registry, ...params);
    isPedantic && checkPedantic(created, params);
    if (blockHash) {
      created.createdAtHash = createTypeUnsafe(registry, "BlockHash", [blockHash]);
    }
    if (isFallback) {
      created.isStorageFallback = true;
    }
    return created;
  }
  function createTypeUnsafe(registry, type, params = [], options = {}) {
    let Clazz = null;
    let firstError = null;
    try {
      Clazz = createClassUnsafe(registry, type);
      return initType(registry, Clazz, params, options);
    } catch (error) {
      firstError = new Error(`createType(${type}):: ${error.message}`);
    }
    if (Clazz && Clazz.__fallbackType) {
      try {
        Clazz = createClassUnsafe(registry, Clazz.__fallbackType);
        return initType(registry, Clazz, params, options);
      } catch {
      }
    }
    throw firstError;
  }
  const stringIdentity = (value) => value.toString();
  const INFO_WRAP = ["BTreeMap", "BTreeSet", "Compact", "HashMap", "Option", "Result", "Vec"];
  function paramsNotation(outer, inner, transform = stringIdentity) {
    return `${outer}${inner ? `<${(Array.isArray(inner) ? inner : [inner]).map(transform).join(", ")}>` : ""}`;
  }
  function encodeWithParams(registry, typeDef, outer) {
    const { info: info2, sub } = typeDef;
    switch (info2) {
      case TypeDefInfo.BTreeMap:
      case TypeDefInfo.BTreeSet:
      case TypeDefInfo.Compact:
      case TypeDefInfo.HashMap:
      case TypeDefInfo.Linkage:
      case TypeDefInfo.Option:
      case TypeDefInfo.Range:
      case TypeDefInfo.RangeInclusive:
      case TypeDefInfo.Result:
      case TypeDefInfo.Vec:
      case TypeDefInfo.WrapperKeepOpaque:
      case TypeDefInfo.WrapperOpaque:
        return paramsNotation(outer, sub, (p) => encodeTypeDef(registry, p));
    }
    throw new Error(`Unable to encode ${stringify$1(typeDef)} with params`);
  }
  function encodeSubTypes(registry, sub, asEnum, extra) {
    const names = sub.map(({ name }) => name);
    if (!names.every((n) => !!n)) {
      throw new Error(`Subtypes does not have consistent names, ${names.join(", ")}`);
    }
    const inner = objectSpread({}, extra);
    for (let i2 = 0, count = sub.length; i2 < count; i2++) {
      const def = sub[i2];
      inner[def.name] = encodeTypeDef(registry, def);
    }
    return stringify$1(asEnum ? { _enum: inner } : inner);
  }
  const encoders = {
    [TypeDefInfo.BTreeMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, "BTreeMap"),
    [TypeDefInfo.BTreeSet]: (registry, typeDef) => encodeWithParams(registry, typeDef, "BTreeSet"),
    [TypeDefInfo.Compact]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Compact"),
    [TypeDefInfo.DoNotConstruct]: (registry, { displayName, lookupIndex, lookupName }) => `DoNotConstruct<${lookupName || displayName || (isUndefined$1(lookupIndex) ? "Unknown" : registry.createLookupType(lookupIndex))}>`,
    [TypeDefInfo.Enum]: (registry, { sub }) => {
      if (!Array.isArray(sub)) {
        throw new Error("Unable to encode Enum type");
      }
      return sub.every(({ type }) => type === "Null") ? stringify$1({ _enum: sub.map(({ name }, index2) => `${name || `Empty${index2}`}`) }) : encodeSubTypes(registry, sub, true);
    },
    [TypeDefInfo.HashMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, "HashMap"),
    [TypeDefInfo.Int]: (_registry, { length: length2 = 32 }) => `Int<${length2}>`,
    [TypeDefInfo.Linkage]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Linkage"),
    [TypeDefInfo.Null]: (_registry, _typeDef) => "Null",
    [TypeDefInfo.Option]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Option"),
    [TypeDefInfo.Plain]: (_registry, { displayName, type }) => displayName || type,
    [TypeDefInfo.Range]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Range"),
    [TypeDefInfo.RangeInclusive]: (registry, typeDef) => encodeWithParams(registry, typeDef, "RangeInclusive"),
    [TypeDefInfo.Result]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Result"),
    [TypeDefInfo.Set]: (_registry, { length: length2 = 8, sub }) => {
      if (!Array.isArray(sub)) {
        throw new Error("Unable to encode Set type");
      }
      return stringify$1({
        _set: sub.reduce((all2, { index: index2, name }, count) => objectSpread(all2, { [`${name || `Unknown${index2 || count}`}`]: index2 || count }), { _bitLength: length2 || 8 })
      });
    },
    [TypeDefInfo.Si]: (_registry, { lookupName, type }) => lookupName || type,
    [TypeDefInfo.Struct]: (registry, { alias: alias2, sub }) => {
      if (!Array.isArray(sub)) {
        throw new Error("Unable to encode Struct type");
      }
      return encodeSubTypes(registry, sub, false, alias2 ? {
        _alias: [...alias2.entries()].reduce((all2, [k, v]) => objectSpread(all2, { [k]: v }), {})
      } : {});
    },
    [TypeDefInfo.Tuple]: (registry, { sub }) => {
      if (!Array.isArray(sub)) {
        throw new Error("Unable to encode Tuple type");
      }
      return `(${sub.map((type) => encodeTypeDef(registry, type)).join(",")})`;
    },
    [TypeDefInfo.UInt]: (_registry, { length: length2 = 32 }) => `UInt<${length2}>`,
    [TypeDefInfo.Vec]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Vec"),
    [TypeDefInfo.VecFixed]: (_registry, { length: length2, sub }) => {
      if (!isNumber$1(length2) || !sub || Array.isArray(sub)) {
        throw new Error("Unable to encode VecFixed type");
      }
      return `[${sub.type};${length2}]`;
    },
    [TypeDefInfo.WrapperKeepOpaque]: (registry, typeDef) => encodeWithParams(registry, typeDef, "WrapperKeepOpaque"),
    [TypeDefInfo.WrapperOpaque]: (registry, typeDef) => encodeWithParams(registry, typeDef, "WrapperOpaque")
  };
  function encodeType(registry, typeDef, withLookup = true) {
    return withLookup && typeDef.lookupName ? typeDef.lookupName : encoders[typeDef.info](registry, typeDef);
  }
  function encodeTypeDef(registry, typeDef) {
    return typeDef.displayName && !INFO_WRAP.some((i2) => typeDef.displayName === i2) ? typeDef.displayName : encodeType(registry, typeDef);
  }
  function withTypeString(registry, typeDef) {
    return objectSpread({}, typeDef, {
      type: encodeType(registry, typeDef, false)
    });
  }
  const XCM_MAPPINGS = ["AssetInstance", "Fungibility", "Junction", "Junctions", "MultiAsset", "MultiAssetFilter", "MultiLocation", "Response", "WildFungibility", "WildMultiAsset", "Xcm", "XcmError", "XcmOrder"];
  function mapXcmTypes(version2) {
    return XCM_MAPPINGS.reduce((all2, key) => objectSpread(all2, { [key]: `${key}${version2}` }), {});
  }
  const v0 = {
    FungibilityV0: "FungibilityV1",
    WildFungibilityV0: "WildFungibilityV1",
    AssetInstanceV0: {
      _enum: {
        Undefined: "Null",
        Index8: "u8",
        Index16: "Compact<u16>",
        Index32: "Compact<u32>",
        Index64: "Compact<u64>",
        Index128: "Compact<u128>",
        Array4: "[u8; 4]",
        Array8: "[u8; 8]",
        Array16: "[u8; 16]",
        Array32: "[u8; 32]",
        Blob: "Vec<u8>"
      }
    },
    JunctionV0: {
      _enum: {
        Parent: "Null",
        Parachain: "Compact<u32>",
        AccountId32: {
          network: "NetworkId",
          id: "AccountId"
        },
        AccountIndex64: {
          network: "NetworkId",
          index: "Compact<u64>"
        },
        AccountKey20: {
          network: "NetworkId",
          key: "[u8; 20]"
        },
        PalletInstance: "u8",
        GeneralIndex: "Compact<u128>",
        GeneralKey: "Vec<u8>",
        OnlyChild: "Null",
        Plurality: {
          id: "BodyId",
          part: "BodyPart"
        }
      }
    },
    MultiAssetV0: {
      _enum: {
        None: "Null",
        All: "Null",
        AllFungible: "Null",
        AllNonFungible: "Null",
        AllAbstractFungible: "Vec<u8>",
        AllAbstractNonFungible: "Vec<u8>",
        AllConcreteFungible: "MultiLocationV0",
        AllConcreteNonFungible: "MultiLocationV0",
        AbstractFungible: {
          id: "Vec<u8>",
          instance: "Compact<u128>"
        },
        AbstractNonFungible: {
          class: "Vec<u8>",
          instance: "AssetInstanceV0"
        },
        ConcreteFungible: {
          id: "MultiLocationV0",
          amount: "Compact<u128>"
        },
        ConcreteNonFungible: {
          class: "MultiLocationV0",
          instance: "AssetInstanceV0"
        }
      }
    },
    MultiLocationV0: {
      _enum: {
        Here: "Null",
        X1: "JunctionV0",
        X2: "(JunctionV0, JunctionV0)",
        X3: "(JunctionV0, JunctionV0, JunctionV0)",
        X4: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
        X5: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
        X6: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
        X7: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
        X8: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)"
      }
    },
    OriginKindV0: {
      _enum: ["Native", "SovereignAccount", "Superuser", "Xcm"]
    },
    ResponseV0: {
      _enum: {
        Assets: "Vec<MultiAssetV0>"
      }
    },
    XcmV0: {
      _enum: {
        WithdrawAsset: {
          assets: "Vec<MultiAssetV0>",
          effects: "Vec<XcmOrderV0>"
        },
        ReserveAssetDeposit: {
          assets: "Vec<MultiAssetV0>",
          effects: "Vec<XcmOrderV0>"
        },
        ReceiveTeleportedAsset: {
          assets: "Vec<MultiAssetV0>",
          effects: "Vec<XcmOrderV0>"
        },
        QueryResponse: {
          queryId: "Compact<u64>",
          response: "ResponseV0"
        },
        TransferAsset: {
          assets: "Vec<MultiAssetV0>",
          dest: "MultiLocationV0"
        },
        TransferReserveAsset: {
          assets: "Vec<MultiAssetV0>",
          dest: "MultiLocationV0",
          effects: "Vec<XcmOrderV0>"
        },
        Transact: {
          originType: "XcmOriginKind",
          requireWeightAtMost: "u64",
          call: "DoubleEncodedCall"
        },
        HrmpNewChannelOpenRequest: {
          sender: "Compact<u32>",
          maxMessageSize: "Compact<u32>",
          maxCapacity: "Compact<u32>"
        },
        HrmpChannelAccepted: {
          recipient: "Compact<u32>"
        },
        HrmpChannelClosing: {
          initiator: "Compact<u32>",
          sender: "Compact<u32>",
          recipient: "Compact<u32>"
        },
        RelayedFrom: {
          who: "MultiLocationV0",
          message: "XcmV0"
        }
      }
    },
    XcmErrorV0: {
      _enum: {
        Undefined: "Null",
        Overflow: "Null",
        Unimplemented: "Null",
        UnhandledXcmVersion: "Null",
        UnhandledXcmMessage: "Null",
        UnhandledEffect: "Null",
        EscalationOfPrivilege: "Null",
        UntrustedReserveLocation: "Null",
        UntrustedTeleportLocation: "Null",
        DestinationBufferOverflow: "Null",
        SendFailed: "Null",
        CannotReachDestination: "(MultiLocation, Xcm)",
        MultiLocationFull: "Null",
        FailedToDecode: "Null",
        BadOrigin: "Null",
        ExceedsMaxMessageSize: "Null",
        FailedToTransactAsset: "Null",
        WeightLimitReached: "Weight",
        Wildcard: "Null",
        TooMuchWeightRequired: "Null",
        NotHoldingFees: "Null",
        WeightNotComputable: "Null",
        Barrier: "Null",
        NotWithdrawable: "Null",
        LocationCannotHold: "Null",
        TooExpensive: "Null",
        AssetNotFound: "Null",
        RecursionLimitReached: "Null"
      }
    },
    XcmOrderV0: {
      _enum: {
        Null: "Null",
        DepositAsset: {
          assets: "Vec<MultiAssetV0>",
          dest: "MultiLocationV0"
        },
        DepositReserveAsset: {
          assets: "Vec<MultiAssetV0>",
          dest: "MultiLocationV0",
          effects: "Vec<XcmOrderV0>"
        },
        ExchangeAsset: {
          give: "Vec<MultiAssetV0>",
          receive: "Vec<MultiAssetV0>"
        },
        InitiateReserveWithdraw: {
          assets: "Vec<MultiAssetV0>",
          reserve: "MultiLocationV0",
          effects: "Vec<XcmOrderV0>"
        },
        InitiateTeleport: {
          assets: "Vec<MultiAssetV0>",
          dest: "MultiLocationV0",
          effects: "Vec<XcmOrderV0>"
        },
        QueryHolding: {
          queryId: "Compact<u64>",
          dest: "MultiLocationV0",
          assets: "Vec<MultiAssetV0>"
        },
        BuyExecution: {
          fees: "MultiAssetV0",
          weight: "u64",
          debt: "u64",
          haltOnError: "bool",
          xcm: "Vec<XcmV0>"
        }
      }
    }
  };
  const v1 = {
    AssetInstanceV1: {
      _enum: {
        Undefined: "Null",
        Index: "Compact<u128>",
        Array4: "[u8; 4]",
        Array8: "[u8; 8]",
        Array16: "[u8; 16]",
        Array32: "[u8; 32]",
        Blob: "Bytes"
      }
    },
    FungibilityV1: {
      _enum: {
        Fungible: "Compact<u128>",
        NonFungible: "AssetInstanceV1"
      }
    },
    JunctionV1: {
      _enum: {
        Parachain: "Compact<u32>",
        AccountId32: {
          network: "NetworkId",
          id: "AccountId"
        },
        AccountIndex64: {
          network: "NetworkId",
          index: "Compact<u64>"
        },
        AccountKey20: {
          network: "NetworkId",
          key: "[u8; 20]"
        },
        PalletInstance: "u8",
        GeneralIndex: "Compact<u128>",
        GeneralKey: "Vec<u8>",
        OnlyChild: "Null",
        Plurality: {
          id: "BodyId",
          part: "BodyPart"
        }
      }
    },
    JunctionsV1: {
      _enum: {
        Here: "Null",
        X1: "JunctionV1",
        X2: "(JunctionV1, JunctionV1)",
        X3: "(JunctionV1, JunctionV1, JunctionV1)",
        X4: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
        X5: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
        X6: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
        X7: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
        X8: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)"
      }
    },
    MultiAssetsV1: "Vec<MultiAssetV1>",
    MultiAssetV1: {
      id: "XcmAssetId",
      fungibility: "FungibilityV1"
    },
    MultiAssetFilterV1: {
      _enum: {
        Definite: "MultiAssetsV1",
        Wild: "WildMultiAssetV1"
      }
    },
    MultiLocationV1: {
      parents: "u8",
      interior: "JunctionsV1"
    },
    OriginKindV1: "OriginKindV0",
    ResponseV1: {
      _enum: {
        Assets: "MultiAssetsV1"
      }
    },
    WildFungibilityV1: {
      _enum: ["Fungible", "NonFungible"]
    },
    WildMultiAssetV1: {
      _enum: {
        All: "Null",
        AllOf: {
          id: "XcmAssetId",
          fungibility: "WildFungibilityV1"
        }
      }
    },
    XcmV1: {
      _enum: {
        WithdrawAsset: {
          assets: "MultiAssetsV1",
          effects: "Vec<XcmOrderV1>"
        },
        ReserveAssetDeposit: {
          assets: "MultiAssetsV1",
          effects: "Vec<XcmOrderV1>"
        },
        ReceiveTeleportedAsset: {
          assets: "MultiAssetsV1",
          effects: "Vec<XcmOrderV1>"
        },
        QueryResponse: {
          queryId: "Compact<u64>",
          response: "ResponseV1"
        },
        TransferAsset: {
          assets: "MultiAssetsV1",
          dest: "MultiLocationV1"
        },
        TransferReserveAsset: {
          assets: "MultiAssetsV1",
          dest: "MultiLocationV1",
          effects: "Vec<XcmOrderV1>"
        },
        Transact: {
          originType: "XcmOriginKind",
          requireWeightAtMost: "u64",
          call: "DoubleEncodedCall"
        },
        HrmpNewChannelOpenRequest: {
          sender: "Compact<u32>",
          maxMessageSize: "Compact<u32>",
          maxCapacity: "Compact<u32>"
        },
        HrmpChannelAccepted: {
          recipient: "Compact<u32>"
        },
        HrmpChannelClosing: {
          initiator: "Compact<u32>",
          sender: "Compact<u32>",
          recipient: "Compact<u32>"
        },
        RelayedFrom: {
          who: "MultiLocationV1",
          message: "XcmV1"
        }
      }
    },
    XcmErrorV1: {
      _enum: {
        Undefined: "Null",
        Overflow: "Null",
        Unimplemented: "Null",
        UnhandledXcmVersion: "Null",
        UnhandledXcmMessage: "Null",
        UnhandledEffect: "Null",
        EscalationOfPrivilege: "Null",
        UntrustedReserveLocation: "Null",
        UntrustedTeleportLocation: "Null",
        DestinationBufferOverflow: "Null",
        SendFailed: "Null",
        CannotReachDestination: "(MultiLocationV1, XcmV1)",
        MultiLocationFull: "Null",
        FailedToDecode: "Null",
        BadOrigin: "Null",
        ExceedsMaxMessageSize: "Null",
        FailedToTransactAsset: "Null",
        WeightLimitReached: "Weight",
        Wildcard: "Null",
        TooMuchWeightRequired: "Null",
        NotHoldingFees: "Null",
        WeightNotComputable: "Null",
        Barrier: "Null",
        NotWithdrawable: "Null",
        LocationCannotHold: "Null",
        TooExpensive: "Null",
        AssetNotFound: "Null",
        DestinationUnsupported: "Null",
        RecursionLimitReached: "Null"
      }
    },
    XcmOrderV1: {
      _enum: {
        Noop: "Null",
        DepositAsset: {
          assets: "MultiAssetFilterV1",
          maxAssets: "u32",
          beneficiary: "MultiLocationV1"
        },
        DepositReserveAsset: {
          assets: "MultiAssetFilterV1",
          maxAssets: "u32",
          dest: "MultiLocationV1",
          effects: "Vec<XcmOrderV1>"
        },
        ExchangeAsset: {
          give: "MultiAssetFilterV1",
          receive: "MultiAssetsV1"
        },
        InitiateReserveWithdraw: {
          assets: "MultiAssetFilterV1",
          reserve: "MultiLocationV1",
          effects: "Vec<XcmOrderV1>"
        },
        InitiateTeleport: {
          assets: "MultiAssetFilterV1",
          dest: "MultiLocationV1",
          effects: "Vec<XcmOrderV1>"
        },
        QueryHolding: {
          queryId: "Compact<u64>",
          dest: "MultiLocationV1",
          assets: "MultiAssetFilterV1"
        },
        BuyExecution: {
          fees: "MultiAssetV1",
          weight: "u64",
          debt: "u64",
          haltOnError: "bool",
          instructions: "Vec<XcmV1>"
        }
      }
    }
  };
  const v2 = {
    AssetInstanceV2: "AssetInstanceV1",
    FungibilityV2: "FungibilityV1",
    JunctionV2: "JunctionV1",
    JunctionsV2: "JunctionsV1",
    MultiAssetsV2: "MultiAssetsV1",
    MultiAssetV2: "MultiAssetV1",
    MultiAssetFilterV2: "MultiAssetFilterV1",
    MultiLocationV2: "MultiLocationV1",
    OriginKindV2: "OriginKindV1",
    WildFungibilityV2: "WildFungibilityV1",
    ResponseV2: {
      _enum: {
        Null: "Null",
        Assets: "MultiAssetsV2",
        ExecutionResult: "ResponseV2Result"
      }
    },
    ResponseV2Error: "(u32, XcmErrorV2)",
    ResponseV2Result: "Result<Null, ResponseV2Error>",
    WeightLimitV2: {
      _enum: {
        Unlimited: "Null",
        Limited: "Compact<u64>"
      }
    },
    InstructionV2: {
      _enum: {
        WithdrawAsset: "MultiAssetsV2",
        ReserveAssetDeposited: "MultiAssetsV2",
        ReceiveTeleportedAsset: "MultiAssetsV2",
        QueryResponse: {
          queryId: "Compact<u64>",
          response: "ResponseV2",
          maxWeight: "Compact<u64>"
        },
        TransferAsset: {
          assets: "MultiAssetsV2",
          beneficiary: "MultiLocationV2"
        },
        TransferReserveAsset: {
          assets: "MultiAssetsV2",
          dest: "MultiLocationV2",
          xcm: "XcmV2"
        },
        Transact: {
          originType: "OriginKindV2",
          requireWeightAtMost: "u64",
          call: "DoubleEncodedCall"
        },
        HrmpNewChannelOpenRequest: {
          sender: "Compact<u32>",
          maxMessageSize: "Compact<u32>",
          maxCapacity: "Compact<u32>"
        },
        HrmpChannelAccepted: {
          recipient: "Compact<u32>"
        },
        HrmpChannelClosing: {
          initiator: "Compact<u32>",
          sender: "Compact<u32>",
          recipient: "Compact<u32>"
        },
        ClearOrigin: "Null",
        DescendOrigin: "InteriorMultiLocation",
        ReportError: {
          queryId: "Compact<u64>",
          dest: "MultiLocationV2",
          maxResponseWeight: "Compact<u64>"
        },
        DepositAsset: {
          assets: "MultiAssetFilterV2",
          maxAssets: "u32",
          beneficiary: "MultiLocationV2"
        },
        DepositReserveAsset: {
          assets: "MultiAssetFilterV2",
          maxAssets: "u32",
          dest: "MultiLocationV2",
          xcm: "XcmV2"
        },
        ExchangeAsset: {
          give: "MultiAssetFilterV2",
          receive: "MultiAssetsV2"
        },
        InitiateReserveWithdraw: {
          assets: "MultiAssetFilterV2",
          reserve: "MultiLocationV2",
          xcm: "XcmV2"
        },
        InitiateTeleport: {
          assets: "MultiAssetFilterV2",
          dest: "MultiLocationV2",
          xcm: "XcmV2"
        },
        QueryHolding: {
          query_id: "Compact<u64>",
          dest: "MultiLocationV2",
          assets: "MultiAssetFilterV2",
          maxResponse_Weight: "Compact<u64>"
        },
        BuyExecution: {
          fees: "MultiAssetV2",
          weightLimit: "WeightLimitV2"
        },
        RefundSurplus: "Null",
        SetErrorHandler: "XcmV2",
        SetAppendix: "XcmV2",
        ClearError: "Null",
        ClaimAsset: {
          assets: "MultiAssetsV2",
          ticket: "MultiLocationV2"
        },
        Trap: "u64"
      }
    },
    WildMultiAssetV2: "WildMultiAssetV1",
    XcmV2: "Vec<InstructionV2>",
    XcmErrorV2: {
      _enum: {
        Undefined: "Null",
        Overflow: "Null",
        Unimplemented: "Null",
        UnhandledXcmVersion: "Null",
        UnhandledXcmMessage: "Null",
        UnhandledEffect: "Null",
        EscalationOfPrivilege: "Null",
        UntrustedReserveLocation: "Null",
        UntrustedTeleportLocation: "Null",
        DestinationBufferOverflow: "Null",
        MultiLocationFull: "Null",
        MultiLocationNotInvertible: "Null",
        FailedToDecode: "Null",
        BadOrigin: "Null",
        ExceedsMaxMessageSize: "Null",
        FailedToTransactAsset: "Null",
        WeightLimitReached: "Weight",
        Wildcard: "Null",
        TooMuchWeightRequired: "Null",
        NotHoldingFees: "Null",
        WeightNotComputable: "Null",
        Barrier: "Null",
        NotWithdrawable: "Null",
        LocationCannotHold: "Null",
        TooExpensive: "Null",
        AssetNotFound: "Null",
        DestinationUnsupported: "Null",
        RecursionLimitReached: "Null",
        Transport: "Null",
        Unroutable: "Null",
        UnknownWeightRequired: "Null",
        Trap: "u64",
        UnknownClaim: "Null",
        InvalidLocation: "Null"
      }
    },
    XcmOrderV2: "XcmOrderV1"
  };
  const XCM_LATEST = "V2";
  const xcm = {
    XcmOrigin: {
      _enum: {
        Xcm: "MultiLocation"
      }
    },
    XcmpMessageFormat: {
      _enum: ["ConcatenatedVersionedXcm", "ConcatenatedEncodedBlob", "Signals"]
    },
    XcmAssetId: {
      _enum: {
        Concrete: "MultiLocation",
        Abstract: "Bytes"
      }
    },
    InboundStatus: {
      _enum: ["Ok", "Suspended"]
    },
    OutboundStatus: {
      _enum: ["Ok", "Suspended"]
    },
    MultiAssets: "Vec<MultiAsset>"
  };
  const location = {
    BodyId: {
      _enum: {
        Unit: "Null",
        Named: "Vec<u8>",
        Index: "Compact<u32>",
        Executive: "Null",
        Technical: "Null",
        Legislative: "Null",
        Judicial: "Null"
      }
    },
    BodyPart: {
      _enum: {
        Voice: "Null",
        Members: "Compact<u32>",
        Fraction: {
          nom: "Compact<u32>",
          denom: "Compact<u32>"
        },
        AtLeastProportion: {
          nom: "Compact<u32>",
          denom: "Compact<u32>"
        },
        MoreThanProportion: {
          nom: "Compact<u32>",
          denom: "Compact<u32>"
        }
      }
    },
    InteriorMultiLocation: "Junctions",
    NetworkId: {
      _enum: {
        Any: "Null",
        Named: "Vec<u8>",
        Polkadot: "Null",
        Kusama: "Null"
      }
    }
  };
  const definitions$c = {
    rpc: {},
    types: {
      ...location,
      ...xcm,
      ...v0,
      ...v1,
      ...v2,
      ...mapXcmTypes(XCM_LATEST),
      DoubleEncodedCall: {
        encoded: "Vec<u8>"
      },
      XcmOriginKind: {
        _enum: ["Native", "SovereignAccount", "Superuser", "Xcm"]
      },
      Outcome: {
        _enum: {
          Complete: "Weight",
          Incomplete: "(Weight, XcmErrorV0)",
          Error: "XcmErrorV0"
        }
      },
      QueryId: "u64",
      QueryStatus: {
        _enum: {
          Pending: {
            responder: "VersionedMultiLocation",
            maybeNotify: "Option<(u8, u8)>",
            timeout: "BlockNumber"
          },
          Ready: {
            response: "VersionedResponse",
            at: "BlockNumber"
          }
        }
      },
      QueueConfigData: {
        suspendThreshold: "u32",
        dropThreshold: "u32",
        resumeThreshold: "u32",
        thresholdWeight: "Weight",
        weightRestrictDecay: "Weight"
      },
      VersionMigrationStage: {
        _enum: {
          MigrateSupportedVersion: "Null",
          MigrateVersionNotifiers: "Null",
          NotifyCurrentTargets: "Option<Bytes>",
          MigrateAndNotifyOldTargets: "Null"
        }
      },
      VersionedMultiAsset: {
        _enum: {
          V0: "MultiAssetV0",
          V1: "MultiAssetV1",
          V2: "MultiAssetV2"
        }
      },
      VersionedMultiAssets: {
        _enum: {
          V0: "Vec<MultiAssetV0>",
          V1: "MultiAssetsV1",
          V2: "MultiAssetsV2"
        }
      },
      VersionedMultiLocation: {
        _enum: {
          V0: "MultiLocationV0",
          V1: "MultiLocationV1",
          V2: "MultiLocationV2"
        }
      },
      VersionedResponse: {
        V0: "ResponseV0",
        V1: "ResponseV1",
        V2: "ResponseV2"
      },
      VersionedXcm: {
        _enum: {
          V0: "XcmV0",
          V1: "XcmV1",
          V2: "XcmV2"
        }
      },
      XcmVersion: "u32"
    }
  };
  const layout = {
    ContractCryptoHasher: {
      _enum: ["Blake2x256", "Sha2x256", "Keccak256"]
    },
    ContractDiscriminant: "u32",
    ContractLayoutArray: {
      offset: "ContractLayoutKey",
      len: "u32",
      cellsPerElem: "u64",
      layout: "ContractStorageLayout"
    },
    ContractLayoutCell: {
      key: "ContractLayoutKey",
      ty: "SiLookupTypeId"
    },
    ContractLayoutEnum: {
      dispatchKey: "ContractLayoutKey",
      variants: "BTreeMap<ContractDiscriminant, ContractLayoutStruct>"
    },
    ContractLayoutHash: {
      offset: "ContractLayoutKey",
      strategy: "ContractLayoutHashingStrategy",
      layout: "ContractStorageLayout"
    },
    ContractLayoutHashingStrategy: {
      hasher: "ContractCryptoHasher",
      postfix: "Vec<u8>",
      prefix: "Vec<u8>"
    },
    ContractLayoutKey: "[u8; 32]",
    ContractLayoutStruct: {
      fields: "Vec<ContractLayoutStructField>"
    },
    ContractLayoutStructField: {
      layout: "ContractStorageLayout",
      name: "Text"
    },
    ContractStorageLayout: {
      _enum: {
        Cell: "ContractLayoutCell",
        Hash: "ContractLayoutHash",
        Array: "ContractLayoutArray",
        Struct: "ContractLayoutStruct",
        Enum: "ContractLayoutEnum"
      }
    }
  };
  const spec = {
    ContractConstructorSpecV0: {
      name: "Text",
      selector: "ContractSelector",
      args: "Vec<ContractMessageParamSpecV0>",
      docs: "Vec<Text>"
    },
    ContractConstructorSpecV1: {
      name: "Vec<Text>",
      selector: "ContractSelector",
      args: "Vec<ContractMessageParamSpecV0>",
      docs: "Vec<Text>"
    },
    ContractConstructorSpecV2: {
      label: "Text",
      selector: "ContractSelector",
      args: "Vec<ContractMessageParamSpecV2>",
      docs: "Vec<Text>"
    },
    ContractConstructorSpecV3: {
      label: "Text",
      selector: "ContractSelector",
      payable: "bool",
      args: "Vec<ContractMessageParamSpecV2>",
      docs: "Vec<Text>"
    },
    ContractConstructorSpecV4: {
      label: "Text",
      selector: "ContractSelector",
      payable: "bool",
      args: "Vec<ContractMessageParamSpecV2>",
      docs: "Vec<Text>",
      default: "bool",
      returnType: "Option<ContractTypeSpec>"
    },
    ContractContractSpecV0: {
      constructors: "Vec<ContractConstructorSpecV0>",
      messages: "Vec<ContractMessageSpecV0>",
      events: "Vec<ContractEventSpecV0>",
      docs: "Vec<Text>"
    },
    ContractContractSpecV1: {
      constructors: "Vec<ContractConstructorSpecV1>",
      messages: "Vec<ContractMessageSpecV1>",
      events: "Vec<ContractEventSpecV1>",
      docs: "Vec<Text>"
    },
    ContractContractSpecV2: {
      constructors: "Vec<ContractConstructorSpecV2>",
      messages: "Vec<ContractMessageSpecV2>",
      events: "Vec<ContractEventSpecV2>",
      docs: "Vec<Text>"
    },
    ContractContractSpecV3: {
      constructors: "Vec<ContractConstructorSpecV3>",
      messages: "Vec<ContractMessageSpecV2>",
      events: "Vec<ContractEventSpecV2>",
      docs: "Vec<Text>"
    },
    ContractContractSpecV4: {
      constructors: "Vec<ContractConstructorSpecV4>",
      messages: "Vec<ContractMessageSpecV3>",
      events: "Vec<ContractEventSpecV2>",
      docs: "Vec<Text>",
      environment: "ContractEnvironmentV4"
    },
    ContractDisplayName: "SiPath",
    ContractEventParamSpecV0: {
      name: "Text",
      indexed: "bool",
      type: "ContractTypeSpec",
      docs: "Vec<Text>"
    },
    ContractEventParamSpecV2: {
      label: "Text",
      indexed: "bool",
      type: "ContractTypeSpec",
      docs: "Vec<Text>"
    },
    ContractEventSpecV0: {
      name: "Text",
      args: "Vec<ContractEventParamSpecV0>",
      docs: "Vec<Text>"
    },
    ContractEventSpecV1: {
      name: "Text",
      args: "Vec<ContractEventParamSpecV0>",
      docs: "Vec<Text>"
    },
    ContractEventSpecV2: {
      label: "Text",
      args: "Vec<ContractEventParamSpecV2>",
      docs: "Vec<Text>"
    },
    ContractMessageParamSpecV0: {
      name: "Text",
      type: "ContractTypeSpec"
    },
    ContractMessageParamSpecV2: {
      label: "Text",
      type: "ContractTypeSpec"
    },
    ContractMessageSpecV0: {
      name: "Text",
      selector: "ContractSelector",
      mutates: "bool",
      payable: "bool",
      args: "Vec<ContractMessageParamSpecV0>",
      returnType: "Option<ContractTypeSpec>",
      docs: "Vec<Text>"
    },
    ContractMessageSpecV1: {
      name: "Vec<Text>",
      selector: "ContractSelector",
      mutates: "bool",
      payable: "bool",
      args: "Vec<ContractMessageParamSpecV0>",
      returnType: "Option<ContractTypeSpec>",
      docs: "Vec<Text>"
    },
    ContractMessageSpecV2: {
      label: "Text",
      selector: "ContractSelector",
      mutates: "bool",
      payable: "bool",
      args: "Vec<ContractMessageParamSpecV2>",
      returnType: "Option<ContractTypeSpec>",
      docs: "Vec<Text>"
    },
    ContractMessageSpecV3: {
      label: "Text",
      selector: "ContractSelector",
      mutates: "bool",
      payable: "bool",
      args: "Vec<ContractMessageParamSpecV2>",
      returnType: "Option<ContractTypeSpec>",
      docs: "Vec<Text>",
      default: "bool"
    },
    ContractSelector: "[u8; 4]",
    ContractTypeSpec: {
      type: "SiLookupTypeId",
      displayName: "ContractDisplayName"
    }
  };
  const latest = {
    ContractConstructorSpecLatest: "ContractConstructorSpecV4",
    ContractEventSpecLatest: "ContractEventSpecV2",
    ContractEventParamSpecLatest: "ContractEventParamSpecV2",
    ContractMessageParamSpecLatest: "ContractMessageParamSpecV2",
    ContractMessageSpecLatest: "ContractMessageSpecV3",
    ContractMetadataLatest: "ContractMetadataV4"
  };
  const definitions$b = {
    rpc: {},
    types: {
      ...layout,
      ...spec,
      ...latest,
      ContractProjectInfo: {
        source: "ContractProjectSource",
        contract: "ContractProjectContract"
      },
      ContractMetadataV0: {
        metadataVersion: "Text",
        types: "Vec<Si0Type>",
        spec: "ContractContractSpecV0"
      },
      ContractMetadataV1: {
        types: "Vec<PortableType>",
        spec: "ContractContractSpecV1"
      },
      ContractMetadataV2: {
        types: "Vec<PortableType>",
        spec: "ContractContractSpecV2"
      },
      ContractMetadataV3: {
        types: "Vec<PortableType>",
        spec: "ContractContractSpecV3"
      },
      ContractMetadataV4: {
        types: "Vec<PortableType>",
        spec: "ContractContractSpecV4"
      },
      ContractMetadata: {
        _enum: {
          V0: "ContractMetadataV0",
          V1: "ContractMetadataV1",
          V2: "ContractMetadataV2",
          V3: "ContractMetadataV3",
          V4: "ContractMetadataV4"
        }
      },
      ContractProjectV0: {
        metadataVersion: "Text",
        source: "ContractProjectSource",
        contract: "ContractProjectContract",
        types: "Vec<Si0Type>",
        spec: "ContractContractSpecV0"
      },
      ContractProject: "(ContractProjectInfo, ContractMetadata)",
      ContractProjectContract: {
        _alias: {
          docs: "documentation"
        },
        name: "Text",
        version: "Text",
        authors: "Vec<Text>",
        description: "Option<Text>",
        docs: "Option<Text>",
        repository: "Option<Text>",
        homepage: "Option<Text>",
        license: "Option<Text>"
      },
      ContractProjectSource: {
        _alias: {
          wasmHash: "hash"
        },
        wasmHash: "[u8; 32]",
        language: "Text",
        compiler: "Text",
        wasm: "Raw"
      },
      ContractEnvironmentV4: {
        _alias: {
          hashType: "hash"
        },
        // NOTE These are not marked optional in the Rust code, however since we
        // convert from older versions to newer, we may not have these fields.
        // The Option<...> works since our inputs are always JSON, so it will
        // be None when not specified.
        //
        // Additionally we don't mark the full structure as Option, rather we
        // do it on a per-field basis since fields may be added as the versions
        // progress.
        accountId: "Option<ContractTypeSpec>",
        balance: "Option<ContractTypeSpec>",
        blockNumber: "Option<ContractTypeSpec>",
        hashType: "Option<ContractTypeSpec>",
        timestamp: "Option<ContractTypeSpec>",
        maxEventTopics: "Option<u32>"
      }
    }
  };
  const netRpc = {
    listening: {
      aliasSection: "net",
      description: "Returns true if client is actively listening for network connections. Otherwise false.",
      params: [],
      type: "bool"
    },
    peerCount: {
      aliasSection: "net",
      description: "Returns number of peers connected to node.",
      params: [],
      type: "Text"
    },
    version: {
      aliasSection: "net",
      description: "Returns protocol version.",
      params: [],
      type: "Text"
    }
  };
  const web3Rpc = {
    clientVersion: {
      aliasSection: "web3",
      description: "Returns current client version.",
      params: [],
      type: "Text"
    },
    sha3: {
      aliasSection: "web3",
      description: "Returns sha3 of the given data",
      params: [{ name: "data", type: "Bytes" }],
      type: "H256"
    }
  };
  const rpc$7 = {
    ...netRpc,
    ...web3Rpc,
    accounts: {
      description: "Returns accounts list.",
      params: [],
      type: "Vec<H160>"
    },
    blockNumber: {
      description: "Returns the blockNumber",
      params: [],
      type: "U256"
    },
    call: {
      description: "Call contract, returning the output data.",
      params: [
        {
          name: "request",
          type: "EthCallRequest"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "number",
          type: "BlockNumber"
        }
      ],
      type: "Bytes"
    },
    chainId: {
      description: "Returns the chain ID used for transaction signing at the current best block. None is returned if not available.",
      params: [],
      type: "U64"
    },
    coinbase: {
      description: "Returns block author.",
      params: [],
      type: "H160"
    },
    estimateGas: {
      description: "Estimate gas needed for execution of given contract.",
      params: [
        {
          name: "request",
          type: "EthCallRequest"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "number",
          type: "BlockNumber"
        }
      ],
      type: "U256"
    },
    feeHistory: {
      description: "Returns fee history for given block count & reward percentiles",
      params: [
        {
          name: "blockCount",
          type: "U256"
        },
        {
          name: "newestBlock",
          type: "BlockNumber"
        },
        {
          name: "rewardPercentiles",
          type: "Option<Vec<f64>>"
        }
      ],
      type: "EthFeeHistory"
    },
    gasPrice: {
      description: "Returns current gas price.",
      params: [],
      type: "U256"
    },
    getBalance: {
      description: "Returns balance of the given account.",
      params: [
        {
          name: "address",
          type: "H160"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "number",
          type: "BlockNumber"
        }
      ],
      type: "U256"
    },
    getBlockByHash: {
      description: "Returns block with given hash.",
      params: [
        {
          name: "hash",
          type: "H256"
        },
        {
          name: "full",
          type: "bool"
        }
      ],
      type: "Option<EthRichBlock>"
    },
    getBlockByNumber: {
      description: "Returns block with given number.",
      params: [
        {
          name: "block",
          type: "BlockNumber"
        },
        { name: "full", type: "bool" }
      ],
      type: "Option<EthRichBlock>"
    },
    getBlockTransactionCountByHash: {
      description: "Returns the number of transactions in a block with given hash.",
      params: [
        {
          name: "hash",
          type: "H256"
        }
      ],
      type: "U256"
    },
    getBlockTransactionCountByNumber: {
      description: "Returns the number of transactions in a block with given block number.",
      params: [
        {
          name: "block",
          type: "BlockNumber"
        }
      ],
      type: "U256"
    },
    getCode: {
      description: "Returns the code at given address at given time (block number).",
      params: [
        {
          name: "address",
          type: "H160"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "number",
          type: "BlockNumber"
        }
      ],
      type: "Bytes"
    },
    getFilterChanges: {
      description: "Returns filter changes since last poll.",
      params: [
        {
          name: "index",
          type: "U256"
        }
      ],
      type: "EthFilterChanges"
    },
    getFilterLogs: {
      description: "Returns all logs matching given filter (in a range 'from' - 'to').",
      params: [
        {
          name: "index",
          type: "U256"
        }
      ],
      type: "Vec<EthLog>"
    },
    getLogs: {
      description: "Returns logs matching given filter object.",
      params: [
        {
          name: "filter",
          type: "EthFilter"
        }
      ],
      type: "Vec<EthLog>"
    },
    getProof: {
      description: "Returns proof for account and storage.",
      params: [
        {
          name: "address",
          type: "H160"
        },
        {
          name: "storageKeys",
          type: "Vec<H256>"
        },
        {
          name: "number",
          type: "BlockNumber"
        }
      ],
      type: "EthAccount"
    },
    getStorageAt: {
      description: "Returns content of the storage at given address.",
      params: [
        {
          name: "address",
          type: "H160"
        },
        {
          name: "index",
          type: "U256"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "number",
          type: "BlockNumber"
        }
      ],
      type: "H256"
    },
    getTransactionByBlockHashAndIndex: {
      description: "Returns transaction at given block hash and index.",
      params: [
        {
          name: "hash",
          type: "H256"
        },
        {
          name: "index",
          type: "U256"
        }
      ],
      type: "EthTransaction"
    },
    getTransactionByBlockNumberAndIndex: {
      description: "Returns transaction by given block number and index.",
      params: [
        {
          name: "number",
          type: "BlockNumber"
        },
        {
          name: "index",
          type: "U256"
        }
      ],
      type: "EthTransaction"
    },
    getTransactionByHash: {
      description: "Get transaction by its hash.",
      params: [
        {
          name: "hash",
          type: "H256"
        }
      ],
      type: "EthTransaction"
    },
    getTransactionCount: {
      description: "Returns the number of transactions sent from given address at given time (block number).",
      params: [
        {
          name: "address",
          type: "H160"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "number",
          type: "BlockNumber"
        }
      ],
      type: "U256"
    },
    getTransactionReceipt: {
      description: "Returns transaction receipt by transaction hash.",
      params: [
        {
          name: "hash",
          type: "H256"
        }
      ],
      type: "EthReceipt"
    },
    getUncleByBlockHashAndIndex: {
      description: "Returns an uncles at given block and index.",
      params: [
        {
          name: "hash",
          type: "H256"
        },
        {
          name: "index",
          type: "U256"
        }
      ],
      type: "EthRichBlock"
    },
    getUncleByBlockNumberAndIndex: {
      description: "Returns an uncles at given block and index.",
      params: [
        {
          name: "number",
          type: "BlockNumber"
        },
        {
          name: "index",
          type: "U256"
        }
      ],
      type: "EthRichBlock"
    },
    getUncleCountByBlockHash: {
      description: "Returns the number of uncles in a block with given hash.",
      params: [
        {
          name: "hash",
          type: "H256"
        }
      ],
      type: "U256"
    },
    getUncleCountByBlockNumber: {
      description: "Returns the number of uncles in a block with given block number.",
      params: [
        {
          name: "number",
          type: "BlockNumber"
        }
      ],
      type: "U256"
    },
    getWork: {
      description: "Returns the hash of the current block, the seedHash, and the boundary condition to be met.",
      params: [],
      type: "EthWork"
    },
    hashrate: {
      description: "Returns the number of hashes per second that the node is mining with.",
      params: [],
      type: "U256"
    },
    maxPriorityFeePerGas: {
      description: "Returns max priority fee per gas",
      params: [],
      type: "U256"
    },
    mining: {
      description: "Returns true if client is actively mining new blocks.",
      params: [],
      type: "bool"
    },
    newBlockFilter: {
      description: "Returns id of new block filter.",
      params: [],
      type: "U256"
    },
    newFilter: {
      description: "Returns id of new filter.",
      params: [
        {
          name: "filter",
          type: "EthFilter"
        }
      ],
      type: "U256"
    },
    newPendingTransactionFilter: {
      description: "Returns id of new block filter.",
      params: [],
      type: "U256"
    },
    protocolVersion: {
      description: "Returns protocol version encoded as a string (quotes are necessary).",
      params: [],
      type: "u64"
    },
    sendRawTransaction: {
      description: "Sends signed transaction, returning its hash.",
      params: [
        {
          name: "bytes",
          type: "Bytes"
        }
      ],
      type: "H256"
    },
    sendTransaction: {
      description: "Sends transaction; will block waiting for signer to return the transaction hash",
      params: [
        {
          name: "tx",
          type: "EthTransactionRequest"
        }
      ],
      type: "H256"
    },
    submitHashrate: {
      description: "Used for submitting mining hashrate.",
      params: [
        {
          name: "index",
          type: "U256"
        },
        {
          name: "hash",
          type: "H256"
        }
      ],
      type: "bool"
    },
    submitWork: {
      description: "Used for submitting a proof-of-work solution.",
      params: [
        {
          name: "nonce",
          type: "H64"
        },
        {
          name: "headerHash",
          type: "H256"
        },
        {
          name: "mixDigest",
          type: "H256"
        }
      ],
      type: "bool"
    },
    subscribe: {
      description: "Subscribe to Eth subscription.",
      params: [
        { name: "kind", type: "EthSubKind" },
        {
          isOptional: true,
          name: "params",
          type: "EthSubParams"
        }
      ],
      pubsub: [
        "subscription",
        "subscribe",
        "unsubscribe"
      ],
      type: "Null"
    },
    syncing: {
      description: "Returns an object with data about the sync status or false.",
      params: [],
      type: "EthSyncStatus"
    },
    uninstallFilter: {
      description: "Uninstalls filter.",
      params: [
        {
          name: "index",
          type: "U256"
        }
      ],
      type: "bool"
    }
  };
  const runtime$5 = {
    ConvertTransactionRuntimeApi: [
      {
        methods: {
          convert_transaction: {
            description: "Converts an Ethereum-style transaction to Extrinsic",
            params: [
              {
                name: "transaction",
                type: "TransactionV2"
              }
            ],
            type: "Extrinsic"
          }
        },
        version: 2
      }
    ],
    DebugRuntimeApi: [
      {
        methods: {
          trace_block: {
            description: "Trace all block extrinsics",
            params: [
              {
                name: "extrinsics",
                type: "Vec<Extrinsic>"
              },
              {
                name: "knownTransactions",
                type: "Vec<H256>"
              }
            ],
            type: "Result<(), DispatchError>"
          },
          trace_transaction: {
            description: "Trace transaction extrinsics",
            params: [
              {
                name: "extrinsics",
                type: "Vec<Extrinsic>"
              },
              {
                name: "transaction",
                type: "EthTransaction"
              }
            ],
            type: "Result<(), DispatchError>"
          }
        },
        version: 4
      }
    ],
    EthereumRuntimeRPCApi: [
      {
        methods: {
          account_basic: {
            description: "Returns pallet_evm::Accounts by address.",
            params: [
              {
                name: "address",
                type: "H160"
              }
            ],
            type: "EvmAccount"
          },
          account_code_at: {
            description: "For a given account address, returns pallet_evm::AccountCodes.",
            params: [
              {
                name: "address",
                type: "H160"
              }
            ],
            type: "Bytes"
          },
          author: {
            description: "Returns the converted FindAuthor::find_author authority id.",
            params: [],
            type: "H160"
          },
          call: {
            description: "Returns a frame_ethereum::call response. If `estimate` is true,",
            params: [
              {
                name: "from",
                type: "H160"
              },
              {
                name: "to",
                type: "H160"
              },
              {
                name: "data",
                type: "Vec<u8>"
              },
              {
                name: "value",
                type: "U256"
              },
              {
                name: "gasLimit",
                type: "U256"
              },
              {
                name: "maxFeePerGas",
                type: "Option<U256>"
              },
              {
                name: "maxPriorityFeePerGas",
                type: "Option<U256>"
              },
              {
                name: "nonce",
                type: "Option<U256>"
              },
              {
                name: "estimate",
                type: "bool"
              },
              {
                name: "accessList",
                type: "Option<Vec<(H160, Vec<H256>)>>"
              }
            ],
            type: "Result<EvmCallInfo, DispatchError>"
          },
          chain_id: {
            description: "Returns runtime defined pallet_evm::ChainId.",
            params: [],
            type: "u64"
          },
          create: {
            description: "Returns a frame_ethereum::call response. If `estimate` is true,",
            params: [
              {
                name: "from",
                type: "H160"
              },
              {
                name: "data",
                type: "Vec<u8>"
              },
              {
                name: "value",
                type: "U256"
              },
              {
                name: "gasLimit",
                type: "U256"
              },
              {
                name: "maxFeePerGas",
                type: "Option<U256>"
              },
              {
                name: "maxPriorityFeePerGas",
                type: "Option<U256>"
              },
              {
                name: "nonce",
                type: "Option<U256>"
              },
              {
                name: "estimate",
                type: "bool"
              },
              {
                name: "accessList",
                type: "Option<Vec<(H160, Vec<H256>)>>"
              }
            ],
            type: "Result<EvmCreateInfo, DispatchError>"
          },
          current_all: {
            description: "Return all the current data for a block in a single runtime call.",
            params: [],
            type: "(Option<BlockV2>, Option<Vec<EthReceiptV3>>, Option<Vec<EthTransactionStatus>>)"
          },
          current_block: {
            description: "Return the current block.",
            params: [],
            type: "BlockV2"
          },
          current_receipts: {
            description: "Return the current receipt.",
            params: [],
            type: "Option<Vec<EthReceiptV3>>"
          },
          current_transaction_statuses: {
            description: "Return the current transaction status.",
            params: [],
            type: "Option<Vec<EthTransactionStatus>>"
          },
          elasticity: {
            description: "Return the elasticity multiplier.",
            params: [],
            type: "Option<Permill>"
          },
          extrinsic_filter: {
            description: "Receives a `Vec<OpaqueExtrinsic>` and filters all the ethereum transactions.",
            params: [
              {
                name: "xts",
                type: "Vec<Extrinsic>"
              }
            ],
            type: "Vec<TransactionV2>"
          },
          gas_price: {
            description: "Returns FixedGasPrice::min_gas_price",
            params: [],
            type: "u256"
          },
          storage_at: {
            description: "For a given account address and index, returns pallet_evm::AccountStorages.",
            params: [
              {
                name: "address",
                type: "H160"
              },
              {
                name: "index",
                type: "u256"
              }
            ],
            type: "H256"
          }
        },
        version: 4
      }
    ]
  };
  const V0 = {
    BlockV0: {
      header: "EthHeader",
      transactions: "Vec<TransactionV0>",
      ommers: "Vec<EthHeader>"
    },
    LegacyTransaction: {
      nonce: "U256",
      gasPrice: "U256",
      gasLimit: "U256",
      action: "EthTransactionAction",
      value: "U256",
      input: "Bytes",
      signature: "EthTransactionSignature"
    },
    TransactionV0: "LegacyTransaction"
  };
  const V1 = {
    BlockV1: {
      header: "EthHeader",
      transactions: "Vec<TransactionV1>",
      ommers: "Vec<EthHeader>"
    },
    EIP2930Transaction: {
      chainId: "u64",
      nonce: "U256",
      gasPrice: "U256",
      gasLimit: "U256",
      action: "EthTransactionAction",
      value: "U256",
      input: "Bytes",
      accessList: "EthAccessList",
      oddYParity: "bool",
      r: "H256",
      s: "H256"
    },
    TransactionV1: {
      _enum: {
        Legacy: "LegacyTransaction",
        EIP2930: "EIP2930Transaction"
      }
    }
  };
  const V2 = {
    BlockV2: {
      header: "EthHeader",
      transactions: "Vec<TransactionV2>",
      ommers: "Vec<EthHeader>"
    },
    EIP1559Transaction: {
      chainId: "u64",
      nonce: "U256",
      maxPriorityFeePerGas: "U256",
      maxFeePerGas: "U256",
      gasLimit: "U256",
      action: "EthTransactionAction",
      value: "U256",
      input: "Bytes",
      accessList: "EthAccessList",
      oddYParity: "bool",
      r: "H256",
      s: "H256"
    },
    TransactionV2: {
      _enum: {
        Legacy: "LegacyTransaction",
        EIP2930: "EIP2930Transaction",
        EIP1559: "EIP1559Transaction"
      }
    }
  };
  const types$1 = {
    ...V0,
    ...V1,
    ...V2,
    EthereumAccountId: "GenericEthereumAccountId",
    EthereumAddress: "GenericEthereumAccountId",
    EthereumLookupSource: "GenericEthereumLookupSource",
    EthereumSignature: "[u8; 65]",
    EthAccessListItem: {
      address: "EthAddress",
      slots: "Vec<H256>"
    },
    EthAccessList: "Vec<EthAccessListItem>",
    EthAccount: {
      address: "EthAddress",
      balance: "U256",
      nonce: "U256",
      codeHash: "H256",
      storageHash: "H256",
      accountProof: "Vec<Bytes>",
      storageProof: "Vec<EthStorageProof>"
    },
    EthAddress: "H160",
    EthBlock: {
      header: "EthHeader",
      transactions: "Vec<EthTransaction>",
      ommers: "Vec<EthHeader>"
    },
    EthHeader: {
      parentHash: "H256",
      ommersHash: "H256",
      beneficiary: "EthAddress",
      stateRoot: "H256",
      transactionsRoot: "H256",
      receiptsRoot: "H256",
      logsBloom: "EthBloom",
      difficulty: "U256",
      number: "U256",
      gasLimit: "U256",
      gasUsed: "U256",
      timestamp: "u64",
      extraData: "Bytes",
      mixMash: "H256",
      nonce: "H64"
    },
    EthRichBlock: {
      _alias: {
        blockHash: "hash",
        blockSize: "size"
      },
      blockHash: "Option<H256>",
      parentHash: "H256",
      sha3Uncles: "H256",
      author: "EthAddress",
      miner: "EthAddress",
      stateRoot: "H256",
      transactionsRoot: "H256",
      receiptsRoot: "H256",
      number: "Option<U256>",
      gasUsed: "U256",
      gasLimit: "U256",
      extraData: "Bytes",
      logsBloom: "EthBloom",
      timestamp: "U256",
      difficulty: "U256",
      totalDifficulty: "Option<U256>",
      sealFields: "Vec<Bytes>",
      uncles: "Vec<H256>",
      transactions: "Vec<EthTransaction>",
      blockSize: "Option<U256>"
    },
    EthBloom: "H2048",
    EthCallRequest: {
      from: "Option<EthAddress>",
      to: "Option<EthAddress>",
      gasPrice: "Option<U256>",
      gas: "Option<U256>",
      value: "Option<U256>",
      data: "Option<Bytes>",
      nonce: "Option<U256>"
    },
    EthFeeHistory: {
      oldestBlock: "U256",
      baseFeePerGas: "Vec<U256>",
      gasUsedRatio: "Vec<f64>",
      reward: "Option<Vec<Vec<U256>>>"
    },
    EthFilter: {
      fromBlock: "Option<BlockNumber>",
      toBlock: "Option<BlockNumber>",
      blockHash: "Option<H256>",
      address: "Option<EthFilterAddress>",
      topics: "Option<EthFilterTopic>"
    },
    EthFilterAddress: {
      _enum: {
        Single: "EthAddress",
        Multiple: "Vec<EthAddress>",
        Null: "Null"
      }
    },
    EthFilterChanges: {
      _enum: {
        Logs: "Vec<EthLog>",
        Hashes: "Vec<H256>",
        Empty: "Null"
      }
    },
    EthFilterTopic: {
      _enum: {
        Single: "EthFilterTopicInner",
        Multiple: "Vec<EthFilterTopicInner>",
        Null: "Null"
      }
    },
    EthFilterTopicEntry: "Option<H256>",
    EthFilterTopicInner: {
      _enum: {
        Single: "EthFilterTopicEntry",
        Multiple: "Vec<EthFilterTopicEntry>",
        Null: "Null"
      }
    },
    EthRichHeader: {
      _alias: {
        blockHash: "hash",
        blockSize: "size"
      },
      blockHash: "Option<H256>",
      parentHash: "H256",
      sha3Uncles: "H256",
      author: "EthAddress",
      miner: "EthAddress",
      stateRoot: "H256",
      transactionsRoot: "H256",
      receiptsRoot: "H256",
      number: "Option<U256>",
      gasUsed: "U256",
      gasLimit: "U256",
      extraData: "Bytes",
      logsBloom: "EthBloom",
      timestamp: "U256",
      difficulty: "U256",
      sealFields: "Vec<Bytes>",
      blockSize: "Option<U256>"
    },
    EthLog: {
      address: "EthAddress",
      topics: "Vec<H256>",
      data: "Bytes",
      blockHash: "Option<H256>",
      blockNumber: "Option<U256>",
      transactionHash: "Option<H256>",
      transactionIndex: "Option<U256>",
      logIndex: "Option<U256>",
      transactionLogIndex: "Option<U256>",
      removed: "bool"
    },
    EthReceipt: {
      transactionHash: "Option<H256>",
      transactionIndex: "Option<U256>",
      blockHash: "Option<H256>",
      from: "Option<EthAddress>",
      to: "Option<EthAddress>",
      blockNumber: "Option<U256>",
      cumulativeGasUsed: "U256",
      gasUsed: "Option<U256>",
      contractAddress: "Option<EthAddress>",
      logs: "Vec<EthLog>",
      root: "Option<H256>",
      logsBloom: "EthBloom",
      statusCode: "Option<U64>"
    },
    // not convinced, however the original commit matches, so... (maybe V3 is incorrect?)
    EthReceiptV0: "EthReceipt",
    EthReceiptV3: "EthReceipt",
    EthStorageProof: {
      key: "U256",
      value: "U256",
      proof: "Vec<Bytes>"
    },
    EthSubKind: {
      _enum: ["newHeads", "logs", "newPendingTransactions", "syncing"]
    },
    EthSubParams: {
      _enum: {
        None: "Null",
        Logs: "EthFilter"
      }
    },
    EthSubResult: {
      _enum: {
        Header: "EthRichHeader",
        Log: "EthLog",
        TransactionHash: "H256",
        SyncState: "EthSyncStatus"
      }
    },
    EthSyncInfo: {
      startingBlock: "U256",
      currentBlock: "U256",
      highestBlock: "U256",
      warpChunksAmount: "Option<U256>",
      warpChunksProcessed: "Option<U256>"
    },
    EthSyncStatus: {
      _enum: {
        Info: "EthSyncInfo",
        None: "Null"
      }
    },
    EthTransaction: {
      hash: "H256",
      nonce: "U256",
      blockHash: "Option<H256>",
      blockNumber: "Option<U256>",
      transactionIndex: "Option<U256>",
      from: "H160",
      to: "Option<H160>",
      value: "U256",
      gasPrice: "Option<U256>",
      maxFeePerGas: "Option<U256>",
      maxPriorityFeePerGas: "Option<U256>",
      gas: "U256",
      input: "Bytes",
      creates: "Option<H160>",
      raw: "Bytes",
      publicKey: "Option<H512>",
      chainId: "Option<U64>",
      standardV: "U256",
      v: "U256",
      r: "U256",
      s: "U256",
      accessList: "Option<Vec<EthAccessListItem>>",
      transactionType: "Option<U256>"
    },
    EthTransactionSignature: {
      v: "u64",
      r: "H256",
      s: "H256"
    },
    EthTransactionAction: {
      _enum: {
        Call: "H160",
        Create: "Null"
      }
    },
    EthTransactionCondition: {
      _enum: {
        block: "u64",
        time: "u64"
      }
    },
    EthTransactionRequest: {
      from: "Option<EthAddress>",
      to: "Option<EthAddress>",
      gasPrice: "Option<U256>",
      gas: "Option<U256>",
      value: "Option<U256>",
      data: "Option<Bytes>",
      nonce: "Option<U256>"
    },
    EthTransactionStatus: {
      transactionHash: "H256",
      transactionIndex: "u32",
      from: "EthAddress",
      to: "Option<EthAddress>",
      contractAddress: "Option<EthAddress>",
      logs: "Vec<EthLog>",
      logsBloom: "EthBloom"
    },
    EthWork: {
      powHash: "H256",
      seedHash: "H256",
      target: "H256",
      number: "Option<u64>"
    }
  };
  const definitions$a = { rpc: rpc$7, runtime: runtime$5, types: types$1 };
  const runtime$4 = {
    // deprecated, the NimbusApi is current - this is for backwards compat
    AuthorFilterAPI: [
      {
        methods: {
          can_author: {
            description: "The runtime api used to predict whether an author will be eligible in the given slot",
            params: [
              {
                name: "author",
                type: "AccountId"
              },
              {
                name: "relayParent",
                type: "u32"
              },
              {
                name: "parentHeader",
                type: "Header"
              }
            ],
            type: "bool"
          }
        },
        version: 2
      },
      {
        methods: {
          can_author: {
            description: "The runtime api used to predict whether an author will be eligible in the given slot",
            params: [
              {
                name: "author",
                type: "AccountId"
              },
              {
                name: "relayParent",
                type: "u32"
              }
            ],
            type: "bool"
          }
        },
        version: 1
      }
    ],
    NimbusApi: [
      {
        methods: {
          can_author: {
            description: "The runtime api used to predict whether a Nimbus author will be eligible in the given slot",
            params: [
              {
                name: "author",
                type: "AccountId"
              },
              {
                name: "relayParent",
                type: "u32"
              },
              {
                name: "parentHeader",
                type: "Header"
              }
            ],
            type: "bool"
          }
        },
        version: 1
      }
    ]
  };
  const definitions$9 = {
    rpc: {},
    runtime: runtime$4,
    types: {}
  };
  const runtime$3 = {
    // https://github.com/open-web3-stack/open-runtime-module-library/blob/b57f88b39cd547e2fb51727d8bb9bcc64fddf8b5/oracle/rpc/runtime-api/src/lib.rs#L12-L21
    OracleApi: [
      {
        methods: {
          get_all_values: {
            description: "Retrieves all values",
            params: [
              {
                name: "providerId",
                // This is a Codec type
                type: "Raw"
              }
            ],
            // This won't actually work as expected - since we have
            // no information about the actual Raw sizes, we cannot
            // handle it in this format (it would need an override
            // for the specific Codec). So return the Raw value.
            // type: 'Vec<(Raw, Option<Raw>)>'
            type: "Raw"
          },
          get_value: {
            description: "Retrieves a single value",
            params: [
              {
                name: "providerId",
                // This is a Codec type
                type: "Raw"
              },
              {
                name: "key",
                // This is a Codec type
                type: "Raw"
              }
            ],
            // This is an Option<Codec> type
            type: "Option<Raw>"
          }
        },
        version: 1
      }
    ]
  };
  const definitions$8 = {
    rpc: {},
    runtime: runtime$3,
    types: {}
  };
  const runtime$2 = {
    // https://github.com/open-web3-stack/open-runtime-module-library/blob/b57f88b39cd547e2fb51727d8bb9bcc64fddf8b5/tokens/rpc/runtime-api/src/lib.rs#L11-L18
    TokensApi: [
      {
        methods: {
          query_existential_deposit: {
            description: "Query the existential amount for a specific currency",
            params: [
              {
                name: "currencyId",
                // This is CurrencyId, as per the return value, we are unsure
                // if this is specialized and/or global to the chain or not
                type: "Raw"
              }
            ],
            // This is Balance - since we don't understand enough about the way
            // in which this is used, we default to u128 here (it certainly could
            // be a specialized type that doesn't map to the on-chain Balance)
            type: "u128"
          }
        },
        version: 1
      }
    ]
  };
  const definitions$7 = {
    rpc: {},
    runtime: runtime$2,
    types: {}
  };
  const rpc$6 = {
    methods: {
      description: "Retrieves the list of RPC methods that are exposed by the node",
      params: [],
      type: "RpcMethods"
    }
  };
  const definitions$6 = {
    rpc: rpc$6,
    types: {
      RpcMethods: {
        version: "u32",
        methods: "Vec<Text>"
      }
    }
  };
  const rpc$5 = {
    hasKey: {
      description: "Returns true if the keystore has private keys for the given public key and key type.",
      isUnsafe: true,
      params: [
        {
          name: "publicKey",
          type: "Bytes"
        },
        {
          name: "keyType",
          type: "Text"
        }
      ],
      type: "bool"
    },
    hasSessionKeys: {
      description: "Returns true if the keystore has private keys for the given session public keys.",
      isUnsafe: true,
      params: [
        {
          name: "sessionKeys",
          type: "Bytes"
        }
      ],
      type: "bool"
    },
    insertKey: {
      description: "Insert a key into the keystore.",
      isUnsafe: true,
      params: [
        {
          name: "keyType",
          type: "Text"
        },
        {
          name: "suri",
          type: "Text"
        },
        {
          name: "publicKey",
          type: "Bytes"
        }
      ],
      type: "Bytes"
    },
    pendingExtrinsics: {
      description: "Returns all pending extrinsics, potentially grouped by sender",
      params: [],
      type: "Vec<Extrinsic>"
    },
    removeExtrinsic: {
      description: "Remove given extrinsic from the pool and temporarily ban it to prevent reimporting",
      isUnsafe: true,
      params: [
        {
          name: "bytesOrHash",
          type: "Vec<ExtrinsicOrHash>"
        }
      ],
      type: "Vec<Hash>"
    },
    rotateKeys: {
      description: "Generate new session keys and returns the corresponding public keys",
      isUnsafe: true,
      params: [],
      type: "Bytes"
    },
    submitAndWatchExtrinsic: {
      description: "Submit and subscribe to watch an extrinsic until unsubscribed",
      isSigned: true,
      params: [
        {
          name: "extrinsic",
          type: "Extrinsic"
        }
      ],
      pubsub: [
        "extrinsicUpdate",
        "submitAndWatchExtrinsic",
        "unwatchExtrinsic"
      ],
      type: "ExtrinsicStatus"
    },
    submitExtrinsic: {
      description: "Submit a fully formatted extrinsic for block inclusion",
      isSigned: true,
      params: [
        {
          name: "extrinsic",
          type: "Extrinsic"
        }
      ],
      type: "Hash"
    }
  };
  const definitions$5 = {
    rpc: rpc$5,
    types: {
      ExtrinsicOrHash: {
        _enum: {
          Hash: "Hash",
          Extrinsic: "Bytes"
        }
      },
      ExtrinsicStatus: {
        _enum: {
          Future: "Null",
          Ready: "Null",
          Broadcast: "Vec<Text>",
          InBlock: "Hash",
          Retracted: "Hash",
          FinalityTimeout: "Hash",
          Finalized: "Hash",
          Usurped: "Hash",
          Dropped: "Null",
          Invalid: "Null"
        }
      }
    }
  };
  const rpc$4 = {
    getBlock: {
      description: "Get header and body of a relay chain block",
      params: [
        {
          isHistoric: true,
          isOptional: true,
          name: "hash",
          type: "BlockHash"
        }
      ],
      type: "SignedBlock"
    },
    getBlockHash: {
      description: "Get the block hash for a specific block",
      params: [
        {
          isOptional: true,
          name: "blockNumber",
          type: "BlockNumber"
        }
      ],
      type: "BlockHash"
    },
    getFinalizedHead: {
      alias: ["chain_getFinalisedHead"],
      description: "Get hash of the last finalized block in the canon chain",
      params: [],
      type: "BlockHash"
    },
    getHeader: {
      alias: ["chain_getHead"],
      description: "Retrieves the header for a specific block",
      params: [
        {
          isHistoric: true,
          isOptional: true,
          name: "hash",
          type: "BlockHash"
        }
      ],
      type: "Header"
    },
    subscribeAllHeads: {
      description: "Retrieves the newest header via subscription",
      params: [],
      pubsub: [
        "allHead",
        "subscribeAllHeads",
        "unsubscribeAllHeads"
      ],
      type: "Header"
    },
    subscribeFinalizedHeads: {
      alias: ["chain_subscribeFinalisedHeads", "chain_unsubscribeFinalisedHeads"],
      description: "Retrieves the best finalized header via subscription",
      params: [],
      pubsub: [
        "finalizedHead",
        "subscribeFinalizedHeads",
        "unsubscribeFinalizedHeads"
      ],
      type: "Header"
    },
    subscribeNewHeads: {
      alias: ["chain_unsubscribeNewHeads", "subscribe_newHead", "unsubscribe_newHead"],
      description: "Retrieves the best header via subscription",
      params: [],
      // NOTE These still has the aliassed version, compatible with 1.x
      pubsub: [
        "newHead",
        "subscribeNewHead",
        "unsubscribeNewHead"
      ],
      type: "Header"
    }
  };
  const definitions$4 = {
    rpc: rpc$4,
    types: {
      BlockHash: "Hash"
    }
  };
  const rpc$3 = {
    getKeys: {
      description: "Returns the keys with prefix from a child storage, leave empty to get all the keys",
      params: [
        {
          name: "childKey",
          type: "PrefixedStorageKey"
        },
        {
          name: "prefix",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "Hash"
        }
      ],
      type: "Vec<StorageKey>"
    },
    getKeysPaged: {
      alias: ["childstate_getKeysPagedAt"],
      description: "Returns the keys with prefix from a child storage with pagination support",
      params: [
        {
          name: "childKey",
          type: "PrefixedStorageKey"
        },
        {
          name: "prefix",
          type: "StorageKey"
        },
        {
          name: "count",
          type: "u32"
        },
        {
          isOptional: true,
          name: "startKey",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "Hash"
        }
      ],
      type: "Vec<StorageKey>"
    },
    getStorage: {
      description: "Returns a child storage entry at a specific block state",
      params: [
        {
          name: "childKey",
          type: "PrefixedStorageKey"
        },
        {
          name: "key",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "Hash"
        }
      ],
      type: "Option<StorageData>"
    },
    getStorageEntries: {
      description: "Returns child storage entries for multiple keys at a specific block state",
      params: [
        {
          name: "childKey",
          type: "PrefixedStorageKey"
        },
        {
          name: "keys",
          type: "Vec<StorageKey>"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "Hash"
        }
      ],
      type: "Vec<Option<StorageData>>"
    },
    getStorageHash: {
      description: "Returns the hash of a child storage entry at a block state",
      params: [
        {
          name: "childKey",
          type: "PrefixedStorageKey"
        },
        {
          name: "key",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "Hash"
        }
      ],
      type: "Option<Hash>"
    },
    getStorageSize: {
      description: "Returns the size of a child storage entry at a block state",
      params: [
        {
          name: "childKey",
          type: "PrefixedStorageKey"
        },
        {
          name: "key",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "Hash"
        }
      ],
      type: "Option<u64>"
    }
  };
  const definitions$3 = {
    rpc: rpc$3,
    types: {
      // StorageKey extends Bytes
      PrefixedStorageKey: "StorageKey"
    }
  };
  const rpc$2 = {
    localStorageGet: {
      description: "Get offchain local storage under given key and prefix",
      isUnsafe: true,
      params: [
        {
          name: "kind",
          type: "StorageKind"
        },
        {
          name: "key",
          type: "Bytes"
        }
      ],
      type: "Option<Bytes>"
    },
    localStorageSet: {
      description: "Set offchain local storage under given key and prefix",
      isUnsafe: true,
      params: [
        {
          name: "kind",
          type: "StorageKind"
        },
        {
          name: "key",
          type: "Bytes"
        },
        {
          name: "value",
          type: "Bytes"
        }
      ],
      type: "Null"
    }
  };
  const runtime$1 = {
    OffchainWorkerApi: [
      {
        methods: {
          offchain_worker: {
            description: "Starts the off-chain task for given block header.",
            params: [
              {
                name: "header",
                type: "Header"
              }
            ],
            type: "Null"
          }
        },
        version: 2
      },
      {
        methods: {
          offchain_worker: {
            description: "Starts the off-chain task for given block header.",
            params: [
              {
                name: "number",
                type: "BlockNumber"
              }
            ],
            type: "Null"
          }
        },
        version: 1
      }
    ]
  };
  const definitions$2 = {
    rpc: rpc$2,
    runtime: runtime$1,
    types: {
      StorageKind: {
        _enum: {
          PERSISTENT: 1,
          LOCAL: 2
        }
      }
    }
  };
  const rpc$1 = {
    queryFeeDetails: {
      // NOTE: Not deprecated (yet) in Substrate, but it is the intent to do so
      deprecated: "Use `api.call.transactionPaymentApi.queryFeeDetails` instead",
      description: "Query the detailed fee of a given encoded extrinsic",
      params: [
        {
          name: "extrinsic",
          type: "Bytes"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "FeeDetails"
    },
    queryInfo: {
      // NOTE: Not deprecated (yet) in Substrate, but it is the intent to do so
      deprecated: "Use `api.call.transactionPaymentApi.queryInfo` instead",
      description: "Retrieves the fee information for an encoded extrinsic",
      params: [
        {
          name: "extrinsic",
          type: "Bytes"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      // NOTE: Stuck on V1 forever (at least for the time being)
      type: "RuntimeDispatchInfoV1"
    }
  };
  const V1_TO_V4_SHARED_PAY = {
    query_fee_details: {
      description: "The transaction fee details",
      params: [
        {
          name: "uxt",
          type: "Extrinsic"
        },
        {
          name: "len",
          type: "u32"
        }
      ],
      type: "FeeDetails"
    }
  };
  const V1_TO_V3_SHARED_CALL = {
    query_call_fee_details: {
      description: "The call fee details",
      params: [
        {
          name: "call",
          type: "Call"
        },
        {
          name: "len",
          type: "u32"
        }
      ],
      type: "FeeDetails"
    }
  };
  const V2_TO_V4_SHARED_PAY = {
    query_info: {
      description: "The transaction info",
      params: [
        {
          name: "uxt",
          type: "Extrinsic"
        },
        {
          name: "len",
          type: "u32"
        }
      ],
      type: "RuntimeDispatchInfo"
    }
  };
  const V2_V3_SHARED_CALL = {
    query_call_info: {
      description: "The call info",
      params: [
        {
          name: "call",
          type: "Call"
        },
        {
          name: "len",
          type: "u32"
        }
      ],
      type: "RuntimeDispatchInfo"
    }
  };
  const V3_SHARED_PAY_CALL = {
    query_length_to_fee: {
      description: "Query the output of the current LengthToFee given some input",
      params: [
        {
          name: "length",
          type: "u32"
        }
      ],
      type: "Balance"
    },
    query_weight_to_fee: {
      description: "Query the output of the current WeightToFee given some input",
      params: [
        {
          name: "weight",
          type: "Weight"
        }
      ],
      type: "Balance"
    }
  };
  const runtime = {
    TransactionPaymentApi: [
      {
        // V4 is equivalent to V3 (V4 just dropped all V1 references)
        methods: {
          ...V3_SHARED_PAY_CALL,
          ...V2_TO_V4_SHARED_PAY,
          ...V1_TO_V4_SHARED_PAY
        },
        version: 4
      },
      {
        methods: {
          ...V3_SHARED_PAY_CALL,
          ...V2_TO_V4_SHARED_PAY,
          ...V1_TO_V4_SHARED_PAY
        },
        version: 3
      },
      {
        methods: {
          ...V2_TO_V4_SHARED_PAY,
          ...V1_TO_V4_SHARED_PAY
        },
        version: 2
      },
      {
        methods: {
          query_info: {
            description: "The transaction info",
            params: [
              {
                name: "uxt",
                type: "Extrinsic"
              },
              {
                name: "len",
                type: "u32"
              }
            ],
            // NOTE: _Should_ be V1 (as per current Substrate), however the interface was
            // changed mid-flight between versions. So we have some of each depending on
            // runtime. (We do detect the weight type, so correct)
            type: "RuntimeDispatchInfo"
          },
          ...V1_TO_V4_SHARED_PAY
        },
        version: 1
      }
    ],
    TransactionPaymentCallApi: [
      {
        methods: {
          ...V3_SHARED_PAY_CALL,
          ...V2_V3_SHARED_CALL,
          ...V1_TO_V3_SHARED_CALL
        },
        version: 3
      },
      {
        methods: {
          ...V2_V3_SHARED_CALL,
          ...V1_TO_V3_SHARED_CALL
        },
        version: 2
      },
      {
        methods: {
          CALL: {
            description: "The call info",
            params: [
              {
                name: "call",
                type: "Call"
              },
              {
                name: "len",
                type: "u32"
              }
            ],
            // NOTE: As per the above comment, the below is correct according to Substrate, but
            // _may_ yield fallback decoding on some versions of the runtime
            type: "RuntimeDispatchInfo"
          },
          ...V1_TO_V3_SHARED_CALL
        },
        version: 1
      }
    ]
  };
  const definitions$1 = {
    rpc: rpc$1,
    runtime,
    types: {
      FeeDetails: {
        inclusionFee: "Option<InclusionFee>"
        // skipped in serde
        // tip: 'Balance'
      },
      InclusionFee: {
        baseFee: "Balance",
        lenFee: "Balance",
        adjustedWeightFee: "Balance"
      },
      RuntimeDispatchInfo: {
        weight: "Weight",
        class: "DispatchClass",
        partialFee: "Balance"
      },
      RuntimeDispatchInfoV1: {
        weight: "WeightV1",
        class: "DispatchClass",
        partialFee: "Balance"
      },
      RuntimeDispatchInfoV2: {
        weight: "WeightV2",
        class: "DispatchClass",
        partialFee: "Balance"
      }
    }
  };
  const rpc = {
    call: {
      alias: ["state_callAt"],
      description: "Perform a call to a builtin on the chain",
      params: [
        {
          name: "method",
          type: "Text"
        },
        {
          name: "data",
          type: "Bytes"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "Bytes"
    },
    getChildKeys: {
      description: "Retrieves the keys with prefix of a specific child storage",
      params: [
        {
          name: "childStorageKey",
          type: "StorageKey"
        },
        {
          name: "childDefinition",
          type: "StorageKey"
        },
        {
          name: "childType",
          type: "u32"
        },
        {
          name: "key",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "Vec<StorageKey>"
    },
    getChildReadProof: {
      description: "Returns proof of storage for child key entries at a specific block state.",
      params: [
        {
          name: "childStorageKey",
          type: "PrefixedStorageKey"
        },
        {
          name: "keys",
          type: "Vec<StorageKey>"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "ReadProof"
    },
    getChildStorage: {
      description: "Retrieves the child storage for a key",
      params: [
        {
          name: "childStorageKey",
          type: "StorageKey"
        },
        {
          name: "childDefinition",
          type: "StorageKey"
        },
        {
          name: "childType",
          type: "u32"
        },
        {
          name: "key",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "StorageData"
    },
    getChildStorageHash: {
      description: "Retrieves the child storage hash",
      params: [
        {
          name: "childStorageKey",
          type: "StorageKey"
        },
        {
          name: "childDefinition",
          type: "StorageKey"
        },
        {
          name: "childType",
          type: "u32"
        },
        {
          name: "key",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "Hash"
    },
    getChildStorageSize: {
      description: "Retrieves the child storage size",
      params: [
        {
          name: "childStorageKey",
          type: "StorageKey"
        },
        {
          name: "childDefinition",
          type: "StorageKey"
        },
        {
          name: "childType",
          type: "u32"
        },
        {
          name: "key",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "u64"
    },
    getKeys: {
      deprecated: "Use `api.rpc.state.getKeysPaged` to retrieve keys",
      description: "Retrieves the keys with a certain prefix",
      params: [
        {
          name: "key",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "Vec<StorageKey>"
    },
    getKeysPaged: {
      alias: ["state_getKeysPagedAt"],
      description: "Returns the keys with prefix with pagination support.",
      params: [
        {
          name: "key",
          type: "StorageKey"
        },
        {
          name: "count",
          type: "u32"
        },
        {
          isOptional: true,
          name: "startKey",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "Vec<StorageKey>"
    },
    getMetadata: {
      description: "Returns the runtime metadata",
      params: [
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "Metadata"
    },
    getPairs: {
      deprecated: "Use `api.rpc.state.getKeysPaged` to retrieve keys",
      description: "Returns the keys with prefix, leave empty to get all the keys (deprecated: Use getKeysPaged)",
      isUnsafe: true,
      params: [
        {
          name: "prefix",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "Vec<KeyValue>"
    },
    getReadProof: {
      description: "Returns proof of storage entries at a specific block state",
      params: [
        {
          name: "keys",
          type: "Vec<StorageKey>"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "ReadProof"
    },
    getRuntimeVersion: {
      alias: ["chain_getRuntimeVersion"],
      description: "Get the runtime version",
      params: [
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "RuntimeVersion"
    },
    getStorage: {
      alias: ["state_getStorageAt"],
      description: "Retrieves the storage for a key",
      params: [
        {
          name: "key",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "StorageData"
    },
    getStorageHash: {
      alias: ["state_getStorageHashAt"],
      description: "Retrieves the storage hash",
      params: [
        {
          name: "key",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "Hash"
    },
    getStorageSize: {
      alias: ["state_getStorageSizeAt"],
      description: "Retrieves the storage size",
      params: [
        {
          name: "key",
          type: "StorageKey"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "u64"
    },
    queryStorage: {
      description: "Query historical storage entries (by key) starting from a start block",
      isUnsafe: true,
      params: [
        {
          name: "keys",
          type: "Vec<StorageKey>"
        },
        {
          name: "fromBlock",
          type: "Hash"
        },
        {
          isOptional: true,
          name: "toBlock",
          type: "BlockHash"
        }
      ],
      type: "Vec<StorageChangeSet>"
    },
    queryStorageAt: {
      description: "Query storage entries (by key) starting at block hash given as the second parameter",
      params: [
        {
          name: "keys",
          type: "Vec<StorageKey>"
        },
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "Vec<StorageChangeSet>"
    },
    subscribeRuntimeVersion: {
      alias: ["chain_subscribeRuntimeVersion", "chain_unsubscribeRuntimeVersion"],
      description: "Retrieves the runtime version via subscription",
      params: [],
      pubsub: [
        "runtimeVersion",
        "subscribeRuntimeVersion",
        "unsubscribeRuntimeVersion"
      ],
      type: "RuntimeVersion"
    },
    subscribeStorage: {
      description: "Subscribes to storage changes for the provided keys",
      // NOTE Just marking it here to follow the logic - this is unsafe when no
      // keys are provided (i.e. subscribing to all), generally this is used
      // extensively with normal subscriptions
      // isUnsafe: true,
      params: [
        {
          isOptional: true,
          name: "keys",
          type: "Vec<StorageKey>"
        }
      ],
      pubsub: [
        "storage",
        "subscribeStorage",
        "unsubscribeStorage"
      ],
      type: "StorageChangeSet"
    },
    traceBlock: {
      description: "Provides a way to trace the re-execution of a single block",
      isUnsafe: true,
      params: [
        {
          name: "block",
          type: "Hash"
        },
        {
          name: "targets",
          type: "Option<Text>"
        },
        {
          name: "storageKeys",
          type: "Option<Text>"
        },
        {
          name: "methods",
          type: "Option<Text>"
        }
      ],
      type: "TraceBlockResponse"
    },
    trieMigrationStatus: {
      description: "Check current migration state",
      isUnsafe: true,
      params: [
        {
          isHistoric: true,
          isOptional: true,
          name: "at",
          type: "BlockHash"
        }
      ],
      type: "MigrationStatusResult"
    }
  };
  const definitions = {
    rpc,
    types: {
      ApiId: "[u8; 8]",
      BlockTrace: {
        blockHash: "Text",
        parentHash: "Text",
        tracingTargets: "Text",
        storageKeys: "Text",
        spans: "Vec<BlockTraceSpan>",
        events: "Vec<BlockTraceEvent>"
      },
      BlockTraceEvent: {
        target: "Text",
        data: "BlockTraceEventData",
        parentId: "Option<u64>"
      },
      BlockTraceEventData: {
        stringValues: "HashMap<Text, Text>"
      },
      BlockTraceSpan: {
        id: "u64",
        parentId: "Option<u64>",
        name: "Text",
        target: "Text",
        wasm: "bool"
      },
      KeyValueOption: "(StorageKey, Option<StorageData>)",
      MigrationStatusResult: {
        topRemainingToMigrate: "u64",
        childRemainingToMigrate: "u64"
      },
      ReadProof: {
        at: "Hash",
        proof: "Vec<Bytes>"
      },
      RuntimeVersionApi: "(ApiId, u32)",
      RuntimeVersion: {
        specName: "Text",
        implName: "Text",
        authoringVersion: "u32",
        specVersion: "u32",
        implVersion: "u32",
        apis: "Vec<RuntimeVersionApi>",
        transactionVersion: "u32",
        stateVersion: "u8"
      },
      RuntimeVersionPre4: {
        specName: "Text",
        implName: "Text",
        authoringVersion: "u32",
        specVersion: "u32",
        implVersion: "u32",
        apis: "Vec<RuntimeVersionApi>",
        transactionVersion: "u32"
      },
      RuntimeVersionPre3: {
        specName: "Text",
        implName: "Text",
        authoringVersion: "u32",
        specVersion: "u32",
        implVersion: "u32",
        apis: "Vec<RuntimeVersionApi>"
      },
      RuntimeVersionPartial: {
        specName: "Text",
        specVersion: "u32",
        apis: "Vec<RuntimeVersionApi>"
      },
      SpecVersion: "u32",
      StorageChangeSet: {
        block: "Hash",
        changes: "Vec<KeyValueOption>"
      },
      TraceBlockResponse: {
        _enum: {
          TraceError: "TraceError",
          BlockTrace: "BlockTrace"
        }
      },
      TraceError: {
        error: "Text"
      }
    }
  };
  const typeDefinitions = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    assets: definitions$12,
    attestations: definitions$l,
    aura: definitions$11,
    author: definitions$5,
    authorship: definitions$10,
    babe: definitions$$,
    balances: definitions$_,
    beefy: definitions$Z,
    benchmark: definitions$Y,
    blockbuilder: definitions$X,
    bridges: definitions$k,
    chain: definitions$4,
    childstate: definitions$3,
    claims: definitions$j,
    collective: definitions$W,
    consensus: definitions$V,
    contracts: definitions$U,
    contractsAbi: definitions$b,
    crowdloan: definitions$i,
    cumulus: definitions$h,
    democracy: definitions$T,
    dev: definitions$S,
    discovery: definitions$R,
    elections: definitions$Q,
    engine: definitions$P,
    eth: definitions$a,
    evm: definitions$O,
    extrinsics: definitions$N,
    finality: definitions$g,
    fungibles: definitions$M,
    genericAsset: definitions$L,
    gilt: definitions$K,
    grandpa: definitions$J,
    identity: definitions$I,
    imOnline: definitions$H,
    lottery: definitions$G,
    metadata: definitions$15,
    mmr: definitions$F,
    nfts: definitions$E,
    nimbus: definitions$9,
    nompools: definitions$D,
    offchain: definitions$2,
    offences: definitions$C,
    ormlOracle: definitions$8,
    ormlTokens: definitions$7,
    parachains: definitions$f,
    payment: definitions$1,
    poll: definitions$e,
    pow: definitions$B,
    proxy: definitions$A,
    purchase: definitions$d,
    recovery: definitions$z,
    rpc: definitions$6,
    runtime: definitions$14,
    scaleInfo: definitions$13,
    scheduler: definitions$y,
    session: definitions$x,
    society: definitions$w,
    staking: definitions$v,
    state: definitions,
    support: definitions$u,
    syncstate: definitions$t,
    system: definitions$s,
    treasury: definitions$r,
    txpayment: definitions$q,
    txqueue: definitions$p,
    uniques: definitions$o,
    utility: definitions$n,
    vesting: definitions$m,
    xcm: definitions$c
  }, Symbol.toStringTag, { value: "Module" }));
  const jsonrpc = {};
  Object.keys(typeDefinitions).forEach((s) => Object.entries(typeDefinitions[s].rpc || {}).forEach(([method, def]) => {
    const section2 = def.aliasSection || s;
    if (!jsonrpc[section2]) {
      jsonrpc[section2] = {};
    }
    jsonrpc[section2][method] = objectSpread({}, def, {
      isSubscription: !!def.pubsub,
      jsonrpc: `${section2}_${method}`,
      method,
      section: section2
    });
  }));
  const rpcDefinitions = jsonrpc;
  const l$a = logger("PortableRegistry");
  const TYPE_UNWRAP = { toNumber: () => -1 };
  const PRIMITIVE_ALIAS = {
    Char: "u32",
    Str: "Text"
  };
  const PATHS_ALIAS = splitNamespace([
    // full matching on exact names...
    // these are well-known types with additional encoding
    "sp_core::crypto::AccountId32",
    "sp_runtime::generic::era::Era",
    "sp_runtime::multiaddress::MultiAddress",
    // ethereum overrides (Frontier, Moonbeam, Polkadot claims)
    "fp_account::AccountId20",
    "account::AccountId20",
    "polkadot_runtime_common::claims::EthereumAddress",
    // weights 2 is a structure, however for 1.5. with a single field it
    // should be flatenned (can appear in Compact<Weight> extrinsics)
    "frame_support::weights::weight_v2::Weight",
    "sp_weights::weight_v2::Weight",
    // wildcard matching in place...
    // these have a specific encoding or logic, use a wildcard for {pallet, darwinia}_democracy
    "*_democracy::vote::Vote",
    "*_conviction_voting::vote::Vote",
    "*_identity::types::Data",
    // these are opaque Vec<u8> wrappers
    "sp_core::OpaqueMetadata",
    "sp_core::OpaquePeerId",
    "sp_core::offchain::OpaqueMultiaddr",
    // shorten some well-known types
    "primitive_types::*",
    "sp_arithmetic::per_things::*",
    // runtime
    "*_runtime::RuntimeCall",
    "*_runtime::RuntimeEvent",
    // ink!
    "ink::env::types::*",
    "ink::primitives::types::*",
    "ink_env::types::*",
    "ink_primitives::types::*"
  ]);
  const PATHS_SET = splitNamespace([
    "pallet_identity::types::BitFlags"
  ]);
  const BITVEC_NS_LSB = ["bitvec::order::Lsb0", "BitOrderLsb0"];
  const BITVEC_NS_MSB = ["bitvec::order::Msb0", "BitOrderMsb0"];
  const BITVEC_NS = [...BITVEC_NS_LSB, ...BITVEC_NS_MSB];
  const WRAPPERS = ["BoundedBTreeMap", "BoundedBTreeSet", "BoundedVec", "Box", "BTreeMap", "BTreeSet", "Cow", "Option", "Range", "RangeInclusive", "Result", "WeakBoundedVec", "WrapperKeepOpaque", "WrapperOpaque"];
  const RESERVED = [
    // JS reserved words
    "entries",
    "keys",
    "new",
    "size",
    // exposed by all Codec objects
    "hash",
    "registry"
  ];
  const PATH_RM_INDEX_1 = ["generic", "misc", "pallet", "traits", "types"];
  function sanitizeDocs(docs) {
    const count = docs.length;
    const result = new Array(count);
    for (let i2 = 0; i2 < count; i2++) {
      result[i2] = docs[i2].toString();
    }
    return result;
  }
  function splitNamespace(values2) {
    const count = values2.length;
    const result = new Array(count);
    for (let i2 = 0; i2 < count; i2++) {
      result[i2] = values2[i2].split("::");
    }
    return result;
  }
  function matchParts(first2, second) {
    return first2.length === second.length && first2.every((a, index2) => {
      const b = second[index2].toString();
      if (a === "*" || a === b) {
        return true;
      }
      if (a.includes("*") && a.includes("_") && b.includes("_")) {
        let suba = a.split("_");
        let subb = b.split("_");
        if (suba[0] === "*") {
          const indexOf = subb.indexOf(suba[1]);
          if (indexOf !== -1) {
            suba = suba.slice(1);
            subb = subb.slice(indexOf);
          }
        }
        if (suba.length === 2 && suba[1] === "*" && suba[0] === subb[0]) {
          return true;
        }
        return matchParts(suba, subb);
      }
      return false;
    });
  }
  function getAliasPath({ def, path: path2 }) {
    if (["frame_support::weights::weight_v2::Weight", "sp_weights::weight_v2::Weight"].includes(path2.join("::"))) {
      return !def.isComposite || def.asComposite.fields.length === 1 ? "WeightV1" : null;
    }
    return path2.length && PATHS_ALIAS.some((a) => matchParts(a, path2)) ? path2[path2.length - 1].toString() : null;
  }
  function extractNameFlat(portable, lookupIndex, params, path2, isInternal = false) {
    const count = path2.length;
    if (count === 0 || WRAPPERS.includes(path2[count - 1].toString())) {
      return null;
    }
    const camels = new Array(count);
    const lowers = new Array(count);
    for (let i2 = 0; i2 < count; i2++) {
      const c = stringPascalCase(isInternal ? path2[i2].replace("pallet_", "") : path2[i2]);
      const l2 = c.toLowerCase();
      camels[i2] = c;
      lowers[i2] = l2;
    }
    let name = "";
    for (let i2 = 0; i2 < count; i2++) {
      const l2 = lowers[i2];
      if (i2 !== 1 || !PATH_RM_INDEX_1.includes(l2)) {
        if (l2 !== lowers[i2 + 1]) {
          name += camels[i2];
        }
      }
    }
    if (camels[1] === "RawOrigin" && count === 2 && params.length === 2 && params[1].type.isSome) {
      const instanceType = portable[params[1].type.unwrap().toNumber()];
      if (instanceType.type.path.length === 2) {
        name = `${name}${instanceType.type.path[1].toString()}`;
      }
    }
    return { lookupIndex, name, params };
  }
  function extractName(portable, lookupIndex, { type: { params, path: path2 } }) {
    return extractNameFlat(portable, lookupIndex, params, path2);
  }
  function nextDupeMatches(name, startAt, names) {
    const result = [names[startAt]];
    for (let i2 = startAt + 1, count = names.length; i2 < count; i2++) {
      const v = names[i2];
      if (v.name === name) {
        result.push(v);
      }
    }
    return result;
  }
  function rewriteDupes(input, rewrite) {
    const count = input.length;
    for (let i2 = 0; i2 < count; i2++) {
      const a = input[i2];
      for (let j = i2 + 1; j < count; j++) {
        const b = input[j];
        if (a.lookupIndex !== b.lookupIndex && a.name === b.name) {
          return false;
        }
      }
    }
    for (let i2 = 0; i2 < count; i2++) {
      const p = input[i2];
      rewrite[p.lookupIndex] = p.name;
    }
    return true;
  }
  function removeDupeNames(lookup, portable, names) {
    const rewrite = {};
    return names.map((original, startAt) => {
      const { lookupIndex, name, params } = original;
      if (!name) {
        return null;
      } else if (rewrite[lookupIndex]) {
        return original;
      }
      const allSame = nextDupeMatches(name, startAt, names);
      if (allSame.length === 1) {
        return original;
      }
      const anyDiff = allSame.some((o) => params.length !== o.params.length || params.some((p, index2) => !p.name.eq(o.params[index2].name) || p.type.unwrapOr(TYPE_UNWRAP).toNumber() !== o.params[index2].type.unwrapOr(TYPE_UNWRAP).toNumber()));
      if (!anyDiff) {
        return original;
      }
      const paramIdx = params.findIndex(({ type }, index2) => allSame.every(({ params: params2 }, aIndex) => params2[index2].type.isSome && (aIndex === 0 || !params2[index2].type.eq(type))));
      if (paramIdx === -1) {
        return original;
      }
      const sameCount = allSame.length;
      const adjusted = new Array(sameCount);
      for (let i2 = 0; i2 < sameCount; i2++) {
        const { lookupIndex: lookupIndex2, name: name2, params: params2 } = allSame[i2];
        const { def, path: path2 } = lookup.getSiType(params2[paramIdx].type.unwrap());
        if (!def.isPrimitive && !path2.length) {
          return null;
        }
        adjusted[i2] = {
          lookupIndex: lookupIndex2,
          name: def.isPrimitive ? `${name2}${def.asPrimitive.toString()}` : `${name2}${path2[path2.length - 1].toString()}`
        };
      }
      if (rewriteDupes(adjusted, rewrite)) {
        return original;
      }
      for (let i2 = 0; i2 < sameCount; i2++) {
        const { lookupIndex: lookupIndex2, name: name2, params: params2 } = allSame[i2];
        const { def, path: path2 } = lookup.getSiType(params2[paramIdx].type.unwrap());
        const flat = extractNameFlat(portable, lookupIndex2, params2, path2, true);
        if (def.isPrimitive || !flat) {
          return null;
        }
        adjusted[i2] = {
          lookupIndex: lookupIndex2,
          name: `${name2}${flat.name}`
        };
      }
      if (rewriteDupes(adjusted, rewrite)) {
        return original;
      }
      return null;
    }).filter((n) => !!n).map(({ lookupIndex, name, params }) => ({
      lookupIndex,
      name: rewrite[lookupIndex] || name,
      params
    }));
  }
  function registerTypes(lookup, lookups, names, params) {
    lookup.registry.register(lookups);
    if (params.SpRuntimeUncheckedExtrinsic) {
      const [addrParam, , sigParam] = params.SpRuntimeUncheckedExtrinsic;
      const siAddress = lookup.getSiType(addrParam.type.unwrap());
      const siSignature = lookup.getSiType(sigParam.type.unwrap());
      const nsSignature = siSignature.path.join("::");
      let nsAccountId = siAddress.path.join("::");
      const isMultiAddress = nsAccountId === "sp_runtime::multiaddress::MultiAddress";
      if (isMultiAddress) {
        const [idParam] = siAddress.params;
        nsAccountId = lookup.getSiType(idParam.type.unwrap()).path.join("::");
      }
      lookup.registry.register({
        // known: account::AccountId20, fp_account::AccountId20, primitive_types::H160
        AccountId: nsAccountId.endsWith("::AccountId20") || nsAccountId.endsWith("::H160") ? "AccountId20" : "AccountId32",
        Address: isMultiAddress ? "MultiAddress" : "AccountId",
        ExtrinsicSignature: ["sp_runtime::MultiSignature"].includes(nsSignature) ? "MultiSignature" : names[sigParam.type.unwrap().toNumber()] || "MultiSignature"
      });
    }
  }
  function extractAliases(params, isContract) {
    const hasParams = Object.keys(params).some((k) => !k.startsWith("Pallet"));
    const alias2 = {};
    if (params.SpRuntimeUncheckedExtrinsic) {
      const [, { type }] = params.SpRuntimeUncheckedExtrinsic;
      alias2[type.unwrap().toNumber()] = "Call";
    } else if (hasParams && !isContract) {
      l$a.warn("Unable to determine runtime Call type, cannot inspect sp_runtime::generic::unchecked_extrinsic::UncheckedExtrinsic");
    }
    if (params.FrameSystemEventRecord) {
      const [{ type }] = params.FrameSystemEventRecord;
      alias2[type.unwrap().toNumber()] = "Event";
    } else if (hasParams && !isContract) {
      l$a.warn("Unable to determine runtime Event type, cannot inspect frame_system::EventRecord");
    }
    return alias2;
  }
  function extractTypeInfo(lookup, portable) {
    const nameInfo = [];
    const types2 = {};
    for (let i2 = 0, count = portable.length; i2 < count; i2++) {
      const type = portable[i2];
      const lookupIndex = type.id.toNumber();
      const extracted = extractName(portable, lookupIndex, portable[i2]);
      if (extracted) {
        nameInfo.push(extracted);
      }
      types2[lookupIndex] = type;
    }
    const lookups = {};
    const names = {};
    const params = {};
    const dedup = removeDupeNames(lookup, portable, nameInfo);
    for (let i2 = 0, count = dedup.length; i2 < count; i2++) {
      const { lookupIndex, name, params: p } = dedup[i2];
      names[lookupIndex] = name;
      lookups[name] = lookup.registry.createLookupType(lookupIndex);
      params[name] = p;
    }
    return { lookups, names, params, types: types2 };
  }
  class PortableRegistry extends Struct {
    constructor(registry, value, isContract) {
      super(registry, {
        types: "Vec<PortableType>"
      }, value);
      this.__internal__typeDefs = {};
      const { lookups, names, params, types: types2 } = extractTypeInfo(this, this.types);
      this.__internal__alias = extractAliases(params, isContract);
      this.__internal__lookups = lookups;
      this.__internal__names = names;
      this.__internal__params = params;
      this.__internal__types = types2;
    }
    /**
     * @description Returns all the available type names for this chain
     **/
    get names() {
      return Object.values(this.__internal__names).sort();
    }
    /**
     * @description The types of the registry
     */
    get types() {
      return this.getT("types");
    }
    /**
     * @description Register all available types into the registry (generally for internal usage)
     */
    register() {
      registerTypes(this, this.__internal__lookups, this.__internal__names, this.__internal__params);
    }
    /**
     * @description Returns the name for a specific lookup
     */
    getName(lookupId) {
      return this.__internal__names[this.__internal__getLookupId(lookupId)];
    }
    /**
     * @description Finds a specific type in the registry
     */
    getSiType(lookupId) {
      const found = (this.__internal__types || this.types)[this.__internal__getLookupId(lookupId)];
      if (!found) {
        throw new Error(`PortableRegistry: Unable to find type with lookupId ${lookupId.toString()}`);
      }
      return found.type;
    }
    /**
     * @description Lookup the type definition for the index
     */
    getTypeDef(lookupId) {
      const lookupIndex = this.__internal__getLookupId(lookupId);
      if (!this.__internal__typeDefs[lookupIndex]) {
        const lookupName = this.__internal__names[lookupIndex];
        const empty2 = {
          info: TypeDefInfo.DoNotConstruct,
          lookupIndex,
          lookupName,
          type: this.registry.createLookupType(lookupIndex)
        };
        if (lookupName) {
          this.__internal__typeDefs[lookupIndex] = empty2;
        }
        const extracted = this.__internal__extract(this.getSiType(lookupId), lookupIndex);
        if (!lookupName) {
          this.__internal__typeDefs[lookupIndex] = empty2;
        }
        Object.keys(extracted).forEach((k) => {
          if (k !== "lookupName" || extracted[k]) {
            this.__internal__typeDefs[lookupIndex][k] = extracted[k];
          }
        });
        if (extracted.info === TypeDefInfo.Plain) {
          this.__internal__typeDefs[lookupIndex].lookupNameRoot = this.__internal__typeDefs[lookupIndex].lookupName;
          delete this.__internal__typeDefs[lookupIndex].lookupName;
        }
      }
      return this.__internal__typeDefs[lookupIndex];
    }
    /**
     * @description For a specific field, perform adjustments to not have built-in conflicts
     */
    sanitizeField(name) {
      let nameField = null;
      let nameOrig = null;
      if (name.isSome) {
        nameField = stringCamelCase(name.unwrap());
        if (nameField.includes("#")) {
          nameOrig = nameField;
          nameField = nameOrig.replace(/#/g, "_");
        } else if (RESERVED.includes(nameField)) {
          nameOrig = nameField;
          nameField = `${nameField}_`;
        }
      }
      return [nameField, nameOrig];
    }
    /** @internal Creates a TypeDef based on an internal lookupId */
    __internal__createSiDef(lookupId) {
      const typeDef = this.getTypeDef(lookupId);
      const lookupIndex = lookupId.toNumber();
      return [TypeDefInfo.DoNotConstruct, TypeDefInfo.Enum, TypeDefInfo.Struct].includes(typeDef.info) && typeDef.lookupName ? {
        docs: typeDef.docs,
        info: TypeDefInfo.Si,
        lookupIndex,
        lookupName: this.__internal__names[lookupIndex],
        type: this.registry.createLookupType(lookupId)
      } : typeDef;
    }
    /** @internal Converts a lookupId input to the actual lookup index */
    __internal__getLookupId(lookupId) {
      if (isString$1(lookupId)) {
        if (!this.registry.isLookupType(lookupId)) {
          throw new Error(`PortableRegistry: Expected a lookup string type, found ${lookupId}`);
        }
        return parseInt(lookupId.replace("Lookup", ""), 10);
      } else if (isNumber$1(lookupId)) {
        return lookupId;
      }
      return lookupId.toNumber();
    }
    /** @internal Converts a type into a TypeDef for Codec usage */
    __internal__extract(type, lookupIndex) {
      const namespace = type.path.join("::");
      let typeDef;
      const aliasType = this.__internal__alias[lookupIndex] || getAliasPath(type);
      try {
        if (aliasType) {
          typeDef = this.__internal__extractAliasPath(lookupIndex, aliasType);
        } else {
          switch (type.def.type) {
            case "Array":
              typeDef = this.__internal__extractArray(lookupIndex, type.def.asArray);
              break;
            case "BitSequence":
              typeDef = this.__internal__extractBitSequence(lookupIndex, type.def.asBitSequence);
              break;
            case "Compact":
              typeDef = this.__internal__extractCompact(lookupIndex, type.def.asCompact);
              break;
            case "Composite":
              typeDef = this.__internal__extractComposite(lookupIndex, type, type.def.asComposite);
              break;
            case "HistoricMetaCompat":
              typeDef = this.__internal__extractHistoric(lookupIndex, type.def.asHistoricMetaCompat);
              break;
            case "Primitive":
              typeDef = this.__internal__extractPrimitive(lookupIndex, type);
              break;
            case "Sequence":
              typeDef = this.__internal__extractSequence(lookupIndex, type.def.asSequence);
              break;
            case "Tuple":
              typeDef = this.__internal__extractTuple(lookupIndex, type.def.asTuple);
              break;
            case "Variant":
              typeDef = this.__internal__extractVariant(lookupIndex, type, type.def.asVariant);
              break;
            default:
              assertUnreachable(type.def.type);
          }
        }
      } catch (error) {
        throw new Error(`PortableRegistry: ${lookupIndex}${namespace ? ` (${namespace})` : ""}: Error extracting ${stringify$1(type)}: ${error.message}`);
      }
      return objectSpread({
        docs: sanitizeDocs(type.docs),
        namespace
      }, typeDef);
    }
    /** @internal Extracts a ScaleInfo Array into TypeDef.VecFixed */
    __internal__extractArray(_2, { len, type }) {
      const length2 = len.toNumber();
      if (length2 > 2048) {
        throw new Error("Only support for [Type; <length>], where length <= 2048");
      }
      return withTypeString(this.registry, {
        info: TypeDefInfo.VecFixed,
        length: length2,
        sub: this.__internal__createSiDef(type)
      });
    }
    /** @internal Extracts a ScaleInfo BitSequence into TypeDef.Plain */
    __internal__extractBitSequence(_2, { bitOrderType, bitStoreType }) {
      const a = this.__internal__createSiDef(bitOrderType);
      const b = this.__internal__createSiDef(bitStoreType);
      const [bitOrder, bitStore] = BITVEC_NS.includes(a.namespace || "") ? [a, b] : [b, a];
      if (!bitOrder.namespace || !BITVEC_NS.includes(bitOrder.namespace)) {
        throw new Error(`Unexpected bitOrder found as ${bitOrder.namespace || "<unknown>"}`);
      } else if (bitStore.info !== TypeDefInfo.Plain || bitStore.type !== "u8") {
        throw new Error(`Only u8 bitStore is currently supported, found ${bitStore.type}`);
      }
      return {
        info: TypeDefInfo.Plain,
        type: "BitVec"
      };
    }
    /** @internal Extracts a ScaleInfo Compact into TypeDef.Compact */
    __internal__extractCompact(_2, { type }) {
      return withTypeString(this.registry, {
        info: TypeDefInfo.Compact,
        sub: this.__internal__createSiDef(type)
      });
    }
    /** @internal Extracts a ScaleInfo Composite into TypeDef.{BTree*, Range*, Wrapper*} */
    __internal__extractComposite(lookupIndex, { params, path: path2 }, { fields }) {
      if (path2.length) {
        const pathFirst = path2[0].toString();
        const pathLast = path2[path2.length - 1].toString();
        if (path2.length === 1 && pathFirst === "BTreeMap") {
          if (params.length !== 2) {
            throw new Error(`BTreeMap requires 2 parameters, found ${params.length}`);
          }
          return withTypeString(this.registry, {
            info: TypeDefInfo.BTreeMap,
            sub: params.map(({ type }) => this.__internal__createSiDef(type.unwrap()))
          });
        } else if (path2.length === 1 && pathFirst === "BTreeSet") {
          if (params.length !== 1) {
            throw new Error(`BTreeSet requires 1 parameter, found ${params.length}`);
          }
          return withTypeString(this.registry, {
            info: TypeDefInfo.BTreeSet,
            sub: this.__internal__createSiDef(params[0].type.unwrap())
          });
        } else if (["Range", "RangeInclusive"].includes(pathFirst)) {
          if (params.length !== 1) {
            throw new Error(`Range requires 1 parameter, found ${params.length}`);
          }
          return withTypeString(this.registry, {
            info: pathFirst === "Range" ? TypeDefInfo.Range : TypeDefInfo.RangeInclusive,
            sub: this.__internal__createSiDef(params[0].type.unwrap()),
            type: pathFirst
          });
        } else if (["WrapperKeepOpaque", "WrapperOpaque"].includes(pathLast)) {
          if (params.length !== 1) {
            throw new Error(`WrapperOpaque requires 1 parameter, found ${params.length}`);
          }
          return withTypeString(this.registry, {
            info: pathLast === "WrapperKeepOpaque" ? TypeDefInfo.WrapperKeepOpaque : TypeDefInfo.WrapperOpaque,
            sub: this.__internal__createSiDef(params[0].type.unwrap()),
            type: pathLast
          });
        }
      }
      return PATHS_SET.some((p) => matchParts(p, path2)) ? this.__internal__extractCompositeSet(lookupIndex, params, fields) : this.__internal__extractFields(lookupIndex, fields);
    }
    /** @internal Extracts a ScaleInfo CompositeSet into TypeDef.Set */
    __internal__extractCompositeSet(_2, params, fields) {
      if (params.length !== 1 || fields.length !== 1) {
        throw new Error("Set handling expects param/field as single entries");
      }
      return withTypeString(this.registry, {
        info: TypeDefInfo.Set,
        length: this.registry.createTypeUnsafe(this.registry.createLookupType(fields[0].type), []).bitLength(),
        sub: this.getSiType(params[0].type.unwrap()).def.asVariant.variants.map(({ index: index2, name }) => ({
          // This will be an issue > 2^53 - 1 ... don't have those (yet)
          index: index2.toNumber(),
          info: TypeDefInfo.Plain,
          name: name.toString(),
          type: "Null"
        }))
      });
    }
    /** @internal Extracts ScaleInfo enum/struct fields into TypeDef.{Struct, Tuple} */
    __internal__extractFields(lookupIndex, fields) {
      let isStruct = true;
      let isTuple = true;
      const count = fields.length;
      for (let f = 0; f < count; f++) {
        const { name } = fields[f];
        isStruct = isStruct && name.isSome;
        isTuple = isTuple && name.isNone;
      }
      if (!isTuple && !isStruct) {
        throw new Error("Invalid fields type detected, expected either Tuple (all unnamed) or Struct (all named)");
      }
      if (count === 0) {
        return {
          info: TypeDefInfo.Null,
          type: "Null"
        };
      } else if (isTuple && count === 1) {
        const typeDef = this.__internal__createSiDef(fields[0].type);
        return objectSpread({}, typeDef, lookupIndex === -1 ? null : {
          lookupIndex,
          lookupName: this.__internal__names[lookupIndex],
          lookupNameRoot: typeDef.lookupName
        }, fields[0].typeName.isSome ? { typeName: sanitize(fields[0].typeName.unwrap()) } : null);
      }
      const [sub, alias2] = this.__internal__extractFieldsAlias(fields);
      return withTypeString(this.registry, objectSpread({
        info: isTuple ? TypeDefInfo.Tuple : TypeDefInfo.Struct,
        sub
      }, alias2.size ? { alias: alias2 } : null, lookupIndex === -1 ? null : {
        lookupIndex,
        lookupName: this.__internal__names[lookupIndex]
      }));
    }
    /** @internal Apply field aliassed (with no JS conflicts) */
    __internal__extractFieldsAlias(fields) {
      const alias2 = /* @__PURE__ */ new Map();
      const count = fields.length;
      const sub = new Array(count);
      for (let i2 = 0; i2 < count; i2++) {
        const { docs, name, type, typeName } = fields[i2];
        const typeDef = this.__internal__createSiDef(type);
        if (name.isNone) {
          sub[i2] = typeDef;
        } else {
          const [nameField, nameOrig] = this.sanitizeField(name);
          if (nameField && nameOrig) {
            alias2.set(nameField, nameOrig);
          }
          sub[i2] = objectSpread({
            docs: sanitizeDocs(docs),
            name: nameField
          }, typeDef, typeName.isSome ? { typeName: sanitize(typeName.unwrap()) } : null);
        }
      }
      return [sub, alias2];
    }
    /** @internal Extracts an internal Historic (pre V14) type  */
    __internal__extractHistoric(_2, type) {
      return objectSpread({
        displayName: type.toString(),
        isFromSi: true
      }, getTypeDef(type));
    }
    /** @internal Extracts a ScaleInfo Primitive into TypeDef.Plain */
    __internal__extractPrimitive(_2, type) {
      const typeStr = type.def.asPrimitive.type.toString();
      return {
        info: TypeDefInfo.Plain,
        type: PRIMITIVE_ALIAS[typeStr] || typeStr.toLowerCase()
      };
    }
    /** @internal Applies an alias path onto the TypeDef */
    __internal__extractAliasPath(_2, type) {
      return {
        info: TypeDefInfo.Plain,
        type
      };
    }
    /** @internal Extracts a ScaleInfo Sequence into TypeDef.Vec (with Bytes shortcut) */
    __internal__extractSequence(lookupIndex, { type }) {
      const sub = this.__internal__createSiDef(type);
      if (sub.type === "u8") {
        return {
          info: TypeDefInfo.Plain,
          type: "Bytes"
        };
      }
      return withTypeString(this.registry, {
        info: TypeDefInfo.Vec,
        lookupIndex,
        lookupName: this.__internal__names[lookupIndex],
        sub
      });
    }
    /** @internal Extracts a ScaleInfo Tuple into TypeDef.Tuple */
    __internal__extractTuple(lookupIndex, ids) {
      if (ids.length === 0) {
        return {
          info: TypeDefInfo.Null,
          type: "Null"
        };
      } else if (ids.length === 1) {
        return this.getTypeDef(ids[0]);
      }
      const sub = ids.map((t) => this.__internal__createSiDef(t));
      return withTypeString(this.registry, {
        info: TypeDefInfo.Tuple,
        lookupIndex,
        lookupName: this.__internal__names[lookupIndex],
        sub
      });
    }
    /** @internal Extracts a ScaleInfo Variant into TypeDef.{Option, Result, Enum} */
    __internal__extractVariant(lookupIndex, { params, path: path2 }, { variants }) {
      if (path2.length) {
        const specialVariant = path2[0].toString();
        if (specialVariant === "Option") {
          if (params.length !== 1) {
            throw new Error(`Option requires 1 parameter, found ${params.length}`);
          }
          return withTypeString(this.registry, {
            info: TypeDefInfo.Option,
            sub: this.__internal__createSiDef(params[0].type.unwrap())
          });
        } else if (specialVariant === "Result") {
          if (params.length !== 2) {
            throw new Error(`Result requires 2 parameters, found ${params.length}`);
          }
          return withTypeString(this.registry, {
            info: TypeDefInfo.Result,
            sub: params.map(({ type }, index2) => objectSpread({
              name: ["Ok", "Error"][index2]
            }, this.__internal__createSiDef(type.unwrap())))
          });
        }
      }
      if (variants.length === 0) {
        return {
          info: TypeDefInfo.Null,
          type: "Null"
        };
      }
      return this.__internal__extractVariantEnum(lookupIndex, variants);
    }
    /** @internal Extracts a ScaleInfo Variant into TypeDef.Enum */
    __internal__extractVariantEnum(lookupIndex, variants) {
      const sub = [];
      variants.slice().sort((a, b) => a.index.cmp(b.index)).forEach(({ fields, index: bnIndex, name }) => {
        const index2 = bnIndex.toNumber();
        while (sub.length !== index2) {
          sub.push({
            index: sub.length,
            info: TypeDefInfo.Null,
            name: `__Unused${sub.length}`,
            type: "Null"
          });
        }
        sub.push(objectSpread(this.__internal__extractFields(-1, fields), {
          index: index2,
          name: name.toString()
        }));
      });
      return withTypeString(this.registry, {
        info: TypeDefInfo.Enum,
        lookupIndex,
        lookupName: this.__internal__names[lookupIndex],
        sub
      });
    }
  }
  function convertType(key) {
    return (registry, { type }) => registry.createType("Si1TypeDef", {
      [key]: {
        type: type.toNumber()
      }
    });
  }
  function convertArray(registry, { len, type }) {
    return registry.createType("Si1TypeDef", {
      Array: {
        len,
        type: type.toNumber()
      }
    });
  }
  function convertBitSequence(registry, { bitOrderType, bitStoreType }) {
    return registry.createType("Si1TypeDef", {
      BitSequence: {
        bitOrderType: bitOrderType.toNumber(),
        bitStoreType: bitStoreType.toNumber()
      }
    });
  }
  const convertCompact = convertType("Compact");
  function convertComposite(registry, { fields }) {
    return registry.createType("Si1TypeDef", {
      Composite: {
        fields: convertFields(registry, fields)
      }
    });
  }
  function convertFields(registry, fields) {
    return fields.map(({ docs, name, type, typeName }) => registry.createType("Si1Field", {
      docs,
      name,
      type: type.toNumber(),
      typeName
    }));
  }
  function convertPhantom(registry, path2) {
    console.warn(`Converting phantom type ${path2.map((p) => p.toString()).join("::")} to empty tuple`);
    return registry.createType("Si1TypeDef", {
      Tuple: []
    });
  }
  function convertPrimitive(registry, prim) {
    return registry.createType("Si1TypeDef", {
      Primitive: prim.toString()
    });
  }
  const convertSequence = convertType("Sequence");
  function convertTuple(registry, types2) {
    return registry.createType("Si1TypeDef", {
      Tuple: types2.map((t) => t.toNumber())
    });
  }
  function convertVariant(registry, { variants }) {
    return registry.createType("Si1TypeDef", {
      Variant: {
        variants: variants.map(({ discriminant, docs, fields, name }, index2) => registry.createType("Si1Variant", {
          docs,
          fields: convertFields(registry, fields),
          index: discriminant.isSome ? discriminant.unwrap().toNumber() : index2,
          name
        }))
      }
    });
  }
  function convertDef(registry, { def, path: path2 }) {
    let result;
    switch (def.type) {
      case "Array":
        result = convertArray(registry, def.asArray);
        break;
      case "BitSequence":
        result = convertBitSequence(registry, def.asBitSequence);
        break;
      case "Compact":
        result = convertCompact(registry, def.asCompact);
        break;
      case "Composite":
        result = convertComposite(registry, def.asComposite);
        break;
      case "Phantom":
        result = convertPhantom(registry, path2);
        break;
      case "Primitive":
        result = convertPrimitive(registry, def.asPrimitive);
        break;
      case "Sequence":
        result = convertSequence(registry, def.asSequence);
        break;
      case "Tuple":
        result = convertTuple(registry, def.asTuple);
        break;
      case "Variant":
        result = convertVariant(registry, def.asVariant);
        break;
      default:
        assertUnreachable(def.type);
    }
    return result;
  }
  function toV1(registry, types2) {
    return types2.map((t, index2) => registry.createType("PortableType", {
      // offsets are +1 from v0
      id: index2 + 1,
      type: {
        def: convertDef(registry, t),
        docs: [],
        params: t.params.map((p) => registry.createType("Si1TypeParameter", {
          type: p.toNumber()
        })),
        path: t.path.map((p) => p.toString())
      }
    }));
  }
  function flattenUniq(list, result = []) {
    for (let i2 = 0, count = list.length; i2 < count; i2++) {
      const entry = list[i2];
      if (Array.isArray(entry)) {
        flattenUniq(entry, result);
      } else {
        result.push(entry);
      }
    }
    return [...new Set(result)];
  }
  function getSiName(lookup, type) {
    const typeDef = lookup.getTypeDef(type);
    return typeDef.lookupName || typeDef.type;
  }
  function extractSubSingle(_2, { sub }) {
    const { lookupName, type } = sub;
    return extractTypes$1([lookupName || type]);
  }
  function extractSubArray(_2, { sub }) {
    return extractTypes$1(sub.map(({ lookupName, type }) => lookupName || type));
  }
  function unhandled(type, { info: info2 }) {
    throw new Error(`Unhandled: Unable to create and validate type from ${type} (info=${TypeDefInfo[info2]})`);
  }
  const mapping = {
    [TypeDefInfo.BTreeMap]: extractSubArray,
    [TypeDefInfo.BTreeSet]: extractSubSingle,
    [TypeDefInfo.Compact]: extractSubSingle,
    [TypeDefInfo.DoNotConstruct]: unhandled,
    [TypeDefInfo.Enum]: extractSubArray,
    [TypeDefInfo.HashMap]: extractSubArray,
    [TypeDefInfo.Int]: unhandled,
    [TypeDefInfo.Linkage]: extractSubSingle,
    [TypeDefInfo.Null]: unhandled,
    [TypeDefInfo.Option]: extractSubSingle,
    [TypeDefInfo.Plain]: (_2, typeDef) => typeDef.lookupName || typeDef.type,
    [TypeDefInfo.Range]: extractSubSingle,
    [TypeDefInfo.RangeInclusive]: extractSubSingle,
    [TypeDefInfo.Result]: extractSubArray,
    [TypeDefInfo.Set]: extractSubArray,
    [TypeDefInfo.Si]: unhandled,
    [TypeDefInfo.Struct]: extractSubArray,
    [TypeDefInfo.Tuple]: extractSubArray,
    [TypeDefInfo.UInt]: unhandled,
    [TypeDefInfo.Vec]: extractSubSingle,
    [TypeDefInfo.VecFixed]: extractSubSingle,
    [TypeDefInfo.WrapperKeepOpaque]: extractSubSingle,
    [TypeDefInfo.WrapperOpaque]: extractSubSingle
  };
  function extractTypes$1(types2) {
    const count = types2.length;
    const result = new Array(count);
    for (let i2 = 0; i2 < count; i2++) {
      const type = types2[i2];
      const typeDef = getTypeDef(type);
      result[i2] = mapping[typeDef.info](type, typeDef);
    }
    return result;
  }
  const l$9 = logger("metadata");
  function validateTypes(registry, throwError, types2) {
    const missing = flattenUniq(extractTypes$1(types2)).filter((type) => !registry.hasType(type) && !registry.isLookupType(type)).sort();
    if (missing.length !== 0) {
      const message = `Unknown types found, no types for ${missing.join(", ")}`;
      if (throwError) {
        throw new Error(message);
      } else {
        l$9.warn(message);
      }
    }
    return types2;
  }
  function extractTypes(lookup, types2) {
    return types2.map(({ type }) => lookup.getTypeDef(type).type);
  }
  function extractFieldTypes(lookup, type) {
    return lookup.getSiType(type).def.asVariant.variants.map(({ fields }) => extractTypes(lookup, fields));
  }
  function getPalletNames({ lookup, pallets }) {
    return pallets.reduce((all2, { calls, constants, events: events2, storage: storage2 }) => {
      all2.push([extractTypes(lookup, constants)]);
      if (calls.isSome) {
        all2.push(extractFieldTypes(lookup, calls.unwrap().type));
      }
      if (events2.isSome) {
        all2.push(extractFieldTypes(lookup, events2.unwrap().type));
      }
      if (storage2.isSome) {
        all2.push(storage2.unwrap().items.map(({ type }) => {
          if (type.isPlain) {
            return [lookup.getTypeDef(type.asPlain).type];
          }
          const { hashers, key, value } = type.asMap;
          return hashers.length === 1 ? [
            lookup.getTypeDef(value).type,
            lookup.getTypeDef(key).type
          ] : [
            lookup.getTypeDef(value).type,
            ...lookup.getSiType(key).def.asTuple.map((t) => lookup.getTypeDef(t).type)
          ];
        }));
      }
      return all2;
    }, []);
  }
  function getUniqTypes(registry, meta, throwError) {
    return validateTypes(registry, throwError, flattenUniq(getPalletNames(meta)));
  }
  function trimDocs(docs) {
    const strings = docs.map((d) => d.toString().trim());
    const firstEmpty = strings.findIndex((d) => !d.length);
    return firstEmpty === -1 ? strings : strings.slice(0, firstEmpty);
  }
  function toCallsOnly(registry, { extrinsic, lookup, pallets }) {
    return registry.createTypeUnsafe("MetadataLatest", [{
      extrinsic,
      lookup: {
        types: lookup.types.map(({ id, type }) => registry.createTypeUnsafe("PortableType", [{
          id,
          type: objectSpread({}, type, { docs: trimDocs(type.docs) })
        }]))
      },
      pallets: pallets.map(({ calls, index: index2, name }) => ({
        calls: registry.createTypeUnsafe("Option<PalletCallMetadataLatest>", [calls.unwrapOr(null)]),
        index: index2,
        name
      }))
    }]).toJSON();
  }
  function unwrapStorageSi(type) {
    return type.isPlain ? type.asPlain : type.asMap.value;
  }
  function unwrapStorageType(registry, type, isOptional) {
    const outputType = getSiName(registry.lookup, unwrapStorageSi(type));
    return isOptional ? `Option<${outputType}>` : outputType;
  }
  function lazyVariants(lookup, { type }, getName, creator) {
    const result = {};
    const variants = lookup.getSiType(type).def.asVariant.variants;
    for (let i2 = 0, count = variants.length; i2 < count; i2++) {
      lazyMethod(result, variants[i2], creator, getName, i2);
    }
    return result;
  }
  const emptyCheck = {
    extrinsic: {},
    payload: {}
  };
  const polkadot = {
    LimitParathreadCommits: emptyCheck,
    OnlyStakingAndClaims: emptyCheck,
    PrevalidateAttests: emptyCheck,
    RestrictFunctionality: emptyCheck,
    TransactionCallFilter: emptyCheck,
    ValidateDoubleVoteReports: emptyCheck
  };
  const shell = {
    DisallowSigned: emptyCheck
  };
  const statemint = {
    ChargeAssetTxPayment: {
      extrinsic: {
        tip: "Compact<Balance>",
        // eslint-disable-next-line sort-keys
        assetId: "Option<AssetId>"
      },
      payload: {}
    }
  };
  const CheckMortality = {
    extrinsic: {
      era: "ExtrinsicEra"
    },
    payload: {
      blockHash: "Hash"
    }
  };
  const substrate$1 = {
    ChargeTransactionPayment: {
      extrinsic: {
        tip: "Compact<Balance>"
      },
      payload: {}
    },
    CheckBlockGasLimit: emptyCheck,
    CheckEra: CheckMortality,
    CheckGenesis: {
      extrinsic: {},
      payload: {
        genesisHash: "Hash"
      }
    },
    CheckMortality,
    CheckNonZeroSender: emptyCheck,
    CheckNonce: {
      extrinsic: {
        nonce: "Compact<Index>"
      },
      payload: {}
    },
    CheckSpecVersion: {
      extrinsic: {},
      payload: {
        specVersion: "u32"
      }
    },
    CheckTxVersion: {
      extrinsic: {},
      payload: {
        transactionVersion: "u32"
      }
    },
    CheckVersion: {
      extrinsic: {},
      payload: {
        specVersion: "u32"
      }
    },
    CheckWeight: emptyCheck,
    LockStakingStatus: emptyCheck,
    ValidateEquivocationReport: emptyCheck
  };
  const allExtensions = objectSpread({}, substrate$1, polkadot, shell, statemint);
  const fallbackExtensions = [
    "CheckVersion",
    "CheckGenesis",
    "CheckEra",
    "CheckNonce",
    "CheckWeight",
    "ChargeTransactionPayment",
    "CheckBlockGasLimit"
  ];
  function findUnknownExtensions(extensions, userExtensions = {}) {
    const names = [...Object.keys(allExtensions), ...Object.keys(userExtensions)];
    return extensions.filter((k) => !names.includes(k));
  }
  function expandExtensionTypes(extensions, type, userExtensions = {}) {
    return extensions.map((k) => userExtensions[k] || allExtensions[k]).filter((info2) => !!info2).reduce((result, info2) => objectSpread(result, info2[type]), {});
  }
  function decodeEvent(registry, value) {
    if (!value || !value.length) {
      return { DataType: Null };
    }
    const index2 = value.subarray(0, 2);
    return {
      DataType: registry.findMetaEvent(index2),
      value: {
        data: value.subarray(2),
        index: index2
      }
    };
  }
  class GenericEventData extends Tuple {
    constructor(registry, value, meta, section2 = "<unknown>", method = "<unknown>") {
      const fields = (meta == null ? void 0 : meta.fields) || [];
      super(registry, fields.map(({ type }) => registry.createLookupType(type)), value);
      this.__internal__names = null;
      this.__internal__meta = meta;
      this.__internal__method = method;
      this.__internal__section = section2;
      this.__internal__typeDef = fields.map(({ type }) => registry.lookup.getTypeDef(type));
      const names = fields.map(({ name }) => registry.lookup.sanitizeField(name)[0]).filter((n) => !!n);
      if (names.length === fields.length) {
        this.__internal__names = names;
        objectProperties(this, names, (_2, i2) => this[i2]);
      }
    }
    /**
     * @description The wrapped [[EventMetadata]]
     */
    get meta() {
      return this.__internal__meta;
    }
    /**
     * @description The method as a string
     */
    get method() {
      return this.__internal__method;
    }
    /**
     * @description The field names (as available)
     */
    get names() {
      return this.__internal__names;
    }
    /**
     * @description The section as a string
     */
    get section() {
      return this.__internal__section;
    }
    /**
     * @description The [[TypeDef]] for this event
     */
    get typeDef() {
      return this.__internal__typeDef;
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
      if (this.__internal__names !== null) {
        const json = {};
        for (let i2 = 0, count = this.__internal__names.length; i2 < count; i2++) {
          json[this.__internal__names[i2]] = this[i2].toHuman(isExtended);
        }
        return json;
      }
      return super.toHuman(isExtended);
    }
  }
  class GenericEvent extends Struct {
    // Currently we _only_ decode from Uint8Array, since we expect it to
    // be used via EventRecord
    constructor(registry, _value) {
      const { DataType, value } = decodeEvent(registry, _value);
      super(registry, {
        index: "EventId",
        // eslint-disable-next-line sort-keys
        data: DataType
      }, value);
    }
    /**
     * @description The wrapped [[EventData]]
     */
    get data() {
      return this.getT("data");
    }
    /**
     * @description The [[EventId]], identifying the raw event
     */
    get index() {
      return this.getT("index");
    }
    /**
     * @description The [[EventMetadata]] with the documentation
     */
    get meta() {
      return this.data.meta;
    }
    /**
     * @description The method string identifying the event
     */
    get method() {
      return this.data.method;
    }
    /**
     * @description The section string identifying the event
     */
    get section() {
      return this.data.section;
    }
    /**
     * @description The [[TypeDef]] for the event
     */
    get typeDef() {
      return this.data.typeDef;
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExpanded) {
      return objectSpread({
        method: this.method,
        section: this.section
      }, isExpanded ? { docs: this.meta.docs.map((d) => d.toString()) } : null, super.toHuman(isExpanded));
    }
  }
  const EXTRINSIC_VERSION = 4;
  class GenericExtrinsicV4 extends Struct {
    constructor(registry, value, { isSigned } = {}) {
      super(registry, {
        signature: "ExtrinsicSignatureV4",
        // eslint-disable-next-line sort-keys
        method: "Call"
      }, GenericExtrinsicV4.decodeExtrinsic(registry, value, isSigned));
    }
    /** @internal */
    static decodeExtrinsic(registry, value, isSigned = false) {
      if (value instanceof GenericExtrinsicV4) {
        return value;
      } else if (value instanceof registry.createClassUnsafe("Call")) {
        return { method: value };
      } else if (isU8a(value)) {
        const signature = registry.createTypeUnsafe("ExtrinsicSignatureV4", [value, { isSigned }]);
        const method = registry.createTypeUnsafe("Call", [value.subarray(signature.encodedLength)]);
        return {
          method,
          signature
        };
      }
      return value || {};
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
      return this.toU8a().length;
    }
    /**
     * @description The [[Call]] this extrinsic wraps
     */
    get method() {
      return this.getT("method");
    }
    /**
     * @description The [[ExtrinsicSignatureV4]]
     */
    get signature() {
      return this.getT("signature");
    }
    /**
     * @description The version for the signature
     */
    get version() {
      return EXTRINSIC_VERSION;
    }
    /**
     * @description Add an [[ExtrinsicSignatureV4]] to the extrinsic (already generated)
     */
    addSignature(signer, signature, payload) {
      this.signature.addSignature(signer, signature, payload);
      return this;
    }
    /**
     * @description Sign the extrinsic with a specific keypair
     */
    sign(account2, options) {
      this.signature.sign(this.method, account2, options);
      return this;
    }
    /**
     * @describe Adds a fake signature to the extrinsic
     */
    signFake(signer, options) {
      this.signature.signFake(this.method, signer, options);
      return this;
    }
  }
  const BIT_SIGNED = 128;
  const BIT_UNSIGNED = 0;
  const EMPTY_U8A = new Uint8Array();
  const DEFAULT_VERSION = 4;
  const IMMORTAL_ERA = new Uint8Array([0]);
  const UNMASK_VERSION = 127;
  const VERSIONS$1 = [
    "ExtrinsicUnknown",
    "ExtrinsicUnknown",
    "ExtrinsicUnknown",
    "ExtrinsicUnknown",
    "ExtrinsicV4"
  ];
  function newFromValue(registry, value, version2) {
    if (value instanceof GenericExtrinsic) {
      return value.unwrap();
    }
    const isSigned = (version2 & BIT_SIGNED) === BIT_SIGNED;
    const type = VERSIONS$1[version2 & UNMASK_VERSION] || VERSIONS$1[0];
    return registry.createTypeUnsafe(type, [value, { isSigned, version: version2 }]);
  }
  function decodeExtrinsic(registry, value, version2 = DEFAULT_VERSION) {
    if (isU8a(value) || Array.isArray(value) || isHex(value)) {
      return decodeU8a$4(registry, u8aToU8a(value), version2);
    } else if (value instanceof registry.createClassUnsafe("Call")) {
      return newFromValue(registry, { method: value }, version2);
    }
    return newFromValue(registry, value, version2);
  }
  function decodeU8a$4(registry, value, version2) {
    if (!value.length) {
      return newFromValue(registry, new Uint8Array(), version2);
    }
    const [offset, length2] = compactFromU8a(value);
    const total = offset + length2.toNumber();
    if (total > value.length) {
      throw new Error(`Extrinsic: length less than remainder, expected at least ${total}, found ${value.length}`);
    }
    const data2 = value.subarray(offset, total);
    return newFromValue(registry, data2.subarray(1), data2[0]);
  }
  class ExtrinsicBase extends AbstractBase {
    constructor(registry, value, initialU8aLength) {
      super(registry, value, initialU8aLength);
      const signKeys = Object.keys(registry.getSignedExtensionTypes());
      const getter = (key) => this.inner.signature[key];
      for (let i2 = 0, count = signKeys.length; i2 < count; i2++) {
        objectProperty(this, signKeys[i2], getter);
      }
    }
    /**
     * @description The arguments passed to for the call, exposes args so it is compatible with [[Call]]
     */
    get args() {
      return this.method.args;
    }
    /**
     * @description The argument definitions, compatible with [[Call]]
     */
    get argsDef() {
      return this.method.argsDef;
    }
    /**
     * @description The actual `[sectionIndex, methodIndex]` as used in the Call
     */
    get callIndex() {
      return this.method.callIndex;
    }
    /**
     * @description The actual data for the Call
     */
    get data() {
      return this.method.data;
    }
    /**
     * @description The era for this extrinsic
     */
    get era() {
      return this.inner.signature.era;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
      return this.toU8a().length;
    }
    /**
     * @description `true` id the extrinsic is signed
     */
    get isSigned() {
      return this.inner.signature.isSigned;
    }
    /**
     * @description The length of the actual data, excluding prefix
     */
    get length() {
      return this.toU8a(true).length;
    }
    /**
     * @description The [[FunctionMetadataLatest]] that describes the extrinsic
     */
    get meta() {
      return this.method.meta;
    }
    /**
     * @description The [[Call]] this extrinsic wraps
     */
    get method() {
      return this.inner.method;
    }
    /**
     * @description The nonce for this extrinsic
     */
    get nonce() {
      return this.inner.signature.nonce;
    }
    /**
     * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
     */
    get signature() {
      return this.inner.signature.signature;
    }
    /**
     * @description The [[Address]] that signed
     */
    get signer() {
      return this.inner.signature.signer;
    }
    /**
     * @description Forwards compat
     */
    get tip() {
      return this.inner.signature.tip;
    }
    /**
     * @description Returns the raw transaction version (not flagged with signing information)
    */
    get type() {
      return this.inner.version;
    }
    get inner() {
      return this.unwrap();
    }
    /**
     * @description Returns the encoded version flag
    */
    get version() {
      return this.type | (this.isSigned ? BIT_SIGNED : BIT_UNSIGNED);
    }
    /**
     * @description Checks if the source matches this in type
     */
    is(other) {
      return this.method.is(other);
    }
    unwrap() {
      return super.unwrap();
    }
  }
  class GenericExtrinsic extends ExtrinsicBase {
    constructor(registry, value, { version: version2 } = {}) {
      super(registry, decodeExtrinsic(registry, value, version2));
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
      if (!this.__internal__hashCache) {
        this.__internal__hashCache = super.hash;
      }
      return this.__internal__hashCache;
    }
    /**
     * @description Injects an already-generated signature into the extrinsic
     */
    addSignature(signer, signature, payload) {
      this.inner.addSignature(signer, signature, payload);
      this.__internal__hashCache = void 0;
      return this;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
      const encoded = u8aConcat(...this.toU8aInner());
      return {
        inner: this.isSigned ? this.inner.inspect().inner : this.inner.method.inspect().inner,
        outer: [compactToU8a(encoded.length), new Uint8Array([this.version])]
      };
    }
    /**
     * @description Sign the extrinsic with a specific keypair
     */
    sign(account2, options) {
      this.inner.sign(account2, options);
      this.__internal__hashCache = void 0;
      return this;
    }
    /**
     * @describe Adds a fake signature to the extrinsic
     */
    signFake(signer, options) {
      this.inner.signFake(signer, options);
      this.__internal__hashCache = void 0;
      return this;
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex(isBare) {
      return u8aToHex(this.toU8a(isBare));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExpanded) {
      return objectSpread({}, {
        isSigned: this.isSigned,
        method: this.method.toHuman(isExpanded)
      }, this.isSigned ? {
        era: this.era.toHuman(isExpanded),
        nonce: this.nonce.toHuman(isExpanded),
        signature: this.signature.toHex(),
        signer: this.signer.toHuman(isExpanded),
        tip: this.tip.toHuman(isExpanded)
      } : null);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
      return this.toHex();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return "Extrinsic";
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value is not length-prefixed
     */
    toU8a(isBare) {
      const encoded = u8aConcat(...this.toU8aInner());
      return isBare ? encoded : compactAddLength(encoded);
    }
    toU8aInner() {
      return [
        new Uint8Array([this.version]),
        this.inner.toU8a()
      ];
    }
  }
  GenericExtrinsic.LATEST_EXTRINSIC_VERSION = EXTRINSIC_VERSION;
  function getTrailingZeros(period) {
    const binary = period.toString(2);
    let index2 = 0;
    while (binary[binary.length - 1 - index2] === "0") {
      index2++;
    }
    return index2;
  }
  function decodeMortalEra(registry, value) {
    if (isU8a(value) || isHex(value) || Array.isArray(value)) {
      return decodeMortalU8a(registry, u8aToU8a(value));
    } else if (!value) {
      return [new u64(registry), new u64(registry)];
    } else if (isObject$2(value)) {
      return decodeMortalObject(registry, value);
    }
    throw new Error("Invalid data passed to Mortal era");
  }
  function decodeMortalObject(registry, value) {
    const { current, period } = value;
    let calPeriod = Math.pow(2, Math.ceil(Math.log2(period)));
    calPeriod = Math.min(Math.max(calPeriod, 4), 1 << 16);
    const phase = current % calPeriod;
    const quantizeFactor = Math.max(calPeriod >> 12, 1);
    const quantizedPhase = phase / quantizeFactor * quantizeFactor;
    return [new u64(registry, calPeriod), new u64(registry, quantizedPhase)];
  }
  function decodeMortalU8a(registry, value) {
    if (value.length === 0) {
      return [new u64(registry), new u64(registry)];
    }
    const first2 = u8aToBn(value.subarray(0, 1)).toNumber();
    const second = u8aToBn(value.subarray(1, 2)).toNumber();
    const encoded = first2 + (second << 8);
    const period = 2 << encoded % (1 << 4);
    const quantizeFactor = Math.max(period >> 12, 1);
    const phase = (encoded >> 4) * quantizeFactor;
    if (period < 4 || phase >= period) {
      throw new Error("Invalid data passed to Mortal era");
    }
    return [new u64(registry, period), new u64(registry, phase)];
  }
  function decodeExtrinsicEra(value = new Uint8Array()) {
    if (isU8a(value)) {
      return !value.length || value[0] === 0 ? new Uint8Array([0]) : new Uint8Array([1, value[0], value[1]]);
    } else if (!value) {
      return new Uint8Array([0]);
    } else if (value instanceof GenericExtrinsicEra) {
      return decodeExtrinsicEra(value.toU8a());
    } else if (isHex(value)) {
      return decodeExtrinsicEra(hexToU8a(value));
    } else if (isObject$2(value)) {
      const entries = Object.entries(value).map(([k, v]) => [k.toLowerCase(), v]);
      const mortal = entries.find(([k]) => k.toLowerCase() === "mortalera");
      const immortal = entries.find(([k]) => k.toLowerCase() === "immortalera");
      return mortal ? { MortalEra: mortal[1] } : immortal ? { ImmortalEra: immortal[1] } : { MortalEra: value };
    }
    throw new Error("Invalid data passed to Era");
  }
  class ImmortalEra extends Raw {
    constructor(registry, _value) {
      super(registry, IMMORTAL_ERA);
    }
  }
  class MortalEra extends Tuple {
    constructor(registry, value) {
      super(registry, {
        period: u64,
        phase: u64
      }, decodeMortalEra(registry, value));
    }
    /**
     * @description Encoded length for mortals occupy 2 bytes, different from the actual Tuple since it is encoded. This is a shortcut fro `toU8a().length`
     */
    get encodedLength() {
      return 2;
    }
    /**
     * @description The period of this Mortal wraps as a [[U64]]
     */
    get period() {
      return this[0];
    }
    /**
     * @description The phase of this Mortal wraps as a [[U64]]
     */
    get phase() {
      return this[1];
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
      return {
        period: formatNumber(this.period),
        phase: formatNumber(this.phase)
      };
    }
    /**
     * @description Returns a JSON representation of the actual value
     */
    toJSON() {
      return this.toHex();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the parity-codec specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     * Period and phase are encoded:
     *   - The period of validity from the block hash found in the signing material.
     *   - The phase in the period that this transaction's lifetime begins (and, importantly,
     *     implies which block hash is included in the signature material). If the `period` is
     *     greater than 1 << 12, then it will be a factor of the times greater than 1<<12 that
     *     `period` is.
     */
    toU8a(_isBare) {
      const period = this.period.toNumber();
      const encoded = Math.min(15, Math.max(1, getTrailingZeros(period) - 1)) + (this.phase.toNumber() / Math.max(period >> 12, 1) << 4);
      return new Uint8Array([
        encoded & 255,
        encoded >> 8
      ]);
    }
    /**
     * @description Get the block number of the start of the era whose properties this object describes that `current` belongs to.
     */
    birth(current) {
      const phase = this.phase.toNumber();
      const period = this.period.toNumber();
      return ~~((Math.max(bnToBn(current).toNumber(), phase) - phase) / period) * period + phase;
    }
    /**
     * @description Get the block number of the first block at which the era has ended.
     */
    death(current) {
      return this.birth(current) + this.period.toNumber();
    }
  }
  class GenericExtrinsicEra extends Enum {
    constructor(registry, value) {
      super(registry, {
        ImmortalEra,
        MortalEra
      }, decodeExtrinsicEra(value));
    }
    /**
     * @description Override the encoded length method
     */
    get encodedLength() {
      return this.isImmortalEra ? this.asImmortalEra.encodedLength : this.asMortalEra.encodedLength;
    }
    /**
     * @description Returns the item as a [[ImmortalEra]]
     */
    get asImmortalEra() {
      if (!this.isImmortalEra) {
        throw new Error(`Cannot convert '${this.type}' via asImmortalEra`);
      }
      return this.inner;
    }
    /**
     * @description Returns the item as a [[MortalEra]]
     */
    get asMortalEra() {
      if (!this.isMortalEra) {
        throw new Error(`Cannot convert '${this.type}' via asMortalEra`);
      }
      return this.inner;
    }
    /**
     * @description `true` if Immortal
     */
    get isImmortalEra() {
      return this.index === 0;
    }
    /**
     * @description `true` if Mortal
     */
    get isMortalEra() {
      return this.index > 0;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the parity-codec specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
      return this.isMortalEra ? this.asMortalEra.toU8a(isBare) : this.asImmortalEra.toU8a(isBare);
    }
  }
  const VERSIONS = [
    "ExtrinsicPayloadUnknown",
    "ExtrinsicPayloadUnknown",
    "ExtrinsicPayloadUnknown",
    "ExtrinsicPayloadUnknown",
    "ExtrinsicPayloadV4"
  ];
  function decodeExtrinsicPayload(registry, value, version2 = DEFAULT_VERSION) {
    if (value instanceof GenericExtrinsicPayload) {
      return value.unwrap();
    }
    return registry.createTypeUnsafe(VERSIONS[version2] || VERSIONS[0], [value, { version: version2 }]);
  }
  class GenericExtrinsicPayload extends AbstractBase {
    constructor(registry, value, { version: version2 } = {}) {
      super(registry, decodeExtrinsicPayload(registry, value, version2));
    }
    /**
     * @description The block [[BlockHash]] the signature applies to (mortal/immortal)
     */
    get blockHash() {
      return this.inner.blockHash;
    }
    /**
     * @description The [[ExtrinsicEra]]
     */
    get era() {
      return this.inner.era;
    }
    /**
     * @description The genesis block [[BlockHash]] the signature applies to
     */
    get genesisHash() {
      return this.inner.genesisHash || this.registry.createTypeUnsafe("Hash", []);
    }
    /**
     * @description The [[Bytes]] contained in the payload
     */
    get method() {
      return this.inner.method;
    }
    /**
     * @description The [[Index]]
     */
    get nonce() {
      return this.inner.nonce;
    }
    /**
     * @description The specVersion as a [[u32]] for this payload
     */
    get specVersion() {
      return this.inner.specVersion || this.registry.createTypeUnsafe("u32", []);
    }
    /**
     * @description The [[Balance]]
     */
    get tip() {
      return this.inner.tip || this.registry.createTypeUnsafe("Compact<Balance>", []);
    }
    /**
     * @description The transaction version as a [[u32]] for this payload
     */
    get transactionVersion() {
      return this.inner.transactionVersion || this.registry.createTypeUnsafe("u32", []);
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
      return this.inner.eq(other);
    }
    /**
     * @description Sign the payload with the keypair
     */
    sign(signerPair) {
      const signature = this.inner.sign(signerPair);
      return {
        signature: u8aToHex(signature)
      };
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
      return this.inner.toHuman(isExtended);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
      return this.toHex();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return "ExtrinsicPayload";
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
      return this.toHex();
    }
    /**
     * @description Returns a serialized u8a form
     */
    toU8a(isBare) {
      return super.toU8a(isBare ? { method: true } : false);
    }
  }
  class GenericExtrinsicPayloadUnknown extends Struct {
    constructor(registry, _value, { version: version2 = 0 } = {}) {
      super(registry, {});
      throw new Error(`Unsupported extrinsic payload version ${version2}`);
    }
  }
  class GenericExtrinsicUnknown extends Struct {
    constructor(registry, _value, { isSigned = false, version: version2 = 0 } = {}) {
      super(registry, {});
      throw new Error(`Unsupported ${isSigned ? "" : "un"}signed extrinsic version ${version2 & UNMASK_VERSION}`);
    }
  }
  const knownTypes = {
    address: "Address",
    blockHash: "Hash",
    blockNumber: "BlockNumber",
    era: "ExtrinsicEra",
    genesisHash: "Hash",
    method: "Call",
    nonce: "Compact<Index>",
    runtimeVersion: "RuntimeVersion",
    signedExtensions: "Vec<Text>",
    tip: "Compact<Balance>",
    version: "u8"
  };
  class GenericSignerPayload extends Struct {
    constructor(registry, value) {
      const extensionTypes = objectSpread({}, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra());
      super(registry, objectSpread({}, extensionTypes, knownTypes), value);
      this.__internal__extraTypes = {};
      const getter = (key) => this.get(key);
      for (const [key, type] of Object.entries(extensionTypes)) {
        if (!knownTypes[key]) {
          this.__internal__extraTypes[key] = type;
        }
        objectProperty(this, key, getter);
      }
    }
    get address() {
      return this.getT("address");
    }
    get blockHash() {
      return this.getT("blockHash");
    }
    get blockNumber() {
      return this.getT("blockNumber");
    }
    get era() {
      return this.getT("era");
    }
    get genesisHash() {
      return this.getT("genesisHash");
    }
    get method() {
      return this.getT("method");
    }
    get nonce() {
      return this.getT("nonce");
    }
    get runtimeVersion() {
      return this.getT("runtimeVersion");
    }
    get signedExtensions() {
      return this.getT("signedExtensions");
    }
    get tip() {
      return this.getT("tip");
    }
    get version() {
      return this.getT("version");
    }
    /**
     * @description Creates an representation of the structure as an ISignerPayload JSON
     */
    toPayload() {
      const result = {};
      const keys2 = Object.keys(this.__internal__extraTypes);
      for (let i2 = 0, count = keys2.length; i2 < count; i2++) {
        const key = keys2[i2];
        const value = this.get(key);
        const isOption2 = value instanceof Option;
        if (!isOption2 || value.isSome) {
          result[key] = value.toHex();
        }
      }
      return objectSpread(result, {
        // the known defaults as managed explicitly and has different
        // formatting in cases, e.g. we mostly expose a hex format here
        address: this.address.toString(),
        blockHash: this.blockHash.toHex(),
        blockNumber: this.blockNumber.toHex(),
        era: this.era.toHex(),
        genesisHash: this.genesisHash.toHex(),
        method: this.method.toHex(),
        nonce: this.nonce.toHex(),
        signedExtensions: this.signedExtensions.map((e) => e.toString()),
        specVersion: this.runtimeVersion.specVersion.toHex(),
        tip: this.tip.toHex(),
        transactionVersion: this.runtimeVersion.transactionVersion.toHex(),
        version: this.version.toNumber()
      });
    }
    /**
     * @description Creates a representation of the payload in raw Exrinsic form
     */
    toRaw() {
      const payload = this.toPayload();
      const data2 = u8aToHex(this.registry.createTypeUnsafe("ExtrinsicPayload", [payload, { version: payload.version }]).toU8a({ method: true }));
      return {
        address: payload.address,
        data: data2,
        type: "payload"
      };
    }
  }
  function sign(registry, signerPair, u8a2, options) {
    const encoded = u8a2.length > 256 ? registry.hash(u8a2) : u8a2;
    return signerPair.sign(encoded, options);
  }
  class GenericExtrinsicPayloadV4 extends Struct {
    constructor(registry, value) {
      super(registry, objectSpread({ method: "Bytes" }, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra()), value);
      this.__internal__signOptions = {
        withType: registry.createTypeUnsafe("ExtrinsicSignature", []) instanceof Enum
      };
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
      return super.inspect({ method: true });
    }
    /**
     * @description The block [[BlockHash]] the signature applies to (mortal/immortal)
     */
    get blockHash() {
      return this.getT("blockHash");
    }
    /**
     * @description The [[ExtrinsicEra]]
     */
    get era() {
      return this.getT("era");
    }
    /**
     * @description The genesis [[BlockHash]] the signature applies to (mortal/immortal)
     */
    get genesisHash() {
      return this.getT("genesisHash");
    }
    /**
     * @description The [[Bytes]] contained in the payload
     */
    get method() {
      return this.getT("method");
    }
    /**
     * @description The [[Index]]
     */
    get nonce() {
      return this.getT("nonce");
    }
    /**
     * @description The specVersion for this signature
     */
    get specVersion() {
      return this.getT("specVersion");
    }
    /**
     * @description The tip [[Balance]]
     */
    get tip() {
      return this.getT("tip");
    }
    /**
     * @description The transactionVersion for this signature
     */
    get transactionVersion() {
      return this.getT("transactionVersion");
    }
    /**
     * @description The (optional) asset id for this signature for chains that support transaction fees in assets
     */
    get assetId() {
      return this.getT("assetId");
    }
    /**
     * @description Sign the payload with the keypair
     */
    sign(signerPair) {
      return sign(this.registry, signerPair, this.toU8a({ method: true }), this.__internal__signOptions);
    }
  }
  const FAKE_SIGNATURE = new Uint8Array(256).fill(1);
  function toAddress(registry, address) {
    return registry.createTypeUnsafe("Address", [isU8a(address) ? u8aToHex(address) : address]);
  }
  class GenericExtrinsicSignatureV4 extends Struct {
    constructor(registry, value, { isSigned } = {}) {
      const signTypes = registry.getSignedExtensionTypes();
      super(registry, objectSpread(
        // eslint-disable-next-line sort-keys
        { signer: "Address", signature: "ExtrinsicSignature" },
        signTypes
      ), GenericExtrinsicSignatureV4.decodeExtrinsicSignature(value, isSigned));
      this.__internal__signKeys = Object.keys(signTypes);
      objectProperties(this, this.__internal__signKeys, (k) => this.get(k));
    }
    /** @internal */
    static decodeExtrinsicSignature(value, isSigned = false) {
      if (!value) {
        return EMPTY_U8A;
      } else if (value instanceof GenericExtrinsicSignatureV4) {
        return value;
      }
      return isSigned ? value : EMPTY_U8A;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
      return this.isSigned ? super.encodedLength : 0;
    }
    /**
     * @description `true` if the signature is valid
     */
    get isSigned() {
      return !this.signature.isEmpty;
    }
    /**
     * @description The [[ExtrinsicEra]] (mortal or immortal) this signature applies to
     */
    get era() {
      return this.getT("era");
    }
    /**
     * @description The [[Index]] for the signature
     */
    get nonce() {
      return this.getT("nonce");
    }
    /**
     * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
     */
    get signature() {
      return this.multiSignature.value || this.multiSignature;
    }
    /**
     * @description The raw [[ExtrinsicSignature]]
     */
    get multiSignature() {
      return this.getT("signature");
    }
    /**
     * @description The [[Address]] that signed
     */
    get signer() {
      return this.getT("signer");
    }
    /**
     * @description The [[Balance]] tip
     */
    get tip() {
      return this.getT("tip");
    }
    _injectSignature(signer, signature, payload) {
      for (let i2 = 0, count = this.__internal__signKeys.length; i2 < count; i2++) {
        const k = this.__internal__signKeys[i2];
        const v = payload.get(k);
        if (!isUndefined$1(v)) {
          this.set(k, v);
        }
      }
      this.set("signer", signer);
      this.set("signature", signature);
      return this;
    }
    /**
     * @description Adds a raw signature
     */
    addSignature(signer, signature, payload) {
      return this._injectSignature(toAddress(this.registry, signer), this.registry.createTypeUnsafe("ExtrinsicSignature", [signature]), new GenericExtrinsicPayloadV4(this.registry, payload));
    }
    /**
     * @description Creates a payload from the supplied options
     */
    createPayload(method, options) {
      const { era, runtimeVersion: { specVersion, transactionVersion } } = options;
      return new GenericExtrinsicPayloadV4(this.registry, objectSpread({}, options, {
        era: era || IMMORTAL_ERA,
        method: method.toHex(),
        specVersion,
        transactionVersion
      }));
    }
    /**
     * @description Generate a payload and applies the signature from a keypair
     */
    sign(method, account2, options) {
      if (!account2 || !account2.addressRaw) {
        throw new Error(`Expected a valid keypair for signing, found ${stringify$1(account2)}`);
      }
      const payload = this.createPayload(method, options);
      return this._injectSignature(toAddress(this.registry, account2.addressRaw), this.registry.createTypeUnsafe("ExtrinsicSignature", [payload.sign(account2)]), payload);
    }
    /**
     * @description Generate a payload and applies a fake signature
     */
    signFake(method, address, options) {
      if (!address) {
        throw new Error(`Expected a valid address for signing, found ${stringify$1(address)}`);
      }
      const payload = this.createPayload(method, options);
      return this._injectSignature(toAddress(this.registry, address), this.registry.createTypeUnsafe("ExtrinsicSignature", [FAKE_SIGNATURE]), payload);
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
      return this.isSigned ? super.toU8a(isBare) : EMPTY_U8A;
    }
  }
  function decodeAccountId$1(value) {
    if (isU8a(value) || Array.isArray(value)) {
      return u8aToU8a(value);
    } else if (!value) {
      return new Uint8Array();
    } else if (isHex(value)) {
      return hexToU8a(value);
    } else if (isString$1(value)) {
      return decodeAddress(value.toString());
    }
    throw new Error(`Unknown type passed to AccountId constructor, found typeof ${typeof value}`);
  }
  class BaseAccountId extends U8aFixed {
    constructor(registry, allowedBits = 256 | 264, value) {
      const decoded = decodeAccountId$1(value);
      const decodedBits = decoded.length * 8;
      if (decodedBits < allowedBits && decoded.some((b) => b)) {
        throw new Error(`Invalid AccountId provided, expected ${allowedBits >> 3} bytes, found ${decoded.length}`);
      }
      super(registry, decoded, allowedBits);
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
      return super.eq(decodeAccountId$1(other));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
      return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
      return this.toString();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
      return this.toJSON();
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
      return encodeAddress(this, this.registry.chainSS58);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return "AccountId";
    }
  }
  class GenericAccountId extends BaseAccountId {
    constructor(registry, value) {
      super(registry, 256, value);
    }
  }
  class GenericAccountId33 extends BaseAccountId {
    constructor(registry, value) {
      super(registry, 264, value);
    }
  }
  const PREFIX_1BYTE = 239;
  const PREFIX_2BYTE = 252;
  const PREFIX_4BYTE = 253;
  const PREFIX_8BYTE = 254;
  const MAX_1BYTE = new BN(PREFIX_1BYTE);
  const MAX_2BYTE = new BN(1).shln(16);
  const MAX_4BYTE = new BN(1).shln(32);
  function decodeAccountIndex(value) {
    if (value instanceof GenericAccountIndex) {
      return value.toBn();
    } else if (isBn(value) || isNumber$1(value) || isHex(value) || isU8a(value) || isBigInt(value)) {
      return value;
    }
    return decodeAccountIndex(decodeAddress(value));
  }
  class GenericAccountIndex extends u32 {
    constructor(registry, value = new BN(0)) {
      super(registry, decodeAccountIndex(value));
    }
    static calcLength(_value) {
      const value = bnToBn(_value);
      if (value.lte(MAX_1BYTE)) {
        return 1;
      } else if (value.lt(MAX_2BYTE)) {
        return 2;
      } else if (value.lt(MAX_4BYTE)) {
        return 4;
      }
      return 8;
    }
    static readLength(input) {
      const first2 = input[0];
      if (first2 === PREFIX_2BYTE) {
        return [1, 2];
      } else if (first2 === PREFIX_4BYTE) {
        return [1, 4];
      } else if (first2 === PREFIX_8BYTE) {
        return [1, 8];
      }
      return [0, 1];
    }
    static writeLength(input) {
      switch (input.length) {
        case 2:
          return new Uint8Array([PREFIX_2BYTE]);
        case 4:
          return new Uint8Array([PREFIX_4BYTE]);
        case 8:
          return new Uint8Array([PREFIX_8BYTE]);
        default:
          return new Uint8Array([]);
      }
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
      if (isBn(other) || isNumber$1(other)) {
        return super.eq(other);
      }
      return super.eq(this.registry.createTypeUnsafe("AccountIndex", [other]));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
      return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
      return this.toString();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
      return this.toJSON();
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
      const length2 = GenericAccountIndex.calcLength(this);
      return encodeAddress(this.toU8a().subarray(0, length2), this.registry.chainSS58);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return "AccountIndex";
    }
  }
  class GenericBlock extends Struct {
    constructor(registry, value) {
      super(registry, {
        header: "Header",
        // eslint-disable-next-line sort-keys
        extrinsics: "Vec<Extrinsic>"
      }, value);
    }
    /**
     * @description Encodes a content [[Hash]] for the block
     */
    get contentHash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description The [[Extrinsic]] contained in the block
     */
    get extrinsics() {
      return this.getT("extrinsics");
    }
    /**
     * @description Block/header [[Hash]]
     */
    get hash() {
      return this.header.hash;
    }
    /**
     * @description The [[Header]] of the block
     */
    get header() {
      return this.getT("header");
    }
  }
  function getArgsDef(registry, meta) {
    return meta.fields.reduce((result, { name, type }, index2) => {
      result[name.unwrapOr(`param${index2}`).toString()] = registry.createLookupType(type);
      return result;
    }, {});
  }
  function decodeCallViaObject(registry, value, _meta) {
    const { args, callIndex } = value;
    const lookupIndex = callIndex instanceof GenericCallIndex ? callIndex.toU8a() : callIndex;
    const meta = _meta || registry.findMetaCall(lookupIndex).meta;
    return {
      args,
      argsDef: getArgsDef(registry, meta),
      callIndex,
      meta
    };
  }
  function decodeCallViaU8a(registry, value, _meta) {
    const callIndex = registry.firstCallIndex.slice();
    callIndex.set(value.subarray(0, 2), 0);
    const meta = _meta || registry.findMetaCall(callIndex).meta;
    return {
      args: value.subarray(2),
      argsDef: getArgsDef(registry, meta),
      callIndex,
      meta
    };
  }
  function decodeCall(registry, value = new Uint8Array(), _meta) {
    if (isU8a(value) || isHex(value)) {
      return decodeCallViaU8a(registry, u8aToU8a(value), _meta);
    } else if (isObject$2(value) && value.callIndex && value.args) {
      return decodeCallViaObject(registry, value, _meta);
    }
    throw new Error(`Call: Cannot decode value '${value}' of type ${typeof value}`);
  }
  class GenericCallIndex extends U8aFixed {
    constructor(registry, value) {
      super(registry, value, 16);
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
      return this.toHex();
    }
  }
  class GenericCall extends Struct {
    constructor(registry, value, meta) {
      const decoded = decodeCall(registry, value, meta);
      try {
        super(registry, {
          callIndex: GenericCallIndex,
          // eslint-disable-next-line sort-keys
          args: Struct.with(decoded.argsDef)
        }, decoded);
      } catch (error) {
        let method = "unknown.unknown";
        try {
          const c = registry.findMetaCall(decoded.callIndex);
          method = `${c.section}.${c.method}`;
        } catch {
        }
        throw new Error(`Call: failed decoding ${method}:: ${error.message}`);
      }
      this._meta = decoded.meta;
    }
    /**
     * @description The arguments for the function call
     */
    get args() {
      return [...this.getT("args").values()];
    }
    /**
     * @description The argument definitions
     */
    get argsDef() {
      return getArgsDef(this.registry, this.meta);
    }
    /**
     * @description The argument entries
     */
    get argsEntries() {
      return [...this.getT("args").entries()];
    }
    /**
     * @description The encoded `[sectionIndex, methodIndex]` identifier
     */
    get callIndex() {
      return this.getT("callIndex").toU8a();
    }
    /**
     * @description The encoded data
     */
    get data() {
      return this.getT("args").toU8a();
    }
    /**
     * @description The [[FunctionMetadata]]
     */
    get meta() {
      return this._meta;
    }
    /**
     * @description Returns the name of the method
     */
    get method() {
      return this.registry.findMetaCall(this.callIndex).method;
    }
    /**
     * @description Returns the module containing the method
     */
    get section() {
      return this.registry.findMetaCall(this.callIndex).section;
    }
    /**
     * @description Checks if the source matches this in type
     */
    is(other) {
      return other.callIndex[0] === this.callIndex[0] && other.callIndex[1] === this.callIndex[1];
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExpanded) {
      let call;
      try {
        call = this.registry.findMetaCall(this.callIndex);
      } catch {
      }
      return objectSpread({
        args: this.argsEntries.reduce((args, [n, a]) => objectSpread(args, { [n]: a.toHuman(isExpanded) }), {}),
        method: call == null ? void 0 : call.method,
        section: call == null ? void 0 : call.section
      }, isExpanded && call ? { docs: call.meta.docs.map((d) => d.toString()) } : null);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return "Call";
    }
  }
  function createValue(registry, type, value, asArray = true) {
    if (value && isFunction$2(value.unwrapOrDefault)) {
      return value;
    }
    return registry.createTypeUnsafe(type, [
      asArray ? isNull(value) || isUndefined$1(value) ? null : Array.isArray(value) ? value : [value] : value
    ]);
  }
  function decodeValue(registry, key, value) {
    return key === "ss58Format" ? createValue(registry, "Option<u32>", value, false) : key === "tokenDecimals" ? createValue(registry, "Option<Vec<u32>>", value) : key === "tokenSymbol" ? createValue(registry, "Option<Vec<Text>>", value) : value;
  }
  function decode(registry, value) {
    return (
      // allow decoding from a map as well (ourselves)
      (value && isFunction$2(value.entries) ? [...value.entries()] : Object.entries(value || {})).reduce((all2, [key, value2]) => {
        all2[key] = decodeValue(registry, key, value2);
        return all2;
      }, {
        ss58Format: registry.createTypeUnsafe("Option<u32>", []),
        tokenDecimals: registry.createTypeUnsafe("Option<Vec<u32>>", []),
        tokenSymbol: registry.createTypeUnsafe("Option<Vec<Text>>", [])
      })
    );
  }
  class GenericChainProperties extends Json {
    constructor(registry, value) {
      super(registry, decode(registry, value));
    }
    /**
     * @description The chain ss58Format
     */
    get ss58Format() {
      return this.getT("ss58Format");
    }
    /**
     * @description The decimals for each of the tokens
     */
    get tokenDecimals() {
      return this.getT("tokenDecimals");
    }
    /**
     * @description The symbols for the tokens
     */
    get tokenSymbol() {
      return this.getT("tokenSymbol");
    }
  }
  const CID_AURA = /* @__PURE__ */ stringToU8a("aura");
  const CID_BABE = /* @__PURE__ */ stringToU8a("BABE");
  const CID_GRPA = /* @__PURE__ */ stringToU8a("FRNK");
  const CID_POW = /* @__PURE__ */ stringToU8a("pow_");
  const CID_NMBS = /* @__PURE__ */ stringToU8a("nmbs");
  function getAuraAuthor(registry, bytes2, sessionValidators) {
    return sessionValidators[registry.createTypeUnsafe("RawAuraPreDigest", [bytes2.toU8a(true)]).slotNumber.mod(new BN(sessionValidators.length)).toNumber()];
  }
  function getBabeAuthor(registry, bytes2, sessionValidators) {
    const digest = registry.createTypeUnsafe("RawBabePreDigestCompat", [bytes2.toU8a(true)]);
    return sessionValidators[digest.value.toNumber()];
  }
  function getBytesAsAuthor(registry, bytes2) {
    return registry.createTypeUnsafe("AccountId", [bytes2]);
  }
  class GenericConsensusEngineId extends U8aFixed {
    constructor(registry, value) {
      super(registry, isNumber$1(value) ? bnToU8a(value, { isLe: false }) : value, 32);
    }
    /**
     * @description `true` if the engine matches aura
     */
    get isAura() {
      return this.eq(CID_AURA);
    }
    /**
     * @description `true` is the engine matches babe
     */
    get isBabe() {
      return this.eq(CID_BABE);
    }
    /**
     * @description `true` is the engine matches grandpa
     */
    get isGrandpa() {
      return this.eq(CID_GRPA);
    }
    /**
     * @description `true` is the engine matches pow
     */
    get isPow() {
      return this.eq(CID_POW);
    }
    /**
     * @description `true` is the engine matches nimbus
     */
    get isNimbus() {
      return this.eq(CID_NMBS);
    }
    /**
     * @description From the input bytes, decode into an author
     */
    extractAuthor(bytes2, sessionValidators) {
      if (sessionValidators == null ? void 0 : sessionValidators.length) {
        if (this.isAura) {
          return getAuraAuthor(this.registry, bytes2, sessionValidators);
        } else if (this.isBabe) {
          return getBabeAuthor(this.registry, bytes2, sessionValidators);
        }
      }
      if (this.isPow || this.isNimbus) {
        return getBytesAsAuthor(this.registry, bytes2);
      }
      return void 0;
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
      return this.toString();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return "ConsensusEngineId";
    }
    /**
     * @description Override the default toString to return a 4-byte string
     */
    toString() {
      return this.isAscii ? u8aToString(this) : u8aToHex(this);
    }
  }
  const ACCOUNT_ID_PREFIX$1 = new Uint8Array([255]);
  function decodeString$1(registry, value) {
    const decoded = decodeAddress(value);
    return decoded.length === 32 ? registry.createTypeUnsafe("AccountId", [decoded]) : registry.createTypeUnsafe("AccountIndex", [u8aToBn(decoded)]);
  }
  function decodeU8a$3(registry, value) {
    if (value.length === 32) {
      return registry.createTypeUnsafe("AccountId", [value]);
    } else if (value[0] === 255) {
      return registry.createTypeUnsafe("AccountId", [value.subarray(1)]);
    }
    const [offset, length2] = GenericAccountIndex.readLength(value);
    return registry.createTypeUnsafe("AccountIndex", [u8aToBn(value.subarray(offset, offset + length2))]);
  }
  function decodeAddressOrIndex$1(registry, value) {
    return value instanceof GenericLookupSource ? value.inner : value instanceof GenericAccountId || value instanceof GenericAccountIndex ? value : isBn(value) || isNumber$1(value) || isBigInt(value) ? registry.createTypeUnsafe("AccountIndex", [value]) : Array.isArray(value) || isHex(value) || isU8a(value) ? decodeU8a$3(registry, u8aToU8a(value)) : decodeString$1(registry, value);
  }
  class GenericLookupSource extends AbstractBase {
    constructor(registry, value = new Uint8Array()) {
      super(registry, decodeAddressOrIndex$1(registry, value));
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
      const rawLength = this._rawLength;
      return rawLength + // for 1 byte AccountIndexes, we are not adding a specific prefix
      (rawLength > 1 ? 1 : 0);
    }
    /**
     * @description The length of the raw value, either AccountIndex or AccountId
     */
    get _rawLength() {
      return this.inner instanceof GenericAccountIndex ? GenericAccountIndex.calcLength(this.inner) : this.inner.encodedLength;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
      const value = this.inner.toU8a().subarray(0, this._rawLength);
      return {
        outer: [
          new Uint8Array(this.inner instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(value) : ACCOUNT_ID_PREFIX$1),
          value
        ]
      };
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return "Address";
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
      const encoded = this.inner.toU8a().subarray(0, this._rawLength);
      return isBare ? encoded : u8aConcat(this.inner instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(encoded) : ACCOUNT_ID_PREFIX$1, encoded);
    }
  }
  function decodeU8a$2(registry, u8a2) {
    if ([0, 32].includes(u8a2.length)) {
      return { Id: u8a2 };
    } else if (u8a2.length === 20) {
      return { Address20: u8a2 };
    } else if (u8a2.length <= 8) {
      return { Index: registry.createTypeUnsafe("AccountIndex", [u8a2]).toNumber() };
    }
    return u8a2;
  }
  function decodeMultiAny(registry, value) {
    if (value instanceof GenericAccountId) {
      return { Id: value };
    } else if (isU8a(value)) {
      return decodeU8a$2(registry, value);
    } else if (value instanceof GenericMultiAddress) {
      return value;
    } else if (value instanceof GenericAccountIndex || isBn(value) || isNumber$1(value)) {
      return { Index: isNumber$1(value) ? value : value.toNumber() };
    } else if (isString$1(value)) {
      return decodeU8a$2(registry, decodeAddress(value.toString()));
    }
    return value;
  }
  class GenericMultiAddress extends Enum {
    constructor(registry, value) {
      super(registry, {
        Id: "AccountId",
        Index: "Compact<AccountIndex>",
        Raw: "Bytes",
        // eslint-disable-next-line sort-keys
        Address32: "H256",
        // eslint-disable-next-line sort-keys
        Address20: "H160"
      }, decodeMultiAny(registry, value));
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
      const { inner, outer = [] } = this.inner.inspect();
      return {
        inner,
        outer: [new Uint8Array([this.index]), ...outer]
      };
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
      return this.value.toString();
    }
  }
  const AYE_BITS = 128;
  const NAY_BITS = 0;
  const CON_MASK = 127;
  const DEF_CONV = 0;
  function decodeVoteBool(value) {
    return value ? new Uint8Array([AYE_BITS | DEF_CONV]) : new Uint8Array([NAY_BITS]);
  }
  function decodeVoteU8a(value) {
    return value.length ? value.subarray(0, 1) : new Uint8Array([NAY_BITS]);
  }
  function decodeVoteType(registry, value) {
    return new Uint8Array([
      (new bool(registry, value.aye).isTrue ? AYE_BITS : NAY_BITS) | registry.createTypeUnsafe("Conviction", [value.conviction || DEF_CONV]).index
    ]);
  }
  function decodeVote(registry, value) {
    if (isU8a(value)) {
      return decodeVoteU8a(value);
    } else if (isUndefined$1(value) || value instanceof Boolean || isBoolean(value)) {
      return decodeVoteBool(new bool(registry, value).isTrue);
    } else if (isNumber$1(value)) {
      return decodeVoteBool(value < 0);
    }
    return decodeVoteType(registry, value);
  }
  class GenericVote extends U8aFixed {
    constructor(registry, value) {
      const decoded = decodeVote(registry, value);
      super(registry, decoded, 8);
      this.__internal__aye = (decoded[0] & AYE_BITS) === AYE_BITS;
      this.__internal__conviction = this.registry.createTypeUnsafe("Conviction", [decoded[0] & CON_MASK]);
    }
    /**
     * @description returns a V2 conviction
     */
    get conviction() {
      return this.__internal__conviction;
    }
    /**
     * @description true if the wrapped value is a positive vote
     */
    get isAye() {
      return this.__internal__aye;
    }
    /**
     * @description true if the wrapped value is a negative vote
     */
    get isNay() {
      return !this.isAye;
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExpanded) {
      return {
        conviction: this.conviction.toHuman(isExpanded),
        vote: this.isAye ? "Aye" : "Nay"
      };
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
      return {
        aye: this.isAye,
        conviction: this.conviction.toPrimitive()
      };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return "Vote";
    }
  }
  function decodeAccountId(value) {
    if (isU8a(value) || Array.isArray(value)) {
      return u8aToU8a(value);
    } else if (isHex(value) || isEthereumAddress(value.toString())) {
      return hexToU8a(value.toString());
    } else if (isString$1(value)) {
      return u8aToU8a(value);
    }
    return value;
  }
  class GenericEthereumAccountId extends U8aFixed {
    constructor(registry, value = new Uint8Array()) {
      super(registry, decodeAccountId(value), 160);
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
      return !!other && super.eq(decodeAccountId(other));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman() {
      return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
      return this.toString();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
      return this.toJSON();
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
      return ethereumEncode(this);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return "AccountId";
    }
  }
  const ACCOUNT_ID_PREFIX = new Uint8Array([255]);
  function decodeString(registry, value) {
    const decoded = decodeAddress(value);
    return decoded.length === 20 ? registry.createTypeUnsafe("EthereumAccountId", [decoded]) : registry.createTypeUnsafe("AccountIndex", [u8aToBn(decoded)]);
  }
  function decodeU8a$1(registry, value) {
    if (value.length === 20) {
      return registry.createTypeUnsafe("EthereumAccountId", [value]);
    } else if (value[0] === 255) {
      return registry.createTypeUnsafe("EthereumAccountId", [value.subarray(1)]);
    }
    const [offset, length2] = GenericAccountIndex.readLength(value);
    return registry.createTypeUnsafe("AccountIndex", [u8aToBn(value.subarray(offset, offset + length2))]);
  }
  function decodeAddressOrIndex(registry, value) {
    return value instanceof GenericEthereumLookupSource ? value.inner : value instanceof GenericEthereumAccountId || value instanceof GenericAccountIndex ? value : isU8a(value) || Array.isArray(value) || isHex(value) ? decodeU8a$1(registry, u8aToU8a(value)) : isBn(value) || isNumber$1(value) || isBigInt(value) ? registry.createTypeUnsafe("AccountIndex", [value]) : decodeString(registry, value);
  }
  class GenericEthereumLookupSource extends AbstractBase {
    constructor(registry, value = new Uint8Array()) {
      super(registry, decodeAddressOrIndex(registry, value));
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
      const rawLength = this._rawLength;
      return rawLength + // for 1 byte AccountIndexes, we are not adding a specific prefix
      (rawLength > 1 ? 1 : 0);
    }
    /**
     * @description The length of the raw value, either AccountIndex or AccountId
     */
    get _rawLength() {
      return this.inner instanceof GenericAccountIndex ? GenericAccountIndex.calcLength(this.inner) : this.inner.encodedLength;
    }
    /**
     * @description Returns a hex string representation of the value
     */
    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return "Address";
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
      const encoded = this.inner.toU8a().subarray(0, this._rawLength);
      return isBare ? encoded : u8aConcat(this.inner instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(encoded) : ACCOUNT_ID_PREFIX, encoded);
    }
  }
  function decodeDataU8a(registry, value) {
    const indicator = value[0];
    if (!indicator) {
      return [void 0, void 0];
    } else if (indicator >= 1 && indicator <= 33) {
      const length2 = indicator - 1;
      const data2 = value.subarray(1, length2 + 1);
      return [registry.createTypeUnsafe("Raw", [data2]), 1];
    } else if (indicator >= 34 && indicator <= 37) {
      return [value.subarray(1, 32 + 1), indicator - 32];
    }
    throw new Error(`Unable to decode Data, invalid indicator byte ${indicator}`);
  }
  function decodeData(registry, value) {
    if (isU8a(value) || isString$1(value)) {
      return decodeDataU8a(registry, u8aToU8a(value));
    } else if (!value) {
      return [void 0, void 0];
    }
    return [value, void 0];
  }
  class Data extends Enum {
    constructor(registry, value) {
      super(registry, {
        None: "Null",
        Raw: "Bytes",
        // eslint-disable-next-line sort-keys
        BlakeTwo256: "H256",
        Sha256: "H256",
        // eslint-disable-next-line sort-keys
        Keccak256: "H256",
        ShaThree256: "H256"
        // 5
      }, ...decodeData(registry, value));
      if (this.isRaw && this.asRaw.length > 32) {
        throw new Error("Data.Raw values are limited to a maximum length of 32 bytes");
      }
    }
    get asBlakeTwo256() {
      return this.value;
    }
    get asKeccak256() {
      return this.value;
    }
    get asRaw() {
      return this.value;
    }
    get asSha256() {
      return this.value;
    }
    get asShaThree256() {
      return this.value;
    }
    get isBlakeTwo256() {
      return this.index === 2;
    }
    get isKeccak256() {
      return this.index === 4;
    }
    get isNone() {
      return this.index === 0;
    }
    get isRaw() {
      return this.index === 1;
    }
    get isSha256() {
      return this.index === 3;
    }
    get isShaThree256() {
      return this.index === 5;
    }
    /**
     * @description The encoded length
     */
    get encodedLength() {
      return this.toU8a().length;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */
    toU8a() {
      if (this.index === 0) {
        return new Uint8Array(1);
      } else if (this.index === 1) {
        const data2 = this.value.toU8a(true);
        const length2 = Math.min(data2.length, 32);
        const u8a3 = new Uint8Array(length2 + 1);
        u8a3.set([length2 + 1], 0);
        u8a3.set(data2.subarray(0, length2), 1);
        return u8a3;
      }
      const u8a2 = new Uint8Array(33);
      u8a2.set([this.index + 32], 0);
      u8a2.set(this.value.toU8a(), 1);
      return u8a2;
    }
  }
  const HASHER_MAP = {
    // opaque
    Blake2_128: [16, false],
    Blake2_128Concat: [16, true],
    Blake2_256: [32, false],
    Identity: [0, true],
    Twox128: [16, false],
    Twox256: [32, false],
    Twox64Concat: [8, true]
  };
  function decodeStorageKey(value) {
    if (isU8a(value) || !value || isString$1(value)) {
      return { key: value };
    } else if (value instanceof StorageKey) {
      return {
        key: value,
        method: value.method,
        section: value.section
      };
    } else if (isFunction$2(value)) {
      return {
        key: value(),
        method: value.method,
        section: value.section
      };
    } else if (Array.isArray(value)) {
      const [fn, args = []] = value;
      if (!isFunction$2(fn)) {
        throw new Error("Expected function input for key construction");
      }
      if (fn.meta && fn.meta.type.isMap) {
        const map2 = fn.meta.type.asMap;
        if (!Array.isArray(args) || args.length !== map2.hashers.length) {
          throw new Error(`Expected an array of ${map2.hashers.length} values as params to a Map query`);
        }
      }
      return {
        key: fn(...args),
        method: fn.method,
        section: fn.section
      };
    }
    throw new Error(`Unable to convert input ${value} to StorageKey`);
  }
  function decodeHashers(registry, value, hashers) {
    let offset = 32;
    const count = hashers.length;
    const result = new Array(count);
    for (let i2 = 0; i2 < count; i2++) {
      const [hasher2, type] = hashers[i2];
      const [hashLen, canDecode] = HASHER_MAP[hasher2.type];
      const decoded = canDecode ? registry.createTypeUnsafe(getSiName(registry.lookup, type), [value.subarray(offset + hashLen)]) : registry.createTypeUnsafe("Raw", [value.subarray(offset, offset + hashLen)]);
      offset += hashLen + (canDecode ? decoded.encodedLength : 0);
      result[i2] = decoded;
    }
    return result;
  }
  function decodeArgsFromMeta(registry, value, meta) {
    if (!meta || !meta.type.isMap) {
      return [];
    }
    const { hashers, key } = meta.type.asMap;
    const keys2 = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple;
    return decodeHashers(registry, value, hashers.map((h, i2) => [h, keys2[i2]]));
  }
  function getMeta(value) {
    if (value instanceof StorageKey) {
      return value.meta;
    } else if (isFunction$2(value)) {
      return value.meta;
    } else if (Array.isArray(value)) {
      const [fn] = value;
      return fn.meta;
    }
    return void 0;
  }
  function getType(registry, value) {
    if (value instanceof StorageKey) {
      return value.outputType;
    } else if (isFunction$2(value)) {
      return unwrapStorageType(registry, value.meta.type);
    } else if (Array.isArray(value)) {
      const [fn] = value;
      if (fn.meta) {
        return unwrapStorageType(registry, fn.meta.type);
      }
    }
    return "Raw";
  }
  class StorageKey extends Bytes {
    constructor(registry, value, override = {}) {
      const { key, method, section: section2 } = decodeStorageKey(value);
      super(registry, key);
      this.__internal__outputType = getType(registry, value);
      this.setMeta(getMeta(value), override.section || section2, override.method || method);
    }
    /**
     * @description Return the decoded arguments (applicable to map with decodable values)
     */
    get args() {
      return this.__internal__args;
    }
    /**
     * @description The metadata or `undefined` when not available
     */
    get meta() {
      return this.__internal__meta;
    }
    /**
     * @description The key method or `undefined` when not specified
     */
    get method() {
      return this.__internal__method;
    }
    /**
     * @description The output type
     */
    get outputType() {
      return this.__internal__outputType;
    }
    /**
     * @description The key section or `undefined` when not specified
     */
    get section() {
      return this.__internal__section;
    }
    is(key) {
      return key.section === this.section && key.method === this.method;
    }
    /**
     * @description Sets the meta for this key
     */
    setMeta(meta, section2, method) {
      this.__internal__meta = meta;
      this.__internal__method = method || this.__internal__method;
      this.__internal__section = section2 || this.__internal__section;
      if (meta) {
        this.__internal__outputType = unwrapStorageType(this.registry, meta.type);
      }
      try {
        this.__internal__args = decodeArgsFromMeta(this.registry, this.toU8a(true), meta);
      } catch {
      }
      return this;
    }
    /**
     * @description Returns the Human representation for this type
     */
    toHuman() {
      return this.__internal__args.length ? this.__internal__args.map((a) => a.toHuman()) : super.toHuman();
    }
    /**
     * @description Returns the raw type for this
     */
    toRawType() {
      return "StorageKey";
    }
  }
  const baseTypes = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    BitVec,
    Bool: bool,
    Bytes,
    Data,
    F32: f32,
    F64: f64,
    GenericAccountId,
    GenericAccountId32: GenericAccountId,
    GenericAccountId33,
    GenericAccountIndex,
    GenericAddress: GenericMultiAddress,
    GenericBlock,
    GenericCall,
    GenericChainProperties,
    GenericConsensusEngineId,
    GenericEthereumAccountId,
    GenericEthereumLookupSource,
    GenericEvent,
    GenericEventData,
    GenericExtrinsic,
    GenericExtrinsicEra,
    GenericExtrinsicPayload,
    GenericExtrinsicPayloadUnknown,
    GenericExtrinsicPayloadV4,
    GenericExtrinsicSignatureV4,
    GenericExtrinsicUnknown,
    GenericExtrinsicV4,
    GenericImmortalEra: ImmortalEra,
    GenericLookupSource,
    GenericMortalEra: MortalEra,
    GenericMultiAddress,
    GenericSignerPayload,
    GenericVote,
    I128: i128,
    I16: i16,
    I256: i256,
    I32: i32,
    I64: i64,
    I8: i8,
    ISize: isize,
    Null,
    OptionBool,
    StorageKey,
    Text,
    Type,
    U128: u128,
    U16: u16,
    U256: u256,
    U32: u32,
    U64: u64,
    U8: u8,
    USize: usize,
    bool,
    f32,
    f64,
    i128,
    i16,
    i256,
    i32,
    i64,
    i8,
    isize,
    u128,
    u16,
    u256,
    u32,
    u64,
    u8,
    usize
  }, Symbol.toStringTag, { value: "Module" }));
  function convert(fn) {
    return ({ name }) => fn(name);
  }
  const objectNameToCamel = /* @__PURE__ */ convert(stringCamelCase);
  const objectNameToString = /* @__PURE__ */ convert((n) => n.toString());
  function isTx(tx2, callIndex) {
    return tx2.callIndex[0] === callIndex[0] && tx2.callIndex[1] === callIndex[1];
  }
  function createUnchecked(registry, section2, callIndex, callMetadata) {
    const expectedArgs = callMetadata.fields;
    const funcName = stringCamelCase(callMetadata.name);
    const extrinsicFn = (...args) => {
      if (expectedArgs.length !== args.length) {
        throw new Error(`Extrinsic ${section2}.${funcName} expects ${expectedArgs.length} arguments, got ${args.length}.`);
      }
      return registry.createTypeUnsafe("Call", [{ args, callIndex }, callMetadata]);
    };
    extrinsicFn.is = (tx2) => isTx(tx2, callIndex);
    extrinsicFn.callIndex = callIndex;
    extrinsicFn.meta = callMetadata;
    extrinsicFn.method = funcName;
    extrinsicFn.section = section2;
    extrinsicFn.toJSON = () => callMetadata.toJSON();
    return extrinsicFn;
  }
  function filterCallsSome({ calls }) {
    return calls.isSome;
  }
  function createCallFunction(registry, lookup, variant, sectionName, sectionIndex) {
    const { fields, index: index2 } = variant;
    const count = fields.length;
    const args = new Array(count);
    for (let i2 = 0; i2 < count; i2++) {
      const { name, type, typeName } = fields[i2];
      args[i2] = objectSpread({
        name: stringCamelCase(name.unwrapOr(`param${i2}`)),
        type: getSiName(lookup, type)
      }, typeName.isSome ? { typeName: typeName.unwrap() } : null);
    }
    return createUnchecked(registry, sectionName, new Uint8Array([sectionIndex, index2.toNumber()]), registry.createTypeUnsafe("FunctionMetadataLatest", [objectSpread({ args }, variant)]));
  }
  function decorateExtrinsics(registry, { lookup, pallets }, version2) {
    const result = {};
    const filtered = pallets.filter(filterCallsSome);
    for (let i2 = 0, count = filtered.length; i2 < count; i2++) {
      const { calls, index: index2, name } = filtered[i2];
      const sectionName = stringCamelCase(name);
      const sectionIndex = version2 >= 12 ? index2.toNumber() : i2;
      lazyMethod(result, sectionName, () => lazyVariants(lookup, calls.unwrap(), objectNameToCamel, (variant) => createCallFunction(registry, lookup, variant, sectionName, sectionIndex)));
    }
    return result;
  }
  function createStorageHasher(registry, hasher2) {
    if (hasher2.toNumber() >= 2) {
      return registry.createTypeUnsafe("StorageHasherV10", [hasher2.toNumber() + 1]);
    }
    return registry.createTypeUnsafe("StorageHasherV10", [hasher2]);
  }
  function createStorageType(registry, entryType) {
    if (entryType.isMap) {
      return [objectSpread({}, entryType.asMap, {
        hasher: createStorageHasher(registry, entryType.asMap.hasher)
      }), 1];
    }
    if (entryType.isDoubleMap) {
      return [objectSpread({}, entryType.asDoubleMap, {
        hasher: createStorageHasher(registry, entryType.asDoubleMap.hasher),
        key2Hasher: createStorageHasher(registry, entryType.asDoubleMap.key2Hasher)
      }), 2];
    }
    return [entryType.asPlain, 0];
  }
  function convertModule(registry, mod2) {
    const storage2 = mod2.storage.unwrapOr(null);
    return registry.createTypeUnsafe("ModuleMetadataV10", [objectSpread({}, mod2, {
      storage: storage2 ? objectSpread({}, storage2, {
        items: storage2.items.map((item) => objectSpread({}, item, {
          type: registry.createTypeUnsafe("StorageEntryTypeV10", createStorageType(registry, item.type))
        }))
      }) : null
    })]);
  }
  function toV10(registry, { modules }) {
    return registry.createTypeUnsafe("MetadataV10", [{
      modules: modules.map((mod2) => convertModule(registry, mod2))
    }]);
  }
  function toV11(registry, { modules }) {
    return registry.createTypeUnsafe("MetadataV11", [{
      // This is new in V11, pass V0 here - something non-existing, telling the API to use
      // the fallback for this information (on-chain detection)
      extrinsic: {
        signedExtensions: [],
        version: 0
      },
      modules
    }]);
  }
  function toV12(registry, { extrinsic, modules }) {
    return registry.createTypeUnsafe("MetadataV12", [{
      extrinsic,
      modules: modules.map((mod2) => registry.createTypeUnsafe("ModuleMetadataV12", [objectSpread({}, mod2, { index: 255 })]))
    }]);
  }
  function toV13(registry, v122) {
    return registry.createTypeUnsafe("MetadataV13", [v122]);
  }
  const typesAlias = {
    assets: {
      Approval: "AssetApproval",
      ApprovalKey: "AssetApprovalKey",
      Balance: "TAssetBalance",
      DestroyWitness: "AssetDestroyWitness"
    },
    babe: {
      EquivocationProof: "BabeEquivocationProof"
    },
    balances: {
      Status: "BalanceStatus"
    },
    beefy: {
      AuthorityId: "BeefyId"
    },
    contracts: {
      StorageKey: "ContractStorageKey"
    },
    electionProviderMultiPhase: {
      Phase: "ElectionPhase"
    },
    ethereum: {
      Block: "EthBlock",
      Header: "EthHeader",
      Receipt: "EthReceipt",
      Transaction: "EthTransaction",
      TransactionStatus: "EthTransactionStatus"
    },
    evm: {
      Account: "EvmAccount",
      Log: "EvmLog",
      Vicinity: "EvmVicinity"
    },
    grandpa: {
      Equivocation: "GrandpaEquivocation",
      EquivocationProof: "GrandpaEquivocationProof"
    },
    identity: {
      Judgement: "IdentityJudgement"
    },
    inclusion: {
      ValidatorIndex: "ParaValidatorIndex"
    },
    paraDisputes: {
      ValidatorIndex: "ParaValidatorIndex"
    },
    paraInclusion: {
      ValidatorIndex: "ParaValidatorIndex"
    },
    paraScheduler: {
      ValidatorIndex: "ParaValidatorIndex"
    },
    paraShared: {
      ValidatorIndex: "ParaValidatorIndex"
    },
    parachains: {
      Id: "ParaId"
    },
    parasDisputes: {
      ValidatorIndex: "ParaValidatorIndex"
    },
    parasInclusion: {
      ValidatorIndex: "ParaValidatorIndex"
    },
    parasScheduler: {
      ValidatorIndex: "ParaValidatorIndex"
    },
    parasShared: {
      ValidatorIndex: "ParaValidatorIndex"
    },
    proposeParachain: {
      Proposal: "ParachainProposal"
    },
    proxy: {
      Announcement: "ProxyAnnouncement"
    },
    scheduler: {
      ValidatorIndex: "ParaValidatorIndex"
    },
    shared: {
      ValidatorIndex: "ParaValidatorIndex"
    },
    society: {
      Judgement: "SocietyJudgement",
      Vote: "SocietyVote"
    },
    staking: {
      Compact: "CompactAssignments"
    },
    treasury: {
      Proposal: "TreasuryProposal"
    },
    xcm: {
      AssetId: "XcmAssetId"
    },
    xcmPallet: {
      AssetId: "XcmAssetId"
    }
  };
  function getAliasTypes({ knownTypes: knownTypes2 }, section2) {
    var _a;
    return {
      ...typesAlias[section2] ?? {},
      ...((_a = knownTypes2.typesAlias) == null ? void 0 : _a[section2]) ?? {}
    };
  }
  const BOXES = [["<", ">"], ["<", ","], [",", ">"], ["(", ")"], ["(", ","], [",", ","], [",", ")"]];
  function compatType(specs, _type) {
    const type = _type.toString();
    const index2 = specs.findIndex(({ def }) => def.HistoricMetaCompat === type);
    if (index2 !== -1) {
      return index2;
    }
    return specs.push({
      def: {
        HistoricMetaCompat: type
      }
    }) - 1;
  }
  function compatTypes(specs, ...types2) {
    for (let i2 = 0, count = types2.length; i2 < count; i2++) {
      compatType(specs, types2[i2]);
    }
  }
  function makeTupleType(specs, entries) {
    return specs.push({
      def: {
        Tuple: entries
      }
    }) - 1;
  }
  function makeVariantType(modName, variantType, specs, variants) {
    return specs.push({
      def: {
        Variant: { variants }
      },
      path: [`pallet_${modName.toString()}`, "pallet", variantType]
    }) - 1;
  }
  function registerOriginCaller(registry, modules, metaVersion) {
    registry.register({
      OriginCaller: {
        _enum: modules.map((mod2, index2) => [
          mod2.name.toString(),
          metaVersion >= 12 ? mod2.index.toNumber() : index2
        ]).sort((a, b) => a[1] - b[1]).reduce((result, [name, index2]) => {
          for (let i2 = Object.keys(result).length; i2 < index2; i2++) {
            result[`Empty${i2}`] = "Null";
          }
          result[name] = knownOrigins[name] || "Null";
          return result;
        }, {})
      }
    });
  }
  function setTypeOverride(sectionTypes, types2) {
    types2.forEach((type) => {
      const override = Object.keys(sectionTypes).find((aliased) => type.eq(aliased));
      if (override) {
        type.setOverride(sectionTypes[override]);
      } else {
        const orig = type.toString();
        const alias2 = Object.entries(sectionTypes).reduce((result, [src2, dst]) => BOXES.reduce((result2, [a, z2]) => result2.replace(`${a}${src2}${z2}`, `${a}${dst}${z2}`), result), orig);
        if (orig !== alias2) {
          type.setOverride(alias2);
        }
      }
    });
  }
  function convertCalls(specs, registry, modName, calls, sectionTypes) {
    const variants = calls.map(({ args, docs, name }, index2) => {
      setTypeOverride(sectionTypes, args.map(({ type }) => type));
      return registry.createTypeUnsafe("SiVariant", [{
        docs,
        fields: args.map(({ name: name2, type }) => registry.createTypeUnsafe("SiField", [{ name: name2, type: compatType(specs, type) }])),
        index: index2,
        name
      }]);
    });
    return registry.createTypeUnsafe("PalletCallMetadataV14", [{
      type: makeVariantType(modName, "Call", specs, variants)
    }]);
  }
  function convertConstants(specs, registry, constants, sectionTypes) {
    return constants.map(({ docs, name, type, value }) => {
      setTypeOverride(sectionTypes, [type]);
      return registry.createTypeUnsafe("PalletConstantMetadataV14", [{
        docs,
        name,
        type: compatType(specs, type),
        value
      }]);
    });
  }
  function convertErrors(specs, registry, modName, errors, _sectionTypes) {
    const variants = errors.map(({ docs, name }, index2) => registry.createTypeUnsafe("SiVariant", [{
      docs,
      fields: [],
      index: index2,
      name
    }]));
    return registry.createTypeUnsafe("PalletErrorMetadataV14", [{
      type: makeVariantType(modName, "Error", specs, variants)
    }]);
  }
  function convertEvents(specs, registry, modName, events2, sectionTypes) {
    const variants = events2.map(({ args, docs, name }, index2) => {
      setTypeOverride(sectionTypes, args);
      return registry.createTypeUnsafe("SiVariant", [{
        docs,
        fields: args.map((t) => registry.createTypeUnsafe("SiField", [{ type: compatType(specs, t) }])),
        index: index2,
        name
      }]);
    });
    return registry.createTypeUnsafe("PalletEventMetadataV14", [{
      type: makeVariantType(modName, "Event", specs, variants)
    }]);
  }
  function createMapEntry(specs, registry, sectionTypes, { hashers, isLinked, isOptional, keys: keys2, value }) {
    setTypeOverride(sectionTypes, [value, ...Array.isArray(keys2) ? keys2 : [keys2]]);
    return registry.createTypeUnsafe("StorageEntryTypeV14", [{
      Map: {
        hashers,
        key: hashers.length === 1 ? compatType(specs, keys2[0]) : makeTupleType(specs, keys2.map((t) => compatType(specs, t))),
        value: isLinked ? compatType(specs, `(${isOptional ? `Option<${value.toString()}>` : value.toString()}, Linkage<${keys2[0].toString()}>)`) : compatType(specs, value)
      }
    }]);
  }
  function convertStorage(specs, registry, { items, prefix: prefix2 }, sectionTypes) {
    return registry.createTypeUnsafe("PalletStorageMetadataV14", [{
      items: items.map(({ docs, fallback, modifier, name, type }) => {
        let entryType;
        if (type.isPlain) {
          const plain = type.asPlain;
          setTypeOverride(sectionTypes, [plain]);
          entryType = registry.createTypeUnsafe("StorageEntryTypeV14", [{
            Plain: compatType(specs, plain)
          }]);
        } else if (type.isMap) {
          const map2 = type.asMap;
          entryType = createMapEntry(specs, registry, sectionTypes, {
            hashers: [map2.hasher],
            isLinked: map2.linked.isTrue,
            isOptional: modifier.isOptional,
            keys: [map2.key],
            value: map2.value
          });
        } else if (type.isDoubleMap) {
          const dm = type.asDoubleMap;
          entryType = createMapEntry(specs, registry, sectionTypes, {
            hashers: [dm.hasher, dm.key2Hasher],
            isLinked: false,
            isOptional: modifier.isOptional,
            keys: [dm.key1, dm.key2],
            value: dm.value
          });
        } else {
          const nm = type.asNMap;
          entryType = createMapEntry(specs, registry, sectionTypes, {
            hashers: nm.hashers,
            isLinked: false,
            isOptional: modifier.isOptional,
            keys: nm.keyVec,
            value: nm.value
          });
        }
        return registry.createTypeUnsafe("StorageEntryMetadataV14", [{
          docs,
          fallback,
          modifier,
          name,
          type: entryType
        }]);
      }),
      prefix: prefix2
    }]);
  }
  function convertExtrinsic(registry, { signedExtensions, version: version2 }) {
    return registry.createTypeUnsafe("ExtrinsicMetadataV14", [{
      signedExtensions: signedExtensions.map((identifier2) => ({
        identifier: identifier2,
        type: 0
        // we don't map the fields at all
      })),
      type: 0,
      version: version2
    }]);
  }
  function createPallet(specs, registry, mod2, { calls, constants, errors, events: events2, storage: storage2 }) {
    const sectionTypes = getAliasTypes(registry, stringCamelCase(mod2.name));
    return registry.createTypeUnsafe("PalletMetadataV14", [{
      calls: calls && convertCalls(specs, registry, mod2.name, calls, sectionTypes),
      constants: convertConstants(specs, registry, constants, sectionTypes),
      errors: errors && convertErrors(specs, registry, mod2.name, errors),
      events: events2 && convertEvents(specs, registry, mod2.name, events2, sectionTypes),
      index: mod2.index,
      name: mod2.name,
      storage: storage2 && convertStorage(specs, registry, storage2, sectionTypes)
    }]);
  }
  function toV14(registry, v132, metaVersion) {
    const specs = [];
    compatTypes(specs, "Null", "u8", "u16", "u32", "u64");
    registerOriginCaller(registry, v132.modules, metaVersion);
    const extrinsic = convertExtrinsic(registry, v132.extrinsic);
    const pallets = v132.modules.map((mod2) => createPallet(specs, registry, mod2, {
      calls: mod2.calls.unwrapOr(null),
      constants: mod2.constants,
      errors: mod2.errors.length ? mod2.errors : null,
      events: mod2.events.unwrapOr(null),
      storage: mod2.storage.unwrapOr(null)
    }));
    return registry.createTypeUnsafe("MetadataV14", [{
      extrinsic,
      lookup: {
        types: specs.map((type, id) => registry.createTypeUnsafe("PortableType", [{ id, type }]))
      },
      pallets
    }]);
  }
  function toV15(registry, v142, _2) {
    return registry.createTypeUnsafe("MetadataV15", [v142]);
  }
  function toLatest(_registry, v152, _metaVersion) {
    return v152;
  }
  const MAGIC_NUMBER = 1635018093;
  class MagicNumber extends u32 {
    constructor(registry, value) {
      super(registry, value);
      if (!this.isEmpty && !this.eq(MAGIC_NUMBER)) {
        throw new Error(`MagicNumber mismatch: expected ${registry.createTypeUnsafe("u32", [MAGIC_NUMBER]).toHex()}, found ${this.toHex()}`);
      }
    }
  }
  const KNOWN_VERSIONS = [15, 14, 13, 12, 11, 10, 9];
  const LATEST_VERSION = KNOWN_VERSIONS[0];
  const TO_CALLS_VERSION = 14;
  class MetadataVersioned extends Struct {
    constructor(registry, value) {
      super(registry, {
        magicNumber: MagicNumber,
        metadata: "MetadataAll"
      }, value);
      this.__internal__converted = /* @__PURE__ */ new Map();
      this.__internal__assertVersion = (version2) => {
        if (this.version > version2) {
          throw new Error(`Cannot convert metadata from version ${this.version} to ${version2}`);
        }
        return this.version === version2;
      };
      this.__internal__getVersion = (version2, fromPrev) => {
        if (version2 !== "latest" && this.__internal__assertVersion(version2)) {
          const asCurr = `asV${version2}`;
          return this.__internal__metadata()[asCurr];
        }
        if (!this.__internal__converted.has(version2)) {
          const asPrev = version2 === "latest" ? `asV${LATEST_VERSION}` : `asV${version2 - 1}`;
          this.__internal__converted.set(version2, fromPrev(this.registry, this[asPrev], this.version));
        }
        return this.__internal__converted.get(version2);
      };
      this.__internal__metadata = () => {
        return this.getT("metadata");
      };
    }
    /**
     * @description Returns the wrapped metadata as a limited calls-only (latest) version
     */
    get asCallsOnly() {
      return new MetadataVersioned(this.registry, {
        magicNumber: this.magicNumber,
        metadata: this.registry.createTypeUnsafe("MetadataAll", [toCallsOnly(this.registry, this.asLatest), TO_CALLS_VERSION])
      });
    }
    /**
     * @description Returns the wrapped metadata as a V9 object
     */
    get asV9() {
      this.__internal__assertVersion(9);
      return this.__internal__metadata().asV9;
    }
    /**
     * @description Returns the wrapped values as a V10 object
     */
    get asV10() {
      return this.__internal__getVersion(10, toV10);
    }
    /**
     * @description Returns the wrapped values as a V11 object
     */
    get asV11() {
      return this.__internal__getVersion(11, toV11);
    }
    /**
     * @description Returns the wrapped values as a V12 object
     */
    get asV12() {
      return this.__internal__getVersion(12, toV12);
    }
    /**
     * @description Returns the wrapped values as a V13 object
     */
    get asV13() {
      return this.__internal__getVersion(13, toV13);
    }
    /**
     * @description Returns the wrapped values as a V14 object
     */
    get asV14() {
      return this.__internal__getVersion(14, toV14);
    }
    /**
     * @description Returns the wrapped values as a V14 object
     */
    get asV15() {
      return this.__internal__getVersion(15, toV15);
    }
    /**
     * @description Returns the wrapped values as a latest version object
     */
    get asLatest() {
      return this.__internal__getVersion("latest", toLatest);
    }
    /**
     * @description The magicNumber for the Metadata (known constant)
     */
    get magicNumber() {
      return this.getT("magicNumber");
    }
    /**
     * @description the metadata version this structure represents
     */
    get version() {
      return this.__internal__metadata().index;
    }
    getUniqTypes(throwError) {
      return getUniqTypes(this.registry, this.asLatest, throwError);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
      return super.toJSON();
    }
  }
  const EMPTY_METADATA = new Uint8Array([109, 101, 116, 97, 9]);
  const VERSION_IDX = EMPTY_METADATA.length - 1;
  function decodeU8a(registry, u8a2) {
    if (u8a2.length === 0) {
      return EMPTY_METADATA;
    } else if (u8a2[VERSION_IDX] === 9) {
      try {
        return new MetadataVersioned(registry, u8a2);
      } catch {
        u8a2[VERSION_IDX] = 10;
      }
    }
    return u8a2;
  }
  class Metadata extends MetadataVersioned {
    constructor(registry, value) {
      super(registry, isU8a(value) || isString$1(value) ? decodeU8a(registry, u8aToU8a(value)) : value);
    }
  }
  function decorateConstants(registry, { pallets }, _version) {
    const result = {};
    for (let i2 = 0, count = pallets.length; i2 < count; i2++) {
      const { constants, name } = pallets[i2];
      if (!constants.isEmpty) {
        lazyMethod(result, stringCamelCase(name), () => lazyMethods({}, constants, (constant) => {
          const codec = registry.createTypeUnsafe(registry.createLookupType(constant.type), [hexToU8a(constant.value.toHex())]);
          codec.meta = constant;
          return codec;
        }, objectNameToCamel));
      }
    }
    return result;
  }
  function variantToMeta(lookup, variant) {
    return objectSpread({ args: variant.fields.map(({ type }) => lookup.getTypeDef(type).type) }, variant);
  }
  function decorateErrors(registry, { lookup, pallets }, version2) {
    const result = {};
    for (let i2 = 0, count = pallets.length; i2 < count; i2++) {
      const { errors, index: index2, name } = pallets[i2];
      if (errors.isSome) {
        const sectionIndex = version2 >= 12 ? index2.toNumber() : i2;
        lazyMethod(result, stringCamelCase(name), () => lazyVariants(lookup, errors.unwrap(), objectNameToString, (variant) => ({
          // We sprinkle in isCodec & isU8a to ensure we are dealing with the correct objects
          is: (errorMod) => isCodec(errorMod) && isCodec(errorMod.index) && errorMod.index.eq(sectionIndex) && (isU8a(errorMod.error) ? errorMod.error[0] === variant.index.toNumber() : isCodec(errorMod.error) && errorMod.error.eq(variant.index)),
          meta: registry.createTypeUnsafe("ErrorMetadataLatest", [variantToMeta(lookup, variant)])
        })));
      }
    }
    return result;
  }
  function filterEventsSome({ events: events2 }) {
    return events2.isSome;
  }
  function decorateEvents(registry, { lookup, pallets }, version2) {
    const result = {};
    const filtered = pallets.filter(filterEventsSome);
    for (let i2 = 0, count = filtered.length; i2 < count; i2++) {
      const { events: events2, index: index2, name } = filtered[i2];
      const sectionIndex = version2 >= 12 ? index2.toNumber() : i2;
      lazyMethod(result, stringCamelCase(name), () => lazyVariants(lookup, events2.unwrap(), objectNameToString, (variant) => ({
        // We sprinkle in isCodec & isU8a to ensure we are dealing with the correct objects
        is: (eventRecord) => isCodec(eventRecord) && isU8a(eventRecord.index) && sectionIndex === eventRecord.index[0] && variant.index.eq(eventRecord.index[1]),
        meta: registry.createTypeUnsafe("EventMetadataLatest", [variantToMeta(lookup, variant)])
      })));
    }
    return result;
  }
  const DEFAULT_FN = (data2) => xxhashAsU8a(data2, 128);
  const HASHERS = {
    Blake2_128: (data2) => (
      // eslint-disable-line camelcase
      blake2AsU8a(data2, 128)
    ),
    Blake2_128Concat: (data2) => (
      // eslint-disable-line camelcase
      u8aConcat(blake2AsU8a(data2, 128), u8aToU8a(data2))
    ),
    Blake2_256: (data2) => (
      // eslint-disable-line camelcase
      blake2AsU8a(data2, 256)
    ),
    Identity: (data2) => u8aToU8a(data2),
    Twox128: (data2) => xxhashAsU8a(data2, 128),
    Twox256: (data2) => xxhashAsU8a(data2, 256),
    Twox64Concat: (data2) => u8aConcat(xxhashAsU8a(data2, 64), u8aToU8a(data2))
  };
  function getHasher(hasher2) {
    return HASHERS[hasher2.type] || DEFAULT_FN;
  }
  const NO_RAW_ARGS = {
    args: [],
    hashers: [],
    keys: []
  };
  function filterDefined(a) {
    return !isUndefined$1(a);
  }
  function assertArgs({ method, section: section2 }, { args, keys: keys2 }) {
    if (!Array.isArray(args)) {
      throw new Error(`Call to ${stringCamelCase(section2 || "unknown")}.${stringCamelCase(method || "unknown")} needs ${keys2.length} arguments`);
    } else if (args.filter(filterDefined).length !== keys2.length) {
      throw new Error(`Call to ${stringCamelCase(section2 || "unknown")}.${stringCamelCase(method || "unknown")} needs ${keys2.length} arguments, found [${args.join(", ")}]`);
    }
  }
  function createKeyRawParts(registry, itemFn, { args, hashers, keys: keys2 }) {
    const count = keys2.length;
    const extra = new Array(count);
    for (let i2 = 0; i2 < count; i2++) {
      extra[i2] = getHasher(hashers[i2])(registry.createTypeUnsafe(registry.createLookupType(keys2[i2]), [args[i2]]).toU8a());
    }
    return [
      [
        xxhashAsU8a(itemFn.prefix, 128),
        xxhashAsU8a(itemFn.method, 128)
      ],
      extra
    ];
  }
  function createKeyInspect(registry, itemFn, args) {
    assertArgs(itemFn, args);
    const { meta } = itemFn;
    const [prefix2, extra] = createKeyRawParts(registry, itemFn, args);
    let types2 = [];
    if (meta.type.isMap) {
      const { hashers, key } = meta.type.asMap;
      types2 = hashers.length === 1 ? [`${hashers[0].type}(${getSiName(registry.lookup, key)})`] : registry.lookup.getSiType(key).def.asTuple.map((k, i2) => `${hashers[i2].type}(${getSiName(registry.lookup, k)})`);
    }
    const names = ["module", "method"].concat(...args.args.map((_2, i2) => types2[i2]));
    return {
      inner: prefix2.concat(...extra).map((v, i2) => ({ name: names[i2], outer: [v] }))
    };
  }
  function createKeyRaw(registry, itemFn, args) {
    const [prefix2, extra] = createKeyRawParts(registry, itemFn, args);
    return u8aConcat(...prefix2, ...extra);
  }
  function createKey(registry, itemFn, args) {
    assertArgs(itemFn, args);
    return compactAddLength(createKeyRaw(registry, itemFn, args));
  }
  function createStorageInspect(registry, itemFn, options) {
    const { meta: { type } } = itemFn;
    return (...args) => {
      if (type.isPlain) {
        return options.skipHashing ? { inner: [], name: "wellKnown", outer: [u8aToU8a(options.key)] } : createKeyInspect(registry, itemFn, NO_RAW_ARGS);
      }
      const { hashers, key } = type.asMap;
      return hashers.length === 1 ? createKeyInspect(registry, itemFn, { args, hashers, keys: [key] }) : createKeyInspect(registry, itemFn, { args, hashers, keys: registry.lookup.getSiType(key).def.asTuple });
    };
  }
  function createStorageFn(registry, itemFn, options) {
    const { meta: { type } } = itemFn;
    let cacheKey = null;
    return (...args) => {
      if (type.isPlain) {
        if (!cacheKey) {
          cacheKey = options.skipHashing ? compactAddLength(u8aToU8a(options.key)) : createKey(registry, itemFn, NO_RAW_ARGS);
        }
        return cacheKey;
      }
      const { hashers, key } = type.asMap;
      return hashers.length === 1 ? createKey(registry, itemFn, { args, hashers, keys: [key] }) : createKey(registry, itemFn, { args, hashers, keys: registry.lookup.getSiType(key).def.asTuple });
    };
  }
  function createWithMeta(registry, itemFn, options) {
    const { meta, method, prefix: prefix2, section: section2 } = itemFn;
    const storageFn = createStorageFn(registry, itemFn, options);
    storageFn.inspect = createStorageInspect(registry, itemFn, options);
    storageFn.meta = meta;
    storageFn.method = stringCamelCase(method);
    storageFn.prefix = prefix2;
    storageFn.section = section2;
    storageFn.toJSON = () => objectSpread({ storage: { method, prefix: prefix2, section: section2 } }, meta.toJSON());
    return storageFn;
  }
  function extendHeadMeta(registry, { meta: { docs, name, type }, section: section2 }, { method }, iterFn) {
    const meta = registry.createTypeUnsafe("StorageEntryMetadataLatest", [{
      docs,
      fallback: registry.createTypeUnsafe("Bytes", []),
      modifier: registry.createTypeUnsafe("StorageEntryModifierLatest", [1]),
      name,
      type: registry.createTypeUnsafe("StorageEntryTypeLatest", [type.asMap.key, 0])
    }]);
    iterFn.meta = meta;
    const fn = (...args) => registry.createTypeUnsafe("StorageKey", [iterFn(...args), { method, section: section2 }]);
    fn.meta = meta;
    return fn;
  }
  function extendPrefixedMap(registry, itemFn, storageFn) {
    const { meta: { type }, method, section: section2 } = itemFn;
    storageFn.iterKey = extendHeadMeta(registry, itemFn, storageFn, (...args) => {
      if (args.length && (type.isPlain || args.length >= type.asMap.hashers.length)) {
        throw new Error(`Iteration of ${stringCamelCase(section2 || "unknown")}.${stringCamelCase(method || "unknown")} needs arguments to be at least one less than the full arguments, found [${args.join(", ")}]`);
      }
      if (args.length) {
        if (type.isMap) {
          const { hashers, key } = type.asMap;
          const keysVec = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple;
          return new Raw(registry, createKeyRaw(registry, itemFn, { args, hashers: hashers.slice(0, args.length), keys: keysVec.slice(0, args.length) }));
        }
      }
      return new Raw(registry, createKeyRaw(registry, itemFn, NO_RAW_ARGS));
    });
    return storageFn;
  }
  function createFunction(registry, itemFn, options) {
    const { meta: { type } } = itemFn;
    const storageFn = createWithMeta(registry, itemFn, options);
    if (type.isMap) {
      extendPrefixedMap(registry, itemFn, storageFn);
    }
    storageFn.keyPrefix = (...args) => storageFn.iterKey && storageFn.iterKey(...args) || compactStripLength(storageFn())[1];
    return storageFn;
  }
  function findSiPrimitive(registry, _prim) {
    const prim = _prim.toLowerCase();
    return registry.lookup.types.find((t) => t.type.def.isPrimitive && t.type.def.asPrimitive.toString().toLowerCase() === prim || t.type.def.isHistoricMetaCompat && t.type.def.asHistoricMetaCompat.toString().toLowerCase() === prim);
  }
  function findSiType(registry, orig) {
    let portable = findSiPrimitive(registry, orig);
    if (!portable && orig === "Bytes") {
      const u82 = findSiPrimitive(registry, "u8");
      if (u82) {
        portable = registry.lookup.types.find((t) => t.type.def.isSequence && t.type.def.asSequence.type.eq(u82.id) || t.type.def.isHistoricMetaCompat && t.type.def.asHistoricMetaCompat.eq(orig));
      }
    }
    if (!portable) {
      console.warn(`Unable to map ${orig} to a lookup index`);
    }
    return portable;
  }
  function createRuntimeFunction({ method, prefix: prefix2, section: section2 }, key, { docs, type }) {
    return (registry) => {
      var _a;
      return createFunction(registry, {
        meta: registry.createTypeUnsafe("StorageEntryMetadataLatest", [{
          docs: registry.createTypeUnsafe("Vec<Text>", [[docs]]),
          modifier: registry.createTypeUnsafe("StorageEntryModifierLatest", ["Required"]),
          name: registry.createTypeUnsafe("Text", [method]),
          toJSON: () => key,
          type: registry.createTypeUnsafe("StorageEntryTypeLatest", [{ Plain: ((_a = findSiType(registry, type)) == null ? void 0 : _a.id) || 0 }])
        }]),
        method,
        prefix: prefix2,
        section: section2
      }, { key, skipHashing: true });
    };
  }
  const prefix$1 = "Substrate";
  const section = "substrate";
  function createSubstrateFn(method, key, meta) {
    return createRuntimeFunction({ method, prefix: prefix$1, section }, key, meta);
  }
  const substrate = {
    changesTrieConfig: createSubstrateFn("changesTrieConfig", ":changes_trie", {
      docs: "Changes trie configuration is stored under this key.",
      type: "u32"
    }),
    childStorageKeyPrefix: createSubstrateFn("childStorageKeyPrefix", ":child_storage:", {
      docs: "Prefix of child storage keys.",
      type: "u32"
    }),
    code: createSubstrateFn("code", ":code", {
      docs: "Wasm code of the runtime.",
      type: "Bytes"
    }),
    extrinsicIndex: createSubstrateFn("extrinsicIndex", ":extrinsic_index", {
      docs: "Current extrinsic index (u32) is stored under this key.",
      type: "u32"
    }),
    heapPages: createSubstrateFn("heapPages", ":heappages", {
      docs: "Number of wasm linear memory pages required for execution of the runtime.",
      type: "u64"
    })
  };
  function getStorage(registry) {
    const storage2 = {};
    const entries = Object.entries(substrate);
    for (let e = 0, count = entries.length; e < count; e++) {
      storage2[entries[e][0]] = entries[e][1](registry);
    }
    return { substrate: storage2 };
  }
  const VERSION_NAME = "palletVersion";
  const VERSION_KEY = ":__STORAGE_VERSION__:";
  const VERSION_DOCS = { docs: "Returns the current pallet version from storage", type: "u16" };
  function decorateStorage(registry, { pallets }, _metaVersion) {
    const result = getStorage(registry);
    for (let i2 = 0, count = pallets.length; i2 < count; i2++) {
      const { name, storage: storage2 } = pallets[i2];
      if (storage2.isSome) {
        const section2 = stringCamelCase(name);
        const { items, prefix: _prefix } = storage2.unwrap();
        const prefix2 = _prefix.toString();
        lazyMethod(result, section2, () => lazyMethods({
          palletVersion: createRuntimeFunction({ method: VERSION_NAME, prefix: prefix2, section: section2 }, createKeyRaw(registry, { method: VERSION_KEY, prefix: name.toString() }, NO_RAW_ARGS), VERSION_DOCS)(registry)
        }, items, (meta) => createFunction(registry, { meta, method: meta.name.toString(), prefix: prefix2, section: section2 }, {}), objectNameToCamel));
      }
    }
    return result;
  }
  function expandMetadata(registry, metadata) {
    if (!(metadata instanceof Metadata)) {
      throw new Error("You need to pass a valid Metadata instance to Decorated");
    }
    const latest2 = metadata.asLatest;
    const version2 = metadata.version;
    return {
      consts: decorateConstants(registry, latest2),
      errors: decorateErrors(registry, latest2, version2),
      events: decorateEvents(registry, latest2, version2),
      query: decorateStorage(registry, latest2),
      registry,
      tx: decorateExtrinsics(registry, latest2, version2)
    };
  }
  const DEFAULT_FIRST_CALL_IDX = new Uint8Array(2);
  const l$8 = logger("registry");
  function sortDecimalStrings(a, b) {
    return parseInt(a, 10) - parseInt(b, 10);
  }
  function valueToString(v) {
    return v.toString();
  }
  function getFieldArgs(lookup, fields) {
    const count = fields.length;
    const args = new Array(count);
    for (let i2 = 0; i2 < count; i2++) {
      args[i2] = lookup.getTypeDef(fields[i2].type).type;
    }
    return args;
  }
  function clearRecord(record) {
    const keys2 = Object.keys(record);
    for (let i2 = 0, count = keys2.length; i2 < count; i2++) {
      delete record[keys2[i2]];
    }
  }
  function getVariantStringIdx({ index: index2 }) {
    return index2.toString();
  }
  function injectErrors(_2, { lookup, pallets }, version2, result) {
    clearRecord(result);
    for (let i2 = 0, count = pallets.length; i2 < count; i2++) {
      const { errors, index: index2, name } = pallets[i2];
      if (errors.isSome) {
        const sectionName = stringCamelCase(name);
        lazyMethod(result, version2 >= 12 ? index2.toNumber() : i2, () => lazyVariants(lookup, errors.unwrap(), getVariantStringIdx, ({ docs, fields, index: index3, name: name2 }) => ({
          args: getFieldArgs(lookup, fields),
          docs: docs.map(valueToString),
          fields,
          index: index3.toNumber(),
          method: name2.toString(),
          name: name2.toString(),
          section: sectionName
        })));
      }
    }
  }
  function injectEvents(registry, { lookup, pallets }, version2, result) {
    const filtered = pallets.filter(filterEventsSome);
    clearRecord(result);
    for (let i2 = 0, count = filtered.length; i2 < count; i2++) {
      const { events: events2, index: index2, name } = filtered[i2];
      lazyMethod(result, version2 >= 12 ? index2.toNumber() : i2, () => lazyVariants(lookup, events2.unwrap(), getVariantStringIdx, (variant) => {
        const meta = registry.createType("EventMetadataLatest", objectSpread({}, variant, { args: getFieldArgs(lookup, variant.fields) }));
        return class extends GenericEventData {
          constructor(registry2, value) {
            super(registry2, value, meta, stringCamelCase(name), variant.name.toString());
          }
        };
      }));
    }
  }
  function injectExtrinsics(registry, { lookup, pallets }, version2, result, mapping2) {
    const filtered = pallets.filter(filterCallsSome);
    clearRecord(result);
    clearRecord(mapping2);
    for (let i2 = 0, count = filtered.length; i2 < count; i2++) {
      const { calls, index: index2, name } = filtered[i2];
      const sectionIndex = version2 >= 12 ? index2.toNumber() : i2;
      const sectionName = stringCamelCase(name);
      const allCalls = calls.unwrap();
      lazyMethod(result, sectionIndex, () => lazyVariants(lookup, allCalls, getVariantStringIdx, (variant) => createCallFunction(registry, lookup, variant, sectionName, sectionIndex)));
      const { path: path2 } = registry.lookup.getSiType(allCalls.type);
      const palletIdx = path2.findIndex((v) => v.eq("pallet"));
      if (palletIdx !== -1) {
        const name2 = stringCamelCase(path2.slice(0, palletIdx).map((p, i3) => i3 === 0 ? p.replace(/^(frame|pallet)_/, "") : p).join(" "));
        if (!mapping2[name2]) {
          mapping2[name2] = [sectionName];
        } else {
          mapping2[name2].push(sectionName);
        }
      }
    }
  }
  function extractProperties(registry, metadata) {
    const original = registry.getChainProperties();
    const constants = decorateConstants(registry, metadata.asLatest);
    const ss58Format = constants["system"] && (constants["system"]["sS58Prefix"] || constants["system"]["ss58Prefix"]);
    if (!ss58Format) {
      return original;
    }
    const { tokenDecimals, tokenSymbol } = original || {};
    return registry.createTypeUnsafe("ChainProperties", [{ ss58Format, tokenDecimals, tokenSymbol }]);
  }
  class TypeRegistry {
    constructor(createdAtHash) {
      this.__internal__classes = /* @__PURE__ */ new Map();
      this.__internal__definitions = /* @__PURE__ */ new Map();
      this.__internal__firstCallIndex = null;
      this.__internal__hasher = blake2AsU8a;
      this.__internal__knownTypes = {};
      this.__internal__metadataVersion = 0;
      this.__internal__signedExtensions = fallbackExtensions;
      this.__internal__unknownTypes = /* @__PURE__ */ new Map();
      this.__internal__metadataCalls = {};
      this.__internal__metadataErrors = {};
      this.__internal__metadataEvents = {};
      this.__internal__moduleMap = {};
      this.__internal__registerObject = (obj) => {
        const entries = Object.entries(obj);
        for (let e = 0, count = entries.length; e < count; e++) {
          const [name, type] = entries[e];
          if (isFunction$2(type)) {
            this.__internal__classes.set(name, type);
          } else {
            const def = isString$1(type) ? type : stringify$1(type);
            if (name === def) {
              throw new Error(`Unable to register circular ${name} === ${def}`);
            }
            if (this.__internal__classes.has(name)) {
              this.__internal__classes.delete(name);
            }
            this.__internal__definitions.set(name, def);
          }
        }
      };
      this.__internal__registerLookup = (lookup) => {
        this.setLookup(lookup);
        let Weight = null;
        if (this.hasType("SpWeightsWeightV2Weight")) {
          const weightv2 = this.createType("SpWeightsWeightV2Weight");
          Weight = weightv2.refTime && weightv2.proofSize ? "SpWeightsWeightV2Weight" : "WeightV1";
        } else if (!isBn(this.createType("Weight"))) {
          Weight = "WeightV1";
        }
        if (Weight) {
          this.register({ Weight });
        }
      };
      this.__internal__knownDefaults = objectSpread({ Json, Metadata, PortableRegistry, Raw }, baseTypes);
      this.__internal__knownDefaultsEntries = Object.entries(this.__internal__knownDefaults);
      this.__internal__knownDefinitions = typeDefinitions;
      const allKnown2 = Object.values(this.__internal__knownDefinitions);
      for (let i2 = 0, count = allKnown2.length; i2 < count; i2++) {
        this.register(allKnown2[i2].types);
      }
      if (createdAtHash) {
        this.createdAtHash = this.createType("BlockHash", createdAtHash);
      }
    }
    get chainDecimals() {
      var _a;
      if ((_a = this.__internal__chainProperties) == null ? void 0 : _a.tokenDecimals.isSome) {
        const allDecimals = this.__internal__chainProperties.tokenDecimals.unwrap();
        if (allDecimals.length) {
          return allDecimals.map((b) => b.toNumber());
        }
      }
      return [12];
    }
    get chainSS58() {
      var _a;
      return ((_a = this.__internal__chainProperties) == null ? void 0 : _a.ss58Format.isSome) ? this.__internal__chainProperties.ss58Format.unwrap().toNumber() : void 0;
    }
    get chainTokens() {
      var _a;
      if ((_a = this.__internal__chainProperties) == null ? void 0 : _a.tokenSymbol.isSome) {
        const allTokens = this.__internal__chainProperties.tokenSymbol.unwrap();
        if (allTokens.length) {
          return allTokens.map(valueToString);
        }
      }
      return [formatBalance.getDefaults().unit];
    }
    get firstCallIndex() {
      return this.__internal__firstCallIndex || DEFAULT_FIRST_CALL_IDX;
    }
    /**
     * @description Returns true if the type is in a Compat format
     */
    isLookupType(value) {
      return /Lookup\d+$/.test(value);
    }
    /**
     * @description Creates a lookup string from the supplied id
     */
    createLookupType(lookupId) {
      return `Lookup${typeof lookupId === "number" ? lookupId : lookupId.toNumber()}`;
    }
    get knownTypes() {
      return this.__internal__knownTypes;
    }
    get lookup() {
      return assertReturn(this.__internal__lookup, "PortableRegistry has not been set on this registry");
    }
    get metadata() {
      return assertReturn(this.__internal__metadata, "Metadata has not been set on this registry");
    }
    get unknownTypes() {
      return [...this.__internal__unknownTypes.keys()];
    }
    get signedExtensions() {
      return this.__internal__signedExtensions;
    }
    clearCache() {
      this.__internal__classes = /* @__PURE__ */ new Map();
    }
    /**
     * @describe Creates an instance of the class
     */
    createClass(type) {
      return createClassUnsafe(this, type);
    }
    /**
     * @describe Creates an instance of the class
     */
    createClassUnsafe(type) {
      return createClassUnsafe(this, type);
    }
    /**
     * @description Creates an instance of a type as registered
     */
    createType(type, ...params) {
      return createTypeUnsafe(this, type, params);
    }
    /**
     * @description Creates an instance of a type as registered
     */
    createTypeUnsafe(type, params, options) {
      return createTypeUnsafe(this, type, params, options);
    }
    // find a specific call
    findMetaCall(callIndex) {
      const [section2, method] = [callIndex[0], callIndex[1]];
      return assertReturn(this.__internal__metadataCalls[`${section2}`] && this.__internal__metadataCalls[`${section2}`][`${method}`], () => `findMetaCall: Unable to find Call with index [${section2}, ${method}]/[${callIndex.toString()}]`);
    }
    // finds an error
    findMetaError(errorIndex) {
      const [section2, method] = isU8a(errorIndex) ? [errorIndex[0], errorIndex[1]] : [
        errorIndex.index.toNumber(),
        isU8a(errorIndex.error) ? errorIndex.error[0] : errorIndex.error.toNumber()
      ];
      return assertReturn(this.__internal__metadataErrors[`${section2}`] && this.__internal__metadataErrors[`${section2}`][`${method}`], () => `findMetaError: Unable to find Error with index [${section2}, ${method}]/[${errorIndex.toString()}]`);
    }
    findMetaEvent(eventIndex) {
      const [section2, method] = [eventIndex[0], eventIndex[1]];
      return assertReturn(this.__internal__metadataEvents[`${section2}`] && this.__internal__metadataEvents[`${section2}`][`${method}`], () => `findMetaEvent: Unable to find Event with index [${section2}, ${method}]/[${eventIndex.toString()}]`);
    }
    get(name, withUnknown, knownTypeDef) {
      return this.getUnsafe(name, withUnknown, knownTypeDef);
    }
    getUnsafe(name, withUnknown, knownTypeDef) {
      let Type2 = this.__internal__classes.get(name) || this.__internal__knownDefaults[name];
      if (!Type2) {
        const definition = this.__internal__definitions.get(name);
        let BaseType;
        if (definition) {
          BaseType = createClassUnsafe(this, definition);
        } else if (knownTypeDef) {
          BaseType = constructTypeClass(this, knownTypeDef);
        } else if (withUnknown) {
          l$8.warn(`Unable to resolve type ${name}, it will fail on construction`);
          this.__internal__unknownTypes.set(name, true);
          BaseType = DoNotConstruct.with(name);
        }
        if (BaseType) {
          Type2 = class extends BaseType {
          };
          this.__internal__classes.set(name, Type2);
          if (knownTypeDef && isNumber$1(knownTypeDef.lookupIndex)) {
            this.__internal__classes.set(this.createLookupType(knownTypeDef.lookupIndex), Type2);
          }
        }
      }
      return Type2;
    }
    getChainProperties() {
      return this.__internal__chainProperties;
    }
    getClassName(Type2) {
      const names = [];
      for (const [name, Clazz] of this.__internal__knownDefaultsEntries) {
        if (Type2 === Clazz) {
          names.push(name);
        }
      }
      for (const [name, Clazz] of this.__internal__classes.entries()) {
        if (Type2 === Clazz) {
          names.push(name);
        }
      }
      return names.length ? names.sort().reverse()[0] : void 0;
    }
    getDefinition(typeName) {
      return this.__internal__definitions.get(typeName);
    }
    getModuleInstances(specName, moduleName) {
      var _a, _b, _c, _d, _e;
      return ((_e = (_d = (_c = (_b = (_a = this.__internal__knownTypes) == null ? void 0 : _a.typesBundle) == null ? void 0 : _b.spec) == null ? void 0 : _c[specName.toString()]) == null ? void 0 : _d.instances) == null ? void 0 : _e[moduleName]) || this.__internal__moduleMap[moduleName];
    }
    getOrThrow(name) {
      const Clazz = this.get(name);
      if (!Clazz) {
        throw new Error(`type ${name} not found`);
      }
      return Clazz;
    }
    getOrUnknown(name) {
      return this.get(name, true);
    }
    getSignedExtensionExtra() {
      return expandExtensionTypes(this.__internal__signedExtensions, "payload", this.__internal__userExtensions);
    }
    getSignedExtensionTypes() {
      return expandExtensionTypes(this.__internal__signedExtensions, "extrinsic", this.__internal__userExtensions);
    }
    hasClass(name) {
      return this.__internal__classes.has(name) || !!this.__internal__knownDefaults[name];
    }
    hasDef(name) {
      return this.__internal__definitions.has(name);
    }
    hasType(name) {
      return !this.__internal__unknownTypes.get(name) && (this.hasClass(name) || this.hasDef(name));
    }
    hash(data2) {
      return this.createType("CodecHash", this.__internal__hasher(data2));
    }
    // eslint-disable-next-line no-dupe-class-members
    register(arg1, arg2) {
      if (isFunction$2(arg1)) {
        this.__internal__classes.set(arg1.name, arg1);
      } else if (isString$1(arg1)) {
        if (!isFunction$2(arg2)) {
          throw new Error(`Expected class definition passed to '${arg1}' registration`);
        } else if (arg1 === arg2.toString()) {
          throw new Error(`Unable to register circular ${arg1} === ${arg1}`);
        }
        this.__internal__classes.set(arg1, arg2);
      } else {
        this.__internal__registerObject(arg1);
      }
    }
    // sets the chain properties
    setChainProperties(properties2) {
      if (properties2) {
        this.__internal__chainProperties = properties2;
      }
    }
    setHasher(hasher2) {
      this.__internal__hasher = hasher2 || blake2AsU8a;
    }
    setKnownTypes(knownTypes2) {
      this.__internal__knownTypes = knownTypes2;
    }
    setLookup(lookup) {
      this.__internal__lookup = lookup;
      lookup.register();
    }
    // sets the metadata
    setMetadata(metadata, signedExtensions, userExtensions, noInitWarn) {
      this.__internal__metadata = metadata.asLatest;
      this.__internal__metadataVersion = metadata.version;
      this.__internal__firstCallIndex = null;
      this.__internal__registerLookup(this.__internal__metadata.lookup);
      injectExtrinsics(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataCalls, this.__internal__moduleMap);
      injectErrors(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataErrors);
      injectEvents(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataEvents);
      const [defSection] = Object.keys(this.__internal__metadataCalls).sort(sortDecimalStrings);
      if (defSection) {
        const [defMethod] = Object.keys(this.__internal__metadataCalls[defSection]).sort(sortDecimalStrings);
        if (defMethod) {
          this.__internal__firstCallIndex = new Uint8Array([parseInt(defSection, 10), parseInt(defMethod, 10)]);
        }
      }
      this.setSignedExtensions(signedExtensions || (this.__internal__metadata.extrinsic.version.gt(BN_ZERO) ? this.__internal__metadata.extrinsic.signedExtensions.map(({ identifier: identifier2 }) => identifier2.toString()) : fallbackExtensions), userExtensions, noInitWarn);
      this.setChainProperties(extractProperties(this, metadata));
    }
    // sets the available signed extensions
    setSignedExtensions(signedExtensions = fallbackExtensions, userExtensions, noInitWarn) {
      this.__internal__signedExtensions = signedExtensions;
      this.__internal__userExtensions = userExtensions;
      if (!noInitWarn) {
        const unknown = findUnknownExtensions(this.__internal__signedExtensions, this.__internal__userExtensions);
        if (unknown.length) {
          l$8.warn(`Unknown signed extensions ${unknown.join(", ")} found, treating them as no-effect`);
        }
      }
    }
  }
  const AbiParamSpec = z.object({
    name: z.string(),
    type: z.union([z.number(), z.string()])
  });
  const AbiFieldSpec = z.object({
    name: z.string().optional(),
    type: z.number(),
    typeName: z.string().optional()
  });
  const AbiVariantSpec = z.object({
    index: z.number(),
    name: z.string()
  });
  const AbiStorageEnumFieldSpec = z.object({
    name: z.string(),
    fields: z.array(z.any())
  });
  const AbiStorageEnumSpec = z.record(z.number().min(0), AbiStorageEnumFieldSpec);
  const AbiTypeSpec = z.object({
    id: z.number(),
    type: z.object({
      def: z.object({
        composite: z.object({
          fields: z.array(AbiFieldSpec)
        }).optional(),
        variant: z.object({
          variants: z.union([z.array(AbiVariantSpec).optional(), AbiStorageEnumSpec])
        }).optional(),
        sequence: z.object({
          type: z.number()
        }).optional(),
        array: z.object({
          len: z.number(),
          type: z.number()
        }).optional(),
        primitive: z.string().optional(),
        tuple: z.any().optional()
      }),
      params: z.array(AbiParamSpec).optional(),
      path: z.array(z.string()).optional()
    })
  });
  const AbiEnumSpec = z.object({
    dispatchKey: z.string(),
    variants: z.any()
  });
  const AbiText = z.union([z.instanceof(Text), z.string()]);
  const AbiCellSpec = z.object({
    key: AbiText,
    ty: z.union([z.number(), z.string()])
  });
  const AbiTypesSpec = z.array(AbiTypeSpec);
  const AbiStorageFieldSpec = z.lazy(() => z.object({
    name: AbiText.optional(),
    layout: z.object({
      leaf: AbiCellSpec.optional(),
      enum: AbiEnumSpec.optional(),
      root: AbiStorageFieldSpec.optional(),
      struct: AbiStorageStructSpec.optional()
    }),
    root_key: AbiText.optional()
  }));
  const AbiStorageStructSpec = z.object({
    fields: z.array(AbiStorageFieldSpec),
    name: z.string()
  });
  const AbiStorageSpec = z.object({
    root: z.object({
      layout: z.object({
        struct: AbiStorageStructSpec.optional()
      })
    })
  });
  const AbiSpecDef = z.object({
    constructors: z.array(z.any()),
    docs: z.array(z.any()),
    events: z.array(z.any()),
    messages: z.array(z.object({
      label: z.string(),
      selector: z.string()
    }))
  });
  var metadataVersion;
  (function(metadataVersion2) {
    metadataVersion2["V1"] = "V1";
    metadataVersion2["V2"] = "V2";
    metadataVersion2["V3"] = "V3";
  })(metadataVersion || (metadataVersion = {}));
  const AbiDetailsSpec = z.object({
    spec: AbiSpecDef,
    types: AbiTypesSpec,
    storage: AbiStorageSpec
  });
  const AbiMetaDataSpec = z.object({
    metadataVersion: z.string().optional(),
    source: z.object({
      hash: z.string(),
      language: z.string(),
      compiler: z.string(),
      wasm: z.string().optional()
    }),
    contract: z.object({
      name: z.string(),
      version: z.string(),
      authors: z.array(z.string())
    }),
    [metadataVersion.V1]: AbiDetailsSpec.optional(),
    [metadataVersion.V2]: AbiDetailsSpec.optional(),
    [metadataVersion.V3]: AbiDetailsSpec.optional(),
    spec: AbiSpecDef,
    types: AbiTypesSpec,
    storage: AbiStorageSpec
  });
  var CaptchaTypes;
  (function(CaptchaTypes2) {
    CaptchaTypes2["SelectAll"] = "SelectAll";
  })(CaptchaTypes || (CaptchaTypes = {}));
  var CaptchaItemTypes;
  (function(CaptchaItemTypes2) {
    CaptchaItemTypes2["Text"] = "text";
    CaptchaItemTypes2["Image"] = "image";
  })(CaptchaItemTypes || (CaptchaItemTypes = {}));
  var CaptchaStates;
  (function(CaptchaStates2) {
    CaptchaStates2["Solved"] = "solved";
    CaptchaStates2["Unsolved"] = "unsolved";
  })(CaptchaStates || (CaptchaStates = {}));
  const CaptchaSchema = z.object({
    captchaId: z.union([z.string(), z.undefined()]),
    captchaContentId: z.union([z.string(), z.undefined()]),
    salt: z.string().min(34),
    solution: z.number().array().optional(),
    unlabelled: z.number().array().optional(),
    timeLimit: z.number().optional()
  });
  const CaptchaItemSchema = z.object({
    hash: z.string(),
    data: z.string(),
    type: z.nativeEnum(CaptchaItemTypes)
  });
  const HashedCaptchaItemSchema = CaptchaItemSchema.extend({
    hash: z.string()
  });
  const LabelledItemSchema = HashedCaptchaItemSchema.extend({
    label: z.string()
  });
  const MaybeLabelledHashedItemSchema = HashedCaptchaItemSchema.extend({
    label: z.string().optional()
  });
  const SelectAllCaptchaSchemaRaw = CaptchaSchema.extend({
    items: z.array(CaptchaItemSchema),
    target: z.string()
  });
  SelectAllCaptchaSchemaRaw.extend({
    solution: z.string().array().optional(),
    unlabelled: z.string().array().optional()
  });
  const CaptchasSchema = z.array(SelectAllCaptchaSchemaRaw);
  const CaptchaSolutionSchema = z.object({
    captchaId: z.string(),
    captchaContentId: z.string(),
    solution: z.string().array(),
    salt: z.string().min(34)
  });
  z.array(CaptchaSolutionSchema);
  z.object({
    items: z.array(MaybeLabelledHashedItemSchema)
  });
  z.object({
    items: z.array(LabelledItemSchema)
  });
  z.object({
    captchas: CaptchasSchema,
    format: z.nativeEnum(CaptchaTypes)
  });
  z.object({
    labels: z.array(z.string())
  });
  var ApiPaths;
  (function(ApiPaths2) {
    ApiPaths2["GetCaptchaChallenge"] = "/v1/prosopo/provider/captcha";
    ApiPaths2["SubmitCaptchaSolution"] = "/v1/prosopo/provider/solution";
    ApiPaths2["VerifyCaptchaSolution"] = "/v1/prosopo/provider/verify";
    ApiPaths2["GetProviderStatus"] = "/v1/prosopo/provider/status";
    ApiPaths2["GetProviderDetails"] = "/v1/prosopo/provider/details";
  })(ApiPaths || (ApiPaths = {}));
  var ApiParams;
  (function(ApiParams2) {
    ApiParams2["datasetId"] = "datasetId";
    ApiParams2["user"] = "user";
    ApiParams2["dapp"] = "dapp";
    ApiParams2["blockNumber"] = "blockNumber";
    ApiParams2["signature"] = "signature";
    ApiParams2["requestHash"] = "requestHash";
    ApiParams2["captchas"] = "captchas";
    ApiParams2["commitmentId"] = "commitmentId";
    ApiParams2["providerUrl"] = "providerUrl";
    ApiParams2["procaptchaResponse"] = "procaptcha-response";
  })(ApiParams || (ApiParams = {}));
  z.object({
    [ApiParams.user]: z.string(),
    [ApiParams.dapp]: z.string(),
    [ApiParams.datasetId]: z.string(),
    [ApiParams.blockNumber]: z.string()
  });
  const CaptchaSolutionBody = z.object({
    [ApiParams.user]: z.string(),
    [ApiParams.dapp]: z.string(),
    [ApiParams.captchas]: z.array(CaptchaSolutionSchema),
    [ApiParams.requestHash]: z.string(),
    [ApiParams.signature]: z.string()
    // the signature to prove account ownership
  });
  z.object({
    [ApiParams.user]: z.string(),
    [ApiParams.commitmentId]: z.string().optional()
  });
  class AccountNotFoundError extends Error {
    constructor(msg) {
      super(msg || "No account found");
    }
  }
  class ExtensionNotFoundError extends Error {
    constructor(msg) {
      super(msg || "No extensions found");
    }
  }
  function documentReadyPromise(creator) {
    return new Promise((resolve) => {
      if (document.readyState === "complete") {
        resolve(creator());
      } else {
        window.addEventListener("load", () => resolve(creator()));
      }
    });
  }
  const win = window;
  win.injectedWeb3 = win.injectedWeb3 || {};
  web3IsInjected();
  let web3EnablePromise = null;
  function web3IsInjected() {
    return Object.values(win.injectedWeb3).filter(({ connect: connect2, enable }) => !!(connect2 || enable)).length !== 0;
  }
  function getWindowExtensions(originName) {
    return Promise.all(Object.entries(win.injectedWeb3).map(([nameOrHash, { connect: connect2, enable, version: version2 }]) => Promise.resolve().then(() => connect2 ? connect2(originName) : enable ? enable(originName).then((e) => objectSpread({ name: nameOrHash, version: version2 || "unknown" }, e)) : Promise.reject(new Error("No connect(..) or enable(...) hook found"))).catch(({ message }) => {
      console.error(`Error initializing ${nameOrHash}: ${message}`);
    }))).then((exts) => exts.filter((e) => !!e));
  }
  function web3Enable(originName, compatInits = []) {
    if (!originName) {
      throw new Error("You must pass a name for your app to the web3Enable function");
    }
    const initCompat = compatInits.length ? Promise.all(compatInits.map((c) => c().catch(() => false))) : Promise.resolve([true]);
    web3EnablePromise = documentReadyPromise(() => initCompat.then(() => getWindowExtensions(originName).then((values2) => values2.map((e) => {
      if (!e.accounts.subscribe) {
        e.accounts.subscribe = (cb) => {
          e.accounts.get().then(cb).catch(console.error);
          return () => {
          };
        };
      }
      return e;
    })).catch(() => []).then((values2) => {
      const names = values2.map(({ name, version: version2 }) => `${name}/${version2}`);
      web3IsInjected();
      console.info(`web3Enable: Enabled ${values2.length} extension${values2.length !== 1 ? "s" : ""}: ${names.join(", ")}`);
      return values2;
    })));
    return web3EnablePromise;
  }
  class Extension {
  }
  class ExtWeb3 extends Extension {
    async getAccount(config2) {
      const { dappName, userAccountAddress: address } = config2;
      if (!address) {
        throw new AccountNotFoundError("No account address provided");
      }
      const extensions = await web3Enable(dappName);
      if (extensions.length === 0) {
        throw new ExtensionNotFoundError();
      }
      for (const extension of extensions) {
        const accounts2 = await extension.accounts.get();
        const account2 = accounts2.find((account3) => account3.address === address);
        if (account2) {
          return { account: account2, extension };
        }
      }
      throw new AccountNotFoundError("No account found matching " + address);
    }
  }
  const packageInfo = { name: "@polkadot/api", path: { url: _documentCurrentScript && _documentCurrentScript.src || new URL("procaptcha.bundle.js", document.baseURI).href } && (_documentCurrentScript && _documentCurrentScript.src || new URL("procaptcha.bundle.js", document.baseURI).href) ? new URL(_documentCurrentScript && _documentCurrentScript.src || new URL("procaptcha.bundle.js", document.baseURI).href).pathname.substring(0, new URL(_documentCurrentScript && _documentCurrentScript.src || new URL("procaptcha.bundle.js", document.baseURI).href).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "10.9.1" };
  function evaluateThis(fn) {
    return fn("return this");
  }
  const xglobal = typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : evaluateThis(Function);
  const UNKNOWN = -99999;
  function extend$1(that, name, value) {
    Object.defineProperty(that, name, {
      configurable: true,
      enumerable: false,
      value
    });
  }
  class RpcError extends Error {
    constructor(message = "", code = UNKNOWN, data2) {
      super();
      extend$1(this, "message", String(message));
      extend$1(this, "name", this.constructor.name);
      extend$1(this, "data", data2);
      extend$1(this, "code", code);
      if (isFunction$2(Error.captureStackTrace)) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        const { stack } = new Error(message);
        stack && extend$1(this, "stack", stack);
      }
    }
  }
  RpcError.CODES = {
    ASSERT: -90009,
    INVALID_JSONRPC: -99998,
    METHOD_NOT_FOUND: -32601,
    UNKNOWN
  };
  const RpcError$1 = RpcError;
  function formatErrorData(data2) {
    if (isUndefined$1(data2)) {
      return "";
    }
    const formatted = `: ${isString$1(data2) ? data2.replace(/Error\("/g, "").replace(/\("/g, "(").replace(/"\)/g, ")").replace(/\(/g, ", ").replace(/\)/g, "") : stringify$1(data2)}`;
    return formatted.length <= 256 ? formatted : `${formatted.substring(0, 255)}…`;
  }
  function checkError(error) {
    if (error) {
      const { code, data: data2, message } = error;
      throw new RpcError$1(`${code}: ${message}${formatErrorData(data2)}`, code, data2);
    }
  }
  class RpcCoder {
    constructor() {
      this.__internal__id = 0;
    }
    decodeResponse(response) {
      if (!response || response.jsonrpc !== "2.0") {
        throw new Error("Invalid jsonrpc field in decoded object");
      }
      const isSubscription2 = !isUndefined$1(response.params) && !isUndefined$1(response.method);
      if (!isNumber$1(response.id) && (!isSubscription2 || !isNumber$1(response.params.subscription) && !isString$1(response.params.subscription))) {
        throw new Error("Invalid id field in decoded object");
      }
      checkError(response.error);
      if (response.result === void 0 && !isSubscription2) {
        throw new Error("No result found in jsonrpc response");
      }
      if (isSubscription2) {
        checkError(response.params.error);
        return response.params.result;
      }
      return response.result;
    }
    encodeJson(method, params) {
      const [id, data2] = this.encodeObject(method, params);
      return [id, stringify$1(data2)];
    }
    encodeObject(method, params) {
      const id = ++this.__internal__id;
      return [id, {
        id,
        jsonrpc: "2.0",
        method,
        params
      }];
    }
  }
  const HTTP_URL = "http://127.0.0.1:9933";
  const WS_URL = "ws://127.0.0.1:9944";
  const defaults$4 = {
    HTTP_URL,
    WS_URL
  };
  const DEFAULT_CAPACITY = 128;
  class LRUNode {
    constructor(key) {
      this.key = key;
      this.next = this.prev = this;
    }
  }
  class LRUCache {
    constructor(capacity = DEFAULT_CAPACITY) {
      this.__internal__data = /* @__PURE__ */ new Map();
      this.__internal__refs = /* @__PURE__ */ new Map();
      this.__internal__length = 0;
      this.capacity = capacity;
      this.__internal__head = this.__internal__tail = new LRUNode("<empty>");
    }
    get length() {
      return this.__internal__length;
    }
    get lengthData() {
      return this.__internal__data.size;
    }
    get lengthRefs() {
      return this.__internal__refs.size;
    }
    entries() {
      const keys2 = this.keys();
      const count = keys2.length;
      const entries = new Array(count);
      for (let i2 = 0; i2 < count; i2++) {
        const key = keys2[i2];
        entries[i2] = [key, this.__internal__data.get(key)];
      }
      return entries;
    }
    keys() {
      const keys2 = [];
      if (this.__internal__length) {
        let curr = this.__internal__head;
        while (curr !== this.__internal__tail) {
          keys2.push(curr.key);
          curr = curr.next;
        }
        keys2.push(curr.key);
      }
      return keys2;
    }
    get(key) {
      const data2 = this.__internal__data.get(key);
      if (data2) {
        this.__internal__toHead(key);
        return data2;
      }
      return null;
    }
    set(key, value) {
      if (this.__internal__data.has(key)) {
        this.__internal__toHead(key);
      } else {
        const node2 = new LRUNode(key);
        this.__internal__refs.set(node2.key, node2);
        if (this.length === 0) {
          this.__internal__head = this.__internal__tail = node2;
        } else {
          this.__internal__head.prev = node2;
          node2.next = this.__internal__head;
          this.__internal__head = node2;
        }
        if (this.__internal__length === this.capacity) {
          this.__internal__data.delete(this.__internal__tail.key);
          this.__internal__refs.delete(this.__internal__tail.key);
          this.__internal__tail = this.__internal__tail.prev;
          this.__internal__tail.next = this.__internal__head;
        } else {
          this.__internal__length += 1;
        }
      }
      this.__internal__data.set(key, value);
    }
    __internal__toHead(key) {
      const ref = this.__internal__refs.get(key);
      if (ref && ref !== this.__internal__head) {
        ref.prev.next = ref.next;
        ref.next.prev = ref.prev;
        ref.next = this.__internal__head;
        this.__internal__head.prev = ref;
        this.__internal__head = ref;
      }
    }
  }
  var eventemitter3 = { exports: {} };
  (function(module2) {
    var has2 = Object.prototype.hasOwnProperty, prefix2 = "~";
    function Events2() {
    }
    if (Object.create) {
      Events2.prototype = /* @__PURE__ */ Object.create(null);
      if (!new Events2().__proto__)
        prefix2 = false;
    }
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }
    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== "function") {
        throw new TypeError("The listener must be a function");
      }
      var listener = new EE(fn, context || emitter, once), evt = prefix2 ? prefix2 + event : event;
      if (!emitter._events[evt])
        emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn)
        emitter._events[evt].push(listener);
      else
        emitter._events[evt] = [emitter._events[evt], listener];
      return emitter;
    }
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0)
        emitter._events = new Events2();
      else
        delete emitter._events[evt];
    }
    function EventEmitter2() {
      this._events = new Events2();
      this._eventsCount = 0;
    }
    EventEmitter2.prototype.eventNames = function eventNames() {
      var names = [], events2, name;
      if (this._eventsCount === 0)
        return names;
      for (name in events2 = this._events) {
        if (has2.call(events2, name))
          names.push(prefix2 ? name.slice(1) : name);
      }
      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events2));
      }
      return names;
    };
    EventEmitter2.prototype.listeners = function listeners(event) {
      var evt = prefix2 ? prefix2 + event : event, handlers = this._events[evt];
      if (!handlers)
        return [];
      if (handlers.fn)
        return [handlers.fn];
      for (var i2 = 0, l2 = handlers.length, ee = new Array(l2); i2 < l2; i2++) {
        ee[i2] = handlers[i2].fn;
      }
      return ee;
    };
    EventEmitter2.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix2 ? prefix2 + event : event, listeners = this._events[evt];
      if (!listeners)
        return 0;
      if (listeners.fn)
        return 1;
      return listeners.length;
    };
    EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix2 ? prefix2 + event : event;
      if (!this._events[evt])
        return false;
      var listeners = this._events[evt], len = arguments.length, args, i2;
      if (listeners.fn) {
        if (listeners.once)
          this.removeListener(event, listeners.fn, void 0, true);
        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;
          case 2:
            return listeners.fn.call(listeners.context, a1), true;
          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;
          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for (i2 = 1, args = new Array(len - 1); i2 < len; i2++) {
          args[i2 - 1] = arguments[i2];
        }
        listeners.fn.apply(listeners.context, args);
      } else {
        var length2 = listeners.length, j;
        for (i2 = 0; i2 < length2; i2++) {
          if (listeners[i2].once)
            this.removeListener(event, listeners[i2].fn, void 0, true);
          switch (len) {
            case 1:
              listeners[i2].fn.call(listeners[i2].context);
              break;
            case 2:
              listeners[i2].fn.call(listeners[i2].context, a1);
              break;
            case 3:
              listeners[i2].fn.call(listeners[i2].context, a1, a2);
              break;
            case 4:
              listeners[i2].fn.call(listeners[i2].context, a1, a2, a3);
              break;
            default:
              if (!args)
                for (j = 1, args = new Array(len - 1); j < len; j++) {
                  args[j - 1] = arguments[j];
                }
              listeners[i2].fn.apply(listeners[i2].context, args);
          }
        }
      }
      return true;
    };
    EventEmitter2.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };
    EventEmitter2.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };
    EventEmitter2.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix2 ? prefix2 + event : event;
      if (!this._events[evt])
        return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }
      var listeners = this._events[evt];
      if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
          clearEvent(this, evt);
        }
      } else {
        for (var i2 = 0, events2 = [], length2 = listeners.length; i2 < length2; i2++) {
          if (listeners[i2].fn !== fn || once && !listeners[i2].once || context && listeners[i2].context !== context) {
            events2.push(listeners[i2]);
          }
        }
        if (events2.length)
          this._events[evt] = events2.length === 1 ? events2[0] : events2;
        else
          clearEvent(this, evt);
      }
      return this;
    };
    EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;
      if (event) {
        evt = prefix2 ? prefix2 + event : event;
        if (this._events[evt])
          clearEvent(this, evt);
      } else {
        this._events = new Events2();
        this._eventsCount = 0;
      }
      return this;
    };
    EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
    EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
    EventEmitter2.prefixed = prefix2;
    EventEmitter2.EventEmitter = EventEmitter2;
    {
      module2.exports = EventEmitter2;
    }
  })(eventemitter3);
  var eventemitter3Exports = eventemitter3.exports;
  const EventEmitter = /* @__PURE__ */ getDefaultExportFromCjs(eventemitter3Exports);
  const WebSocket = xglobal.WebSocket;
  const known = {
    1e3: "Normal Closure",
    1001: "Going Away",
    1002: "Protocol Error",
    1003: "Unsupported Data",
    1004: "(For future)",
    1005: "No Status Received",
    1006: "Abnormal Closure",
    1007: "Invalid frame payload data",
    1008: "Policy Violation",
    1009: "Message too big",
    1010: "Missing Extension",
    1011: "Internal Error",
    1012: "Service Restart",
    1013: "Try Again Later",
    1014: "Bad Gateway",
    1015: "TLS Handshake"
  };
  function getWSErrorString(code) {
    if (code >= 0 && code <= 999) {
      return "(Unused)";
    } else if (code >= 1016) {
      if (code <= 1999) {
        return "(For WebSocket standard)";
      } else if (code <= 2999) {
        return "(For WebSocket extensions)";
      } else if (code <= 3999) {
        return "(For libraries and frameworks)";
      } else if (code <= 4999) {
        return "(For applications)";
      }
    }
    return known[code] || "(Unknown)";
  }
  const ALIASES = {
    chain_finalisedHead: "chain_finalizedHead",
    chain_subscribeFinalisedHeads: "chain_subscribeFinalizedHeads",
    chain_unsubscribeFinalisedHeads: "chain_unsubscribeFinalizedHeads"
  };
  const RETRY_DELAY = 2500;
  const DEFAULT_TIMEOUT_MS = 60 * 1e3;
  const TIMEOUT_INTERVAL = 5e3;
  const l$7 = logger("api-ws");
  function eraseRecord(record, cb) {
    Object.keys(record).forEach((key) => {
      if (cb) {
        cb(record[key]);
      }
      delete record[key];
    });
  }
  function defaultEndpointStats() {
    return { bytesRecv: 0, bytesSent: 0, cached: 0, errors: 0, requests: 0, subscriptions: 0, timeout: 0 };
  }
  class WsProvider {
    /**
     * @param {string | string[]}  endpoint    The endpoint url. Usually `ws://ip:9944` or `wss://ip:9944`, may provide an array of endpoint strings.
     * @param {number | false} autoConnectMs Whether to connect automatically or not (default). Provided value is used as a delay between retries.
     * @param {Record<string, string>} headers The headers provided to the underlying WebSocket
     * @param {number} [timeout] Custom timeout value used per request . Defaults to `DEFAULT_TIMEOUT_MS`
     */
    constructor(endpoint = defaults$4.WS_URL, autoConnectMs = RETRY_DELAY, headers = {}, timeout) {
      this.__internal__callCache = new LRUCache();
      this.__internal__handlers = {};
      this.__internal__waitingForId = {};
      this.__internal__isConnected = false;
      this.__internal__subscriptions = {};
      this.__internal__timeoutId = null;
      this.__internal__emit = (type, ...args) => {
        this.__internal__eventemitter.emit(type, ...args);
      };
      this.__internal__onSocketClose = (event) => {
        const error = new Error(`disconnected from ${this.endpoint}: ${event.code}:: ${event.reason || getWSErrorString(event.code)}`);
        if (this.__internal__autoConnectMs > 0) {
          l$7.error(error.message);
        }
        this.__internal__isConnected = false;
        if (this.__internal__websocket) {
          this.__internal__websocket.onclose = null;
          this.__internal__websocket.onerror = null;
          this.__internal__websocket.onmessage = null;
          this.__internal__websocket.onopen = null;
          this.__internal__websocket = null;
        }
        if (this.__internal__timeoutId) {
          clearInterval(this.__internal__timeoutId);
          this.__internal__timeoutId = null;
        }
        eraseRecord(this.__internal__handlers, (h) => {
          try {
            h.callback(error, void 0);
          } catch (err) {
            l$7.error(err);
          }
        });
        eraseRecord(this.__internal__waitingForId);
        this.__internal__endpointStats = defaultEndpointStats();
        this.__internal__emit("disconnected");
        if (this.__internal__autoConnectMs > 0) {
          setTimeout(() => {
            this.connectWithRetry().catch(() => {
            });
          }, this.__internal__autoConnectMs);
        }
      };
      this.__internal__onSocketError = (error) => {
        l$7.debug(() => ["socket error", error]);
        this.__internal__emit("error", error);
      };
      this.__internal__onSocketMessage = (message) => {
        l$7.debug(() => ["received", message.data]);
        const bytesRecv = message.data.length;
        this.__internal__endpointStats.bytesRecv += bytesRecv;
        this.__internal__stats.total.bytesRecv += bytesRecv;
        const response = JSON.parse(message.data);
        return isUndefined$1(response.method) ? this.__internal__onSocketMessageResult(response) : this.__internal__onSocketMessageSubscribe(response);
      };
      this.__internal__onSocketMessageResult = (response) => {
        const handler = this.__internal__handlers[response.id];
        if (!handler) {
          l$7.debug(() => `Unable to find handler for id=${response.id}`);
          return;
        }
        try {
          const { method, params, subscription } = handler;
          const result = this.__internal__coder.decodeResponse(response);
          handler.callback(null, result);
          if (subscription) {
            const subId = `${subscription.type}::${result}`;
            this.__internal__subscriptions[subId] = objectSpread({}, subscription, {
              method,
              params
            });
            if (this.__internal__waitingForId[subId]) {
              this.__internal__onSocketMessageSubscribe(this.__internal__waitingForId[subId]);
            }
          }
        } catch (error) {
          this.__internal__endpointStats.errors++;
          this.__internal__stats.total.errors++;
          handler.callback(error, void 0);
        }
        delete this.__internal__handlers[response.id];
      };
      this.__internal__onSocketMessageSubscribe = (response) => {
        const method = ALIASES[response.method] || response.method || "invalid";
        const subId = `${method}::${response.params.subscription}`;
        const handler = this.__internal__subscriptions[subId];
        if (!handler) {
          this.__internal__waitingForId[subId] = response;
          l$7.debug(() => `Unable to find handler for subscription=${subId}`);
          return;
        }
        delete this.__internal__waitingForId[subId];
        try {
          const result = this.__internal__coder.decodeResponse(response);
          handler.callback(null, result);
        } catch (error) {
          this.__internal__endpointStats.errors++;
          this.__internal__stats.total.errors++;
          handler.callback(error, void 0);
        }
      };
      this.__internal__onSocketOpen = () => {
        if (this.__internal__websocket === null) {
          throw new Error("WebSocket cannot be null in onOpen");
        }
        l$7.debug(() => ["connected to", this.endpoint]);
        this.__internal__isConnected = true;
        this.__internal__resubscribe();
        this.__internal__emit("connected");
        return true;
      };
      this.__internal__resubscribe = () => {
        const subscriptions = this.__internal__subscriptions;
        this.__internal__subscriptions = {};
        Promise.all(Object.keys(subscriptions).map(async (id) => {
          const { callback, method, params, type } = subscriptions[id];
          if (type.startsWith("author_")) {
            return;
          }
          try {
            await this.subscribe(type, method, params, callback);
          } catch (error) {
            l$7.error(error);
          }
        })).catch(l$7.error);
      };
      this.__internal__timeoutHandlers = () => {
        const now = Date.now();
        const ids = Object.keys(this.__internal__handlers);
        for (let i2 = 0, count = ids.length; i2 < count; i2++) {
          const handler = this.__internal__handlers[ids[i2]];
          if (now - handler.start > this.__internal__timeout) {
            try {
              handler.callback(new Error(`No response received from RPC endpoint in ${this.__internal__timeout / 1e3}s`), void 0);
            } catch {
            }
            this.__internal__endpointStats.timeout++;
            this.__internal__stats.total.timeout++;
            delete this.__internal__handlers[ids[i2]];
          }
        }
      };
      const endpoints = Array.isArray(endpoint) ? endpoint : [endpoint];
      if (endpoints.length === 0) {
        throw new Error("WsProvider requires at least one Endpoint");
      }
      endpoints.forEach((endpoint2) => {
        if (!/^(wss|ws):\/\//.test(endpoint2)) {
          throw new Error(`Endpoint should start with 'ws://', received '${endpoint2}'`);
        }
      });
      this.__internal__eventemitter = new EventEmitter();
      this.__internal__autoConnectMs = autoConnectMs || 0;
      this.__internal__coder = new RpcCoder();
      this.__internal__endpointIndex = -1;
      this.__internal__endpoints = endpoints;
      this.__internal__headers = headers;
      this.__internal__websocket = null;
      this.__internal__stats = {
        active: { requests: 0, subscriptions: 0 },
        total: defaultEndpointStats()
      };
      this.__internal__endpointStats = defaultEndpointStats();
      this.__internal__timeout = timeout || DEFAULT_TIMEOUT_MS;
      if (autoConnectMs && autoConnectMs > 0) {
        this.connectWithRetry().catch(() => {
        });
      }
      this.__internal__isReadyPromise = new Promise((resolve) => {
        this.__internal__eventemitter.once("connected", () => {
          resolve(this);
        });
      });
    }
    /**
     * @summary `true` when this provider supports subscriptions
     */
    get hasSubscriptions() {
      return true;
    }
    /**
     * @summary `true` when this provider supports clone()
     */
    get isClonable() {
      return true;
    }
    /**
     * @summary Whether the node is connected or not.
     * @return {boolean} true if connected
     */
    get isConnected() {
      return this.__internal__isConnected;
    }
    /**
     * @description Promise that resolves the first time we are connected and loaded
     */
    get isReady() {
      return this.__internal__isReadyPromise;
    }
    get endpoint() {
      return this.__internal__endpoints[this.__internal__endpointIndex];
    }
    /**
     * @description Returns a clone of the object
     */
    clone() {
      return new WsProvider(this.__internal__endpoints);
    }
    selectEndpointIndex(endpoints) {
      return (this.__internal__endpointIndex + 1) % endpoints.length;
    }
    /**
     * @summary Manually connect
     * @description The [[WsProvider]] connects automatically by default, however if you decided otherwise, you may
     * connect manually using this method.
     */
    // eslint-disable-next-line @typescript-eslint/require-await
    async connect() {
      if (this.__internal__websocket) {
        throw new Error("WebSocket is already connected");
      }
      try {
        this.__internal__endpointIndex = this.selectEndpointIndex(this.__internal__endpoints);
        this.__internal__websocket = typeof xglobal.WebSocket !== "undefined" && isChildClass(xglobal.WebSocket, WebSocket) ? new WebSocket(this.endpoint) : new WebSocket(this.endpoint, void 0, {
          headers: this.__internal__headers
        });
        if (this.__internal__websocket) {
          this.__internal__websocket.onclose = this.__internal__onSocketClose;
          this.__internal__websocket.onerror = this.__internal__onSocketError;
          this.__internal__websocket.onmessage = this.__internal__onSocketMessage;
          this.__internal__websocket.onopen = this.__internal__onSocketOpen;
        }
        this.__internal__timeoutId = setInterval(() => this.__internal__timeoutHandlers(), TIMEOUT_INTERVAL);
      } catch (error) {
        l$7.error(error);
        this.__internal__emit("error", error);
        throw error;
      }
    }
    /**
     * @description Connect, never throwing an error, but rather forcing a retry
     */
    async connectWithRetry() {
      if (this.__internal__autoConnectMs > 0) {
        try {
          await this.connect();
        } catch {
          setTimeout(() => {
            this.connectWithRetry().catch(() => {
            });
          }, this.__internal__autoConnectMs);
        }
      }
    }
    /**
     * @description Manually disconnect from the connection, clearing auto-connect logic
     */
    // eslint-disable-next-line @typescript-eslint/require-await
    async disconnect() {
      this.__internal__autoConnectMs = 0;
      try {
        if (this.__internal__websocket) {
          this.__internal__websocket.close(1e3);
        }
      } catch (error) {
        l$7.error(error);
        this.__internal__emit("error", error);
        throw error;
      }
    }
    /**
     * @description Returns the connection stats
     */
    get stats() {
      return {
        active: {
          requests: Object.keys(this.__internal__handlers).length,
          subscriptions: Object.keys(this.__internal__subscriptions).length
        },
        total: this.__internal__stats.total
      };
    }
    get endpointStats() {
      return this.__internal__endpointStats;
    }
    /**
     * @summary Listens on events after having subscribed using the [[subscribe]] function.
     * @param  {ProviderInterfaceEmitted} type Event
     * @param  {ProviderInterfaceEmitCb}  sub  Callback
     * @return unsubscribe function
     */
    on(type, sub) {
      this.__internal__eventemitter.on(type, sub);
      return () => {
        this.__internal__eventemitter.removeListener(type, sub);
      };
    }
    /**
     * @summary Send JSON data using WebSockets to configured HTTP Endpoint or queue.
     * @param method The RPC methods to execute
     * @param params Encoded parameters as applicable for the method
     * @param subscription Subscription details (internally used)
     */
    send(method, params, isCacheable, subscription) {
      this.__internal__endpointStats.requests++;
      this.__internal__stats.total.requests++;
      const [id, body] = this.__internal__coder.encodeJson(method, params);
      let resultPromise = isCacheable ? this.__internal__callCache.get(body) : null;
      if (!resultPromise) {
        resultPromise = this.__internal__send(id, body, method, params, subscription);
        if (isCacheable) {
          this.__internal__callCache.set(body, resultPromise);
        }
      } else {
        this.__internal__endpointStats.cached++;
        this.__internal__stats.total.cached++;
      }
      return resultPromise;
    }
    async __internal__send(id, body, method, params, subscription) {
      return new Promise((resolve, reject) => {
        try {
          if (!this.isConnected || this.__internal__websocket === null) {
            throw new Error("WebSocket is not connected");
          }
          const callback = (error, result) => {
            error ? reject(error) : resolve(result);
          };
          l$7.debug(() => ["calling", method, body]);
          this.__internal__handlers[id] = {
            callback,
            method,
            params,
            start: Date.now(),
            subscription
          };
          const bytesSent = body.length;
          this.__internal__endpointStats.bytesSent += bytesSent;
          this.__internal__stats.total.bytesSent += bytesSent;
          this.__internal__websocket.send(body);
        } catch (error) {
          this.__internal__endpointStats.errors++;
          this.__internal__stats.total.errors++;
          reject(error);
        }
      });
    }
    /**
     * @name subscribe
     * @summary Allows subscribing to a specific event.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * const provider = new WsProvider('ws://127.0.0.1:9944');
     * const rpc = new Rpc(provider);
     *
     * rpc.state.subscribeStorage([[storage.system.account, <Address>]], (_, values) => {
     *   console.log(values)
     * }).then((subscriptionId) => {
     *   console.log('balance changes subscription id: ', subscriptionId)
     * })
     * ```
     */
    subscribe(type, method, params, callback) {
      this.__internal__endpointStats.subscriptions++;
      this.__internal__stats.total.subscriptions++;
      return this.send(method, params, false, { callback, type });
    }
    /**
     * @summary Allows unsubscribing to subscriptions made with [[subscribe]].
     */
    async unsubscribe(type, method, id) {
      const subscription = `${type}::${id}`;
      if (isUndefined$1(this.__internal__subscriptions[subscription])) {
        l$7.debug(() => `Unable to find active subscription=${subscription}`);
        return false;
      }
      delete this.__internal__subscriptions[subscription];
      try {
        return this.isConnected && !isNull(this.__internal__websocket) ? this.send(method, [id]) : true;
      } catch {
        return false;
      }
    }
  }
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  var __assign = function() {
    __assign = Object.assign || function __assign2(t) {
      for (var s, i2 = 1, n = arguments.length; i2 < n; i2++) {
        s = arguments[i2];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    return __assign.apply(this, arguments);
  };
  function __awaiter$2(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  function __generator$2(thisArg, body) {
    var _2 = { label: 0, sent: function() {
      if (t[0] & 1)
        throw t[1];
      return t[1];
    }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
      return this;
    }), g;
    function verb(n) {
      return function(v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f)
        throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_2 = 0)), _2)
        try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
            return t;
          if (y = 0, t)
            op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _2.label++;
              return { value: op[1], done: false };
            case 5:
              _2.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _2.ops.pop();
              _2.trys.pop();
              continue;
            default:
              if (!(t = _2.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _2 = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _2.label = op[1];
                break;
              }
              if (op[0] === 6 && _2.label < t[1]) {
                _2.label = t[1];
                t = op;
                break;
              }
              if (t && _2.label < t[2]) {
                _2.label = t[2];
                _2.ops.push(op);
                break;
              }
              if (t[2])
                _2.ops.pop();
              _2.trys.pop();
              continue;
          }
          op = body.call(thisArg, _2);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
      if (op[0] & 5)
        throw op[1];
      return { value: op[0] ? op[1] : void 0, done: true };
    }
  }
  function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m2 = s && o[s], i2 = 0;
    if (m2)
      return m2.call(o);
    if (o && typeof o.length === "number")
      return {
        next: function() {
          if (o && i2 >= o.length)
            o = void 0;
          return { value: o && o[i2++], done: !o };
        }
      };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __read(o, n) {
    var m2 = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m2)
      return o;
    var i2 = m2.call(o), r2, ar = [], e;
    try {
      while ((n === void 0 || n-- > 0) && !(r2 = i2.next()).done)
        ar.push(r2.value);
    } catch (error) {
      e = { error };
    } finally {
      try {
        if (r2 && !r2.done && (m2 = i2["return"]))
          m2.call(i2);
      } finally {
        if (e)
          throw e.error;
      }
    }
    return ar;
  }
  function __spreadArray$2(to, from2, pack) {
    if (pack || arguments.length === 2)
      for (var i2 = 0, l2 = from2.length, ar; i2 < l2; i2++) {
        if (ar || !(i2 in from2)) {
          if (!ar)
            ar = Array.prototype.slice.call(from2, 0, i2);
          ar[i2] = from2[i2];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from2));
  }
  function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
  }
  function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i2, q = [];
    return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
      return this;
    }, i2;
    function verb(n) {
      if (g[n])
        i2[n] = function(v) {
          return new Promise(function(a, b) {
            q.push([n, v, a, b]) > 1 || resume(n, v);
          });
        };
    }
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle2(q[0][3], e);
      }
    }
    function step(r2) {
      r2.value instanceof __await ? Promise.resolve(r2.value.v).then(fulfill, reject) : settle2(q[0][2], r2);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle2(f, v) {
      if (f(v), q.shift(), q.length)
        resume(q[0][0], q[0][1]);
    }
  }
  function __asyncValues(o) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var m2 = o[Symbol.asyncIterator], i2;
    return m2 ? m2.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
      return this;
    }, i2);
    function verb(n) {
      i2[n] = o[n] && function(v) {
        return new Promise(function(resolve, reject) {
          v = o[n](v), settle2(resolve, reject, v.done, v.value);
        });
      };
    }
    function settle2(resolve, reject, d, v) {
      Promise.resolve(v).then(function(v3) {
        resolve({ value: v3, done: d });
      }, reject);
    }
  }
  function isFunction$1(value) {
    return typeof value === "function";
  }
  function createErrorClass(createImpl) {
    var _super = function(instance2) {
      Error.call(instance2);
      instance2.stack = new Error().stack;
    };
    var ctorFunc = createImpl(_super);
    ctorFunc.prototype = Object.create(Error.prototype);
    ctorFunc.prototype.constructor = ctorFunc;
    return ctorFunc;
  }
  var UnsubscriptionError = createErrorClass(function(_super) {
    return function UnsubscriptionErrorImpl(errors) {
      _super(this);
      this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i2) {
        return i2 + 1 + ") " + err.toString();
      }).join("\n  ") : "";
      this.name = "UnsubscriptionError";
      this.errors = errors;
    };
  });
  function arrRemove(arr2, item) {
    if (arr2) {
      var index2 = arr2.indexOf(item);
      0 <= index2 && arr2.splice(index2, 1);
    }
  }
  var Subscription = function() {
    function Subscription2(initialTeardown) {
      this.initialTeardown = initialTeardown;
      this.closed = false;
      this._parentage = null;
      this._finalizers = null;
    }
    Subscription2.prototype.unsubscribe = function() {
      var e_1, _a, e_2, _b;
      var errors;
      if (!this.closed) {
        this.closed = true;
        var _parentage = this._parentage;
        if (_parentage) {
          this._parentage = null;
          if (Array.isArray(_parentage)) {
            try {
              for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                var parent_1 = _parentage_1_1.value;
                parent_1.remove(this);
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return))
                  _a.call(_parentage_1);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          } else {
            _parentage.remove(this);
          }
        }
        var initialFinalizer = this.initialTeardown;
        if (isFunction$1(initialFinalizer)) {
          try {
            initialFinalizer();
          } catch (e) {
            errors = e instanceof UnsubscriptionError ? e.errors : [e];
          }
        }
        var _finalizers = this._finalizers;
        if (_finalizers) {
          this._finalizers = null;
          try {
            for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
              var finalizer = _finalizers_1_1.value;
              try {
                execFinalizer(finalizer);
              } catch (err) {
                errors = errors !== null && errors !== void 0 ? errors : [];
                if (err instanceof UnsubscriptionError) {
                  errors = __spreadArray$2(__spreadArray$2([], __read(errors)), __read(err.errors));
                } else {
                  errors.push(err);
                }
              }
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return))
                _b.call(_finalizers_1);
            } finally {
              if (e_2)
                throw e_2.error;
            }
          }
        }
        if (errors) {
          throw new UnsubscriptionError(errors);
        }
      }
    };
    Subscription2.prototype.add = function(teardown) {
      var _a;
      if (teardown && teardown !== this) {
        if (this.closed) {
          execFinalizer(teardown);
        } else {
          if (teardown instanceof Subscription2) {
            if (teardown.closed || teardown._hasParent(this)) {
              return;
            }
            teardown._addParent(this);
          }
          (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
        }
      }
    };
    Subscription2.prototype._hasParent = function(parent) {
      var _parentage = this._parentage;
      return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
    };
    Subscription2.prototype._addParent = function(parent) {
      var _parentage = this._parentage;
      this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
    };
    Subscription2.prototype._removeParent = function(parent) {
      var _parentage = this._parentage;
      if (_parentage === parent) {
        this._parentage = null;
      } else if (Array.isArray(_parentage)) {
        arrRemove(_parentage, parent);
      }
    };
    Subscription2.prototype.remove = function(teardown) {
      var _finalizers = this._finalizers;
      _finalizers && arrRemove(_finalizers, teardown);
      if (teardown instanceof Subscription2) {
        teardown._removeParent(this);
      }
    };
    Subscription2.EMPTY = function() {
      var empty2 = new Subscription2();
      empty2.closed = true;
      return empty2;
    }();
    return Subscription2;
  }();
  var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
  function isSubscription(value) {
    return value instanceof Subscription || value && "closed" in value && isFunction$1(value.remove) && isFunction$1(value.add) && isFunction$1(value.unsubscribe);
  }
  function execFinalizer(finalizer) {
    if (isFunction$1(finalizer)) {
      finalizer();
    } else {
      finalizer.unsubscribe();
    }
  }
  var config$1 = {
    onUnhandledError: null,
    onStoppedNotification: null,
    Promise: void 0,
    useDeprecatedSynchronousErrorHandling: false,
    useDeprecatedNextContext: false
  };
  var timeoutProvider = {
    setTimeout: function(handler, timeout) {
      var args = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
      }
      var delegate = timeoutProvider.delegate;
      if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
        return delegate.setTimeout.apply(delegate, __spreadArray$2([handler, timeout], __read(args)));
      }
      return setTimeout.apply(void 0, __spreadArray$2([handler, timeout], __read(args)));
    },
    clearTimeout: function(handle) {
      var delegate = timeoutProvider.delegate;
      return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
    },
    delegate: void 0
  };
  function reportUnhandledError(err) {
    timeoutProvider.setTimeout(function() {
      {
        throw err;
      }
    });
  }
  function noop$1() {
  }
  function errorContext(cb) {
    {
      cb();
    }
  }
  var Subscriber = function(_super) {
    __extends(Subscriber2, _super);
    function Subscriber2(destination) {
      var _this = _super.call(this) || this;
      _this.isStopped = false;
      if (destination) {
        _this.destination = destination;
        if (isSubscription(destination)) {
          destination.add(_this);
        }
      } else {
        _this.destination = EMPTY_OBSERVER;
      }
      return _this;
    }
    Subscriber2.create = function(next2, error, complete) {
      return new SafeSubscriber(next2, error, complete);
    };
    Subscriber2.prototype.next = function(value) {
      if (this.isStopped)
        ;
      else {
        this._next(value);
      }
    };
    Subscriber2.prototype.error = function(err) {
      if (this.isStopped)
        ;
      else {
        this.isStopped = true;
        this._error(err);
      }
    };
    Subscriber2.prototype.complete = function() {
      if (this.isStopped)
        ;
      else {
        this.isStopped = true;
        this._complete();
      }
    };
    Subscriber2.prototype.unsubscribe = function() {
      if (!this.closed) {
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
        this.destination = null;
      }
    };
    Subscriber2.prototype._next = function(value) {
      this.destination.next(value);
    };
    Subscriber2.prototype._error = function(err) {
      try {
        this.destination.error(err);
      } finally {
        this.unsubscribe();
      }
    };
    Subscriber2.prototype._complete = function() {
      try {
        this.destination.complete();
      } finally {
        this.unsubscribe();
      }
    };
    return Subscriber2;
  }(Subscription);
  var _bind = Function.prototype.bind;
  function bind$3(fn, thisArg) {
    return _bind.call(fn, thisArg);
  }
  var ConsumerObserver = function() {
    function ConsumerObserver2(partialObserver) {
      this.partialObserver = partialObserver;
    }
    ConsumerObserver2.prototype.next = function(value) {
      var partialObserver = this.partialObserver;
      if (partialObserver.next) {
        try {
          partialObserver.next(value);
        } catch (error) {
          handleUnhandledError(error);
        }
      }
    };
    ConsumerObserver2.prototype.error = function(err) {
      var partialObserver = this.partialObserver;
      if (partialObserver.error) {
        try {
          partialObserver.error(err);
        } catch (error) {
          handleUnhandledError(error);
        }
      } else {
        handleUnhandledError(err);
      }
    };
    ConsumerObserver2.prototype.complete = function() {
      var partialObserver = this.partialObserver;
      if (partialObserver.complete) {
        try {
          partialObserver.complete();
        } catch (error) {
          handleUnhandledError(error);
        }
      }
    };
    return ConsumerObserver2;
  }();
  var SafeSubscriber = function(_super) {
    __extends(SafeSubscriber2, _super);
    function SafeSubscriber2(observerOrNext, error, complete) {
      var _this = _super.call(this) || this;
      var partialObserver;
      if (isFunction$1(observerOrNext) || !observerOrNext) {
        partialObserver = {
          next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
          error: error !== null && error !== void 0 ? error : void 0,
          complete: complete !== null && complete !== void 0 ? complete : void 0
        };
      } else {
        var context_1;
        if (_this && config$1.useDeprecatedNextContext) {
          context_1 = Object.create(observerOrNext);
          context_1.unsubscribe = function() {
            return _this.unsubscribe();
          };
          partialObserver = {
            next: observerOrNext.next && bind$3(observerOrNext.next, context_1),
            error: observerOrNext.error && bind$3(observerOrNext.error, context_1),
            complete: observerOrNext.complete && bind$3(observerOrNext.complete, context_1)
          };
        } else {
          partialObserver = observerOrNext;
        }
      }
      _this.destination = new ConsumerObserver(partialObserver);
      return _this;
    }
    return SafeSubscriber2;
  }(Subscriber);
  function handleUnhandledError(error) {
    {
      reportUnhandledError(error);
    }
  }
  function defaultErrorHandler(err) {
    throw err;
  }
  var EMPTY_OBSERVER = {
    closed: true,
    next: noop$1,
    error: defaultErrorHandler,
    complete: noop$1
  };
  var observable = function() {
    return typeof Symbol === "function" && Symbol.observable || "@@observable";
  }();
  function identity$1(x) {
    return x;
  }
  function pipeFromArray(fns) {
    if (fns.length === 0) {
      return identity$1;
    }
    if (fns.length === 1) {
      return fns[0];
    }
    return function piped(input) {
      return fns.reduce(function(prev2, fn) {
        return fn(prev2);
      }, input);
    };
  }
  var Observable = function() {
    function Observable2(subscribe) {
      if (subscribe) {
        this._subscribe = subscribe;
      }
    }
    Observable2.prototype.lift = function(operator) {
      var observable2 = new Observable2();
      observable2.source = this;
      observable2.operator = operator;
      return observable2;
    };
    Observable2.prototype.subscribe = function(observerOrNext, error, complete) {
      var _this = this;
      var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
      errorContext(function() {
        var _a = _this, operator = _a.operator, source = _a.source;
        subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
      });
      return subscriber;
    };
    Observable2.prototype._trySubscribe = function(sink) {
      try {
        return this._subscribe(sink);
      } catch (err) {
        sink.error(err);
      }
    };
    Observable2.prototype.forEach = function(next2, promiseCtor) {
      var _this = this;
      promiseCtor = getPromiseCtor(promiseCtor);
      return new promiseCtor(function(resolve, reject) {
        var subscriber = new SafeSubscriber({
          next: function(value) {
            try {
              next2(value);
            } catch (err) {
              reject(err);
              subscriber.unsubscribe();
            }
          },
          error: reject,
          complete: resolve
        });
        _this.subscribe(subscriber);
      });
    };
    Observable2.prototype._subscribe = function(subscriber) {
      var _a;
      return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
    };
    Observable2.prototype[observable] = function() {
      return this;
    };
    Observable2.prototype.pipe = function() {
      var operations = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        operations[_i] = arguments[_i];
      }
      return pipeFromArray(operations)(this);
    };
    Observable2.prototype.toPromise = function(promiseCtor) {
      var _this = this;
      promiseCtor = getPromiseCtor(promiseCtor);
      return new promiseCtor(function(resolve, reject) {
        var value;
        _this.subscribe(function(x) {
          return value = x;
        }, function(err) {
          return reject(err);
        }, function() {
          return resolve(value);
        });
      });
    };
    Observable2.create = function(subscribe) {
      return new Observable2(subscribe);
    };
    return Observable2;
  }();
  function getPromiseCtor(promiseCtor) {
    var _a;
    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config$1.Promise) !== null && _a !== void 0 ? _a : Promise;
  }
  function isObserver(value) {
    return value && isFunction$1(value.next) && isFunction$1(value.error) && isFunction$1(value.complete);
  }
  function isSubscriber(value) {
    return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
  }
  function hasLift(source) {
    return isFunction$1(source === null || source === void 0 ? void 0 : source.lift);
  }
  function operate(init2) {
    return function(source) {
      if (hasLift(source)) {
        return source.lift(function(liftedSource) {
          try {
            return init2(liftedSource, this);
          } catch (err) {
            this.error(err);
          }
        });
      }
      throw new TypeError("Unable to lift unknown Observable type");
    };
  }
  function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
  }
  var OperatorSubscriber = function(_super) {
    __extends(OperatorSubscriber2, _super);
    function OperatorSubscriber2(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
      var _this = _super.call(this, destination) || this;
      _this.onFinalize = onFinalize;
      _this.shouldUnsubscribe = shouldUnsubscribe;
      _this._next = onNext ? function(value) {
        try {
          onNext(value);
        } catch (err) {
          destination.error(err);
        }
      } : _super.prototype._next;
      _this._error = onError ? function(err) {
        try {
          onError(err);
        } catch (err2) {
          destination.error(err2);
        } finally {
          this.unsubscribe();
        }
      } : _super.prototype._error;
      _this._complete = onComplete ? function() {
        try {
          onComplete();
        } catch (err) {
          destination.error(err);
        } finally {
          this.unsubscribe();
        }
      } : _super.prototype._complete;
      return _this;
    }
    OperatorSubscriber2.prototype.unsubscribe = function() {
      var _a;
      if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
        var closed_1 = this.closed;
        _super.prototype.unsubscribe.call(this);
        !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
      }
    };
    return OperatorSubscriber2;
  }(Subscriber);
  function refCount() {
    return operate(function(source, subscriber) {
      var connection = null;
      source._refCount++;
      var refCounter = createOperatorSubscriber(subscriber, void 0, void 0, void 0, function() {
        if (!source || source._refCount <= 0 || 0 < --source._refCount) {
          connection = null;
          return;
        }
        var sharedConnection = source._connection;
        var conn = connection;
        connection = null;
        if (sharedConnection && (!conn || sharedConnection === conn)) {
          sharedConnection.unsubscribe();
        }
        subscriber.unsubscribe();
      });
      source.subscribe(refCounter);
      if (!refCounter.closed) {
        connection = source.connect();
      }
    });
  }
  var ConnectableObservable = function(_super) {
    __extends(ConnectableObservable2, _super);
    function ConnectableObservable2(source, subjectFactory) {
      var _this = _super.call(this) || this;
      _this.source = source;
      _this.subjectFactory = subjectFactory;
      _this._subject = null;
      _this._refCount = 0;
      _this._connection = null;
      if (hasLift(source)) {
        _this.lift = source.lift;
      }
      return _this;
    }
    ConnectableObservable2.prototype._subscribe = function(subscriber) {
      return this.getSubject().subscribe(subscriber);
    };
    ConnectableObservable2.prototype.getSubject = function() {
      var subject = this._subject;
      if (!subject || subject.isStopped) {
        this._subject = this.subjectFactory();
      }
      return this._subject;
    };
    ConnectableObservable2.prototype._teardown = function() {
      this._refCount = 0;
      var _connection = this._connection;
      this._subject = this._connection = null;
      _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
    };
    ConnectableObservable2.prototype.connect = function() {
      var _this = this;
      var connection = this._connection;
      if (!connection) {
        connection = this._connection = new Subscription();
        var subject_1 = this.getSubject();
        connection.add(this.source.subscribe(createOperatorSubscriber(subject_1, void 0, function() {
          _this._teardown();
          subject_1.complete();
        }, function(err) {
          _this._teardown();
          subject_1.error(err);
        }, function() {
          return _this._teardown();
        })));
        if (connection.closed) {
          this._connection = null;
          connection = Subscription.EMPTY;
        }
      }
      return connection;
    };
    ConnectableObservable2.prototype.refCount = function() {
      return refCount()(this);
    };
    return ConnectableObservable2;
  }(Observable);
  var ObjectUnsubscribedError = createErrorClass(function(_super) {
    return function ObjectUnsubscribedErrorImpl() {
      _super(this);
      this.name = "ObjectUnsubscribedError";
      this.message = "object unsubscribed";
    };
  });
  var Subject = function(_super) {
    __extends(Subject2, _super);
    function Subject2() {
      var _this = _super.call(this) || this;
      _this.closed = false;
      _this.currentObservers = null;
      _this.observers = [];
      _this.isStopped = false;
      _this.hasError = false;
      _this.thrownError = null;
      return _this;
    }
    Subject2.prototype.lift = function(operator) {
      var subject = new AnonymousSubject(this, this);
      subject.operator = operator;
      return subject;
    };
    Subject2.prototype._throwIfClosed = function() {
      if (this.closed) {
        throw new ObjectUnsubscribedError();
      }
    };
    Subject2.prototype.next = function(value) {
      var _this = this;
      errorContext(function() {
        var e_1, _a;
        _this._throwIfClosed();
        if (!_this.isStopped) {
          if (!_this.currentObservers) {
            _this.currentObservers = Array.from(_this.observers);
          }
          try {
            for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
              var observer = _c.value;
              observer.next(value);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a = _b.return))
                _a.call(_b);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        }
      });
    };
    Subject2.prototype.error = function(err) {
      var _this = this;
      errorContext(function() {
        _this._throwIfClosed();
        if (!_this.isStopped) {
          _this.hasError = _this.isStopped = true;
          _this.thrownError = err;
          var observers = _this.observers;
          while (observers.length) {
            observers.shift().error(err);
          }
        }
      });
    };
    Subject2.prototype.complete = function() {
      var _this = this;
      errorContext(function() {
        _this._throwIfClosed();
        if (!_this.isStopped) {
          _this.isStopped = true;
          var observers = _this.observers;
          while (observers.length) {
            observers.shift().complete();
          }
        }
      });
    };
    Subject2.prototype.unsubscribe = function() {
      this.isStopped = this.closed = true;
      this.observers = this.currentObservers = null;
    };
    Object.defineProperty(Subject2.prototype, "observed", {
      get: function() {
        var _a;
        return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
      },
      enumerable: false,
      configurable: true
    });
    Subject2.prototype._trySubscribe = function(subscriber) {
      this._throwIfClosed();
      return _super.prototype._trySubscribe.call(this, subscriber);
    };
    Subject2.prototype._subscribe = function(subscriber) {
      this._throwIfClosed();
      this._checkFinalizedStatuses(subscriber);
      return this._innerSubscribe(subscriber);
    };
    Subject2.prototype._innerSubscribe = function(subscriber) {
      var _this = this;
      var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
      if (hasError || isStopped) {
        return EMPTY_SUBSCRIPTION;
      }
      this.currentObservers = null;
      observers.push(subscriber);
      return new Subscription(function() {
        _this.currentObservers = null;
        arrRemove(observers, subscriber);
      });
    };
    Subject2.prototype._checkFinalizedStatuses = function(subscriber) {
      var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
      if (hasError) {
        subscriber.error(thrownError);
      } else if (isStopped) {
        subscriber.complete();
      }
    };
    Subject2.prototype.asObservable = function() {
      var observable2 = new Observable();
      observable2.source = this;
      return observable2;
    };
    Subject2.create = function(destination, source) {
      return new AnonymousSubject(destination, source);
    };
    return Subject2;
  }(Observable);
  var AnonymousSubject = function(_super) {
    __extends(AnonymousSubject2, _super);
    function AnonymousSubject2(destination, source) {
      var _this = _super.call(this) || this;
      _this.destination = destination;
      _this.source = source;
      return _this;
    }
    AnonymousSubject2.prototype.next = function(value) {
      var _a, _b;
      (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
    };
    AnonymousSubject2.prototype.error = function(err) {
      var _a, _b;
      (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
    };
    AnonymousSubject2.prototype.complete = function() {
      var _a, _b;
      (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
    AnonymousSubject2.prototype._subscribe = function(subscriber) {
      var _a, _b;
      return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
    };
    return AnonymousSubject2;
  }(Subject);
  var BehaviorSubject = function(_super) {
    __extends(BehaviorSubject2, _super);
    function BehaviorSubject2(_value) {
      var _this = _super.call(this) || this;
      _this._value = _value;
      return _this;
    }
    Object.defineProperty(BehaviorSubject2.prototype, "value", {
      get: function() {
        return this.getValue();
      },
      enumerable: false,
      configurable: true
    });
    BehaviorSubject2.prototype._subscribe = function(subscriber) {
      var subscription = _super.prototype._subscribe.call(this, subscriber);
      !subscription.closed && subscriber.next(this._value);
      return subscription;
    };
    BehaviorSubject2.prototype.getValue = function() {
      var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
      if (hasError) {
        throw thrownError;
      }
      this._throwIfClosed();
      return _value;
    };
    BehaviorSubject2.prototype.next = function(value) {
      _super.prototype.next.call(this, this._value = value);
    };
    return BehaviorSubject2;
  }(Subject);
  var dateTimestampProvider = {
    now: function() {
      return (dateTimestampProvider.delegate || Date).now();
    },
    delegate: void 0
  };
  var ReplaySubject = function(_super) {
    __extends(ReplaySubject2, _super);
    function ReplaySubject2(_bufferSize, _windowTime, _timestampProvider) {
      if (_bufferSize === void 0) {
        _bufferSize = Infinity;
      }
      if (_windowTime === void 0) {
        _windowTime = Infinity;
      }
      if (_timestampProvider === void 0) {
        _timestampProvider = dateTimestampProvider;
      }
      var _this = _super.call(this) || this;
      _this._bufferSize = _bufferSize;
      _this._windowTime = _windowTime;
      _this._timestampProvider = _timestampProvider;
      _this._buffer = [];
      _this._infiniteTimeWindow = true;
      _this._infiniteTimeWindow = _windowTime === Infinity;
      _this._bufferSize = Math.max(1, _bufferSize);
      _this._windowTime = Math.max(1, _windowTime);
      return _this;
    }
    ReplaySubject2.prototype.next = function(value) {
      var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
      if (!isStopped) {
        _buffer.push(value);
        !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
      }
      this._trimBuffer();
      _super.prototype.next.call(this, value);
    };
    ReplaySubject2.prototype._subscribe = function(subscriber) {
      this._throwIfClosed();
      this._trimBuffer();
      var subscription = this._innerSubscribe(subscriber);
      var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
      var copy2 = _buffer.slice();
      for (var i2 = 0; i2 < copy2.length && !subscriber.closed; i2 += _infiniteTimeWindow ? 1 : 2) {
        subscriber.next(copy2[i2]);
      }
      this._checkFinalizedStatuses(subscriber);
      return subscription;
    };
    ReplaySubject2.prototype._trimBuffer = function() {
      var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
      var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
      _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
      if (!_infiniteTimeWindow) {
        var now = _timestampProvider.now();
        var last2 = 0;
        for (var i2 = 1; i2 < _buffer.length && _buffer[i2] <= now; i2 += 2) {
          last2 = i2;
        }
        last2 && _buffer.splice(0, last2 + 1);
      }
    };
    return ReplaySubject2;
  }(Subject);
  var Action = function(_super) {
    __extends(Action2, _super);
    function Action2(scheduler2, work) {
      return _super.call(this) || this;
    }
    Action2.prototype.schedule = function(state, delay) {
      return this;
    };
    return Action2;
  }(Subscription);
  var intervalProvider = {
    setInterval: function(handler, timeout) {
      var args = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
      }
      var delegate = intervalProvider.delegate;
      if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
        return delegate.setInterval.apply(delegate, __spreadArray$2([handler, timeout], __read(args)));
      }
      return setInterval.apply(void 0, __spreadArray$2([handler, timeout], __read(args)));
    },
    clearInterval: function(handle) {
      var delegate = intervalProvider.delegate;
      return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
    },
    delegate: void 0
  };
  var AsyncAction = function(_super) {
    __extends(AsyncAction2, _super);
    function AsyncAction2(scheduler2, work) {
      var _this = _super.call(this, scheduler2, work) || this;
      _this.scheduler = scheduler2;
      _this.work = work;
      _this.pending = false;
      return _this;
    }
    AsyncAction2.prototype.schedule = function(state, delay) {
      var _a;
      if (delay === void 0) {
        delay = 0;
      }
      if (this.closed) {
        return this;
      }
      this.state = state;
      var id = this.id;
      var scheduler2 = this.scheduler;
      if (id != null) {
        this.id = this.recycleAsyncId(scheduler2, id, delay);
      }
      this.pending = true;
      this.delay = delay;
      this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler2, this.id, delay);
      return this;
    };
    AsyncAction2.prototype.requestAsyncId = function(scheduler2, _id, delay) {
      if (delay === void 0) {
        delay = 0;
      }
      return intervalProvider.setInterval(scheduler2.flush.bind(scheduler2, this), delay);
    };
    AsyncAction2.prototype.recycleAsyncId = function(_scheduler, id, delay) {
      if (delay === void 0) {
        delay = 0;
      }
      if (delay != null && this.delay === delay && this.pending === false) {
        return id;
      }
      if (id != null) {
        intervalProvider.clearInterval(id);
      }
      return void 0;
    };
    AsyncAction2.prototype.execute = function(state, delay) {
      if (this.closed) {
        return new Error("executing a cancelled action");
      }
      this.pending = false;
      var error = this._execute(state, delay);
      if (error) {
        return error;
      } else if (this.pending === false && this.id != null) {
        this.id = this.recycleAsyncId(this.scheduler, this.id, null);
      }
    };
    AsyncAction2.prototype._execute = function(state, _delay) {
      var errored = false;
      var errorValue;
      try {
        this.work(state);
      } catch (e) {
        errored = true;
        errorValue = e ? e : new Error("Scheduled action threw falsy error");
      }
      if (errored) {
        this.unsubscribe();
        return errorValue;
      }
    };
    AsyncAction2.prototype.unsubscribe = function() {
      if (!this.closed) {
        var _a = this, id = _a.id, scheduler2 = _a.scheduler;
        var actions = scheduler2.actions;
        this.work = this.state = this.scheduler = null;
        this.pending = false;
        arrRemove(actions, this);
        if (id != null) {
          this.id = this.recycleAsyncId(scheduler2, id, null);
        }
        this.delay = null;
        _super.prototype.unsubscribe.call(this);
      }
    };
    return AsyncAction2;
  }(Action);
  var nextHandle = 1;
  var resolved;
  var activeHandles = {};
  function findAndClearHandle(handle) {
    if (handle in activeHandles) {
      delete activeHandles[handle];
      return true;
    }
    return false;
  }
  var Immediate = {
    setImmediate: function(cb) {
      var handle = nextHandle++;
      activeHandles[handle] = true;
      if (!resolved) {
        resolved = Promise.resolve();
      }
      resolved.then(function() {
        return findAndClearHandle(handle) && cb();
      });
      return handle;
    },
    clearImmediate: function(handle) {
      findAndClearHandle(handle);
    }
  };
  var setImmediate$1 = Immediate.setImmediate, clearImmediate = Immediate.clearImmediate;
  var immediateProvider = {
    setImmediate: function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var delegate = immediateProvider.delegate;
      return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate$1).apply(void 0, __spreadArray$2([], __read(args)));
    },
    clearImmediate: function(handle) {
      var delegate = immediateProvider.delegate;
      return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
    },
    delegate: void 0
  };
  var AsapAction = function(_super) {
    __extends(AsapAction2, _super);
    function AsapAction2(scheduler2, work) {
      var _this = _super.call(this, scheduler2, work) || this;
      _this.scheduler = scheduler2;
      _this.work = work;
      return _this;
    }
    AsapAction2.prototype.requestAsyncId = function(scheduler2, id, delay) {
      if (delay === void 0) {
        delay = 0;
      }
      if (delay !== null && delay > 0) {
        return _super.prototype.requestAsyncId.call(this, scheduler2, id, delay);
      }
      scheduler2.actions.push(this);
      return scheduler2._scheduled || (scheduler2._scheduled = immediateProvider.setImmediate(scheduler2.flush.bind(scheduler2, void 0)));
    };
    AsapAction2.prototype.recycleAsyncId = function(scheduler2, id, delay) {
      var _a;
      if (delay === void 0) {
        delay = 0;
      }
      if (delay != null ? delay > 0 : this.delay > 0) {
        return _super.prototype.recycleAsyncId.call(this, scheduler2, id, delay);
      }
      var actions = scheduler2.actions;
      if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {
        immediateProvider.clearImmediate(id);
        if (scheduler2._scheduled === id) {
          scheduler2._scheduled = void 0;
        }
      }
      return void 0;
    };
    return AsapAction2;
  }(AsyncAction);
  var Scheduler = function() {
    function Scheduler2(schedulerActionCtor, now) {
      if (now === void 0) {
        now = Scheduler2.now;
      }
      this.schedulerActionCtor = schedulerActionCtor;
      this.now = now;
    }
    Scheduler2.prototype.schedule = function(work, delay, state) {
      if (delay === void 0) {
        delay = 0;
      }
      return new this.schedulerActionCtor(this, work).schedule(state, delay);
    };
    Scheduler2.now = dateTimestampProvider.now;
    return Scheduler2;
  }();
  var AsyncScheduler = function(_super) {
    __extends(AsyncScheduler2, _super);
    function AsyncScheduler2(SchedulerAction, now) {
      if (now === void 0) {
        now = Scheduler.now;
      }
      var _this = _super.call(this, SchedulerAction, now) || this;
      _this.actions = [];
      _this._active = false;
      return _this;
    }
    AsyncScheduler2.prototype.flush = function(action) {
      var actions = this.actions;
      if (this._active) {
        actions.push(action);
        return;
      }
      var error;
      this._active = true;
      do {
        if (error = action.execute(action.state, action.delay)) {
          break;
        }
      } while (action = actions.shift());
      this._active = false;
      if (error) {
        while (action = actions.shift()) {
          action.unsubscribe();
        }
        throw error;
      }
    };
    return AsyncScheduler2;
  }(Scheduler);
  var AsapScheduler = function(_super) {
    __extends(AsapScheduler2, _super);
    function AsapScheduler2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    AsapScheduler2.prototype.flush = function(action) {
      this._active = true;
      var flushId = this._scheduled;
      this._scheduled = void 0;
      var actions = this.actions;
      var error;
      action = action || actions.shift();
      do {
        if (error = action.execute(action.state, action.delay)) {
          break;
        }
      } while ((action = actions[0]) && action.id === flushId && actions.shift());
      this._active = false;
      if (error) {
        while ((action = actions[0]) && action.id === flushId && actions.shift()) {
          action.unsubscribe();
        }
        throw error;
      }
    };
    return AsapScheduler2;
  }(AsyncScheduler);
  var asapScheduler = new AsapScheduler(AsapAction);
  var EMPTY = new Observable(function(subscriber) {
    return subscriber.complete();
  });
  function isScheduler(value) {
    return value && isFunction$1(value.schedule);
  }
  function last(arr2) {
    return arr2[arr2.length - 1];
  }
  function popResultSelector(args) {
    return isFunction$1(last(args)) ? args.pop() : void 0;
  }
  function popScheduler(args) {
    return isScheduler(last(args)) ? args.pop() : void 0;
  }
  var isArrayLike = function(x) {
    return x && typeof x.length === "number" && typeof x !== "function";
  };
  function isPromise$1(value) {
    return isFunction$1(value === null || value === void 0 ? void 0 : value.then);
  }
  function isInteropObservable(input) {
    return isFunction$1(input[observable]);
  }
  function isAsyncIterable(obj) {
    return Symbol.asyncIterator && isFunction$1(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
  }
  function createInvalidObservableTypeError(input) {
    return new TypeError("You provided " + (input !== null && typeof input === "object" ? "an invalid object" : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
  }
  function getSymbolIterator() {
    if (typeof Symbol !== "function" || !Symbol.iterator) {
      return "@@iterator";
    }
    return Symbol.iterator;
  }
  var iterator = getSymbolIterator();
  function isIterable(input) {
    return isFunction$1(input === null || input === void 0 ? void 0 : input[iterator]);
  }
  function readableStreamLikeToAsyncGenerator(readableStream) {
    return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
      var reader, _a, value, done;
      return __generator$2(this, function(_b) {
        switch (_b.label) {
          case 0:
            reader = readableStream.getReader();
            _b.label = 1;
          case 1:
            _b.trys.push([1, , 9, 10]);
            _b.label = 2;
          case 2:
            return [4, __await(reader.read())];
          case 3:
            _a = _b.sent(), value = _a.value, done = _a.done;
            if (!done)
              return [3, 5];
            return [4, __await(void 0)];
          case 4:
            return [2, _b.sent()];
          case 5:
            return [4, __await(value)];
          case 6:
            return [4, _b.sent()];
          case 7:
            _b.sent();
            return [3, 2];
          case 8:
            return [3, 10];
          case 9:
            reader.releaseLock();
            return [7];
          case 10:
            return [2];
        }
      });
    });
  }
  function isReadableStreamLike(obj) {
    return isFunction$1(obj === null || obj === void 0 ? void 0 : obj.getReader);
  }
  function innerFrom(input) {
    if (input instanceof Observable) {
      return input;
    }
    if (input != null) {
      if (isInteropObservable(input)) {
        return fromInteropObservable(input);
      }
      if (isArrayLike(input)) {
        return fromArrayLike(input);
      }
      if (isPromise$1(input)) {
        return fromPromise(input);
      }
      if (isAsyncIterable(input)) {
        return fromAsyncIterable(input);
      }
      if (isIterable(input)) {
        return fromIterable(input);
      }
      if (isReadableStreamLike(input)) {
        return fromReadableStreamLike(input);
      }
    }
    throw createInvalidObservableTypeError(input);
  }
  function fromInteropObservable(obj) {
    return new Observable(function(subscriber) {
      var obs = obj[observable]();
      if (isFunction$1(obs.subscribe)) {
        return obs.subscribe(subscriber);
      }
      throw new TypeError("Provided object does not correctly implement Symbol.observable");
    });
  }
  function fromArrayLike(array) {
    return new Observable(function(subscriber) {
      for (var i2 = 0; i2 < array.length && !subscriber.closed; i2++) {
        subscriber.next(array[i2]);
      }
      subscriber.complete();
    });
  }
  function fromPromise(promise) {
    return new Observable(function(subscriber) {
      promise.then(function(value) {
        if (!subscriber.closed) {
          subscriber.next(value);
          subscriber.complete();
        }
      }, function(err) {
        return subscriber.error(err);
      }).then(null, reportUnhandledError);
    });
  }
  function fromIterable(iterable) {
    return new Observable(function(subscriber) {
      var e_1, _a;
      try {
        for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
          var value = iterable_1_1.value;
          subscriber.next(value);
          if (subscriber.closed) {
            return;
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))
            _a.call(iterable_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      subscriber.complete();
    });
  }
  function fromAsyncIterable(asyncIterable) {
    return new Observable(function(subscriber) {
      process$1(asyncIterable, subscriber).catch(function(err) {
        return subscriber.error(err);
      });
    });
  }
  function fromReadableStreamLike(readableStream) {
    return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
  }
  function process$1(asyncIterable, subscriber) {
    var asyncIterable_1, asyncIterable_1_1;
    var e_2, _a;
    return __awaiter$2(this, void 0, void 0, function() {
      var value, e_2_1;
      return __generator$2(this, function(_b) {
        switch (_b.label) {
          case 0:
            _b.trys.push([0, 5, 6, 11]);
            asyncIterable_1 = __asyncValues(asyncIterable);
            _b.label = 1;
          case 1:
            return [4, asyncIterable_1.next()];
          case 2:
            if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done))
              return [3, 4];
            value = asyncIterable_1_1.value;
            subscriber.next(value);
            if (subscriber.closed) {
              return [2];
            }
            _b.label = 3;
          case 3:
            return [3, 1];
          case 4:
            return [3, 11];
          case 5:
            e_2_1 = _b.sent();
            e_2 = { error: e_2_1 };
            return [3, 11];
          case 6:
            _b.trys.push([6, , 9, 10]);
            if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return)))
              return [3, 8];
            return [4, _a.call(asyncIterable_1)];
          case 7:
            _b.sent();
            _b.label = 8;
          case 8:
            return [3, 10];
          case 9:
            if (e_2)
              throw e_2.error;
            return [7];
          case 10:
            return [7];
          case 11:
            subscriber.complete();
            return [2];
        }
      });
    });
  }
  function executeSchedule(parentSubscription, scheduler2, work, delay, repeat) {
    if (delay === void 0) {
      delay = 0;
    }
    if (repeat === void 0) {
      repeat = false;
    }
    var scheduleSubscription = scheduler2.schedule(function() {
      work();
      if (repeat) {
        parentSubscription.add(this.schedule(null, delay));
      } else {
        this.unsubscribe();
      }
    }, delay);
    parentSubscription.add(scheduleSubscription);
    if (!repeat) {
      return scheduleSubscription;
    }
  }
  function observeOn(scheduler2, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    return operate(function(source, subscriber) {
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        return executeSchedule(subscriber, scheduler2, function() {
          return subscriber.next(value);
        }, delay);
      }, function() {
        return executeSchedule(subscriber, scheduler2, function() {
          return subscriber.complete();
        }, delay);
      }, function(err) {
        return executeSchedule(subscriber, scheduler2, function() {
          return subscriber.error(err);
        }, delay);
      }));
    });
  }
  function subscribeOn(scheduler2, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    return operate(function(source, subscriber) {
      subscriber.add(scheduler2.schedule(function() {
        return source.subscribe(subscriber);
      }, delay));
    });
  }
  function scheduleObservable(input, scheduler2) {
    return innerFrom(input).pipe(subscribeOn(scheduler2), observeOn(scheduler2));
  }
  function schedulePromise(input, scheduler2) {
    return innerFrom(input).pipe(subscribeOn(scheduler2), observeOn(scheduler2));
  }
  function scheduleArray(input, scheduler2) {
    return new Observable(function(subscriber) {
      var i2 = 0;
      return scheduler2.schedule(function() {
        if (i2 === input.length) {
          subscriber.complete();
        } else {
          subscriber.next(input[i2++]);
          if (!subscriber.closed) {
            this.schedule();
          }
        }
      });
    });
  }
  function scheduleIterable(input, scheduler2) {
    return new Observable(function(subscriber) {
      var iterator$1;
      executeSchedule(subscriber, scheduler2, function() {
        iterator$1 = input[iterator]();
        executeSchedule(subscriber, scheduler2, function() {
          var _a;
          var value;
          var done;
          try {
            _a = iterator$1.next(), value = _a.value, done = _a.done;
          } catch (err) {
            subscriber.error(err);
            return;
          }
          if (done) {
            subscriber.complete();
          } else {
            subscriber.next(value);
          }
        }, 0, true);
      });
      return function() {
        return isFunction$1(iterator$1 === null || iterator$1 === void 0 ? void 0 : iterator$1.return) && iterator$1.return();
      };
    });
  }
  function scheduleAsyncIterable(input, scheduler2) {
    if (!input) {
      throw new Error("Iterable cannot be null");
    }
    return new Observable(function(subscriber) {
      executeSchedule(subscriber, scheduler2, function() {
        var iterator2 = input[Symbol.asyncIterator]();
        executeSchedule(subscriber, scheduler2, function() {
          iterator2.next().then(function(result) {
            if (result.done) {
              subscriber.complete();
            } else {
              subscriber.next(result.value);
            }
          });
        }, 0, true);
      });
    });
  }
  function scheduleReadableStreamLike(input, scheduler2) {
    return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler2);
  }
  function scheduled(input, scheduler2) {
    if (input != null) {
      if (isInteropObservable(input)) {
        return scheduleObservable(input, scheduler2);
      }
      if (isArrayLike(input)) {
        return scheduleArray(input, scheduler2);
      }
      if (isPromise$1(input)) {
        return schedulePromise(input, scheduler2);
      }
      if (isAsyncIterable(input)) {
        return scheduleAsyncIterable(input, scheduler2);
      }
      if (isIterable(input)) {
        return scheduleIterable(input, scheduler2);
      }
      if (isReadableStreamLike(input)) {
        return scheduleReadableStreamLike(input, scheduler2);
      }
    }
    throw createInvalidObservableTypeError(input);
  }
  function from$1(input, scheduler2) {
    return scheduler2 ? scheduled(input, scheduler2) : innerFrom(input);
  }
  function of() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var scheduler2 = popScheduler(args);
    return from$1(args, scheduler2);
  }
  var EmptyError = createErrorClass(function(_super) {
    return function EmptyErrorImpl() {
      _super(this);
      this.name = "EmptyError";
      this.message = "no elements in sequence";
    };
  });
  function firstValueFrom(source, config2) {
    var hasConfig = typeof config2 === "object";
    return new Promise(function(resolve, reject) {
      var subscriber = new SafeSubscriber({
        next: function(value) {
          resolve(value);
          subscriber.unsubscribe();
        },
        error: reject,
        complete: function() {
          if (hasConfig) {
            resolve(config2.defaultValue);
          } else {
            reject(new EmptyError());
          }
        }
      });
      source.subscribe(subscriber);
    });
  }
  function map(project, thisArg) {
    return operate(function(source, subscriber) {
      var index2 = 0;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        subscriber.next(project.call(thisArg, value, index2++));
      }));
    });
  }
  var isArray$2 = Array.isArray;
  function callOrApply(fn, args) {
    return isArray$2(args) ? fn.apply(void 0, __spreadArray$2([], __read(args))) : fn(args);
  }
  function mapOneOrManyArgs(fn) {
    return map(function(args) {
      return callOrApply(fn, args);
    });
  }
  var isArray$1 = Array.isArray;
  var getPrototypeOf = Object.getPrototypeOf, objectProto = Object.prototype, getKeys = Object.keys;
  function argsArgArrayOrObject(args) {
    if (args.length === 1) {
      var first_1 = args[0];
      if (isArray$1(first_1)) {
        return { args: first_1, keys: null };
      }
      if (isPOJO(first_1)) {
        var keys2 = getKeys(first_1);
        return {
          args: keys2.map(function(key) {
            return first_1[key];
          }),
          keys: keys2
        };
      }
    }
    return { args, keys: null };
  }
  function isPOJO(obj) {
    return obj && typeof obj === "object" && getPrototypeOf(obj) === objectProto;
  }
  function createObject(keys2, values2) {
    return keys2.reduce(function(result, key, i2) {
      return result[key] = values2[i2], result;
    }, {});
  }
  function combineLatest() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var scheduler2 = popScheduler(args);
    var resultSelector = popResultSelector(args);
    var _a = argsArgArrayOrObject(args), observables = _a.args, keys2 = _a.keys;
    if (observables.length === 0) {
      return from$1([], scheduler2);
    }
    var result = new Observable(combineLatestInit(observables, scheduler2, keys2 ? function(values2) {
      return createObject(keys2, values2);
    } : identity$1));
    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
  }
  function combineLatestInit(observables, scheduler2, valueTransform) {
    if (valueTransform === void 0) {
      valueTransform = identity$1;
    }
    return function(subscriber) {
      maybeSchedule(scheduler2, function() {
        var length2 = observables.length;
        var values2 = new Array(length2);
        var active = length2;
        var remainingFirstValues = length2;
        var _loop_1 = function(i3) {
          maybeSchedule(scheduler2, function() {
            var source = from$1(observables[i3], scheduler2);
            var hasFirstValue = false;
            source.subscribe(createOperatorSubscriber(subscriber, function(value) {
              values2[i3] = value;
              if (!hasFirstValue) {
                hasFirstValue = true;
                remainingFirstValues--;
              }
              if (!remainingFirstValues) {
                subscriber.next(valueTransform(values2.slice()));
              }
            }, function() {
              if (!--active) {
                subscriber.complete();
              }
            }));
          }, subscriber);
        };
        for (var i2 = 0; i2 < length2; i2++) {
          _loop_1(i2);
        }
      }, subscriber);
    };
  }
  function maybeSchedule(scheduler2, execute, subscription) {
    if (scheduler2) {
      executeSchedule(subscription, scheduler2, execute);
    } else {
      execute();
    }
  }
  function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand2, innerSubScheduler, additionalFinalizer) {
    var buffer = [];
    var active = 0;
    var index2 = 0;
    var isComplete = false;
    var checkComplete = function() {
      if (isComplete && !buffer.length && !active) {
        subscriber.complete();
      }
    };
    var outerNext = function(value) {
      return active < concurrent ? doInnerSub(value) : buffer.push(value);
    };
    var doInnerSub = function(value) {
      expand2 && subscriber.next(value);
      active++;
      var innerComplete = false;
      innerFrom(project(value, index2++)).subscribe(createOperatorSubscriber(subscriber, function(innerValue) {
        onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
        if (expand2) {
          outerNext(innerValue);
        } else {
          subscriber.next(innerValue);
        }
      }, function() {
        innerComplete = true;
      }, void 0, function() {
        if (innerComplete) {
          try {
            active--;
            var _loop_1 = function() {
              var bufferedValue = buffer.shift();
              if (innerSubScheduler) {
                executeSchedule(subscriber, innerSubScheduler, function() {
                  return doInnerSub(bufferedValue);
                });
              } else {
                doInnerSub(bufferedValue);
              }
            };
            while (buffer.length && active < concurrent) {
              _loop_1();
            }
            checkComplete();
          } catch (err) {
            subscriber.error(err);
          }
        }
      }));
    };
    source.subscribe(createOperatorSubscriber(subscriber, outerNext, function() {
      isComplete = true;
      checkComplete();
    }));
    return function() {
      additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
    };
  }
  function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) {
      concurrent = Infinity;
    }
    if (isFunction$1(resultSelector)) {
      return mergeMap(function(a, i2) {
        return map(function(b, ii) {
          return resultSelector(a, b, i2, ii);
        })(innerFrom(project(a, i2)));
      }, concurrent);
    } else if (typeof resultSelector === "number") {
      concurrent = resultSelector;
    }
    return operate(function(source, subscriber) {
      return mergeInternals(source, subscriber, project, concurrent);
    });
  }
  function mergeAll(concurrent) {
    if (concurrent === void 0) {
      concurrent = Infinity;
    }
    return mergeMap(identity$1, concurrent);
  }
  function concatAll() {
    return mergeAll(1);
  }
  function concat() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    return concatAll()(from$1(args, popScheduler(args)));
  }
  function filter(predicate, thisArg) {
    return operate(function(source, subscriber) {
      var index2 = 0;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        return predicate.call(thisArg, value, index2++) && subscriber.next(value);
      }));
    });
  }
  function catchError(selector) {
    return operate(function(source, subscriber) {
      var innerSub = null;
      var syncUnsub = false;
      var handledResult;
      innerSub = source.subscribe(createOperatorSubscriber(subscriber, void 0, void 0, function(err) {
        handledResult = innerFrom(selector(err, catchError(selector)(source)));
        if (innerSub) {
          innerSub.unsubscribe();
          innerSub = null;
          handledResult.subscribe(subscriber);
        } else {
          syncUnsub = true;
        }
      }));
      if (syncUnsub) {
        innerSub.unsubscribe();
        innerSub = null;
        handledResult.subscribe(subscriber);
      }
    });
  }
  function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
    return function(source, subscriber) {
      var hasState = hasSeed;
      var state = seed;
      var index2 = 0;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        var i2 = index2++;
        state = hasState ? accumulator(state, value, i2) : (hasState = true, value);
        emitOnNext && subscriber.next(state);
      }, emitBeforeComplete && function() {
        hasState && subscriber.next(state);
        subscriber.complete();
      }));
    };
  }
  function reduce(accumulator, seed) {
    return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));
  }
  var arrReducer = function(arr2, value) {
    return arr2.push(value), arr2;
  };
  function toArray$1() {
    return operate(function(source, subscriber) {
      reduce(arrReducer, [])(source).subscribe(subscriber);
    });
  }
  function fromSubscribable(subscribable) {
    return new Observable(function(subscriber) {
      return subscribable.subscribe(subscriber);
    });
  }
  var DEFAULT_CONFIG = {
    connector: function() {
      return new Subject();
    }
  };
  function connect(selector, config2) {
    if (config2 === void 0) {
      config2 = DEFAULT_CONFIG;
    }
    var connector = config2.connector;
    return operate(function(source, subscriber) {
      var subject = connector();
      innerFrom(selector(fromSubscribable(subject))).subscribe(subscriber);
      subscriber.add(source.subscribe(subject));
    });
  }
  function defaultIfEmpty(defaultValue) {
    return operate(function(source, subscriber) {
      var hasValue = false;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        hasValue = true;
        subscriber.next(value);
      }, function() {
        if (!hasValue) {
          subscriber.next(defaultValue);
        }
        subscriber.complete();
      }));
    });
  }
  function take(count) {
    return count <= 0 ? function() {
      return EMPTY;
    } : operate(function(source, subscriber) {
      var seen = 0;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        if (++seen <= count) {
          subscriber.next(value);
          if (count <= seen) {
            subscriber.complete();
          }
        }
      }));
    });
  }
  function distinctUntilChanged(comparator, keySelector) {
    if (keySelector === void 0) {
      keySelector = identity$1;
    }
    comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
    return operate(function(source, subscriber) {
      var previousKey;
      var first2 = true;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        var currentKey = keySelector(value);
        if (first2 || !comparator(previousKey, currentKey)) {
          first2 = false;
          previousKey = currentKey;
          subscriber.next(value);
        }
      }));
    });
  }
  function defaultCompare(a, b) {
    return a === b;
  }
  function throwIfEmpty(errorFactory) {
    if (errorFactory === void 0) {
      errorFactory = defaultErrorFactory;
    }
    return operate(function(source, subscriber) {
      var hasValue = false;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        hasValue = true;
        subscriber.next(value);
      }, function() {
        return hasValue ? subscriber.complete() : subscriber.error(errorFactory());
      }));
    });
  }
  function defaultErrorFactory() {
    return new EmptyError();
  }
  function first(predicate, defaultValue) {
    var hasDefaultValue = arguments.length >= 2;
    return function(source) {
      return source.pipe(predicate ? filter(function(v, i2) {
        return predicate(v, i2, source);
      }) : identity$1, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function() {
        return new EmptyError();
      }));
    };
  }
  function multicast(subjectOrSubjectFactory, selector) {
    var subjectFactory = isFunction$1(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function() {
      return subjectOrSubjectFactory;
    };
    if (isFunction$1(selector)) {
      return connect(selector, {
        connector: subjectFactory
      });
    }
    return function(source) {
      return new ConnectableObservable(source, subjectFactory);
    };
  }
  function publishReplay(bufferSize, windowTime, selectorOrScheduler, timestampProvider) {
    if (selectorOrScheduler && !isFunction$1(selectorOrScheduler)) {
      timestampProvider = selectorOrScheduler;
    }
    var selector = isFunction$1(selectorOrScheduler) ? selectorOrScheduler : void 0;
    return function(source) {
      return multicast(new ReplaySubject(bufferSize, windowTime, timestampProvider), selector)(source);
    };
  }
  function startWith() {
    var values2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      values2[_i] = arguments[_i];
    }
    var scheduler2 = popScheduler(values2);
    return operate(function(source, subscriber) {
      (scheduler2 ? concat(values2, source, scheduler2) : concat(values2, source)).subscribe(subscriber);
    });
  }
  function switchMap(project, resultSelector) {
    return operate(function(source, subscriber) {
      var innerSubscriber = null;
      var index2 = 0;
      var isComplete = false;
      var checkComplete = function() {
        return isComplete && !innerSubscriber && subscriber.complete();
      };
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
        var innerIndex = 0;
        var outerIndex = index2++;
        innerFrom(project(value, outerIndex)).subscribe(innerSubscriber = createOperatorSubscriber(subscriber, function(innerValue) {
          return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue);
        }, function() {
          innerSubscriber = null;
          checkComplete();
        }));
      }, function() {
        isComplete = true;
        checkComplete();
      }));
    });
  }
  function tap(observerOrNext, error, complete) {
    var tapObserver = isFunction$1(observerOrNext) || error || complete ? { next: observerOrNext, error, complete } : observerOrNext;
    return tapObserver ? operate(function(source, subscriber) {
      var _a;
      (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
      var isUnsub = true;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        var _a2;
        (_a2 = tapObserver.next) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver, value);
        subscriber.next(value);
      }, function() {
        var _a2;
        isUnsub = false;
        (_a2 = tapObserver.complete) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
        subscriber.complete();
      }, function(err) {
        var _a2;
        isUnsub = false;
        (_a2 = tapObserver.error) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver, err);
        subscriber.error(err);
      }, function() {
        var _a2, _b;
        if (isUnsub) {
          (_a2 = tapObserver.unsubscribe) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
        }
        (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
      }));
    }) : identity$1;
  }
  const l$6 = /* @__PURE__ */ logger("api/util");
  function filterEvents(txHash, { block: { extrinsics, header } }, allEvents, status) {
    for (const [txIndex, x] of extrinsics.entries()) {
      if (x.hash.eq(txHash)) {
        return {
          blockNumber: isCompact(header.number) ? header.number.unwrap() : header.number,
          events: allEvents.filter(({ phase }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eqn(txIndex)),
          txIndex
        };
      }
    }
    if (status.isInBlock) {
      const allHashes = extrinsics.map((x) => x.hash.toHex());
      l$6.warn(`block ${header.hash.toHex()}: Unable to find extrinsic ${txHash.toHex()} inside ${allHashes.join(", ")}`);
    }
    return {};
  }
  function isKeyringPair(account2) {
    return isFunction$2(account2.sign);
  }
  function refCountDelay(delay = 1750) {
    return (source) => {
      let [state, refCount2, connection, scheduler2] = [0, 0, Subscription.EMPTY, Subscription.EMPTY];
      return new Observable((ob) => {
        source.subscribe(ob);
        if (refCount2++ === 0) {
          if (state === 1) {
            scheduler2.unsubscribe();
          } else {
            connection = source.connect();
          }
          state = 3;
        }
        return () => {
          if (--refCount2 === 0) {
            if (state === 2) {
              state = 0;
              scheduler2.unsubscribe();
            } else {
              state = 1;
              scheduler2 = asapScheduler.schedule(() => {
                state = 0;
                connection.unsubscribe();
              }, delay);
            }
          }
        };
      });
    };
  }
  function CMP(a, b) {
    return stringify$1({ t: a }) === stringify$1({ t: b });
  }
  function ERR(error) {
    throw error;
  }
  function NOOP() {
  }
  function drr({ delay, skipChange = false, skipTimeout = false } = {}) {
    return (source$) => source$.pipe(
      catchError(ERR),
      skipChange ? tap(NOOP) : distinctUntilChanged(CMP),
      // eslint-disable-next-line deprecation/deprecation
      publishReplay(1),
      skipTimeout ? refCount() : refCountDelay(delay)
    );
  }
  function memo(instanceId, inner) {
    const options = { getInstanceId: () => instanceId };
    const cached = memoize$2((...params) => new Observable((observer) => {
      const subscription = inner(...params).subscribe(observer);
      return () => {
        cached.unmemoize(...params);
        subscription.unsubscribe();
      };
    }).pipe(drr()), options);
    return cached;
  }
  const l$5 = logger("rpc-core");
  const EMPTY_META = {
    fallback: void 0,
    modifier: { isOptional: true },
    type: {
      asMap: { linked: { isTrue: false } },
      isMap: false
    }
  };
  function logErrorMessage(method, { noErrorLog, params, type }, error) {
    if (noErrorLog) {
      return;
    }
    l$5.error(`${method}(${params.map(({ isOptional, name, type: type2 }) => `${name}${isOptional ? "?" : ""}: ${type2}`).join(", ")}): ${type}:: ${error.message}`);
  }
  function isTreatAsHex(key) {
    return ["0x3a636f6465"].includes(key.toHex());
  }
  class RpcCore {
    /**
     * @constructor
     * Default constructor for the core RPC handler
     * @param  {ProviderInterface} provider An API provider using any of the supported providers (HTTP, SC or WebSocket)
     */
    constructor(instanceId, registry, { isPedantic = true, provider, userRpc = {} }) {
      this.__internal__storageCache = /* @__PURE__ */ new Map();
      this.mapping = /* @__PURE__ */ new Map();
      this.sections = [];
      if (!provider || !isFunction$2(provider.send)) {
        throw new Error("Expected Provider to API create");
      }
      this.__internal__instanceId = instanceId;
      this.__internal__isPedantic = isPedantic;
      this.__internal__registryDefault = registry;
      this.provider = provider;
      const sectionNames = Object.keys(rpcDefinitions);
      this.sections.push(...sectionNames);
      this.addUserInterfaces(userRpc);
    }
    /**
     * @description Returns the connected status of a provider
     */
    get isConnected() {
      return this.provider.isConnected;
    }
    /**
     * @description Manually connect from the attached provider
     */
    connect() {
      return this.provider.connect();
    }
    /**
     * @description Manually disconnect from the attached provider
     */
    disconnect() {
      return this.provider.disconnect();
    }
    /**
     * @description Sets a registry swap (typically from Api)
     */
    setRegistrySwap(registrySwap) {
      this.__internal__getBlockRegistry = memoize$2(registrySwap, {
        getInstanceId: () => this.__internal__instanceId
      });
    }
    /**
     * @description Sets a function to resolve block hash from block number
     */
    setResolveBlockHash(resolveBlockHash) {
      this.__internal__getBlockHash = memoize$2(resolveBlockHash, {
        getInstanceId: () => this.__internal__instanceId
      });
    }
    addUserInterfaces(userRpc) {
      this.sections.push(...Object.keys(userRpc).filter((k) => !this.sections.includes(k)));
      for (let s = 0, scount = this.sections.length; s < scount; s++) {
        const section2 = this.sections[s];
        const defs = objectSpread({}, rpcDefinitions[section2], userRpc[section2]);
        const methods = Object.keys(defs);
        for (let m2 = 0, mcount = methods.length; m2 < mcount; m2++) {
          const method = methods[m2];
          const def = defs[method];
          const jsonrpc2 = def.endpoint || `${section2}_${method}`;
          if (!this.mapping.has(jsonrpc2)) {
            const isSubscription2 = !!def.pubsub;
            if (!this[section2]) {
              this[section2] = {};
            }
            this.mapping.set(jsonrpc2, objectSpread({}, def, { isSubscription: isSubscription2, jsonrpc: jsonrpc2, method, section: section2 }));
            lazyMethod(this[section2], method, () => isSubscription2 ? this._createMethodSubscribe(section2, method, def) : this._createMethodSend(section2, method, def));
          }
        }
      }
    }
    _memomize(creator, def) {
      const memoOpts = { getInstanceId: () => this.__internal__instanceId };
      const memoized = memoize$2(creator(true), memoOpts);
      memoized.raw = memoize$2(creator(false), memoOpts);
      memoized.meta = def;
      return memoized;
    }
    _formatResult(isScale, registry, blockHash, method, def, params, result) {
      return isScale ? this._formatOutput(registry, blockHash, method, def, params, result) : result;
    }
    _createMethodSend(section2, method, def) {
      const rpcName = def.endpoint || `${section2}_${method}`;
      const hashIndex = def.params.findIndex(({ isHistoric }) => isHistoric);
      let memoized = null;
      const callWithRegistry = async (isScale, values2) => {
        var _a;
        const blockId = hashIndex === -1 ? null : values2[hashIndex];
        const blockHash = blockId && def.params[hashIndex].type === "BlockNumber" ? await ((_a = this.__internal__getBlockHash) == null ? void 0 : _a.call(this, blockId)) : blockId;
        const { registry } = isScale && blockHash && this.__internal__getBlockRegistry ? await this.__internal__getBlockRegistry(u8aToU8a(blockHash)) : { registry: this.__internal__registryDefault };
        const params = this._formatParams(registry, null, def, values2);
        const result = await this.provider.send(rpcName, params.map((p) => p.toJSON()), !!blockHash);
        return this._formatResult(isScale, registry, blockHash, method, def, params, result);
      };
      const creator = (isScale) => (...values2) => {
        const isDelayed = isScale && hashIndex !== -1 && !!values2[hashIndex];
        return new Observable((observer) => {
          callWithRegistry(isScale, values2).then((value) => {
            observer.next(value);
            observer.complete();
          }).catch((error) => {
            logErrorMessage(method, def, error);
            observer.error(error);
            observer.complete();
          });
          return () => {
            if (isScale) {
              memoized == null ? void 0 : memoized.unmemoize(...values2);
            } else {
              memoized == null ? void 0 : memoized.raw.unmemoize(...values2);
            }
          };
        }).pipe(
          // eslint-disable-next-line deprecation/deprecation
          publishReplay(1),
          // create a Replay(1)
          isDelayed ? refCountDelay() : refCount()
        );
      };
      memoized = this._memomize(creator, def);
      return memoized;
    }
    // create a subscriptor, it subscribes once and resolves with the id as subscribe
    _createSubscriber({ paramsJson, subName, subType, update }, errorHandler) {
      return new Promise((resolve, reject) => {
        this.provider.subscribe(subType, subName, paramsJson, update).then(resolve).catch((error) => {
          errorHandler(error);
          reject(error);
        });
      });
    }
    _createMethodSubscribe(section2, method, def) {
      const [updateType, subMethod, unsubMethod] = def.pubsub;
      const subName = `${section2}_${subMethod}`;
      const unsubName = `${section2}_${unsubMethod}`;
      const subType = `${section2}_${updateType}`;
      let memoized = null;
      const creator = (isScale) => (...values2) => {
        return new Observable((observer) => {
          let subscriptionPromise = Promise.resolve(null);
          const registry = this.__internal__registryDefault;
          const errorHandler = (error) => {
            logErrorMessage(method, def, error);
            observer.error(error);
          };
          try {
            const params = this._formatParams(registry, null, def, values2);
            const update = (error, result) => {
              if (error) {
                logErrorMessage(method, def, error);
                return;
              }
              try {
                observer.next(this._formatResult(isScale, registry, null, method, def, params, result));
              } catch (error2) {
                observer.error(error2);
              }
            };
            subscriptionPromise = this._createSubscriber({ paramsJson: params.map((p) => p.toJSON()), subName, subType, update }, errorHandler);
          } catch (error) {
            errorHandler(error);
          }
          return () => {
            if (isScale) {
              memoized == null ? void 0 : memoized.unmemoize(...values2);
            } else {
              memoized == null ? void 0 : memoized.raw.unmemoize(...values2);
            }
            subscriptionPromise.then((subscriptionId) => isNull(subscriptionId) ? Promise.resolve(false) : this.provider.unsubscribe(subType, unsubName, subscriptionId)).catch((error) => logErrorMessage(method, def, error));
          };
        }).pipe(drr());
      };
      memoized = this._memomize(creator, def);
      return memoized;
    }
    _formatParams(registry, blockHash, def, inputs) {
      const count = inputs.length;
      const reqCount = def.params.filter(({ isOptional }) => !isOptional).length;
      if (count < reqCount || count > def.params.length) {
        throw new Error(`Expected ${def.params.length} parameters${reqCount === def.params.length ? "" : ` (${def.params.length - reqCount} optional)`}, ${count} found instead`);
      }
      const params = new Array(count);
      for (let i2 = 0; i2 < count; i2++) {
        params[i2] = registry.createTypeUnsafe(def.params[i2].type, [inputs[i2]], { blockHash });
      }
      return params;
    }
    _formatOutput(registry, blockHash, method, rpc2, params, result) {
      if (rpc2.type === "StorageData") {
        const key = params[0];
        return this._formatStorageData(registry, blockHash, key, result);
      } else if (rpc2.type === "StorageChangeSet") {
        const keys2 = params[0];
        return keys2 ? this._formatStorageSet(registry, result.block, keys2, result.changes) : registry.createType("StorageChangeSet", result);
      } else if (rpc2.type === "Vec<StorageChangeSet>") {
        const jsonSet = result;
        const count = jsonSet.length;
        const mapped = new Array(count);
        for (let i2 = 0; i2 < count; i2++) {
          const { block, changes } = jsonSet[i2];
          mapped[i2] = [
            registry.createType("BlockHash", block),
            this._formatStorageSet(registry, block, params[0], changes)
          ];
        }
        return method === "queryStorageAt" ? mapped[0][1] : mapped;
      }
      return registry.createTypeUnsafe(rpc2.type, [result], { blockHash });
    }
    _formatStorageData(registry, blockHash, key, value) {
      const isEmpty2 = isNull(value);
      const input = isEmpty2 ? null : isTreatAsHex(key) ? value : u8aToU8a(value);
      return this._newType(registry, blockHash, key, input, isEmpty2);
    }
    _formatStorageSet(registry, blockHash, keys2, changes) {
      const count = keys2.length;
      const withCache = count !== 1;
      const values2 = new Array(count);
      for (let i2 = 0; i2 < count; i2++) {
        values2[i2] = this._formatStorageSetEntry(registry, blockHash, keys2[i2], changes, withCache, i2);
      }
      return values2;
    }
    _formatStorageSetEntry(registry, blockHash, key, changes, withCache, entryIndex) {
      const hexKey = key.toHex();
      const found = changes.find(([key2]) => key2 === hexKey);
      const isNotFound = isUndefined$1(found);
      if (isNotFound && withCache) {
        const cached = this.__internal__storageCache.get(hexKey);
        if (cached) {
          return cached;
        }
      }
      const value = isNotFound ? null : found[1];
      const isEmpty2 = isNull(value);
      const input = isEmpty2 || isTreatAsHex(key) ? value : u8aToU8a(value);
      const codec = this._newType(registry, blockHash, key, input, isEmpty2, entryIndex);
      this.__internal__storageCache.set(hexKey, codec);
      return codec;
    }
    _newType(registry, blockHash, key, input, isEmpty2, entryIndex = -1) {
      const type = key.outputType || "Raw";
      const meta = key.meta || EMPTY_META;
      const entryNum = entryIndex === -1 ? "" : ` entry ${entryIndex}:`;
      try {
        return registry.createTypeUnsafe(type, [
          isEmpty2 ? meta.fallback ? type.includes("Linkage<") ? u8aConcat(hexToU8a(meta.fallback.toHex()), new Uint8Array(2)) : hexToU8a(meta.fallback.toHex()) : void 0 : meta.modifier.isOptional ? registry.createTypeUnsafe(type, [input], { blockHash, isPedantic: this.__internal__isPedantic }) : input
        ], { blockHash, isFallback: isEmpty2 && !!meta.fallback, isOptional: meta.modifier.isOptional, isPedantic: this.__internal__isPedantic && !meta.modifier.isOptional });
      } catch (error) {
        throw new Error(`Unable to decode storage ${key.section || "unknown"}.${key.method || "unknown"}:${entryNum}: ${error.message}`);
      }
    }
  }
  function unwrapBlockNumber(hdr) {
    return isCompact(hdr.number) ? hdr.number.unwrap() : hdr.number;
  }
  const deriveNoopCache = {
    del: () => void 0,
    forEach: () => void 0,
    get: () => void 0,
    set: (_2, value) => value
  };
  const CHACHE_EXPIRY = 7 * (24 * 60) * (60 * 1e3);
  let deriveCache;
  function wrapCache(keyStart, cache) {
    return {
      del: (partial) => cache.del(`${keyStart}${partial}`),
      forEach: cache.forEach,
      get: (partial) => {
        const key = `${keyStart}${partial}`;
        const cached = cache.get(key);
        if (cached) {
          cached.x = Date.now();
          cache.set(key, cached);
          return cached.v;
        }
        return void 0;
      },
      set: (partial, v) => {
        cache.set(`${keyStart}${partial}`, { v, x: Date.now() });
      }
    };
  }
  function clearCache(cache) {
    const now = Date.now();
    const all2 = [];
    cache.forEach((key, { x }) => {
      now - x > CHACHE_EXPIRY && all2.push(key);
    });
    all2.forEach((key) => cache.del(key));
  }
  function setDeriveCache(prefix2 = "", cache) {
    deriveCache = cache ? wrapCache(`derive:${prefix2}:`, cache) : deriveNoopCache;
    if (cache) {
      clearCache(cache);
    }
  }
  setDeriveCache();
  function firstObservable(obs) {
    return obs.pipe(map(([a]) => a));
  }
  function firstMemo(fn) {
    return (instanceId, api) => memo(instanceId, (...args) => firstObservable(fn(api, ...args)));
  }
  function lazyDeriveSection(result, section2, getKeys2, creator) {
    lazyMethod(result, section2, () => lazyMethods({}, getKeys2(section2), (method) => creator(section2, method)));
  }
  function accountId(instanceId, api) {
    return memo(instanceId, (address) => {
      const decoded = isU8a(address) ? address : decodeAddress((address || "").toString());
      if (decoded.length > 8) {
        return of(api.registry.createType("AccountId", decoded));
      }
      const accountIndex = api.registry.createType("AccountIndex", decoded);
      return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map((a) => assertReturn(a, "Unable to retrieve accountId")));
    });
  }
  function parseFlags(address, [electionsMembers, councilMembers, technicalCommitteeMembers, societyMembers, sudoKey]) {
    const addrStr = address && address.toString();
    const isIncluded = (id) => id.toString() === addrStr;
    return {
      isCouncil: ((electionsMembers == null ? void 0 : electionsMembers.map((r2) => Array.isArray(r2) ? r2[0] : r2.who)) || councilMembers || []).some(isIncluded),
      isSociety: (societyMembers || []).some(isIncluded),
      isSudo: (sudoKey == null ? void 0 : sudoKey.toString()) === addrStr,
      isTechCommittee: (technicalCommitteeMembers || []).some(isIncluded)
    };
  }
  function _flags(instanceId, api) {
    return memo(instanceId, () => {
      var _a, _b, _c, _d, _e;
      const results = [void 0, [], [], [], void 0];
      const calls = [
        (_a = api.query.elections || api.query["phragmenElection"] || api.query["electionsPhragmen"]) == null ? void 0 : _a.members,
        (_b = api.query.council) == null ? void 0 : _b.members,
        (_c = api.query.technicalCommittee) == null ? void 0 : _c.members,
        (_d = api.query.society) == null ? void 0 : _d.members,
        (_e = api.query.sudo) == null ? void 0 : _e.key
      ];
      const filtered = calls.filter((c) => c);
      if (!filtered.length) {
        return of(results);
      }
      return api.queryMulti(filtered).pipe(map((values2) => {
        let resultIndex = -1;
        for (let i2 = 0, count = calls.length; i2 < count; i2++) {
          if (isFunction$2(calls[i2])) {
            results[i2] = values2[++resultIndex];
          }
        }
        return results;
      }));
    });
  }
  function flags(instanceId, api) {
    return memo(instanceId, (address) => api.derive.accounts._flags().pipe(map((r2) => parseFlags(address, r2))));
  }
  function idAndIndex(instanceId, api) {
    return memo(instanceId, (address) => {
      try {
        const decoded = isU8a(address) ? address : decodeAddress((address || "").toString());
        if (decoded.length > 8) {
          const accountId2 = api.registry.createType("AccountId", decoded);
          return api.derive.accounts.idToIndex(accountId2).pipe(map((accountIndex2) => [accountId2, accountIndex2]));
        }
        const accountIndex = api.registry.createType("AccountIndex", decoded);
        return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map((accountId2) => [accountId2, accountIndex]));
      } catch {
        return of([void 0, void 0]);
      }
    });
  }
  const UNDEF_HEX = { toHex: () => void 0 };
  function dataAsString(data2) {
    return data2.isRaw ? u8aToString(data2.asRaw.toU8a(true)) : data2.isNone ? void 0 : data2.toHex();
  }
  function extractOther(additional) {
    return additional.reduce((other, [_key, _value]) => {
      const key = dataAsString(_key);
      const value = dataAsString(_value);
      if (key && value) {
        other[key] = value;
      }
      return other;
    }, {});
  }
  function extractIdentity(identityOfOpt, superOf) {
    if (!(identityOfOpt == null ? void 0 : identityOfOpt.isSome)) {
      return { judgements: [] };
    }
    const { info: info2, judgements } = identityOfOpt.unwrap();
    const topDisplay = dataAsString(info2.display);
    return {
      display: superOf && dataAsString(superOf[1]) || topDisplay,
      displayParent: superOf && topDisplay,
      email: dataAsString(info2.email),
      image: dataAsString(info2.image),
      judgements,
      legal: dataAsString(info2.legal),
      other: extractOther(info2.additional),
      parent: superOf && superOf[0],
      pgp: info2.pgpFingerprint.unwrapOr(UNDEF_HEX).toHex(),
      riot: dataAsString(info2.riot),
      twitter: dataAsString(info2.twitter),
      web: dataAsString(info2.web)
    };
  }
  function getParent(api, identityOfOpt, superOfOpt) {
    if (identityOfOpt == null ? void 0 : identityOfOpt.isSome) {
      return of([identityOfOpt, void 0]);
    } else if (superOfOpt == null ? void 0 : superOfOpt.isSome) {
      const superOf = superOfOpt.unwrap();
      return combineLatest([
        api.derive.accounts._identity(superOf[0]).pipe(map(([info2]) => info2)),
        of(superOf)
      ]);
    }
    return of([void 0, void 0]);
  }
  function _identity(instanceId, api) {
    return memo(instanceId, (accountId2) => {
      var _a;
      return accountId2 && ((_a = api.query.identity) == null ? void 0 : _a.identityOf) ? combineLatest([
        api.query.identity.identityOf(accountId2),
        api.query.identity.superOf(accountId2)
      ]) : of([void 0, void 0]);
    });
  }
  function identity(instanceId, api) {
    return memo(instanceId, (accountId2) => api.derive.accounts._identity(accountId2).pipe(switchMap(([identityOfOpt, superOfOpt]) => getParent(api, identityOfOpt, superOfOpt)), map(([identityOfOpt, superOf]) => extractIdentity(identityOfOpt, superOf))));
  }
  const hasIdentity = /* @__PURE__ */ firstMemo((api, accountId2) => api.derive.accounts.hasIdentityMulti([accountId2]));
  function hasIdentityMulti(instanceId, api) {
    return memo(instanceId, (accountIds) => {
      var _a;
      return ((_a = api.query.identity) == null ? void 0 : _a.identityOf) ? combineLatest([
        api.query.identity.identityOf.multi(accountIds),
        api.query.identity.superOf.multi(accountIds)
      ]).pipe(map(([identities, supers]) => identities.map((identityOfOpt, index2) => {
        const superOfOpt = supers[index2];
        const parentId = superOfOpt && superOfOpt.isSome ? superOfOpt.unwrap()[0].toString() : void 0;
        let display;
        if (identityOfOpt && identityOfOpt.isSome) {
          const value = dataAsString(identityOfOpt.unwrap().info.display);
          if (value && !isHex(value)) {
            display = value;
          }
        }
        return { display, hasIdentity: !!(display || parentId), parentId };
      }))) : of(accountIds.map(() => ({ hasIdentity: false })));
    });
  }
  function idToIndex(instanceId, api) {
    return memo(instanceId, (accountId2) => api.derive.accounts.indexes().pipe(map((indexes2) => (indexes2 || {})[accountId2.toString()])));
  }
  let indicesCache = null;
  function queryAccounts(api) {
    return api.query.indices.accounts.entries().pipe(map((entries) => entries.reduce((indexes2, [key, idOpt]) => {
      if (idOpt.isSome) {
        indexes2[idOpt.unwrap()[0].toString()] = api.registry.createType("AccountIndex", key.args[0]);
      }
      return indexes2;
    }, {})));
  }
  function indexes$1(instanceId, api) {
    return memo(instanceId, () => indicesCache ? of(indicesCache) : (api.query.indices ? queryAccounts(api).pipe(startWith({})) : of({})).pipe(map((indices) => {
      indicesCache = indices;
      return indices;
    })));
  }
  function indexToId(instanceId, api) {
    return memo(instanceId, (accountIndex) => api.query.indices ? api.query.indices.accounts(accountIndex).pipe(map((optResult) => optResult.unwrapOr([])[0])) : of(void 0));
  }
  function retrieveNick(api, accountId2) {
    var _a;
    return (accountId2 && ((_a = api.query["nicks"]) == null ? void 0 : _a["nameOf"]) ? api.query["nicks"]["nameOf"](accountId2) : of(void 0)).pipe(map((nameOf) => (nameOf == null ? void 0 : nameOf.isSome) ? u8aToString(nameOf.unwrap()[0]).substring(0, api.consts["nicks"]["maxLength"].toNumber()) : void 0));
  }
  function info$4(instanceId, api) {
    return memo(instanceId, (address) => api.derive.accounts.idAndIndex(address).pipe(switchMap(([accountId2, accountIndex]) => combineLatest([
      of({ accountId: accountId2, accountIndex }),
      api.derive.accounts.identity(accountId2),
      retrieveNick(api, accountId2)
    ])), map(([{ accountId: accountId2, accountIndex }, identity2, nickname]) => ({
      accountId: accountId2,
      accountIndex,
      identity: identity2,
      nickname
    }))));
  }
  const accounts$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    _flags,
    _identity,
    accountId,
    flags,
    hasIdentity,
    hasIdentityMulti,
    idAndIndex,
    idToIndex,
    identity,
    indexToId,
    indexes: indexes$1,
    info: info$4
  }, Symbol.toStringTag, { value: "Module" }));
  function getInstance(api, section2) {
    const instances = api.registry.getModuleInstances(api.runtimeVersion.specName, section2);
    const name = instances && instances.length ? instances[0] : section2;
    return api.query[name];
  }
  function withSection(section2, fn) {
    return (instanceId, api) => memo(instanceId, fn(getInstance(api, section2), api, instanceId));
  }
  function callMethod(method, empty2) {
    return (section2) => withSection(section2, (query2) => () => isFunction$2(query2 == null ? void 0 : query2[method]) ? query2[method]() : of(empty2));
  }
  const members$5 = /* @__PURE__ */ callMethod("members", []);
  function prime$4(section2) {
    return withSection(section2, (query2) => () => isFunction$2(query2 == null ? void 0 : query2.prime) ? query2.prime().pipe(map((o) => o.unwrapOr(null))) : of(null));
  }
  function parse$5(api, [hashes, proposals2, votes2]) {
    return proposals2.map((o, index2) => ({
      hash: api.registry.createType("Hash", hashes[index2]),
      proposal: o && o.isSome ? o.unwrap() : null,
      votes: votes2[index2].unwrapOr(null)
    }));
  }
  function _proposalsFrom(api, query2, hashes) {
    return (isFunction$2(query2 == null ? void 0 : query2.proposals) && hashes.length ? combineLatest([
      of(hashes),
      // this should simply be api.query[section].proposalOf.multi<Option<Proposal>>(hashes),
      // however we have had cases on Edgeware where the indices have moved around after an
      // upgrade, which results in invalid on-chain data
      query2.proposalOf.multi(hashes).pipe(catchError(() => of(hashes.map(() => null)))),
      query2.voting.multi(hashes)
    ]) : of([[], [], []])).pipe(map((r2) => parse$5(api, r2)));
  }
  function hasProposals$4(section2) {
    return withSection(section2, (query2) => () => of(isFunction$2(query2 == null ? void 0 : query2.proposals)));
  }
  function proposals$6(section2) {
    return withSection(section2, (query2, api) => () => api.derive[section2].proposalHashes().pipe(switchMap((all2) => _proposalsFrom(api, query2, all2))));
  }
  function proposal$4(section2) {
    return withSection(section2, (query2, api) => (hash2) => isFunction$2(query2 == null ? void 0 : query2.proposals) ? firstObservable(_proposalsFrom(api, query2, [hash2])) : of(null));
  }
  const proposalCount$4 = /* @__PURE__ */ callMethod("proposalCount", null);
  const proposalHashes$4 = /* @__PURE__ */ callMethod("proposals", []);
  const members$4 = /* @__PURE__ */ members$5("allianceMotion");
  const hasProposals$3 = /* @__PURE__ */ hasProposals$4("allianceMotion");
  const proposal$3 = /* @__PURE__ */ proposal$4("allianceMotion");
  const proposalCount$3 = /* @__PURE__ */ proposalCount$4("allianceMotion");
  const proposalHashes$3 = /* @__PURE__ */ proposalHashes$4("allianceMotion");
  const proposals$5 = /* @__PURE__ */ proposals$6("allianceMotion");
  const prime$3 = /* @__PURE__ */ prime$4("allianceMotion");
  const alliance = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    hasProposals: hasProposals$3,
    members: members$4,
    prime: prime$3,
    proposal: proposal$3,
    proposalCount: proposalCount$3,
    proposalHashes: proposalHashes$3,
    proposals: proposals$5
  }, Symbol.toStringTag, { value: "Module" }));
  function getQueryInterface(api) {
    return (
      // latest substrate & polkadot
      api.query.voterList || // previous substrate
      api.query["voterBagsList"] || api.query["bagsList"]
    );
  }
  function orderBags(ids, bags) {
    const sorted = ids.map((id, index2) => ({
      bag: bags[index2].unwrapOr(null),
      id,
      key: id.toString()
    })).sort((a, b) => b.id.cmp(a.id));
    const max2 = sorted.length - 1;
    return sorted.map((entry, index2) => objectSpread(entry, {
      bagLower: index2 === max2 ? BN_ZERO : sorted[index2 + 1].id,
      bagUpper: entry.id,
      index: index2
    }));
  }
  function _getIds(instanceId, api) {
    const query2 = getQueryInterface(api);
    return memo(instanceId, (_ids) => {
      const ids = _ids.map((id) => bnToBn(id));
      return ids.length ? query2.listBags.multi(ids).pipe(map((bags) => orderBags(ids, bags))) : of([]);
    });
  }
  function all$1(instanceId, api) {
    const query2 = getQueryInterface(api);
    return memo(instanceId, () => query2.listBags.keys().pipe(switchMap((keys2) => api.derive.bagsList._getIds(keys2.map(({ args: [id] }) => id))), map((list) => list.filter(({ bag }) => bag))));
  }
  function get$1(instanceId, api) {
    return memo(instanceId, (id) => api.derive.bagsList._getIds([bnToBn(id)]).pipe(map((bags) => bags[0])));
  }
  function expand(instanceId, api) {
    return memo(instanceId, (bag) => api.derive.bagsList.listNodes(bag.bag).pipe(map((nodes) => objectSpread({ nodes }, bag))));
  }
  function getExpanded(instanceId, api) {
    return memo(instanceId, (id) => api.derive.bagsList.get(id).pipe(switchMap((bag) => api.derive.bagsList.expand(bag))));
  }
  function traverseLinks(api, head) {
    const subject = new BehaviorSubject(head);
    const query2 = getQueryInterface(api);
    return subject.pipe(
      switchMap((account2) => query2.listNodes(account2)),
      tap((node2) => {
        nextTick(() => {
          node2.isSome && node2.value.next.isSome ? subject.next(node2.unwrap().next.unwrap()) : subject.complete();
        });
      }),
      toArray$1(),
      // toArray since we want to startSubject to be completed
      map((all2) => all2.map((o) => o.unwrap()))
    );
  }
  function listNodes(instanceId, api) {
    return memo(instanceId, (bag) => bag && bag.head.isSome ? traverseLinks(api, bag.head.unwrap()) : of([]));
  }
  const bagsList = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    _getIds,
    all: all$1,
    expand,
    get: get$1,
    getExpanded,
    listNodes
  }, Symbol.toStringTag, { value: "Module" }));
  const VESTING_ID = "0x76657374696e6720";
  function calcLocked(api, bestNumber2, locks2) {
    let lockedBalance = api.registry.createType("Balance");
    let lockedBreakdown = [];
    let vestingLocked = api.registry.createType("Balance");
    let allLocked = false;
    if (Array.isArray(locks2)) {
      lockedBreakdown = locks2.filter(({ until }) => !until || bestNumber2 && until.gt(bestNumber2));
      allLocked = lockedBreakdown.some(({ amount }) => amount && amount.isMax());
      vestingLocked = api.registry.createType("Balance", lockedBreakdown.filter(({ id }) => id.eq(VESTING_ID)).reduce((result, { amount }) => result.iadd(amount), new BN(0)));
      const notAll = lockedBreakdown.filter(({ amount }) => amount && !amount.isMax());
      if (notAll.length) {
        lockedBalance = api.registry.createType("Balance", bnMax(...notAll.map(({ amount }) => amount)));
      }
    }
    return { allLocked, lockedBalance, lockedBreakdown, vestingLocked };
  }
  function calcShared(api, bestNumber2, data2, locks2) {
    const { allLocked, lockedBalance, lockedBreakdown, vestingLocked } = calcLocked(api, bestNumber2, locks2);
    return objectSpread({}, data2, {
      availableBalance: api.registry.createType("Balance", allLocked ? 0 : bnMax(new BN(0), (data2 == null ? void 0 : data2.freeBalance) ? data2.freeBalance.sub(lockedBalance) : new BN(0))),
      lockedBalance,
      lockedBreakdown,
      vestingLocked
    });
  }
  function calcVesting(bestNumber2, shared, _vesting) {
    const vesting = _vesting || [];
    const isVesting = !shared.vestingLocked.isZero();
    const vestedBalances = vesting.map(({ locked, perBlock, startingBlock }) => bestNumber2.gt(startingBlock) ? bnMin(locked, perBlock.mul(bestNumber2.sub(startingBlock))) : BN_ZERO);
    const vestedBalance = vestedBalances.reduce((all2, value) => all2.iadd(value), new BN(0));
    const vestingTotal = vesting.reduce((all2, { locked }) => all2.iadd(locked), new BN(0));
    return {
      isVesting,
      vestedBalance,
      vestedClaimable: isVesting ? shared.vestingLocked.sub(vestingTotal.sub(vestedBalance)) : BN_ZERO,
      vesting: vesting.map(({ locked, perBlock, startingBlock }, index2) => ({
        endBlock: locked.div(perBlock).iadd(startingBlock),
        locked,
        perBlock,
        startingBlock,
        vested: vestedBalances[index2]
      })).filter(({ locked }) => !locked.isZero()),
      vestingTotal
    };
  }
  function calcBalances$1(api, result) {
    const [data2, [vesting, allLocks, namedReserves], bestNumber2] = result;
    const shared = calcShared(api, bestNumber2, data2, allLocks[0]);
    return objectSpread(shared, calcVesting(bestNumber2, shared, vesting), {
      accountId: data2.accountId,
      accountNonce: data2.accountNonce,
      additional: allLocks.slice(1).map((l2, index2) => calcShared(api, bestNumber2, data2.additional[index2], l2)),
      namedReserves
    });
  }
  function queryOld(api, accountId2) {
    return combineLatest([
      api.query.balances.locks(accountId2),
      api.query.balances["vesting"](accountId2)
    ]).pipe(map(([locks2, optVesting]) => {
      let vestingNew = null;
      if (optVesting.isSome) {
        const { offset: locked, perBlock, startingBlock } = optVesting.unwrap();
        vestingNew = api.registry.createType("VestingInfo", { locked, perBlock, startingBlock });
      }
      return [
        vestingNew ? [vestingNew] : null,
        [locks2],
        []
      ];
    }));
  }
  const isNonNullable = (nullable) => !!nullable;
  function createCalls(calls) {
    return [
      calls.map((c) => !c),
      calls.filter(isNonNullable)
    ];
  }
  function queryCurrent(api, accountId2, balanceInstances = ["balances"]) {
    var _a;
    const [lockEmpty, lockQueries] = createCalls(balanceInstances.map((m2) => {
      var _a2, _b;
      return ((_a2 = api.derive[m2]) == null ? void 0 : _a2.customLocks) || ((_b = api.query[m2]) == null ? void 0 : _b.locks);
    }));
    const [reserveEmpty, reserveQueries] = createCalls(balanceInstances.map((m2) => {
      var _a2;
      return (_a2 = api.query[m2]) == null ? void 0 : _a2.reserves;
    }));
    return combineLatest([
      ((_a = api.query.vesting) == null ? void 0 : _a.vesting) ? api.query.vesting.vesting(accountId2) : of(api.registry.createType("Option<VestingInfo>")),
      lockQueries.length ? combineLatest(lockQueries.map((c) => c(accountId2))) : of([]),
      reserveQueries.length ? combineLatest(reserveQueries.map((c) => c(accountId2))) : of([])
    ]).pipe(map(([opt, locks2, reserves]) => {
      let offsetLock = -1;
      let offsetReserve = -1;
      const vesting = opt.unwrapOr(null);
      return [
        vesting ? Array.isArray(vesting) ? vesting : [vesting] : null,
        lockEmpty.map((e) => e ? api.registry.createType("Vec<BalanceLock>") : locks2[++offsetLock]),
        reserveEmpty.map((e) => e ? api.registry.createType("Vec<PalletBalancesReserveData>") : reserves[++offsetReserve])
      ];
    }));
  }
  function all(instanceId, api) {
    const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, "balances");
    return memo(instanceId, (address) => {
      var _a, _b;
      return combineLatest([
        api.derive.balances.account(address),
        isFunction$2((_a = api.query.system) == null ? void 0 : _a.account) || isFunction$2((_b = api.query.balances) == null ? void 0 : _b.account) ? queryCurrent(api, address, balanceInstances) : queryOld(api, address)
      ]).pipe(switchMap(([account2, locks2]) => combineLatest([
        of(account2),
        of(locks2),
        api.derive.chain.bestNumber()
      ])), map((result) => calcBalances$1(api, result)));
    });
  }
  function zeroBalance(api) {
    return api.registry.createType("Balance");
  }
  function getBalance(api, [freeBalance, reservedBalance, frozenFee, frozenMisc]) {
    const votingBalance2 = api.registry.createType("Balance", freeBalance.toBn());
    return {
      freeBalance,
      frozenFee,
      frozenMisc,
      reservedBalance,
      votingBalance: votingBalance2
    };
  }
  function calcBalances(api, [accountId2, [accountNonce, [primary, ...additional]]]) {
    return objectSpread({
      accountId: accountId2,
      accountNonce,
      additional: additional.map((b) => getBalance(api, b))
    }, getBalance(api, primary));
  }
  function queryBalancesFree(api, accountId2) {
    return combineLatest([
      api.query.balances["freeBalance"](accountId2),
      api.query.balances["reservedBalance"](accountId2),
      api.query.system["accountNonce"](accountId2)
    ]).pipe(map(([freeBalance, reservedBalance, accountNonce]) => [
      accountNonce,
      [[freeBalance, reservedBalance, zeroBalance(api), zeroBalance(api)]]
    ]));
  }
  function queryNonceOnly(api, accountId2) {
    const fill = (nonce) => [
      nonce,
      [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]
    ];
    return isFunction$2(api.query.system.account) ? api.query.system.account(accountId2).pipe(map(({ nonce }) => fill(nonce))) : isFunction$2(api.query.system["accountNonce"]) ? api.query.system["accountNonce"](accountId2).pipe(map((nonce) => fill(nonce))) : of(fill(api.registry.createType("Index")));
  }
  function queryBalancesAccount(api, accountId2, modules = ["balances"]) {
    const balances2 = modules.map((m2) => {
      var _a, _b;
      return ((_a = api.derive[m2]) == null ? void 0 : _a.customAccount) || ((_b = api.query[m2]) == null ? void 0 : _b.account);
    }).filter((q) => isFunction$2(q));
    const extract = (nonce, data2) => [
      nonce,
      data2.map(({ feeFrozen, free, miscFrozen, reserved }) => [free, reserved, feeFrozen, miscFrozen])
    ];
    return balances2.length ? isFunction$2(api.query.system.account) ? combineLatest([
      api.query.system.account(accountId2),
      ...balances2.map((c) => c(accountId2))
    ]).pipe(map(([{ nonce }, ...balances3]) => extract(nonce, balances3))) : combineLatest([
      api.query.system["accountNonce"](accountId2),
      ...balances2.map((c) => c(accountId2))
    ]).pipe(map(([nonce, ...balances3]) => extract(nonce, balances3))) : queryNonceOnly(api, accountId2);
  }
  function querySystemAccount(api, accountId2) {
    return api.query.system.account(accountId2).pipe(map((infoOrTuple) => {
      const data2 = infoOrTuple.nonce ? infoOrTuple.data : infoOrTuple[1];
      const nonce = infoOrTuple.nonce || infoOrTuple[0];
      if (!data2 || data2.isEmpty) {
        return [
          nonce,
          [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]
        ];
      }
      const { feeFrozen, free, miscFrozen, reserved } = data2;
      return [
        nonce,
        [[free, reserved, feeFrozen, miscFrozen]]
      ];
    }));
  }
  function account$1(instanceId, api) {
    const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, "balances");
    const nonDefaultBalances = balanceInstances && balanceInstances[0] !== "balances";
    return memo(instanceId, (address) => api.derive.accounts.accountId(address).pipe(switchMap((accountId2) => {
      var _a, _b, _c;
      return accountId2 ? combineLatest([
        of(accountId2),
        nonDefaultBalances ? queryBalancesAccount(api, accountId2, balanceInstances) : isFunction$2((_a = api.query.system) == null ? void 0 : _a.account) ? querySystemAccount(api, accountId2) : isFunction$2((_b = api.query.balances) == null ? void 0 : _b.account) ? queryBalancesAccount(api, accountId2) : isFunction$2((_c = api.query.balances) == null ? void 0 : _c["freeBalance"]) ? queryBalancesFree(api, accountId2) : queryNonceOnly(api, accountId2)
      ]) : of([api.registry.createType("AccountId"), [
        api.registry.createType("Index"),
        [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]
      ]]);
    }), map((result) => calcBalances(api, result))));
  }
  function votingBalances(instanceId, api) {
    return memo(instanceId, (addresses) => !addresses || !addresses.length ? of([]) : combineLatest(addresses.map((accountId2) => api.derive.balances.account(accountId2))));
  }
  const votingBalance = all;
  const balances = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    account: account$1,
    all,
    votingBalance,
    votingBalances
  }, Symbol.toStringTag, { value: "Module" }));
  function filterBountiesProposals(api, allProposals) {
    const bountyTxBase = api.tx.bounties ? api.tx.bounties : api.tx.treasury;
    const bountyProposalCalls = [bountyTxBase.approveBounty, bountyTxBase.closeBounty, bountyTxBase.proposeCurator, bountyTxBase.unassignCurator];
    return allProposals.filter((proposal2) => bountyProposalCalls.find((bountyCall) => proposal2.proposal && bountyCall.is(proposal2.proposal)));
  }
  function parseResult$2([maybeBounties, maybeDescriptions, ids, bountyProposals]) {
    const bounties2 = [];
    maybeBounties.forEach((bounty, index2) => {
      if (bounty.isSome) {
        bounties2.push({
          bounty: bounty.unwrap(),
          description: maybeDescriptions[index2].unwrapOrDefault().toUtf8(),
          index: ids[index2],
          proposals: bountyProposals.filter((bountyProposal) => bountyProposal.proposal && ids[index2].eq(bountyProposal.proposal.args[0]))
        });
      }
    });
    return bounties2;
  }
  function bounties$1(instanceId, api) {
    const bountyBase = api.query.bounties || api.query.treasury;
    return memo(instanceId, () => bountyBase.bounties ? combineLatest([
      bountyBase.bountyCount(),
      api.query.council ? api.query.council.proposalCount() : of(0)
    ]).pipe(switchMap(() => combineLatest([
      bountyBase.bounties.keys(),
      api.derive.council ? api.derive.council.proposals() : of([])
    ])), switchMap(([keys2, proposals2]) => {
      const ids = keys2.map(({ args: [id] }) => id);
      return combineLatest([
        bountyBase.bounties.multi(ids),
        bountyBase.bountyDescriptions.multi(ids),
        of(ids),
        of(filterBountiesProposals(api, proposals2))
      ]);
    }), map(parseResult$2)) : of(parseResult$2([[], [], [], []])));
  }
  const bounties = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    bounties: bounties$1
  }, Symbol.toStringTag, { value: "Module" }));
  function createBlockNumberDerive(fn) {
    return (instanceId, api) => memo(instanceId, () => fn(api).pipe(map(unwrapBlockNumber)));
  }
  function getAuthorDetailsWithAt(header, queryAt) {
    var _a, _b, _c, _d;
    const validators2 = ((_a = queryAt.session) == null ? void 0 : _a.validators) ? queryAt.session.validators() : of(null);
    const { logs: [log] } = header.digest;
    const loggedAuthor = log && (log.isConsensus && log.asConsensus[0].isNimbus && log.asConsensus[1] || log.isPreRuntime && log.asPreRuntime[0].isNimbus && log.asPreRuntime[1]);
    if (loggedAuthor) {
      if ((_b = queryAt["authorMapping"]) == null ? void 0 : _b["mappingWithDeposit"]) {
        return combineLatest([
          of(header),
          validators2,
          queryAt["authorMapping"]["mappingWithDeposit"](loggedAuthor).pipe(map((o) => o.unwrapOr({ account: null }).account))
        ]);
      }
      if (((_c = queryAt["parachainStaking"]) == null ? void 0 : _c["selectedCandidates"]) && ((_d = queryAt.session) == null ? void 0 : _d.nextKeys)) {
        const loggedHex = loggedAuthor.toHex();
        return combineLatest([
          of(header),
          validators2,
          queryAt["parachainStaking"]["selectedCandidates"]().pipe(mergeMap((selectedCandidates) => combineLatest([
            of(selectedCandidates),
            queryAt.session.nextKeys.multi(selectedCandidates).pipe(map((nextKeys) => nextKeys.findIndex((o) => o.unwrapOrDefault().nimbus.toHex() === loggedHex)))
          ])), map(([selectedCandidates, index2]) => index2 === -1 ? null : selectedCandidates[index2]))
        ]);
      }
    }
    return combineLatest([
      of(header),
      validators2,
      of(null)
    ]);
  }
  function getAuthorDetails(api, header, blockHash) {
    return api.queryAt(header.parentHash.isEmpty ? blockHash || header.hash : header.parentHash).pipe(switchMap((queryAt) => getAuthorDetailsWithAt(header, queryAt)));
  }
  const bestNumber = /* @__PURE__ */ createBlockNumberDerive((api) => api.rpc.chain.subscribeNewHeads());
  const bestNumberFinalized = /* @__PURE__ */ createBlockNumberDerive((api) => api.rpc.chain.subscribeFinalizedHeads());
  function bestNumberLag(instanceId, api) {
    return memo(instanceId, () => combineLatest([
      api.derive.chain.bestNumber(),
      api.derive.chain.bestNumberFinalized()
    ]).pipe(map(([bestNumber2, bestNumberFinalized2]) => api.registry.createType("BlockNumber", bestNumber2.sub(bestNumberFinalized2)))));
  }
  function extractAuthor(digest, sessionValidators) {
    const [citem] = digest.logs.filter((e) => e.isConsensus);
    const [pitem] = digest.logs.filter((e) => e.isPreRuntime);
    const [sitem] = digest.logs.filter((e) => e.isSeal);
    let accountId2;
    try {
      if (pitem) {
        const [engine, data2] = pitem.asPreRuntime;
        accountId2 = engine.extractAuthor(data2, sessionValidators);
      }
      if (!accountId2 && citem) {
        const [engine, data2] = citem.asConsensus;
        accountId2 = engine.extractAuthor(data2, sessionValidators);
      }
      if (!accountId2 && sitem) {
        const [engine, data2] = sitem.asSeal;
        accountId2 = engine.extractAuthor(data2, sessionValidators);
      }
    } catch {
    }
    return accountId2;
  }
  function createHeaderExtended(registry, header, validators2, author) {
    const HeaderBase = registry.createClass("Header");
    class Implementation extends HeaderBase {
      constructor(registry2, header2, validators3, author2) {
        super(registry2, header2);
        this.__internal__author = author2 || extractAuthor(this.digest, validators3 || []);
        this.createdAtHash = header2 == null ? void 0 : header2.createdAtHash;
      }
      /**
       * @description Convenience method, returns the author for the block
       */
      get author() {
        return this.__internal__author;
      }
    }
    return new Implementation(registry, header, validators2, author);
  }
  function mapExtrinsics(extrinsics, records) {
    return extrinsics.map((extrinsic, index2) => {
      let dispatchError;
      let dispatchInfo;
      const events2 = records.filter(({ phase }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index2)).map(({ event }) => {
        if (event.section === "system") {
          if (event.method === "ExtrinsicSuccess") {
            dispatchInfo = event.data[0];
          } else if (event.method === "ExtrinsicFailed") {
            dispatchError = event.data[0];
            dispatchInfo = event.data[1];
          }
        }
        return event;
      });
      return { dispatchError, dispatchInfo, events: events2, extrinsic };
    });
  }
  function createSignedBlockExtended(registry, block, events2, validators2, author) {
    const SignedBlockBase = registry.createClass("SignedBlock");
    class Implementation extends SignedBlockBase {
      constructor(registry2, block2, events3, validators3, author2) {
        super(registry2, block2);
        this.__internal__author = author2 || extractAuthor(this.block.header.digest, validators3 || []);
        this.__internal__events = events3 || [];
        this.__internal__extrinsics = mapExtrinsics(this.block.extrinsics, this.__internal__events);
        this.createdAtHash = block2 == null ? void 0 : block2.createdAtHash;
      }
      /**
       * @description Convenience method, returns the author for the block
       */
      get author() {
        return this.__internal__author;
      }
      /**
       * @description Convenience method, returns the events associated with the block
       */
      get events() {
        return this.__internal__events;
      }
      /**
       * @description Returns the extrinsics and their events, mapped
       */
      get extrinsics() {
        return this.__internal__extrinsics;
      }
    }
    return new Implementation(registry, block, events2, validators2, author);
  }
  function getBlock(instanceId, api) {
    return memo(instanceId, (blockHash) => combineLatest([
      api.rpc.chain.getBlock(blockHash),
      api.queryAt(blockHash)
    ]).pipe(switchMap(([signedBlock, queryAt]) => combineLatest([
      of(signedBlock),
      queryAt.system.events(),
      getAuthorDetails(api, signedBlock.block.header, blockHash)
    ])), map(([signedBlock, events2, [, validators2, author]]) => createSignedBlockExtended(events2.registry, signedBlock, events2, validators2, author))));
  }
  function getBlockByNumber(instanceId, api) {
    return memo(instanceId, (blockNumber) => api.rpc.chain.getBlockHash(blockNumber).pipe(switchMap((h) => api.derive.chain.getBlock(h))));
  }
  function getHeader(instanceId, api) {
    return memo(instanceId, (blockHash) => api.rpc.chain.getHeader(blockHash).pipe(switchMap((header) => getAuthorDetails(api, header, blockHash)), map(([header, validators2, author]) => createHeaderExtended((validators2 || header).registry, header, validators2, author))));
  }
  function _getHeaderRange(instanceId, api) {
    return memo(instanceId, (startHash, endHash, prev2 = []) => api.rpc.chain.getHeader(startHash).pipe(switchMap((header) => header.parentHash.eq(endHash) ? of([header, ...prev2]) : api.derive.chain._getHeaderRange(header.parentHash, endHash, [header, ...prev2]))));
  }
  function subscribeFinalizedHeads(instanceId, api) {
    return memo(instanceId, () => {
      let prevHash = null;
      return api.rpc.chain.subscribeFinalizedHeads().pipe(switchMap((header) => {
        const endHash = prevHash;
        const startHash = header.parentHash;
        prevHash = header.createdAtHash = header.hash;
        return endHash === null || startHash.eq(endHash) ? of(header) : api.derive.chain._getHeaderRange(startHash, endHash, [header]).pipe(switchMap((headers) => from$1(headers)));
      }));
    });
  }
  function subscribeNewBlocks(instanceId, api) {
    return memo(instanceId, () => api.derive.chain.subscribeNewHeads().pipe(switchMap((header) => api.derive.chain.getBlock(header.createdAtHash || header.hash))));
  }
  function subscribeNewHeads(instanceId, api) {
    return memo(instanceId, () => api.rpc.chain.subscribeNewHeads().pipe(switchMap((header) => getAuthorDetails(api, header)), map(([header, validators2, author]) => {
      header.createdAtHash = header.hash;
      return createHeaderExtended(header.registry, header, validators2, author);
    })));
  }
  const chain = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    _getHeaderRange,
    bestNumber,
    bestNumberFinalized,
    bestNumberLag,
    getBlock,
    getBlockByNumber,
    getHeader,
    subscribeFinalizedHeads,
    subscribeNewBlocks,
    subscribeNewHeads
  }, Symbol.toStringTag, { value: "Module" }));
  function queryConstants(api) {
    return of([
      // deprecated
      api.consts.contracts["callBaseFee"] || api.registry.createType("Balance"),
      api.consts.contracts["contractFee"] || api.registry.createType("Balance"),
      api.consts.contracts["creationFee"] || api.registry.createType("Balance"),
      api.consts.contracts["transactionBaseFee"] || api.registry.createType("Balance"),
      api.consts.contracts["transactionByteFee"] || api.registry.createType("Balance"),
      api.consts.contracts["transferFee"] || api.registry.createType("Balance"),
      // current
      api.consts.contracts["rentByteFee"] || api.registry.createType("Balance"),
      api.consts.contracts["rentDepositOffset"] || api.registry.createType("Balance"),
      api.consts.contracts["surchargeReward"] || api.registry.createType("Balance"),
      api.consts.contracts["tombstoneDeposit"] || api.registry.createType("Balance")
    ]);
  }
  function fees(instanceId, api) {
    return memo(instanceId, () => {
      return queryConstants(api).pipe(map(([callBaseFee, contractFee, creationFee, transactionBaseFee, transactionByteFee, transferFee, rentByteFee, rentDepositOffset, surchargeReward, tombstoneDeposit]) => ({
        callBaseFee,
        contractFee,
        creationFee,
        rentByteFee,
        rentDepositOffset,
        surchargeReward,
        tombstoneDeposit,
        transactionBaseFee,
        transactionByteFee,
        transferFee
      })));
    });
  }
  const contracts = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    fees
  }, Symbol.toStringTag, { value: "Module" }));
  function isVoter(value) {
    return !Array.isArray(value);
  }
  function retrieveStakeOf(elections2) {
    return elections2["stakeOf"].entries().pipe(map((entries) => entries.map(([{ args: [accountId2] }, stake]) => [accountId2, stake])));
  }
  function retrieveVoteOf(elections2) {
    return elections2["votesOf"].entries().pipe(map((entries) => entries.map(([{ args: [accountId2] }, votes2]) => [accountId2, votes2])));
  }
  function retrievePrev(api, elections2) {
    return combineLatest([
      retrieveStakeOf(elections2),
      retrieveVoteOf(elections2)
    ]).pipe(map(([stakes, votes2]) => {
      const result = [];
      votes2.forEach(([voter, votes3]) => {
        result.push([voter, { stake: api.registry.createType("Balance"), votes: votes3 }]);
      });
      stakes.forEach(([staker, stake]) => {
        const entry = result.find(([voter]) => voter.eq(staker));
        if (entry) {
          entry[1].stake = stake;
        } else {
          result.push([staker, { stake, votes: [] }]);
        }
      });
      return result;
    }));
  }
  function retrieveCurrent(elections2) {
    return elections2.voting.entries().pipe(map((entries) => entries.map(([{ args: [accountId2] }, value]) => [
      accountId2,
      isVoter(value) ? { stake: value.stake, votes: value.votes } : { stake: value[0], votes: value[1] }
    ])));
  }
  function votes(instanceId, api) {
    const elections2 = api.query.elections || api.query["phragmenElection"] || api.query["electionsPhragmen"];
    return memo(instanceId, () => elections2 ? elections2["stakeOf"] ? retrievePrev(api, elections2) : retrieveCurrent(elections2) : of([]));
  }
  function votesOf(instanceId, api) {
    return memo(instanceId, (accountId2) => api.derive.council.votes().pipe(map((votes2) => (votes2.find(([from2]) => from2.eq(accountId2)) || [null, { stake: api.registry.createType("Balance"), votes: [] }])[1])));
  }
  const members$3 = /* @__PURE__ */ members$5("council");
  const hasProposals$2 = /* @__PURE__ */ hasProposals$4("council");
  const proposal$2 = /* @__PURE__ */ proposal$4("council");
  const proposalCount$2 = /* @__PURE__ */ proposalCount$4("council");
  const proposalHashes$2 = /* @__PURE__ */ proposalHashes$4("council");
  const proposals$4 = /* @__PURE__ */ proposals$6("council");
  const prime$2 = /* @__PURE__ */ prime$4("council");
  const council = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    hasProposals: hasProposals$2,
    members: members$3,
    prime: prime$2,
    proposal: proposal$2,
    proposalCount: proposalCount$2,
    proposalHashes: proposalHashes$2,
    proposals: proposals$4,
    votes,
    votesOf
  }, Symbol.toStringTag, { value: "Module" }));
  function createChildKey(info2) {
    return u8aToHex(u8aConcat(":child_storage:default:", blake2AsU8a(u8aConcat("crowdloan", (info2.fundIndex || info2.trieIndex).toU8a()))));
  }
  function childKey(instanceId, api) {
    return memo(instanceId, (paraId) => api.query["crowdloan"]["funds"](paraId).pipe(map((optInfo) => optInfo.isSome ? createChildKey(optInfo.unwrap()) : null)));
  }
  function extractContributed(paraId, events2) {
    var _a;
    const added = [];
    const removed = [];
    return events2.filter(({ event: { data: [, eventParaId], method, section: section2 } }) => section2 === "crowdloan" && ["Contributed", "Withdrew"].includes(method) && eventParaId.eq(paraId)).reduce((result, { event: { data: [accountId2], method } }) => {
      if (method === "Contributed") {
        result.added.push(accountId2.toHex());
      } else {
        result.removed.push(accountId2.toHex());
      }
      return result;
    }, { added, blockHash: ((_a = events2.createdAtHash) == null ? void 0 : _a.toHex()) || "-", removed });
  }
  const PAGE_SIZE_K$1 = 1e3;
  function _getUpdates(api, paraId) {
    let added = [];
    let removed = [];
    return api.query.system.events().pipe(switchMap((events2) => {
      var _a;
      const changes = extractContributed(paraId, events2);
      if (changes.added.length || changes.removed.length) {
        added = added.concat(...changes.added);
        removed = removed.concat(...changes.removed);
        return of({ added, addedDelta: changes.added, blockHash: ((_a = events2.createdAtHash) == null ? void 0 : _a.toHex()) || "-", removed, removedDelta: changes.removed });
      }
      return EMPTY;
    }), startWith({ added, addedDelta: [], blockHash: "-", removed, removedDelta: [] }));
  }
  function _eventTriggerAll(api, paraId) {
    return api.query.system.events().pipe(switchMap((events2) => {
      var _a;
      const items = events2.filter(({ event: { data: [eventParaId], method, section: section2 } }) => section2 === "crowdloan" && ["AllRefunded", "Dissolved", "PartiallyRefunded"].includes(method) && eventParaId.eq(paraId));
      return items.length ? of(((_a = events2.createdAtHash) == null ? void 0 : _a.toHex()) || "-") : EMPTY;
    }), startWith("-"));
  }
  function _getKeysPaged(api, childKey2) {
    const subject = new BehaviorSubject(void 0);
    return subject.pipe(
      switchMap((startKey) => api.rpc.childstate.getKeysPaged(childKey2, "0x", PAGE_SIZE_K$1, startKey)),
      tap((keys2) => {
        nextTick(() => {
          keys2.length === PAGE_SIZE_K$1 ? subject.next(keys2[PAGE_SIZE_K$1 - 1].toHex()) : subject.complete();
        });
      }),
      toArray$1(),
      // toArray since we want to startSubject to be completed
      map((keyArr) => arrayFlatten(keyArr))
    );
  }
  function _getAll(api, paraId, childKey2) {
    return _eventTriggerAll(api, paraId).pipe(switchMap(() => isFunction$2(api.rpc.childstate.getKeysPaged) ? _getKeysPaged(api, childKey2) : api.rpc.childstate.getKeys(childKey2, "0x")), map((keys2) => keys2.map((k) => k.toHex())));
  }
  function _contributions$1(api, paraId, childKey2) {
    return combineLatest([
      _getAll(api, paraId, childKey2),
      _getUpdates(api, paraId)
    ]).pipe(map(([keys2, { added, blockHash, removed }]) => {
      const contributorsMap = {};
      keys2.forEach((k) => {
        contributorsMap[k] = true;
      });
      added.forEach((k) => {
        contributorsMap[k] = true;
      });
      removed.forEach((k) => {
        delete contributorsMap[k];
      });
      return {
        blockHash,
        contributorsHex: Object.keys(contributorsMap)
      };
    }));
  }
  function contributions(instanceId, api) {
    return memo(instanceId, (paraId) => api.derive.crowdloan.childKey(paraId).pipe(switchMap((childKey2) => childKey2 ? _contributions$1(api, paraId, childKey2) : of({ blockHash: "-", contributorsHex: [] }))));
  }
  function _getValues(api, childKey2, keys2) {
    return combineLatest(keys2.map((k) => api.rpc.childstate.getStorage(childKey2, k))).pipe(map((values2) => values2.map((v) => api.registry.createType("Option<StorageData>", v)).map((o) => o.isSome ? api.registry.createType("Balance", o.unwrap()) : api.registry.createType("Balance")).reduce((all2, b, index2) => objectSpread(all2, { [keys2[index2]]: b }), {})));
  }
  function _watchOwnChanges(api, paraId, childkey, keys2) {
    return api.query.system.events().pipe(switchMap((events2) => {
      const changes = extractContributed(paraId, events2);
      const filtered = keys2.filter((k) => changes.added.includes(k) || changes.removed.includes(k));
      return filtered.length ? _getValues(api, childkey, filtered) : EMPTY;
    }), startWith({}));
  }
  function _contributions(api, paraId, childKey2, keys2) {
    return combineLatest([
      _getValues(api, childKey2, keys2),
      _watchOwnChanges(api, paraId, childKey2, keys2)
    ]).pipe(map(([all2, latest2]) => objectSpread({}, all2, latest2)));
  }
  function ownContributions(instanceId, api) {
    return memo(instanceId, (paraId, keys2) => api.derive.crowdloan.childKey(paraId).pipe(switchMap((childKey2) => childKey2 && keys2.length ? _contributions(api, paraId, childKey2, keys2) : of({}))));
  }
  const crowdloan = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    childKey,
    contributions,
    ownContributions
  }, Symbol.toStringTag, { value: "Module" }));
  function isOldInfo(info2) {
    return !!info2.proposalHash;
  }
  function isCurrentStatus(status) {
    return !!status.tally;
  }
  function compareRationals(n1, d1, n2, d2) {
    while (true) {
      const q1 = n1.div(d1);
      const q2 = n2.div(d2);
      if (q1.lt(q2)) {
        return true;
      } else if (q2.lt(q1)) {
        return false;
      }
      const r1 = n1.mod(d1);
      const r2 = n2.mod(d2);
      if (r2.isZero()) {
        return false;
      } else if (r1.isZero()) {
        return true;
      }
      n1 = d2;
      n2 = d1;
      d1 = r2;
      d2 = r1;
    }
  }
  function calcPassingOther(threshold, sqrtElectorate2, { votedAye, votedNay, votedTotal }) {
    const sqrtVoters = bnSqrt(votedTotal);
    return sqrtVoters.isZero() ? false : threshold.isSuperMajorityApprove ? compareRationals(votedNay, sqrtVoters, votedAye, sqrtElectorate2) : compareRationals(votedNay, sqrtElectorate2, votedAye, sqrtVoters);
  }
  function calcPassing(threshold, sqrtElectorate2, state) {
    return threshold.isSimpleMajority ? state.votedAye.gt(state.votedNay) : calcPassingOther(threshold, sqrtElectorate2, state);
  }
  function calcVotesPrev(votesFor) {
    return votesFor.reduce((state, derived) => {
      const { balance, vote } = derived;
      const isDefault = vote.conviction.index === 0;
      const counted = balance.muln(isDefault ? 1 : vote.conviction.index).divn(isDefault ? 10 : 1);
      if (vote.isAye) {
        state.allAye.push(derived);
        state.voteCountAye++;
        state.votedAye.iadd(counted);
      } else {
        state.allNay.push(derived);
        state.voteCountNay++;
        state.votedNay.iadd(counted);
      }
      state.voteCount++;
      state.votedTotal.iadd(counted);
      return state;
    }, { allAye: [], allNay: [], voteCount: 0, voteCountAye: 0, voteCountNay: 0, votedAye: new BN(0), votedNay: new BN(0), votedTotal: new BN(0) });
  }
  function calcVotesCurrent(tally, votes2) {
    const allAye = [];
    const allNay = [];
    votes2.forEach((derived) => {
      if (derived.vote.isAye) {
        allAye.push(derived);
      } else {
        allNay.push(derived);
      }
    });
    return {
      allAye,
      allNay,
      voteCount: allAye.length + allNay.length,
      voteCountAye: allAye.length,
      voteCountNay: allNay.length,
      votedAye: tally.ayes,
      votedNay: tally.nays,
      votedTotal: tally.turnout
    };
  }
  function calcVotes(sqrtElectorate2, referendum, votes2) {
    const state = isCurrentStatus(referendum.status) ? calcVotesCurrent(referendum.status.tally, votes2) : calcVotesPrev(votes2);
    return objectSpread({}, state, {
      isPassing: calcPassing(referendum.status.threshold, sqrtElectorate2, state),
      votes: votes2
    });
  }
  function getStatus(info2) {
    if (info2.isNone) {
      return null;
    }
    const unwrapped = info2.unwrap();
    return isOldInfo(unwrapped) ? unwrapped : unwrapped.isOngoing ? unwrapped.asOngoing : null;
  }
  function getImageHashBounded(hash2) {
    return hash2.isLegacy ? hash2.asLegacy.hash_.toHex() : hash2.isLookup ? hash2.asLookup.hash_.toHex() : hash2.isInline ? hash2.asInline.hash.toHex() : isString$1(hash2) ? isHex(hash2) ? hash2 : stringToHex(hash2) : isU8a(hash2) ? u8aToHex(hash2) : hash2.toHex();
  }
  function getImageHash(status) {
    return getImageHashBounded(status.proposal || status.proposalHash);
  }
  const DEMOCRACY_ID = stringToHex("democrac");
  function isMaybeHashedOrBounded(call) {
    return call instanceof Enum;
  }
  function isBounded(call) {
    return call.isInline || call.isLegacy || call.isLookup;
  }
  function queryQueue(api) {
    return api.query.democracy["dispatchQueue"]().pipe(switchMap((dispatches) => combineLatest([
      of(dispatches),
      api.derive.democracy.preimages(dispatches.map(([, hash2]) => hash2))
    ])), map(([dispatches, images]) => dispatches.map(([at2, imageHash, index2], dispatchIndex) => ({
      at: at2,
      image: images[dispatchIndex],
      imageHash: getImageHashBounded(imageHash),
      index: index2
    }))));
  }
  function schedulerEntries(api) {
    return api.derive.democracy.referendumsFinished().pipe(switchMap(() => api.query.scheduler.agenda.keys()), switchMap((keys2) => {
      const blockNumbers = keys2.map(({ args: [blockNumber] }) => blockNumber);
      return blockNumbers.length ? combineLatest([
        of(blockNumbers),
        // this should simply be api.query.scheduler.agenda.multi,
        // however we have had cases on Darwinia where the indices have moved around after an
        // upgrade, which results in invalid on-chain data
        api.query.scheduler.agenda.multi(blockNumbers).pipe(catchError(() => of(blockNumbers.map(() => []))))
      ]) : of([[], []]);
    }));
  }
  function queryScheduler(api) {
    return schedulerEntries(api).pipe(switchMap(([blockNumbers, agendas]) => {
      const result = [];
      blockNumbers.forEach((at2, index2) => {
        (agendas[index2] || []).filter((o) => o.isSome).forEach((o) => {
          const scheduled2 = o.unwrap();
          if (scheduled2.maybeId.isSome) {
            const id = scheduled2.maybeId.unwrap().toHex();
            if (id.startsWith(DEMOCRACY_ID)) {
              const imageHash = isMaybeHashedOrBounded(scheduled2.call) ? isBounded(scheduled2.call) ? getImageHashBounded(scheduled2.call) : scheduled2.call.isHash ? scheduled2.call.asHash.toHex() : scheduled2.call.asValue.args[0].toHex() : scheduled2.call.args[0].toHex();
              result.push({ at: at2, imageHash, index: api.registry.createType("(u64, ReferendumIndex)", id)[1] });
            }
          }
        });
      });
      return combineLatest([
        of(result),
        result.length ? api.derive.democracy.preimages(result.map(({ imageHash }) => imageHash)) : of([])
      ]);
    }), map(([infos, images]) => infos.map((info2, index2) => objectSpread({ image: images[index2] }, info2))));
  }
  function dispatchQueue(instanceId, api) {
    return memo(instanceId, () => {
      var _a;
      return isFunction$2((_a = api.query.scheduler) == null ? void 0 : _a.agenda) ? queryScheduler(api) : api.query.democracy["dispatchQueue"] ? queryQueue(api) : of([]);
    });
  }
  const LOCKUPS = [0, 1, 2, 4, 8, 16, 32];
  function parseEnd(api, vote, { approved, end }) {
    return [
      end,
      approved.isTrue && vote.isAye || approved.isFalse && vote.isNay ? end.add((api.consts.democracy.voteLockingPeriod || api.consts.democracy.enactmentPeriod).muln(LOCKUPS[vote.conviction.index])) : BN_ZERO
    ];
  }
  function parseLock(api, [referendumId, accountVote], referendum) {
    const { balance, vote } = accountVote.asStandard;
    const [referendumEnd, unlockAt] = referendum.isFinished ? parseEnd(api, vote, referendum.asFinished) : [BN_ZERO, BN_ZERO];
    return { balance, isDelegated: false, isFinished: referendum.isFinished, referendumEnd, referendumId, unlockAt, vote };
  }
  function delegateLocks(api, { balance, conviction, target }) {
    return api.derive.democracy.locks(target).pipe(map((available) => available.map(({ isFinished, referendumEnd, referendumId, unlockAt, vote }) => ({
      balance,
      isDelegated: true,
      isFinished,
      referendumEnd,
      referendumId,
      unlockAt: unlockAt.isZero() ? unlockAt : referendumEnd.add((api.consts.democracy.voteLockingPeriod || api.consts.democracy.enactmentPeriod).muln(LOCKUPS[conviction.index])),
      vote: api.registry.createType("Vote", { aye: vote.isAye, conviction })
    }))));
  }
  function directLocks(api, { votes: votes2 }) {
    if (!votes2.length) {
      return of([]);
    }
    return api.query.democracy.referendumInfoOf.multi(votes2.map(([referendumId]) => referendumId)).pipe(map((referendums2) => votes2.map((vote, index2) => [vote, referendums2[index2].unwrapOr(null)]).filter((item) => !!item[1] && isUndefined$1(item[1].end) && item[0][1].isStandard).map(([directVote, referendum]) => parseLock(api, directVote, referendum))));
  }
  function locks(instanceId, api) {
    return memo(instanceId, (accountId2) => api.query.democracy.votingOf ? api.query.democracy.votingOf(accountId2).pipe(switchMap((voting) => voting.isDirect ? directLocks(api, voting.asDirect) : voting.isDelegating ? delegateLocks(api, voting.asDelegating) : of([]))) : of([]));
  }
  function withImage(api, nextOpt) {
    if (nextOpt.isNone) {
      return of(null);
    }
    const [hash2, threshold] = nextOpt.unwrap();
    return api.derive.democracy.preimage(hash2).pipe(map((image) => ({
      image,
      imageHash: getImageHashBounded(hash2),
      threshold
    })));
  }
  function nextExternal(instanceId, api) {
    return memo(instanceId, () => {
      var _a;
      return ((_a = api.query.democracy) == null ? void 0 : _a.nextExternal) ? api.query.democracy.nextExternal().pipe(switchMap((nextOpt) => withImage(api, nextOpt))) : of(null);
    });
  }
  function isDemocracyPreimage(api, imageOpt) {
    return !!imageOpt && !api.query.democracy["dispatchQueue"];
  }
  function constructProposal(api, [bytes2, proposer, balance, at2]) {
    let proposal2;
    try {
      proposal2 = api.registry.createType("Call", bytes2.toU8a(true));
    } catch (error) {
      console.error(error);
    }
    return { at: at2, balance, proposal: proposal2, proposer };
  }
  function parseDemocracy(api, imageOpt) {
    if (imageOpt.isNone) {
      return;
    }
    if (isDemocracyPreimage(api, imageOpt)) {
      const status = imageOpt.unwrap();
      if (status.isMissing) {
        return;
      }
      const { data: data2, deposit, provider, since } = status.asAvailable;
      return constructProposal(api, [data2, provider, deposit, since]);
    }
    return constructProposal(api, imageOpt.unwrap());
  }
  function parseImage(api, [proposalHash, status, bytes2]) {
    if (!status) {
      return void 0;
    }
    const [proposer, balance] = status.isUnrequested ? status.asUnrequested.deposit : status.asRequested.deposit.unwrapOrDefault();
    let proposal2;
    if (bytes2) {
      try {
        proposal2 = api.registry.createType("Call", bytes2.toU8a(true));
      } catch (error) {
        console.error(error);
      }
    }
    return { at: BN_ZERO, balance, proposal: proposal2, proposalHash, proposer };
  }
  function getDemocracyImages(api, bounded) {
    const hashes = bounded.map((b) => getImageHashBounded(b));
    return api.query.democracy["preimages"].multi(hashes).pipe(map((images) => images.map((imageOpt) => parseDemocracy(api, imageOpt))));
  }
  function getImages(api, bounded) {
    const hashes = bounded.map((b) => getImageHashBounded(b));
    const bytesType = api.registry.lookup.getTypeDef(api.query.preimage.preimageFor.creator.meta.type.asMap.key).type;
    return api.query.preimage.statusFor.multi(hashes).pipe(switchMap((optStatus) => {
      const statuses = optStatus.map((o) => o.unwrapOr(null));
      const keys2 = statuses.map((s, i2) => s ? bytesType === "H256" ? hashes[i2] : s.isRequested ? [hashes[i2], s.asRequested.len.unwrapOr(0)] : [hashes[i2], s.asUnrequested.len] : null).filter((p) => !!p);
      return api.query.preimage.preimageFor.multi(keys2).pipe(map((optBytes) => {
        let ptr = -1;
        return statuses.map((s, i2) => s ? [hashes[i2], s, optBytes[++ptr].unwrapOr(null)] : [hashes[i2], null, null]).map((v) => parseImage(api, v));
      }));
    }));
  }
  function preimages(instanceId, api) {
    return memo(instanceId, (hashes) => hashes.length ? isFunction$2(api.query.democracy["preimages"]) ? getDemocracyImages(api, hashes) : isFunction$2(api.query.preimage.preimageFor) ? getImages(api, hashes) : of([]) : of([]));
  }
  const preimage = /* @__PURE__ */ firstMemo((api, hash2) => api.derive.democracy.preimages([hash2]));
  function isNewDepositors(depositors) {
    return isFunction$2(depositors[1].mul);
  }
  function parse$4([proposals2, images, optDepositors]) {
    return proposals2.filter(([, , proposer], index2) => {
      var _a;
      return !!((_a = optDepositors[index2]) == null ? void 0 : _a.isSome) && !proposer.isEmpty;
    }).map(([index2, hash2, proposer], proposalIndex) => {
      const depositors = optDepositors[proposalIndex].unwrap();
      return objectSpread({
        image: images[proposalIndex],
        imageHash: getImageHashBounded(hash2),
        index: index2,
        proposer
      }, isNewDepositors(depositors) ? { balance: depositors[1], seconds: depositors[0] } : { balance: depositors[0], seconds: depositors[1] });
    });
  }
  function proposals$3(instanceId, api) {
    return memo(instanceId, () => {
      var _a;
      return isFunction$2((_a = api.query.democracy) == null ? void 0 : _a.publicProps) ? api.query.democracy.publicProps().pipe(switchMap((proposals2) => proposals2.length ? combineLatest([
        of(proposals2),
        api.derive.democracy.preimages(proposals2.map(([, hash2]) => hash2)),
        api.query.democracy.depositOf.multi(proposals2.map(([index2]) => index2))
      ]) : of([[], [], []])), map(parse$4)) : of([]);
    });
  }
  function referendumIds(instanceId, api) {
    return memo(instanceId, () => {
      var _a;
      return ((_a = api.query.democracy) == null ? void 0 : _a.lowestUnbaked) ? api.queryMulti([
        api.query.democracy.lowestUnbaked,
        api.query.democracy.referendumCount
      ]).pipe(map(([first2, total]) => total.gt(first2) ? [...Array(total.sub(first2).toNumber())].map((_2, i2) => first2.addn(i2)) : [])) : of([]);
    });
  }
  function referendums(instanceId, api) {
    return memo(instanceId, () => api.derive.democracy.referendumsActive().pipe(switchMap((referendums2) => referendums2.length ? combineLatest([
      of(referendums2),
      api.derive.democracy._referendumsVotes(referendums2)
    ]) : of([[], []])), map(([referendums2, votes2]) => referendums2.map((referendum, index2) => objectSpread({}, referendum, votes2[index2])))));
  }
  function referendumsActive(instanceId, api) {
    return memo(instanceId, () => api.derive.democracy.referendumIds().pipe(switchMap((ids) => ids.length ? api.derive.democracy.referendumsInfo(ids) : of([]))));
  }
  function referendumsFinished(instanceId, api) {
    return memo(instanceId, () => api.derive.democracy.referendumIds().pipe(switchMap((ids) => api.query.democracy.referendumInfoOf.multi(ids)), map((infos) => infos.map((o) => o.unwrapOr(null)).filter((info2) => !!info2 && info2.isFinished).map((info2) => info2.asFinished))));
  }
  function votesPrev(api, referendumId) {
    return api.query.democracy["votersFor"](referendumId).pipe(switchMap((votersFor) => combineLatest([
      of(votersFor),
      votersFor.length ? api.query.democracy["voteOf"].multi(votersFor.map((accountId2) => [referendumId, accountId2])) : of([]),
      api.derive.balances.votingBalances(votersFor)
    ])), map(([votersFor, votes2, balances2]) => votersFor.map((accountId2, index2) => ({
      accountId: accountId2,
      balance: balances2[index2].votingBalance || api.registry.createType("Balance"),
      isDelegating: false,
      vote: votes2[index2] || api.registry.createType("Vote")
    }))));
  }
  function extractVotes(mapped, referendumId) {
    return mapped.filter(([, voting]) => voting.isDirect).map(([accountId2, voting]) => [
      accountId2,
      voting.asDirect.votes.filter(([idx]) => idx.eq(referendumId))
    ]).filter(([, directVotes]) => !!directVotes.length).reduce((result, [accountId2, votes2]) => (
      // FIXME We are ignoring split votes
      votes2.reduce((result2, [, vote]) => {
        if (vote.isStandard) {
          result2.push(objectSpread({
            accountId: accountId2,
            isDelegating: false
          }, vote.asStandard));
        }
        return result2;
      }, result)
    ), []);
  }
  function votesCurr(api, referendumId) {
    return api.query.democracy.votingOf.entries().pipe(map((allVoting) => {
      const mapped = allVoting.map(([{ args: [accountId2] }, voting]) => [accountId2, voting]);
      const votes2 = extractVotes(mapped, referendumId);
      const delegations = mapped.filter(([, voting]) => voting.isDelegating).map(([accountId2, voting]) => [accountId2, voting.asDelegating]);
      delegations.forEach(([accountId2, { balance, conviction, target }]) => {
        const toDelegator = delegations.find(([accountId3]) => accountId3.eq(target));
        const to = votes2.find(({ accountId: accountId3 }) => accountId3.eq(toDelegator ? toDelegator[0] : target));
        if (to) {
          votes2.push({
            accountId: accountId2,
            balance,
            isDelegating: true,
            vote: api.registry.createType("Vote", { aye: to.vote.isAye, conviction })
          });
        }
      });
      return votes2;
    }));
  }
  function _referendumVotes(instanceId, api) {
    return memo(instanceId, (referendum) => combineLatest([
      api.derive.democracy.sqrtElectorate(),
      isFunction$2(api.query.democracy.votingOf) ? votesCurr(api, referendum.index) : votesPrev(api, referendum.index)
    ]).pipe(map(([sqrtElectorate2, votes2]) => calcVotes(sqrtElectorate2, referendum, votes2))));
  }
  function _referendumsVotes(instanceId, api) {
    return memo(instanceId, (referendums2) => referendums2.length ? combineLatest(referendums2.map((referendum) => api.derive.democracy._referendumVotes(referendum))) : of([]));
  }
  function _referendumInfo(instanceId, api) {
    return memo(instanceId, (index2, info2) => {
      const status = getStatus(info2);
      return status ? api.derive.democracy.preimage(status.proposal || status.proposalHash).pipe(map((image) => ({
        image,
        imageHash: getImageHash(status),
        index: api.registry.createType("ReferendumIndex", index2),
        status
      }))) : of(null);
    });
  }
  function referendumsInfo(instanceId, api) {
    return memo(instanceId, (ids) => ids.length ? api.query.democracy.referendumInfoOf.multi(ids).pipe(switchMap((infos) => combineLatest(ids.map((id, index2) => api.derive.democracy._referendumInfo(id, infos[index2])))), map((infos) => infos.filter((r2) => !!r2))) : of([]));
  }
  function sqrtElectorate(instanceId, api) {
    return memo(instanceId, () => api.query.balances.totalIssuance().pipe(map(bnSqrt)));
  }
  const democracy = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    _referendumInfo,
    _referendumVotes,
    _referendumsVotes,
    dispatchQueue,
    locks,
    nextExternal,
    preimage,
    preimages,
    proposals: proposals$3,
    referendumIds,
    referendums,
    referendumsActive,
    referendumsFinished,
    referendumsInfo,
    sqrtElectorate
  }, Symbol.toStringTag, { value: "Module" }));
  function isSeatHolder(value) {
    return !Array.isArray(value);
  }
  function isCandidateTuple(value) {
    return Array.isArray(value);
  }
  function getAccountTuple(value) {
    return isSeatHolder(value) ? [value.who, value.stake] : value;
  }
  function getCandidate(value) {
    return isCandidateTuple(value) ? value[0] : value;
  }
  function sortAccounts([, balanceA], [, balanceB]) {
    return balanceB.cmp(balanceA);
  }
  function getConstants(api, elections2) {
    return elections2 ? {
      candidacyBond: api.consts[elections2].candidacyBond,
      desiredRunnersUp: api.consts[elections2].desiredRunnersUp,
      desiredSeats: api.consts[elections2].desiredMembers,
      termDuration: api.consts[elections2].termDuration,
      votingBond: api.consts[elections2]["votingBond"],
      votingBondBase: api.consts[elections2].votingBondBase,
      votingBondFactor: api.consts[elections2].votingBondFactor
    } : {};
  }
  function getModules(api) {
    const [council2] = api.registry.getModuleInstances(api.runtimeVersion.specName, "council") || ["council"];
    const elections2 = api.query["phragmenElection"] ? "phragmenElection" : api.query["electionsPhragmen"] ? "electionsPhragmen" : api.query.elections ? "elections" : null;
    return [council2, elections2];
  }
  function queryAll(api, council2, elections2) {
    return api.queryMulti([
      api.query[council2].members,
      api.query[elections2].candidates,
      api.query[elections2].members,
      api.query[elections2].runnersUp
    ]);
  }
  function queryCouncil(api, council2) {
    return combineLatest([
      api.query[council2].members(),
      of([]),
      of([]),
      of([])
    ]);
  }
  function info$3(instanceId, api) {
    return memo(instanceId, () => {
      const [council2, elections2] = getModules(api);
      return (elections2 ? queryAll(api, council2, elections2) : queryCouncil(api, council2)).pipe(map(([councilMembers, candidates2, members2, runnersUp]) => objectSpread({}, getConstants(api, elections2), {
        candidateCount: api.registry.createType("u32", candidates2.length),
        candidates: candidates2.map(getCandidate),
        members: members2.length ? members2.map(getAccountTuple).sort(sortAccounts) : councilMembers.map((a) => [a, api.registry.createType("Balance")]),
        runnersUp: runnersUp.map(getAccountTuple).sort(sortAccounts)
      })));
    });
  }
  const elections = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    info: info$3
  }, Symbol.toStringTag, { value: "Module" }));
  function mapResult([result, validators2, heartbeats, numBlocks]) {
    validators2.forEach((validator2, index2) => {
      const validatorId = validator2.toString();
      const blockCount = numBlocks[index2];
      const hasMessage = !heartbeats[index2].isEmpty;
      const prev2 = result[validatorId];
      if (!prev2 || prev2.hasMessage !== hasMessage || !prev2.blockCount.eq(blockCount)) {
        result[validatorId] = {
          blockCount,
          hasMessage,
          isOnline: hasMessage || blockCount.gt(BN_ZERO)
        };
      }
    });
    return result;
  }
  function receivedHeartbeats(instanceId, api) {
    return memo(instanceId, () => {
      var _a;
      return ((_a = api.query.imOnline) == null ? void 0 : _a.receivedHeartbeats) ? api.derive.staking.overview().pipe(switchMap(({ currentIndex, validators: validators2 }) => combineLatest([
        of({}),
        of(validators2),
        api.query.imOnline.receivedHeartbeats.multi(validators2.map((_address, index2) => [currentIndex, index2])),
        api.query.imOnline.authoredBlocks.multi(validators2.map((address) => [currentIndex, address]))
      ])), map(mapResult)) : of({});
    });
  }
  const imOnline = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    receivedHeartbeats
  }, Symbol.toStringTag, { value: "Module" }));
  const members$2 = /* @__PURE__ */ members$5("membership");
  const hasProposals$1 = /* @__PURE__ */ hasProposals$4("membership");
  const proposal$1 = /* @__PURE__ */ proposal$4("membership");
  const proposalCount$1 = /* @__PURE__ */ proposalCount$4("membership");
  const proposalHashes$1 = /* @__PURE__ */ proposalHashes$4("membership");
  const proposals$2 = /* @__PURE__ */ proposals$6("membership");
  const prime$1 = /* @__PURE__ */ prime$4("membership");
  const membership = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    hasProposals: hasProposals$1,
    members: members$2,
    prime: prime$1,
    proposal: proposal$1,
    proposalCount: proposalCount$1,
    proposalHashes: proposalHashes$1,
    proposals: proposals$2
  }, Symbol.toStringTag, { value: "Module" }));
  function didUpdateToBool(didUpdate, id) {
    return didUpdate.isSome ? didUpdate.unwrap().some((paraId) => paraId.eq(id)) : false;
  }
  function parseActive(id, active) {
    const found = active.find(([paraId]) => paraId === id);
    if (found && found[1].isSome) {
      const [collatorId, retriable] = found[1].unwrap();
      return objectSpread({ collatorId }, retriable.isWithRetries ? {
        isRetriable: true,
        retries: retriable.asWithRetries.toNumber()
      } : {
        isRetriable: false,
        retries: 0
      });
    }
    return null;
  }
  function parseCollators(id, collatorQueue) {
    return collatorQueue.map((queue2) => {
      const found = queue2.find(([paraId]) => paraId === id);
      return found ? found[1] : null;
    });
  }
  function parse$3(id, [active, retryQueue, selectedThreads, didUpdate, info2, pendingSwap, heads, relayDispatchQueue]) {
    if (info2.isNone) {
      return null;
    }
    return {
      active: parseActive(id, active),
      didUpdate: didUpdateToBool(didUpdate, id),
      heads,
      id,
      info: objectSpread({ id }, info2.unwrap()),
      pendingSwapId: pendingSwap.unwrapOr(null),
      relayDispatchQueue,
      retryCollators: parseCollators(id, retryQueue),
      selectedCollators: parseCollators(id, selectedThreads)
    };
  }
  function info$2(instanceId, api) {
    return memo(instanceId, (id) => api.query["registrar"] && api.query["parachains"] ? api.queryMulti([
      api.query["registrar"]["active"],
      api.query["registrar"]["retryQueue"],
      api.query["registrar"]["selectedThreads"],
      api.query["parachains"]["didUpdate"],
      [api.query["registrar"]["paras"], id],
      [api.query["registrar"]["pendingSwap"], id],
      [api.query["parachains"]["heads"], id],
      [api.query["parachains"]["relayDispatchQueue"], id]
    ]).pipe(map((result) => parse$3(api.registry.createType("ParaId", id), result))) : of(null));
  }
  function parse$2([ids, didUpdate, relayDispatchQueueSizes, infos, pendingSwaps]) {
    return ids.map((id, index2) => ({
      didUpdate: didUpdateToBool(didUpdate, id),
      id,
      info: objectSpread({ id }, infos[index2].unwrapOr(null)),
      pendingSwapId: pendingSwaps[index2].unwrapOr(null),
      relayDispatchQueueSize: relayDispatchQueueSizes[index2][0].toNumber()
    }));
  }
  function overview$1(instanceId, api) {
    return memo(instanceId, () => {
      var _a;
      return ((_a = api.query["registrar"]) == null ? void 0 : _a["parachains"]) && api.query["parachains"] ? api.query["registrar"]["parachains"]().pipe(switchMap((paraIds) => combineLatest([
        of(paraIds),
        api.query["parachains"]["didUpdate"](),
        api.query["parachains"]["relayDispatchQueueSize"].multi(paraIds),
        api.query["registrar"]["paras"].multi(paraIds),
        api.query["registrar"]["pendingSwap"].multi(paraIds)
      ])), map(parse$2)) : of([]);
    });
  }
  const parachains = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    info: info$2,
    overview: overview$1
  }, Symbol.toStringTag, { value: "Module" }));
  function parse$1([currentIndex, activeEra, activeEraStart, currentEra, validatorCount]) {
    return {
      activeEra,
      activeEraStart,
      currentEra,
      currentIndex,
      validatorCount
    };
  }
  function queryStaking(api) {
    return api.queryMulti([
      api.query.session.currentIndex,
      api.query.staking.activeEra,
      api.query.staking.currentEra,
      api.query.staking.validatorCount
    ]).pipe(map(([currentIndex, activeOpt, currentEra, validatorCount]) => {
      const { index: index2, start } = activeOpt.unwrapOrDefault();
      return parse$1([
        currentIndex,
        index2,
        start,
        currentEra.unwrapOrDefault(),
        validatorCount
      ]);
    }));
  }
  function querySession(api) {
    return api.query.session.currentIndex().pipe(map((currentIndex) => parse$1([
      currentIndex,
      api.registry.createType("EraIndex"),
      api.registry.createType("Option<Moment>"),
      api.registry.createType("EraIndex"),
      api.registry.createType("u32")
    ])));
  }
  function empty(api) {
    return of(parse$1([
      api.registry.createType("SessionIndex", 1),
      api.registry.createType("EraIndex"),
      api.registry.createType("Option<Moment>"),
      api.registry.createType("EraIndex"),
      api.registry.createType("u32")
    ]));
  }
  function indexes(instanceId, api) {
    return memo(instanceId, () => api.query.session ? api.query.staking ? queryStaking(api) : querySession(api) : empty(api));
  }
  function info$1(instanceId, api) {
    return memo(instanceId, () => api.derive.session.indexes().pipe(map((indexes2) => {
      var _a, _b, _c, _d;
      const sessionLength = ((_b = (_a = api.consts) == null ? void 0 : _a.babe) == null ? void 0 : _b.epochDuration) || api.registry.createType("u64", 1);
      const sessionsPerEra = ((_d = (_c = api.consts) == null ? void 0 : _c.staking) == null ? void 0 : _d.sessionsPerEra) || api.registry.createType("SessionIndex", 1);
      return objectSpread({
        eraLength: api.registry.createType("BlockNumber", sessionsPerEra.mul(sessionLength)),
        isEpoch: !!api.query.babe,
        sessionLength,
        sessionsPerEra
      }, indexes2);
    })));
  }
  function withProgressField(field) {
    return (instanceId, api) => memo(instanceId, () => api.derive.session.progress().pipe(map((info2) => info2[field])));
  }
  function createDerive(api, info2, [currentSlot, epochIndex, epochOrGenesisStartSlot, activeEraStartSessionIndex]) {
    const epochStartSlot = epochIndex.mul(info2.sessionLength).iadd(epochOrGenesisStartSlot);
    const sessionProgress2 = currentSlot.sub(epochStartSlot);
    const eraProgress2 = info2.currentIndex.sub(activeEraStartSessionIndex).imul(info2.sessionLength).iadd(sessionProgress2);
    return objectSpread({
      eraProgress: api.registry.createType("BlockNumber", eraProgress2),
      sessionProgress: api.registry.createType("BlockNumber", sessionProgress2)
    }, info2);
  }
  function queryAura(api) {
    return api.derive.session.info().pipe(map((info2) => objectSpread({
      eraProgress: api.registry.createType("BlockNumber"),
      sessionProgress: api.registry.createType("BlockNumber")
    }, info2)));
  }
  function queryBabe(api) {
    return api.derive.session.info().pipe(switchMap((info2) => {
      var _a;
      return combineLatest([
        of(info2),
        // we may have no staking, but have babe (permissioned)
        ((_a = api.query.staking) == null ? void 0 : _a.erasStartSessionIndex) ? api.queryMulti([
          api.query.babe.currentSlot,
          api.query.babe.epochIndex,
          api.query.babe.genesisSlot,
          [api.query.staking.erasStartSessionIndex, info2.activeEra]
        ]) : api.queryMulti([
          api.query.babe.currentSlot,
          api.query.babe.epochIndex,
          api.query.babe.genesisSlot
        ])
      ]);
    }), map(([info2, [currentSlot, epochIndex, genesisSlot, optStartIndex]]) => [
      info2,
      [currentSlot, epochIndex, genesisSlot, optStartIndex && optStartIndex.isSome ? optStartIndex.unwrap() : api.registry.createType("SessionIndex", 1)]
    ]));
  }
  function progress(instanceId, api) {
    return memo(instanceId, () => api.query.babe ? queryBabe(api).pipe(map(([info2, slots]) => createDerive(api, info2, slots))) : queryAura(api));
  }
  const eraLength = /* @__PURE__ */ withProgressField("eraLength");
  const eraProgress = /* @__PURE__ */ withProgressField("eraProgress");
  const sessionProgress = /* @__PURE__ */ withProgressField("sessionProgress");
  const session = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    eraLength,
    eraProgress,
    indexes,
    info: info$1,
    progress,
    sessionProgress
  }, Symbol.toStringTag, { value: "Module" }));
  function candidates(instanceId, api) {
    return memo(instanceId, () => api.query.society.candidates().pipe(switchMap((candidates2) => combineLatest([
      of(candidates2),
      api.query.society.suspendedCandidates.multi(candidates2.map(({ who }) => who))
    ])), map(([candidates2, suspended]) => candidates2.map(({ kind, value, who }, index2) => ({
      accountId: who,
      isSuspended: suspended[index2].isSome,
      kind,
      value
    })))));
  }
  function info(instanceId, api) {
    return memo(instanceId, () => api.queryMulti([
      api.query.society.bids,
      api.query.society.defender,
      api.query.society.founder,
      api.query.society.head,
      api.query.society.maxMembers,
      api.query.society.pot
    ]).pipe(map(([bids, defender, founder, head, maxMembers, pot]) => ({
      bids,
      defender: defender.unwrapOr(void 0),
      founder: founder.unwrapOr(void 0),
      hasDefender: defender.isSome && head.isSome && !head.eq(defender) || false,
      head: head.unwrapOr(void 0),
      maxMembers,
      pot
    }))));
  }
  function member(instanceId, api) {
    return memo(instanceId, (accountId2) => api.derive.society._members([accountId2]).pipe(map(([result]) => result)));
  }
  function _members(instanceId, api) {
    return memo(instanceId, (accountIds) => combineLatest([
      of(accountIds),
      api.query.society.payouts.multi(accountIds),
      api.query.society.strikes.multi(accountIds),
      api.query.society.defenderVotes.multi(accountIds),
      api.query.society.suspendedMembers.multi(accountIds),
      api.query.society.vouching.multi(accountIds)
    ]).pipe(map(([accountIds2, payouts, strikes, defenderVotes, suspended, vouching]) => accountIds2.map((accountId2, index2) => ({
      accountId: accountId2,
      isDefenderVoter: defenderVotes[index2].isSome,
      isSuspended: suspended[index2].isTrue,
      payouts: payouts[index2],
      strikes: strikes[index2],
      vote: defenderVotes[index2].unwrapOr(void 0),
      vouching: vouching[index2].unwrapOr(void 0)
    })))));
  }
  function members$1(instanceId, api) {
    return memo(instanceId, () => api.query.society.members().pipe(switchMap((members2) => api.derive.society._members(members2))));
  }
  const society = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    _members,
    candidates,
    info,
    member,
    members: members$1
  }, Symbol.toStringTag, { value: "Module" }));
  const QUERY_OPTS = {
    withDestination: true,
    withLedger: true,
    withNominations: true,
    withPrefs: true
  };
  function groupByEra(list) {
    return list.reduce((map2, { era, value }) => {
      const key = era.toString();
      map2[key] = (map2[key] || BN_ZERO).add(value.unwrap());
      return map2;
    }, {});
  }
  function calculateUnlocking(api, stakingLedger, sessionInfo) {
    const results = Object.entries(groupByEra(((stakingLedger == null ? void 0 : stakingLedger.unlocking) || []).filter(({ era }) => era.unwrap().gt(sessionInfo.activeEra)))).map(([eraString, value]) => ({
      remainingEras: new BN(eraString).isub(sessionInfo.activeEra),
      value: api.registry.createType("Balance", value)
    }));
    return results.length ? results : void 0;
  }
  function redeemableSum(api, stakingLedger, sessionInfo) {
    return api.registry.createType("Balance", ((stakingLedger == null ? void 0 : stakingLedger.unlocking) || []).reduce((total, { era, value }) => {
      return era.unwrap().gt(sessionInfo.currentEra) ? total : total.iadd(value.unwrap());
    }, new BN(0)));
  }
  function parseResult$1(api, sessionInfo, keys2, query2) {
    return objectSpread({}, keys2, query2, {
      redeemable: redeemableSum(api, query2.stakingLedger, sessionInfo),
      unlocking: calculateUnlocking(api, query2.stakingLedger, sessionInfo)
    });
  }
  function accounts(instanceId, api) {
    return memo(instanceId, (accountIds, opts = QUERY_OPTS) => api.derive.session.info().pipe(switchMap((sessionInfo) => combineLatest([
      api.derive.staking.keysMulti(accountIds),
      api.derive.staking.queryMulti(accountIds, opts)
    ]).pipe(map(([keys2, queries]) => queries.map((q, index2) => parseResult$1(api, sessionInfo, keys2[index2], q)))))));
  }
  const account = /* @__PURE__ */ firstMemo((api, accountId2, opts) => api.derive.staking.accounts([accountId2], opts));
  function currentPoints(instanceId, api) {
    return memo(instanceId, () => api.derive.session.indexes().pipe(switchMap(({ activeEra }) => api.query.staking.erasRewardPoints(activeEra))));
  }
  const DEFAULT_FLAGS$1 = { withController: true, withExposure: true, withPrefs: true };
  function combineAccounts(nextElected2, validators2) {
    return arrayFlatten([nextElected2, validators2.filter((v) => !nextElected2.find((n) => n.eq(v)))]);
  }
  function electedInfo(instanceId, api) {
    return memo(instanceId, (flags2 = DEFAULT_FLAGS$1) => api.derive.staking.validators().pipe(switchMap(({ nextElected: nextElected2, validators: validators2 }) => api.derive.staking.queryMulti(combineAccounts(nextElected2, validators2), flags2).pipe(map((info2) => ({
      info: info2,
      nextElected: nextElected2,
      validators: validators2
    }))))));
  }
  function getEraCache(CACHE_KEY2, era, withActive) {
    const cacheKey = `${CACHE_KEY2}-${era.toString()}`;
    return [
      cacheKey,
      withActive ? void 0 : deriveCache.get(cacheKey)
    ];
  }
  function getEraMultiCache(CACHE_KEY2, eras, withActive) {
    const cached = withActive ? [] : eras.map((e) => deriveCache.get(`${CACHE_KEY2}-${e.toString()}`)).filter((v) => !!v);
    return cached;
  }
  function setEraCache(cacheKey, withActive, value) {
    !withActive && deriveCache.set(cacheKey, value);
    return value;
  }
  function setEraMultiCache(CACHE_KEY2, withActive, values2) {
    !withActive && values2.forEach((v) => deriveCache.set(`${CACHE_KEY2}-${v.era.toString()}`, v));
    return values2;
  }
  function filterCachedEras(eras, cached, query2) {
    return eras.map((e) => cached.find(({ era }) => e.eq(era)) || query2.find(({ era }) => e.eq(era)));
  }
  const ERA_CHUNK_SIZE = 14;
  function chunkEras(eras, fn) {
    const chunked = arrayChunk(eras, ERA_CHUNK_SIZE);
    let index2 = 0;
    const subject = new BehaviorSubject(chunked[index2]);
    return subject.pipe(switchMap(fn), tap(() => {
      nextTick(() => {
        index2++;
        index2 === chunked.length ? subject.complete() : subject.next(chunked[index2]);
      });
    }), toArray$1(), map(arrayFlatten));
  }
  function filterEras(eras, list) {
    return eras.filter((e) => !list.some(({ era }) => e.eq(era)));
  }
  function erasHistoricApply(fn) {
    return (instanceId, api) => (
      // Cannot quite get the typing right, but it is right in the code
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return
      memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((e) => api.derive.staking[fn](e, withActive))))
    );
  }
  function erasHistoricApplyAccount(fn) {
    return (instanceId, api) => (
      // Cannot quite get the typing right, but it is right in the code
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return
      memo(instanceId, (accountId2, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((e) => api.derive.staking[fn](accountId2, e, withActive))))
    );
  }
  function singleEra(fn) {
    return (instanceId, api) => (
      // Cannot quite get the typing right, but it is right in the code
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return
      memo(instanceId, (era) => api.derive.staking[fn](era, true))
    );
  }
  function combineEras(fn) {
    return (instanceId, api) => (
      // Cannot quite get the typing right, but it is right in the code
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return
      memo(instanceId, (eras, withActive) => !eras.length ? of([]) : chunkEras(eras, (eras2) => combineLatest(eras2.map((e) => api.derive.staking[fn](e, withActive)))))
    );
  }
  const CACHE_KEY$4 = "eraExposure";
  function mapStakers(era, stakers) {
    const nominators = {};
    const validators2 = {};
    stakers.forEach(([key, exposure]) => {
      const validatorId = key.args[1].toString();
      validators2[validatorId] = exposure;
      exposure.others.forEach(({ who }, validatorIndex) => {
        const nominatorId = who.toString();
        nominators[nominatorId] = nominators[nominatorId] || [];
        nominators[nominatorId].push({ validatorId, validatorIndex });
      });
    });
    return { era, nominators, validators: validators2 };
  }
  function _eraExposure(instanceId, api) {
    return memo(instanceId, (era, withActive = false) => {
      const [cacheKey, cached] = getEraCache(CACHE_KEY$4, era, withActive);
      return cached ? of(cached) : api.query.staking.erasStakersClipped.entries(era).pipe(map((r2) => setEraCache(cacheKey, withActive, mapStakers(era, r2))));
    });
  }
  const eraExposure = /* @__PURE__ */ singleEra("_eraExposure");
  const _erasExposure = /* @__PURE__ */ combineEras("_eraExposure");
  const erasExposure = /* @__PURE__ */ erasHistoricApply("_erasExposure");
  function erasHistoric(instanceId, api) {
    return memo(instanceId, (withActive) => combineLatest([
      api.query.staking.activeEra(),
      api.consts.staking.historyDepth ? of(api.consts.staking.historyDepth) : api.query.staking["historyDepth"]()
    ]).pipe(map(([activeEraOpt, historyDepth]) => {
      const result = [];
      const max2 = historyDepth.toNumber();
      const activeEra = activeEraOpt.unwrapOrDefault().index;
      let lastEra = activeEra;
      while (lastEra.gte(BN_ZERO) && result.length < max2) {
        if (lastEra !== activeEra || withActive === true) {
          result.push(api.registry.createType("EraIndex", lastEra));
        }
        lastEra = lastEra.sub(BN_ONE);
      }
      return result.reverse();
    })));
  }
  const CACHE_KEY$3 = "eraPoints";
  function mapValidators({ individual }) {
    return [...individual.entries()].filter(([, points]) => points.gt(BN_ZERO)).reduce((result, [validatorId, points]) => {
      result[validatorId.toString()] = points;
      return result;
    }, {});
  }
  function mapPoints(eras, points) {
    return eras.map((era, index2) => ({
      era,
      eraPoints: points[index2].total,
      validators: mapValidators(points[index2])
    }));
  }
  function _erasPoints(instanceId, api) {
    return memo(instanceId, (eras, withActive) => {
      if (!eras.length) {
        return of([]);
      }
      const cached = getEraMultiCache(CACHE_KEY$3, eras, withActive);
      const remaining = filterEras(eras, cached);
      return !remaining.length ? of(cached) : api.query.staking.erasRewardPoints.multi(remaining).pipe(map((p) => filterCachedEras(eras, cached, setEraMultiCache(CACHE_KEY$3, withActive, mapPoints(remaining, p)))));
    });
  }
  const erasPoints = /* @__PURE__ */ erasHistoricApply("_erasPoints");
  const CACHE_KEY$2 = "eraPrefs";
  function mapPrefs(era, all2) {
    const validators2 = {};
    all2.forEach(([key, prefs]) => {
      validators2[key.args[1].toString()] = prefs;
    });
    return { era, validators: validators2 };
  }
  function _eraPrefs(instanceId, api) {
    return memo(instanceId, (era, withActive) => {
      const [cacheKey, cached] = getEraCache(CACHE_KEY$2, era, withActive);
      return cached ? of(cached) : api.query.staking.erasValidatorPrefs.entries(era).pipe(map((r2) => setEraCache(cacheKey, withActive, mapPrefs(era, r2))));
    });
  }
  const eraPrefs = /* @__PURE__ */ singleEra("_eraPrefs");
  const _erasPrefs = /* @__PURE__ */ combineEras("_eraPrefs");
  const erasPrefs = /* @__PURE__ */ erasHistoricApply("_erasPrefs");
  const CACHE_KEY$1 = "eraRewards";
  function mapRewards(eras, optRewards) {
    return eras.map((era, index2) => ({
      era,
      eraReward: optRewards[index2].unwrapOrDefault()
    }));
  }
  function _erasRewards(instanceId, api) {
    return memo(instanceId, (eras, withActive) => {
      if (!eras.length) {
        return of([]);
      }
      const cached = getEraMultiCache(CACHE_KEY$1, eras, withActive);
      const remaining = filterEras(eras, cached);
      if (!remaining.length) {
        return of(cached);
      }
      return api.query.staking.erasValidatorReward.multi(remaining).pipe(map((r2) => filterCachedEras(eras, cached, setEraMultiCache(CACHE_KEY$1, withActive, mapRewards(remaining, r2)))));
    });
  }
  const erasRewards = /* @__PURE__ */ erasHistoricApply("_erasRewards");
  const CACHE_KEY = "eraSlashes";
  function mapSlashes(era, noms, vals) {
    const nominators = {};
    const validators2 = {};
    noms.forEach(([key, optBalance]) => {
      nominators[key.args[1].toString()] = optBalance.unwrap();
    });
    vals.forEach(([key, optRes]) => {
      validators2[key.args[1].toString()] = optRes.unwrapOrDefault()[1];
    });
    return { era, nominators, validators: validators2 };
  }
  function _eraSlashes(instanceId, api) {
    return memo(instanceId, (era, withActive) => {
      const [cacheKey, cached] = getEraCache(CACHE_KEY, era, withActive);
      return cached ? of(cached) : combineLatest([
        api.query.staking.nominatorSlashInEra.entries(era),
        api.query.staking.validatorSlashInEra.entries(era)
      ]).pipe(map(([n, v]) => setEraCache(cacheKey, withActive, mapSlashes(era, n, v))));
    });
  }
  const eraSlashes = /* @__PURE__ */ singleEra("_eraSlashes");
  const _erasSlashes = /* @__PURE__ */ combineEras("_eraSlashes");
  const erasSlashes = /* @__PURE__ */ erasHistoricApply("_erasSlashes");
  function extractsIds(stashId, queuedKeys, nextKeys) {
    const sessionIds = (queuedKeys.find(([currentId]) => currentId.eq(stashId)) || [void 0, []])[1];
    const nextSessionIds = nextKeys.unwrapOr([]);
    return {
      nextSessionIds: Array.isArray(nextSessionIds) ? nextSessionIds : [...nextSessionIds.values()],
      sessionIds: Array.isArray(sessionIds) ? sessionIds : [...sessionIds.values()]
    };
  }
  const keys = /* @__PURE__ */ firstMemo((api, stashId) => api.derive.staking.keysMulti([stashId]));
  function keysMulti(instanceId, api) {
    return memo(instanceId, (stashIds) => stashIds.length ? api.query.session.queuedKeys().pipe(switchMap((queuedKeys) => {
      var _a;
      return combineLatest([
        of(queuedKeys),
        ((_a = api.consts["session"]) == null ? void 0 : _a["dedupKeyPrefix"]) ? api.query.session.nextKeys.multi(stashIds.map((s) => [api.consts["session"]["dedupKeyPrefix"], s])) : combineLatest(stashIds.map((s) => api.query.session.nextKeys(s)))
      ]);
    }), map(([queuedKeys, nextKeys]) => stashIds.map((stashId, index2) => extractsIds(stashId, queuedKeys, nextKeys[index2])))) : of([]));
  }
  function overview(instanceId, api) {
    return memo(instanceId, () => combineLatest([
      api.derive.session.indexes(),
      api.derive.staking.validators()
    ]).pipe(map(([indexes2, { nextElected: nextElected2, validators: validators2 }]) => objectSpread({}, indexes2, {
      nextElected: nextElected2,
      validators: validators2
    }))));
  }
  function _ownExposures(instanceId, api) {
    return memo(instanceId, (accountId2, eras, _withActive) => eras.length ? combineLatest([
      combineLatest(eras.map((e) => api.query.staking.erasStakersClipped(e, accountId2))),
      combineLatest(eras.map((e) => api.query.staking.erasStakers(e, accountId2)))
    ]).pipe(map(([clp, exp]) => eras.map((era, index2) => ({ clipped: clp[index2], era, exposure: exp[index2] })))) : of([]));
  }
  const ownExposure = /* @__PURE__ */ firstMemo((api, accountId2, era) => api.derive.staking._ownExposures(accountId2, [era], true));
  const ownExposures = /* @__PURE__ */ erasHistoricApplyAccount("_ownExposures");
  function _ownSlashes(instanceId, api) {
    return memo(instanceId, (accountId2, eras, _withActive) => eras.length ? combineLatest([
      combineLatest(eras.map((e) => api.query.staking.validatorSlashInEra(e, accountId2))),
      combineLatest(eras.map((e) => api.query.staking.nominatorSlashInEra(e, accountId2)))
    ]).pipe(map(([vals, noms]) => eras.map((era, index2) => ({
      era,
      total: vals[index2].isSome ? vals[index2].unwrap()[1] : noms[index2].unwrapOrDefault()
    })))) : of([]));
  }
  const ownSlash = /* @__PURE__ */ firstMemo((api, accountId2, era) => api.derive.staking._ownSlashes(accountId2, [era], true));
  const ownSlashes = /* @__PURE__ */ erasHistoricApplyAccount("_ownSlashes");
  function parseDetails(stashId, controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure, stakingLedgerOpt) {
    return {
      accountId: stashId,
      controllerId: controllerIdOpt && controllerIdOpt.unwrapOr(null),
      exposure,
      nominators: nominatorsOpt.isSome ? nominatorsOpt.unwrap().targets : [],
      rewardDestination,
      stakingLedger: stakingLedgerOpt.unwrapOrDefault(),
      stashId,
      validatorPrefs
    };
  }
  function getLedgers(api, optIds, { withLedger = false }) {
    const ids = optIds.filter((o) => withLedger && !!o && o.isSome).map((o) => o.unwrap());
    const emptyLed = api.registry.createType("Option<StakingLedger>");
    return (ids.length ? combineLatest(ids.map((s) => api.query.staking.ledger(s))) : of([])).pipe(map((optLedgers) => {
      let offset = -1;
      return optIds.map((o) => o && o.isSome ? optLedgers[++offset] || emptyLed : emptyLed);
    }));
  }
  function getStashInfo(api, stashIds, activeEra, { withController, withDestination, withExposure, withLedger, withNominations, withPrefs }) {
    const emptyNoms = api.registry.createType("Option<Nominations>");
    const emptyRewa = api.registry.createType("RewardDestination");
    const emptyExpo = api.registry.createType("Exposure");
    const emptyPrefs = api.registry.createType("ValidatorPrefs");
    return combineLatest([
      withController || withLedger ? combineLatest(stashIds.map((s) => api.query.staking.bonded(s))) : of(stashIds.map(() => null)),
      withNominations ? combineLatest(stashIds.map((s) => api.query.staking.nominators(s))) : of(stashIds.map(() => emptyNoms)),
      withDestination ? combineLatest(stashIds.map((s) => api.query.staking.payee(s))) : of(stashIds.map(() => emptyRewa)),
      withPrefs ? combineLatest(stashIds.map((s) => api.query.staking.validators(s))) : of(stashIds.map(() => emptyPrefs)),
      withExposure ? combineLatest(stashIds.map((s) => api.query.staking.erasStakers(activeEra, s))) : of(stashIds.map(() => emptyExpo))
    ]);
  }
  function getBatch(api, activeEra, stashIds, flags2) {
    return getStashInfo(api, stashIds, activeEra, flags2).pipe(switchMap(([controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure]) => getLedgers(api, controllerIdOpt, flags2).pipe(map((stakingLedgerOpts) => stashIds.map((stashId, index2) => parseDetails(stashId, controllerIdOpt[index2], nominatorsOpt[index2], rewardDestination[index2], validatorPrefs[index2], exposure[index2], stakingLedgerOpts[index2]))))));
  }
  const query$1 = /* @__PURE__ */ firstMemo((api, accountId2, flags2) => api.derive.staking.queryMulti([accountId2], flags2));
  function queryMulti(instanceId, api) {
    return memo(instanceId, (accountIds, flags2) => api.derive.session.indexes().pipe(switchMap(({ activeEra }) => {
      const stashIds = accountIds.map((a) => api.registry.createType("AccountId", a));
      return stashIds.length ? getBatch(api, activeEra, stashIds, flags2) : of([]);
    })));
  }
  function _stakerExposures(instanceId, api) {
    return memo(instanceId, (accountIds, eras, withActive = false) => {
      const stakerIds = accountIds.map((a) => api.registry.createType("AccountId", a).toString());
      return api.derive.staking._erasExposure(eras, withActive).pipe(map((exposures) => stakerIds.map((stakerId) => exposures.map(({ era, nominators: allNominators, validators: allValidators }) => {
        const isValidator = !!allValidators[stakerId];
        const validators2 = {};
        const nominating = allNominators[stakerId] || [];
        if (isValidator) {
          validators2[stakerId] = allValidators[stakerId];
        } else if (nominating) {
          nominating.forEach(({ validatorId }) => {
            validators2[validatorId] = allValidators[validatorId];
          });
        }
        return { era, isEmpty: !Object.keys(validators2).length, isValidator, nominating, validators: validators2 };
      }))));
    });
  }
  function stakerExposures(instanceId, api) {
    return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((eras) => api.derive.staking._stakerExposures(accountIds, eras, withActive))));
  }
  const stakerExposure = /* @__PURE__ */ firstMemo((api, accountId2, withActive) => api.derive.staking.stakerExposures([accountId2], withActive));
  function _stakerPoints(instanceId, api) {
    return memo(instanceId, (accountId2, eras, withActive) => {
      const stakerId = api.registry.createType("AccountId", accountId2).toString();
      return api.derive.staking._erasPoints(eras, withActive).pipe(map((points) => points.map(({ era, eraPoints, validators: validators2 }) => ({
        era,
        eraPoints,
        points: validators2[stakerId] || api.registry.createType("RewardPoint")
      }))));
    });
  }
  const stakerPoints = /* @__PURE__ */ erasHistoricApplyAccount("_stakerPoints");
  function _stakerPrefs(instanceId, api) {
    return memo(instanceId, (accountId2, eras, _withActive) => api.query.staking.erasValidatorPrefs.multi(eras.map((e) => [e, accountId2])).pipe(map((all2) => all2.map((validatorPrefs, index2) => ({
      era: eras[index2],
      validatorPrefs
    })))));
  }
  const stakerPrefs = /* @__PURE__ */ erasHistoricApplyAccount("_stakerPrefs");
  function parseRewards(api, stashId, [erasPoints2, erasPrefs2, erasRewards2], exposures) {
    return exposures.map(({ era, isEmpty: isEmpty2, isValidator, nominating, validators: eraValidators }) => {
      const { eraPoints, validators: allValPoints } = erasPoints2.find((p) => p.era.eq(era)) || { eraPoints: BN_ZERO, validators: {} };
      const { eraReward } = erasRewards2.find((r2) => r2.era.eq(era)) || { eraReward: api.registry.createType("Balance") };
      const { validators: allValPrefs } = erasPrefs2.find((p) => p.era.eq(era)) || { validators: {} };
      const validators2 = {};
      const stakerId = stashId.toString();
      Object.entries(eraValidators).forEach(([validatorId, exposure]) => {
        var _a, _b;
        const valPoints = allValPoints[validatorId] || BN_ZERO;
        const valComm = ((_a = allValPrefs[validatorId]) == null ? void 0 : _a.commission.unwrap()) || BN_ZERO;
        const expTotal = ((_b = exposure.total) == null ? void 0 : _b.unwrap()) || BN_ZERO;
        let avail = BN_ZERO;
        let value;
        if (!(expTotal.isZero() || valPoints.isZero() || eraPoints.isZero())) {
          avail = eraReward.mul(valPoints).div(eraPoints);
          const valCut = valComm.mul(avail).div(BN_BILLION);
          let staked;
          if (validatorId === stakerId) {
            staked = exposure.own.unwrap();
          } else {
            const stakerExp = exposure.others.find(({ who }) => who.eq(stakerId));
            staked = stakerExp ? stakerExp.value.unwrap() : BN_ZERO;
          }
          value = avail.sub(valCut).imul(staked).div(expTotal).iadd(validatorId === stakerId ? valCut : BN_ZERO);
        }
        validators2[validatorId] = {
          total: api.registry.createType("Balance", avail),
          value: api.registry.createType("Balance", value)
        };
      });
      return {
        era,
        eraReward,
        isEmpty: isEmpty2,
        isValidator,
        nominating,
        validators: validators2
      };
    });
  }
  function allUniqValidators(rewards) {
    return rewards.reduce(([all2, perStash], rewards2) => {
      const uniq = [];
      perStash.push(uniq);
      rewards2.forEach(({ validators: validators2 }) => Object.keys(validators2).forEach((validatorId) => {
        if (!uniq.includes(validatorId)) {
          uniq.push(validatorId);
          if (!all2.includes(validatorId)) {
            all2.push(validatorId);
          }
        }
      }));
      return [all2, perStash];
    }, [[], []]);
  }
  function removeClaimed(validators2, queryValidators, reward) {
    const rm = [];
    Object.keys(reward.validators).forEach((validatorId) => {
      const index2 = validators2.indexOf(validatorId);
      if (index2 !== -1) {
        const valLedger = queryValidators[index2].stakingLedger;
        if (valLedger == null ? void 0 : valLedger.claimedRewards.some((e) => reward.era.eq(e))) {
          rm.push(validatorId);
        }
      }
    });
    rm.forEach((validatorId) => {
      delete reward.validators[validatorId];
    });
  }
  function filterRewards(eras, valInfo, { rewards, stakingLedger }) {
    const filter2 = eras.filter((e) => !stakingLedger.claimedRewards.some((s) => s.eq(e)));
    const validators2 = valInfo.map(([v]) => v);
    const queryValidators = valInfo.map(([, q]) => q);
    return rewards.filter(({ isEmpty: isEmpty2 }) => !isEmpty2).filter((reward) => {
      if (!filter2.some((e) => reward.era.eq(e))) {
        return false;
      }
      removeClaimed(validators2, queryValidators, reward);
      return true;
    }).filter(({ validators: validators3 }) => Object.keys(validators3).length !== 0).map((reward) => objectSpread({}, reward, {
      nominators: reward.nominating.filter((n) => reward.validators[n.validatorId])
    }));
  }
  function _stakerRewardsEras(instanceId, api) {
    return memo(instanceId, (eras, withActive = false) => combineLatest([
      api.derive.staking._erasPoints(eras, withActive),
      api.derive.staking._erasPrefs(eras, withActive),
      api.derive.staking._erasRewards(eras, withActive)
    ]));
  }
  function _stakerRewards(instanceId, api) {
    return memo(instanceId, (accountIds, eras, withActive = false) => combineLatest([
      api.derive.staking.queryMulti(accountIds, { withLedger: true }),
      api.derive.staking._stakerExposures(accountIds, eras, withActive),
      api.derive.staking._stakerRewardsEras(eras, withActive)
    ]).pipe(switchMap(([queries, exposures, erasResult]) => {
      const allRewards = queries.map(({ stakingLedger, stashId }, index2) => !stashId || !stakingLedger ? [] : parseRewards(api, stashId, erasResult, exposures[index2]));
      if (withActive) {
        return of(allRewards);
      }
      const [allValidators, stashValidators] = allUniqValidators(allRewards);
      return api.derive.staking.queryMulti(allValidators, { withLedger: true }).pipe(map((queriedVals) => queries.map(({ stakingLedger }, index2) => filterRewards(eras, stashValidators[index2].map((validatorId) => [
        validatorId,
        queriedVals.find((q) => q.accountId.eq(validatorId))
      ]), {
        rewards: allRewards[index2],
        stakingLedger
      }))));
    })));
  }
  const stakerRewards = /* @__PURE__ */ firstMemo((api, accountId2, withActive) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((eras) => api.derive.staking._stakerRewards([accountId2], eras, withActive))));
  function stakerRewardsMultiEras(instanceId, api) {
    return memo(instanceId, (accountIds, eras) => accountIds.length && eras.length ? api.derive.staking._stakerRewards(accountIds, eras, false) : of([]));
  }
  function stakerRewardsMulti(instanceId, api) {
    return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((eras) => api.derive.staking.stakerRewardsMultiEras(accountIds, eras))));
  }
  function _stakerSlashes(instanceId, api) {
    return memo(instanceId, (accountId2, eras, withActive) => {
      const stakerId = api.registry.createType("AccountId", accountId2).toString();
      return api.derive.staking._erasSlashes(eras, withActive).pipe(map((slashes) => slashes.map(({ era, nominators, validators: validators2 }) => ({
        era,
        total: nominators[stakerId] || validators2[stakerId] || api.registry.createType("Balance")
      }))));
    });
  }
  const stakerSlashes = /* @__PURE__ */ erasHistoricApplyAccount("_stakerSlashes");
  function onBondedEvent(api) {
    let current = Date.now();
    return api.query.system.events().pipe(map((events2) => {
      current = events2.filter(({ event, phase }) => {
        try {
          return phase.isApplyExtrinsic && event.section === "staking" && event.method === "Bonded";
        } catch {
          return false;
        }
      }) ? Date.now() : current;
      return current;
    }), startWith(current), drr({ skipTimeout: true }));
  }
  function stashes(instanceId, api) {
    return memo(instanceId, () => onBondedEvent(api).pipe(switchMap(() => api.query.staking.validators.keys()), map((keys2) => keys2.map(({ args: [v] }) => v).filter((a) => a))));
  }
  function nextElected(instanceId, api) {
    return memo(instanceId, () => api.query.staking.erasStakers ? api.derive.session.indexes().pipe(
      // only populate for next era in the last session, so track both here - entries are not
      // subscriptions, so we need a trigger - currentIndex acts as that trigger to refresh
      switchMap(({ currentEra }) => api.query.staking.erasStakers.keys(currentEra)),
      map((keys2) => keys2.map(({ args: [, accountId2] }) => accountId2))
    ) : api.query.staking["currentElected"]());
  }
  function validators$2(instanceId, api) {
    return memo(instanceId, () => (
      // Sadly the node-template is (for some obscure reason) not comprehensive, so while the derive works
      // in all actual real-world deployed chains, it does create some confusion for limited template chains
      combineLatest([
        api.query.session ? api.query.session.validators() : of([]),
        api.query.staking ? api.derive.staking.nextElected() : of([])
      ]).pipe(map(([validators2, nextElected2]) => ({
        nextElected: nextElected2.length ? nextElected2 : validators2,
        validators: validators2
      })))
    ));
  }
  const DEFAULT_FLAGS = { withController: true, withPrefs: true };
  function waitingInfo(instanceId, api) {
    return memo(instanceId, (flags2 = DEFAULT_FLAGS) => combineLatest([
      api.derive.staking.validators(),
      api.derive.staking.stashes()
    ]).pipe(switchMap(([{ nextElected: nextElected2 }, stashes2]) => {
      const elected = nextElected2.map((a) => a.toString());
      const waiting = stashes2.filter((v) => !elected.includes(v.toString()));
      return api.derive.staking.queryMulti(waiting, flags2).pipe(map((info2) => ({
        info: info2,
        waiting
      })));
    })));
  }
  const staking = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    _eraExposure,
    _eraPrefs,
    _eraSlashes,
    _erasExposure,
    _erasPoints,
    _erasPrefs,
    _erasRewards,
    _erasSlashes,
    _ownExposures,
    _ownSlashes,
    _stakerExposures,
    _stakerPoints,
    _stakerPrefs,
    _stakerRewards,
    _stakerRewardsEras,
    _stakerSlashes,
    account,
    accounts,
    currentPoints,
    electedInfo,
    eraExposure,
    eraPrefs,
    eraSlashes,
    erasExposure,
    erasHistoric,
    erasPoints,
    erasPrefs,
    erasRewards,
    erasSlashes,
    keys,
    keysMulti,
    nextElected,
    overview,
    ownExposure,
    ownExposures,
    ownSlash,
    ownSlashes,
    query: query$1,
    queryMulti,
    stakerExposure,
    stakerExposures,
    stakerPoints,
    stakerPrefs,
    stakerRewards,
    stakerRewardsMulti,
    stakerRewardsMultiEras,
    stakerSlashes,
    stashes,
    validators: validators$2,
    waitingInfo
  }, Symbol.toStringTag, { value: "Module" }));
  const members = /* @__PURE__ */ members$5("technicalCommittee");
  const hasProposals = /* @__PURE__ */ hasProposals$4("technicalCommittee");
  const proposal = /* @__PURE__ */ proposal$4("technicalCommittee");
  const proposalCount = /* @__PURE__ */ proposalCount$4("technicalCommittee");
  const proposalHashes = /* @__PURE__ */ proposalHashes$4("technicalCommittee");
  const proposals$1 = /* @__PURE__ */ proposals$6("technicalCommittee");
  const prime = /* @__PURE__ */ prime$4("technicalCommittee");
  const technicalCommittee = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    hasProposals,
    members,
    prime,
    proposal,
    proposalCount,
    proposalHashes,
    proposals: proposals$1
  }, Symbol.toStringTag, { value: "Module" }));
  function parseResult(api, { allIds, allProposals, approvalIds, councilProposals, proposalCount: proposalCount2 }) {
    const approvals = [];
    const proposals2 = [];
    const councilTreasury = councilProposals.filter(({ proposal: proposal2 }) => proposal2 && (api.tx.treasury.approveProposal.is(proposal2) || api.tx.treasury.rejectProposal.is(proposal2)));
    allIds.forEach((id, index2) => {
      if (allProposals[index2].isSome) {
        const council2 = councilTreasury.filter(({ proposal: proposal2 }) => proposal2 && id.eq(proposal2.args[0])).sort((a, b) => a.proposal && b.proposal ? a.proposal.method.localeCompare(b.proposal.method) : a.proposal ? -1 : 1);
        const isApproval = approvalIds.some((approvalId) => approvalId.eq(id));
        const derived = { council: council2, id, proposal: allProposals[index2].unwrap() };
        if (isApproval) {
          approvals.push(derived);
        } else {
          proposals2.push(derived);
        }
      }
    });
    return { approvals, proposalCount: proposalCount2, proposals: proposals2 };
  }
  function retrieveProposals(api, proposalCount2, approvalIds) {
    const proposalIds = [];
    const count = proposalCount2.toNumber();
    for (let index2 = 0; index2 < count; index2++) {
      if (!approvalIds.some((id) => id.eqn(index2))) {
        proposalIds.push(api.registry.createType("ProposalIndex", index2));
      }
    }
    const allIds = [...proposalIds, ...approvalIds];
    return combineLatest([
      api.query.treasury.proposals.multi(allIds),
      api.derive.council ? api.derive.council.proposals() : of([])
    ]).pipe(map(([allProposals, councilProposals]) => parseResult(api, { allIds, allProposals, approvalIds, councilProposals, proposalCount: proposalCount2 })));
  }
  function proposals(instanceId, api) {
    return memo(instanceId, () => api.query.treasury ? combineLatest([
      api.query.treasury.proposalCount(),
      api.query.treasury.approvals()
    ]).pipe(switchMap(([proposalCount2, approvalIds]) => retrieveProposals(api, proposalCount2, approvalIds))) : of({
      approvals: [],
      proposalCount: api.registry.createType("ProposalIndex"),
      proposals: []
    }));
  }
  const treasury = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    proposals
  }, Symbol.toStringTag, { value: "Module" }));
  function events(instanceId, api) {
    return memo(instanceId, (blockHash) => combineLatest([
      api.rpc.chain.getBlock(blockHash),
      api.queryAt(blockHash).pipe(switchMap((queryAt) => queryAt.system.events()))
    ]).pipe(map(([block, events2]) => ({ block, events: events2 }))));
  }
  const FALLBACK_MAX_HASH_COUNT = 250;
  const FALLBACK_PERIOD = new BN(6 * 1e3);
  const MAX_FINALITY_LAG = new BN(5);
  const MORTAL_PERIOD = new BN(5 * 60 * 1e3);
  function latestNonce(api, address) {
    return api.derive.balances.account(address).pipe(map(({ accountNonce }) => accountNonce));
  }
  function nextNonce(api, address) {
    var _a;
    return ((_a = api.rpc.system) == null ? void 0 : _a.accountNextIndex) ? api.rpc.system.accountNextIndex(address) : latestNonce(api, address);
  }
  function signingHeader(api) {
    return combineLatest([
      api.rpc.chain.getHeader().pipe(switchMap((header) => (
        // check for chains at genesis (until block 1 is produced, e.g. 6s), since
        // we do need to allow transactions at chain start (also dev/seal chains)
        header.parentHash.isEmpty ? of(header) : api.rpc.chain.getHeader(header.parentHash).pipe(catchError(() => of(header)))
      ))),
      api.rpc.chain.getFinalizedHead().pipe(switchMap((hash2) => api.rpc.chain.getHeader(hash2).pipe(catchError(() => of(null)))))
    ]).pipe(map(([current, finalized]) => (
      // determine the hash to use, current when lag > max, else finalized
      !finalized || unwrapBlockNumber(current).sub(unwrapBlockNumber(finalized)).gt(MAX_FINALITY_LAG) ? current : finalized
    )));
  }
  function signingInfo(_instanceId, api) {
    return (address, nonce, era) => combineLatest([
      // retrieve nonce if none was specified
      isUndefined$1(nonce) ? latestNonce(api, address) : nonce === -1 ? nextNonce(api, address) : of(api.registry.createType("Index", nonce)),
      // if no era (create) or era > 0 (mortal), do block retrieval
      isUndefined$1(era) || isNumber$1(era) && era > 0 ? signingHeader(api) : of(null)
    ]).pipe(map(([nonce2, header]) => {
      var _a, _b, _c, _d;
      return {
        header,
        mortalLength: Math.min(((_b = (_a = api.consts.system) == null ? void 0 : _a.blockHashCount) == null ? void 0 : _b.toNumber()) || FALLBACK_MAX_HASH_COUNT, MORTAL_PERIOD.div(((_c = api.consts.babe) == null ? void 0 : _c.expectedBlockTime) || ((_d = api.consts.timestamp) == null ? void 0 : _d.minimumPeriod.muln(2)) || FALLBACK_PERIOD).iadd(MAX_FINALITY_LAG).toNumber()),
        nonce: nonce2
      };
    }));
  }
  const tx$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    events,
    signingInfo
  }, Symbol.toStringTag, { value: "Module" }));
  const derive = { accounts: accounts$1, alliance, bagsList, balances, bounties, chain, contracts, council, crowdloan, democracy, elections, imOnline, membership, parachains, session, society, staking, technicalCommittee, treasury, tx: tx$1 };
  const checks = {
    allianceMotion: {
      instances: ["allianceMotion"],
      methods: []
    },
    bagsList: {
      instances: ["voterBagsList", "voterList", "bagsList"],
      methods: [],
      withDetect: true
    },
    contracts: {
      instances: ["contracts"],
      methods: []
    },
    council: {
      instances: ["council"],
      methods: [],
      withDetect: true
    },
    crowdloan: {
      instances: ["crowdloan"],
      methods: []
    },
    democracy: {
      instances: ["democracy"],
      methods: []
    },
    elections: {
      instances: ["phragmenElection", "electionsPhragmen", "elections", "council"],
      methods: [],
      withDetect: true
    },
    imOnline: {
      instances: ["imOnline"],
      methods: []
    },
    membership: {
      instances: ["membership"],
      methods: []
    },
    parachains: {
      instances: ["parachains", "registrar"],
      methods: []
    },
    session: {
      instances: ["session"],
      methods: []
    },
    society: {
      instances: ["society"],
      methods: []
    },
    staking: {
      instances: ["staking"],
      methods: ["erasRewardPoints"]
    },
    technicalCommittee: {
      instances: ["technicalCommittee"],
      methods: [],
      withDetect: true
    },
    treasury: {
      instances: ["treasury"],
      methods: []
    }
  };
  function getModuleInstances(api, specName, moduleName) {
    return api.registry.getModuleInstances(specName, moduleName) || [];
  }
  function injectFunctions(instanceId, api, derives) {
    const result = {};
    const names = Object.keys(derives);
    const keys2 = Object.keys(api.query);
    const specName = api.runtimeVersion.specName;
    const filterKeys = (q) => keys2.includes(q);
    const filterInstances = (q) => getModuleInstances(api, specName, q).some(filterKeys);
    const filterMethods = (all2) => (m2) => all2.some((q) => keys2.includes(q) && api.query[q][m2]);
    const getKeys2 = (s) => Object.keys(derives[s]);
    const creator = (s, m2) => derives[s][m2](instanceId, api);
    const isIncluded = (c) => !checks[c] || (checks[c].instances.some(filterKeys) && (!checks[c].methods.length || checks[c].methods.every(filterMethods(checks[c].instances))) || checks[c].withDetect && checks[c].instances.some(filterInstances));
    for (let i2 = 0, count = names.length; i2 < count; i2++) {
      const name = names[i2];
      isIncluded(name) && lazyDeriveSection(result, name, getKeys2, creator);
    }
    return result;
  }
  function getAvailableDerives(instanceId, api, custom2 = {}) {
    return {
      ...injectFunctions(instanceId, api, derive),
      ...injectFunctions(instanceId, api, custom2)
    };
  }
  function decorateDeriveSections(decorateMethod, derives) {
    const getKeys2 = (s) => Object.keys(derives[s]);
    const creator = (s, m2) => decorateMethod(derives[s][m2]);
    const result = {};
    const names = Object.keys(derives);
    for (let i2 = 0, count = names.length; i2 < count; i2++) {
      lazyDeriveSection(result, names[i2], getKeys2, creator);
    }
    return result;
  }
  const recordIdentity = (record) => record;
  function filterAndApply(events2, section2, methods, onFound) {
    return events2.filter(({ event }) => section2 === event.section && methods.includes(event.method)).map((record) => onFound(record));
  }
  function getDispatchError({ event: { data: [dispatchError] } }) {
    return dispatchError;
  }
  function getDispatchInfo({ event: { data: data2, method } }) {
    return method === "ExtrinsicSuccess" ? data2[0] : data2[1];
  }
  function extractError(events2 = []) {
    return filterAndApply(events2, "system", ["ExtrinsicFailed"], getDispatchError)[0];
  }
  function extractInfo(events2 = []) {
    return filterAndApply(events2, "system", ["ExtrinsicFailed", "ExtrinsicSuccess"], getDispatchInfo)[0];
  }
  class SubmittableResult {
    constructor({ blockNumber, dispatchError, dispatchInfo, events: events2, internalError, status, txHash, txIndex }) {
      this.dispatchError = dispatchError || extractError(events2);
      this.dispatchInfo = dispatchInfo || extractInfo(events2);
      this.events = events2 || [];
      this.internalError = internalError;
      this.status = status;
      this.txHash = txHash;
      this.txIndex = txIndex;
      this.blockNumber = blockNumber;
    }
    get isCompleted() {
      return this.isError || this.status.isInBlock || this.status.isFinalized;
    }
    get isError() {
      return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;
    }
    get isFinalized() {
      return this.status.isFinalized;
    }
    get isInBlock() {
      return this.status.isInBlock;
    }
    get isWarning() {
      return this.status.isRetracted;
    }
    /**
     * @description Filters EventRecords for the specified method & section (there could be multiple)
     */
    filterRecords(section2, method) {
      return filterAndApply(this.events, section2, Array.isArray(method) ? method : [method], recordIdentity);
    }
    /**
     * @description Finds an EventRecord for the specified method & section
     */
    findRecord(section2, method) {
      return this.filterRecords(section2, method)[0];
    }
    /**
     * @description Creates a human representation of the output
     */
    toHuman(isExtended) {
      var _a, _b, _c;
      return {
        dispatchError: (_a = this.dispatchError) == null ? void 0 : _a.toHuman(),
        dispatchInfo: (_b = this.dispatchInfo) == null ? void 0 : _b.toHuman(),
        events: this.events.map((e) => e.toHuman(isExtended)),
        internalError: (_c = this.internalError) == null ? void 0 : _c.message.toString(),
        status: this.status.toHuman(isExtended)
      };
    }
  }
  function makeEraOptions(api, registry, partialOptions, { header, mortalLength, nonce }) {
    if (!header) {
      if (partialOptions.era && !partialOptions.blockHash) {
        throw new Error("Expected blockHash to be passed alongside non-immortal era options");
      }
      if (isNumber$1(partialOptions.era)) {
        delete partialOptions.era;
        delete partialOptions.blockHash;
      }
      return makeSignOptions(api, partialOptions, { nonce });
    }
    return makeSignOptions(api, partialOptions, {
      blockHash: header.hash,
      era: registry.createTypeUnsafe("ExtrinsicEra", [{
        current: header.number,
        period: partialOptions.era || mortalLength
      }]),
      nonce
    });
  }
  function makeSignAndSendOptions(partialOptions, statusCb) {
    let options = {};
    if (isFunction$2(partialOptions)) {
      statusCb = partialOptions;
    } else {
      options = objectSpread({}, partialOptions);
    }
    return [options, statusCb];
  }
  function makeSignOptions(api, partialOptions, extras) {
    return objectSpread({ blockHash: api.genesisHash, genesisHash: api.genesisHash }, partialOptions, extras, { runtimeVersion: api.runtimeVersion, signedExtensions: api.registry.signedExtensions, version: api.extrinsicType });
  }
  function optionsOrNonce(partialOptions = {}) {
    return isBn(partialOptions) || isNumber$1(partialOptions) ? { nonce: partialOptions } : partialOptions;
  }
  function createClass({ api, apiType, blockHash, decorateMethod }) {
    const ExtrinsicBase2 = api.registry.createClass("Extrinsic");
    class Submittable extends ExtrinsicBase2 {
      constructor(registry, extrinsic) {
        super(registry, extrinsic, { version: api.extrinsicType });
        this.__internal__transformResult = identity$2;
        this.__internal__observeSign = (account2, partialOptions) => {
          const address = isKeyringPair(account2) ? account2.address : account2.toString();
          const options = optionsOrNonce(partialOptions);
          return api.derive.tx.signingInfo(address, options.nonce, options.era).pipe(first(), mergeMap(async (signingInfo2) => {
            const eraOptions = makeEraOptions(api, this.registry, options, signingInfo2);
            let updateId = -1;
            if (isKeyringPair(account2)) {
              this.sign(account2, eraOptions);
            } else {
              updateId = await this.__internal__signViaSigner(address, eraOptions, signingInfo2.header);
            }
            return { options: eraOptions, updateId };
          }));
        };
        this.__internal__observeStatus = (txHash, status) => {
          if (!status.isFinalized && !status.isInBlock) {
            return of(this.__internal__transformResult(new SubmittableResult({
              status,
              txHash
            })));
          }
          const blockHash2 = status.isInBlock ? status.asInBlock : status.asFinalized;
          return api.derive.tx.events(blockHash2).pipe(map(({ block, events: events2 }) => this.__internal__transformResult(new SubmittableResult({
            ...filterEvents(txHash, block, events2, status),
            status,
            txHash
          }))), catchError((internalError) => of(this.__internal__transformResult(new SubmittableResult({
            internalError,
            status,
            txHash
          })))));
        };
        this.__internal__observeSend = (info2) => {
          return api.rpc.author.submitExtrinsic(this).pipe(tap((hash2) => {
            this.__internal__updateSigner(hash2, info2);
          }));
        };
        this.__internal__observeSubscribe = (info2) => {
          const txHash = this.hash;
          return api.rpc.author.submitAndWatchExtrinsic(this).pipe(switchMap((status) => this.__internal__observeStatus(txHash, status)), tap((status) => {
            this.__internal__updateSigner(status, info2);
          }));
        };
        this.__internal__signViaSigner = async (address, options, header) => {
          const signer = options.signer || api.signer;
          if (!signer) {
            throw new Error("No signer specified, either via api.setSigner or via sign options. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.");
          }
          const payload = this.registry.createTypeUnsafe("SignerPayload", [objectSpread({}, options, {
            address,
            blockNumber: header ? header.number : 0,
            method: this.method
          })]);
          let result;
          if (isFunction$2(signer.signPayload)) {
            result = await signer.signPayload(payload.toPayload());
          } else if (isFunction$2(signer.signRaw)) {
            result = await signer.signRaw(payload.toRaw());
          } else {
            throw new Error("Invalid signer interface, it should implement either signPayload or signRaw (or both)");
          }
          super.addSignature(address, result.signature, payload.toPayload());
          return result.id;
        };
        this.__internal__updateSigner = (status, info2) => {
          if (info2 && info2.updateId !== -1) {
            const { options, updateId } = info2;
            const signer = options.signer || api.signer;
            if (signer && isFunction$2(signer.update)) {
              signer.update(updateId, status);
            }
          }
        };
        this.__internal__ignoreStatusCb = apiType === "rxjs";
      }
      get hasDryRun() {
        var _a;
        return isFunction$2((_a = api.rpc.system) == null ? void 0 : _a.dryRun);
      }
      get hasPaymentInfo() {
        var _a;
        return isFunction$2((_a = api.call.transactionPaymentApi) == null ? void 0 : _a.queryInfo);
      }
      // dry run an extrinsic
      dryRun(account2, optionsOrHash) {
        if (!this.hasDryRun) {
          throw new Error("The system.dryRun RPC call is not available in your environment");
        }
        if (blockHash || isString$1(optionsOrHash) || isU8a(optionsOrHash)) {
          return decorateMethod(() => api.rpc.system.dryRun(this.toHex(), blockHash || optionsOrHash));
        }
        return decorateMethod(() => this.__internal__observeSign(account2, optionsOrHash).pipe(switchMap(() => api.rpc.system.dryRun(this.toHex()))))();
      }
      // calculate the payment info for this transaction (if signed and submitted)
      paymentInfo(account2, optionsOrHash) {
        if (!this.hasPaymentInfo) {
          throw new Error("The transactionPaymentApi.queryInfo runtime call is not available in your environment");
        }
        if (blockHash || isString$1(optionsOrHash) || isU8a(optionsOrHash)) {
          return decorateMethod(() => api.callAt(blockHash || optionsOrHash).pipe(switchMap((callAt) => {
            const u8a2 = this.toU8a();
            return callAt.transactionPaymentApi.queryInfo(u8a2, u8a2.length);
          })));
        }
        const [allOptions] = makeSignAndSendOptions(optionsOrHash);
        const address = isKeyringPair(account2) ? account2.address : account2.toString();
        return decorateMethod(() => api.derive.tx.signingInfo(address, allOptions.nonce, allOptions.era).pipe(first(), switchMap((signingInfo2) => {
          const eraOptions = makeEraOptions(api, this.registry, allOptions, signingInfo2);
          const signOptions = makeSignOptions(api, eraOptions, {});
          const u8a2 = api.tx(this.toU8a()).signFake(address, signOptions).toU8a();
          return api.call.transactionPaymentApi.queryInfo(u8a2, u8a2.length);
        })))();
      }
      // send implementation for both immediate Hash and statusCb variants
      send(statusCb) {
        const isSubscription2 = api.hasSubscriptions && (this.__internal__ignoreStatusCb || !!statusCb);
        return decorateMethod(isSubscription2 ? this.__internal__observeSubscribe : this.__internal__observeSend)(statusCb);
      }
      /**
       * @description Signs a transaction, returning `this` to allow chaining. E.g.: `signAsync(...).send()`. Like `.signAndSend` this will retrieve the nonce and blockHash to send the tx with.
       */
      signAsync(account2, partialOptions) {
        return decorateMethod(() => this.__internal__observeSign(account2, partialOptions).pipe(map(() => this)))();
      }
      // signAndSend implementation for all 3 cases above
      signAndSend(account2, partialOptions, optionalStatusCb) {
        const [options, statusCb] = makeSignAndSendOptions(partialOptions, optionalStatusCb);
        const isSubscription2 = api.hasSubscriptions && (this.__internal__ignoreStatusCb || !!statusCb);
        return decorateMethod(
          () => this.__internal__observeSign(account2, options).pipe(switchMap((info2) => isSubscription2 ? this.__internal__observeSubscribe(info2) : this.__internal__observeSend(info2)))
          // FIXME This is wrong, SubmittableResult is _not_ a codec
        )(statusCb);
      }
      // adds a transform to the result, applied before result is returned
      withResultTransform(transform) {
        this.__internal__transformResult = transform;
        return this;
      }
    }
    return Submittable;
  }
  function createSubmittable(apiType, api, decorateMethod, registry, blockHash) {
    const Submittable = createClass({ api, apiType, blockHash, decorateMethod });
    return (extrinsic) => new Submittable(registry || api.registry, extrinsic);
  }
  function findCall(registry, callIndex) {
    return registry.findMetaCall(u8aToU8a(callIndex));
  }
  function findError(registry, errorIndex) {
    return registry.findMetaError(u8aToU8a(errorIndex));
  }
  const typesChain = {};
  const sharedTypes$5 = {
    // Anchor
    AnchorData: {
      anchoredBlock: "u64",
      docRoot: "H256",
      id: "H256"
    },
    DispatchErrorModule: "DispatchErrorModuleU8",
    PreCommitData: {
      expirationBlock: "u64",
      identity: "H256",
      signingRoot: "H256"
    },
    // Fees
    Fee: {
      key: "Hash",
      price: "Balance"
    },
    // MultiAccount
    MultiAccountData: {
      deposit: "Balance",
      depositor: "AccountId",
      signatories: "Vec<AccountId>",
      threshold: "u16"
    },
    // Bridge
    ChainId: "u8",
    DepositNonce: "u64",
    ResourceId: "[u8; 32]",
    "chainbridge::ChainId": "u8",
    // NFT
    RegistryId: "H160",
    TokenId: "U256",
    AssetId: {
      registryId: "RegistryId",
      tokenId: "TokenId"
    },
    AssetInfo: {
      metadata: "Bytes"
    },
    MintInfo: {
      anchorId: "Hash",
      proofs: "Vec<ProofMint>",
      staticHashes: "[Hash; 3]"
    },
    Proof: {
      leafHash: "H256",
      sortedHashes: "H256"
    },
    ProofMint: {
      hashes: "Vec<Hash>",
      property: "Bytes",
      salt: "[u8; 32]",
      value: "Bytes"
    },
    RegistryInfo: {
      fields: "Vec<Bytes>",
      ownerCanBurn: "bool"
    },
    ProxyType: {
      _enum: [
        "Any",
        "NonTransfer",
        "Governance",
        "Staking",
        "NonProxy"
      ]
    }
  };
  const standaloneTypes = {
    ...sharedTypes$5,
    AccountInfo: "AccountInfoWithRefCount",
    Address: "LookupSource",
    LookupSource: "IndicesLookupSource",
    Multiplier: "Fixed64",
    RefCount: "RefCountTo259"
  };
  const versioned$8 = [
    {
      minmax: [240, 243],
      types: {
        ...standaloneTypes,
        ProxyType: {
          _enum: [
            "Any",
            "NonTransfer",
            "Governance",
            "Staking",
            "Vesting"
          ]
        }
      }
    },
    {
      minmax: [244, 999],
      types: { ...standaloneTypes }
    },
    {
      minmax: [1e3, void 0],
      types: { ...sharedTypes$5 }
    }
  ];
  const sharedTypes$4 = {
    CompactAssignments: "CompactAssignmentsWith24",
    DispatchErrorModule: "DispatchErrorModuleU8",
    RawSolution: "RawSolutionWith24",
    Keys: "SessionKeys6",
    ProxyType: {
      _enum: ["Any", "NonTransfer", "Governance", "Staking", "IdentityJudgement", "CancelProxy", "Auction"]
    },
    Weight: "WeightV1"
  };
  const addrIndicesTypes = {
    AccountInfo: "AccountInfoWithRefCount",
    Address: "LookupSource",
    CompactAssignments: "CompactAssignmentsWith16",
    DispatchErrorModule: "DispatchErrorModuleU8",
    RawSolution: "RawSolutionWith16",
    Keys: "SessionKeys5",
    LookupSource: "IndicesLookupSource",
    ValidatorPrefs: "ValidatorPrefsWithCommission"
  };
  const addrAccountIdTypes$2 = {
    AccountInfo: "AccountInfoWithRefCount",
    Address: "AccountId",
    CompactAssignments: "CompactAssignmentsWith16",
    DispatchErrorModule: "DispatchErrorModuleU8",
    RawSolution: "RawSolutionWith16",
    Keys: "SessionKeys5",
    LookupSource: "AccountId",
    ValidatorPrefs: "ValidatorPrefsWithCommission"
  };
  const versioned$7 = [
    {
      // 1020 is first CC3
      minmax: [1019, 1031],
      types: {
        ...addrIndicesTypes,
        BalanceLock: "BalanceLockTo212",
        CompactAssignments: "CompactAssignmentsTo257",
        DispatchError: "DispatchErrorTo198",
        DispatchInfo: "DispatchInfoTo244",
        Heartbeat: "HeartbeatTo244",
        IdentityInfo: "IdentityInfoTo198",
        Keys: "SessionKeys5",
        Multiplier: "Fixed64",
        OpenTip: "OpenTipTo225",
        RefCount: "RefCountTo259",
        ReferendumInfo: "ReferendumInfoTo239",
        Scheduled: "ScheduledTo254",
        SlashingSpans: "SlashingSpansTo204",
        StakingLedger: "StakingLedgerTo223",
        Votes: "VotesTo230",
        Weight: "u32"
      }
    },
    {
      minmax: [1032, 1042],
      types: {
        ...addrIndicesTypes,
        BalanceLock: "BalanceLockTo212",
        CompactAssignments: "CompactAssignmentsTo257",
        DispatchInfo: "DispatchInfoTo244",
        Heartbeat: "HeartbeatTo244",
        Keys: "SessionKeys5",
        Multiplier: "Fixed64",
        OpenTip: "OpenTipTo225",
        RefCount: "RefCountTo259",
        ReferendumInfo: "ReferendumInfoTo239",
        Scheduled: "ScheduledTo254",
        SlashingSpans: "SlashingSpansTo204",
        StakingLedger: "StakingLedgerTo223",
        Votes: "VotesTo230",
        Weight: "u32"
      }
    },
    {
      // actual at 1045 (1043-1044 is dev)
      minmax: [1043, 1045],
      types: {
        ...addrIndicesTypes,
        BalanceLock: "BalanceLockTo212",
        CompactAssignments: "CompactAssignmentsTo257",
        DispatchInfo: "DispatchInfoTo244",
        Heartbeat: "HeartbeatTo244",
        Keys: "SessionKeys5",
        Multiplier: "Fixed64",
        OpenTip: "OpenTipTo225",
        RefCount: "RefCountTo259",
        ReferendumInfo: "ReferendumInfoTo239",
        Scheduled: "ScheduledTo254",
        StakingLedger: "StakingLedgerTo223",
        Votes: "VotesTo230",
        Weight: "u32"
      }
    },
    {
      minmax: [1046, 1049],
      types: {
        ...sharedTypes$4,
        ...addrAccountIdTypes$2,
        CompactAssignments: "CompactAssignmentsTo257",
        DispatchInfo: "DispatchInfoTo244",
        Heartbeat: "HeartbeatTo244",
        Multiplier: "Fixed64",
        OpenTip: "OpenTipTo225",
        RefCount: "RefCountTo259",
        ReferendumInfo: "ReferendumInfoTo239",
        Scheduled: "ScheduledTo254",
        StakingLedger: "StakingLedgerTo223",
        Weight: "u32"
      }
    },
    {
      minmax: [1050, 1054],
      types: {
        ...sharedTypes$4,
        ...addrAccountIdTypes$2,
        CompactAssignments: "CompactAssignmentsTo257",
        DispatchInfo: "DispatchInfoTo244",
        Heartbeat: "HeartbeatTo244",
        Multiplier: "Fixed64",
        OpenTip: "OpenTipTo225",
        RefCount: "RefCountTo259",
        ReferendumInfo: "ReferendumInfoTo239",
        Scheduled: "ScheduledTo254",
        StakingLedger: "StakingLedgerTo240",
        Weight: "u32"
      }
    },
    {
      minmax: [1055, 1056],
      types: {
        ...sharedTypes$4,
        ...addrAccountIdTypes$2,
        CompactAssignments: "CompactAssignmentsTo257",
        DispatchInfo: "DispatchInfoTo244",
        Heartbeat: "HeartbeatTo244",
        Multiplier: "Fixed64",
        OpenTip: "OpenTipTo225",
        RefCount: "RefCountTo259",
        Scheduled: "ScheduledTo254",
        StakingLedger: "StakingLedgerTo240",
        Weight: "u32"
      }
    },
    {
      minmax: [1057, 1061],
      types: {
        ...sharedTypes$4,
        ...addrAccountIdTypes$2,
        CompactAssignments: "CompactAssignmentsTo257",
        DispatchInfo: "DispatchInfoTo244",
        Heartbeat: "HeartbeatTo244",
        OpenTip: "OpenTipTo225",
        RefCount: "RefCountTo259",
        // Last 100% known problematic runtime range - this quite possibly need to
        // apply to more runtime ranges that follow, we just don't know how far this
        // should be applied to
        //
        // TL;DR whack-a-mole since this was not histrically checked
        //
        // See https://github.com/polkadot-js/api/issues/5618#issuecomment-1530970316
        Scheduled: "ScheduledTo254"
      }
    },
    {
      minmax: [1062, 2012],
      types: {
        ...sharedTypes$4,
        ...addrAccountIdTypes$2,
        CompactAssignments: "CompactAssignmentsTo257",
        OpenTip: "OpenTipTo225",
        RefCount: "RefCountTo259"
      }
    },
    {
      minmax: [2013, 2022],
      types: {
        ...sharedTypes$4,
        ...addrAccountIdTypes$2,
        CompactAssignments: "CompactAssignmentsTo257",
        RefCount: "RefCountTo259"
      }
    },
    {
      minmax: [2023, 2024],
      types: {
        ...sharedTypes$4,
        ...addrAccountIdTypes$2,
        RefCount: "RefCountTo259"
      }
    },
    {
      minmax: [2025, 2027],
      types: {
        ...sharedTypes$4,
        ...addrAccountIdTypes$2
      }
    },
    {
      minmax: [2028, 2029],
      types: {
        ...sharedTypes$4,
        AccountInfo: "AccountInfoWithDualRefCount",
        CompactAssignments: "CompactAssignmentsWith16",
        RawSolution: "RawSolutionWith16"
      }
    },
    {
      minmax: [2030, 9e3],
      types: {
        ...sharedTypes$4,
        CompactAssignments: "CompactAssignmentsWith16",
        RawSolution: "RawSolutionWith16"
      }
    },
    {
      minmax: [9010, 9099],
      types: {
        ...sharedTypes$4,
        ...mapXcmTypes("V0")
      }
    },
    {
      // jump from 9100 to 9110, however align with Rococo
      minmax: [9100, 9105],
      types: {
        ...sharedTypes$4,
        ...mapXcmTypes("V1")
      }
    },
    {
      // metadata v14
      minmax: [9106, void 0],
      types: {
        Weight: "WeightV1"
      }
    }
    // ,
    // {
    //   // weight v2 introduction
    //   minmax: [9300, undefined],
    //   types: {
    //     Weight: 'WeightV2'
    //   }
    // }
  ];
  const versioned$6 = [
    {
      minmax: [0, void 0],
      types: {
        // nothing, API tracks master
        // (v2 weights are not yet the default)
        Weight: "WeightV2"
      }
    }
  ];
  const versioned$5 = [
    {
      minmax: [0, void 0],
      types: {
        // nothing, API tracks master
        // (v2 weights are not yet the default)
        Weight: "WeightV2"
      }
    }
  ];
  const sharedTypes$3 = {
    CompactAssignments: "CompactAssignmentsWith16",
    DispatchErrorModule: "DispatchErrorModuleU8",
    RawSolution: "RawSolutionWith16",
    Keys: "SessionKeys6",
    ProxyType: {
      _enum: {
        Any: 0,
        NonTransfer: 1,
        Governance: 2,
        Staking: 3,
        UnusedSudoBalances: 4,
        IdentityJudgement: 5,
        CancelProxy: 6,
        Auction: 7
      }
    },
    Weight: "WeightV1"
  };
  const addrAccountIdTypes$1 = {
    AccountInfo: "AccountInfoWithRefCount",
    Address: "AccountId",
    DispatchErrorModule: "DispatchErrorModuleU8",
    Keys: "SessionKeys5",
    LookupSource: "AccountId",
    ValidatorPrefs: "ValidatorPrefsWithCommission"
  };
  const versioned$4 = [
    {
      minmax: [0, 12],
      types: {
        ...sharedTypes$3,
        ...addrAccountIdTypes$1,
        CompactAssignments: "CompactAssignmentsTo257",
        OpenTip: "OpenTipTo225",
        RefCount: "RefCountTo259"
      }
    },
    {
      minmax: [13, 22],
      types: {
        ...sharedTypes$3,
        ...addrAccountIdTypes$1,
        CompactAssignments: "CompactAssignmentsTo257",
        RefCount: "RefCountTo259"
      }
    },
    {
      minmax: [23, 24],
      types: {
        ...sharedTypes$3,
        ...addrAccountIdTypes$1,
        RefCount: "RefCountTo259"
      }
    },
    {
      minmax: [25, 27],
      types: {
        ...sharedTypes$3,
        ...addrAccountIdTypes$1
      }
    },
    {
      minmax: [28, 29],
      types: {
        ...sharedTypes$3,
        AccountInfo: "AccountInfoWithDualRefCount"
      }
    },
    {
      minmax: [30, 9109],
      types: {
        ...sharedTypes$3
      }
    },
    {
      // metadata v14
      minmax: [9110, void 0],
      types: {
        Weight: "WeightV1"
      }
    }
    // ,
    // {
    //   // weight v2 introduction
    //   minmax: [9300, undefined],
    //   types: {
    //     Weight: 'WeightV2'
    //   }
    // }
  ];
  const sharedTypes$2 = {
    DispatchErrorModule: "DispatchErrorModuleU8",
    FullIdentification: "()",
    Keys: "SessionKeys7B",
    Weight: "WeightV1"
  };
  const versioned$3 = [
    {
      minmax: [0, 200],
      types: {
        ...sharedTypes$2,
        AccountInfo: "AccountInfoWithDualRefCount",
        Address: "AccountId",
        LookupSource: "AccountId"
      }
    },
    {
      minmax: [201, 214],
      types: {
        ...sharedTypes$2,
        AccountInfo: "AccountInfoWithDualRefCount"
      }
    },
    {
      minmax: [215, 228],
      types: {
        ...sharedTypes$2,
        Keys: "SessionKeys6"
      }
    },
    {
      minmax: [229, 9099],
      types: {
        ...sharedTypes$2,
        ...mapXcmTypes("V0")
      }
    },
    {
      minmax: [9100, 9105],
      types: {
        ...sharedTypes$2,
        ...mapXcmTypes("V1")
      }
    },
    {
      // metadata v14
      minmax: [9106, void 0],
      types: {
        Weight: "WeightV1"
      }
    }
    // ,
    // {
    //   // weight v2 introduction
    //   minmax: [9300, undefined],
    //   types: {
    //     Weight: 'WeightV2'
    //   }
    // }
  ];
  const versioned$2 = [
    {
      minmax: [0, void 0],
      types: {
        // nothing, limited runtime
      }
    }
  ];
  const sharedTypes$1 = {
    DispatchErrorModule: "DispatchErrorModuleU8",
    TAssetBalance: "u128",
    ProxyType: {
      _enum: [
        "Any",
        "NonTransfer",
        "CancelProxy",
        "Assets",
        "AssetOwner",
        "AssetManager",
        "Staking"
      ]
    },
    Weight: "WeightV1"
  };
  const versioned$1 = [
    {
      minmax: [0, 3],
      types: {
        // Enum was modified mid-flight -
        // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
        DispatchError: "DispatchErrorPre6First",
        ...sharedTypes$1,
        ...mapXcmTypes("V0")
      }
    },
    {
      minmax: [4, 5],
      types: {
        // As above, see https://github.com/polkadot-js/api/issues/5301
        DispatchError: "DispatchErrorPre6First",
        ...sharedTypes$1,
        ...mapXcmTypes("V1")
      }
    },
    {
      // metadata V14
      minmax: [500, void 0],
      types: {
        Weight: "WeightV1"
      }
    }
    // ,
    // {
    //   // weight v2 introduction
    //   minmax: [9300, undefined],
    //   types: {
    //     Weight: 'WeightV2'
    //   }
    // }
  ];
  const sharedTypes = {
    // 16 validators
    CompactAssignments: "CompactAssignmentsWith16",
    DispatchErrorModule: "DispatchErrorModuleU8",
    RawSolution: "RawSolutionWith16",
    // general
    Keys: "SessionKeys6",
    ProxyType: {
      _enum: ["Any", "NonTransfer", "Staking", "SudoBalances", "IdentityJudgement", "CancelProxy"]
    },
    Weight: "WeightV1"
  };
  const addrAccountIdTypes = {
    AccountInfo: "AccountInfoWithRefCount",
    Address: "AccountId",
    CompactAssignments: "CompactAssignmentsWith16",
    DispatchErrorModule: "DispatchErrorModuleU8",
    LookupSource: "AccountId",
    Keys: "SessionKeys5",
    RawSolution: "RawSolutionWith16",
    ValidatorPrefs: "ValidatorPrefsWithCommission"
  };
  const versioned = [
    {
      minmax: [1, 2],
      types: {
        ...sharedTypes,
        ...addrAccountIdTypes,
        CompactAssignments: "CompactAssignmentsTo257",
        DispatchInfo: "DispatchInfoTo244",
        Heartbeat: "HeartbeatTo244",
        Multiplier: "Fixed64",
        OpenTip: "OpenTipTo225",
        RefCount: "RefCountTo259",
        Weight: "u32"
      }
    },
    {
      minmax: [3, 22],
      types: {
        ...sharedTypes,
        ...addrAccountIdTypes,
        CompactAssignments: "CompactAssignmentsTo257",
        DispatchInfo: "DispatchInfoTo244",
        Heartbeat: "HeartbeatTo244",
        OpenTip: "OpenTipTo225",
        RefCount: "RefCountTo259"
      }
    },
    {
      minmax: [23, 42],
      types: {
        ...sharedTypes,
        ...addrAccountIdTypes,
        CompactAssignments: "CompactAssignmentsTo257",
        DispatchInfo: "DispatchInfoTo244",
        Heartbeat: "HeartbeatTo244",
        RefCount: "RefCountTo259"
      }
    },
    {
      minmax: [43, 44],
      types: {
        ...sharedTypes,
        ...addrAccountIdTypes,
        DispatchInfo: "DispatchInfoTo244",
        Heartbeat: "HeartbeatTo244",
        RefCount: "RefCountTo259"
      }
    },
    {
      minmax: [45, 47],
      types: {
        ...sharedTypes,
        ...addrAccountIdTypes
      }
    },
    {
      minmax: [48, 49],
      types: {
        ...sharedTypes,
        AccountInfo: "AccountInfoWithDualRefCount"
      }
    },
    {
      minmax: [50, 9099],
      types: {
        ...sharedTypes,
        ...mapXcmTypes("V0")
      }
    },
    {
      minmax: [9100, 9105],
      types: {
        ...sharedTypes,
        ...mapXcmTypes("V1")
      }
    },
    {
      // metadata v14
      minmax: [9106, void 0],
      types: {
        Weight: "WeightV1"
      }
    }
    // ,
    // {
    //   // weight v2 introduction
    //   minmax: [9300, undefined],
    //   types: {
    //     Weight: 'WeightV2'
    //   }
    // }
  ];
  const typesSpec = {
    "centrifuge-chain": versioned$8,
    kusama: versioned$7,
    node: versioned$6,
    "node-template": versioned$5,
    polkadot: versioned$4,
    rococo: versioned$3,
    shell: versioned$2,
    statemine: versioned$1,
    statemint: versioned$1,
    westend: versioned,
    westmint: versioned$1
  };
  const knownGenesis = {
    acala: [
      "0xfc41b9bd8ef8fe53d58c7ea67c794c7ec9a73daf05e6d54b14ff6342c99ba64c"
    ],
    ajuna: [
      "0xe358eb1d11b31255a286c12e44fe6780b7edb171d657905a97e39f71d9c6c3ee"
    ],
    "aleph-node": [
      "0x70255b4d28de0fc4e1a193d7e175ad1ccef431598211c55538f1018651a0344e"
    ],
    astar: [
      "0x9eb76c5184c4ab8679d2d5d819fdf90b9c001403e9e17da2e14b6d8aec4029c6"
    ],
    basilisk: [
      "0xa85cfb9b9fd4d622a5b28289a02347af987d8f73fa3108450e2b4a11c1ce5755"
    ],
    bifrost: [
      "0x262e1b2ad728475fd6fe88e62d34c200abe6fd693931ddad144059b1eb884e5b"
    ],
    "bifrost-kusama": [
      "0x9f28c6a68e0fc9646eff64935684f6eeeece527e37bbe1f213d22caa1d9d6bed"
    ],
    bittensor: [
      "0x2f0555cc76fc2840a25a6ea3b9637146806f1f44b090c175ffde2a7e5ab36c03"
    ],
    centrifuge: [
      "0xb3db41421702df9a7fcac62b53ffeac85f7853cc4e689e0b93aeb3db18c09d82",
      "0x67dddf2673b69e5f875f6f25277495834398eafd67f492e09f3f3345e003d1b5"
    ],
    cere: [
      "0x81443836a9a24caaa23f1241897d1235717535711d1d3fe24eae4fdc942c092c"
    ],
    composable: [
      "0xdaab8df776eb52ec604a5df5d388bb62a050a0aaec4556a64265b9d42755552d"
    ],
    darwinia: [
      "0xe71578b37a7c799b0ab4ee87ffa6f059a6b98f71f06fb8c84a8d88013a548ad6"
    ],
    "dock-mainnet": [
      "0x6bfe24dca2a3be10f22212678ac13a6446ec764103c0f3471c71609eac384aae",
      "0xf73467c6544aa68df2ee546b135f955c46b90fa627e9b5d7935f41061bb8a5a9"
    ],
    edgeware: [
      "0x742a2ca70c2fda6cee4f8df98d64c4c670a052d9568058982dad9d5a7a135c5b"
    ],
    equilibrium: [
      "0x6f1a800de3daff7f5e037ddf66ab22ce03ab91874debeddb1086f5f7dbd48925"
    ],
    genshiro: [
      "0x9b8cefc0eb5c568b527998bdd76c184e2b76ae561be76e4667072230217ea243"
    ],
    hydradx: [
      "0xafdc188f45c71dacbaa0b62e16a91f726c7b8699a9748cdf715459de6b7f366d",
      "0xd2a620c27ec5cbc5621ff9a522689895074f7cca0d08e7134a7804e1a3ba86fc",
      "0x10af6e84234477d84dc572bac0789813b254aa490767ed06fb9591191d1073f9",
      "0x3d75507dd46301767e601265791da1d9cb47b6ebc94e87347b635e5bf58bd047",
      "0x0ed32bfcab4a83517fac88f2aa7cbc2f88d3ab93be9a12b6188a036bf8a943c2"
      // Snakenet Gen1
    ],
    "interlay-parachain": [
      "0xbf88efe70e9e0e916416e8bed61f2b45717f517d7f3523e33c7b001e5ffcbc72"
    ],
    karura: [
      "0xbaf5aabe40646d11f0ee8abbdc64f4a4b7674925cba08e4a05ff9ebed6e2126b"
    ],
    khala: [
      "0xd43540ba6d3eb4897c28a77d48cb5b729fea37603cbbfc7a86a73b72adb3be8d"
    ],
    kulupu: [
      "0xf7a99d3cb92853d00d5275c971c132c074636256583fee53b3bbe60d7b8769ba"
    ],
    kusama: [
      "0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe",
      "0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636",
      "0x3fd7b9eb6a00376e5be61f01abb429ffb0b104be05eaff4d458da48fcd425baf"
      // Kusama CC1
    ],
    nodle: [
      "0x97da7ede98d7bad4e36b4d734b6055425a3be036da2a332ea5a7037656427a21"
    ],
    origintrail: [
      "0xe7e0962324a3b86c83404dbea483f25fb5dab4c224791c81b756cfc948006174"
    ],
    p3d: [
      "0x6c5894837ad89b6d92b114a2fb3eafa8fe3d26a54848e3447015442cd6ef4e66"
    ],
    parallel: [
      "0xe61a41c53f5dcd0beb09df93b34402aada44cb05117b71059cce40a2723a4e97"
    ],
    pendulum: [
      "0x5d3c298622d5634ed019bf61ea4b71655030015bde9beb0d6a24743714462c86"
    ],
    phala: [
      "0x1bb969d85965e4bb5a651abbedf21a54b6b31a21f66b5401cc3f1e286268d736"
    ],
    picasso: [
      "0x6811a339673c9daa897944dcdac99c6e2939cc88245ed21951a0a3c9a2be75bc",
      "0xe8e7f0f4c4f5a00720b4821dbfddefea7490bcf0b19009961cc46957984e2c1c"
    ],
    polkadex: [
      "0x3920bcb4960a1eef5580cd5367ff3f430eef052774f78468852f7b9cb39f8a3c"
    ],
    polkadot: [
      "0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3"
    ],
    polymesh: [
      "0x6fbd74e5e1d0a61d52ccfe9d4adaed16dd3a7caa37c6bc4d0c2fa12e8b2f4063"
    ],
    rococo: [
      "0x6408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063e",
      "0xaaf2cd1b74b5f726895921259421b534124726263982522174147046b8827897",
      "0x037f5f3c8e67b314062025fc886fcd6238ea25a4a9b45dce8d246815c9ebe770",
      "0xc196f81260cf1686172b47a79cf002120735d7cb0eb1474e8adce56618456fff",
      "0xf6e9983c37baf68846fedafe21e56718790e39fb1c582abc408b81bc7b208f9a",
      "0x5fce687da39305dfe682b117f0820b319348e8bb37eb16cf34acbf6a202de9d9",
      "0xe7c3d5edde7db964317cd9b51a3a059d7cd99f81bdbce14990047354334c9779",
      "0x1611e1dbf0405379b861e2e27daa90f480b2e6d3682414a80835a52e8cb8a215",
      "0x343442f12fa715489a8714e79a7b264ea88c0d5b8c66b684a7788a516032f6b9",
      "0x78bcd530c6b3a068bc17473cf5d2aff9c287102bed9af3ae3c41c33b9d6c6147",
      "0x47381ee0697153d64404fc578392c8fd5cba9073391908f46c888498415647bd",
      "0x19c0e4fa8ab75f5ac7865e0b8f74ff91eb9a100d336f423cd013a8befba40299"
    ],
    sora: [
      "0x7e4e32d0feafd4f9c9414b0be86373f9a1efa904809b683453a9af6856d38ad5"
    ],
    stafi: [
      "0x290a4149f09ea0e402c74c1c7e96ae4239588577fe78932f94f5404c68243d80"
    ],
    statemine: [
      "0x48239ef607d7928874027a43a67689209727dfb3d3dc5e5b03a39bdc2eda771a"
    ],
    statemint: [
      "0x68d56f15f85d3136970ec16946040bc1752654e906147f7e43e9d539d7c3de2f"
    ],
    subsocial: [
      "0x0bd72c1c305172e1275278aaeb3f161e02eccb7a819e63f62d47bd53a28189f8"
    ],
    ternoa: [
      "0x6859c81ca95ef624c9dfe4dc6e3381c33e5d6509e35e147092bfbc780f777c4e"
    ],
    unique: [
      "0x84322d9cddbf35088f1e54e9a85c967a41a56a4f43445768125e61af166c7d31"
    ],
    vtb: [
      "0x286bc8414c7000ce1d6ee6a834e29a54c1784814b76243eb77ed0b2c5573c60f",
      "0x7483b89572fb2bd687c7b9a93b242d0b237f9aba463aba07ec24503931038aaa"
    ],
    westend: [
      "0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"
    ],
    xxnetwork: [
      "0x50dd5d206917bf10502c68fb4d18a59fc8aa31586f4e8856b493e43544aa82aa"
    ],
    zeitgeist: [
      "0x1bf2a2ecb4a868de66ea8610f2ce7c8c43706561b6476031315f6640fe38e060"
    ]
  };
  const knownIcon = {
    centrifuge: "polkadot",
    kusama: "polkadot",
    polkadot: "polkadot",
    sora: "polkadot",
    statemine: "polkadot",
    statemint: "polkadot",
    westmint: "polkadot"
  };
  const knownLedger = {
    acala: 787,
    ajuna: 354,
    "aleph-node": 643,
    astar: 810,
    bifrost: 788,
    "bifrost-kusama": 788,
    centrifuge: 747,
    composable: 354,
    darwinia: 354,
    "dock-mainnet": 594,
    edgeware: 523,
    equilibrium: 99999997,
    genshiro: 99999996,
    hydradx: 354,
    "interlay-parachain": 354,
    karura: 686,
    khala: 434,
    kusama: 434,
    nodle: 1003,
    origintrail: 354,
    parallel: 354,
    pendulum: 354,
    phala: 354,
    picasso: 434,
    polkadex: 799,
    polkadot: 354,
    polymesh: 595,
    sora: 617,
    stafi: 907,
    statemine: 434,
    statemint: 354,
    ternoa: 995,
    unique: 354,
    vtb: 694,
    xxnetwork: 1955,
    zeitgeist: 354
  };
  const knownTestnet = {
    "": true,
    "cess-testnet": true,
    "dock-testnet": true,
    jupiter: true,
    "mathchain-testnet": true,
    p3dt: true,
    subspace_testnet: true,
    "zero-alphaville": true
  };
  const UNSORTED = [0, 2, 42];
  const TESTNETS = ["testnet"];
  function toExpanded(o) {
    var _a, _b;
    const network = o.network || "";
    const nameParts = network.replace(/_/g, "-").split("-");
    const n = o;
    n.slip44 = knownLedger[network];
    n.hasLedgerSupport = !!n.slip44;
    n.genesisHash = knownGenesis[network] || [];
    n.icon = knownIcon[network] || "substrate";
    n.isTestnet = !!knownTestnet[network] || TESTNETS.includes(nameParts[nameParts.length - 1]);
    n.isIgnored = n.isTestnet || !(o.standardAccount && ((_a = o.decimals) == null ? void 0 : _a.length) && ((_b = o.symbols) == null ? void 0 : _b.length)) && o.prefix !== 42;
    return n;
  }
  function filterSelectable({ genesisHash, prefix: prefix2 }) {
    return !!genesisHash.length || prefix2 === 42;
  }
  function filterAvailable(n) {
    return !n.isIgnored && !!n.network;
  }
  function sortNetworks(a, b) {
    const isUnSortedA = UNSORTED.includes(a.prefix);
    const isUnSortedB = UNSORTED.includes(b.prefix);
    return isUnSortedA === isUnSortedB ? isUnSortedA ? 0 : a.displayName.localeCompare(b.displayName) : isUnSortedA ? -1 : 1;
  }
  const allNetworks = knownSubstrate.map(toExpanded);
  const availableNetworks = allNetworks.filter(filterAvailable).sort(sortNetworks);
  const selectableNetworks = availableNetworks.filter(filterSelectable);
  const upgrades$3 = [
    [
      0,
      1020,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      26669,
      1021,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      38245,
      1022,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      54248,
      1023,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      59659,
      1024,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      67651,
      1025,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      82191,
      1027,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      83238,
      1028,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      101503,
      1029,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      203466,
      1030,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      295787,
      1031,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      461692,
      1032,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      504329,
      1033,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      569327,
      1038,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          1
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      587687,
      1039,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      653183,
      1040,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      693488,
      1042,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      901442,
      1045,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1375086,
      1050,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1445458,
      1051,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1472960,
      1052,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1475648,
      1053,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1491596,
      1054,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1574408,
      1055,
      [
        [
          "0xdf6acb689907609b",
          2
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          1
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      2064961,
      1058,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      2201991,
      1062,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      2671528,
      2005,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      2704202,
      2007,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      2728002,
      2008,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      2832534,
      2011,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      2962294,
      2012,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      324e4,
      2013,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      3274408,
      2015,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      3323565,
      2019,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      3534175,
      2022,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      3860281,
      2023,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      4143129,
      2024,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      4401242,
      2025,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      4841367,
      2026,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      5961600,
      2027,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      6137912,
      2028,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      6561855,
      2029,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      7100891,
      2030,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      7468792,
      9010,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      7668600,
      9030,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      7812476,
      9040,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      8010981,
      9050,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      8073833,
      9070,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      8555825,
      9080,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      8945245,
      9090,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      9611377,
      9100,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      9625129,
      9111,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      9866422,
      9122,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      10403784,
      9130,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      10960765,
      9150,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      11006614,
      9151,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      11404482,
      9160,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      11601803,
      9170,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      12008022,
      9180,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      12405451,
      9190,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      12665416,
      9200,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      12909508,
      9220,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      13109752,
      9230,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      13555777,
      9250,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      13727747,
      9260,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      14248044,
      9271,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      14433840,
      9280,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0xf3ff14d5ab527059",
          1
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      14645900,
      9291,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0xf3ff14d5ab527059",
          1
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      15048375,
      9300,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0xf3ff14d5ab527059",
          1
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      15426015,
      9320,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          2
        ],
        [
          "0xf3ff14d5ab527059",
          2
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      15680713,
      9340,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          2
        ],
        [
          "0xf3ff14d5ab527059",
          2
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      15756296,
      9350,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          2
        ],
        [
          "0xf3ff14d5ab527059",
          2
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ]
  ];
  const upgrades$2 = [
    [
      0,
      0,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      29231,
      1,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      188836,
      5,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      199405,
      6,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      214264,
      7,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      244358,
      8,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      303079,
      9,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      314201,
      10,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      342400,
      11,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      443963,
      12,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      528470,
      13,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      687751,
      14,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      746085,
      15,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      787923,
      16,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      799302,
      17,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1205128,
      18,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1603423,
      23,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1733218,
      24,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      2005673,
      25,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      2436698,
      26,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      3613564,
      27,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      3899547,
      28,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      4345767,
      29,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      4876134,
      30,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      5661442,
      9050,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      6321619,
      9080,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      6713249,
      9090,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      7217907,
      9100,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      7229126,
      9110,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      7560558,
      9122,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      8115869,
      9140,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      8638103,
      9151,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      9280179,
      9170,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      9738717,
      9180,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      10156856,
      9190,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      10458576,
      9200,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      10655116,
      9220,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      10879371,
      9230,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      11328884,
      9250,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      11532856,
      9260,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      11933818,
      9270,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      12217535,
      9280,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0xf3ff14d5ab527059",
          1
        ]
      ]
    ],
    [
      12245277,
      9281,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0xf3ff14d5ab527059",
          1
        ]
      ]
    ],
    [
      12532644,
      9291,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0xf3ff14d5ab527059",
          1
        ]
      ]
    ],
    [
      12876189,
      9300,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0xf3ff14d5ab527059",
          1
        ]
      ]
    ]
  ];
  const upgrades$1 = [
    [
      214356,
      4,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          1
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      392764,
      7,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      409740,
      8,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      809976,
      20,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      877581,
      24,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      879238,
      25,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      889472,
      26,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      902937,
      27,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      932751,
      28,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      991142,
      29,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1030162,
      31,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1119657,
      32,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1199282,
      33,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1342534,
      34,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1392263,
      35,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1431703,
      36,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1433369,
      37,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      1490972,
      41,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      2087397,
      43,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      2316688,
      44,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      2549864,
      45,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      3925782,
      46,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      3925843,
      47,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      4207800,
      48,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      4627944,
      49,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      5124076,
      50,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      5478664,
      900,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      5482450,
      9e3,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          4
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      5584305,
      9010,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      5784566,
      9030,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      5879822,
      9031,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      5896856,
      9032,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      5897316,
      9033,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      6117927,
      9050,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      6210274,
      9070,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          2
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      6379314,
      9080,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          2
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      6979141,
      9090,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      7568453,
      9100,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      7766394,
      9111,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      7911691,
      9120,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      7968866,
      9121,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      7982889,
      9122,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      8514322,
      9130,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      9091726,
      9140,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      9091774,
      9150,
      [
        [
          "0xdf6acb689907609b",
          3
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          1
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      9406726,
      9160,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      9921066,
      9170,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      10007115,
      9180,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          5
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      10480973,
      9190,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      10578091,
      9200,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      10678509,
      9210,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      10811001,
      9220,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      11096116,
      9230,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      11409279,
      9250,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      11584820,
      9251,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      11716837,
      9260,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      11876919,
      9261,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ]
      ]
    ],
    [
      11987927,
      9270,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      12077324,
      9271,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      12301871,
      9280,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0xf3ff14d5ab527059",
          1
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      12604343,
      9290,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          2
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0xf3ff14d5ab527059",
          1
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      12841034,
      9300,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0xf3ff14d5ab527059",
          1
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      13128237,
      9310,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          1
        ],
        [
          "0xf3ff14d5ab527059",
          1
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      13272363,
      9320,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          2
        ],
        [
          "0xf3ff14d5ab527059",
          2
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      13483497,
      9330,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          2
        ],
        [
          "0xf3ff14d5ab527059",
          2
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      13649433,
      9340,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          2
        ],
        [
          "0xf3ff14d5ab527059",
          2
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ],
    [
      13761100,
      9350,
      [
        [
          "0xdf6acb689907609b",
          4
        ],
        [
          "0x37e397fc7c91f5e4",
          1
        ],
        [
          "0x40fe3ad401f8959a",
          6
        ],
        [
          "0xd2bc9897eed08f15",
          3
        ],
        [
          "0xf78b278be53f454c",
          2
        ],
        [
          "0xaf2c0297a23e6d3d",
          3
        ],
        [
          "0x49eaaf1b548a0cb0",
          1
        ],
        [
          "0x91d5df18b0d2cf58",
          1
        ],
        [
          "0xed99c5acb25eedf5",
          3
        ],
        [
          "0xcbca25e39f142387",
          2
        ],
        [
          "0x687ad44ad37f03c2",
          1
        ],
        [
          "0xab3c0572291feb8b",
          1
        ],
        [
          "0xbc9d89904f5b923f",
          1
        ],
        [
          "0x37c8bb1350a9a2a8",
          2
        ],
        [
          "0xf3ff14d5ab527059",
          2
        ],
        [
          "0x17a6bc0d0062aeb3",
          1
        ]
      ]
    ]
  ];
  const allKnown = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    kusama: upgrades$3,
    polkadot: upgrades$2,
    westend: upgrades$1
  }, Symbol.toStringTag, { value: "Module" }));
  const NET_EXTRA = {
    westend: {
      genesisHash: ["0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"]
    }
  };
  function mapRaw([network, versions]) {
    const chain2 = selectableNetworks.find((n) => n.network === network) || NET_EXTRA[network];
    if (!chain2) {
      throw new Error(`Unable to find info for chain ${network}`);
    }
    return {
      genesisHash: hexToU8a(chain2.genesisHash[0]),
      network,
      versions: versions.map(([blockNumber, specVersion, apis]) => ({
        apis,
        blockNumber: new BN(blockNumber),
        specVersion: new BN(specVersion)
      }))
    };
  }
  const upgrades = Object.entries(allKnown).map(mapRaw);
  function withNames(chainName, specName, fn) {
    return fn(chainName.toString(), specName.toString());
  }
  function filterVersions(versions = [], specVersion) {
    return versions.filter(({ minmax: [min, max2] }) => (min === void 0 || min === null || specVersion >= min) && (max2 === void 0 || max2 === null || specVersion <= max2)).reduce((result, { types: types2 }) => ({ ...result, ...types2 }), {});
  }
  function getSpecExtensions({ knownTypes: knownTypes2 }, chainName, specName) {
    return withNames(chainName, specName, (c, s) => {
      var _a, _b, _c, _d, _e, _f;
      return {
        ...((_c = (_b = (_a = knownTypes2.typesBundle) == null ? void 0 : _a.spec) == null ? void 0 : _b[s]) == null ? void 0 : _c.signedExtensions) ?? {},
        ...((_f = (_e = (_d = knownTypes2.typesBundle) == null ? void 0 : _d.chain) == null ? void 0 : _e[c]) == null ? void 0 : _f.signedExtensions) ?? {}
      };
    });
  }
  function getSpecTypes({ knownTypes: knownTypes2 }, chainName, specName, specVersion) {
    const _specVersion = bnToBn(specVersion).toNumber();
    return withNames(chainName, specName, (c, s) => {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      return {
        // The order here is always, based on -
        //   - spec then chain
        //   - typesBundle takes higher precedence
        //   - types is the final catch-all override
        ...filterVersions(typesSpec[s], _specVersion),
        ...filterVersions(typesChain[c], _specVersion),
        ...filterVersions((_c = (_b = (_a = knownTypes2.typesBundle) == null ? void 0 : _a.spec) == null ? void 0 : _b[s]) == null ? void 0 : _c.types, _specVersion),
        ...filterVersions((_f = (_e = (_d = knownTypes2.typesBundle) == null ? void 0 : _d.chain) == null ? void 0 : _e[c]) == null ? void 0 : _f.types, _specVersion),
        ...((_g = knownTypes2.typesSpec) == null ? void 0 : _g[s]) ?? {},
        ...((_h = knownTypes2.typesChain) == null ? void 0 : _h[c]) ?? {},
        ...knownTypes2.types ?? {}
      };
    });
  }
  function getSpecHasher({ knownTypes: knownTypes2 }, chainName, specName) {
    return withNames(chainName, specName, (c, s) => {
      var _a, _b, _c, _d, _e, _f;
      return knownTypes2.hasher || ((_c = (_b = (_a = knownTypes2.typesBundle) == null ? void 0 : _a.chain) == null ? void 0 : _b[c]) == null ? void 0 : _c.hasher) || ((_f = (_e = (_d = knownTypes2.typesBundle) == null ? void 0 : _d.spec) == null ? void 0 : _e[s]) == null ? void 0 : _f.hasher) || null;
    });
  }
  function getSpecRpc({ knownTypes: knownTypes2 }, chainName, specName) {
    return withNames(chainName, specName, (c, s) => {
      var _a, _b, _c, _d, _e, _f;
      return {
        ...((_c = (_b = (_a = knownTypes2.typesBundle) == null ? void 0 : _a.spec) == null ? void 0 : _b[s]) == null ? void 0 : _c.rpc) ?? {},
        ...((_f = (_e = (_d = knownTypes2.typesBundle) == null ? void 0 : _d.chain) == null ? void 0 : _e[c]) == null ? void 0 : _f.rpc) ?? {}
      };
    });
  }
  function getSpecRuntime({ knownTypes: knownTypes2 }, chainName, specName) {
    return withNames(chainName, specName, (c, s) => {
      var _a, _b, _c, _d, _e, _f;
      return {
        ...((_c = (_b = (_a = knownTypes2.typesBundle) == null ? void 0 : _a.spec) == null ? void 0 : _b[s]) == null ? void 0 : _c.runtime) ?? {},
        ...((_f = (_e = (_d = knownTypes2.typesBundle) == null ? void 0 : _d.chain) == null ? void 0 : _e[c]) == null ? void 0 : _f.runtime) ?? {}
      };
    });
  }
  function getSpecAlias({ knownTypes: knownTypes2 }, chainName, specName) {
    return withNames(chainName, specName, (c, s) => {
      var _a, _b, _c, _d, _e, _f;
      return {
        // as per versions, first spec, then chain then finally non-versioned
        ...((_c = (_b = (_a = knownTypes2.typesBundle) == null ? void 0 : _a.spec) == null ? void 0 : _b[s]) == null ? void 0 : _c.alias) ?? {},
        ...((_f = (_e = (_d = knownTypes2.typesBundle) == null ? void 0 : _d.chain) == null ? void 0 : _e[c]) == null ? void 0 : _f.alias) ?? {},
        ...knownTypes2.typesAlias ?? {}
      };
    });
  }
  function getUpgradeVersion(genesisHash, blockNumber) {
    const known2 = upgrades.find((u) => genesisHash.eq(u.genesisHash));
    return known2 ? [
      known2.versions.reduce((last2, version2) => {
        return blockNumber.gt(version2.blockNumber) ? version2 : last2;
      }, void 0),
      known2.versions.find((version2) => blockNumber.lte(version2.blockNumber))
    ] : [void 0, void 0];
  }
  const l$4 = logger("api/augment");
  function logLength(type, values2, and = []) {
    return values2.length ? ` ${values2.length} ${type}${and.length ? " and" : ""}` : "";
  }
  function logValues(type, values2) {
    return values2.length ? `
	${type.padStart(7)}: ${values2.sort().join(", ")}` : "";
  }
  function warn(prefix2, type, [added, removed]) {
    if (added.length || removed.length) {
      l$4.warn(`api.${prefix2}: Found${logLength("added", added, removed)}${logLength("removed", removed)} ${type}:${logValues("added", added)}${logValues("removed", removed)}`);
    }
  }
  function findSectionExcludes(a, b) {
    return a.filter((s) => !b.includes(s));
  }
  function findSectionIncludes(a, b) {
    return a.filter((s) => b.includes(s));
  }
  function extractSections(src2, dst) {
    const srcSections = Object.keys(src2);
    const dstSections = Object.keys(dst);
    return [
      findSectionExcludes(srcSections, dstSections),
      findSectionExcludes(dstSections, srcSections)
    ];
  }
  function findMethodExcludes(src2, dst) {
    const srcSections = Object.keys(src2);
    const dstSections = findSectionIncludes(Object.keys(dst), srcSections);
    const excludes2 = [];
    for (let s = 0, scount = dstSections.length; s < scount; s++) {
      const section2 = dstSections[s];
      const srcMethods = Object.keys(src2[section2]);
      const dstMethods = Object.keys(dst[section2]);
      for (let d = 0, mcount = dstMethods.length; d < mcount; d++) {
        const method = dstMethods[d];
        if (!srcMethods.includes(method)) {
          excludes2.push(`${section2}.${method}`);
        }
      }
    }
    return excludes2;
  }
  function extractMethods(src2, dst) {
    return [
      findMethodExcludes(dst, src2),
      findMethodExcludes(src2, dst)
    ];
  }
  function augmentObject(prefix2, src2, dst, fromEmpty = false) {
    fromEmpty && objectClear(dst);
    if (prefix2 && Object.keys(dst).length) {
      warn(prefix2, "modules", extractSections(src2, dst));
      warn(prefix2, "calls", extractMethods(src2, dst));
    }
    const sections = Object.keys(src2);
    for (let i2 = 0, count = sections.length; i2 < count; i2++) {
      const section2 = sections[i2];
      const methods = src2[section2];
      if (!dst[section2]) {
        dst[section2] = {};
      }
      lazyMethods(dst[section2], Object.keys(methods), (m2) => methods[m2]);
    }
    return dst;
  }
  function sig({ lookup }, { method, section: section2 }, args) {
    return `${section2}.${method}(${args.map((a) => lookup.getTypeDef(a).type).join(", ")})`;
  }
  function extractStorageArgs(registry, creator, _args) {
    const args = _args.filter((a) => !isUndefined$1(a));
    if (creator.meta.type.isPlain) {
      if (args.length !== 0) {
        throw new Error(`${sig(registry, creator, [])} does not take any arguments, ${args.length} found`);
      }
    } else {
      const { hashers, key } = creator.meta.type.asMap;
      const keys2 = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple.map((t) => t);
      if (args.length !== keys2.length) {
        throw new Error(`${sig(registry, creator, keys2)} is a map, requiring ${keys2.length} arguments, ${args.length} found`);
      }
    }
    return [creator, args];
  }
  class Events {
    constructor() {
      this.__internal__eventemitter = new EventEmitter();
    }
    emit(type, ...args) {
      return this.__internal__eventemitter.emit(type, ...args);
    }
    /**
     * @description Attach an eventemitter handler to listen to a specific event
     *
     * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
     * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.on('connected', (): void => {
     *   console.log('API has been connected to the endpoint');
     * });
     *
     * api.on('disconnected', (): void => {
     *   console.log('API has been disconnected from the endpoint');
     * });
     * ```
     */
    on(type, handler) {
      this.__internal__eventemitter.on(type, handler);
      return this;
    }
    /**
     * @description Remove the given eventemitter handler
     *
     * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`
     * @param handler The callback to unregister.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * const handler = (): void => {
     *  console.log('Connected !);
     * };
     *
     * // Start listening
     * api.on('connected', handler);
     *
     * // Stop listening
     * api.off('connected', handler);
     * ```
     */
    off(type, handler) {
      this.__internal__eventemitter.removeListener(type, handler);
      return this;
    }
    /**
     * @description Attach an one-time eventemitter handler to listen to a specific event
     *
     * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
     * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.once('connected', (): void => {
     *   console.log('API has been connected to the endpoint');
     * });
     *
     * api.once('disconnected', (): void => {
     *   console.log('API has been disconnected from the endpoint');
     * });
     * ```
     */
    once(type, handler) {
      this.__internal__eventemitter.once(type, handler);
      return this;
    }
  }
  const PAGE_SIZE_K = 1e3;
  const PAGE_SIZE_V = 250;
  const PAGE_SIZE_Q = 50;
  const l$3 = logger("api/init");
  let instanceCounter = 0;
  function getAtQueryFn(api, { method, section: section2 }) {
    return assertReturn(api.rx.query[section2] && api.rx.query[section2][method], () => `query.${section2}.${method} is not available in this version of the metadata`);
  }
  class Decorate extends Events {
    /**
     * @description Create an instance of the class
     *
     * @param options Options object to create API instance or a Provider instance
     *
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     *
     * const api = new Api().isReady();
     *
     * api.rpc.subscribeNewHeads((header) => {
     *   console.log(`new block #${header.number.toNumber()}`);
     * });
     * ```
     */
    constructor(options, type, decorateMethod) {
      var _a;
      super();
      this.__internal__runtimeLog = {};
      this.__internal__storageGetQ = [];
      this.__internal__storageSubQ = [];
      this.__phantom = new BN(0);
      this._call = {};
      this._consts = {};
      this._errors = {};
      this._events = {};
      this._extrinsicType = GenericExtrinsic.LATEST_EXTRINSIC_VERSION;
      this._isReady = false;
      this._query = {};
      this._runtimeMap = {};
      this._rx = { call: {}, consts: {}, query: {}, tx: {} };
      this._rxDecorateMethod = (method) => {
        return method;
      };
      this.__internal__instanceId = `${++instanceCounter}`;
      this.__internal__registry = ((_a = options.source) == null ? void 0 : _a.registry) || options.registry || new TypeRegistry();
      this._rx.callAt = (blockHash, knownVersion) => from$1(this.at(blockHash, knownVersion)).pipe(map((a) => a.rx.call));
      this._rx.queryAt = (blockHash, knownVersion) => from$1(this.at(blockHash, knownVersion)).pipe(map((a) => a.rx.query));
      this._rx.registry = this.__internal__registry;
      this._decorateMethod = decorateMethod;
      this._options = options;
      this._type = type;
      const provider = options.source ? options.source._rpcCore.provider.isClonable ? options.source._rpcCore.provider.clone() : options.source._rpcCore.provider : options.provider || new WsProvider();
      this._rpcCore = new RpcCore(this.__internal__instanceId, this.__internal__registry, {
        isPedantic: this._options.isPedantic,
        provider,
        userRpc: this._options.rpc
      });
      this._isConnected = new BehaviorSubject(this._rpcCore.provider.isConnected);
      this._rx.hasSubscriptions = this._rpcCore.provider.hasSubscriptions;
    }
    /**
     * @description Return the current used registry
     */
    get registry() {
      return this.__internal__registry;
    }
    /**
     * @description Creates an instance of a type as registered
     */
    createType(type, ...params) {
      return this.__internal__registry.createType(type, ...params);
    }
    /**
     * @description Register additional user-defined of chain-specific types in the type registry
     */
    registerTypes(types2) {
      types2 && this.__internal__registry.register(types2);
    }
    /**
     * @returns `true` if the API operates with subscriptions
     */
    get hasSubscriptions() {
      return this._rpcCore.provider.hasSubscriptions;
    }
    /**
     * @returns `true` if the API decorate multi-key queries
     */
    get supportMulti() {
      return this._rpcCore.provider.hasSubscriptions || !!this._rpcCore.state.queryStorageAt;
    }
    _emptyDecorated(registry, blockHash) {
      return {
        call: {},
        consts: {},
        errors: {},
        events: {},
        query: {},
        registry,
        rx: {
          call: {},
          query: {}
        },
        tx: createSubmittable(this._type, this._rx, this._decorateMethod, registry, blockHash)
      };
    }
    _createDecorated(registry, fromEmpty, decoratedApi, blockHash) {
      if (!decoratedApi) {
        decoratedApi = this._emptyDecorated(registry.registry, blockHash);
      }
      if (fromEmpty || !registry.decoratedMeta) {
        registry.decoratedMeta = expandMetadata(registry.registry, registry.metadata);
      }
      const runtime2 = this._decorateCalls(registry, this._decorateMethod, blockHash);
      const runtimeRx = this._decorateCalls(registry, this._rxDecorateMethod, blockHash);
      const storage2 = this._decorateStorage(registry.decoratedMeta, this._decorateMethod, blockHash);
      const storageRx = this._decorateStorage(registry.decoratedMeta, this._rxDecorateMethod, blockHash);
      augmentObject("consts", registry.decoratedMeta.consts, decoratedApi.consts, fromEmpty);
      augmentObject("errors", registry.decoratedMeta.errors, decoratedApi.errors, fromEmpty);
      augmentObject("events", registry.decoratedMeta.events, decoratedApi.events, fromEmpty);
      augmentObject("query", storage2, decoratedApi.query, fromEmpty);
      augmentObject("query", storageRx, decoratedApi.rx.query, fromEmpty);
      augmentObject("call", runtime2, decoratedApi.call, fromEmpty);
      augmentObject("call", runtimeRx, decoratedApi.rx.call, fromEmpty);
      decoratedApi.findCall = (callIndex) => findCall(registry.registry, callIndex);
      decoratedApi.findError = (errorIndex) => findError(registry.registry, errorIndex);
      decoratedApi.queryMulti = blockHash ? this._decorateMultiAt(decoratedApi, this._decorateMethod, blockHash) : this._decorateMulti(this._decorateMethod);
      decoratedApi.runtimeVersion = registry.runtimeVersion;
      return {
        createdAt: blockHash,
        decoratedApi,
        decoratedMeta: registry.decoratedMeta
      };
    }
    _injectMetadata(registry, fromEmpty = false) {
      if (fromEmpty || !registry.decoratedApi) {
        registry.decoratedApi = this._emptyDecorated(registry.registry);
      }
      const { decoratedApi, decoratedMeta } = this._createDecorated(registry, fromEmpty, registry.decoratedApi);
      this._call = decoratedApi.call;
      this._consts = decoratedApi.consts;
      this._errors = decoratedApi.errors;
      this._events = decoratedApi.events;
      this._query = decoratedApi.query;
      this._rx.call = decoratedApi.rx.call;
      this._rx.query = decoratedApi.rx.query;
      const tx2 = this._decorateExtrinsics(decoratedMeta, this._decorateMethod);
      const rxtx = this._decorateExtrinsics(decoratedMeta, this._rxDecorateMethod);
      if (fromEmpty || !this._extrinsics) {
        this._extrinsics = tx2;
        this._rx.tx = rxtx;
      } else {
        augmentObject("tx", tx2, this._extrinsics, false);
        augmentObject(null, rxtx, this._rx.tx, false);
      }
      augmentObject(null, decoratedMeta.consts, this._rx.consts, fromEmpty);
      this.emit("decorated");
    }
    /**
     * @deprecated
     * backwards compatible endpoint for metadata injection, may be removed in the future (However, it is still useful for testing injection)
     */
    injectMetadata(metadata, fromEmpty, registry) {
      this._injectMetadata({ counter: 0, metadata, registry: registry || this.__internal__registry, runtimeVersion: this.__internal__registry.createType("RuntimeVersionPartial") }, fromEmpty);
    }
    _decorateFunctionMeta(input, output2) {
      output2.meta = input.meta;
      output2.method = input.method;
      output2.section = input.section;
      output2.toJSON = input.toJSON;
      if (input.callIndex) {
        output2.callIndex = input.callIndex;
      }
      return output2;
    }
    // Filter all RPC methods based on the results of the rpc_methods call. We do this in the following
    // manner to cater for both old and new:
    //   - when the number of entries are 0, only remove the ones with isOptional (account & contracts)
    //   - when non-zero, remove anything that is not in the array (we don't do this)
    _filterRpc(methods, additional) {
      if (Object.keys(additional).length !== 0) {
        this._rpcCore.addUserInterfaces(additional);
        this._decorateRpc(this._rpcCore, this._decorateMethod, this._rpc);
        this._decorateRpc(this._rpcCore, this._rxDecorateMethod, this._rx.rpc);
      }
      const sectionMap = {};
      for (let i2 = 0, count = methods.length; i2 < count; i2++) {
        const [section2] = methods[i2].split("_");
        sectionMap[section2] = true;
      }
      const sections = Object.keys(sectionMap);
      for (let i2 = 0, count = sections.length; i2 < count; i2++) {
        const nameA = stringUpperFirst(sections[i2]);
        const nameB = `${nameA}Api`;
        this._runtimeMap[blake2AsHex(nameA, 64)] = nameA;
        this._runtimeMap[blake2AsHex(nameB, 64)] = nameB;
      }
      this._filterRpcMethods(methods);
    }
    _filterRpcMethods(exposed) {
      const hasResults = exposed.length !== 0;
      const allKnown2 = [...this._rpcCore.mapping.entries()];
      const allKeys = [];
      const count = allKnown2.length;
      for (let i2 = 0; i2 < count; i2++) {
        const [, { alias: alias2, endpoint, method, pubsub, section: section2 }] = allKnown2[i2];
        allKeys.push(`${section2}_${method}`);
        if (pubsub) {
          allKeys.push(`${section2}_${pubsub[1]}`);
          allKeys.push(`${section2}_${pubsub[2]}`);
        }
        if (alias2) {
          allKeys.push(...alias2);
        }
        if (endpoint) {
          allKeys.push(endpoint);
        }
      }
      const unknown = exposed.filter((k) => !allKeys.includes(k) && !k.includes("_unstable_"));
      if (unknown.length && !this._options.noInitWarn) {
        l$3.warn(`RPC methods not decorated: ${unknown.join(", ")}`);
      }
      for (let i2 = 0; i2 < count; i2++) {
        const [k, { method, section: section2 }] = allKnown2[i2];
        if (hasResults && !exposed.includes(k) && k !== "rpc_methods") {
          if (this._rpc[section2]) {
            delete this._rpc[section2][method];
            delete this._rx.rpc[section2][method];
          }
        }
      }
    }
    _rpcSubmitter(decorateMethod) {
      const method = (method2, ...params) => {
        return from$1(this._rpcCore.provider.send(method2, params));
      };
      return decorateMethod(method);
    }
    _decorateRpc(rpc2, decorateMethod, input = this._rpcSubmitter(decorateMethod)) {
      const out = input;
      const decorateFn = (section2, method) => {
        const source = rpc2[section2][method];
        const fn = decorateMethod(source, { methodName: method });
        fn.meta = source.meta;
        fn.raw = decorateMethod(source.raw, { methodName: method });
        return fn;
      };
      for (let s = 0, scount = rpc2.sections.length; s < scount; s++) {
        const section2 = rpc2.sections[s];
        if (!Object.prototype.hasOwnProperty.call(out, section2)) {
          const methods = Object.keys(rpc2[section2]);
          const decorateInternal = (method) => decorateFn(section2, method);
          for (let m2 = 0, mcount = methods.length; m2 < mcount; m2++) {
            const method = methods[m2];
            if (this.hasSubscriptions || !(method.startsWith("subscribe") || method.startsWith("unsubscribe"))) {
              if (!Object.prototype.hasOwnProperty.call(out, section2)) {
                out[section2] = {};
              }
              lazyMethod(out[section2], method, decorateInternal);
            }
          }
        }
      }
      return out;
    }
    // add all definition entries
    _addRuntimeDef(result, additional) {
      if (!additional) {
        return;
      }
      const entries = Object.entries(additional);
      for (let j = 0, ecount = entries.length; j < ecount; j++) {
        const [key, defs] = entries[j];
        if (result[key]) {
          for (let k = 0, dcount = defs.length; k < dcount; k++) {
            const def = defs[k];
            const prev2 = result[key].find(({ version: version2 }) => def.version === version2);
            if (prev2) {
              objectSpread(prev2.methods, def.methods);
            } else {
              result[key].push(def);
            }
          }
        } else {
          result[key] = defs;
        }
      }
    }
    // extract all runtime definitions
    _getRuntimeDefs(registry, specName, chain2 = "") {
      const result = {};
      const defValues = Object.values(typeDefinitions);
      for (let i2 = 0, count = defValues.length; i2 < count; i2++) {
        this._addRuntimeDef(result, defValues[i2].runtime);
      }
      this._addRuntimeDef(result, getSpecRuntime(registry, chain2, specName));
      this._addRuntimeDef(result, this._options.runtime);
      return Object.entries(result);
    }
    // pre-metadata decoration
    _decorateCalls({ registry, runtimeVersion: { apis, specName, specVersion } }, decorateMethod, blockHash) {
      const result = {};
      const named = {};
      const hashes = {};
      const sections = this._getRuntimeDefs(registry, specName, this._runtimeChain);
      const older = [];
      const implName = `${specName.toString()}/${specVersion.toString()}`;
      const hasLogged = this.__internal__runtimeLog[implName] || false;
      this.__internal__runtimeLog[implName] = true;
      for (let i2 = 0, scount = sections.length; i2 < scount; i2++) {
        const [_section, secs] = sections[i2];
        const sectionHash = blake2AsHex(_section, 64);
        const rtApi = apis.find(([a]) => a.eq(sectionHash));
        hashes[sectionHash] = true;
        if (rtApi) {
          const all2 = secs.map(({ version: version2 }) => version2).sort();
          const sec = secs.find(({ version: version2 }) => rtApi[1].eq(version2));
          if (sec) {
            const section2 = stringCamelCase(_section);
            const methods = Object.entries(sec.methods);
            if (methods.length) {
              if (!named[section2]) {
                named[section2] = {};
              }
              for (let m2 = 0, mcount = methods.length; m2 < mcount; m2++) {
                const [_method, def] = methods[m2];
                const method = stringCamelCase(_method);
                named[section2][method] = objectSpread({ method, name: `${_section}_${_method}`, section: section2, sectionHash }, def);
              }
            }
          } else {
            older.push(`${_section}/${rtApi[1].toString()} (${all2.join("/")} known)`);
          }
        }
      }
      const notFound = apis.map(([a, v]) => [a.toHex(), v.toString()]).filter(([a]) => !hashes[a]).map(([a, v]) => `${this._runtimeMap[a] || a}/${v}`);
      if (!this._options.noInitWarn && !hasLogged) {
        if (older.length) {
          l$3.warn(`${implName}: Not decorating runtime apis without matching versions: ${older.join(", ")}`);
        }
        if (notFound.length) {
          l$3.warn(`${implName}: Not decorating unknown runtime apis: ${notFound.join(", ")}`);
        }
      }
      const stateCall = blockHash ? (name, bytes2) => this._rpcCore.state.call(name, bytes2, blockHash) : (name, bytes2) => this._rpcCore.state.call(name, bytes2);
      const lazySection = (section2) => lazyMethods({}, Object.keys(named[section2]), (method) => this._decorateCall(registry, named[section2][method], stateCall, decorateMethod));
      const modules = Object.keys(named);
      for (let i2 = 0, count = modules.length; i2 < count; i2++) {
        lazyMethod(result, modules[i2], lazySection);
      }
      return result;
    }
    _decorateCall(registry, def, stateCall, decorateMethod) {
      const decorated = decorateMethod((...args) => {
        if (args.length !== def.params.length) {
          throw new Error(`${def.name}:: Expected ${def.params.length} arguments, found ${args.length}`);
        }
        const bytes2 = registry.createType("Raw", u8aConcatStrict(args.map((a, i2) => registry.createTypeUnsafe(def.params[i2].type, [a]).toU8a())));
        return stateCall(def.name, bytes2).pipe(map((r2) => registry.createTypeUnsafe(def.type, [r2])));
      });
      decorated.meta = def;
      return decorated;
    }
    // only be called if supportMulti is true
    _decorateMulti(decorateMethod) {
      return decorateMethod((keys2) => keys2.length ? (this.hasSubscriptions ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt)(keys2.map((args) => Array.isArray(args) ? args[0].creator.meta.type.isPlain ? [args[0].creator] : args[0].creator.meta.type.asMap.hashers.length === 1 ? [args[0].creator, args.slice(1)] : [args[0].creator, ...args.slice(1)] : [args.creator])) : of([]));
    }
    _decorateMultiAt(atApi, decorateMethod, blockHash) {
      return decorateMethod((calls) => calls.length ? this._rpcCore.state.queryStorageAt(calls.map((args) => {
        if (Array.isArray(args)) {
          const { creator } = getAtQueryFn(atApi, args[0].creator);
          return creator.meta.type.isPlain ? [creator] : creator.meta.type.asMap.hashers.length === 1 ? [creator, args.slice(1)] : [creator, ...args.slice(1)];
        }
        return [getAtQueryFn(atApi, args.creator).creator];
      }), blockHash) : of([]));
    }
    _decorateExtrinsics({ tx: tx2 }, decorateMethod) {
      const result = createSubmittable(this._type, this._rx, decorateMethod);
      const lazySection = (section2) => lazyMethods({}, Object.keys(tx2[section2]), (method) => method.startsWith("$") ? tx2[section2][method] : this._decorateExtrinsicEntry(tx2[section2][method], result));
      const sections = Object.keys(tx2);
      for (let i2 = 0, count = sections.length; i2 < count; i2++) {
        lazyMethod(result, sections[i2], lazySection);
      }
      return result;
    }
    _decorateExtrinsicEntry(method, creator) {
      const decorated = (...params) => creator(method(...params));
      decorated.is = (other) => method.is(other);
      return this._decorateFunctionMeta(method, decorated);
    }
    _decorateStorage({ query: query2, registry }, decorateMethod, blockHash) {
      const result = {};
      const lazySection = (section2) => lazyMethods({}, Object.keys(query2[section2]), (method) => blockHash ? this._decorateStorageEntryAt(registry, query2[section2][method], decorateMethod, blockHash) : this._decorateStorageEntry(query2[section2][method], decorateMethod));
      const sections = Object.keys(query2);
      for (let i2 = 0, count = sections.length; i2 < count; i2++) {
        lazyMethod(result, sections[i2], lazySection);
      }
      return result;
    }
    _decorateStorageEntry(creator, decorateMethod) {
      const getArgs = (args, registry) => extractStorageArgs(registry || this.__internal__registry, creator, args);
      const getQueryAt = (blockHash) => from$1(this.at(blockHash)).pipe(map((api) => getAtQueryFn(api, creator)));
      const decorated = this._decorateStorageCall(creator, decorateMethod);
      decorated.creator = creator;
      decorated.at = decorateMethod((blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => q(...args))));
      decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args)));
      decorated.is = (key) => key.section === creator.section && key.method === creator.method;
      decorated.key = (...args) => u8aToHex(compactStripLength(creator(...args))[1]);
      decorated.keyPrefix = (...args) => u8aToHex(creator.keyPrefix(...args));
      decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args)));
      decorated.sizeAt = decorateMethod((blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => this._rpcCore.state.getStorageSize(getArgs(args, q.creator.meta.registry), blockHash))));
      if (creator.iterKey && creator.meta.type.isMap) {
        decorated.entries = decorateMethod(memo(this.__internal__instanceId, (...args) => this._retrieveMapEntries(creator, null, args)));
        decorated.entriesAt = decorateMethod(memo(this.__internal__instanceId, (blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => this._retrieveMapEntries(q.creator, blockHash, args)))));
        decorated.entriesPaged = decorateMethod(memo(this.__internal__instanceId, (opts) => this._retrieveMapEntriesPaged(creator, void 0, opts)));
        decorated.keys = decorateMethod(memo(this.__internal__instanceId, (...args) => this._retrieveMapKeys(creator, null, args)));
        decorated.keysAt = decorateMethod(memo(this.__internal__instanceId, (blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => this._retrieveMapKeys(q.creator, blockHash, args)))));
        decorated.keysPaged = decorateMethod(memo(this.__internal__instanceId, (opts) => this._retrieveMapKeysPaged(creator, void 0, opts)));
      }
      if (this.supportMulti && creator.meta.type.isMap) {
        decorated.multi = decorateMethod((args) => creator.meta.type.asMap.hashers.length === 1 ? this._retrieveMulti(args.map((a) => [creator, [a]])) : this._retrieveMulti(args.map((a) => [creator, a])));
      }
      return this._decorateFunctionMeta(creator, decorated);
    }
    _decorateStorageEntryAt(registry, creator, decorateMethod, blockHash) {
      const getArgs = (args) => extractStorageArgs(registry, creator, args);
      const decorated = decorateMethod((...args) => this._rpcCore.state.getStorage(getArgs(args), blockHash));
      decorated.creator = creator;
      decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args), blockHash));
      decorated.is = (key) => key.section === creator.section && key.method === creator.method;
      decorated.key = (...args) => u8aToHex(compactStripLength(creator(...args))[1]);
      decorated.keyPrefix = (...keys2) => u8aToHex(creator.keyPrefix(...keys2));
      decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args), blockHash));
      if (creator.iterKey && creator.meta.type.isMap) {
        decorated.entries = decorateMethod(memo(this.__internal__instanceId, (...args) => this._retrieveMapEntries(creator, blockHash, args)));
        decorated.entriesPaged = decorateMethod(memo(this.__internal__instanceId, (opts) => this._retrieveMapEntriesPaged(creator, blockHash, opts)));
        decorated.keys = decorateMethod(memo(this.__internal__instanceId, (...args) => this._retrieveMapKeys(creator, blockHash, args)));
        decorated.keysPaged = decorateMethod(memo(this.__internal__instanceId, (opts) => this._retrieveMapKeysPaged(creator, blockHash, opts)));
      }
      if (this.supportMulti && creator.meta.type.isMap) {
        decorated.multi = decorateMethod((args) => creator.meta.type.asMap.hashers.length === 1 ? this._retrieveMulti(args.map((a) => [creator, [a]]), blockHash) : this._retrieveMulti(args.map((a) => [creator, a]), blockHash));
      }
      return this._decorateFunctionMeta(creator, decorated);
    }
    _queueStorage(call, queue2) {
      const query2 = queue2 === this.__internal__storageSubQ ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt;
      let queueIdx = queue2.length - 1;
      let valueIdx = 0;
      let valueObs;
      if (queueIdx === -1 || !queue2[queueIdx] || queue2[queueIdx][1].length === PAGE_SIZE_Q) {
        queueIdx++;
        valueObs = from$1(
          // we delay the execution until the next tick, this allows
          // any queries made in this timeframe to be added to the same
          // queue for a single query
          new Promise((resolve) => {
            nextTick(() => {
              const calls = queue2[queueIdx][1];
              delete queue2[queueIdx];
              resolve(calls);
            });
          })
        ).pipe(switchMap((calls) => query2(calls)));
        queue2.push([valueObs, [call]]);
      } else {
        valueObs = queue2[queueIdx][0];
        valueIdx = queue2[queueIdx][1].length;
        queue2[queueIdx][1].push(call);
      }
      return valueObs.pipe(
        // return the single value at this index
        map((values2) => values2[valueIdx])
      );
    }
    // Decorate the base storage call. In the case or rxjs or promise-without-callback (await)
    // we make a subscription, alternatively we push this through a single-shot query
    _decorateStorageCall(creator, decorateMethod) {
      const memoed = memo(this.__internal__instanceId, (...args) => {
        const call = extractStorageArgs(this.__internal__registry, creator, args);
        if (!this.hasSubscriptions) {
          return this._rpcCore.state.getStorage(call);
        }
        return this._queueStorage(call, this.__internal__storageSubQ);
      });
      return decorateMethod(memoed, {
        methodName: creator.method,
        overrideNoSub: (...args) => this._queueStorage(extractStorageArgs(this.__internal__registry, creator, args), this.__internal__storageGetQ)
      });
    }
    // retrieve a set of values for a specific set of keys - here we chunk the keys into PAGE_SIZE sizes
    _retrieveMulti(keys2, blockHash) {
      if (!keys2.length) {
        return of([]);
      }
      const query2 = this.hasSubscriptions && !blockHash ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt;
      if (keys2.length <= PAGE_SIZE_V) {
        return blockHash ? query2(keys2, blockHash) : query2(keys2);
      }
      return combineLatest(arrayChunk(keys2, PAGE_SIZE_V).map((k) => blockHash ? query2(k, blockHash) : query2(k))).pipe(map(arrayFlatten));
    }
    _retrieveMapKeys({ iterKey, meta, method, section: section2 }, at2, args) {
      if (!iterKey || !meta.type.isMap) {
        throw new Error("keys can only be retrieved on maps");
      }
      const headKey = iterKey(...args).toHex();
      const startSubject = new BehaviorSubject(headKey);
      const query2 = at2 ? (startKey) => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K, startKey, at2) : (startKey) => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K, startKey);
      const setMeta = (key) => key.setMeta(meta, section2, method);
      return startSubject.pipe(
        switchMap(query2),
        map((keys2) => keys2.map(setMeta)),
        tap((keys2) => nextTick(() => {
          keys2.length === PAGE_SIZE_K ? startSubject.next(keys2[PAGE_SIZE_K - 1].toHex()) : startSubject.complete();
        })),
        toArray$1(),
        // toArray since we want to startSubject to be completed
        map(arrayFlatten)
      );
    }
    _retrieveMapKeysPaged({ iterKey, meta, method, section: section2 }, at2, opts) {
      if (!iterKey || !meta.type.isMap) {
        throw new Error("keys can only be retrieved on maps");
      }
      const setMeta = (key) => key.setMeta(meta, section2, method);
      const query2 = at2 ? (headKey) => this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey, at2) : (headKey) => this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey);
      return query2(iterKey(...opts.args).toHex()).pipe(map((keys2) => keys2.map(setMeta)));
    }
    _retrieveMapEntries(entry, at2, args) {
      const query2 = at2 ? (keys2) => this._rpcCore.state.queryStorageAt(keys2, at2) : (keys2) => this._rpcCore.state.queryStorageAt(keys2);
      return this._retrieveMapKeys(entry, at2, args).pipe(switchMap((keys2) => keys2.length ? combineLatest(arrayChunk(keys2, PAGE_SIZE_V).map(query2)).pipe(map((valsArr) => arrayFlatten(valsArr).map((value, index2) => [keys2[index2], value]))) : of([])));
    }
    _retrieveMapEntriesPaged(entry, at2, opts) {
      const query2 = at2 ? (keys2) => this._rpcCore.state.queryStorageAt(keys2, at2) : (keys2) => this._rpcCore.state.queryStorageAt(keys2);
      return this._retrieveMapKeysPaged(entry, at2, opts).pipe(switchMap((keys2) => keys2.length ? query2(keys2).pipe(map((valsArr) => valsArr.map((value, index2) => [keys2[index2], value]))) : of([])));
    }
    _decorateDeriveRx(decorateMethod) {
      var _a, _b, _c, _d;
      const specName = (_a = this._runtimeVersion) == null ? void 0 : _a.specName.toString();
      const available = getAvailableDerives(this.__internal__instanceId, this._rx, objectSpread({}, this._options.derives, (_d = (_c = (_b = this._options.typesBundle) == null ? void 0 : _b.spec) == null ? void 0 : _c[specName || ""]) == null ? void 0 : _d.derives));
      return decorateDeriveSections(decorateMethod, available);
    }
    _decorateDerive(decorateMethod) {
      return decorateDeriveSections(decorateMethod, this._rx.derive);
    }
  }
  const KEEPALIVE_INTERVAL = 1e4;
  const l$2 = logger("api/init");
  function textToString(t) {
    return t.toString();
  }
  class Init extends Decorate {
    constructor(options, type, decorateMethod) {
      super(options, type, decorateMethod);
      this.__internal__atLast = null;
      this.__internal__healthTimer = null;
      this.__internal__registries = [];
      this.__internal__updateSub = null;
      this.__internal__waitingRegistries = {};
      this.registry.setKnownTypes(options);
      if (!options.source) {
        this.registerTypes(options.types);
      } else {
        this.__internal__registries = options.source.__internal__registries;
      }
      this._rpc = this._decorateRpc(this._rpcCore, this._decorateMethod);
      this._rx.rpc = this._decorateRpc(this._rpcCore, this._rxDecorateMethod);
      if (this.supportMulti) {
        this._queryMulti = this._decorateMulti(this._decorateMethod);
        this._rx.queryMulti = this._decorateMulti(this._rxDecorateMethod);
      }
      this._rx.signer = options.signer;
      this._rpcCore.setRegistrySwap((blockHash) => this.getBlockRegistry(blockHash));
      this._rpcCore.setResolveBlockHash((blockNumber) => firstValueFrom(this._rpcCore.chain.getBlockHash(blockNumber)));
      if (this.hasSubscriptions) {
        this._rpcCore.provider.on("disconnected", () => this.__internal__onProviderDisconnect());
        this._rpcCore.provider.on("error", (e) => this.__internal__onProviderError(e));
        this._rpcCore.provider.on("connected", () => this.__internal__onProviderConnect());
      } else if (!this._options.noInitWarn) {
        l$2.warn("Api will be available in a limited mode since the provider does not support subscriptions");
      }
      if (this._rpcCore.provider.isConnected) {
        this.__internal__onProviderConnect();
      }
    }
    /**
     * @description Decorates a registry based on the runtime version
     */
    _initRegistry(registry, chain2, version2, metadata, chainProps) {
      registry.clearCache();
      registry.setChainProperties(chainProps || this.registry.getChainProperties());
      registry.setKnownTypes(this._options);
      registry.register(getSpecTypes(registry, chain2, version2.specName, version2.specVersion));
      registry.setHasher(getSpecHasher(registry, chain2, version2.specName));
      if (registry.knownTypes.typesBundle) {
        registry.knownTypes.typesAlias = getSpecAlias(registry, chain2, version2.specName);
      }
      registry.setMetadata(metadata, void 0, objectSpread({}, getSpecExtensions(registry, chain2, version2.specName), this._options.signedExtensions), this._options.noInitWarn);
    }
    /**
     * @description Returns the default versioned registry
     */
    _getDefaultRegistry() {
      return assertReturn(this.__internal__registries.find(({ isDefault }) => isDefault), "Initialization error, cannot find the default registry");
    }
    /**
     * @description Returns a decorated API instance at a specific point in time
     */
    async at(blockHash, knownVersion) {
      const u8aHash = u8aToU8a(blockHash);
      const u8aHex = u8aToHex(u8aHash);
      const registry = await this.getBlockRegistry(u8aHash, knownVersion);
      if (!this.__internal__atLast || this.__internal__atLast[0] !== u8aHex) {
        this.__internal__atLast = [u8aHex, this._createDecorated(registry, true, null, u8aHash).decoratedApi];
      }
      return this.__internal__atLast[1];
    }
    async _createBlockRegistry(blockHash, header, version2) {
      const registry = new TypeRegistry(blockHash);
      const metadata = new Metadata(registry, await firstValueFrom(this._rpcCore.state.getMetadata.raw(header.parentHash)));
      this._initRegistry(registry, this._runtimeChain, version2, metadata);
      const result = { counter: 0, lastBlockHash: blockHash, metadata, registry, runtimeVersion: version2 };
      this.__internal__registries.push(result);
      return result;
    }
    _cacheBlockRegistryProgress(key, creator) {
      let waiting = this.__internal__waitingRegistries[key];
      if (isUndefined$1(waiting)) {
        waiting = this.__internal__waitingRegistries[key] = new Promise((resolve, reject) => {
          creator().then((registry) => {
            delete this.__internal__waitingRegistries[key];
            resolve(registry);
          }).catch((error) => {
            delete this.__internal__waitingRegistries[key];
            reject(error);
          });
        });
      }
      return waiting;
    }
    _getBlockRegistryViaVersion(blockHash, version2) {
      if (version2) {
        const existingViaVersion = this.__internal__registries.find(({ runtimeVersion: { specName, specVersion } }) => specName.eq(version2.specName) && specVersion.eq(version2.specVersion));
        if (existingViaVersion) {
          existingViaVersion.counter++;
          existingViaVersion.lastBlockHash = blockHash;
          return existingViaVersion;
        }
      }
      return null;
    }
    async _getBlockRegistryViaHash(blockHash) {
      if (!this._genesisHash || !this._runtimeVersion) {
        throw new Error("Cannot retrieve data on an uninitialized chain");
      }
      const header = this.registry.createType("HeaderPartial", this._genesisHash.eq(blockHash) ? { number: BN_ZERO, parentHash: this._genesisHash } : await firstValueFrom(this._rpcCore.chain.getHeader.raw(blockHash)));
      if (header.parentHash.isEmpty) {
        throw new Error("Unable to retrieve header and parent from supplied hash");
      }
      getUpgradeVersion(this._genesisHash, header.number);
      const version2 = this.registry.createType("RuntimeVersionPartial", await firstValueFrom(this._rpcCore.state.getRuntimeVersion.raw(header.parentHash)));
      return (
        // try to find via version
        this._getBlockRegistryViaVersion(blockHash, version2) || // return new or in-flight result
        await this._cacheBlockRegistryProgress(version2.toHex(), () => this._createBlockRegistry(blockHash, header, version2))
      );
    }
    /**
     * @description Sets up a registry based on the block hash defined
     */
    async getBlockRegistry(blockHash, knownVersion) {
      return (
        // try to find via blockHash
        this.__internal__registries.find(({ lastBlockHash }) => lastBlockHash && u8aEq(lastBlockHash, blockHash)) || // try to find via version
        this._getBlockRegistryViaVersion(blockHash, knownVersion) || // return new or in-flight result
        await this._cacheBlockRegistryProgress(u8aToHex(blockHash), () => this._getBlockRegistryViaHash(blockHash))
      );
    }
    async _loadMeta() {
      var _a;
      if (this._isReady) {
        return true;
      }
      this._unsubscribeUpdates();
      [this._genesisHash, this._runtimeMetadata] = ((_a = this._options.source) == null ? void 0 : _a._isReady) ? await this._metaFromSource(this._options.source) : await this._metaFromChain(this._options.metadata);
      return this._initFromMeta(this._runtimeMetadata);
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async _metaFromSource(source) {
      this._extrinsicType = source.extrinsicVersion;
      this._runtimeChain = source.runtimeChain;
      this._runtimeVersion = source.runtimeVersion;
      const sections = Object.keys(source.rpc);
      const rpcs = [];
      for (let s = 0, scount = sections.length; s < scount; s++) {
        const section2 = sections[s];
        const methods = Object.keys(source.rpc[section2]);
        for (let m2 = 0, mcount = methods.length; m2 < mcount; m2++) {
          rpcs.push(`${section2}_${methods[m2]}`);
        }
      }
      this._filterRpc(rpcs, getSpecRpc(this.registry, source.runtimeChain, source.runtimeVersion.specName));
      return [source.genesisHash, source.runtimeMetadata];
    }
    // subscribe to metadata updates, inject the types on changes
    _subscribeUpdates() {
      if (this.__internal__updateSub || !this.hasSubscriptions) {
        return;
      }
      this.__internal__updateSub = this._rpcCore.state.subscribeRuntimeVersion().pipe(switchMap((version2) => {
        var _a;
        return (
          // only retrieve the metadata when the on-chain version has been changed
          ((_a = this._runtimeVersion) == null ? void 0 : _a.specVersion.eq(version2.specVersion)) ? of(false) : this._rpcCore.state.getMetadata().pipe(map((metadata) => {
            l$2.log(`Runtime version updated to spec=${version2.specVersion.toString()}, tx=${version2.transactionVersion.toString()}`);
            this._runtimeMetadata = metadata;
            this._runtimeVersion = version2;
            this._rx.runtimeVersion = version2;
            const thisRegistry = this._getDefaultRegistry();
            thisRegistry.metadata = metadata;
            thisRegistry.runtimeVersion = version2;
            this._initRegistry(this.registry, this._runtimeChain, version2, metadata);
            this._injectMetadata(thisRegistry, true);
            return true;
          }))
        );
      })).subscribe();
    }
    async _metaFromChain(optMetadata) {
      const [genesisHash, runtimeVersion, chain2, chainProps, rpcMethods, chainMetadata] = await Promise.all([
        firstValueFrom(this._rpcCore.chain.getBlockHash(0)),
        firstValueFrom(this._rpcCore.state.getRuntimeVersion()),
        firstValueFrom(this._rpcCore.system.chain()),
        firstValueFrom(this._rpcCore.system.properties()),
        firstValueFrom(this._rpcCore.rpc.methods()),
        optMetadata ? Promise.resolve(null) : firstValueFrom(this._rpcCore.state.getMetadata())
      ]);
      this._runtimeChain = chain2;
      this._runtimeVersion = runtimeVersion;
      this._rx.runtimeVersion = runtimeVersion;
      const metadataKey = `${genesisHash.toHex() || "0x"}-${runtimeVersion.specVersion.toString()}`;
      const metadata = chainMetadata || (optMetadata && optMetadata[metadataKey] ? new Metadata(this.registry, optMetadata[metadataKey]) : await firstValueFrom(this._rpcCore.state.getMetadata()));
      this._initRegistry(this.registry, chain2, runtimeVersion, metadata, chainProps);
      this._filterRpc(rpcMethods.methods.map(textToString), getSpecRpc(this.registry, chain2, runtimeVersion.specName));
      this._subscribeUpdates();
      if (!this.__internal__registries.length) {
        this.__internal__registries.push({ counter: 0, isDefault: true, metadata, registry: this.registry, runtimeVersion });
      }
      metadata.getUniqTypes(this._options.throwOnUnknown || false);
      return [genesisHash, metadata];
    }
    _initFromMeta(metadata) {
      this._extrinsicType = metadata.asLatest.extrinsic.version.toNumber();
      this._rx.extrinsicType = this._extrinsicType;
      this._rx.genesisHash = this._genesisHash;
      this._rx.runtimeVersion = this._runtimeVersion;
      this._injectMetadata(this._getDefaultRegistry(), true);
      this._rx.derive = this._decorateDeriveRx(this._rxDecorateMethod);
      this._derive = this._decorateDerive(this._decorateMethod);
      return true;
    }
    _subscribeHealth() {
      this._unsubscribeHealth();
      this.__internal__healthTimer = this.hasSubscriptions ? setInterval(() => {
        firstValueFrom(this._rpcCore.system.health.raw()).catch(() => void 0);
      }, KEEPALIVE_INTERVAL) : null;
    }
    _unsubscribeHealth() {
      if (this.__internal__healthTimer) {
        clearInterval(this.__internal__healthTimer);
        this.__internal__healthTimer = null;
      }
    }
    _unsubscribeUpdates() {
      if (this.__internal__updateSub) {
        this.__internal__updateSub.unsubscribe();
        this.__internal__updateSub = null;
      }
    }
    _unsubscribe() {
      this._unsubscribeHealth();
      this._unsubscribeUpdates();
    }
    async __internal__onProviderConnect() {
      this._isConnected.next(true);
      this.emit("connected");
      try {
        const cryptoReady = this._options.initWasm === false ? true : await cryptoWaitReady();
        const hasMeta = await this._loadMeta();
        this._subscribeHealth();
        if (hasMeta && !this._isReady && cryptoReady) {
          this._isReady = true;
          this.emit("ready", this);
        }
      } catch (_error) {
        const error = new Error(`FATAL: Unable to initialize the API: ${_error.message}`);
        l$2.error(error);
        this.emit("error", error);
      }
    }
    __internal__onProviderDisconnect() {
      this._isConnected.next(false);
      this._unsubscribe();
      this.emit("disconnected");
    }
    __internal__onProviderError(error) {
      this.emit("error", error);
    }
  }
  function assertResult(value) {
    if (value === void 0) {
      throw new Error("Api interfaces needs to be initialized before using, wait for 'isReady'");
    }
    return value;
  }
  class Getters extends Init {
    /**
     * @description Runtime call interfaces (currently untyped, only decorated via API options)
     */
    get call() {
      return assertResult(this._call);
    }
    /**
     * @description Contains the parameter types (constants) of all modules.
     *
     * The values are instances of the appropriate type and are accessible using `section`.`constantName`,
     *
     * @example
     * <BR>
     *
     * ```javascript
     * console.log(api.consts.democracy.enactmentPeriod.toString())
     * ```
     */
    get consts() {
      return assertResult(this._consts);
    }
    /**
     * @description Derived results that are injected into the API, allowing for combinations of various query results.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.derive.chain.bestNumber((number) => {
     *   console.log('best number', number);
     * });
     * ```
     */
    get derive() {
      return assertResult(this._derive);
    }
    /**
     * @description Errors from metadata
     */
    get errors() {
      return assertResult(this._errors);
    }
    /**
     * @description Events from metadata
     */
    get events() {
      return assertResult(this._events);
    }
    /**
     * @description  Returns the version of extrinsics in-use on this chain
     */
    get extrinsicVersion() {
      return this._extrinsicType;
    }
    /**
     * @description Contains the genesis Hash of the attached chain. Apart from being useful to determine the actual chain, it can also be used to sign immortal transactions.
     */
    get genesisHash() {
      return assertResult(this._genesisHash);
    }
    /**
     * @description true is the underlying provider is connected
     */
    get isConnected() {
      return this._isConnected.getValue();
    }
    /**
     * @description The library information name & version (from package.json)
     */
    get libraryInfo() {
      return `${packageInfo.name} v${packageInfo.version}`;
    }
    /**
     * @description Contains all the chain state modules and their subsequent methods in the API. These are attached dynamically from the runtime metadata.
     *
     * All calls inside the namespace, is denoted by `section`.`method` and may take an optional query parameter. As an example, `api.query.timestamp.now()` (current block timestamp) does not take parameters, while `api.query.system.account(<accountId>)` (retrieving the associated nonce & balances for an account), takes the `AccountId` as a parameter.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.query.system.account(<accountId>, ([nonce, balance]) => {
     *   console.log('new free balance', balance.free, 'new nonce', nonce);
     * });
     * ```
     */
    get query() {
      return assertResult(this._query);
    }
    /**
     * @description Allows for the querying of multiple storage entries and the combination thereof into a single result. This is a very optimal way to make multiple queries since it only makes a single connection to the node and retrieves the data over one subscription.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * const unsub = await api.queryMulti(
     *   [
     *     // you can include the storage without any parameters
     *     api.query.balances.totalIssuance,
     *     // or you can pass parameters to the storage query
     *     [api.query.system.account, '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY']
     *   ],
     *   ([existential, [, { free }]]) => {
     *     console.log(`You have ${free.sub(existential)} more than the existential deposit`);
     *
     *     unsub();
     *   }
     * );
     * ```
     */
    get queryMulti() {
      return assertResult(this._queryMulti);
    }
    /**
     * @description Contains all the raw rpc sections and their subsequent methods in the API as defined by the jsonrpc interface definitions. Unlike the dynamic `api.query` and `api.tx` sections, these methods are fixed (although extensible with node upgrades) and not determined by the runtime.
     *
     * RPC endpoints available here allow for the query of chain, node and system information, in addition to providing interfaces for the raw queries of state (using known keys) and the submission of transactions.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.rpc.chain.subscribeNewHeads((header) => {
     *   console.log('new header', header);
     * });
     * ```
     */
    get rpc() {
      return assertResult(this._rpc);
    }
    /**
     * @description Contains the chain information for the current node.
     */
    get runtimeChain() {
      return assertResult(this._runtimeChain);
    }
    /**
     * @description Yields the current attached runtime metadata. Generally this is only used to construct extrinsics & storage, but is useful for current runtime inspection.
     */
    get runtimeMetadata() {
      return assertResult(this._runtimeMetadata);
    }
    /**
     * @description Contains the version information for the current runtime.
     */
    get runtimeVersion() {
      return assertResult(this._runtimeVersion);
    }
    /**
     * @description The underlying Rx API interface
     */
    get rx() {
      return assertResult(this._rx);
    }
    /**
     * @description Returns the underlying provider stats
     */
    get stats() {
      return this._rpcCore.provider.stats;
    }
    /**
     * @description The type of this API instance, either 'rxjs' or 'promise'
     */
    get type() {
      return this._type;
    }
    /**
     * @description Contains all the extrinsic modules and their subsequent methods in the API. It allows for the construction of transactions and the submission thereof. These are attached dynamically from the runtime metadata.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.tx.balances
     *   .transfer(<recipientId>, <balance>)
     *   .signAndSend(<keyPair>, ({status}) => {
     *     console.log('tx status', status.asFinalized.toHex());
     *   });
     * ```
     */
    get tx() {
      return assertResult(this._extrinsics);
    }
    /**
     * @description Finds the definition for a specific [[CallFunction]] based on the index supplied
     */
    findCall(callIndex) {
      return findCall(this.registry, callIndex);
    }
    /**
     * @description Finds the definition for a specific [[RegistryError]] based on the index supplied
     */
    findError(errorIndex) {
      return findError(this.registry, errorIndex);
    }
  }
  class ApiBase extends Getters {
    /**
     * @description Create an instance of the class
     *
     * @param options Options object to create API instance or a Provider instance
     *
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     *
     * const api = new Api().isReady();
     *
     * api.rpc.subscribeNewHeads((header) => {
     *   console.log(`new block #${header.number.toNumber()}`);
     * });
     * ```
     */
    constructor(options = {}, type, decorateMethod) {
      super(options, type, decorateMethod);
    }
    /**
     * @description Connect from the underlying provider, halting all network traffic
     */
    connect() {
      return this._rpcCore.connect();
    }
    /**
     * @description Disconnect from the underlying provider, halting all network traffic
     */
    disconnect() {
      this._unsubscribe();
      return this._rpcCore.disconnect();
    }
    /**
     * @description Set an external signer which will be used to sign extrinsic when account passed in is not KeyringPair
     */
    setSigner(signer) {
      this._rx.signer = signer;
    }
    /**
     * @description Signs a raw signer payload, string or Uint8Array
     */
    async sign(address, data2, { signer } = {}) {
      if (isString$1(address)) {
        const _signer = signer || this._rx.signer;
        if (!_signer || !_signer.signRaw) {
          throw new Error("No signer exists with a signRaw interface. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.");
        }
        return (await _signer.signRaw(objectSpread({ type: "bytes" }, data2, { address }))).signature;
      }
      return u8aToHex(address.sign(u8aToU8a(data2.data)));
    }
  }
  class Combinator {
    constructor(fns, callback) {
      this.__internal__allHasFired = false;
      this.__internal__fired = [];
      this.__internal__fns = [];
      this.__internal__isActive = true;
      this.__internal__results = [];
      this.__internal__subscriptions = [];
      this.__internal__callback = callback;
      this.__internal__subscriptions = fns.map(async (input, index2) => {
        const [fn, ...args] = Array.isArray(input) ? input : [input];
        this.__internal__fired.push(false);
        this.__internal__fns.push(fn);
        return fn(...args, this._createCallback(index2));
      });
    }
    _allHasFired() {
      this.__internal__allHasFired || (this.__internal__allHasFired = this.__internal__fired.filter((hasFired) => !hasFired).length === 0);
      return this.__internal__allHasFired;
    }
    _createCallback(index2) {
      return (value) => {
        this.__internal__fired[index2] = true;
        this.__internal__results[index2] = value;
        this._triggerUpdate();
      };
    }
    _triggerUpdate() {
      if (!this.__internal__isActive || !isFunction$2(this.__internal__callback) || !this._allHasFired()) {
        return;
      }
      try {
        this.__internal__callback(this.__internal__results);
      } catch {
      }
    }
    unsubscribe() {
      if (!this.__internal__isActive) {
        return;
      }
      this.__internal__isActive = false;
      this.__internal__subscriptions.forEach(async (subscription) => {
        try {
          const unsubscribe = await subscription;
          if (isFunction$2(unsubscribe)) {
            unsubscribe();
          }
        } catch {
        }
      });
    }
  }
  function promiseTracker(resolve, reject) {
    let isCompleted = false;
    return {
      reject: (error) => {
        if (!isCompleted) {
          isCompleted = true;
          reject(error);
        }
        return EMPTY;
      },
      resolve: (value) => {
        if (!isCompleted) {
          isCompleted = true;
          resolve(value);
        }
      }
    };
  }
  function extractArgs(args, needsCallback) {
    const actualArgs = args.slice();
    const callback = args.length && isFunction$2(args[args.length - 1]) ? actualArgs.pop() : void 0;
    if (needsCallback && !isFunction$2(callback)) {
      throw new Error("Expected a callback to be passed with subscriptions");
    }
    return [actualArgs, callback];
  }
  function decorateCall(method, args) {
    return new Promise((resolve, reject) => {
      const tracker = promiseTracker(resolve, reject);
      const subscription = method(...args).pipe(catchError((error) => tracker.reject(error))).subscribe((result) => {
        tracker.resolve(result);
        nextTick(() => subscription.unsubscribe());
      });
    });
  }
  function decorateSubscribe(method, args, resultCb) {
    return new Promise((resolve, reject) => {
      const tracker = promiseTracker(resolve, reject);
      const subscription = method(...args).pipe(catchError((error) => tracker.reject(error)), tap(() => tracker.resolve(() => subscription.unsubscribe()))).subscribe((result) => {
        nextTick(() => resultCb(result));
      });
    });
  }
  function toPromiseMethod(method, options) {
    const needsCallback = !!(options && options.methodName && options.methodName.includes("subscribe"));
    return function(...args) {
      const [actualArgs, resultCb] = extractArgs(args, needsCallback);
      return resultCb ? decorateSubscribe(method, actualArgs, resultCb) : decorateCall((options == null ? void 0 : options.overrideNoSub) || method, actualArgs);
    };
  }
  class ApiPromise extends ApiBase {
    /**
     * @description Creates an instance of the ApiPromise class
     * @param options Options to create an instance. This can be either [[ApiOptions]] or
     * an [[WsProvider]].
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     *
     * new Api().isReady.then((api) => {
     *   api.rpc.subscribeNewHeads((header) => {
     *     console.log(`new block #${header.number.toNumber()}`);
     *   });
     * });
     * ```
     */
    constructor(options) {
      super(options, "promise", toPromiseMethod);
      this.__internal__isReadyPromise = new Promise((resolve) => {
        super.once("ready", () => resolve(this));
      });
      this.__internal__isReadyOrErrorPromise = new Promise((resolve, reject) => {
        const tracker = promiseTracker(resolve, reject);
        super.once("ready", () => tracker.resolve(this));
        super.once("error", (error) => tracker.reject(error));
      });
    }
    /**
     * @description Creates an ApiPromise instance using the supplied provider. Returns an Promise containing the actual Api instance.
     * @param options options that is passed to the class contructor. Can be either [[ApiOptions]] or a
     * provider (see the constructor arguments)
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     *
     * Api.create().then(async (api) => {
     *   const timestamp = await api.query.timestamp.now();
     *
     *   console.log(`lastest block timestamp ${timestamp}`);
     * });
     * ```
     */
    static create(options) {
      const instance2 = new ApiPromise(options);
      if (options && options.throwOnConnect) {
        return instance2.isReadyOrError;
      }
      instance2.isReadyOrError.catch(() => {
      });
      return instance2.isReady;
    }
    /**
     * @description Promise that resolves the first time we are connected and loaded
     */
    get isReady() {
      return this.__internal__isReadyPromise;
    }
    /**
     * @description Promise that resolves if we can connect, or reject if there is an error
     */
    get isReadyOrError() {
      return this.__internal__isReadyOrErrorPromise;
    }
    /**
     * @description Returns a clone of this ApiPromise instance (new underlying provider connection)
     */
    clone() {
      return new ApiPromise(objectSpread({}, this._options, { source: this }));
    }
    /**
     * @description Creates a combinator that can be used to combine the latest results from multiple subscriptions
     * @param fns An array of function to combine, each in the form of `(cb: (value: void)) => void`
     * @param callback A callback that will return an Array of all the values this combinator has been applied to
     * @example
     * <BR>
     *
     * ```javascript
     * const address = '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFacT7';
     *
     * // combines values from balance & nonce as it updates
     * api.combineLatest([
     *   api.rpc.chain.subscribeNewHeads,
     *   (cb) => api.query.system.account(address, cb)
     * ], ([head, [balance, nonce]]) => {
     *   console.log(`#${head.number}: You have ${balance.free} units, with ${nonce} transactions sent`);
     * });
     * ```
     */
    // eslint-disable-next-line @typescript-eslint/require-await
    async combineLatest(fns, callback) {
      const combinator = new Combinator(fns, callback);
      return () => {
        combinator.unsubscribe();
      };
    }
  }
  var axios$3 = { exports: {} };
  var bind$2 = function bind2(fn, thisArg) {
    return function wrap() {
      var args = new Array(arguments.length);
      for (var i2 = 0; i2 < args.length; i2++) {
        args[i2] = arguments[i2];
      }
      return fn.apply(thisArg, args);
    };
  };
  var bind$1 = bind$2;
  var toString = Object.prototype.toString;
  var kindOf = function(cache) {
    return function(thing) {
      var str = toString.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    };
  }(/* @__PURE__ */ Object.create(null));
  function kindOfTest(type) {
    type = type.toLowerCase();
    return function isKindOf(thing) {
      return kindOf(thing) === type;
    };
  }
  function isArray(val) {
    return Array.isArray(val);
  }
  function isUndefined(val) {
    return typeof val === "undefined";
  }
  function isBuffer(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
  }
  var isArrayBuffer = kindOfTest("ArrayBuffer");
  function isArrayBufferView(val) {
    var result;
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
      result = ArrayBuffer.isView(val);
    } else {
      result = val && val.buffer && isArrayBuffer(val.buffer);
    }
    return result;
  }
  function isString(val) {
    return typeof val === "string";
  }
  function isNumber(val) {
    return typeof val === "number";
  }
  function isObject(val) {
    return val !== null && typeof val === "object";
  }
  function isPlainObject$1(val) {
    if (kindOf(val) !== "object") {
      return false;
    }
    var prototype2 = Object.getPrototypeOf(val);
    return prototype2 === null || prototype2 === Object.prototype;
  }
  var isDate = kindOfTest("Date");
  var isFile = kindOfTest("File");
  var isBlob = kindOfTest("Blob");
  var isFileList = kindOfTest("FileList");
  function isFunction(val) {
    return toString.call(val) === "[object Function]";
  }
  function isStream(val) {
    return isObject(val) && isFunction(val.pipe);
  }
  function isFormData(thing) {
    var pattern = "[object FormData]";
    return thing && (typeof FormData === "function" && thing instanceof FormData || toString.call(thing) === pattern || isFunction(thing.toString) && thing.toString() === pattern);
  }
  var isURLSearchParams = kindOfTest("URLSearchParams");
  function trim$1(str) {
    return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
  }
  function isStandardBrowserEnv() {
    if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
      return false;
    }
    return typeof window !== "undefined" && typeof document !== "undefined";
  }
  function forEach(obj, fn) {
    if (obj === null || typeof obj === "undefined") {
      return;
    }
    if (typeof obj !== "object") {
      obj = [obj];
    }
    if (isArray(obj)) {
      for (var i2 = 0, l2 = obj.length; i2 < l2; i2++) {
        fn.call(null, obj[i2], i2, obj);
      }
    } else {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          fn.call(null, obj[key], key, obj);
        }
      }
    }
  }
  function merge$2() {
    var result = {};
    function assignValue(val, key) {
      if (isPlainObject$1(result[key]) && isPlainObject$1(val)) {
        result[key] = merge$2(result[key], val);
      } else if (isPlainObject$1(val)) {
        result[key] = merge$2({}, val);
      } else if (isArray(val)) {
        result[key] = val.slice();
      } else {
        result[key] = val;
      }
    }
    for (var i2 = 0, l2 = arguments.length; i2 < l2; i2++) {
      forEach(arguments[i2], assignValue);
    }
    return result;
  }
  function extend(a, b, thisArg) {
    forEach(b, function assignValue(val, key) {
      if (thisArg && typeof val === "function") {
        a[key] = bind$1(val, thisArg);
      } else {
        a[key] = val;
      }
    });
    return a;
  }
  function stripBOM(content) {
    if (content.charCodeAt(0) === 65279) {
      content = content.slice(1);
    }
    return content;
  }
  function inherits(constructor, superConstructor, props, descriptors2) {
    constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
    constructor.prototype.constructor = constructor;
    props && Object.assign(constructor.prototype, props);
  }
  function toFlatObject(sourceObj, destObj, filter2) {
    var props;
    var i2;
    var prop;
    var merged = {};
    destObj = destObj || {};
    do {
      props = Object.getOwnPropertyNames(sourceObj);
      i2 = props.length;
      while (i2-- > 0) {
        prop = props[i2];
        if (!merged[prop]) {
          destObj[prop] = sourceObj[prop];
          merged[prop] = true;
        }
      }
      sourceObj = Object.getPrototypeOf(sourceObj);
    } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
    return destObj;
  }
  function endsWith(str, searchString, position2) {
    str = String(str);
    if (position2 === void 0 || position2 > str.length) {
      position2 = str.length;
    }
    position2 -= searchString.length;
    var lastIndex = str.indexOf(searchString, position2);
    return lastIndex !== -1 && lastIndex === position2;
  }
  function toArray(thing) {
    if (!thing)
      return null;
    var i2 = thing.length;
    if (isUndefined(i2))
      return null;
    var arr2 = new Array(i2);
    while (i2-- > 0) {
      arr2[i2] = thing[i2];
    }
    return arr2;
  }
  var isTypedArray = function(TypedArray) {
    return function(thing) {
      return TypedArray && thing instanceof TypedArray;
    };
  }(typeof Uint8Array !== "undefined" && Object.getPrototypeOf(Uint8Array));
  var utils$c = {
    isArray,
    isArrayBuffer,
    isBuffer,
    isFormData,
    isArrayBufferView,
    isString,
    isNumber,
    isObject,
    isPlainObject: isPlainObject$1,
    isUndefined,
    isDate,
    isFile,
    isBlob,
    isFunction,
    isStream,
    isURLSearchParams,
    isStandardBrowserEnv,
    forEach,
    merge: merge$2,
    extend,
    trim: trim$1,
    stripBOM,
    inherits,
    toFlatObject,
    kindOf,
    kindOfTest,
    endsWith,
    toArray,
    isTypedArray,
    isFileList
  };
  var utils$b = utils$c;
  function encode(val) {
    return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
  }
  var buildURL$1 = function buildURL2(url, params, paramsSerializer) {
    if (!params) {
      return url;
    }
    var serializedParams;
    if (paramsSerializer) {
      serializedParams = paramsSerializer(params);
    } else if (utils$b.isURLSearchParams(params)) {
      serializedParams = params.toString();
    } else {
      var parts = [];
      utils$b.forEach(params, function serialize2(val, key) {
        if (val === null || typeof val === "undefined") {
          return;
        }
        if (utils$b.isArray(val)) {
          key = key + "[]";
        } else {
          val = [val];
        }
        utils$b.forEach(val, function parseValue(v) {
          if (utils$b.isDate(v)) {
            v = v.toISOString();
          } else if (utils$b.isObject(v)) {
            v = JSON.stringify(v);
          }
          parts.push(encode(key) + "=" + encode(v));
        });
      });
      serializedParams = parts.join("&");
    }
    if (serializedParams) {
      var hashmarkIndex = url.indexOf("#");
      if (hashmarkIndex !== -1) {
        url = url.slice(0, hashmarkIndex);
      }
      url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
    }
    return url;
  };
  var utils$a = utils$c;
  function InterceptorManager$1() {
    this.handlers = [];
  }
  InterceptorManager$1.prototype.use = function use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  };
  InterceptorManager$1.prototype.eject = function eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  };
  InterceptorManager$1.prototype.forEach = function forEach2(fn) {
    utils$a.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  };
  var InterceptorManager_1 = InterceptorManager$1;
  var utils$9 = utils$c;
  var normalizeHeaderName$1 = function normalizeHeaderName2(headers, normalizedName) {
    utils$9.forEach(headers, function processHeader(value, name) {
      if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
        headers[normalizedName] = value;
        delete headers[name];
      }
    });
  };
  var utils$8 = utils$c;
  function AxiosError$2(message, code, config2, request2, response) {
    Error.call(this);
    this.message = message;
    this.name = "AxiosError";
    code && (this.code = code);
    config2 && (this.config = config2);
    request2 && (this.request = request2);
    response && (this.response = response);
  }
  utils$8.inherits(AxiosError$2, Error, {
    toJSON: function toJSON() {
      return {
        // Standard
        message: this.message,
        name: this.name,
        // Microsoft
        description: this.description,
        number: this.number,
        // Mozilla
        fileName: this.fileName,
        lineNumber: this.lineNumber,
        columnNumber: this.columnNumber,
        stack: this.stack,
        // Axios
        config: this.config,
        code: this.code,
        status: this.response && this.response.status ? this.response.status : null
      };
    }
  });
  var prototype = AxiosError$2.prototype;
  var descriptors = {};
  [
    "ERR_BAD_OPTION_VALUE",
    "ERR_BAD_OPTION",
    "ECONNABORTED",
    "ETIMEDOUT",
    "ERR_NETWORK",
    "ERR_FR_TOO_MANY_REDIRECTS",
    "ERR_DEPRECATED",
    "ERR_BAD_RESPONSE",
    "ERR_BAD_REQUEST",
    "ERR_CANCELED"
    // eslint-disable-next-line func-names
  ].forEach(function(code) {
    descriptors[code] = { value: code };
  });
  Object.defineProperties(AxiosError$2, descriptors);
  Object.defineProperty(prototype, "isAxiosError", { value: true });
  AxiosError$2.from = function(error, code, config2, request2, response, customProps) {
    var axiosError = Object.create(prototype);
    utils$8.toFlatObject(error, axiosError, function filter2(obj) {
      return obj !== Error.prototype;
    });
    AxiosError$2.call(axiosError, error.message, code, config2, request2, response);
    axiosError.name = error.name;
    customProps && Object.assign(axiosError, customProps);
    return axiosError;
  };
  var AxiosError_1 = AxiosError$2;
  var transitional = {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  };
  var utils$7 = utils$c;
  function toFormData$1(obj, formData) {
    formData = formData || new FormData();
    var stack = [];
    function convertValue(value) {
      if (value === null)
        return "";
      if (utils$7.isDate(value)) {
        return value.toISOString();
      }
      if (utils$7.isArrayBuffer(value) || utils$7.isTypedArray(value)) {
        return typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
      }
      return value;
    }
    function build(data2, parentKey) {
      if (utils$7.isPlainObject(data2) || utils$7.isArray(data2)) {
        if (stack.indexOf(data2) !== -1) {
          throw Error("Circular reference detected in " + parentKey);
        }
        stack.push(data2);
        utils$7.forEach(data2, function each2(value, key) {
          if (utils$7.isUndefined(value))
            return;
          var fullKey = parentKey ? parentKey + "." + key : key;
          var arr2;
          if (value && !parentKey && typeof value === "object") {
            if (utils$7.endsWith(key, "{}")) {
              value = JSON.stringify(value);
            } else if (utils$7.endsWith(key, "[]") && (arr2 = utils$7.toArray(value))) {
              arr2.forEach(function(el) {
                !utils$7.isUndefined(el) && formData.append(fullKey, convertValue(el));
              });
              return;
            }
          }
          build(value, fullKey);
        });
        stack.pop();
      } else {
        formData.append(parentKey, convertValue(data2));
      }
    }
    build(obj);
    return formData;
  }
  var toFormData_1 = toFormData$1;
  var settle;
  var hasRequiredSettle;
  function requireSettle() {
    if (hasRequiredSettle)
      return settle;
    hasRequiredSettle = 1;
    var AxiosError2 = AxiosError_1;
    settle = function settle2(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError2(
          "Request failed with status code " + response.status,
          [AxiosError2.ERR_BAD_REQUEST, AxiosError2.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    };
    return settle;
  }
  var cookies;
  var hasRequiredCookies;
  function requireCookies() {
    if (hasRequiredCookies)
      return cookies;
    hasRequiredCookies = 1;
    var utils2 = utils$c;
    cookies = utils2.isStandardBrowserEnv() ? (
      // Standard browser envs support document.cookie
      function standardBrowserEnv() {
        return {
          write: function write(name, value, expires, path2, domain, secure) {
            var cookie2 = [];
            cookie2.push(name + "=" + encodeURIComponent(value));
            if (utils2.isNumber(expires)) {
              cookie2.push("expires=" + new Date(expires).toGMTString());
            }
            if (utils2.isString(path2)) {
              cookie2.push("path=" + path2);
            }
            if (utils2.isString(domain)) {
              cookie2.push("domain=" + domain);
            }
            if (secure === true) {
              cookie2.push("secure");
            }
            document.cookie = cookie2.join("; ");
          },
          read: function read(name) {
            var match2 = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match2 ? decodeURIComponent(match2[3]) : null;
          },
          remove: function remove(name) {
            this.write(name, "", Date.now() - 864e5);
          }
        };
      }()
    ) : (
      // Non standard browser env (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return {
          write: function write() {
          },
          read: function read() {
            return null;
          },
          remove: function remove() {
          }
        };
      }()
    );
    return cookies;
  }
  var isAbsoluteURL$1 = function isAbsoluteURL2(url) {
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
  };
  var combineURLs$1 = function combineURLs2(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
  };
  var isAbsoluteURL = isAbsoluteURL$1;
  var combineURLs = combineURLs$1;
  var buildFullPath$1 = function buildFullPath2(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) {
      return combineURLs(baseURL, requestedURL);
    }
    return requestedURL;
  };
  var parseHeaders;
  var hasRequiredParseHeaders;
  function requireParseHeaders() {
    if (hasRequiredParseHeaders)
      return parseHeaders;
    hasRequiredParseHeaders = 1;
    var utils2 = utils$c;
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    parseHeaders = function parseHeaders2(headers) {
      var parsed = {};
      var key;
      var val;
      var i2;
      if (!headers) {
        return parsed;
      }
      utils2.forEach(headers.split("\n"), function parser(line2) {
        i2 = line2.indexOf(":");
        key = utils2.trim(line2.substr(0, i2)).toLowerCase();
        val = utils2.trim(line2.substr(i2 + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
    return parseHeaders;
  }
  var isURLSameOrigin;
  var hasRequiredIsURLSameOrigin;
  function requireIsURLSameOrigin() {
    if (hasRequiredIsURLSameOrigin)
      return isURLSameOrigin;
    hasRequiredIsURLSameOrigin = 1;
    var utils2 = utils$c;
    isURLSameOrigin = utils2.isStandardBrowserEnv() ? (
      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      function standardBrowserEnv() {
        var msie = /(msie|trident)/i.test(navigator.userAgent);
        var urlParsingNode = document.createElement("a");
        var originURL;
        function resolveURL(url) {
          var href = url;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin2(requestURL) {
          var parsed = utils2.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }()
    ) : (
      // Non standard browser envs (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return function isURLSameOrigin2() {
          return true;
        };
      }()
    );
    return isURLSameOrigin;
  }
  var CanceledError_1;
  var hasRequiredCanceledError;
  function requireCanceledError() {
    if (hasRequiredCanceledError)
      return CanceledError_1;
    hasRequiredCanceledError = 1;
    var AxiosError2 = AxiosError_1;
    var utils2 = utils$c;
    function CanceledError2(message) {
      AxiosError2.call(this, message == null ? "canceled" : message, AxiosError2.ERR_CANCELED);
      this.name = "CanceledError";
    }
    utils2.inherits(CanceledError2, AxiosError2, {
      __CANCEL__: true
    });
    CanceledError_1 = CanceledError2;
    return CanceledError_1;
  }
  var parseProtocol;
  var hasRequiredParseProtocol;
  function requireParseProtocol() {
    if (hasRequiredParseProtocol)
      return parseProtocol;
    hasRequiredParseProtocol = 1;
    parseProtocol = function parseProtocol2(url) {
      var match2 = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match2 && match2[1] || "";
    };
    return parseProtocol;
  }
  var xhr;
  var hasRequiredXhr;
  function requireXhr() {
    if (hasRequiredXhr)
      return xhr;
    hasRequiredXhr = 1;
    var utils2 = utils$c;
    var settle2 = requireSettle();
    var cookies2 = requireCookies();
    var buildURL2 = buildURL$1;
    var buildFullPath2 = buildFullPath$1;
    var parseHeaders2 = requireParseHeaders();
    var isURLSameOrigin2 = requireIsURLSameOrigin();
    var transitionalDefaults2 = transitional;
    var AxiosError2 = AxiosError_1;
    var CanceledError2 = requireCanceledError();
    var parseProtocol2 = requireParseProtocol();
    xhr = function xhrAdapter(config2) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config2.data;
        var requestHeaders = config2.headers;
        var responseType = config2.responseType;
        var onCanceled;
        function done() {
          if (config2.cancelToken) {
            config2.cancelToken.unsubscribe(onCanceled);
          }
          if (config2.signal) {
            config2.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils2.isFormData(requestData) && utils2.isStandardBrowserEnv()) {
          delete requestHeaders["Content-Type"];
        }
        var request2 = new XMLHttpRequest();
        if (config2.auth) {
          var username = config2.auth.username || "";
          var password = config2.auth.password ? unescape(encodeURIComponent(config2.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath2(config2.baseURL, config2.url);
        request2.open(config2.method.toUpperCase(), buildURL2(fullPath, config2.params, config2.paramsSerializer), true);
        request2.timeout = config2.timeout;
        function onloadend() {
          if (!request2) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request2 ? parseHeaders2(request2.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request2.responseText : request2.response;
          var response = {
            data: responseData,
            status: request2.status,
            statusText: request2.statusText,
            headers: responseHeaders,
            config: config2,
            request: request2
          };
          settle2(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request2 = null;
        }
        if ("onloadend" in request2) {
          request2.onloadend = onloadend;
        } else {
          request2.onreadystatechange = function handleLoad() {
            if (!request2 || request2.readyState !== 4) {
              return;
            }
            if (request2.status === 0 && !(request2.responseURL && request2.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request2.onabort = function handleAbort() {
          if (!request2) {
            return;
          }
          reject(new AxiosError2("Request aborted", AxiosError2.ECONNABORTED, config2, request2));
          request2 = null;
        };
        request2.onerror = function handleError() {
          reject(new AxiosError2("Network Error", AxiosError2.ERR_NETWORK, config2, request2, request2));
          request2 = null;
        };
        request2.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config2.timeout ? "timeout of " + config2.timeout + "ms exceeded" : "timeout exceeded";
          var transitional2 = config2.transitional || transitionalDefaults2;
          if (config2.timeoutErrorMessage) {
            timeoutErrorMessage = config2.timeoutErrorMessage;
          }
          reject(new AxiosError2(
            timeoutErrorMessage,
            transitional2.clarifyTimeoutError ? AxiosError2.ETIMEDOUT : AxiosError2.ECONNABORTED,
            config2,
            request2
          ));
          request2 = null;
        };
        if (utils2.isStandardBrowserEnv()) {
          var xsrfValue = (config2.withCredentials || isURLSameOrigin2(fullPath)) && config2.xsrfCookieName ? cookies2.read(config2.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config2.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request2) {
          utils2.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request2.setRequestHeader(key, val);
            }
          });
        }
        if (!utils2.isUndefined(config2.withCredentials)) {
          request2.withCredentials = !!config2.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request2.responseType = config2.responseType;
        }
        if (typeof config2.onDownloadProgress === "function") {
          request2.addEventListener("progress", config2.onDownloadProgress);
        }
        if (typeof config2.onUploadProgress === "function" && request2.upload) {
          request2.upload.addEventListener("progress", config2.onUploadProgress);
        }
        if (config2.cancelToken || config2.signal) {
          onCanceled = function(cancel) {
            if (!request2) {
              return;
            }
            reject(!cancel || cancel && cancel.type ? new CanceledError2() : cancel);
            request2.abort();
            request2 = null;
          };
          config2.cancelToken && config2.cancelToken.subscribe(onCanceled);
          if (config2.signal) {
            config2.signal.aborted ? onCanceled() : config2.signal.addEventListener("abort", onCanceled);
          }
        }
        if (!requestData) {
          requestData = null;
        }
        var protocol = parseProtocol2(fullPath);
        if (protocol && ["http", "https", "file"].indexOf(protocol) === -1) {
          reject(new AxiosError2("Unsupported protocol " + protocol + ":", AxiosError2.ERR_BAD_REQUEST, config2));
          return;
        }
        request2.send(requestData);
      });
    };
    return xhr;
  }
  var _null;
  var hasRequired_null;
  function require_null() {
    if (hasRequired_null)
      return _null;
    hasRequired_null = 1;
    _null = null;
    return _null;
  }
  var utils$6 = utils$c;
  var normalizeHeaderName = normalizeHeaderName$1;
  var AxiosError$1 = AxiosError_1;
  var transitionalDefaults = transitional;
  var toFormData = toFormData_1;
  var DEFAULT_CONTENT_TYPE = {
    "Content-Type": "application/x-www-form-urlencoded"
  };
  function setContentTypeIfUnset(headers, value) {
    if (!utils$6.isUndefined(headers) && utils$6.isUndefined(headers["Content-Type"])) {
      headers["Content-Type"] = value;
    }
  }
  function getDefaultAdapter() {
    var adapter;
    if (typeof XMLHttpRequest !== "undefined") {
      adapter = requireXhr();
    } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
      adapter = requireXhr();
    }
    return adapter;
  }
  function stringifySafely(rawValue, parser, encoder2) {
    if (utils$6.isString(rawValue)) {
      try {
        (parser || JSON.parse)(rawValue);
        return utils$6.trim(rawValue);
      } catch (e) {
        if (e.name !== "SyntaxError") {
          throw e;
        }
      }
    }
    return (encoder2 || JSON.stringify)(rawValue);
  }
  var defaults$3 = {
    transitional: transitionalDefaults,
    adapter: getDefaultAdapter(),
    transformRequest: [function transformRequest(data2, headers) {
      normalizeHeaderName(headers, "Accept");
      normalizeHeaderName(headers, "Content-Type");
      if (utils$6.isFormData(data2) || utils$6.isArrayBuffer(data2) || utils$6.isBuffer(data2) || utils$6.isStream(data2) || utils$6.isFile(data2) || utils$6.isBlob(data2)) {
        return data2;
      }
      if (utils$6.isArrayBufferView(data2)) {
        return data2.buffer;
      }
      if (utils$6.isURLSearchParams(data2)) {
        setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
        return data2.toString();
      }
      var isObjectPayload = utils$6.isObject(data2);
      var contentType = headers && headers["Content-Type"];
      var isFileList2;
      if ((isFileList2 = utils$6.isFileList(data2)) || isObjectPayload && contentType === "multipart/form-data") {
        var _FormData = this.env && this.env.FormData;
        return toFormData(isFileList2 ? { "files[]": data2 } : data2, _FormData && new _FormData());
      } else if (isObjectPayload || contentType === "application/json") {
        setContentTypeIfUnset(headers, "application/json");
        return stringifySafely(data2);
      }
      return data2;
    }],
    transformResponse: [function transformResponse(data2) {
      var transitional2 = this.transitional || defaults$3.transitional;
      var silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      var forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
      var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
      if (strictJSONParsing || forcedJSONParsing && utils$6.isString(data2) && data2.length) {
        try {
          return JSON.parse(data2);
        } catch (e) {
          if (strictJSONParsing) {
            if (e.name === "SyntaxError") {
              throw AxiosError$1.from(e, AxiosError$1.ERR_BAD_RESPONSE, this, null, this.response);
            }
            throw e;
          }
        }
      }
      return data2;
    }],
    /**
     * A timeout in milliseconds to abort a request. If set to 0 (default) a
     * timeout is not created.
     */
    timeout: 0,
    xsrfCookieName: "XSRF-TOKEN",
    xsrfHeaderName: "X-XSRF-TOKEN",
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: require_null()
    },
    validateStatus: function validateStatus(status) {
      return status >= 200 && status < 300;
    },
    headers: {
      common: {
        "Accept": "application/json, text/plain, */*"
      }
    }
  };
  utils$6.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
    defaults$3.headers[method] = {};
  });
  utils$6.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
    defaults$3.headers[method] = utils$6.merge(DEFAULT_CONTENT_TYPE);
  });
  var defaults_1 = defaults$3;
  var utils$5 = utils$c;
  var defaults$2 = defaults_1;
  var transformData$1 = function transformData2(data2, headers, fns) {
    var context = this || defaults$2;
    utils$5.forEach(fns, function transform(fn) {
      data2 = fn.call(context, data2, headers);
    });
    return data2;
  };
  var isCancel$1;
  var hasRequiredIsCancel;
  function requireIsCancel() {
    if (hasRequiredIsCancel)
      return isCancel$1;
    hasRequiredIsCancel = 1;
    isCancel$1 = function isCancel2(value) {
      return !!(value && value.__CANCEL__);
    };
    return isCancel$1;
  }
  var utils$4 = utils$c;
  var transformData = transformData$1;
  var isCancel = requireIsCancel();
  var defaults$1 = defaults_1;
  var CanceledError = requireCanceledError();
  function throwIfCancellationRequested(config2) {
    if (config2.cancelToken) {
      config2.cancelToken.throwIfRequested();
    }
    if (config2.signal && config2.signal.aborted) {
      throw new CanceledError();
    }
  }
  var dispatchRequest$1 = function dispatchRequest2(config2) {
    throwIfCancellationRequested(config2);
    config2.headers = config2.headers || {};
    config2.data = transformData.call(
      config2,
      config2.data,
      config2.headers,
      config2.transformRequest
    );
    config2.headers = utils$4.merge(
      config2.headers.common || {},
      config2.headers[config2.method] || {},
      config2.headers
    );
    utils$4.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      function cleanHeaderConfig(method) {
        delete config2.headers[method];
      }
    );
    var adapter = config2.adapter || defaults$1.adapter;
    return adapter(config2).then(function onAdapterResolution(response) {
      throwIfCancellationRequested(config2);
      response.data = transformData.call(
        config2,
        response.data,
        response.headers,
        config2.transformResponse
      );
      return response;
    }, function onAdapterRejection(reason) {
      if (!isCancel(reason)) {
        throwIfCancellationRequested(config2);
        if (reason && reason.response) {
          reason.response.data = transformData.call(
            config2,
            reason.response.data,
            reason.response.headers,
            config2.transformResponse
          );
        }
      }
      return Promise.reject(reason);
    });
  };
  var utils$3 = utils$c;
  var mergeConfig$2 = function mergeConfig2(config1, config2) {
    config2 = config2 || {};
    var config3 = {};
    function getMergedValue(target, source) {
      if (utils$3.isPlainObject(target) && utils$3.isPlainObject(source)) {
        return utils$3.merge(target, source);
      } else if (utils$3.isPlainObject(source)) {
        return utils$3.merge({}, source);
      } else if (utils$3.isArray(source)) {
        return source.slice();
      }
      return source;
    }
    function mergeDeepProperties(prop) {
      if (!utils$3.isUndefined(config2[prop])) {
        return getMergedValue(config1[prop], config2[prop]);
      } else if (!utils$3.isUndefined(config1[prop])) {
        return getMergedValue(void 0, config1[prop]);
      }
    }
    function valueFromConfig2(prop) {
      if (!utils$3.isUndefined(config2[prop])) {
        return getMergedValue(void 0, config2[prop]);
      }
    }
    function defaultToConfig2(prop) {
      if (!utils$3.isUndefined(config2[prop])) {
        return getMergedValue(void 0, config2[prop]);
      } else if (!utils$3.isUndefined(config1[prop])) {
        return getMergedValue(void 0, config1[prop]);
      }
    }
    function mergeDirectKeys(prop) {
      if (prop in config2) {
        return getMergedValue(config1[prop], config2[prop]);
      } else if (prop in config1) {
        return getMergedValue(void 0, config1[prop]);
      }
    }
    var mergeMap2 = {
      "url": valueFromConfig2,
      "method": valueFromConfig2,
      "data": valueFromConfig2,
      "baseURL": defaultToConfig2,
      "transformRequest": defaultToConfig2,
      "transformResponse": defaultToConfig2,
      "paramsSerializer": defaultToConfig2,
      "timeout": defaultToConfig2,
      "timeoutMessage": defaultToConfig2,
      "withCredentials": defaultToConfig2,
      "adapter": defaultToConfig2,
      "responseType": defaultToConfig2,
      "xsrfCookieName": defaultToConfig2,
      "xsrfHeaderName": defaultToConfig2,
      "onUploadProgress": defaultToConfig2,
      "onDownloadProgress": defaultToConfig2,
      "decompress": defaultToConfig2,
      "maxContentLength": defaultToConfig2,
      "maxBodyLength": defaultToConfig2,
      "beforeRedirect": defaultToConfig2,
      "transport": defaultToConfig2,
      "httpAgent": defaultToConfig2,
      "httpsAgent": defaultToConfig2,
      "cancelToken": defaultToConfig2,
      "socketPath": defaultToConfig2,
      "responseEncoding": defaultToConfig2,
      "validateStatus": mergeDirectKeys
    };
    utils$3.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
      var merge2 = mergeMap2[prop] || mergeDeepProperties;
      var configValue = merge2(prop);
      utils$3.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config3[prop] = configValue);
    });
    return config3;
  };
  var data;
  var hasRequiredData;
  function requireData() {
    if (hasRequiredData)
      return data;
    hasRequiredData = 1;
    data = {
      "version": "0.27.2"
    };
    return data;
  }
  var VERSION = requireData().version;
  var AxiosError = AxiosError_1;
  var validators$1 = {};
  ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i2) {
    validators$1[type] = function validator2(thing) {
      return typeof thing === type || "a" + (i2 < 1 ? "n " : " ") + type;
    };
  });
  var deprecatedWarnings = {};
  validators$1.transitional = function transitional2(validator2, version2, message) {
    function formatMessage(opt, desc) {
      return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
    }
    return function(value, opt, opts) {
      if (validator2 === false) {
        throw new AxiosError(
          formatMessage(opt, " has been removed" + (version2 ? " in " + version2 : "")),
          AxiosError.ERR_DEPRECATED
        );
      }
      if (version2 && !deprecatedWarnings[opt]) {
        deprecatedWarnings[opt] = true;
        console.warn(
          formatMessage(
            opt,
            " has been deprecated since v" + version2 + " and will be removed in the near future"
          )
        );
      }
      return validator2 ? validator2(value, opt, opts) : true;
    };
  };
  function assertOptions(options, schema, allowUnknown) {
    if (typeof options !== "object") {
      throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
    }
    var keys2 = Object.keys(options);
    var i2 = keys2.length;
    while (i2-- > 0) {
      var opt = keys2[i2];
      var validator2 = schema[opt];
      if (validator2) {
        var value = options[opt];
        var result = value === void 0 || validator2(value, opt, options);
        if (result !== true) {
          throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
        }
        continue;
      }
      if (allowUnknown !== true) {
        throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
      }
    }
  }
  var validator$2 = {
    assertOptions,
    validators: validators$1
  };
  var utils$2 = utils$c;
  var buildURL = buildURL$1;
  var InterceptorManager = InterceptorManager_1;
  var dispatchRequest = dispatchRequest$1;
  var mergeConfig$1 = mergeConfig$2;
  var buildFullPath = buildFullPath$1;
  var validator$1 = validator$2;
  var validators = validator$1.validators;
  function Axios$1(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager(),
      response: new InterceptorManager()
    };
  }
  Axios$1.prototype.request = function request2(configOrUrl, config2) {
    if (typeof configOrUrl === "string") {
      config2 = config2 || {};
      config2.url = configOrUrl;
    } else {
      config2 = configOrUrl || {};
    }
    config2 = mergeConfig$1(this.defaults, config2);
    if (config2.method) {
      config2.method = config2.method.toLowerCase();
    } else if (this.defaults.method) {
      config2.method = this.defaults.method.toLowerCase();
    } else {
      config2.method = "get";
    }
    var transitional2 = config2.transitional;
    if (transitional2 !== void 0) {
      validator$1.assertOptions(transitional2, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
      }, false);
    }
    var requestInterceptorChain = [];
    var synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config2) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    var responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    var promise;
    if (!synchronousRequestInterceptors) {
      var chain2 = [dispatchRequest, void 0];
      Array.prototype.unshift.apply(chain2, requestInterceptorChain);
      chain2 = chain2.concat(responseInterceptorChain);
      promise = Promise.resolve(config2);
      while (chain2.length) {
        promise = promise.then(chain2.shift(), chain2.shift());
      }
      return promise;
    }
    var newConfig = config2;
    while (requestInterceptorChain.length) {
      var onFulfilled = requestInterceptorChain.shift();
      var onRejected = requestInterceptorChain.shift();
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected(error);
        break;
      }
    }
    try {
      promise = dispatchRequest(newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    while (responseInterceptorChain.length) {
      promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
    }
    return promise;
  };
  Axios$1.prototype.getUri = function getUri(config2) {
    config2 = mergeConfig$1(this.defaults, config2);
    var fullPath = buildFullPath(config2.baseURL, config2.url);
    return buildURL(fullPath, config2.params, config2.paramsSerializer);
  };
  utils$2.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
    Axios$1.prototype[method] = function(url, config2) {
      return this.request(mergeConfig$1(config2 || {}, {
        method,
        url,
        data: (config2 || {}).data
      }));
    };
  });
  utils$2.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
    function generateHTTPMethod(isForm) {
      return function httpMethod(url, data2, config2) {
        return this.request(mergeConfig$1(config2 || {}, {
          method,
          headers: isForm ? {
            "Content-Type": "multipart/form-data"
          } : {},
          url,
          data: data2
        }));
      };
    }
    Axios$1.prototype[method] = generateHTTPMethod();
    Axios$1.prototype[method + "Form"] = generateHTTPMethod(true);
  });
  var Axios_1 = Axios$1;
  var CancelToken_1;
  var hasRequiredCancelToken;
  function requireCancelToken() {
    if (hasRequiredCancelToken)
      return CancelToken_1;
    hasRequiredCancelToken = 1;
    var CanceledError2 = requireCanceledError();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token2 = this;
      this.promise.then(function(cancel) {
        if (!token2._listeners)
          return;
        var i2;
        var l2 = token2._listeners.length;
        for (i2 = 0; i2 < l2; i2++) {
          token2._listeners[i2](cancel);
        }
        token2._listeners = null;
      });
      this.promise.then = function(onfulfilled) {
        var _resolve;
        var promise = new Promise(function(resolve) {
          token2.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token2.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message) {
        if (token2.reason) {
          return;
        }
        token2.reason = new CanceledError2(message);
        resolvePromise(token2.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };
    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index2 = this._listeners.indexOf(listener);
      if (index2 !== -1) {
        this._listeners.splice(index2, 1);
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token2 = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token: token2,
        cancel
      };
    };
    CancelToken_1 = CancelToken;
    return CancelToken_1;
  }
  var spread;
  var hasRequiredSpread;
  function requireSpread() {
    if (hasRequiredSpread)
      return spread;
    hasRequiredSpread = 1;
    spread = function spread2(callback) {
      return function wrap(arr2) {
        return callback.apply(null, arr2);
      };
    };
    return spread;
  }
  var isAxiosError;
  var hasRequiredIsAxiosError;
  function requireIsAxiosError() {
    if (hasRequiredIsAxiosError)
      return isAxiosError;
    hasRequiredIsAxiosError = 1;
    var utils2 = utils$c;
    isAxiosError = function isAxiosError2(payload) {
      return utils2.isObject(payload) && payload.isAxiosError === true;
    };
    return isAxiosError;
  }
  var utils$1 = utils$c;
  var bind = bind$2;
  var Axios = Axios_1;
  var mergeConfig = mergeConfig$2;
  var defaults = defaults_1;
  function createInstance(defaultConfig) {
    var context = new Axios(defaultConfig);
    var instance2 = bind(Axios.prototype.request, context);
    utils$1.extend(instance2, Axios.prototype, context);
    utils$1.extend(instance2, context);
    instance2.create = function create(instanceConfig) {
      return createInstance(mergeConfig(defaultConfig, instanceConfig));
    };
    return instance2;
  }
  var axios$2 = createInstance(defaults);
  axios$2.Axios = Axios;
  axios$2.CanceledError = requireCanceledError();
  axios$2.CancelToken = requireCancelToken();
  axios$2.isCancel = requireIsCancel();
  axios$2.VERSION = requireData().version;
  axios$2.toFormData = toFormData_1;
  axios$2.AxiosError = AxiosError_1;
  axios$2.Cancel = axios$2.CanceledError;
  axios$2.all = function all2(promises) {
    return Promise.all(promises);
  };
  axios$2.spread = requireSpread();
  axios$2.isAxiosError = requireIsAxiosError();
  axios$3.exports = axios$2;
  axios$3.exports.default = axios$2;
  var axiosExports = axios$3.exports;
  var axios = axiosExports;
  const axios$1 = /* @__PURE__ */ getDefaultExportFromCjs(axios);
  class HttpClientBase {
    constructor(baseURL, prefix2 = "") {
      this.responseHandler = (response) => {
        console.log("API REQUEST", response.request);
        return response.data;
      };
      this.errorHandler = (error) => Promise.reject(error);
      baseURL = baseURL + prefix2;
      this.axios = axios$1.default.create({ baseURL });
      this.axios.interceptors.response.use(this.responseHandler, this.errorHandler);
    }
  }
  const HttpClientBase$1 = HttpClientBase;
  class ProviderApi extends HttpClientBase$1 {
    constructor(network, providerUrl, account2) {
      if (!providerUrl.startsWith("http")) {
        providerUrl = `https://${providerUrl}`;
      }
      console.log("ProviderApi", providerUrl);
      super(providerUrl);
      this.network = network;
      this.account = account2;
    }
    getCaptchaChallenge(userAccount, randomProvider) {
      const { provider } = randomProvider;
      const { blockNumber } = randomProvider;
      const dappAccount = this.account;
      const url = `${ApiPaths.GetCaptchaChallenge}/${provider.datasetId}/${userAccount}/${dappAccount}/${blockNumber.toString().replace(/,/g, "")}`;
      console.log(url);
      return this.axios.get(url);
    }
    submitCaptchaSolution(captchas, requestHash, userAccount, salt, signature) {
      const captchaSolutionBody = CaptchaSolutionBody.parse({
        captchas,
        requestHash,
        user: userAccount,
        dapp: this.account,
        salt,
        signature
      });
      return this.axios.post(ApiPaths.SubmitCaptchaSolution, captchaSolutionBody);
    }
    verifyDappUser(userAccount, commitmentId) {
      const payload = { user: userAccount };
      if (commitmentId) {
        payload["commitmentId"] = commitmentId;
      }
      return this.axios.post(ApiPaths.VerifyCaptchaSolution, payload);
    }
    getProviderStatus() {
      return this.axios.get(ApiPaths.GetProviderStatus);
    }
    getProviderDetails() {
      return this.axios.get(ApiPaths.GetProviderDetails);
    }
  }
  function v0ToV1Names(all2) {
    return all2.map((e) => objectSpread({}, e, {
      name: Array.isArray(e.name) ? e.name : [e.name]
    }));
  }
  function v0ToV1(registry, v02) {
    if (!v02.metadataVersion.length) {
      throw new Error("Invalid format for V0 (detected) contract metadata");
    }
    return registry.createType("ContractMetadataV1", objectSpread({}, v02, {
      spec: objectSpread({}, v02.spec, {
        constructors: v0ToV1Names(v02.spec.constructors),
        messages: v0ToV1Names(v02.spec.messages)
      }),
      types: toV1(registry, v02.types)
    }));
  }
  const ARG_TYPES = {
    ContractConstructorSpec: "ContractMessageParamSpecV2",
    ContractEventSpec: "ContractEventParamSpecV2",
    ContractMessageSpec: "ContractMessageParamSpecV2"
  };
  function v1ToV2Label(entry) {
    return objectSpread({}, entry, {
      label: Array.isArray(entry.name) ? entry.name.join("::") : entry.name
    });
  }
  function v1ToV2Labels(registry, outType, all2) {
    return all2.map((e) => registry.createType(`${outType}V2`, objectSpread(v1ToV2Label(e), {
      args: e.args.map((a) => registry.createType(ARG_TYPES[outType], v1ToV2Label(a)))
    })));
  }
  function v1ToV2(registry, v16) {
    return registry.createType("ContractMetadataV2", objectSpread({}, v16, {
      spec: objectSpread({}, v16.spec, {
        constructors: v1ToV2Labels(registry, "ContractConstructorSpec", v16.spec.constructors),
        events: v1ToV2Labels(registry, "ContractEventSpec", v16.spec.events),
        messages: v1ToV2Labels(registry, "ContractMessageSpec", v16.spec.messages)
      })
    }));
  }
  function v2ToV3(registry, v22) {
    return registry.createType("ContractMetadataV3", objectSpread({}, v22, {
      spec: objectSpread({}, v22.spec, {
        constructors: v22.spec.constructors.map((c) => (
          // V3 introduces the payable flag on constructors, for <V3, it is always true
          registry.createType("ContractConstructorSpecV3", objectSpread({}, c, { payable: true }))
        ))
      })
    }));
  }
  function v3ToV4(registry, v3) {
    return registry.createType("ContractMetadataV4", objectSpread({}, v3, {
      spec: objectSpread({}, v3.spec, {
        constructors: v3.spec.constructors.map((c) => registry.createType("ContractConstructorSpecV4", objectSpread({}, c))),
        messages: v3.spec.messages.map((m2) => registry.createType("ContractMessageSpecV3", objectSpread({}, m2)))
      })
    }));
  }
  const enumVersions = ["V4", "V3", "V2", "V1"];
  function createConverter(next2, step) {
    return (registry, input) => next2(registry, step(registry, input));
  }
  function v4ToLatest(_registry, v42) {
    return v42;
  }
  const v3ToLatest = /* @__PURE__ */ createConverter(v4ToLatest, v3ToV4);
  const v2ToLatest = /* @__PURE__ */ createConverter(v3ToLatest, v2ToV3);
  const v1ToLatest = /* @__PURE__ */ createConverter(v2ToLatest, v1ToV2);
  const v0ToLatest = /* @__PURE__ */ createConverter(v1ToLatest, v0ToV1);
  const convertVersions = [
    ["V4", v4ToLatest],
    ["V3", v3ToLatest],
    ["V2", v2ToLatest],
    ["V1", v1ToLatest],
    ["V0", v0ToLatest]
  ];
  const l$1 = logger("Abi");
  const PRIMITIVE_ALWAYS = ["AccountId", "AccountIndex", "Address", "Balance"];
  function findMessage(list, messageOrId) {
    const message = isNumber$1(messageOrId) ? list[messageOrId] : isString$1(messageOrId) ? list.find(({ identifier: identifier2 }) => [identifier2, stringCamelCase(identifier2)].includes(messageOrId.toString())) : messageOrId;
    return assertReturn(message, () => `Attempted to call an invalid contract interface, ${stringify$1(messageOrId)}`);
  }
  function getLatestMeta(registry, json) {
    const vx = enumVersions.find((v) => isObject$2(json[v]));
    const jsonVersion = json.version;
    if (!vx && jsonVersion && !enumVersions.find((v) => v === `V${jsonVersion}`)) {
      throw new Error(`Unable to handle version ${jsonVersion}`);
    }
    const metadata = registry.createType("ContractMetadata", vx ? { [vx]: json[vx] } : jsonVersion ? { [`V${jsonVersion}`]: json } : { V0: json });
    const converter2 = convertVersions.find(([v]) => metadata[`is${v}`]);
    if (!converter2) {
      throw new Error(`Unable to convert ABI with version ${metadata.type} to latest`);
    }
    return converter2[1](registry, metadata[`as${converter2[0]}`]);
  }
  function parseJson(json, chainProperties) {
    const registry = new TypeRegistry();
    const info2 = registry.createType("ContractProjectInfo", json);
    const latest2 = getLatestMeta(registry, json);
    const lookup = registry.createType("PortableRegistry", { types: latest2.types }, true);
    registry.setLookup(lookup);
    if (chainProperties) {
      registry.setChainProperties(chainProperties);
    }
    lookup.types.forEach(({ id }) => lookup.getTypeDef(id));
    return [json, registry, latest2, info2];
  }
  function isTypeSpec(value) {
    return !!value && value instanceof Map && !isUndefined$1(value.type) && !isUndefined$1(value.displayName);
  }
  function isOption(value) {
    return !!value && value instanceof Option;
  }
  class Abi {
    constructor(abiJson2, chainProperties) {
      this.environment = /* @__PURE__ */ new Map();
      this.__internal__createArgs = (args, spec2) => {
        return args.map(({ label, type }, index2) => {
          try {
            if (!isObject$2(type)) {
              throw new Error("Invalid type definition found");
            }
            const displayName = type.displayName.length ? type.displayName[type.displayName.length - 1].toString() : void 0;
            const camelName = stringCamelCase(label);
            if (displayName && PRIMITIVE_ALWAYS.includes(displayName)) {
              return {
                name: camelName,
                type: {
                  info: TypeDefInfo.Plain,
                  type: displayName
                }
              };
            }
            const typeDef = this.registry.lookup.getTypeDef(type.type);
            return {
              name: camelName,
              type: displayName && !typeDef.type.startsWith(displayName) ? { displayName, ...typeDef } : typeDef
            };
          } catch (error) {
            l$1.error(`Error expanding argument ${index2} in ${stringify$1(spec2)}`);
            throw error;
          }
        });
      };
      this.__internal__createEvent = (spec2, index2) => {
        const args = this.__internal__createArgs(spec2.args, spec2);
        const event = {
          args,
          docs: spec2.docs.map((d) => d.toString()),
          fromU8a: (data2) => ({
            args: this.__internal__decodeArgs(args, data2),
            event
          }),
          identifier: spec2.label.toString(),
          index: index2
        };
        return event;
      };
      this.__internal__createMessage = (spec2, index2, add2 = {}) => {
        const args = this.__internal__createArgs(spec2.args, spec2);
        const identifier2 = spec2.label.toString();
        const message = {
          ...add2,
          args,
          docs: spec2.docs.map((d) => d.toString()),
          fromU8a: (data2) => ({
            args: this.__internal__decodeArgs(args, data2),
            message
          }),
          identifier: identifier2,
          index: index2,
          isDefault: spec2.default.isTrue,
          method: stringCamelCase(identifier2),
          path: identifier2.split("::").map((s) => stringCamelCase(s)),
          selector: spec2.selector,
          toU8a: (params) => this.__internal__encodeArgs(spec2, args, params)
        };
        return message;
      };
      this.__internal__decodeArgs = (args, data2) => {
        let offset = 0;
        return args.map(({ type: { lookupName, type } }) => {
          const value = this.registry.createType(lookupName || type, data2.subarray(offset));
          offset += value.encodedLength;
          return value;
        });
      };
      this.__internal__decodeMessage = (type, list, data2) => {
        const [, trimmed] = compactStripLength(data2);
        const selector = trimmed.subarray(0, 4);
        const message = list.find((m2) => m2.selector.eq(selector));
        if (!message) {
          throw new Error(`Unable to find ${type} with selector ${u8aToHex(selector)}`);
        }
        return message.fromU8a(trimmed.subarray(4));
      };
      this.__internal__encodeArgs = ({ label, selector }, args, data2) => {
        if (data2.length !== args.length) {
          throw new Error(`Expected ${args.length} arguments to contract message '${label.toString()}', found ${data2.length}`);
        }
        return compactAddLength(u8aConcat(this.registry.createType("ContractSelector", selector).toU8a(), ...args.map(({ type: { lookupName, type } }, index2) => this.registry.createType(lookupName || type, data2[index2]).toU8a())));
      };
      [this.json, this.registry, this.metadata, this.info] = parseJson(isString$1(abiJson2) ? JSON.parse(abiJson2) : abiJson2, chainProperties);
      this.constructors = this.metadata.spec.constructors.map((spec2, index2) => this.__internal__createMessage(spec2, index2, {
        isConstructor: true,
        isDefault: spec2.default.isTrue,
        isPayable: spec2.payable.isTrue,
        returnType: spec2.returnType.isSome ? this.registry.lookup.getTypeDef(spec2.returnType.unwrap().type) : null
      }));
      this.events = this.metadata.spec.events.map((spec2, index2) => this.__internal__createEvent(spec2, index2));
      this.messages = this.metadata.spec.messages.map((spec2, index2) => this.__internal__createMessage(spec2, index2, {
        isDefault: spec2.default.isTrue,
        isMutating: spec2.mutates.isTrue,
        isPayable: spec2.payable.isTrue,
        returnType: spec2.returnType.isSome ? this.registry.lookup.getTypeDef(spec2.returnType.unwrap().type) : null
      }));
      for (const [key, opt] of this.metadata.spec.environment.entries()) {
        if (isOption(opt)) {
          if (opt.isSome) {
            const value = opt.unwrap();
            if (isBn(value)) {
              this.environment.set(key, value);
            } else if (isTypeSpec(value)) {
              this.environment.set(key, this.registry.lookup.getTypeDef(value.type));
            } else {
              throw new Error(`Invalid environment definition for ${key}:: Expected either Number or ContractTypeSpec`);
            }
          }
        } else {
          throw new Error(`Expected Option<*> definition for ${key} in ContractEnvironment`);
        }
      }
    }
    /**
     * Warning: Unstable API, bound to change
     */
    decodeEvent(data2) {
      const index2 = data2[0];
      const event = this.events[index2];
      if (!event) {
        throw new Error(`Unable to find event with index ${index2}`);
      }
      return event.fromU8a(data2.subarray(1));
    }
    /**
     * Warning: Unstable API, bound to change
     */
    decodeConstructor(data2) {
      return this.__internal__decodeMessage("message", this.constructors, data2);
    }
    /**
     * Warning: Unstable API, bound to change
     */
    decodeMessage(data2) {
      return this.__internal__decodeMessage("message", this.messages, data2);
    }
    findConstructor(constructorOrId) {
      return findMessage(this.constructors, constructorOrId);
    }
    findMessage(messageOrId) {
      return findMessage(this.messages, messageOrId);
    }
  }
  function applyOnEvent(result, types2, fn) {
    if (result.isInBlock || result.isFinalized) {
      const records = result.filterRecords("contracts", types2);
      if (records.length) {
        return fn(records);
      }
    }
    return void 0;
  }
  class Base {
    constructor(api, abi, decorateMethod) {
      if (!api || !api.isConnected || !api.tx) {
        throw new Error("Your API has not been initialized correctly and is not connected to a chain");
      } else if (!api.tx.contracts || !isFunction$2(api.tx.contracts.instantiateWithCode) || api.tx.contracts.instantiateWithCode.meta.args.length !== 6) {
        throw new Error("The runtime does not expose api.tx.contracts.instantiateWithCode with storageDepositLimit");
      } else if (!api.call.contractsApi || !isFunction$2(api.call.contractsApi.call)) {
        throw new Error("Your runtime does not expose the api.call.contractsApi.call runtime interfaces");
      }
      this.abi = abi instanceof Abi ? abi : new Abi(abi, api.registry.getChainProperties());
      this.api = api;
      this._decorateMethod = decorateMethod;
      this._isWeightV1 = !api.registry.createType("Weight").proofSize;
    }
    get registry() {
      return this.api.registry;
    }
  }
  const EMPTY_SALT = new Uint8Array();
  function withMeta(meta, creator) {
    creator.meta = meta;
    return creator;
  }
  function createBluePrintTx(meta, fn) {
    return withMeta(meta, (options, ...params) => fn(options, params));
  }
  function createBluePrintWithId(fn) {
    return (constructorOrId, options, ...params) => fn(constructorOrId, options, params);
  }
  function encodeSalt(salt = randomAsU8a()) {
    return salt instanceof Bytes ? salt : salt && salt.length ? compactAddLength(u8aToU8a(salt)) : EMPTY_SALT;
  }
  function convertWeight(weight) {
    const [refTime, proofSize] = isWeightV2(weight) ? [weight.refTime.toBn(), weight.proofSize.toBn()] : [bnToBn(weight), void 0];
    return {
      v1Weight: refTime,
      v2Weight: { proofSize, refTime }
    };
  }
  function isWeightV2(weight) {
    return !!weight.proofSize;
  }
  const util = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    EMPTY_SALT,
    convertWeight,
    createBluePrintTx,
    createBluePrintWithId,
    encodeSalt,
    isWeightV2,
    withMeta
  }, Symbol.toStringTag, { value: "Module" }));
  const MAX_CALL_GAS$1 = new BN(5e12).isub(BN_ONE);
  const l = logger("Contract");
  function createQuery(meta, fn) {
    return withMeta(meta, (origin, options, ...params) => fn(origin, options, params));
  }
  function createTx(meta, fn) {
    return withMeta(meta, (options, ...params) => fn(options, params));
  }
  class ContractSubmittableResult extends SubmittableResult {
    constructor(result, contractEvents) {
      super(result);
      this.contractEvents = contractEvents;
    }
  }
  let Contract$1 = class Contract extends Base {
    constructor(api, abi, address, decorateMethod) {
      super(api, abi, decorateMethod);
      this.__internal__query = {};
      this.__internal__tx = {};
      this.__internal__getGas = (_gasLimit, isCall = false) => {
        const weight = convertWeight(_gasLimit);
        if (weight.v1Weight.gt(BN_ZERO)) {
          return weight;
        }
        return convertWeight(isCall ? MAX_CALL_GAS$1 : convertWeight(this.api.consts.system.blockWeights ? this.api.consts.system.blockWeights.maxBlock : this.api.consts.system["maximumBlockWeight"]).v1Weight.muln(64).div(BN_HUNDRED));
      };
      this.__internal__exec = (messageOrId, { gasLimit = BN_ZERO, storageDepositLimit = null, value = BN_ZERO }, params) => {
        return this.api.tx.contracts.call(
          this.address,
          value,
          // eslint-disable-next-line @typescript-eslint/ban-ts-comment
          // @ts-ignore jiggle v1 weights, metadata points to latest
          this._isWeightV1 ? convertWeight(gasLimit).v1Weight : convertWeight(gasLimit).v2Weight,
          storageDepositLimit,
          this.abi.findMessage(messageOrId).toU8a(params)
        ).withResultTransform((result) => (
          // ContractEmitted is the current generation, ContractExecution is the previous generation
          new ContractSubmittableResult(result, applyOnEvent(result, ["ContractEmitted", "ContractExecution"], (records) => records.map(({ event: { data: [, data2] } }) => {
            try {
              return this.abi.decodeEvent(data2);
            } catch (error) {
              l.error(`Unable to decode contract event: ${error.message}`);
              return null;
            }
          }).filter((decoded) => !!decoded)))
        ));
      };
      this.__internal__read = (messageOrId, { gasLimit = BN_ZERO, storageDepositLimit = null, value = BN_ZERO }, params) => {
        const message = this.abi.findMessage(messageOrId);
        return {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
          send: this._decorateMethod((origin) => this.api.rx.call.contractsApi.call(
            origin,
            this.address,
            value,
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore jiggle v1 weights, metadata points to latest
            this._isWeightV1 ? this.__internal__getGas(gasLimit, true).v1Weight : this.__internal__getGas(gasLimit, true).v2Weight,
            storageDepositLimit,
            message.toU8a(params)
          ).pipe(map(({ debugMessage, gasConsumed, gasRequired, result, storageDeposit }) => ({
            debugMessage,
            gasConsumed,
            gasRequired: gasRequired && !convertWeight(gasRequired).v1Weight.isZero() ? gasRequired : gasConsumed,
            output: result.isOk && message.returnType ? this.abi.registry.createTypeUnsafe(message.returnType.lookupName || message.returnType.type, [result.asOk.data.toU8a(true)], { isPedantic: true }) : null,
            result,
            storageDeposit
          }))))
        };
      };
      this.address = this.registry.createType("AccountId", address);
      this.abi.messages.forEach((m2) => {
        if (isUndefined$1(this.__internal__tx[m2.method])) {
          this.__internal__tx[m2.method] = createTx(m2, (o, p) => this.__internal__exec(m2, o, p));
        }
        if (isUndefined$1(this.__internal__query[m2.method])) {
          this.__internal__query[m2.method] = createQuery(m2, (f, o, p) => this.__internal__read(m2, o, p).send(f));
        }
      });
    }
    get query() {
      return this.__internal__query;
    }
    get tx() {
      return this.__internal__tx;
    }
  };
  class ContractPromise extends Contract$1 {
    constructor(api, abi, address) {
      super(api, abi, address, toPromiseMethod);
    }
  }
  class ProsopoContractError extends ProsopoBaseError {
    constructor(error, context, options, ...params) {
      if (typeof error === "string") {
        super(translateOrFallback(error, options, error, i18n));
        if (translationKeys.includes(error)) {
          this.tKey = context;
        }
      } else {
        const mod2 = error.asModule;
        const dispatchError = error.registry.findMetaError(mod2);
        super(`${dispatchError.section}.${dispatchError.name}`);
        if (translationKeys.includes(context)) {
          this.tKey = context;
        }
      }
      this.tParams = options || {};
      this.name = context && `${ProsopoContractError.name}@${context}` || ProsopoContractError.name;
      console.error("\n********************* ERROR *********************\n");
      console.error(error, this.stack, ...params);
    }
  }
  function encodeStringArgs(abi, methodObj, args) {
    const encodedArgs = [];
    const typesToHash = ["Hash"];
    methodObj.args.forEach((methodArg, idx) => {
      let argVal = args[idx];
      if (typesToHash.indexOf(methodArg.type.type) > -1 && !(isU8a(argVal) || isHex(argVal))) {
        argVal = stringToHexPadded(argVal);
      }
      encodedArgs.push(abi.registry.createType(methodArg.type.type, argVal).toU8a());
    });
    return encodedArgs;
  }
  function handleContractCallOutcomeErrors(response, contractMethodName) {
    if (response.output) {
      const out = response.output;
      if (out.isOk) {
        const responseOk = out.asOk;
        if (responseOk.isErr) {
          throw new ProsopoContractError(responseOk.toPrimitive().err.toString(), contractMethodName, {});
        }
      }
    }
  }
  function stringToHexPadded(data2) {
    const maxLength = 64;
    if (data2.length > maxLength) {
      throw new Error(`stringToHexPadded: string length ${data2.length} exceeds ${maxLength}`);
    }
    const hexString = stringToHex(data2).replace("0x", "");
    return `0x${Array(maxLength - hexString.length + 1).join("0")}${hexString}`;
  }
  const MAX_CALL_WEIGHT = new BN(5e12).isub(BN_ONE);
  const GAS_INCREASE_FACTOR = 1.1;
  function getOptions(api, isMutating, value, gasLimit, storageDeposit, increaseGas) {
    const gasIncreaseFactor = increaseGas ? GAS_INCREASE_FACTOR : 1;
    const _gasLimit = gasLimit ? api.registry.createType("WeightV2", {
      refTime: gasLimit.refTime.toBn().muln(gasIncreaseFactor),
      proofSize: gasLimit.proofSize.toBn().muln(gasIncreaseFactor)
    }) : isMutating ? api.registry.createType("WeightV2", {
      proofSize: new BN(1e6),
      refTime: MAX_CALL_WEIGHT
    }) : void 0;
    return {
      gasLimit: _gasLimit,
      storageDepositLimit: storageDeposit ? storageDeposit.isCharge ? storageDeposit.asCharge.toBn().muln(gasIncreaseFactor) : storageDeposit.isRefund ? storageDeposit.asRefund : null : null,
      value: value || BN_ZERO
    };
  }
  function getExpectedBlockTime(api) {
    var _a;
    return new BN(((_a = api.consts.babe) == null ? void 0 : _a.expectedBlockTime) || 6e3);
  }
  var lodash = { exports: {} };
  /**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */
  (function(module2, exports2) {
    (function() {
      var undefined$1;
      var VERSION2 = "4.17.21";
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ["ary", WRAP_ARY_FLAG],
        ["bind", WRAP_BIND_FLAG],
        ["bindKey", WRAP_BIND_KEY_FLAG],
        ["curry", WRAP_CURRY_FLAG],
        ["curryRight", WRAP_CURRY_RIGHT_FLAG],
        ["flip", WRAP_FLIP_FLAG],
        ["partial", WRAP_PARTIAL_FLAG],
        ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
        ["rearg", WRAP_REARG_FLAG]
      ];
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart = /^\s+/;
      var reWhitespace = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['’]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
      ];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      var deburredLetters = {
        // Latin-1 Supplement block.
        "À": "A",
        "Á": "A",
        "Â": "A",
        "Ã": "A",
        "Ä": "A",
        "Å": "A",
        "à": "a",
        "á": "a",
        "â": "a",
        "ã": "a",
        "ä": "a",
        "å": "a",
        "Ç": "C",
        "ç": "c",
        "Ð": "D",
        "ð": "d",
        "È": "E",
        "É": "E",
        "Ê": "E",
        "Ë": "E",
        "è": "e",
        "é": "e",
        "ê": "e",
        "ë": "e",
        "Ì": "I",
        "Í": "I",
        "Î": "I",
        "Ï": "I",
        "ì": "i",
        "í": "i",
        "î": "i",
        "ï": "i",
        "Ñ": "N",
        "ñ": "n",
        "Ò": "O",
        "Ó": "O",
        "Ô": "O",
        "Õ": "O",
        "Ö": "O",
        "Ø": "O",
        "ò": "o",
        "ó": "o",
        "ô": "o",
        "õ": "o",
        "ö": "o",
        "ø": "o",
        "Ù": "U",
        "Ú": "U",
        "Û": "U",
        "Ü": "U",
        "ù": "u",
        "ú": "u",
        "û": "u",
        "ü": "u",
        "Ý": "Y",
        "ý": "y",
        "ÿ": "y",
        "Æ": "Ae",
        "æ": "ae",
        "Þ": "Th",
        "þ": "th",
        "ß": "ss",
        // Latin Extended-A block.
        "Ā": "A",
        "Ă": "A",
        "Ą": "A",
        "ā": "a",
        "ă": "a",
        "ą": "a",
        "Ć": "C",
        "Ĉ": "C",
        "Ċ": "C",
        "Č": "C",
        "ć": "c",
        "ĉ": "c",
        "ċ": "c",
        "č": "c",
        "Ď": "D",
        "Đ": "D",
        "ď": "d",
        "đ": "d",
        "Ē": "E",
        "Ĕ": "E",
        "Ė": "E",
        "Ę": "E",
        "Ě": "E",
        "ē": "e",
        "ĕ": "e",
        "ė": "e",
        "ę": "e",
        "ě": "e",
        "Ĝ": "G",
        "Ğ": "G",
        "Ġ": "G",
        "Ģ": "G",
        "ĝ": "g",
        "ğ": "g",
        "ġ": "g",
        "ģ": "g",
        "Ĥ": "H",
        "Ħ": "H",
        "ĥ": "h",
        "ħ": "h",
        "Ĩ": "I",
        "Ī": "I",
        "Ĭ": "I",
        "Į": "I",
        "İ": "I",
        "ĩ": "i",
        "ī": "i",
        "ĭ": "i",
        "į": "i",
        "ı": "i",
        "Ĵ": "J",
        "ĵ": "j",
        "Ķ": "K",
        "ķ": "k",
        "ĸ": "k",
        "Ĺ": "L",
        "Ļ": "L",
        "Ľ": "L",
        "Ŀ": "L",
        "Ł": "L",
        "ĺ": "l",
        "ļ": "l",
        "ľ": "l",
        "ŀ": "l",
        "ł": "l",
        "Ń": "N",
        "Ņ": "N",
        "Ň": "N",
        "Ŋ": "N",
        "ń": "n",
        "ņ": "n",
        "ň": "n",
        "ŋ": "n",
        "Ō": "O",
        "Ŏ": "O",
        "Ő": "O",
        "ō": "o",
        "ŏ": "o",
        "ő": "o",
        "Ŕ": "R",
        "Ŗ": "R",
        "Ř": "R",
        "ŕ": "r",
        "ŗ": "r",
        "ř": "r",
        "Ś": "S",
        "Ŝ": "S",
        "Ş": "S",
        "Š": "S",
        "ś": "s",
        "ŝ": "s",
        "ş": "s",
        "š": "s",
        "Ţ": "T",
        "Ť": "T",
        "Ŧ": "T",
        "ţ": "t",
        "ť": "t",
        "ŧ": "t",
        "Ũ": "U",
        "Ū": "U",
        "Ŭ": "U",
        "Ů": "U",
        "Ű": "U",
        "Ų": "U",
        "ũ": "u",
        "ū": "u",
        "ŭ": "u",
        "ů": "u",
        "ű": "u",
        "ų": "u",
        "Ŵ": "W",
        "ŵ": "w",
        "Ŷ": "Y",
        "ŷ": "y",
        "Ÿ": "Y",
        "Ź": "Z",
        "Ż": "Z",
        "Ž": "Z",
        "ź": "z",
        "ż": "z",
        "ž": "z",
        "Ĳ": "IJ",
        "ĳ": "ij",
        "Œ": "Oe",
        "œ": "oe",
        "ŉ": "'n",
        "ſ": "s"
      };
      var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      };
      var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      };
      var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var freeParseFloat = parseFloat, freeParseInt = parseInt;
      var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types2 = freeModule && freeModule.require && freeModule.require("util").types;
          if (types2) {
            return types2;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply2(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index2 = -1, length2 = array == null ? 0 : array.length;
        while (++index2 < length2) {
          var value = array[index2];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }
      function arrayEach(array, iteratee) {
        var index2 = -1, length2 = array == null ? 0 : array.length;
        while (++index2 < length2) {
          if (iteratee(array[index2], index2, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEachRight(array, iteratee) {
        var length2 = array == null ? 0 : array.length;
        while (length2--) {
          if (iteratee(array[length2], length2, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEvery(array, predicate) {
        var index2 = -1, length2 = array == null ? 0 : array.length;
        while (++index2 < length2) {
          if (!predicate(array[index2], index2, array)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter2(array, predicate) {
        var index2 = -1, length2 = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index2 < length2) {
          var value = array[index2];
          if (predicate(value, index2, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array, value) {
        var length2 = array == null ? 0 : array.length;
        return !!length2 && baseIndexOf(array, value, 0) > -1;
      }
      function arrayIncludesWith(array, value, comparator) {
        var index2 = -1, length2 = array == null ? 0 : array.length;
        while (++index2 < length2) {
          if (comparator(value, array[index2])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array, iteratee) {
        var index2 = -1, length2 = array == null ? 0 : array.length, result = Array(length2);
        while (++index2 < length2) {
          result[index2] = iteratee(array[index2], index2, array);
        }
        return result;
      }
      function arrayPush(array, values2) {
        var index2 = -1, length2 = values2.length, offset = array.length;
        while (++index2 < length2) {
          array[offset + index2] = values2[index2];
        }
        return array;
      }
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index2 = -1, length2 = array == null ? 0 : array.length;
        if (initAccum && length2) {
          accumulator = array[++index2];
        }
        while (++index2 < length2) {
          accumulator = iteratee(accumulator, array[index2], index2, array);
        }
        return accumulator;
      }
      function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length2 = array == null ? 0 : array.length;
        if (initAccum && length2) {
          accumulator = array[--length2];
        }
        while (length2--) {
          accumulator = iteratee(accumulator, array[length2], length2, array);
        }
        return accumulator;
      }
      function arraySome(array, predicate) {
        var index2 = -1, length2 = array == null ? 0 : array.length;
        while (++index2 < length2) {
          if (predicate(array[index2], index2, array)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty("length");
      function asciiToArray(string) {
        return string.split("");
      }
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length2 = array.length, index2 = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index2-- : ++index2 < length2) {
          if (predicate(array[index2], index2, array)) {
            return index2;
          }
        }
        return -1;
      }
      function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index2 = fromIndex - 1, length2 = array.length;
        while (++index2 < length2) {
          if (comparator(array[index2], value)) {
            return index2;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array, iteratee) {
        var length2 = array == null ? 0 : array.length;
        return length2 ? baseSum(array, iteratee) / length2 : NAN;
      }
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined$1 : object[key];
        };
      }
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined$1 : object[key];
        };
      }
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index2, collection2) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index2, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array, comparer) {
        var length2 = array.length;
        array.sort(comparer);
        while (length2--) {
          array[length2] = array[length2].value;
        }
        return array;
      }
      function baseSum(array, iteratee) {
        var result, index2 = -1, length2 = array.length;
        while (++index2 < length2) {
          var current = iteratee(array[index2]);
          if (current !== undefined$1) {
            result = result === undefined$1 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n, iteratee) {
        var index2 = -1, result = Array(n);
        while (++index2 < n) {
          result[index2] = iteratee(index2);
        }
        return result;
      }
      function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
          return [key, object[key]];
        });
      }
      function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function baseValues(object, props) {
        return arrayMap(props, function(key) {
          return object[key];
        });
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index2 = -1, length2 = strSymbols.length;
        while (++index2 < length2 && baseIndexOf(chrSymbols, strSymbols[index2], 0) > -1) {
        }
        return index2;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index2 = strSymbols.length;
        while (index2-- && baseIndexOf(chrSymbols, strSymbols[index2], 0) > -1) {
        }
        return index2;
      }
      function countHolders(array, placeholder) {
        var length2 = array.length, result = 0;
        while (length2--) {
          if (array[length2] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr2) {
        return "\\" + stringEscapes[chr2];
      }
      function getValue2(object, key) {
        return object == null ? undefined$1 : object[key];
      }
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      function iteratorToArray(iterator2) {
        var data2, result = [];
        while (!(data2 = iterator2.next()).done) {
          result.push(data2.value);
        }
        return result;
      }
      function mapToArray(map2) {
        var index2 = -1, result = Array(map2.size);
        map2.forEach(function(value, key) {
          result[++index2] = [key, value];
        });
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      function replaceHolders(array, placeholder) {
        var index2 = -1, length2 = array.length, resIndex = 0, result = [];
        while (++index2 < length2) {
          var value = array[index2];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index2] = PLACEHOLDER;
            result[resIndex++] = index2;
          }
        }
        return result;
      }
      function setToArray(set) {
        var index2 = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index2] = value;
        });
        return result;
      }
      function setToPairs(set) {
        var index2 = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index2] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array, value, fromIndex) {
        var index2 = fromIndex - 1, length2 = array.length;
        while (++index2 < length2) {
          if (array[index2] === value) {
            return index2;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array, value, fromIndex) {
        var index2 = fromIndex + 1;
        while (index2--) {
          if (array[index2] === value) {
            return index2;
          }
        }
        return index2;
      }
      function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
      }
      function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
      }
      function trimmedEndIndex(string) {
        var index2 = string.length;
        while (index2-- && reWhitespace.test(string.charAt(index2))) {
        }
        return index2;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context = context == null ? root : _2.defaults(root.Object(), context, _2.pick(root, contextProps));
        var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
        var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto2 = Object2.prototype;
        var coreJsData = context["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty2 = objectProto2.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        var nativeObjectToString = objectProto2.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root._;
        var reIsNative = RegExp2(
          "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
        );
        var Buffer2 = moduleExports ? context.Buffer : undefined$1, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined$1, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto2.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined$1, symIterator = Symbol2 ? Symbol2.iterator : undefined$1, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined$1;
        var defineProperty = function() {
          try {
            var func = getNative(Object2, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {
          }
        }();
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined$1, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
        var DataView2 = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
        var metaMap = WeakMap2 && new WeakMap2();
        var realNames = {};
        var dataViewCtorString = toSource(DataView2), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
        var symbolProto = Symbol2 ? Symbol2.prototype : undefined$1, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1, symbolToString = symbolProto ? symbolProto.toString : undefined$1;
        function lodash2(value) {
          if (isObjectLike(value) && !isArray2(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty2.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = function() {
          function object() {
          }
          return function(proto) {
            if (!isObject2(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result2 = new object();
            object.prototype = undefined$1;
            return result2;
          };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined$1;
        }
        lodash2.templateSettings = {
          /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "escape": reEscape,
          /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "evaluate": reEvaluate,
          /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "interpolate": reInterpolate,
          /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type {string}
           */
          "variable": "",
          /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type {Object}
           */
          "imports": {
            /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type {Function}
             */
            "_": lodash2
          }
        };
        lodash2.prototype = baseLodash.prototype;
        lodash2.prototype.constructor = lodash2;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray2(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length2 = end - start, index2 = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length2, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length2 && takeCount == length2) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result2 = [];
          outer:
            while (length2-- && resIndex < takeCount) {
              index2 += dir;
              var iterIndex = -1, value = array[index2];
              while (++iterIndex < iterLength) {
                var data2 = iteratees[iterIndex], iteratee2 = data2.iteratee, type = data2.type, computed = iteratee2(value);
                if (type == LAZY_MAP_FLAG) {
                  value = computed;
                } else if (!computed) {
                  if (type == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result2[resIndex++] = value;
            }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash2(entries) {
          var index2 = -1, length2 = entries == null ? 0 : entries.length;
          this.clear();
          while (++index2 < length2) {
            var entry = entries[index2];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data2 = this.__data__;
          if (nativeCreate) {
            var result2 = data2[key];
            return result2 === HASH_UNDEFINED ? undefined$1 : result2;
          }
          return hasOwnProperty2.call(data2, key) ? data2[key] : undefined$1;
        }
        function hashHas(key) {
          var data2 = this.__data__;
          return nativeCreate ? data2[key] !== undefined$1 : hasOwnProperty2.call(data2, key);
        }
        function hashSet(key, value) {
          var data2 = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data2[key] = nativeCreate && value === undefined$1 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash2.prototype.clear = hashClear;
        Hash2.prototype["delete"] = hashDelete;
        Hash2.prototype.get = hashGet;
        Hash2.prototype.has = hashHas;
        Hash2.prototype.set = hashSet;
        function ListCache(entries) {
          var index2 = -1, length2 = entries == null ? 0 : entries.length;
          this.clear();
          while (++index2 < length2) {
            var entry = entries[index2];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data2 = this.__data__, index2 = assocIndexOf(data2, key);
          if (index2 < 0) {
            return false;
          }
          var lastIndex = data2.length - 1;
          if (index2 == lastIndex) {
            data2.pop();
          } else {
            splice.call(data2, index2, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data2 = this.__data__, index2 = assocIndexOf(data2, key);
          return index2 < 0 ? undefined$1 : data2[index2][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data2 = this.__data__, index2 = assocIndexOf(data2, key);
          if (index2 < 0) {
            ++this.size;
            data2.push([key, value]);
          } else {
            data2[index2][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index2 = -1, length2 = entries == null ? 0 : entries.length;
          this.clear();
          while (++index2 < length2) {
            var entry = entries[index2];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash2(),
            "map": new (Map2 || ListCache)(),
            "string": new Hash2()
          };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)["delete"](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data2 = getMapData(this, key), size2 = data2.size;
          data2.set(key, value);
          this.size += data2.size == size2 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values3) {
          var index2 = -1, length2 = values3 == null ? 0 : values3.length;
          this.__data__ = new MapCache();
          while (++index2 < length2) {
            this.add(values3[index2]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
          var data2 = this.__data__ = new ListCache(entries);
          this.size = data2.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data2 = this.__data__, result2 = data2["delete"](key);
          this.size = data2.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data2 = this.__data__;
          if (data2 instanceof ListCache) {
            var pairs = data2.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data2.size;
              return this;
            }
            data2 = this.__data__ = new MapCache(pairs);
          }
          data2.set(key, value);
          this.size = data2.size;
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray2(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer2(value), isType = !isArr && !isArg && !isBuff && isTypedArray2(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length2 = result2.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
            (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
            isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
            isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
            isIndex(key, length2)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array) {
          var length2 = array.length;
          return length2 ? array[baseRandom(0, length2 - 1)] : undefined$1;
        }
        function arraySampleSize(array, n) {
          return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        function arrayShuffle2(array) {
          return shuffleSelf(copyArray(array));
        }
        function assignMergeValue(object, key, value) {
          if (value !== undefined$1 && !eq(object[key], value) || value === undefined$1 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty2.call(object, key) && eq(objValue, value)) || value === undefined$1 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assocIndexOf(array, key) {
          var length2 = array.length;
          while (length2--) {
            if (eq(array[length2][0], key)) {
              return length2;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach(collection, function(value, key, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object, source) {
          return object && copyObject(source, keys2(source), object);
        }
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
        function baseAssignValue(object, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object[key] = value;
          }
        }
        function baseAt(object, paths) {
          var index2 = -1, length2 = paths.length, result2 = Array2(length2), skip = object == null;
          while (++index2 < length2) {
            result2[index2] = skip ? undefined$1 : get2(object, paths[index2]);
          }
          return result2;
        }
        function baseClamp(number2, lower, upper) {
          if (number2 === number2) {
            if (upper !== undefined$1) {
              number2 = number2 <= upper ? number2 : upper;
            }
            if (lower !== undefined$1) {
              number2 = number2 >= lower ? number2 : lower;
            }
          }
          return number2;
        }
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result2 !== undefined$1) {
            return result2;
          }
          if (!isObject2(value)) {
            return value;
          }
          var isArr = isArray2(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
            if (isBuffer2(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result2 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys2;
          var props = isArr ? undefined$1 : keysFunc(value);
          arrayEach(props || value, function(subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys2(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }
        function baseConformsTo(object, source, props) {
          var length2 = props.length;
          if (object == null) {
            return !length2;
          }
          object = Object2(object);
          while (length2--) {
            var key = props[length2], predicate = source[key], value = object[key];
            if (value === undefined$1 && !(key in object) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait2, args) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return setTimeout2(function() {
            func.apply(undefined$1, args);
          }, wait2);
        }
        function baseDifference(array, values3, iteratee2, comparator) {
          var index2 = -1, includes3 = arrayIncludes, isCommon = true, length2 = array.length, result2 = [], valuesLength = values3.length;
          if (!length2) {
            return result2;
          }
          if (iteratee2) {
            values3 = arrayMap(values3, baseUnary(iteratee2));
          }
          if (comparator) {
            includes3 = arrayIncludesWith;
            isCommon = false;
          } else if (values3.length >= LARGE_ARRAY_SIZE) {
            includes3 = cacheHas;
            isCommon = false;
            values3 = new SetCache(values3);
          }
          outer:
            while (++index2 < length2) {
              var value = array[index2], computed = iteratee2 == null ? value : iteratee2(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values3[valuesIndex] === computed) {
                    continue outer;
                  }
                }
                result2.push(value);
              } else if (!includes3(values3, computed, comparator)) {
                result2.push(value);
              }
            }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function(value, index2, collection2) {
            result2 = !!predicate(value, index2, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array, iteratee2, comparator) {
          var index2 = -1, length2 = array.length;
          while (++index2 < length2) {
            var value = array[index2], current = iteratee2(value);
            if (current != null && (computed === undefined$1 ? current === current && !isSymbol(current) : comparator(current, computed))) {
              var computed = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array, value, start, end) {
          var length2 = array.length;
          start = toInteger(start);
          if (start < 0) {
            start = -start > length2 ? 0 : length2 + start;
          }
          end = end === undefined$1 || end > length2 ? length2 : toInteger(end);
          if (end < 0) {
            end += length2;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function(value, index2, collection2) {
            if (predicate(value, index2, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array, depth, predicate, isStrict, result2) {
          var index2 = -1, length2 = array.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index2 < length2) {
            var value = array[index2];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee2) {
          return object && baseFor(object, iteratee2, keys2);
        }
        function baseForOwnRight(object, iteratee2) {
          return object && baseForRight(object, iteratee2, keys2);
        }
        function baseFunctions(object, props) {
          return arrayFilter2(props, function(key) {
            return isFunction2(object[key]);
          });
        }
        function baseGet(object, path2) {
          path2 = castPath(path2, object);
          var index2 = 0, length2 = path2.length;
          while (object != null && index2 < length2) {
            object = object[toKey(path2[index2++])];
          }
          return index2 && index2 == length2 ? object : undefined$1;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object);
          return isArray2(object) ? result2 : arrayPush(result2, symbolsFunc(object));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined$1 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object, key) {
          return object != null && hasOwnProperty2.call(object, key);
        }
        function baseHasIn(object, key) {
          return object != null && key in Object2(object);
        }
        function baseInRange(number2, start, end) {
          return number2 >= nativeMin(start, end) && number2 < nativeMax(start, end);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes3 = comparator ? arrayIncludesWith : arrayIncludes, length2 = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee2) {
              array = arrayMap(array, baseUnary(iteratee2));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] = !comparator && (iteratee2 || length2 >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined$1;
          }
          array = arrays[0];
          var index2 = -1, seen = caches[0];
          outer:
            while (++index2 < length2 && result2.length < maxLength) {
              var value = array[index2], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas(seen, computed) : includes3(result2, computed, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache = caches[othIndex];
                  if (!(cache ? cacheHas(cache, computed) : includes3(arrays[othIndex], computed, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseInverter(object, setter, iteratee2, accumulator) {
          baseForOwn(object, function(value, key, object2) {
            setter(accumulator, iteratee2(value), key, object2);
          });
          return accumulator;
        }
        function baseInvoke(object, path2, args) {
          path2 = castPath(path2, object);
          object = parent(object, path2);
          var func = object == null ? object : object[toKey(last2(path2))];
          return func == null ? undefined$1 : apply2(func, object, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray2(object), othIsArr = isArray2(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer2(object)) {
            if (!isBuffer2(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray2(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty2.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object, source, matchData, customizer) {
          var index2 = matchData.length, length2 = index2, noCustomizer = !customizer;
          if (object == null) {
            return !length2;
          }
          object = Object2(object);
          while (index2--) {
            var data2 = matchData[index2];
            if (noCustomizer && data2[2] ? data2[1] !== object[data2[0]] : !(data2[0] in object)) {
              return false;
            }
          }
          while (++index2 < length2) {
            data2 = matchData[index2];
            var key = data2[0], objValue = object[key], srcValue = data2[1];
            if (noCustomizer && data2[2]) {
              if (objValue === undefined$1 && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result2 === undefined$1 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject2(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity2;
          }
          if (typeof value == "object") {
            return isArray2(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result2 = [];
          for (var key in Object2(object)) {
            if (hasOwnProperty2.call(object, key) && key != "constructor") {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object) {
          if (!isObject2(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object), result2 = [];
          for (var key in object) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty2.call(object, key)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee2) {
          var index2 = -1, result2 = isArrayLike2(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value, key, collection2) {
            result2[++index2] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
        function baseMatchesProperty(path2, srcValue) {
          if (isKey(path2) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path2), srcValue);
          }
          return function(object) {
            var objValue = get2(object, path2);
            return objValue === undefined$1 && objValue === srcValue ? hasIn(object, path2) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack());
            if (isObject2(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined$1;
              if (newValue === undefined$1) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined$1;
          var isCommon = newValue === undefined$1;
          if (isCommon) {
            var isArr = isArray2(srcValue), isBuff = !isArr && isBuffer2(srcValue), isTyped = !isArr && !isBuff && isTypedArray2(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray2(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject2(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject2(objValue) || isFunction2(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
        function baseNth(array, n) {
          var length2 = array.length;
          if (!length2) {
            return;
          }
          n += n < 0 ? length2 : 0;
          return isIndex(n, length2) ? array[n] : undefined$1;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee2) {
              if (isArray2(iteratee2)) {
                return function(value) {
                  return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity2];
          }
          var index2 = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result2 = baseMap(collection, function(value, key, collection2) {
            var criteria = arrayMap(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return { "criteria": criteria, "index": ++index2, "value": value };
          });
          return baseSortBy(result2, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path2) {
            return hasIn(object, path2);
          });
        }
        function basePickBy(object, paths, predicate) {
          var index2 = -1, length2 = paths.length, result2 = {};
          while (++index2 < length2) {
            var path2 = paths[index2], value = baseGet(object, path2);
            if (predicate(value, path2)) {
              baseSet(result2, castPath(path2, object), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path2) {
          return function(object) {
            return baseGet(object, path2);
          };
        }
        function basePullAll(array, values3, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index2 = -1, length2 = values3.length, seen = array;
          if (array === values3) {
            values3 = copyArray(values3);
          }
          if (iteratee2) {
            seen = arrayMap(array, baseUnary(iteratee2));
          }
          while (++index2 < length2) {
            var fromIndex = 0, value = values3[index2], computed = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }
        function basePullAt(array, indexes2) {
          var length2 = array ? indexes2.length : 0, lastIndex = length2 - 1;
          while (length2--) {
            var index2 = indexes2[length2];
            if (length2 == lastIndex || index2 !== previous) {
              var previous = index2;
              if (isIndex(index2)) {
                splice.call(array, index2, 1);
              } else {
                baseUnset(array, index2);
              }
            }
          }
          return array;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step, fromRight) {
          var index2 = -1, length2 = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length2);
          while (length2--) {
            result2[fromRight ? length2 : ++index2] = start;
            start += step;
          }
          return result2;
        }
        function baseRepeat(string, n) {
          var result2 = "";
          if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n % 2) {
              result2 += string;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string += string;
            }
          } while (n);
          return result2;
        }
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity2), func + "");
        }
        function baseSample(collection) {
          return arraySample(values2(collection));
        }
        function baseSampleSize(collection, n) {
          var array = values2(collection);
          return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        function baseSet(object, path2, value, customizer) {
          if (!isObject2(object)) {
            return object;
          }
          path2 = castPath(path2, object);
          var index2 = -1, length2 = path2.length, lastIndex = length2 - 1, nested2 = object;
          while (nested2 != null && ++index2 < length2) {
            var key = toKey(path2[index2]), newValue = value;
            if (key === "__proto__" || key === "constructor" || key === "prototype") {
              return object;
            }
            if (index2 != lastIndex) {
              var objValue = nested2[key];
              newValue = customizer ? customizer(objValue, key, nested2) : undefined$1;
              if (newValue === undefined$1) {
                newValue = isObject2(objValue) ? objValue : isIndex(path2[index2 + 1]) ? [] : {};
              }
            }
            assignValue(nested2, key, newValue);
            nested2 = nested2[key];
          }
          return object;
        }
        var baseSetData = !metaMap ? identity2 : function(func, data2) {
          metaMap.set(func, data2);
          return func;
        };
        var baseSetToString = !defineProperty ? identity2 : function(func, string) {
          return defineProperty(func, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string),
            "writable": true
          });
        };
        function baseShuffle(collection) {
          return shuffleSelf(values2(collection));
        }
        function baseSlice(array, start, end) {
          var index2 = -1, length2 = array.length;
          if (start < 0) {
            start = -start > length2 ? 0 : length2 + start;
          }
          end = end > length2 ? length2 : end;
          if (end < 0) {
            end += length2;
          }
          length2 = start > end ? 0 : end - start >>> 0;
          start >>>= 0;
          var result2 = Array2(length2);
          while (++index2 < length2) {
            result2[index2] = array[index2 + start];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function(value, index2, collection2) {
            result2 = predicate(value, index2, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array, value, retHighest) {
          var low = 0, high = array == null ? low : array.length;
          if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed = array[mid];
              if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity2, retHighest);
        }
        function baseSortedIndexBy(array, value, iteratee2, retHighest) {
          var low = 0, high = array == null ? 0 : array.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined$1;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined$1, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array, iteratee2) {
          var index2 = -1, length2 = array.length, resIndex = 0, result2 = [];
          while (++index2 < length2) {
            var value = array[index2], computed = iteratee2 ? iteratee2(value) : value;
            if (!index2 || !eq(computed, seen)) {
              var seen = computed;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray2(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function baseUniq(array, iteratee2, comparator) {
          var index2 = -1, includes3 = arrayIncludes, length2 = array.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes3 = arrayIncludesWith;
          } else if (length2 >= LARGE_ARRAY_SIZE) {
            var set2 = iteratee2 ? null : createSet(array);
            if (set2) {
              return setToArray(set2);
            }
            isCommon = false;
            includes3 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer:
            while (++index2 < length2) {
              var value = array[index2], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }
                if (iteratee2) {
                  seen.push(computed);
                }
                result2.push(value);
              } else if (!includes3(seen, computed, comparator)) {
                if (seen !== result2) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseUnset(object, path2) {
          path2 = castPath(path2, object);
          object = parent(object, path2);
          return object == null || delete object[toKey(last2(path2))];
        }
        function baseUpdate(object, path2, updater, customizer) {
          return baseSet(object, path2, updater(baseGet(object, path2)), customizer);
        }
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length2 = array.length, index2 = fromRight ? length2 : -1;
          while ((fromRight ? index2-- : ++index2 < length2) && predicate(array[index2], index2, array)) {
          }
          return isDrop ? baseSlice(array, fromRight ? 0 : index2, fromRight ? index2 + 1 : length2) : baseSlice(array, fromRight ? index2 + 1 : 0, fromRight ? length2 : index2);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length2 = arrays.length;
          if (length2 < 2) {
            return length2 ? baseUniq(arrays[0]) : [];
          }
          var index2 = -1, result2 = Array2(length2);
          while (++index2 < length2) {
            var array = arrays[index2], othIndex = -1;
            while (++othIndex < length2) {
              if (othIndex != index2) {
                result2[index2] = baseDifference(result2[index2] || array, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values3, assignFunc) {
          var index2 = -1, length2 = props.length, valsLength = values3.length, result2 = {};
          while (++index2 < length2) {
            var value = index2 < valsLength ? values3[index2] : undefined$1;
            assignFunc(result2, props[index2], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == "function" ? value : identity2;
        }
        function castPath(value, object) {
          if (isArray2(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString2(value));
        }
        var castRest = baseRest;
        function castSlice(array, start, end) {
          var length2 = array.length;
          end = end === undefined$1 ? length2 : end;
          return !start && end >= length2 ? array : baseSlice(array, start, end);
        }
        var clearTimeout2 = ctxClearTimeout || function(id) {
          return root.clearTimeout(id);
        };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length2 = buffer.length, result2 = allocUnsafe ? allocUnsafe(length2) : new buffer.constructor(length2);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp(regexp) {
          var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined$1, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
            var othIsDefined = other !== undefined$1, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object, other, orders) {
          var index2 = -1, objCriteria = object.criteria, othCriteria = other.criteria, length2 = objCriteria.length, ordersLength = orders.length;
          while (++index2 < length2) {
            var result2 = compareAscending(objCriteria[index2], othCriteria[index2]);
            if (result2) {
              if (index2 >= ordersLength) {
                return result2;
              }
              var order = orders[index2];
              return result2 * (order == "desc" ? -1 : 1);
            }
          }
          return object.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array) {
          var index2 = -1, length2 = source.length;
          array || (array = Array2(length2));
          while (++index2 < length2) {
            array[index2] = source[index2];
          }
          return array;
        }
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index2 = -1, length2 = props.length;
          while (++index2 < length2) {
            var key = props[index2];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined$1;
            if (newValue === undefined$1) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
        function createAggregator(setter, initializer) {
          return function(collection, iteratee2) {
            var func = isArray2(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner(assigner) {
          return baseRest(function(object, sources2) {
            var index2 = -1, length2 = sources2.length, customizer = length2 > 1 ? sources2[length2 - 1] : undefined$1, guard = length2 > 2 ? sources2[2] : undefined$1;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length2--, customizer) : undefined$1;
            if (guard && isIterateeCall(sources2[0], sources2[1], guard)) {
              customizer = length2 < 3 ? undefined$1 : customizer;
              length2 = 1;
            }
            object = Object2(object);
            while (++index2 < length2) {
              var source = sources2[index2];
              if (source) {
                assigner(object, source, index2, customizer);
              }
            }
            return object;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike2(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length2 = collection.length, index2 = fromRight ? length2 : -1, iterable = Object2(collection);
            while (fromRight ? index2-- : ++index2 < length2) {
              if (iteratee2(iterable[index2], index2, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function(object, iteratee2, keysFunc) {
            var index2 = -1, iterable = Object2(object), props = keysFunc(object), length2 = props.length;
            while (length2--) {
              var key = props[fromRight ? length2 : ++index2];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string) {
            string = toString2(string);
            var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined$1;
            var chr2 = strSymbols ? strSymbols[0] : string.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
            return chr2[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject2(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length2 = arguments.length, args = Array2(length2), index2 = length2, placeholder = getHolder(wrapper);
            while (index2--) {
              args[index2] = arguments[index2];
            }
            var holders = length2 < 3 && args[0] !== placeholder && args[length2 - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
            length2 -= holders.length;
            if (length2 < arity) {
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                undefined$1,
                args,
                holders,
                undefined$1,
                undefined$1,
                arity - length2
              );
            }
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return apply2(fn, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike2(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys2(collection);
              predicate = function(key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index2 = findIndexFunc(collection, predicate, fromIndex);
            return index2 > -1 ? iterable[iteratee2 ? collection[index2] : index2] : undefined$1;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length2 = funcs.length, index2 = length2, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index2--) {
              var func = funcs[index2];
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index2 = wrapper ? index2 : length2;
            while (++index2 < length2) {
              func = funcs[index2];
              var funcName = getFuncName(func), data2 = funcName == "wrapper" ? getData(func) : undefined$1;
              if (data2 && isLaziable(data2[0]) && data2[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data2[4].length && data2[9] == 1) {
                wrapper = wrapper[getFuncName(data2[0])].apply(wrapper, data2[3]);
              } else {
                wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray2(value)) {
                return wrapper.plant(value).value();
              }
              var index3 = 0, result2 = length2 ? funcs[index3].apply(this, args) : value;
              while (++index3 < length2) {
                result2 = funcs[index3].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined$1 : createCtor(func);
          function wrapper() {
            var length2 = arguments.length, args = Array2(length2), index2 = length2;
            while (index2--) {
              args[index2] = arguments[index2];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length2 -= holdersCount;
            if (isCurried && length2 < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                thisArg,
                args,
                newHolders,
                argPos,
                ary2,
                arity - length2
              );
            }
            var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
            length2 = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length2 > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length2) {
              args.length = ary2;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function(object, iteratee2) {
            return baseInverter(object, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result2;
            if (value === undefined$1 && other === undefined$1) {
              return defaultValue;
            }
            if (value !== undefined$1) {
              result2 = value;
            }
            if (other !== undefined$1) {
              if (result2 === undefined$1) {
                return other;
              }
              if (typeof value == "string" || typeof other == "string") {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply2(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length2, chars2) {
          chars2 = chars2 === undefined$1 ? " " : baseToString(chars2);
          var charsLength = chars2.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars2, length2) : chars2;
          }
          var result2 = baseRepeat(chars2, nativeCeil(length2 / stringSize(chars2)));
          return hasUnicode(chars2) ? castSlice(stringToArray(result2), 0, length2).join("") : result2.slice(0, length2);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply2(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start, end, step) {
            if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
              end = step = undefined$1;
            }
            start = toFinite(start);
            if (end === undefined$1) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined$1 ? start < end ? 1 : -1 : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == "string" && typeof other == "string")) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined$1, newHoldersRight = isCurry ? undefined$1 : holders, newPartials = isCurry ? partials : undefined$1, newPartialsRight = isCurry ? undefined$1 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity
          ];
          var result2 = wrapFunc.apply(undefined$1, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function(number2, precision) {
            number2 = toNumber(number2);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number2)) {
              var pair = (toString2(number2) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString2(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func(number2);
          };
        }
        var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop2 : function(values3) {
          return new Set2(values3);
        };
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var length2 = partials ? partials.length : 0;
          if (!length2) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined$1;
          }
          ary2 = ary2 === undefined$1 ? ary2 : nativeMax(toInteger(ary2), 0);
          arity = arity === undefined$1 ? arity : toInteger(arity);
          length2 -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined$1;
          }
          var data2 = isBindKey ? undefined$1 : getData(func);
          var newData = [
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity
          ];
          if (data2) {
            mergeData(newData, data2);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined$1 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length2, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined$1, newData);
          }
          var setter = data2 ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined$1 || eq(objValue, objectProto2[key]) && !hasOwnProperty2.call(object, key)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject2(objValue) && isObject2(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject2(value) ? undefined$1 : value;
        }
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array;
          }
          var index2 = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined$1;
          stack.set(array, other);
          stack.set(other, array);
          while (++index2 < arrLength) {
            var arrValue = array[index2], othValue = other[index2];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index2, other, array, stack) : customizer(arrValue, othValue, index2, array, other, stack);
            }
            if (compared !== undefined$1) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome(other, function(othValue2, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array);
          stack["delete"](other);
          return result2;
        }
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object, +other);
            case errorTag:
              return object.name == other.name && object.message == other.message;
            case regexpTag:
            case stringTag:
              return object == other + "";
            case mapTag:
              var convert2 = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert2 || (convert2 = setToArray);
              if (object.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object, other);
              var result2 = equalArrays(convert2(object), convert2(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object);
              return result2;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index2 = objLength;
          while (index2--) {
            var key = objProps[index2];
            if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
              return false;
            }
          }
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result2 = true;
          stack.set(object, other);
          stack.set(other, object);
          var skipCtor = isPartial;
          while (++index2 < objLength) {
            key = objProps[index2];
            var objValue = object[key], othValue = other[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
            }
            if (!(compared === undefined$1 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object);
          stack["delete"](other);
          return result2;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined$1, flatten), func + "");
        }
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys2, getSymbols);
        }
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop2 : function(func) {
          return metaMap.get(func);
        };
        function getFuncName(func) {
          var result2 = func.name + "", array = realNames[result2], length2 = hasOwnProperty2.call(realNames, result2) ? array.length : 0;
          while (length2--) {
            var data2 = array[length2], otherFunc = data2.func;
            if (otherFunc == null || otherFunc == func) {
              return data2.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object = hasOwnProperty2.call(lodash2, "placeholder") ? lodash2 : func;
          return object.placeholder;
        }
        function getIteratee() {
          var result2 = lodash2.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData(map3, key) {
          var data2 = map3.__data__;
          return isKeyable(key) ? data2[typeof key == "string" ? "string" : "hash"] : data2.map;
        }
        function getMatchData(object) {
          var result2 = keys2(object), length2 = result2.length;
          while (length2--) {
            var key = result2[length2], value = object[key];
            result2[length2] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object, key) {
          var value = getValue2(object, key);
          return baseIsNative(value) ? value : undefined$1;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
          try {
            value[symToStringTag] = undefined$1;
            var unmasked = true;
          } catch (e) {
          }
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object2(object);
          return arrayFilter2(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result2 = [];
          while (object) {
            arrayPush(result2, getSymbols(object));
            object = getPrototype(object);
          }
          return result2;
        };
        var getTag = baseGetTag;
        if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
          getTag = function(value) {
            var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined$1, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start, end, transforms) {
          var index2 = -1, length2 = transforms.length;
          while (++index2 < length2) {
            var data2 = transforms[index2], size2 = data2.size;
            switch (data2.type) {
              case "drop":
                start += size2;
                break;
              case "dropRight":
                end -= size2;
                break;
              case "take":
                end = nativeMin(end, start + size2);
                break;
              case "takeRight":
                start = nativeMax(start, end - size2);
                break;
            }
          }
          return { "start": start, "end": end };
        }
        function getWrapDetails(source) {
          var match2 = source.match(reWrapDetails);
          return match2 ? match2[1].split(reSplitDetails) : [];
        }
        function hasPath(object, path2, hasFunc) {
          path2 = castPath(path2, object);
          var index2 = -1, length2 = path2.length, result2 = false;
          while (++index2 < length2) {
            var key = toKey(path2[index2]);
            if (!(result2 = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result2 || ++index2 != length2) {
            return result2;
          }
          length2 = object == null ? 0 : object.length;
          return !!length2 && isLength(length2) && isIndex(key, length2) && (isArray2(object) || isArguments(object));
        }
        function initCloneArray(array) {
          var length2 = array.length, result2 = new array.constructor(length2);
          if (length2 && typeof array[0] == "string" && hasOwnProperty2.call(array, "index")) {
            result2.index = array.index;
            result2.input = array.input;
          }
          return result2;
        }
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
              return new Ctor(+object);
            case dataViewTag:
              return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object);
            case regexpTag:
              return cloneRegExp(object);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object);
          }
        }
        function insertWrapDetails(source, details) {
          var length2 = details.length;
          if (!length2) {
            return source;
          }
          var lastIndex = length2 - 1;
          details[lastIndex] = (length2 > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length2 > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable(value) {
          return isArray2(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length2) {
          var type = typeof value;
          length2 = length2 == null ? MAX_SAFE_INTEGER : length2;
          return !!length2 && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length2);
        }
        function isIterateeCall(value, index2, object) {
          if (!isObject2(object)) {
            return false;
          }
          var type = typeof index2;
          if (type == "number" ? isArrayLike2(object) && isIndex(index2, object.length) : type == "string" && index2 in object) {
            return eq(object[index2], value);
          }
          return false;
        }
        function isKey(value, object) {
          if (isArray2(value)) {
            return false;
          }
          var type = typeof value;
          if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
        }
        function isKeyable(value) {
          var type = typeof value;
          return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func), other = lodash2[funcName];
          if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data2 = getData(other);
          return !!data2 && func === data2[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction2 : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto2;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject2(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue && (srcValue !== undefined$1 || key in Object2(object));
          };
        }
        function memoizeCapped(func) {
          var result2 = memoize2(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result2.cache;
          return result2;
        }
        function mergeData(data2, source) {
          var bitmask = data2[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data2[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data2;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data2[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data2[3];
            data2[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data2[4] = partials ? replaceHolders(data2[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data2[5];
            data2[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data2[6] = partials ? replaceHolders(data2[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data2[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data2[8] = data2[8] == null ? source[8] : nativeMin(data2[8], source[8]);
          }
          if (data2[9] == null) {
            data2[9] = source[9];
          }
          data2[0] = source[0];
          data2[1] = newBitmask;
          return data2;
        }
        function nativeKeysIn(object) {
          var result2 = [];
          if (object != null) {
            for (var key in Object2(object)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start, transform2) {
          start = nativeMax(start === undefined$1 ? func.length - 1 : start, 0);
          return function() {
            var args = arguments, index2 = -1, length2 = nativeMax(args.length - start, 0), array = Array2(length2);
            while (++index2 < length2) {
              array[index2] = args[start + index2];
            }
            index2 = -1;
            var otherArgs = Array2(start + 1);
            while (++index2 < start) {
              otherArgs[index2] = args[index2];
            }
            otherArgs[start] = transform2(array);
            return apply2(func, this, otherArgs);
          };
        }
        function parent(object, path2) {
          return path2.length < 2 ? object : baseGet(object, baseSlice(path2, 0, -1));
        }
        function reorder(array, indexes2) {
          var arrLength = array.length, length2 = nativeMin(indexes2.length, arrLength), oldArray = copyArray(array);
          while (length2--) {
            var index2 = indexes2[length2];
            array[length2] = isIndex(index2, arrLength) ? oldArray[index2] : undefined$1;
          }
          return array;
        }
        function safeGet(object, key) {
          if (key === "constructor" && typeof object[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout2 = ctxSetTimeout || function(func, wait2) {
          return root.setTimeout(func, wait2);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined$1, arguments);
          };
        }
        function shuffleSelf(array, size2) {
          var index2 = -1, length2 = array.length, lastIndex = length2 - 1;
          size2 = size2 === undefined$1 ? length2 : size2;
          while (++index2 < size2) {
            var rand = baseRandom(index2, lastIndex), value = array[rand];
            array[rand] = array[index2];
            array[index2] = value;
          }
          array.length = size2;
          return array;
        }
        var stringToPath = memoizeCapped(function(string) {
          var result2 = [];
          if (string.charCodeAt(0) === 46) {
            result2.push("");
          }
          string.replace(rePropName, function(match2, number2, quote, subString) {
            result2.push(quote ? subString.replace(reEscapeChar, "$1") : number2 || match2);
          });
          return result2;
        });
        function toKey(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {
            }
            try {
              return func + "";
            } catch (e) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array, size2, guard) {
          if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined$1) {
            size2 = 1;
          } else {
            size2 = nativeMax(toInteger(size2), 0);
          }
          var length2 = array == null ? 0 : array.length;
          if (!length2 || size2 < 1) {
            return [];
          }
          var index2 = 0, resIndex = 0, result2 = Array2(nativeCeil(length2 / size2));
          while (index2 < length2) {
            result2[resIndex++] = baseSlice(array, index2, index2 += size2);
          }
          return result2;
        }
        function compact(array) {
          var index2 = -1, length2 = array == null ? 0 : array.length, resIndex = 0, result2 = [];
          while (++index2 < length2) {
            var value = array[index2];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat2() {
          var length2 = arguments.length;
          if (!length2) {
            return [];
          }
          var args = Array2(length2 - 1), array = arguments[0], index2 = length2;
          while (index2--) {
            args[index2 - 1] = arguments[index2];
          }
          return arrayPush(isArray2(array) ? copyArray(array) : [array], baseFlatten(args, 1));
        }
        var difference = baseRest(function(array, values3) {
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values3, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function(array, values3) {
          var iteratee2 = last2(values3);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined$1;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values3, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest(function(array, values3) {
          var comparator = last2(values3);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined$1;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values3, 1, isArrayLikeObject, true), undefined$1, comparator) : [];
        });
        function drop(array, n, guard) {
          var length2 = array == null ? 0 : array.length;
          if (!length2) {
            return [];
          }
          n = guard || n === undefined$1 ? 1 : toInteger(n);
          return baseSlice(array, n < 0 ? 0 : n, length2);
        }
        function dropRight(array, n, guard) {
          var length2 = array == null ? 0 : array.length;
          if (!length2) {
            return [];
          }
          n = guard || n === undefined$1 ? 1 : toInteger(n);
          n = length2 - n;
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function dropRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        function fill(array, value, start, end) {
          var length2 = array == null ? 0 : array.length;
          if (!length2) {
            return [];
          }
          if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
            start = 0;
            end = length2;
          }
          return baseFill(array, value, start, end);
        }
        function findIndex(array, predicate, fromIndex) {
          var length2 = array == null ? 0 : array.length;
          if (!length2) {
            return -1;
          }
          var index2 = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index2 < 0) {
            index2 = nativeMax(length2 + index2, 0);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index2);
        }
        function findLastIndex(array, predicate, fromIndex) {
          var length2 = array == null ? 0 : array.length;
          if (!length2) {
            return -1;
          }
          var index2 = length2 - 1;
          if (fromIndex !== undefined$1) {
            index2 = toInteger(fromIndex);
            index2 = fromIndex < 0 ? nativeMax(length2 + index2, 0) : nativeMin(index2, length2 - 1);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index2, true);
        }
        function flatten(array) {
          var length2 = array == null ? 0 : array.length;
          return length2 ? baseFlatten(array, 1) : [];
        }
        function flattenDeep(array) {
          var length2 = array == null ? 0 : array.length;
          return length2 ? baseFlatten(array, INFINITY) : [];
        }
        function flattenDepth(array, depth) {
          var length2 = array == null ? 0 : array.length;
          if (!length2) {
            return [];
          }
          depth = depth === undefined$1 ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }
        function fromPairs(pairs) {
          var index2 = -1, length2 = pairs == null ? 0 : pairs.length, result2 = {};
          while (++index2 < length2) {
            var pair = pairs[index2];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array) {
          return array && array.length ? array[0] : undefined$1;
        }
        function indexOf(array, value, fromIndex) {
          var length2 = array == null ? 0 : array.length;
          if (!length2) {
            return -1;
          }
          var index2 = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index2 < 0) {
            index2 = nativeMax(length2 + index2, 0);
          }
          return baseIndexOf(array, value, index2);
        }
        function initial(array) {
          var length2 = array == null ? 0 : array.length;
          return length2 ? baseSlice(array, 0, -1) : [];
        }
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function(arrays) {
          var iteratee2 = last2(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last2(mapped)) {
            iteratee2 = undefined$1;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last2(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          comparator = typeof comparator == "function" ? comparator : undefined$1;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined$1, comparator) : [];
        });
        function join2(array, separator) {
          return array == null ? "" : nativeJoin.call(array, separator);
        }
        function last2(array) {
          var length2 = array == null ? 0 : array.length;
          return length2 ? array[length2 - 1] : undefined$1;
        }
        function lastIndexOf(array, value, fromIndex) {
          var length2 = array == null ? 0 : array.length;
          if (!length2) {
            return -1;
          }
          var index2 = length2;
          if (fromIndex !== undefined$1) {
            index2 = toInteger(fromIndex);
            index2 = index2 < 0 ? nativeMax(length2 + index2, 0) : nativeMin(index2, length2 - 1);
          }
          return value === value ? strictLastIndexOf(array, value, index2) : baseFindIndex(array, baseIsNaN, index2, true);
        }
        function nth(array, n) {
          return array && array.length ? baseNth(array, toInteger(n)) : undefined$1;
        }
        var pull = baseRest(pullAll);
        function pullAll(array, values3) {
          return array && array.length && values3 && values3.length ? basePullAll(array, values3) : array;
        }
        function pullAllBy(array, values3, iteratee2) {
          return array && array.length && values3 && values3.length ? basePullAll(array, values3, getIteratee(iteratee2, 2)) : array;
        }
        function pullAllWith(array, values3, comparator) {
          return array && array.length && values3 && values3.length ? basePullAll(array, values3, undefined$1, comparator) : array;
        }
        var pullAt = flatRest(function(array, indexes2) {
          var length2 = array == null ? 0 : array.length, result2 = baseAt(array, indexes2);
          basePullAt(array, arrayMap(indexes2, function(index2) {
            return isIndex(index2, length2) ? +index2 : index2;
          }).sort(compareAscending));
          return result2;
        });
        function remove(array, predicate) {
          var result2 = [];
          if (!(array && array.length)) {
            return result2;
          }
          var index2 = -1, indexes2 = [], length2 = array.length;
          predicate = getIteratee(predicate, 3);
          while (++index2 < length2) {
            var value = array[index2];
            if (predicate(value, index2, array)) {
              result2.push(value);
              indexes2.push(index2);
            }
          }
          basePullAt(array, indexes2);
          return result2;
        }
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }
        function slice2(array, start, end) {
          var length2 = array == null ? 0 : array.length;
          if (!length2) {
            return [];
          }
          if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
            start = 0;
            end = length2;
          } else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined$1 ? length2 : toInteger(end);
          }
          return baseSlice(array, start, end);
        }
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }
        function sortedIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array, value) {
          var length2 = array == null ? 0 : array.length;
          if (length2) {
            var index2 = baseSortedIndex(array, value);
            if (index2 < length2 && eq(array[index2], value)) {
              return index2;
            }
          }
          return -1;
        }
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }
        function sortedLastIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array, value) {
          var length2 = array == null ? 0 : array.length;
          if (length2) {
            var index2 = baseSortedIndex(array, value, true) - 1;
            if (eq(array[index2], value)) {
              return index2;
            }
          }
          return -1;
        }
        function sortedUniq(array) {
          return array && array.length ? baseSortedUniq(array) : [];
        }
        function sortedUniqBy(array, iteratee2) {
          return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array) {
          var length2 = array == null ? 0 : array.length;
          return length2 ? baseSlice(array, 1, length2) : [];
        }
        function take2(array, n, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n = guard || n === undefined$1 ? 1 : toInteger(n);
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function takeRight(array, n, guard) {
          var length2 = array == null ? 0 : array.length;
          if (!length2) {
            return [];
          }
          n = guard || n === undefined$1 ? 1 : toInteger(n);
          n = length2 - n;
          return baseSlice(array, n < 0 ? 0 : n, length2);
        }
        function takeRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function(arrays) {
          var iteratee2 = last2(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined$1;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest(function(arrays) {
          var comparator = last2(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined$1;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
        });
        function uniq(array) {
          return array && array.length ? baseUniq(array) : [];
        }
        function uniqBy(array, iteratee2) {
          return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array, comparator) {
          comparator = typeof comparator == "function" ? comparator : undefined$1;
          return array && array.length ? baseUniq(array, undefined$1, comparator) : [];
        }
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length2 = 0;
          array = arrayFilter2(array, function(group) {
            if (isArrayLikeObject(group)) {
              length2 = nativeMax(group.length, length2);
              return true;
            }
          });
          return baseTimes(length2, function(index2) {
            return arrayMap(array, baseProperty(index2));
          });
        }
        function unzipWith(array, iteratee2) {
          if (!(array && array.length)) {
            return [];
          }
          var result2 = unzip(array);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function(group) {
            return apply2(iteratee2, undefined$1, group);
          });
        }
        var without = baseRest(function(array, values3) {
          return isArrayLikeObject(array) ? baseDifference(array, values3) : [];
        });
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter2(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function(arrays) {
          var iteratee2 = last2(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined$1;
          }
          return baseXor(arrayFilter2(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest(function(arrays) {
          var comparator = last2(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined$1;
          return baseXor(arrayFilter2(arrays, isArrayLikeObject), undefined$1, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values3) {
          return baseZipObject(props || [], values3 || [], assignValue);
        }
        function zipObjectDeep(props, values3) {
          return baseZipObject(props || [], values3 || [], baseSet);
        }
        var zipWith = baseRest(function(arrays) {
          var length2 = arrays.length, iteratee2 = length2 > 1 ? arrays[length2 - 1] : undefined$1;
          iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined$1;
          return unzipWith(arrays, iteratee2);
        });
        function chain2(value) {
          var result2 = lodash2(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap2(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
          var length2 = paths.length, start = length2 ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
            return baseAt(object, paths);
          };
          if (length2 > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length2 ? 1 : 0));
          value.__actions__.push({
            "func": thru,
            "args": [interceptor],
            "thisArg": undefined$1
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array) {
            if (length2 && !array.length) {
              array.push(undefined$1);
            }
            return array;
          });
        });
        function wrapperChain() {
          return chain2(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined$1) {
            this.__values__ = toArray2(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined$1 : this.__values__[this.__index__++];
          return { "done": done, "value": value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone2 = wrapperClone(parent2);
            clone2.__index__ = 0;
            clone2.__values__ = undefined$1;
            if (result2) {
              previous.__wrapped__ = clone2;
            } else {
              result2 = clone2;
            }
            var previous = clone2;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              "func": thru,
              "args": [reverse],
              "thisArg": undefined$1
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty2.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every(collection, predicate, guard) {
          var func = isArray2(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined$1;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter2(collection, predicate) {
          var func = isArray2(collection) ? arrayFilter2 : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map2(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map2(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined$1 ? 1 : toInteger(depth);
          return baseFlatten(map2(collection, iteratee2), depth);
        }
        function forEach2(collection, iteratee2) {
          var func = isArray2(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func = isArray2(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty2.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes2(collection, value, fromIndex, guard) {
          collection = isArrayLike2(collection) ? collection : values2(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length2 = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length2 + fromIndex, 0);
          }
          return isString2(collection) ? fromIndex <= length2 && collection.indexOf(value, fromIndex) > -1 : !!length2 && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function(collection, path2, args) {
          var index2 = -1, isFunc = typeof path2 == "function", result2 = isArrayLike2(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value) {
            result2[++index2] = isFunc ? apply2(path2, value, args) : baseInvoke(value, path2, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function(result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map2(collection, iteratee2) {
          var func = isArray2(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray2(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined$1 : orders;
          if (!isArray2(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function(result2, value, key) {
          result2[key ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce2(collection, iteratee2, accumulator) {
          var func = isArray2(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func = isArray2(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
          var func = isArray2(collection) ? arrayFilter2 : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func = isArray2(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n, guard) {
          if (guard ? isIterateeCall(collection, n, guard) : n === undefined$1) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          var func = isArray2(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }
        function shuffle(collection) {
          var func = isArray2(collection) ? arrayShuffle2 : baseShuffle;
          return func(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike2(collection)) {
            return isString2(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
          var func = isArray2(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined$1;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length2 = iteratees.length;
          if (length2 > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length2 > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now = ctxNow || function() {
          return root.Date.now();
        };
        function after(n, func) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n, guard) {
          n = guard ? undefined$1 : n;
          n = func && n == null ? func.length : n;
          return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
        }
        function before(n, func) {
          var result2;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined$1;
            }
            return result2;
          };
        }
        var bind2 = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind2));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined$1 : arity;
          var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined$1 : arity;
          var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce2(func, wait2, options) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          wait2 = toNumber(wait2) || 0;
          if (isObject2(options)) {
            leading = !!options.leading;
            maxing = "maxWait" in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait2) : maxWait;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined$1;
            lastInvokeTime = time;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout2(timerExpired, wait2);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait2 - timeSinceLastCall;
            return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined$1 || timeSinceLastCall >= wait2 || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined$1;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined$1;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined$1) {
              clearTimeout2(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined$1;
          }
          function flush() {
            return timerId === undefined$1 ? result2 : trailingEdge(now());
          }
          function debounced() {
            var time = now(), isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined$1) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout2(timerId);
                timerId = setTimeout2(timerExpired, wait2);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined$1) {
              timerId = setTimeout2(timerExpired, wait2);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer2 = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });
        var delay = baseRest(function(func, wait2, args) {
          return baseDelay(func, toNumber(wait2) || 0, args);
        });
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize2(func, resolver) {
          if (typeof func != "function" || resolver != null && typeof resolver != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result2 = func.apply(this, args);
            memoized.cache = cache.set(key, result2) || cache;
            return result2;
          };
          memoized.cache = new (memoize2.Cache || MapCache)();
          return memoized;
        }
        memoize2.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once(func) {
          return before(2, func);
        }
        var overArgs = castRest(function(func, transforms) {
          transforms = transforms.length == 1 && isArray2(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index2 = -1, length2 = nativeMin(args.length, funcsLength);
            while (++index2 < length2) {
              args[index2] = transforms[index2].call(this, args[index2]);
            }
            return apply2(func, this, args);
          });
        });
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
        });
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
        });
        var rearg = flatRest(function(func, indexes2) {
          return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes2);
        });
        function rest(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start === undefined$1 ? start : toInteger(start);
          return baseRest(func, start);
        }
        function spread2(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function(args) {
            var array = args[start], otherArgs = castSlice(args, 0, start);
            if (array) {
              arrayPush(otherArgs, array);
            }
            return apply2(func, this, otherArgs);
          });
        }
        function throttle(func, wait2, options) {
          var leading = true, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          if (isObject2(options)) {
            leading = "leading" in options ? !!options.leading : leading;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          return debounce2(func, wait2, {
            "leading": leading,
            "maxWait": wait2,
            "trailing": trailing
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray2(value) ? value : [value];
        }
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$1;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$1;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys2(source));
        }
        function eq(value, other) {
          return value === other || value !== value && other !== other;
        }
        var gt = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
        var isArguments = baseIsArguments(function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        var isArray2 = Array2.isArray;
        var isArrayBuffer2 = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike2(value) {
          return value != null && isLength(value.length) && !isFunction2(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike2(value);
        }
        function isBoolean2(value) {
          return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer2 = nativeIsBuffer || stubFalse;
        var isDate2 = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject2(value);
        }
        function isEmpty2(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike2(value) && (isArray2(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer2(value) || isTypedArray2(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty2.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$1;
          var result2 = customizer ? customizer(value, other) : undefined$1;
          return result2 === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result2;
        }
        function isError2(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject2(value);
        }
        function isFinite2(value) {
          return typeof value == "number" && nativeIsFinite(value);
        }
        function isFunction2(value) {
          if (!isObject2(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isInteger2(value) {
          return typeof value == "number" && value == toInteger(value);
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject2(value) {
          var type = typeof value;
          return value != null && (type == "object" || type == "function");
        }
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$1;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN2(value) {
          return isNumber2(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull2(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber2(value) {
          return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject2(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger2(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString2(value) {
          return typeof value == "string" || !isArray2(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray2 = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined2(value) {
          return value === undefined$1;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
        function toArray2(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike2(value)) {
            return isString2(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values2;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign2 = value < 0 ? -1 : 1;
            return sign2 * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result2 = toFinite(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject2(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject2(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        function toString2(value) {
          return value == null ? "" : baseToString(value);
        }
        var assign2 = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike2(source)) {
            copyObject(source, keys2(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty2.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys2(source), object, customizer);
        });
        var at2 = flatRest(baseAt);
        function create(prototype2, properties2) {
          var result2 = baseCreate(prototype2);
          return properties2 == null ? result2 : baseAssign(result2, properties2);
        }
        var defaults2 = baseRest(function(object, sources2) {
          object = Object2(object);
          var index2 = -1;
          var length2 = sources2.length;
          var guard = length2 > 2 ? sources2[2] : undefined$1;
          if (guard && isIterateeCall(sources2[0], sources2[1], guard)) {
            length2 = 1;
          }
          while (++index2 < length2) {
            var source = sources2[index2];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];
              if (value === undefined$1 || eq(value, objectProto2[key]) && !hasOwnProperty2.call(object, key)) {
                object[key] = source[key];
              }
            }
          }
          return object;
        });
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined$1, customDefaultsMerge);
          return apply2(mergeWith, undefined$1, args);
        });
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object, iteratee2) {
          return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object, iteratee2) {
          return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object, iteratee2) {
          return object && baseForOwn(object, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object, iteratee2) {
          return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
        }
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys2(object));
        }
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get2(object, path2, defaultValue) {
          var result2 = object == null ? undefined$1 : baseGet(object, path2);
          return result2 === undefined$1 ? defaultValue : result2;
        }
        function has2(object, path2) {
          return object != null && hasPath(object, path2, baseHas);
        }
        function hasIn(object, path2) {
          return object != null && hasPath(object, path2, baseHasIn);
        }
        var invert2 = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key;
        }, constant(identity2));
        var invertBy = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty2.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys2(object) {
          return isArrayLike2(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
          return isArrayLike2(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        function mapKeys(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, iteratee2(value, key, object2), value);
          });
          return result2;
        }
        function mapValues(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, key, iteratee2(value, key, object2));
          });
          return result2;
        }
        var merge2 = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });
        var omit = flatRest(function(object, paths) {
          var result2 = {};
          if (object == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path2) {
            path2 = castPath(path2, object);
            isDeep || (isDeep = path2.length > 1);
            return path2;
          });
          copyObject(object, getAllKeysIn(object), result2);
          if (isDeep) {
            result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length2 = paths.length;
          while (length2--) {
            baseUnset(result2, paths[length2]);
          }
          return result2;
        });
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path2) {
            return predicate(value, path2[0]);
          });
        }
        function result(object, path2, defaultValue) {
          path2 = castPath(path2, object);
          var index2 = -1, length2 = path2.length;
          if (!length2) {
            length2 = 1;
            object = undefined$1;
          }
          while (++index2 < length2) {
            var value = object == null ? undefined$1 : object[toKey(path2[index2])];
            if (value === undefined$1) {
              index2 = length2;
              value = defaultValue;
            }
            object = isFunction2(value) ? value.call(object) : value;
          }
          return object;
        }
        function set(object, path2, value) {
          return object == null ? object : baseSet(object, path2, value);
        }
        function setWith(object, path2, value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$1;
          return object == null ? object : baseSet(object, path2, value, customizer);
        }
        var toPairs = createToPairs(keys2);
        var toPairsIn = createToPairs(keysIn);
        function transform(object, iteratee2, accumulator) {
          var isArr = isArray2(object), isArrLike = isArr || isBuffer2(object) || isTypedArray2(object);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject2(object)) {
              accumulator = isFunction2(Ctor) ? baseCreate(getPrototype(object)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index2, object2) {
            return iteratee2(accumulator, value, index2, object2);
          });
          return accumulator;
        }
        function unset(object, path2) {
          return object == null ? true : baseUnset(object, path2);
        }
        function update(object, path2, updater) {
          return object == null ? object : baseUpdate(object, path2, castFunction(updater));
        }
        function updateWith(object, path2, updater, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$1;
          return object == null ? object : baseUpdate(object, path2, castFunction(updater), customizer);
        }
        function values2(object) {
          return object == null ? [] : baseValues(object, keys2(object));
        }
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp2(number2, lower, upper) {
          if (upper === undefined$1) {
            upper = lower;
            lower = undefined$1;
          }
          if (upper !== undefined$1) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined$1) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number2), lower, upper);
        }
        function inRange(number2, start, end) {
          start = toFinite(start);
          if (end === undefined$1) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number2 = toNumber(number2);
          return baseInRange(number2, start, end);
        }
        function random(lower, upper, floating) {
          if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined$1;
          }
          if (floating === undefined$1) {
            if (typeof upper == "boolean") {
              floating = upper;
              upper = undefined$1;
            } else if (typeof lower == "boolean") {
              floating = lower;
              lower = undefined$1;
            }
          }
          if (lower === undefined$1 && upper === undefined$1) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined$1) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
          }
          return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function(result2, word, index2) {
          word = word.toLowerCase();
          return result2 + (index2 ? capitalize2(word) : word);
        });
        function capitalize2(string) {
          return upperFirst(toString2(string).toLowerCase());
        }
        function deburr(string) {
          string = toString2(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith2(string, target, position2) {
          string = toString2(string);
          target = baseToString(target);
          var length2 = string.length;
          position2 = position2 === undefined$1 ? length2 : baseClamp(toInteger(position2), 0, length2);
          var end = position2;
          position2 -= target.length;
          return position2 >= 0 && string.slice(position2, end) == target;
        }
        function escape2(string) {
          string = toString2(string);
          return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        function escapeRegExp(string) {
          string = toString2(string);
          return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
        }
        var kebabCase = createCompounder(function(result2, word, index2) {
          return result2 + (index2 ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index2) {
          return result2 + (index2 ? " " : "") + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst("toLowerCase");
        function pad(string, length2, chars2) {
          string = toString2(string);
          length2 = toInteger(length2);
          var strLength = length2 ? stringSize(string) : 0;
          if (!length2 || strLength >= length2) {
            return string;
          }
          var mid = (length2 - strLength) / 2;
          return createPadding(nativeFloor(mid), chars2) + string + createPadding(nativeCeil(mid), chars2);
        }
        function padEnd(string, length2, chars2) {
          string = toString2(string);
          length2 = toInteger(length2);
          var strLength = length2 ? stringSize(string) : 0;
          return length2 && strLength < length2 ? string + createPadding(length2 - strLength, chars2) : string;
        }
        function padStart(string, length2, chars2) {
          string = toString2(string);
          length2 = toInteger(length2);
          var strLength = length2 ? stringSize(string) : 0;
          return length2 && strLength < length2 ? createPadding(length2 - strLength, chars2) + string : string;
        }
        function parseInt2(string, radix3, guard) {
          if (guard || radix3 == null) {
            radix3 = 0;
          } else if (radix3) {
            radix3 = +radix3;
          }
          return nativeParseInt(toString2(string).replace(reTrimStart, ""), radix3 || 0);
        }
        function repeat(string, n, guard) {
          if (guard ? isIterateeCall(string, n, guard) : n === undefined$1) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          return baseRepeat(toString2(string), n);
        }
        function replace2() {
          var args = arguments, string = toString2(args[0]);
          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index2) {
          return result2 + (index2 ? "_" : "") + word.toLowerCase();
        });
        function split2(string, separator, limit) {
          if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
            separator = limit = undefined$1;
          }
          limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString2(string);
          if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }
        var startCase = createCompounder(function(result2, word, index2) {
          return result2 + (index2 ? " " : "") + upperFirst(word);
        });
        function startsWith(string, target, position2) {
          string = toString2(string);
          position2 = position2 == null ? 0 : baseClamp(toInteger(position2), 0, string.length);
          target = baseToString(target);
          return string.slice(position2, position2 + target.length) == target;
        }
        function template(string, options, guard) {
          var settings = lodash2.templateSettings;
          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined$1;
          }
          string = toString2(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys2(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index2 = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2(
            (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
            "g"
          );
          var sourceURL = "//# sourceURL=" + (hasOwnProperty2.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string.replace(reDelimiters, function(match2, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string.slice(index2, offset).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index2 = offset + match2.length;
            return match2;
          });
          source += "';\n";
          var variable = hasOwnProperty2.call(options, "variable") && options.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined$1, importsValues);
          });
          result2.source = source;
          if (isError2(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString2(value).toLowerCase();
        }
        function toUpper(value) {
          return toString2(value).toUpperCase();
        }
        function trim2(string, chars2, guard) {
          string = toString2(string);
          if (string && (guard || chars2 === undefined$1)) {
            return baseTrim(string);
          }
          if (!string || !(chars2 = baseToString(chars2))) {
            return string;
          }
          var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars2), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end).join("");
        }
        function trimEnd(string, chars2, guard) {
          string = toString2(string);
          if (string && (guard || chars2 === undefined$1)) {
            return string.slice(0, trimmedEndIndex(string) + 1);
          }
          if (!string || !(chars2 = baseToString(chars2))) {
            return string;
          }
          var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars2)) + 1;
          return castSlice(strSymbols, 0, end).join("");
        }
        function trimStart(string, chars2, guard) {
          string = toString2(string);
          if (string && (guard || chars2 === undefined$1)) {
            return string.replace(reTrimStart, "");
          }
          if (!string || !(chars2 = baseToString(chars2))) {
            return string;
          }
          var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars2));
          return castSlice(strSymbols, start).join("");
        }
        function truncate(string, options) {
          var length2 = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject2(options)) {
            var separator = "separator" in options ? options.separator : separator;
            length2 = "length" in options ? toInteger(options.length) : length2;
            omission = "omission" in options ? baseToString(options.omission) : omission;
          }
          string = toString2(string);
          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length2 >= strLength) {
            return string;
          }
          var end = length2 - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
          if (separator === undefined$1) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match2, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString2(reFlags.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match2 = separator.exec(substring)) {
                var newEnd = match2.index;
              }
              result2 = result2.slice(0, newEnd === undefined$1 ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index2 = result2.lastIndexOf(separator);
            if (index2 > -1) {
              result2 = result2.slice(0, index2);
            }
          }
          return result2 + omission;
        }
        function unescape2(string) {
          string = toString2(string);
          return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        var upperCase = createCompounder(function(result2, word, index2) {
          return result2 + (index2 ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string, pattern, guard) {
          string = toString2(string);
          pattern = guard ? undefined$1 : pattern;
          if (pattern === undefined$1) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
        var attempt = baseRest(function(func, args) {
          try {
            return apply2(func, undefined$1, args);
          } catch (e) {
            return isError2(e) ? e : new Error2(e);
          }
        });
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object, key, bind2(object[key], object));
          });
          return object;
        });
        function cond(pairs) {
          var length2 = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
          pairs = !length2 ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest(function(args) {
            var index2 = -1;
            while (++index2 < length2) {
              var pair = pairs[index2];
              if (apply2(pair[0], this, args)) {
                return apply2(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity2(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path2, srcValue) {
          return baseMatchesProperty(path2, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method = baseRest(function(path2, args) {
          return function(object) {
            return baseInvoke(object, path2, args);
          };
        });
        var methodOf = baseRest(function(object, args) {
          return function(path2) {
            return baseInvoke(object, path2, args);
          };
        });
        function mixin(object, source, options) {
          var props = keys2(source), methodNames = baseFunctions(source, props);
          if (options == null && !(isObject2(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys2(source));
          }
          var chain3 = !(isObject2(options) && "chain" in options) || !!options.chain, isFunc = isFunction2(object);
          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain3 || chainAll) {
                  var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                  actions.push({ "func": func, "args": arguments, "thisArg": object });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });
          return object;
        }
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
        function noop2() {
        }
        function nthArg(n) {
          n = toInteger(n);
          return baseRest(function(args) {
            return baseNth(args, n);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path2) {
          return isKey(path2) ? baseProperty(toKey(path2)) : basePropertyDeep(path2);
        }
        function propertyOf(object) {
          return function(path2) {
            return object == null ? undefined$1 : baseGet(object, path2);
          };
        }
        var range = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n, iteratee2) {
          n = toInteger(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index2 = MAX_ARRAY_LENGTH, length2 = nativeMin(n, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length2, iteratee2);
          while (++index2 < n) {
            iteratee2(index2);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray2(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString2(value)));
        }
        function uniqueId(prefix2) {
          var id = ++idCounter;
          return toString2(prefix2) + id;
        }
        var add2 = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound("floor");
        function max2(array) {
          return array && array.length ? baseExtremum(array, identity2, baseGt) : undefined$1;
        }
        function maxBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined$1;
        }
        function mean(array) {
          return baseMean(array, identity2);
        }
        function meanBy(array, iteratee2) {
          return baseMean(array, getIteratee(iteratee2, 2));
        }
        function min(array) {
          return array && array.length ? baseExtremum(array, identity2, baseLt) : undefined$1;
        }
        function minBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined$1;
        }
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round2 = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum(array) {
          return array && array.length ? baseSum(array, identity2) : 0;
        }
        function sumBy(array, iteratee2) {
          return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
        }
        lodash2.after = after;
        lodash2.ary = ary;
        lodash2.assign = assign2;
        lodash2.assignIn = assignIn;
        lodash2.assignInWith = assignInWith;
        lodash2.assignWith = assignWith;
        lodash2.at = at2;
        lodash2.before = before;
        lodash2.bind = bind2;
        lodash2.bindAll = bindAll;
        lodash2.bindKey = bindKey;
        lodash2.castArray = castArray;
        lodash2.chain = chain2;
        lodash2.chunk = chunk;
        lodash2.compact = compact;
        lodash2.concat = concat2;
        lodash2.cond = cond;
        lodash2.conforms = conforms;
        lodash2.constant = constant;
        lodash2.countBy = countBy;
        lodash2.create = create;
        lodash2.curry = curry;
        lodash2.curryRight = curryRight;
        lodash2.debounce = debounce2;
        lodash2.defaults = defaults2;
        lodash2.defaultsDeep = defaultsDeep;
        lodash2.defer = defer2;
        lodash2.delay = delay;
        lodash2.difference = difference;
        lodash2.differenceBy = differenceBy;
        lodash2.differenceWith = differenceWith;
        lodash2.drop = drop;
        lodash2.dropRight = dropRight;
        lodash2.dropRightWhile = dropRightWhile;
        lodash2.dropWhile = dropWhile;
        lodash2.fill = fill;
        lodash2.filter = filter2;
        lodash2.flatMap = flatMap;
        lodash2.flatMapDeep = flatMapDeep;
        lodash2.flatMapDepth = flatMapDepth;
        lodash2.flatten = flatten;
        lodash2.flattenDeep = flattenDeep;
        lodash2.flattenDepth = flattenDepth;
        lodash2.flip = flip;
        lodash2.flow = flow;
        lodash2.flowRight = flowRight;
        lodash2.fromPairs = fromPairs;
        lodash2.functions = functions;
        lodash2.functionsIn = functionsIn;
        lodash2.groupBy = groupBy;
        lodash2.initial = initial;
        lodash2.intersection = intersection;
        lodash2.intersectionBy = intersectionBy;
        lodash2.intersectionWith = intersectionWith;
        lodash2.invert = invert2;
        lodash2.invertBy = invertBy;
        lodash2.invokeMap = invokeMap;
        lodash2.iteratee = iteratee;
        lodash2.keyBy = keyBy;
        lodash2.keys = keys2;
        lodash2.keysIn = keysIn;
        lodash2.map = map2;
        lodash2.mapKeys = mapKeys;
        lodash2.mapValues = mapValues;
        lodash2.matches = matches;
        lodash2.matchesProperty = matchesProperty;
        lodash2.memoize = memoize2;
        lodash2.merge = merge2;
        lodash2.mergeWith = mergeWith;
        lodash2.method = method;
        lodash2.methodOf = methodOf;
        lodash2.mixin = mixin;
        lodash2.negate = negate;
        lodash2.nthArg = nthArg;
        lodash2.omit = omit;
        lodash2.omitBy = omitBy;
        lodash2.once = once;
        lodash2.orderBy = orderBy;
        lodash2.over = over;
        lodash2.overArgs = overArgs;
        lodash2.overEvery = overEvery;
        lodash2.overSome = overSome;
        lodash2.partial = partial;
        lodash2.partialRight = partialRight;
        lodash2.partition = partition;
        lodash2.pick = pick;
        lodash2.pickBy = pickBy;
        lodash2.property = property;
        lodash2.propertyOf = propertyOf;
        lodash2.pull = pull;
        lodash2.pullAll = pullAll;
        lodash2.pullAllBy = pullAllBy;
        lodash2.pullAllWith = pullAllWith;
        lodash2.pullAt = pullAt;
        lodash2.range = range;
        lodash2.rangeRight = rangeRight;
        lodash2.rearg = rearg;
        lodash2.reject = reject;
        lodash2.remove = remove;
        lodash2.rest = rest;
        lodash2.reverse = reverse;
        lodash2.sampleSize = sampleSize;
        lodash2.set = set;
        lodash2.setWith = setWith;
        lodash2.shuffle = shuffle;
        lodash2.slice = slice2;
        lodash2.sortBy = sortBy;
        lodash2.sortedUniq = sortedUniq;
        lodash2.sortedUniqBy = sortedUniqBy;
        lodash2.split = split2;
        lodash2.spread = spread2;
        lodash2.tail = tail;
        lodash2.take = take2;
        lodash2.takeRight = takeRight;
        lodash2.takeRightWhile = takeRightWhile;
        lodash2.takeWhile = takeWhile;
        lodash2.tap = tap2;
        lodash2.throttle = throttle;
        lodash2.thru = thru;
        lodash2.toArray = toArray2;
        lodash2.toPairs = toPairs;
        lodash2.toPairsIn = toPairsIn;
        lodash2.toPath = toPath;
        lodash2.toPlainObject = toPlainObject;
        lodash2.transform = transform;
        lodash2.unary = unary;
        lodash2.union = union;
        lodash2.unionBy = unionBy;
        lodash2.unionWith = unionWith;
        lodash2.uniq = uniq;
        lodash2.uniqBy = uniqBy;
        lodash2.uniqWith = uniqWith;
        lodash2.unset = unset;
        lodash2.unzip = unzip;
        lodash2.unzipWith = unzipWith;
        lodash2.update = update;
        lodash2.updateWith = updateWith;
        lodash2.values = values2;
        lodash2.valuesIn = valuesIn;
        lodash2.without = without;
        lodash2.words = words;
        lodash2.wrap = wrap;
        lodash2.xor = xor;
        lodash2.xorBy = xorBy;
        lodash2.xorWith = xorWith;
        lodash2.zip = zip;
        lodash2.zipObject = zipObject;
        lodash2.zipObjectDeep = zipObjectDeep;
        lodash2.zipWith = zipWith;
        lodash2.entries = toPairs;
        lodash2.entriesIn = toPairsIn;
        lodash2.extend = assignIn;
        lodash2.extendWith = assignInWith;
        mixin(lodash2, lodash2);
        lodash2.add = add2;
        lodash2.attempt = attempt;
        lodash2.camelCase = camelCase;
        lodash2.capitalize = capitalize2;
        lodash2.ceil = ceil;
        lodash2.clamp = clamp2;
        lodash2.clone = clone;
        lodash2.cloneDeep = cloneDeep;
        lodash2.cloneDeepWith = cloneDeepWith;
        lodash2.cloneWith = cloneWith;
        lodash2.conformsTo = conformsTo;
        lodash2.deburr = deburr;
        lodash2.defaultTo = defaultTo;
        lodash2.divide = divide;
        lodash2.endsWith = endsWith2;
        lodash2.eq = eq;
        lodash2.escape = escape2;
        lodash2.escapeRegExp = escapeRegExp;
        lodash2.every = every;
        lodash2.find = find;
        lodash2.findIndex = findIndex;
        lodash2.findKey = findKey;
        lodash2.findLast = findLast;
        lodash2.findLastIndex = findLastIndex;
        lodash2.findLastKey = findLastKey;
        lodash2.floor = floor;
        lodash2.forEach = forEach2;
        lodash2.forEachRight = forEachRight;
        lodash2.forIn = forIn;
        lodash2.forInRight = forInRight;
        lodash2.forOwn = forOwn;
        lodash2.forOwnRight = forOwnRight;
        lodash2.get = get2;
        lodash2.gt = gt;
        lodash2.gte = gte;
        lodash2.has = has2;
        lodash2.hasIn = hasIn;
        lodash2.head = head;
        lodash2.identity = identity2;
        lodash2.includes = includes2;
        lodash2.indexOf = indexOf;
        lodash2.inRange = inRange;
        lodash2.invoke = invoke;
        lodash2.isArguments = isArguments;
        lodash2.isArray = isArray2;
        lodash2.isArrayBuffer = isArrayBuffer2;
        lodash2.isArrayLike = isArrayLike2;
        lodash2.isArrayLikeObject = isArrayLikeObject;
        lodash2.isBoolean = isBoolean2;
        lodash2.isBuffer = isBuffer2;
        lodash2.isDate = isDate2;
        lodash2.isElement = isElement;
        lodash2.isEmpty = isEmpty2;
        lodash2.isEqual = isEqual;
        lodash2.isEqualWith = isEqualWith;
        lodash2.isError = isError2;
        lodash2.isFinite = isFinite2;
        lodash2.isFunction = isFunction2;
        lodash2.isInteger = isInteger2;
        lodash2.isLength = isLength;
        lodash2.isMap = isMap;
        lodash2.isMatch = isMatch;
        lodash2.isMatchWith = isMatchWith;
        lodash2.isNaN = isNaN2;
        lodash2.isNative = isNative;
        lodash2.isNil = isNil;
        lodash2.isNull = isNull2;
        lodash2.isNumber = isNumber2;
        lodash2.isObject = isObject2;
        lodash2.isObjectLike = isObjectLike;
        lodash2.isPlainObject = isPlainObject2;
        lodash2.isRegExp = isRegExp;
        lodash2.isSafeInteger = isSafeInteger;
        lodash2.isSet = isSet;
        lodash2.isString = isString2;
        lodash2.isSymbol = isSymbol;
        lodash2.isTypedArray = isTypedArray2;
        lodash2.isUndefined = isUndefined2;
        lodash2.isWeakMap = isWeakMap;
        lodash2.isWeakSet = isWeakSet;
        lodash2.join = join2;
        lodash2.kebabCase = kebabCase;
        lodash2.last = last2;
        lodash2.lastIndexOf = lastIndexOf;
        lodash2.lowerCase = lowerCase;
        lodash2.lowerFirst = lowerFirst;
        lodash2.lt = lt;
        lodash2.lte = lte;
        lodash2.max = max2;
        lodash2.maxBy = maxBy;
        lodash2.mean = mean;
        lodash2.meanBy = meanBy;
        lodash2.min = min;
        lodash2.minBy = minBy;
        lodash2.stubArray = stubArray;
        lodash2.stubFalse = stubFalse;
        lodash2.stubObject = stubObject;
        lodash2.stubString = stubString;
        lodash2.stubTrue = stubTrue;
        lodash2.multiply = multiply;
        lodash2.nth = nth;
        lodash2.noConflict = noConflict;
        lodash2.noop = noop2;
        lodash2.now = now;
        lodash2.pad = pad;
        lodash2.padEnd = padEnd;
        lodash2.padStart = padStart;
        lodash2.parseInt = parseInt2;
        lodash2.random = random;
        lodash2.reduce = reduce2;
        lodash2.reduceRight = reduceRight;
        lodash2.repeat = repeat;
        lodash2.replace = replace2;
        lodash2.result = result;
        lodash2.round = round2;
        lodash2.runInContext = runInContext2;
        lodash2.sample = sample;
        lodash2.size = size;
        lodash2.snakeCase = snakeCase;
        lodash2.some = some;
        lodash2.sortedIndex = sortedIndex;
        lodash2.sortedIndexBy = sortedIndexBy;
        lodash2.sortedIndexOf = sortedIndexOf;
        lodash2.sortedLastIndex = sortedLastIndex;
        lodash2.sortedLastIndexBy = sortedLastIndexBy;
        lodash2.sortedLastIndexOf = sortedLastIndexOf;
        lodash2.startCase = startCase;
        lodash2.startsWith = startsWith;
        lodash2.subtract = subtract;
        lodash2.sum = sum;
        lodash2.sumBy = sumBy;
        lodash2.template = template;
        lodash2.times = times;
        lodash2.toFinite = toFinite;
        lodash2.toInteger = toInteger;
        lodash2.toLength = toLength;
        lodash2.toLower = toLower;
        lodash2.toNumber = toNumber;
        lodash2.toSafeInteger = toSafeInteger;
        lodash2.toString = toString2;
        lodash2.toUpper = toUpper;
        lodash2.trim = trim2;
        lodash2.trimEnd = trimEnd;
        lodash2.trimStart = trimStart;
        lodash2.truncate = truncate;
        lodash2.unescape = unescape2;
        lodash2.uniqueId = uniqueId;
        lodash2.upperCase = upperCase;
        lodash2.upperFirst = upperFirst;
        lodash2.each = forEach2;
        lodash2.eachRight = forEachRight;
        lodash2.first = head;
        mixin(lodash2, function() {
          var source = {};
          baseForOwn(lodash2, function(func, methodName) {
            if (!hasOwnProperty2.call(lodash2.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }(), { "chain": false });
        lodash2.VERSION = VERSION2;
        arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash2[methodName].placeholder = lodash2;
        });
        arrayEach(["drop", "take"], function(methodName, index2) {
          LazyWrapper.prototype[methodName] = function(n) {
            n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);
            var result2 = this.__filtered__ && !index2 ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
            } else {
              result2.__views__.push({
                "size": nativeMin(n, MAX_ARRAY_LENGTH),
                "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n) {
            return this.reverse()[methodName](n).reverse();
          };
        });
        arrayEach(["filter", "map", "takeWhile"], function(methodName, index2) {
          var type = index2 + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              "iteratee": getIteratee(iteratee2, 3),
              "type": type
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(["head", "last"], function(methodName, index2) {
          var takeName = "take" + (index2 ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(["initial", "tail"], function(methodName, index2) {
          var dropName = "drop" + (index2 ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity2);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path2, args) {
          if (typeof path2 == "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path2, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger(start);
          var result2 = this;
          if (result2.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start < 0) {
            result2 = result2.takeRight(-start);
          } else if (start) {
            result2 = result2.drop(start);
          }
          if (end !== undefined$1) {
            end = toInteger(end);
            result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash2[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash2.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray2(value);
            var interceptor = function(value2) {
              var result3 = lodashFunc.apply(lodash2, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined$1 });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash2.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray2(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func.apply(isArray2(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash2[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + "";
            if (!hasOwnProperty2.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ "name": methodName, "func": lodashFunc });
          }
        });
        realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
          "name": "wrapper",
          "func": undefined$1
        }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash2.prototype.at = wrapperAt;
        lodash2.prototype.chain = wrapperChain;
        lodash2.prototype.commit = wrapperCommit;
        lodash2.prototype.next = wrapperNext;
        lodash2.prototype.plant = wrapperPlant;
        lodash2.prototype.reverse = wrapperReverse;
        lodash2.prototype.toJSON = lodash2.prototype.valueOf = lodash2.prototype.value = wrapperValue;
        lodash2.prototype.first = lodash2.prototype.head;
        if (symIterator) {
          lodash2.prototype[symIterator] = wrapperToIterator;
        }
        return lodash2;
      };
      var _2 = runInContext();
      if (freeModule) {
        (freeModule.exports = _2)._ = _2;
        freeExports._ = _2;
      } else {
        root._ = _2;
      }
    }).call(commonjsGlobal);
  })(lodash, lodash.exports);
  var alea$1 = { exports: {} };
  (function(module2) {
    (function(global2, module3, define) {
      function Alea(seed) {
        var me = this, mash = Mash();
        me.next = function() {
          var t = 2091639 * me.s0 + me.c * 23283064365386963e-26;
          me.s0 = me.s1;
          me.s1 = me.s2;
          return me.s2 = t - (me.c = t | 0);
        };
        me.c = 1;
        me.s0 = mash(" ");
        me.s1 = mash(" ");
        me.s2 = mash(" ");
        me.s0 -= mash(seed);
        if (me.s0 < 0) {
          me.s0 += 1;
        }
        me.s1 -= mash(seed);
        if (me.s1 < 0) {
          me.s1 += 1;
        }
        me.s2 -= mash(seed);
        if (me.s2 < 0) {
          me.s2 += 1;
        }
        mash = null;
      }
      function copy2(f, t) {
        t.c = f.c;
        t.s0 = f.s0;
        t.s1 = f.s1;
        t.s2 = f.s2;
        return t;
      }
      function impl(seed, opts) {
        var xg = new Alea(seed), state = opts && opts.state, prng = xg.next;
        prng.int32 = function() {
          return xg.next() * 4294967296 | 0;
        };
        prng.double = function() {
          return prng() + (prng() * 2097152 | 0) * 11102230246251565e-32;
        };
        prng.quick = prng;
        if (state) {
          if (typeof state == "object")
            copy2(state, xg);
          prng.state = function() {
            return copy2(xg, {});
          };
        }
        return prng;
      }
      function Mash() {
        var n = 4022871197;
        var mash = function(data2) {
          data2 = String(data2);
          for (var i2 = 0; i2 < data2.length; i2++) {
            n += data2.charCodeAt(i2);
            var h = 0.02519603282416938 * n;
            n = h >>> 0;
            h -= n;
            h *= n;
            n = h >>> 0;
            h -= n;
            n += h * 4294967296;
          }
          return (n >>> 0) * 23283064365386963e-26;
        };
        return mash;
      }
      if (module3 && module3.exports) {
        module3.exports = impl;
      } else if (define && define.amd) {
        define(function() {
          return impl;
        });
      } else {
        this.alea = impl;
      }
    })(
      commonjsGlobal,
      module2,
      // present in node.js
      false
      // present with an AMD loader
    );
  })(alea$1);
  var aleaExports = alea$1.exports;
  var xor128$1 = { exports: {} };
  (function(module2) {
    (function(global2, module3, define) {
      function XorGen(seed) {
        var me = this, strseed = "";
        me.x = 0;
        me.y = 0;
        me.z = 0;
        me.w = 0;
        me.next = function() {
          var t = me.x ^ me.x << 11;
          me.x = me.y;
          me.y = me.z;
          me.z = me.w;
          return me.w ^= me.w >>> 19 ^ t ^ t >>> 8;
        };
        if (seed === (seed | 0)) {
          me.x = seed;
        } else {
          strseed += seed;
        }
        for (var k = 0; k < strseed.length + 64; k++) {
          me.x ^= strseed.charCodeAt(k) | 0;
          me.next();
        }
      }
      function copy2(f, t) {
        t.x = f.x;
        t.y = f.y;
        t.z = f.z;
        t.w = f.w;
        return t;
      }
      function impl(seed, opts) {
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
          return (xg.next() >>> 0) / 4294967296;
        };
        prng.double = function() {
          do {
            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
          } while (result === 0);
          return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
          if (typeof state == "object")
            copy2(state, xg);
          prng.state = function() {
            return copy2(xg, {});
          };
        }
        return prng;
      }
      if (module3 && module3.exports) {
        module3.exports = impl;
      } else if (define && define.amd) {
        define(function() {
          return impl;
        });
      } else {
        this.xor128 = impl;
      }
    })(
      commonjsGlobal,
      module2,
      // present in node.js
      false
      // present with an AMD loader
    );
  })(xor128$1);
  var xor128Exports = xor128$1.exports;
  var xorwow$1 = { exports: {} };
  (function(module2) {
    (function(global2, module3, define) {
      function XorGen(seed) {
        var me = this, strseed = "";
        me.next = function() {
          var t = me.x ^ me.x >>> 2;
          me.x = me.y;
          me.y = me.z;
          me.z = me.w;
          me.w = me.v;
          return (me.d = me.d + 362437 | 0) + (me.v = me.v ^ me.v << 4 ^ (t ^ t << 1)) | 0;
        };
        me.x = 0;
        me.y = 0;
        me.z = 0;
        me.w = 0;
        me.v = 0;
        if (seed === (seed | 0)) {
          me.x = seed;
        } else {
          strseed += seed;
        }
        for (var k = 0; k < strseed.length + 64; k++) {
          me.x ^= strseed.charCodeAt(k) | 0;
          if (k == strseed.length) {
            me.d = me.x << 10 ^ me.x >>> 4;
          }
          me.next();
        }
      }
      function copy2(f, t) {
        t.x = f.x;
        t.y = f.y;
        t.z = f.z;
        t.w = f.w;
        t.v = f.v;
        t.d = f.d;
        return t;
      }
      function impl(seed, opts) {
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
          return (xg.next() >>> 0) / 4294967296;
        };
        prng.double = function() {
          do {
            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
          } while (result === 0);
          return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
          if (typeof state == "object")
            copy2(state, xg);
          prng.state = function() {
            return copy2(xg, {});
          };
        }
        return prng;
      }
      if (module3 && module3.exports) {
        module3.exports = impl;
      } else if (define && define.amd) {
        define(function() {
          return impl;
        });
      } else {
        this.xorwow = impl;
      }
    })(
      commonjsGlobal,
      module2,
      // present in node.js
      false
      // present with an AMD loader
    );
  })(xorwow$1);
  var xorwowExports = xorwow$1.exports;
  var xorshift7$1 = { exports: {} };
  (function(module2) {
    (function(global2, module3, define) {
      function XorGen(seed) {
        var me = this;
        me.next = function() {
          var X = me.x, i2 = me.i, t, v;
          t = X[i2];
          t ^= t >>> 7;
          v = t ^ t << 24;
          t = X[i2 + 1 & 7];
          v ^= t ^ t >>> 10;
          t = X[i2 + 3 & 7];
          v ^= t ^ t >>> 3;
          t = X[i2 + 4 & 7];
          v ^= t ^ t << 7;
          t = X[i2 + 7 & 7];
          t = t ^ t << 13;
          v ^= t ^ t << 9;
          X[i2] = v;
          me.i = i2 + 1 & 7;
          return v;
        };
        function init2(me2, seed2) {
          var j, X = [];
          if (seed2 === (seed2 | 0)) {
            X[0] = seed2;
          } else {
            seed2 = "" + seed2;
            for (j = 0; j < seed2.length; ++j) {
              X[j & 7] = X[j & 7] << 15 ^ seed2.charCodeAt(j) + X[j + 1 & 7] << 13;
            }
          }
          while (X.length < 8)
            X.push(0);
          for (j = 0; j < 8 && X[j] === 0; ++j)
            ;
          if (j == 8)
            X[7] = -1;
          me2.x = X;
          me2.i = 0;
          for (j = 256; j > 0; --j) {
            me2.next();
          }
        }
        init2(me, seed);
      }
      function copy2(f, t) {
        t.x = f.x.slice();
        t.i = f.i;
        return t;
      }
      function impl(seed, opts) {
        if (seed == null)
          seed = +/* @__PURE__ */ new Date();
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
          return (xg.next() >>> 0) / 4294967296;
        };
        prng.double = function() {
          do {
            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
          } while (result === 0);
          return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
          if (state.x)
            copy2(state, xg);
          prng.state = function() {
            return copy2(xg, {});
          };
        }
        return prng;
      }
      if (module3 && module3.exports) {
        module3.exports = impl;
      } else if (define && define.amd) {
        define(function() {
          return impl;
        });
      } else {
        this.xorshift7 = impl;
      }
    })(
      commonjsGlobal,
      module2,
      // present in node.js
      false
      // present with an AMD loader
    );
  })(xorshift7$1);
  var xorshift7Exports = xorshift7$1.exports;
  var xor4096$1 = { exports: {} };
  (function(module2) {
    (function(global2, module3, define) {
      function XorGen(seed) {
        var me = this;
        me.next = function() {
          var w = me.w, X = me.X, i2 = me.i, t, v;
          me.w = w = w + 1640531527 | 0;
          v = X[i2 + 34 & 127];
          t = X[i2 = i2 + 1 & 127];
          v ^= v << 13;
          t ^= t << 17;
          v ^= v >>> 15;
          t ^= t >>> 12;
          v = X[i2] = v ^ t;
          me.i = i2;
          return v + (w ^ w >>> 16) | 0;
        };
        function init2(me2, seed2) {
          var t, v, i2, j, w, X = [], limit = 128;
          if (seed2 === (seed2 | 0)) {
            v = seed2;
            seed2 = null;
          } else {
            seed2 = seed2 + "\0";
            v = 0;
            limit = Math.max(limit, seed2.length);
          }
          for (i2 = 0, j = -32; j < limit; ++j) {
            if (seed2)
              v ^= seed2.charCodeAt((j + 32) % seed2.length);
            if (j === 0)
              w = v;
            v ^= v << 10;
            v ^= v >>> 15;
            v ^= v << 4;
            v ^= v >>> 13;
            if (j >= 0) {
              w = w + 1640531527 | 0;
              t = X[j & 127] ^= v + w;
              i2 = 0 == t ? i2 + 1 : 0;
            }
          }
          if (i2 >= 128) {
            X[(seed2 && seed2.length || 0) & 127] = -1;
          }
          i2 = 127;
          for (j = 4 * 128; j > 0; --j) {
            v = X[i2 + 34 & 127];
            t = X[i2 = i2 + 1 & 127];
            v ^= v << 13;
            t ^= t << 17;
            v ^= v >>> 15;
            t ^= t >>> 12;
            X[i2] = v ^ t;
          }
          me2.w = w;
          me2.X = X;
          me2.i = i2;
        }
        init2(me, seed);
      }
      function copy2(f, t) {
        t.i = f.i;
        t.w = f.w;
        t.X = f.X.slice();
        return t;
      }
      function impl(seed, opts) {
        if (seed == null)
          seed = +/* @__PURE__ */ new Date();
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
          return (xg.next() >>> 0) / 4294967296;
        };
        prng.double = function() {
          do {
            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
          } while (result === 0);
          return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
          if (state.X)
            copy2(state, xg);
          prng.state = function() {
            return copy2(xg, {});
          };
        }
        return prng;
      }
      if (module3 && module3.exports) {
        module3.exports = impl;
      } else if (define && define.amd) {
        define(function() {
          return impl;
        });
      } else {
        this.xor4096 = impl;
      }
    })(
      commonjsGlobal,
      // window object or global
      module2,
      // present in node.js
      false
      // present with an AMD loader
    );
  })(xor4096$1);
  var xor4096Exports = xor4096$1.exports;
  var tychei$1 = { exports: {} };
  (function(module2) {
    (function(global2, module3, define) {
      function XorGen(seed) {
        var me = this, strseed = "";
        me.next = function() {
          var b = me.b, c = me.c, d = me.d, a = me.a;
          b = b << 25 ^ b >>> 7 ^ c;
          c = c - d | 0;
          d = d << 24 ^ d >>> 8 ^ a;
          a = a - b | 0;
          me.b = b = b << 20 ^ b >>> 12 ^ c;
          me.c = c = c - d | 0;
          me.d = d << 16 ^ c >>> 16 ^ a;
          return me.a = a - b | 0;
        };
        me.a = 0;
        me.b = 0;
        me.c = 2654435769 | 0;
        me.d = 1367130551;
        if (seed === Math.floor(seed)) {
          me.a = seed / 4294967296 | 0;
          me.b = seed | 0;
        } else {
          strseed += seed;
        }
        for (var k = 0; k < strseed.length + 20; k++) {
          me.b ^= strseed.charCodeAt(k) | 0;
          me.next();
        }
      }
      function copy2(f, t) {
        t.a = f.a;
        t.b = f.b;
        t.c = f.c;
        t.d = f.d;
        return t;
      }
      function impl(seed, opts) {
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
          return (xg.next() >>> 0) / 4294967296;
        };
        prng.double = function() {
          do {
            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
          } while (result === 0);
          return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
          if (typeof state == "object")
            copy2(state, xg);
          prng.state = function() {
            return copy2(xg, {});
          };
        }
        return prng;
      }
      if (module3 && module3.exports) {
        module3.exports = impl;
      } else if (define && define.amd) {
        define(function() {
          return impl;
        });
      } else {
        this.tychei = impl;
      }
    })(
      commonjsGlobal,
      module2,
      // present in node.js
      false
      // present with an AMD loader
    );
  })(tychei$1);
  var tycheiExports = tychei$1.exports;
  var seedrandom = { exports: {} };
  (function(module2) {
    (function(global2, pool, math) {
      var width2 = 256, chunks = 6, digits = 52, rngname = "random", startdenom = math.pow(width2, chunks), significance = math.pow(2, digits), overflow = significance * 2, mask = width2 - 1, nodecrypto;
      function seedrandom2(seed, options, callback) {
        var key = [];
        options = options == true ? { entropy: true } : options || {};
        var shortseed = mixkey(flatten(
          options.entropy ? [seed, tostring(pool)] : seed == null ? autoseed() : seed,
          3
        ), key);
        var arc4 = new ARC4(key);
        var prng = function() {
          var n = arc4.g(chunks), d = startdenom, x = 0;
          while (n < significance) {
            n = (n + x) * width2;
            d *= width2;
            x = arc4.g(1);
          }
          while (n >= overflow) {
            n /= 2;
            d /= 2;
            x >>>= 1;
          }
          return (n + x) / d;
        };
        prng.int32 = function() {
          return arc4.g(4) | 0;
        };
        prng.quick = function() {
          return arc4.g(4) / 4294967296;
        };
        prng.double = prng;
        mixkey(tostring(arc4.S), pool);
        return (options.pass || callback || function(prng2, seed2, is_math_call, state) {
          if (state) {
            if (state.S) {
              copy2(state, arc4);
            }
            prng2.state = function() {
              return copy2(arc4, {});
            };
          }
          if (is_math_call) {
            math[rngname] = prng2;
            return seed2;
          } else
            return prng2;
        })(
          prng,
          shortseed,
          "global" in options ? options.global : this == math,
          options.state
        );
      }
      function ARC4(key) {
        var t, keylen = key.length, me = this, i2 = 0, j = me.i = me.j = 0, s = me.S = [];
        if (!keylen) {
          key = [keylen++];
        }
        while (i2 < width2) {
          s[i2] = i2++;
        }
        for (i2 = 0; i2 < width2; i2++) {
          s[i2] = s[j = mask & j + key[i2 % keylen] + (t = s[i2])];
          s[j] = t;
        }
        (me.g = function(count) {
          var t2, r2 = 0, i3 = me.i, j2 = me.j, s2 = me.S;
          while (count--) {
            t2 = s2[i3 = mask & i3 + 1];
            r2 = r2 * width2 + s2[mask & (s2[i3] = s2[j2 = mask & j2 + t2]) + (s2[j2] = t2)];
          }
          me.i = i3;
          me.j = j2;
          return r2;
        })(width2);
      }
      function copy2(f, t) {
        t.i = f.i;
        t.j = f.j;
        t.S = f.S.slice();
        return t;
      }
      function flatten(obj, depth) {
        var result = [], typ = typeof obj, prop;
        if (depth && typ == "object") {
          for (prop in obj) {
            try {
              result.push(flatten(obj[prop], depth - 1));
            } catch (e) {
            }
          }
        }
        return result.length ? result : typ == "string" ? obj : obj + "\0";
      }
      function mixkey(seed, key) {
        var stringseed = seed + "", smear, j = 0;
        while (j < stringseed.length) {
          key[mask & j] = mask & (smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++);
        }
        return tostring(key);
      }
      function autoseed() {
        try {
          var out;
          if (nodecrypto && (out = nodecrypto.randomBytes)) {
            out = out(width2);
          } else {
            out = new Uint8Array(width2);
            (global2.crypto || global2.msCrypto).getRandomValues(out);
          }
          return tostring(out);
        } catch (e) {
          var browser = global2.navigator, plugins = browser && browser.plugins;
          return [+/* @__PURE__ */ new Date(), global2, plugins, global2.screen, tostring(pool)];
        }
      }
      function tostring(a) {
        return String.fromCharCode.apply(0, a);
      }
      mixkey(math.random(), pool);
      if (module2.exports) {
        module2.exports = seedrandom2;
        try {
          nodecrypto = require("crypto");
        } catch (ex) {
        }
      } else {
        math["seed" + rngname] = seedrandom2;
      }
    })(
      // global: `self` in browsers (including strict mode and web workers),
      // otherwise `this` in Node and other environments
      typeof self !== "undefined" ? self : commonjsGlobal,
      [],
      // pool: entropy pool starts empty
      Math
      // math: package containing random, pow, and seedrandom
    );
  })(seedrandom);
  var seedrandomExports = seedrandom.exports;
  var alea = aleaExports;
  var xor128 = xor128Exports;
  var xorwow = xorwowExports;
  var xorshift7 = xorshift7Exports;
  var xor4096 = xor4096Exports;
  var tychei = tycheiExports;
  var sr = seedrandomExports;
  sr.alea = alea;
  sr.xor128 = xor128;
  sr.xorwow = xorwow;
  sr.xorshift7 = xorshift7;
  sr.xor4096 = xor4096;
  sr.tychei = tychei;
  const at = (arr2, i2, options = {
    required: true,
    checkBounds: true,
    wrap: false
  }) => {
    if (options.wrap) {
      if (arr2.length !== 0) {
        i2 %= arr2.length;
      }
      if (i2 < 0) {
        i2 += arr2.length;
      }
    }
    if (options.checkBounds) {
      if (i2 >= arr2.length || i2 < 0) {
        throw new Error(`Array index ${i2} is out of bounds for array of length ${arr2.length}: ${JSON.stringify(arr2, null, 2)}`);
      }
    }
    const el = arr2[i2];
    if (options.required && el === void 0) {
      throw new Error(`Array item at index ${i2} is undefined for array of length ${arr2.length}: ${JSON.stringify(arr2, null, 2)}`);
    }
    return el;
  };
  function get(obj, key, required = true) {
    const value = obj[key];
    if (required && value === void 0) {
      throw new Error(`Object has no property '${String(key)}': ${JSON.stringify(obj, null, 2)}`);
    }
    return value;
  }
  const primitivesSizeInBytes = {
    u8: 1,
    u16: 2,
    u32: 4,
    u64: 8,
    u128: 16,
    "[u8; 32]": 32
  };
  const getPrimitiveTypes = function(abiJson2) {
    const primitiveTypes = {};
    const types2 = abiJson2.types.filter((type) => {
      if (type.type.def.primitive) {
        return true;
      } else if (type.type.path && type.type.path.length > 0) {
        const path2 = Array.from(type.type.path);
        return at(path2, 0).indexOf("primitive") > -1 && at(path2, 1) === "types";
      }
      return false;
    });
    types2.forEach((type) => {
      var _a;
      const item = (_a = type.type.def.composite) == null ? void 0 : _a.fields[0];
      if (item === void 0) {
        throw new Error("Invalid type definition");
      }
      primitiveTypes[type.id] = type.type.def.primitive || item.typeName || "";
    });
    return primitiveTypes;
  };
  const getPrimitiveStorageFields = (storageFields, primitiveStorageTypes) => {
    const filteredStorageFields = {};
    let primitiveStorageIndex = 0;
    let startBytes = 0;
    for (const storageField of storageFields) {
      const storageName = storageField.name;
      if (storageField.layout && storageField.layout.leaf && storageField.layout.leaf.ty !== void 0) {
        const type = storageField.layout.leaf.ty;
        if (primitiveStorageTypes[type]) {
          const typeNameAny = get(primitiveStorageTypes, type);
          const typeName = typeNameAny.toString();
          const size = get(primitivesSizeInBytes, typeName);
          filteredStorageFields[storageName] = {
            storageType: typeName,
            index: primitiveStorageIndex,
            startBytes,
            lengthBytes: size
          };
          startBytes += size;
          primitiveStorageIndex++;
        }
      }
    }
    return filteredStorageFields;
  };
  function getStorageKeyAndType(api, abi, json, storageName) {
    const { storageEntry } = getStorageEntry(json, storageName);
    if (storageEntry) {
      let storage2 = storageEntry;
      while ("root" in storage2.layout) {
        storage2 = storage2.layout.root;
      }
      const rootKey = storage2.root_key || storage2.layout.leaf.key || "";
      if (hexToNumber$1(rootKey) === 0) {
        const primitiveStorageTypes = getPrimitiveTypes(json);
        if (storage2.layout && storage2.layout.leaf && storage2.layout.leaf.ty) {
          const type = storage2.layout.leaf.ty;
          if (primitiveStorageTypes[type]) {
            return {
              storageType: api.createType("PortableType", {
                id: type,
                type: primitiveStorageTypes[type]
              }),
              storageKey: rootKey
            };
          }
        }
      }
      const rootKeyReversed = reverseHexString(rootKey.slice(2));
      const item = get(abi.registry.lookup.types, storage2.layout.leaf.ty);
      return {
        storageType: item,
        storageKey: rootKeyReversed
      };
    }
    throw new ProsopoContractError("CONTRACT.INVALID_STORAGE_NAME", getStorageKeyAndType.name);
  }
  function getStorageEntry(json, storageName) {
    var _a, _b;
    const index2 = (_a = json.storage.root.layout.struct) == null ? void 0 : _a.fields.findIndex((obj) => obj.name === storageName);
    if (index2) {
      return { storageEntry: (_b = json.storage.root.layout.struct) == null ? void 0 : _b.fields[index2], index: index2 };
    }
    return {};
  }
  async function getPrimitiveStorageValue(api, abi, name, primitiveStorage, address) {
    const promiseResult = api.rx.call.contractsApi.getStorage(address, "0x00000000");
    const result = await firstValueFrom(promiseResult);
    const optionStorageBytes = abi.registry.createType("Option<Bytes>", result);
    const storageBytes = optionStorageBytes.unwrap().toU8a(true);
    const trimmedStorageBytes = storageBytes.slice(4, storageBytes.length);
    const storage2 = get(primitiveStorage, name);
    const startBytes = storage2.startBytes;
    const endBytes = startBytes + storage2.lengthBytes;
    const primitiveBytes = trimmedStorageBytes.slice(startBytes, endBytes);
    return abi.registry.createType(storage2.storageType, primitiveBytes);
  }
  function useWeightImpl(api, blockTime, scalingFactor) {
    const isWeightV22 = !!api.registry.createType("Weight").proofSize;
    const megaGas = convertWeight(api.consts.system.blockWeights ? api.consts.system.blockWeights.maxBlock : api.consts.system.maximumBlockWeight).v1Weight.div(BN_MILLION).div(BN_TEN);
    const megaRefTime = api.consts.system.blockWeights ? api.consts.system.blockWeights.perClass.normal.maxExtrinsic.unwrapOrDefault().refTime.toBn().div(BN_MILLION).div(BN_TEN) : BN_ZERO;
    const proofSize = api.consts.system.blockWeights ? (
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      api.consts.system.blockWeights.perClass.normal.maxExtrinsic.unwrapOrDefault().proofSize.toBn()
    ) : BN_ZERO;
    const isEmpty2 = false;
    return new Promise((resolve, reject) => {
      let executionTime = 0;
      let percentage = 0;
      let weight = BN_ZERO;
      let weightV2 = api.registry.createType("WeightV2", {
        proofSize: BN_ZERO,
        refTime: BN_ZERO
      });
      let isValid2 = false;
      if (megaGas) {
        weight = megaGas.mul(BN_MILLION);
        executionTime = weight.mul(blockTime).div(convertWeight(api.consts.system.blockWeights ? api.consts.system.blockWeights.maxBlock : api.consts.system.maximumBlockWeight).v1Weight).toNumber();
        percentage = executionTime / blockTime.toNumber() * 100;
        executionTime = executionTime / 3e3;
        isValid2 = !megaGas.isZero() && percentage < 65;
      }
      if (isWeightV22 && megaRefTime && proofSize) {
        weightV2 = api.registry.createType("WeightV2", {
          proofSize: proofSize.div(scalingFactor),
          refTime: megaRefTime.mul(BN_MILLION).div(scalingFactor)
        });
        executionTime = megaRefTime.mul(BN_MILLION).mul(blockTime).div(api.consts.system.blockWeights ? (
          // eslint-disable-next-line @typescript-eslint/ban-ts-comment
          // @ts-ignore
          api.consts.system.blockWeights.perClass.normal.maxExtrinsic.unwrapOrDefault().refTime.toBn()
        ) : BN_ONE).toNumber();
        percentage = executionTime / blockTime.toNumber() * 100;
        executionTime = executionTime / 3e3;
        isValid2 = !megaRefTime.isZero() && percentage < 65;
      }
      resolve({
        executionTime,
        isEmpty: isEmpty2,
        isValid: isValid2,
        isWeightV2: isWeightV22,
        megaGas: megaGas || BN_ZERO,
        megaRefTime: megaRefTime || BN_ZERO,
        percentage,
        proofSize: proofSize || BN_ZERO,
        weight,
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        weightV2
      });
    });
  }
  const ContractAbi = `{"source":{"hash":"0x68f6da46db169556d49c6ad8450a02dff03cde501dcec7e5a172537d4f9cbf72","language":"ink! 4.1.0","compiler":"rustc 1.69.0","build_info":{"build_mode":"Debug","cargo_contract_version":"2.0.0-rc.1","rust_toolchain":"stable-x86_64-unknown-linux-gnu","wasm_opt_settings":{"keep_debug_symbols":false,"optimization_passes":"Z"}}},"contract":{"name":"captcha","version":"4.0.0","authors":["Chris Taylor chris@prosopo.io","George Oastler george@prosopo.io","Vincenzo Ferrara","Siniša Čanak"]},"spec":{"constructors":[{"args":[],"default":false,"docs":["Constructor"],"label":"new","payable":true,"returnType":{"displayName":["ink_primitives","ConstructorResult"],"type":10},"selector":"0x9bae9d5e"}],"docs":[],"environment":{"accountId":{"displayName":["AccountId"],"type":7},"balance":{"displayName":["Balance"],"type":0},"blockNumber":{"displayName":["BlockNumber"],"type":1},"chainExtension":{"displayName":["ChainExtension"],"type":65},"hash":{"displayName":["Hash"],"type":4},"maxEventTopics":4,"timestamp":{"displayName":["Timestamp"],"type":64}},"events":[],"lang_error":{"displayName":["ink","LangError"],"type":12},"messages":[{"args":[],"default":false,"docs":[" the account which can instantiate the contract"],"label":"get_author","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":13},"selector":"0x1b6e3f0b"},{"args":[],"default":false,"docs":[" the admin which can control this contract. set to author/instantiator by default"],"label":"get_admin","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":13},"selector":"0x57b8a8a7"},{"args":[],"default":false,"docs":[" Get all payee options"],"label":"get_payees","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":14},"selector":"0xf334a6d7"},{"args":[],"default":false,"docs":[" Get all dapp payee options"],"label":"get_dapp_payees","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":17},"selector":"0xcce851af"},{"args":[],"default":false,"docs":[" Get all status options"],"label":"get_statuses","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":20},"selector":"0xd39608f0"},{"args":[],"default":false,"docs":[" Get contract provider minimum stake default."],"label":"get_provider_stake_threshold","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":23},"selector":"0x3e7e8941"},{"args":[],"default":false,"docs":[" Get contract dapp minimum stake default."],"label":"get_dapp_stake_threshold","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":23},"selector":"0xc9834fee"},{"args":[],"default":false,"docs":[" the maximum fee a provider can charge for a commit"],"label":"get_max_provider_fee","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":24},"selector":"0xd799cf93"},{"args":[],"default":false,"docs":[" the minimum number of providers needed for the contract to function"],"label":"get_min_num_active_providers","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":25},"selector":"0xa200bea1"},{"args":[],"default":false,"docs":[" the time to complete a block, 6 seconds by default"],"label":"get_block_time","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":25},"selector":"0x8d3f151d"},{"args":[],"default":false,"docs":[" the max age of a commit for a user before it is removed from the history, in seconds"],"label":"get_max_user_history_age_seconds","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":24},"selector":"0xcab4fa0a"},{"args":[],"default":false,"docs":[" the max number of commits stored for a single user"],"label":"get_max_user_history_len","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":25},"selector":"0xfb715e71"},{"args":[],"default":false,"docs":[" the max age of a commit for a user before it is removed from the history, in blocks"],"label":"get_max_user_history_age_blocks","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":24},"selector":"0x6f3337c3"},{"args":[{"label":"url","type":{"displayName":["Vec"],"type":2}},{"label":"fee","type":{"displayName":["u32"],"type":1}},{"label":"payee","type":{"displayName":["Payee"],"type":16}}],"default":false,"docs":[" Register a provider, their url and fee"],"label":"provider_register","mutates":true,"payable":true,"returnType":{"displayName":["ink","MessageResult"],"type":27},"selector":"0xc66f9a2a"},{"args":[{"label":"url","type":{"displayName":["Vec"],"type":2}},{"label":"fee","type":{"displayName":["u32"],"type":1}},{"label":"payee","type":{"displayName":["Payee"],"type":16}}],"default":false,"docs":[" Update an existing provider, their url, fee and deposit funds"],"label":"provider_update","mutates":true,"payable":true,"returnType":{"displayName":["ink","MessageResult"],"type":27},"selector":"0xd2f70de8"},{"args":[],"default":false,"docs":[" De-activate a provider by setting their status to Deactivated"],"label":"provider_deactivate","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":27},"selector":"0xa65232da"},{"args":[],"default":false,"docs":[" Unstake and deactivate the provider's service, returning stake"],"label":"provider_deregister","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":27},"selector":"0x5eff53cf"},{"args":[{"label":"account","type":{"displayName":["AccountId"],"type":7}}],"default":false,"docs":[" Get an existing provider"],"label":"get_provider","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":30},"selector":"0x457c7444"},{"args":[],"default":false,"docs":[" Fund a provider"],"label":"provider_fund","mutates":true,"payable":true,"returnType":{"displayName":["ink","MessageResult"],"type":27},"selector":"0x54ee83bb"},{"args":[{"label":"dataset_id","type":{"displayName":["Hash"],"type":4}},{"label":"dataset_id_content","type":{"displayName":["Hash"],"type":4}}],"default":false,"docs":[" Add a new data set"],"label":"provider_set_dataset","mutates":true,"payable":true,"returnType":{"displayName":["ink","MessageResult"],"type":27},"selector":"0xb0e7ab99"},{"args":[{"label":"contract","type":{"displayName":["AccountId"],"type":7}}],"default":false,"docs":[" Get an existing dapp"],"label":"get_dapp","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":33},"selector":"0xf96477c0"},{"args":[{"label":"contract","type":{"displayName":["AccountId"],"type":7}},{"label":"payee","type":{"displayName":["DappPayee"],"type":19}}],"default":false,"docs":[" Register a dapp"],"label":"dapp_register","mutates":true,"payable":true,"returnType":{"displayName":["ink","MessageResult"],"type":27},"selector":"0x42b45efa"},{"args":[{"label":"contract","type":{"displayName":["AccountId"],"type":7}},{"label":"payee","type":{"displayName":["DappPayee"],"type":19}},{"label":"owner","type":{"displayName":["AccountId"],"type":7}}],"default":false,"docs":[" Update a dapp with new funds, setting status as appropriate"],"label":"dapp_update","mutates":true,"payable":true,"returnType":{"displayName":["ink","MessageResult"],"type":27},"selector":"0x5dbfa904"},{"args":[{"label":"contract","type":{"displayName":["AccountId"],"type":7}}],"default":false,"docs":[" Fund dapp account to pay for services, if the Dapp caller is registered in self.dapps"],"label":"dapp_fund","mutates":true,"payable":true,"returnType":{"displayName":["ink","MessageResult"],"type":27},"selector":"0x55da62a9"},{"args":[{"label":"contract","type":{"displayName":["AccountId"],"type":7}}],"default":false,"docs":[" Cancel services as a dapp, returning remaining tokens"],"label":"dapp_deregister","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":27},"selector":"0xdc7da4d5"},{"args":[{"label":"contract","type":{"displayName":["AccountId"],"type":7}}],"default":false,"docs":[" Deactivate a dapp, leaving stake intact"],"label":"dapp_deactivate","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":27},"selector":"0x94718d6f"},{"args":[{"label":"user_account","type":{"displayName":["AccountId"],"type":7}}],"default":false,"docs":[],"label":"get_user_history_summary","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":36},"selector":"0x3be12ad6"},{"args":[{"label":"commit","type":{"displayName":["Commit"],"type":39}}],"default":false,"docs":[" Provider submits a captcha solution commitment"],"label":"provider_commit","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":27},"selector":"0x57876316"},{"args":[{"label":"commits","type":{"displayName":["Vec"],"type":41}}],"default":false,"docs":[" Provider submits 0-many captcha solution commitments"],"label":"provider_commit_many","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":27},"selector":"0xc8d4b3b2"},{"args":[{"label":"user_account","type":{"displayName":["AccountId"],"type":7}},{"label":"threshold","type":{"displayName":["u8"],"type":3}}],"default":false,"docs":[" Checks if the user is a human (true) as they have a solution rate higher than a % threshold or a bot (false)"," Threshold is decided by the calling user"," Threshold is between 0-200, i.e. 0-100% in 0.5% increments. E.g. 100 = 50%, 200 = 100%, 0 = 0%, 50 = 25%, etc."],"label":"dapp_operator_is_human_user","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":42},"selector":"0xbe7b6ef9"},{"args":[{"label":"user_account","type":{"displayName":["AccountId"],"type":7}}],"default":false,"docs":[" Get the last correct captcha for a user"],"label":"dapp_operator_last_correct_captcha","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":45},"selector":"0xbe930f18"},{"args":[{"label":"dataset_id","type":{"displayName":["Hash"],"type":4}}],"default":false,"docs":[" Get a single captcha dataset",""," Returns an error if the dapp does not exist"],"label":"get_captcha_data","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":48},"selector":"0x7a54158d"},{"args":[{"label":"user_account","type":{"displayName":["AccountId"],"type":7}}],"default":false,"docs":[" Get a dapp user",""," Returns an error if the user does not exist"],"label":"get_user","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":51},"selector":"0xa4ca534e"},{"args":[{"label":"commit_id","type":{"displayName":["Hash"],"type":4}}],"default":false,"docs":[" Get a solution commitment",""," Returns an error if the commitment does not exist"],"label":"get_commit","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":54},"selector":"0x5329f551"},{"args":[{"label":"provider_accounts","type":{"displayName":["Vec"],"type":8}}],"default":false,"docs":[" List providers given an array of account id",""," Returns empty if none were matched"],"label":"list_providers_by_accounts","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":56},"selector":"0x52f0d2cb"},{"args":[{"label":"statuses","type":{"displayName":["Vec"],"type":21}}],"default":false,"docs":[" List providers given an array of status",""," Returns empty if none were matched"],"label":"list_providers_by_status","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":56},"selector":"0x54b28ab4"},{"args":[{"label":"user_account","type":{"displayName":["AccountId"],"type":7}},{"label":"dapp_contract","type":{"displayName":["AccountId"],"type":7}}],"default":false,"docs":[" Get a random active provider",""," Returns error if no active provider is found"],"label":"get_random_active_provider","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":59},"selector":"0x4aee5bad"},{"args":[],"default":false,"docs":[" Get the AccountIds of all Providers ever registered",""," Returns {Vec<AccountId>}"],"label":"get_all_provider_accounts","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":62},"selector":"0x5052021f"},{"args":[{"label":"len","type":{"displayName":["u128"],"type":0}},{"label":"user_account","type":{"displayName":["AccountId"],"type":7}},{"label":"dapp_contract","type":{"displayName":["AccountId"],"type":7}}],"default":false,"docs":[" Get a random number from 0 to \`len\` - 1 inclusive. The user account is added to the seed for additional random entropy."],"label":"get_random_number","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":23},"selector":"0x2306aecd"},{"args":[],"default":false,"docs":[" Terminate this contract and return any/all funds in this contract to the destination"],"label":"terminate","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":27},"selector":"0x476d839f"},{"args":[{"label":"amount","type":{"displayName":["Balance"],"type":0}}],"default":false,"docs":[" Withdraw some funds from the contract to the specified destination"],"label":"withdraw","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":27},"selector":"0x410fcc9d"},{"args":[{"label":"code_hash","type":{"displayName":[],"type":5}}],"default":false,"docs":[" Set the code hash for this contract"],"label":"set_code_hash","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":27},"selector":"0x9e5c5758"}]},"storage":{"root":{"layout":{"struct":{"fields":[{"layout":{"root":{"layout":{"struct":{"fields":[{"layout":{"enum":{"dispatchKey":"0x1840c684","name":"GovernanceStatus","variants":{"0":{"fields":[],"name":"Active"},"1":{"fields":[],"name":"Inactive"}}}},"name":"status"},{"layout":{"leaf":{"key":"0x1840c684","ty":0}},"name":"balance"},{"layout":{"leaf":{"key":"0x1840c684","ty":1}},"name":"fee"},{"layout":{"enum":{"dispatchKey":"0x1840c684","name":"Payee","variants":{"0":{"fields":[],"name":"Provider"},"1":{"fields":[],"name":"Dapp"}}}},"name":"payee"},{"layout":{"leaf":{"key":"0x1840c684","ty":2}},"name":"url"},{"layout":{"leaf":{"key":"0x1840c684","ty":4}},"name":"dataset_id"},{"layout":{"leaf":{"key":"0x1840c684","ty":4}},"name":"dataset_id_content"}],"name":"Provider"}},"root_key":"0x1840c684"}},"name":"providers"},{"layout":{"root":{"layout":{"leaf":{"key":"0x10b13b19","ty":6}},"root_key":"0x10b13b19"}},"name":"provider_accounts"},{"layout":{"root":{"layout":{"leaf":{"key":"0xb27496e1","ty":7}},"root_key":"0xb27496e1"}},"name":"urls"},{"layout":{"root":{"layout":{"leaf":{"key":"0x193fd9ad","ty":7}},"root_key":"0x193fd9ad"}},"name":"datasets"},{"layout":{"root":{"layout":{"struct":{"fields":[{"layout":{"enum":{"dispatchKey":"0x4ddf16e1","name":"GovernanceStatus","variants":{"0":{"fields":[],"name":"Active"},"1":{"fields":[],"name":"Inactive"}}}},"name":"status"},{"layout":{"leaf":{"key":"0x4ddf16e1","ty":0}},"name":"balance"},{"layout":{"leaf":{"key":"0x4ddf16e1","ty":7}},"name":"owner"},{"layout":{"enum":{"dispatchKey":"0x4ddf16e1","name":"DappPayee","variants":{"0":{"fields":[],"name":"Provider"},"1":{"fields":[],"name":"Dapp"},"2":{"fields":[],"name":"Any"}}}},"name":"payee"}],"name":"Dapp"}},"root_key":"0x4ddf16e1"}},"name":"dapps"},{"layout":{"root":{"layout":{"leaf":{"key":"0xa6faeb75","ty":6}},"root_key":"0xa6faeb75"}},"name":"dapp_contracts"},{"layout":{"root":{"layout":{"struct":{"fields":[{"layout":{"leaf":{"key":"0xa403ce74","ty":4}},"name":"id"},{"layout":{"leaf":{"key":"0xa403ce74","ty":7}},"name":"user_account"},{"layout":{"leaf":{"key":"0xa403ce74","ty":4}},"name":"dataset_id"},{"layout":{"enum":{"dispatchKey":"0xa403ce74","name":"CaptchaStatus","variants":{"0":{"fields":[],"name":"Pending"},"1":{"fields":[],"name":"Approved"},"2":{"fields":[],"name":"Disapproved"}}}},"name":"status"},{"layout":{"leaf":{"key":"0xa403ce74","ty":7}},"name":"dapp_contract"},{"layout":{"leaf":{"key":"0xa403ce74","ty":7}},"name":"provider_account"},{"layout":{"leaf":{"key":"0xa403ce74","ty":1}},"name":"requested_at"},{"layout":{"leaf":{"key":"0xa403ce74","ty":1}},"name":"completed_at"},{"layout":{"array":{"layout":{"leaf":{"key":"0xa403ce74","ty":3}},"len":32,"offset":"0xa403ce74"}},"name":"user_signature_part1"},{"layout":{"array":{"layout":{"leaf":{"key":"0xa403ce74","ty":3}},"len":32,"offset":"0xa403ce74"}},"name":"user_signature_part2"}],"name":"Commit"}},"root_key":"0xa403ce74"}},"name":"commits"},{"layout":{"root":{"layout":{"struct":{"fields":[{"layout":{"leaf":{"key":"0x918cf262","ty":9}},"name":"history"}],"name":"User"}},"root_key":"0x918cf262"}},"name":"users"},{"layout":{"root":{"layout":{"leaf":{"key":"0x2057813a","ty":6}},"root_key":"0x2057813a"}},"name":"user_accounts"}],"name":"Captcha"}},"root_key":"0x00000000"}},"types":[{"id":0,"type":{"def":{"primitive":"u128"}}},{"id":1,"type":{"def":{"primitive":"u32"}}},{"id":2,"type":{"def":{"sequence":{"type":3}}}},{"id":3,"type":{"def":{"primitive":"u8"}}},{"id":4,"type":{"def":{"composite":{"fields":[{"type":5,"typeName":"[u8; 32]"}]}},"path":["ink_primitives","types","Hash"]}},{"id":5,"type":{"def":{"array":{"len":32,"type":3}}}},{"id":6,"type":{"def":{"composite":{"fields":[{"type":8}]}},"params":[{"name":"T","type":7}],"path":["BTreeSet"]}},{"id":7,"type":{"def":{"composite":{"fields":[{"type":5,"typeName":"[u8; 32]"}]}},"path":["ink_primitives","types","AccountId"]}},{"id":8,"type":{"def":{"sequence":{"type":7}}}},{"id":9,"type":{"def":{"sequence":{"type":4}}}},{"id":10,"type":{"def":{"variant":{"variants":[{"fields":[{"type":11}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":11},{"name":"E","type":12}],"path":["Result"]}},{"id":11,"type":{"def":{"tuple":[]}}},{"id":12,"type":{"def":{"variant":{"variants":[{"index":1,"name":"CouldNotReadInput"}]}},"path":["ink_primitives","LangError"]}},{"id":13,"type":{"def":{"variant":{"variants":[{"fields":[{"type":7}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":7},{"name":"E","type":12}],"path":["Result"]}},{"id":14,"type":{"def":{"variant":{"variants":[{"fields":[{"type":15}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":15},{"name":"E","type":12}],"path":["Result"]}},{"id":15,"type":{"def":{"sequence":{"type":16}}}},{"id":16,"type":{"def":{"variant":{"variants":[{"index":0,"name":"Provider"},{"index":1,"name":"Dapp"}]}},"path":["captcha","captcha","Payee"]}},{"id":17,"type":{"def":{"variant":{"variants":[{"fields":[{"type":18}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":18},{"name":"E","type":12}],"path":["Result"]}},{"id":18,"type":{"def":{"sequence":{"type":19}}}},{"id":19,"type":{"def":{"variant":{"variants":[{"index":0,"name":"Provider"},{"index":1,"name":"Dapp"},{"index":2,"name":"Any"}]}},"path":["captcha","captcha","DappPayee"]}},{"id":20,"type":{"def":{"variant":{"variants":[{"fields":[{"type":21}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":21},{"name":"E","type":12}],"path":["Result"]}},{"id":21,"type":{"def":{"sequence":{"type":22}}}},{"id":22,"type":{"def":{"variant":{"variants":[{"index":0,"name":"Active"},{"index":1,"name":"Inactive"}]}},"path":["captcha","captcha","GovernanceStatus"]}},{"id":23,"type":{"def":{"variant":{"variants":[{"fields":[{"type":0}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":0},{"name":"E","type":12}],"path":["Result"]}},{"id":24,"type":{"def":{"variant":{"variants":[{"fields":[{"type":1}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":1},{"name":"E","type":12}],"path":["Result"]}},{"id":25,"type":{"def":{"variant":{"variants":[{"fields":[{"type":26}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":26},{"name":"E","type":12}],"path":["Result"]}},{"id":26,"type":{"def":{"primitive":"u16"}}},{"id":27,"type":{"def":{"variant":{"variants":[{"fields":[{"type":28}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":28},{"name":"E","type":12}],"path":["Result"]}},{"id":28,"type":{"def":{"variant":{"variants":[{"fields":[{"type":11}],"index":0,"name":"Ok"},{"fields":[{"type":29}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":11},{"name":"E","type":29}],"path":["Result"]}},{"id":29,"type":{"def":{"variant":{"variants":[{"index":0,"name":"NotAdmin"},{"index":1,"name":"NotOwner"},{"index":2,"name":"ContractTransferFailed"},{"index":3,"name":"ProviderAccountExists"},{"index":4,"name":"ProviderExists"},{"index":5,"name":"ProviderAccountDoesNotExist"},{"index":6,"name":"ProviderDoesNotExist"},{"index":7,"name":"ProviderInsufficientFunds"},{"index":8,"name":"ProviderInactive"},{"index":9,"name":"ProviderUrlUsed"},{"index":10,"name":"DappExists"},{"index":11,"name":"DappDoesNotExist"},{"index":12,"name":"DappInactive"},{"index":13,"name":"DappInsufficientFunds"},{"index":14,"name":"CaptchaDataDoesNotExist"},{"index":15,"name":"CommitDoesNotExist"},{"index":16,"name":"DappUserDoesNotExist"},{"index":17,"name":"NoActiveProviders"},{"index":18,"name":"DatasetIdSolutionsSame"},{"index":19,"name":"CodeNotFound"},{"index":20,"name":"Unknown"},{"index":21,"name":"InvalidContract"},{"index":22,"name":"InvalidPayee"},{"index":23,"name":"InvalidCaptchaStatus"},{"index":24,"name":"NoCorrectCaptcha"},{"index":25,"name":"NotEnoughActiveProviders"},{"index":26,"name":"ProviderFeeTooHigh"},{"index":27,"name":"CommitAlreadyExists"}]}},"path":["captcha","captcha","Error"]}},{"id":30,"type":{"def":{"variant":{"variants":[{"fields":[{"type":31}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":31},{"name":"E","type":12}],"path":["Result"]}},{"id":31,"type":{"def":{"variant":{"variants":[{"fields":[{"type":32}],"index":0,"name":"Ok"},{"fields":[{"type":29}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":32},{"name":"E","type":29}],"path":["Result"]}},{"id":32,"type":{"def":{"composite":{"fields":[{"name":"status","type":22,"typeName":"GovernanceStatus"},{"name":"balance","type":0,"typeName":"Balance"},{"name":"fee","type":1,"typeName":"u32"},{"name":"payee","type":16,"typeName":"Payee"},{"name":"url","type":2,"typeName":"Vec<u8>"},{"name":"dataset_id","type":4,"typeName":"Hash"},{"name":"dataset_id_content","type":4,"typeName":"Hash"}]}},"path":["captcha","captcha","Provider"]}},{"id":33,"type":{"def":{"variant":{"variants":[{"fields":[{"type":34}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":34},{"name":"E","type":12}],"path":["Result"]}},{"id":34,"type":{"def":{"variant":{"variants":[{"fields":[{"type":35}],"index":0,"name":"Ok"},{"fields":[{"type":29}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":35},{"name":"E","type":29}],"path":["Result"]}},{"id":35,"type":{"def":{"composite":{"fields":[{"name":"status","type":22,"typeName":"GovernanceStatus"},{"name":"balance","type":0,"typeName":"Balance"},{"name":"owner","type":7,"typeName":"AccountId"},{"name":"payee","type":19,"typeName":"DappPayee"}]}},"path":["captcha","captcha","Dapp"]}},{"id":36,"type":{"def":{"variant":{"variants":[{"fields":[{"type":37}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":37},{"name":"E","type":12}],"path":["Result"]}},{"id":37,"type":{"def":{"variant":{"variants":[{"fields":[{"type":38}],"index":0,"name":"Ok"},{"fields":[{"type":29}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":38},{"name":"E","type":29}],"path":["Result"]}},{"id":38,"type":{"def":{"composite":{"fields":[{"name":"correct","type":26,"typeName":"u16"},{"name":"incorrect","type":26,"typeName":"u16"},{"name":"score","type":3,"typeName":"u8"}]}},"path":["captcha","captcha","UserHistorySummary"]}},{"id":39,"type":{"def":{"composite":{"fields":[{"name":"id","type":4,"typeName":"Hash"},{"name":"user_account","type":7,"typeName":"AccountId"},{"name":"dataset_id","type":4,"typeName":"Hash"},{"name":"status","type":40,"typeName":"CaptchaStatus"},{"name":"dapp_contract","type":7,"typeName":"AccountId"},{"name":"provider_account","type":7,"typeName":"AccountId"},{"name":"requested_at","type":1,"typeName":"BlockNumber"},{"name":"completed_at","type":1,"typeName":"BlockNumber"},{"name":"user_signature_part1","type":5,"typeName":"[u8; 32]"},{"name":"user_signature_part2","type":5,"typeName":"[u8; 32]"}]}},"path":["captcha","captcha","Commit"]}},{"id":40,"type":{"def":{"variant":{"variants":[{"index":0,"name":"Pending"},{"index":1,"name":"Approved"},{"index":2,"name":"Disapproved"}]}},"path":["captcha","captcha","CaptchaStatus"]}},{"id":41,"type":{"def":{"sequence":{"type":39}}}},{"id":42,"type":{"def":{"variant":{"variants":[{"fields":[{"type":43}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":43},{"name":"E","type":12}],"path":["Result"]}},{"id":43,"type":{"def":{"variant":{"variants":[{"fields":[{"type":44}],"index":0,"name":"Ok"},{"fields":[{"type":29}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":44},{"name":"E","type":29}],"path":["Result"]}},{"id":44,"type":{"def":{"primitive":"bool"}}},{"id":45,"type":{"def":{"variant":{"variants":[{"fields":[{"type":46}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":46},{"name":"E","type":12}],"path":["Result"]}},{"id":46,"type":{"def":{"variant":{"variants":[{"fields":[{"type":47}],"index":0,"name":"Ok"},{"fields":[{"type":29}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":47},{"name":"E","type":29}],"path":["Result"]}},{"id":47,"type":{"def":{"composite":{"fields":[{"name":"before","type":1,"typeName":"BlockNumber"},{"name":"dapp_contract","type":7,"typeName":"AccountId"}]}},"path":["captcha","captcha","LastCorrectCaptcha"]}},{"id":48,"type":{"def":{"variant":{"variants":[{"fields":[{"type":49}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":49},{"name":"E","type":12}],"path":["Result"]}},{"id":49,"type":{"def":{"variant":{"variants":[{"fields":[{"type":50}],"index":0,"name":"Ok"},{"fields":[{"type":29}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":50},{"name":"E","type":29}],"path":["Result"]}},{"id":50,"type":{"def":{"composite":{"fields":[{"name":"provider_account","type":7,"typeName":"AccountId"},{"name":"dataset_id","type":4,"typeName":"Hash"},{"name":"dataset_id_content","type":4,"typeName":"Hash"}]}},"path":["captcha","captcha","CaptchaData"]}},{"id":51,"type":{"def":{"variant":{"variants":[{"fields":[{"type":52}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":52},{"name":"E","type":12}],"path":["Result"]}},{"id":52,"type":{"def":{"variant":{"variants":[{"fields":[{"type":53}],"index":0,"name":"Ok"},{"fields":[{"type":29}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":53},{"name":"E","type":29}],"path":["Result"]}},{"id":53,"type":{"def":{"composite":{"fields":[{"name":"history","type":9,"typeName":"Vec<Hash>"}]}},"path":["captcha","captcha","User"]}},{"id":54,"type":{"def":{"variant":{"variants":[{"fields":[{"type":55}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":55},{"name":"E","type":12}],"path":["Result"]}},{"id":55,"type":{"def":{"variant":{"variants":[{"fields":[{"type":39}],"index":0,"name":"Ok"},{"fields":[{"type":29}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":39},{"name":"E","type":29}],"path":["Result"]}},{"id":56,"type":{"def":{"variant":{"variants":[{"fields":[{"type":57}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":57},{"name":"E","type":12}],"path":["Result"]}},{"id":57,"type":{"def":{"variant":{"variants":[{"fields":[{"type":58}],"index":0,"name":"Ok"},{"fields":[{"type":29}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":58},{"name":"E","type":29}],"path":["Result"]}},{"id":58,"type":{"def":{"sequence":{"type":32}}}},{"id":59,"type":{"def":{"variant":{"variants":[{"fields":[{"type":60}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":60},{"name":"E","type":12}],"path":["Result"]}},{"id":60,"type":{"def":{"variant":{"variants":[{"fields":[{"type":61}],"index":0,"name":"Ok"},{"fields":[{"type":29}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":61},{"name":"E","type":29}],"path":["Result"]}},{"id":61,"type":{"def":{"composite":{"fields":[{"name":"provider_account","type":7,"typeName":"AccountId"},{"name":"provider","type":32,"typeName":"Provider"},{"name":"block_number","type":1,"typeName":"BlockNumber"}]}},"path":["captcha","captcha","RandomProvider"]}},{"id":62,"type":{"def":{"variant":{"variants":[{"fields":[{"type":63}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":63},{"name":"E","type":12}],"path":["Result"]}},{"id":63,"type":{"def":{"variant":{"variants":[{"fields":[{"type":8}],"index":0,"name":"Ok"},{"fields":[{"type":29}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":8},{"name":"E","type":29}],"path":["Result"]}},{"id":64,"type":{"def":{"primitive":"u64"}}},{"id":65,"type":{"def":{"variant":{}},"path":["ink_env","types","NoChainExtension"]}}],"version":"4"}`;
  var dist = {};
  var src = {};
  var query = {};
  var types = {};
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod2) {
    return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
  };
  Object.defineProperty(types, "__esModule", { value: true });
  types.ReturnNumber = types.ResultBuilder = types.Result = void 0;
  var bn_js_1$1 = __importDefault(bnExports);
  var Result = (
    /** @class */
    function() {
      function Result2(ok, err) {
        this.ok = ok;
        this.err = err;
      }
      Result2.prototype.unwrap = function() {
        if (this.ok) {
          return this.ok;
        }
        throw this.err;
      };
      Result2.prototype.unwrapRecursively = function() {
        if (this.ok) {
          if (this.ok instanceof Result2) {
            return this.ok.unwrapRecursively();
          }
          return this.ok;
        }
        if (this.err)
          throw this.err;
        return this.ok;
      };
      Result2.prototype.unwrapErr = function() {
        if (this.err) {
          return this.err;
        }
        return void 0;
      };
      return Result2;
    }()
  );
  types.Result = Result;
  var ResultBuilder = (
    /** @class */
    function() {
      function ResultBuilder2() {
      }
      ResultBuilder2.Ok = function(value) {
        return new Result(value, void 0);
      };
      ResultBuilder2.Err = function(error) {
        return new Result(void 0, error);
      };
      return ResultBuilder2;
    }()
  );
  types.ResultBuilder = ResultBuilder;
  var ReturnNumber = (
    /** @class */
    function() {
      function ReturnNumber2(value) {
        if (typeof value == "string") {
          this.rawNumber = new bn_js_1$1.default(value.substring(2), 16);
        } else {
          this.rawNumber = new bn_js_1$1.default(value);
        }
      }
      ReturnNumber2.prototype.toString = function() {
        return this.rawNumber.toString();
      };
      ReturnNumber2.prototype.toHuman = function() {
        return this.toString();
      };
      ReturnNumber2.prototype.toNumber = function() {
        return this.rawNumber.toNumber();
      };
      ReturnNumber2.ToBN = function(value) {
        return new ReturnNumber2(value).rawNumber;
      };
      return ReturnNumber2;
    }()
  );
  types.ReturnNumber = ReturnNumber;
  const require$$1 = /* @__PURE__ */ getAugmentedNamespace(util$2);
  const require$$3 = /* @__PURE__ */ getAugmentedNamespace(util);
  var __awaiter$1 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var __generator$1 = commonjsGlobal && commonjsGlobal.__generator || function(thisArg, body) {
    var _2 = { label: 0, sent: function() {
      if (t[0] & 1)
        throw t[1];
      return t[1];
    }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
      return this;
    }), g;
    function verb(n) {
      return function(v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f)
        throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_2 = 0)), _2)
        try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
            return t;
          if (y = 0, t)
            op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _2.label++;
              return { value: op[1], done: false };
            case 5:
              _2.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _2.ops.pop();
              _2.trys.pop();
              continue;
            default:
              if (!(t = _2.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _2 = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _2.label = op[1];
                break;
              }
              if (op[0] === 6 && _2.label < t[1]) {
                _2.label = t[1];
                t = op;
                break;
              }
              if (t && _2.label < t[2]) {
                _2.label = t[2];
                _2.ops.push(op);
                break;
              }
              if (t[2])
                _2.ops.pop();
              _2.trys.pop();
              continue;
          }
          op = body.call(thisArg, _2);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
      if (op[0] & 5)
        throw op[1];
      return { value: op[0] ? op[1] : void 0, done: true };
    }
  };
  var __spreadArray$1 = commonjsGlobal && commonjsGlobal.__spreadArray || function(to, from2, pack) {
    if (pack || arguments.length === 2)
      for (var i2 = 0, l2 = from2.length, ar; i2 < l2; i2++) {
        if (ar || !(i2 in from2)) {
          if (!ar)
            ar = Array.prototype.slice.call(from2, 0, i2);
          ar[i2] = from2[i2];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from2));
  };
  Object.defineProperty(query, "__esModule", { value: true });
  query.handleEventReturn = query.handleReturnType = query.queryOutput = query.queryOkJSON = query.queryJSON = query._genValidGasLimitAndValue = void 0;
  var types_1 = types;
  var util_1$1 = require$$1;
  var bn_js_1 = bnExports;
  var util_2 = require$$3;
  var MAX_CALL_GAS = new bn_js_1.BN(5e12).isub(util_1$1.BN_ONE);
  function queryJSON(api, nativeContract, callerAddress, title, args, gasLimitAndValue, handler) {
    if (handler === void 0) {
      handler = function(json) {
        return json;
      };
    }
    return __awaiter$1(this, void 0, void 0, function() {
      var _a, output2, gasConsumed, gasRequired, _value, error;
      return __generator$1(this, function(_b) {
        switch (_b.label) {
          case 0:
            return [4, queryOutput(api, nativeContract, callerAddress, title, args, gasLimitAndValue)];
          case 1:
            _a = _b.sent(), output2 = _a.output, gasConsumed = _a.gasConsumed, gasRequired = _a.gasRequired;
            _value = output2.toJSON();
            if (_value && typeof _value === "object") {
              if ("err" in _value) {
                error = {
                  issue: "READ_ERR_IN_BODY",
                  _err: _value.err
                };
                throw error;
              }
              if ("ok" in _value)
                _value = _value.ok;
            }
            return [2, {
              value: handler(output2.toJSON()),
              gasConsumed,
              gasRequired
            }];
        }
      });
    });
  }
  query.queryJSON = queryJSON;
  function queryOkJSON(api, nativeContract, callerAddress, title, args, gasLimitAndValue, handler) {
    if (handler === void 0) {
      handler = function(json) {
        return json;
      };
    }
    return __awaiter$1(this, void 0, void 0, function() {
      var _a, output2, gasConsumed, gasRequired, _value, error;
      return __generator$1(this, function(_b) {
        switch (_b.label) {
          case 0:
            return [4, queryOutput(api, nativeContract, callerAddress, title, args, gasLimitAndValue)];
          case 1:
            _a = _b.sent(), output2 = _a.output, gasConsumed = _a.gasConsumed, gasRequired = _a.gasRequired;
            _value = output2.toJSON();
            if (_value == null || typeof _value !== "object") {
              error = {
                issue: "BODY_ISNT_OKERR",
                value: _value
              };
              throw error;
            }
            return [2, {
              value: handler(_value),
              gasConsumed,
              gasRequired
            }];
        }
      });
    });
  }
  query.queryOkJSON = queryOkJSON;
  function queryOutput(api, nativeContract, callerAddress, title, args, gasLimitAndValue) {
    return __awaiter$1(this, void 0, void 0, function() {
      var error_1, _args, _gasLimitAndValue, response, error, caughtError_1, gasConsumed, result, output2, gasRequired;
      var _a;
      return __generator$1(this, function(_b) {
        switch (_b.label) {
          case 0:
            nativeContract.address.toString();
            if (nativeContract.query[title] == null) {
              error_1 = {
                issue: "METHOD_DOESNT_EXIST",
                texts: ["Method name: '".concat(title, "'")]
              };
              throw error_1;
            }
            _args = args || [];
            return [4, _genValidGasLimitAndValue(api, gasLimitAndValue)];
          case 1:
            _gasLimitAndValue = _b.sent();
            _b.label = 2;
          case 2:
            _b.trys.push([2, 4, , 5]);
            return [4, (_a = nativeContract.query)[title].apply(_a, __spreadArray$1([
              callerAddress,
              _gasLimitAndValue
            ], _args, false))];
          case 3:
            response = _b.sent();
            return [3, 5];
          case 4:
            caughtError_1 = _b.sent();
            error = {
              issue: "FAIL_AT_CALL",
              caughtError: caughtError_1
            };
            console.error("\nContract.queryString(".concat(title, ") error:"), "\n > error:", error, "\n");
            throw error;
          case 5:
            gasConsumed = response.gasConsumed, result = response.result, output2 = response.output, gasRequired = response.gasRequired;
            output2 ? output2.toString() : null;
            output2 ? output2.toJSON() : null;
            if (result.isErr)
              error = {
                issue: "FAIL_AFTER_CALL::IS_ERROR",
                _resultIsOk: result.isOk,
                _asError: result.isErr ? result.asErr : void 0
              };
            if (result.isOk === false)
              error = {
                issue: "FAIL_AFTER_CALL::RESULT_NOT_OK",
                _asError: result.isErr ? result.asErr : void 0
              };
            if (error)
              throw error;
            return [2, {
              output: output2,
              gasConsumed,
              gasRequired
            }];
        }
      });
    });
  }
  query.queryOutput = queryOutput;
  function _genValidGasLimitAndValue(api, gasLimitAndValue) {
    return __awaiter$1(this, void 0, void 0, function() {
      var value, gasLimit;
      return __generator$1(this, function(_a) {
        if (gasLimitAndValue == null) {
          return [2, {
            // @ts-ignore
            gasLimit: api.registry.createType("WeightV2", {
              refTime: (0, util_2.convertWeight)(api.consts.system.blockWeights ? api.consts.system.blockWeights.maxBlock : api.consts.system.maximumBlockWeight).v1Weight.muln(64).div(util_1$1.BN_HUNDRED),
              proofSize: MAX_CALL_GAS
            }),
            value: util_1$1.BN_ZERO
          }];
        }
        value = gasLimitAndValue.value, gasLimit = gasLimitAndValue.gasLimit;
        if (!value)
          value = util_1$1.BN_ZERO;
        if (gasLimit == null)
          gasLimit = api.registry.createType("WeightV2", {
            refTime: (0, util_2.convertWeight)(api.consts.system.blockWeights ? api.consts.system.blockWeights.maxBlock : api.consts.system.maximumBlockWeight).v1Weight.muln(64).div(util_1$1.BN_HUNDRED),
            proofSize: MAX_CALL_GAS
          });
        return [2, { value, gasLimit }];
      });
    });
  }
  query._genValidGasLimitAndValue = _genValidGasLimitAndValue;
  function handleReturnType(result, typeDescription) {
    if (typeof result === "undefined" || typeof typeDescription === "undefined")
      return result;
    if (result === null || typeDescription == null)
      return result;
    if (typeDescription.isResult) {
      return new types_1.Result(handleReturnType(result.ok, typeDescription.body.ok), handleReturnType(result.err, typeDescription.body.err));
    }
    if (typeDescription.name === "ReturnNumber")
      return new types_1.ReturnNumber(result);
    if (typeof result !== "object" || typeof typeDescription !== "object" || typeDescription.isPrimitive)
      return result;
    if (typeDescription.name === "Array") {
      Object.entries(result).forEach(function(_a) {
        var key = _a[0], value = _a[1];
        result[key] = handleReturnType(value, typeDescription.body[0]);
      });
      return result;
    }
    Object.entries(result).forEach(function(obj) {
      result[obj[0]] = handleReturnType(obj[1], typeDescription.body[obj[0]]);
    });
    return result;
  }
  query.handleReturnType = handleReturnType;
  function handleEventReturn(result, eventDescription) {
    if (typeof result === "undefined")
      return result;
    Object.entries(result).forEach(function(obj) {
      result[obj[0]] = handleReturnType(obj[1], eventDescription.body[obj[0]]);
    });
    return result;
  }
  query.handleEventReturn = handleEventReturn;
  var tx = {};
  var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var __generator = commonjsGlobal && commonjsGlobal.__generator || function(thisArg, body) {
    var _2 = { label: 0, sent: function() {
      if (t[0] & 1)
        throw t[1];
      return t[1];
    }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
      return this;
    }), g;
    function verb(n) {
      return function(v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f)
        throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_2 = 0)), _2)
        try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
            return t;
          if (y = 0, t)
            op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _2.label++;
              return { value: op[1], done: false };
            case 5:
              _2.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _2.ops.pop();
              _2.trys.pop();
              continue;
            default:
              if (!(t = _2.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _2 = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _2.label = op[1];
                break;
              }
              if (op[0] === 6 && _2.label < t[1]) {
                _2.label = t[1];
                t = op;
                break;
              }
              if (t && _2.label < t[2]) {
                _2.label = t[2];
                _2.ops.push(op);
                break;
              }
              if (t[2])
                _2.ops.pop();
              _2.trys.pop();
              continue;
          }
          op = body.call(thisArg, _2);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
      if (op[0] & 5)
        throw op[1];
      return { value: op[0] ? op[1] : void 0, done: true };
    }
  };
  var __spreadArray = commonjsGlobal && commonjsGlobal.__spreadArray || function(to, from2, pack) {
    if (pack || arguments.length === 2)
      for (var i2 = 0, l2 = from2.length, ar; i2 < l2; i2++) {
        if (ar || !(i2 in from2)) {
          if (!ar)
            ar = Array.prototype.slice.call(from2, 0, i2);
          ar[i2] = from2[i2];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from2));
  };
  Object.defineProperty(tx, "__esModule", { value: true });
  tx._signAndSend = tx.buildSubmittableExtrinsic = tx.txSignAndSend = void 0;
  var query_1 = query;
  var util_1 = require$$1;
  function txSignAndSend(nativeAPI, nativeContract, keyringPair, title, eventHandler, args, gasLimitAndValue) {
    return __awaiter(this, void 0, void 0, function() {
      var _gasLimitAndValue, _realGasLimit, estimatedGasLimit, estimatedGasLimitAndValue, submittableExtrinsic;
      var _a;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            return [4, (0, query_1._genValidGasLimitAndValue)(nativeAPI, gasLimitAndValue)];
          case 1:
            _gasLimitAndValue = _b.sent();
            _realGasLimit = gasLimitAndValue || { gasLimit: void 0, value: void 0 };
            return [4, (_a = nativeContract.query)[title].apply(_a, __spreadArray([
              keyringPair.address,
              _gasLimitAndValue
            ], args, false))];
          case 2:
            estimatedGasLimit = _b.sent().gasRequired;
            estimatedGasLimitAndValue = {
              gasLimit: _realGasLimit.gasLimit || estimatedGasLimit,
              value: _realGasLimit.value || util_1.BN_ZERO
            };
            submittableExtrinsic = buildSubmittableExtrinsic(nativeAPI, nativeContract, title, args, estimatedGasLimitAndValue);
            return [2, _signAndSend(nativeAPI.registry, submittableExtrinsic, keyringPair, eventHandler)];
        }
      });
    });
  }
  tx.txSignAndSend = txSignAndSend;
  function buildSubmittableExtrinsic(api, nativeContract, title, args, gasLimitAndValue) {
    var _a;
    if (nativeContract.tx[title] == null) {
      var error = {
        issue: "METHOD_DOESNT_EXIST",
        texts: ["Method name: '".concat(title, "'")]
      };
      throw error;
    }
    var _args = args || [];
    var submittableExtrinsic = (_a = nativeContract.tx)[title].apply(_a, __spreadArray([gasLimitAndValue], _args, false));
    return submittableExtrinsic;
  }
  tx.buildSubmittableExtrinsic = buildSubmittableExtrinsic;
  function _signAndSend(registry, extrinsic, signer, eventHandler) {
    return __awaiter(this, void 0, void 0, function() {
      var signerAddress;
      return __generator(this, function(_a) {
        signerAddress = signer.address;
        return [2, new Promise(function(resolve, reject) {
          var actionStatus = {
            from: signerAddress.toString(),
            txHash: extrinsic.hash.toHex()
          };
          extrinsic.signAndSend(signer, function(result) {
            if (result.status.isInBlock) {
              actionStatus.blockHash = result.status.asInBlock.toHex();
            }
            if (result.status.isFinalized || result.status.isInBlock) {
              actionStatus.events = eventHandler(result.events);
              result.events.filter(function(_a2) {
                var section2 = _a2.event.section;
                return section2 === "system";
              }).forEach(function(event) {
                var _a2 = event.event, data2 = _a2.data, method = _a2.method;
                if (method === "ExtrinsicFailed") {
                  var dispatchError = data2[0];
                  var message = dispatchError.type;
                  if (dispatchError.isModule) {
                    try {
                      var mod2 = dispatchError.asModule;
                      var error = registry.findMetaError(new Uint8Array([
                        mod2.index.toNumber(),
                        mod2.error.toNumber()
                      ]));
                      message = "".concat(error.section, ".").concat(error.name).concat(Array.isArray(error.docs) ? "(".concat(error.docs.join(""), ")") : error.docs || "");
                    } catch (error2) {
                    }
                  }
                  actionStatus.error = {
                    message
                  };
                  reject(actionStatus);
                } else if (method === "ExtrinsicSuccess") {
                  actionStatus.result = result;
                  resolve(actionStatus);
                }
              });
            } else if (result.isError) {
              actionStatus.error = {
                data: result
              };
              actionStatus.events = void 0;
              reject(actionStatus);
            }
          }).catch(function(error) {
            actionStatus.error = {
              message: error.message
            };
            reject(actionStatus);
          });
        })];
      });
    });
  }
  tx._signAndSend = _signAndSend;
  (function(exports2) {
    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m2, k);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m2[k];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports3) {
      for (var p in m2)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m2, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(query, exports2);
    __exportStar(tx, exports2);
    __exportStar(types, exports2);
  })(src);
  (function(exports2) {
    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m2, k);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m2[k];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports3) {
      for (var p in m2)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m2, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(src, exports2);
  })(dist);
  let Methods$3 = class Methods {
    constructor(nativeContract, apiPromise) {
      this.__nativeContract = nativeContract;
      this.__apiPromise = apiPromise;
    }
    /**
     * getAuthor
     *
     */
    getAuthor(__options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getAuthor", [], __options);
    }
    /**
     * getAdmin
     *
     */
    getAdmin(__options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getAdmin", [], __options);
    }
    /**
     * getPayees
     *
     */
    getPayees(__options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getPayees", [], __options);
    }
    /**
     * getDappPayees
     *
     */
    getDappPayees(__options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getDappPayees", [], __options);
    }
    /**
     * getStatuses
     *
     */
    getStatuses(__options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getStatuses", [], __options);
    }
    /**
     * getProviderStakeThreshold
     *
     */
    getProviderStakeThreshold(__options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getProviderStakeThreshold", [], __options);
    }
    /**
     * getDappStakeThreshold
     *
     */
    getDappStakeThreshold(__options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getDappStakeThreshold", [], __options);
    }
    /**
     * getMaxProviderFee
     *
     */
    getMaxProviderFee(__options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getMaxProviderFee", [], __options);
    }
    /**
     * getMinNumActiveProviders
     *
     */
    getMinNumActiveProviders(__options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getMinNumActiveProviders", [], __options);
    }
    /**
     * getBlockTime
     *
     */
    getBlockTime(__options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getBlockTime", [], __options);
    }
    /**
     * getMaxUserHistoryAgeSeconds
     *
     */
    getMaxUserHistoryAgeSeconds(__options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getMaxUserHistoryAgeSeconds", [], __options);
    }
    /**
     * getMaxUserHistoryLen
     *
     */
    getMaxUserHistoryLen(__options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getMaxUserHistoryLen", [], __options);
    }
    /**
     * getMaxUserHistoryAgeBlocks
     *
     */
    getMaxUserHistoryAgeBlocks(__options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getMaxUserHistoryAgeBlocks", [], __options);
    }
    /**
     * providerRegister
     *
     * @param { Array<(number | string | BN)> } url,
     * @param { (number | string | BN) } fee,
     * @param { ArgumentTypes.Payee } payee,
     */
    providerRegister(url, fee, payee, __options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "providerRegister", [url, fee, payee], __options);
    }
    /**
     * providerUpdate
     *
     * @param { Array<(number | string | BN)> } url,
     * @param { (number | string | BN) } fee,
     * @param { ArgumentTypes.Payee } payee,
     */
    providerUpdate(url, fee, payee, __options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "providerUpdate", [url, fee, payee], __options);
    }
    /**
     * providerDeactivate
     *
     */
    providerDeactivate(__options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "providerDeactivate", [], __options);
    }
    /**
     * providerDeregister
     *
     */
    providerDeregister(__options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "providerDeregister", [], __options);
    }
    /**
     * getProvider
     *
     * @param { ArgumentTypes.AccountId } account,
     */
    getProvider(account2, __options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getProvider", [account2], __options);
    }
    /**
     * providerFund
     *
     */
    providerFund(__options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "providerFund", [], __options);
    }
    /**
     * providerSetDataset
     *
     * @param { ArgumentTypes.Hash } datasetId,
     * @param { ArgumentTypes.Hash } datasetIdContent,
     */
    providerSetDataset(datasetId, datasetIdContent, __options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "providerSetDataset", [datasetId, datasetIdContent], __options);
    }
    /**
     * getDapp
     *
     * @param { ArgumentTypes.AccountId } contract,
     */
    getDapp(contract, __options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getDapp", [contract], __options);
    }
    /**
     * dappRegister
     *
     * @param { ArgumentTypes.AccountId } contract,
     * @param { ArgumentTypes.DappPayee } payee,
     */
    dappRegister(contract, payee, __options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "dappRegister", [contract, payee], __options);
    }
    /**
     * dappUpdate
     *
     * @param { ArgumentTypes.AccountId } contract,
     * @param { ArgumentTypes.DappPayee } payee,
     * @param { ArgumentTypes.AccountId } owner,
     */
    dappUpdate(contract, payee, owner, __options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "dappUpdate", [contract, payee, owner], __options);
    }
    /**
     * dappFund
     *
     * @param { ArgumentTypes.AccountId } contract,
     */
    dappFund(contract, __options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "dappFund", [contract], __options);
    }
    /**
     * dappDeregister
     *
     * @param { ArgumentTypes.AccountId } contract,
     */
    dappDeregister(contract, __options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "dappDeregister", [contract], __options);
    }
    /**
     * dappDeactivate
     *
     * @param { ArgumentTypes.AccountId } contract,
     */
    dappDeactivate(contract, __options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "dappDeactivate", [contract], __options);
    }
    /**
     * getUserHistorySummary
     *
     * @param { ArgumentTypes.AccountId } userAccount,
     */
    getUserHistorySummary(userAccount, __options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getUserHistorySummary", [userAccount], __options);
    }
    /**
     * providerCommit
     *
     * @param { ArgumentTypes.Commit } commit,
     */
    providerCommit(commit, __options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "providerCommit", [commit], __options);
    }
    /**
     * providerCommitMany
     *
     * @param { Array<ArgumentTypes.Commit> } commits,
     */
    providerCommitMany(commits, __options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "providerCommitMany", [commits], __options);
    }
    /**
     * dappOperatorIsHumanUser
     *
     * @param { ArgumentTypes.AccountId } userAccount,
     * @param { (number | string | BN) } threshold,
     */
    dappOperatorIsHumanUser(userAccount, threshold, __options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "dappOperatorIsHumanUser", [userAccount, threshold], __options);
    }
    /**
     * dappOperatorLastCorrectCaptcha
     *
     * @param { ArgumentTypes.AccountId } userAccount,
     */
    dappOperatorLastCorrectCaptcha(userAccount, __options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "dappOperatorLastCorrectCaptcha", [userAccount], __options);
    }
    /**
     * getCaptchaData
     *
     * @param { ArgumentTypes.Hash } datasetId,
     */
    getCaptchaData(datasetId, __options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getCaptchaData", [datasetId], __options);
    }
    /**
     * getUser
     *
     * @param { ArgumentTypes.AccountId } userAccount,
     */
    getUser(userAccount, __options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getUser", [userAccount], __options);
    }
    /**
     * getCommit
     *
     * @param { ArgumentTypes.Hash } commitId,
     */
    getCommit(commitId, __options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getCommit", [commitId], __options);
    }
    /**
     * listProvidersByAccounts
     *
     * @param { Array<ArgumentTypes.AccountId> } providerAccounts,
     */
    listProvidersByAccounts(providerAccounts, __options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "listProvidersByAccounts", [providerAccounts], __options);
    }
    /**
     * listProvidersByStatus
     *
     * @param { Array<ArgumentTypes.GovernanceStatus> } statuses,
     */
    listProvidersByStatus(statuses, __options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "listProvidersByStatus", [statuses], __options);
    }
    /**
     * getRandomActiveProvider
     *
     * @param { ArgumentTypes.AccountId } userAccount,
     * @param { ArgumentTypes.AccountId } dappContract,
     */
    getRandomActiveProvider(userAccount, dappContract, __options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getRandomActiveProvider", [userAccount, dappContract], __options);
    }
    /**
     * getAllProviderAccounts
     *
     */
    getAllProviderAccounts(__options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getAllProviderAccounts", [], __options);
    }
    /**
     * getRandomNumber
     *
     * @param { (string | number | BN) } len,
     * @param { ArgumentTypes.AccountId } userAccount,
     * @param { ArgumentTypes.AccountId } dappContract,
     */
    getRandomNumber(len, userAccount, dappContract, __options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "getRandomNumber", [len, userAccount, dappContract], __options);
    }
    /**
     * terminate
     *
     */
    terminate(__options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "terminate", [], __options);
    }
    /**
     * withdraw
     *
     * @param { (string | number | BN) } amount,
     */
    withdraw(amount, __options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "withdraw", [amount], __options);
    }
    /**
     * setCodeHash
     *
     * @param { Array<(number | string | BN)> } codeHash,
     */
    setCodeHash(codeHash, __options) {
      return dist.buildSubmittableExtrinsic(this.__apiPromise, this.__nativeContract, "setCodeHash", [codeHash], __options);
    }
  };
  class EventsClass {
    constructor(nativeContract, api) {
      this.__nativeContract = nativeContract;
      this.__api = api;
    }
    __subscribeOnEvent(callback, filter2 = () => true) {
      return this.__api.query.system.events((events2) => {
        events2.forEach((record) => {
          const { event } = record;
          if (event.method == "ContractEmitted") {
            const [address, data2] = record.event.data;
            if (address.toString() === this.__nativeContract.address.toString()) {
              const { args, event: event2 } = this.__nativeContract.abi.decodeEvent(data2);
              if (filter2(event2.identifier.toString()))
                callback(args, event2);
            }
          }
        });
      });
    }
  }
  function getTypeDescription(id, types2) {
    return types2[id];
  }
  function getEventTypeDescription(name, types2) {
    return types2[name];
  }
  function decodeEvents(events2, contract, types2) {
    return events2.filter((record) => {
      const { event } = record;
      const [address, data2] = record.event.data;
      return event.method == "ContractEmitted" && address.toString() === contract.address.toString();
    }).map((record) => {
      const [address, data2] = record.event.data;
      const { args, event } = contract.abi.decodeEvent(data2);
      const _event = {};
      for (let i2 = 0; i2 < args.length; i2++) {
        _event[event.args[i2].name] = args[i2].toJSON();
      }
      dist.handleEventReturn(_event, getEventTypeDescription(event.identifier.toString(), types2));
      return {
        name: event.identifier.toString(),
        args: _event
      };
    });
  }
  const DATA_TYPE_DESCRIPTIONS = {
    "0": {
      name: "ReturnNumber",
      isResult: false,
      isPrimitive: false,
      isConvertable: true
    },
    "1": {
      name: "number",
      isResult: false,
      isPrimitive: true,
      isConvertable: false
    },
    "2": {
      name: "Array",
      body: {
        "0": {
          name: "number",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        }
      },
      isResult: false,
      isPrimitive: false,
      isConvertable: false
    },
    "3": {
      name: "number",
      isResult: false,
      isPrimitive: true,
      isConvertable: false
    },
    "4": {
      name: "Hash",
      body: "string | number[]",
      isResult: false,
      isPrimitive: true,
      isConvertable: false
    },
    "5": {
      name: "Array",
      body: {
        "0": {
          name: "number",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        }
      },
      isResult: false,
      isPrimitive: false,
      isConvertable: false
    },
    "7": {
      name: "AccountId",
      body: "string | number[]",
      isResult: false,
      isPrimitive: true,
      isConvertable: false
    },
    "8": {
      name: "Array",
      body: {
        "0": {
          name: "AccountId",
          body: "string | number[]",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        }
      },
      isResult: false,
      isPrimitive: false,
      isConvertable: false
    },
    "9": {
      name: "Array",
      body: {
        "0": {
          name: "Hash",
          body: "string | number[]",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        }
      },
      isResult: false,
      isPrimitive: false,
      isConvertable: false
    },
    "10": {
      name: "Result<null, LangError",
      body: {
        ok: {
          name: "null",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        },
        err: {
          name: "LangError",
          body: {
            CouldNotReadInput: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "11": {
      name: "null",
      isResult: false,
      isPrimitive: true,
      isConvertable: false
    },
    "12": {
      name: "LangError",
      body: {
        CouldNotReadInput: null
      },
      isResult: false,
      isPrimitive: false,
      isConvertable: false
    },
    "13": {
      name: "Result<AccountId, LangError",
      body: {
        ok: {
          name: "AccountId",
          body: "string | number[]",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        },
        err: {
          name: "LangError",
          body: {
            CouldNotReadInput: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "14": {
      name: "Result<Array, LangError",
      body: {
        ok: {
          name: "Array",
          body: {
            "0": {
              name: "Payee",
              body: {
                Provider: null,
                Dapp: null
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            }
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        },
        err: {
          name: "LangError",
          body: {
            CouldNotReadInput: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "15": {
      name: "Array",
      body: {
        "0": {
          name: "Payee",
          body: {
            Provider: null,
            Dapp: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: false,
      isPrimitive: false,
      isConvertable: false
    },
    "16": {
      name: "Payee",
      body: {
        Provider: null,
        Dapp: null
      },
      isResult: false,
      isPrimitive: false,
      isConvertable: false
    },
    "17": {
      name: "Result<Array, LangError",
      body: {
        ok: {
          name: "Array",
          body: {
            "0": {
              name: "DappPayee",
              body: {
                Provider: null,
                Dapp: null,
                Any: null
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            }
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        },
        err: {
          name: "LangError",
          body: {
            CouldNotReadInput: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "18": {
      name: "Array",
      body: {
        "0": {
          name: "DappPayee",
          body: {
            Provider: null,
            Dapp: null,
            Any: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: false,
      isPrimitive: false,
      isConvertable: false
    },
    "19": {
      name: "DappPayee",
      body: {
        Provider: null,
        Dapp: null,
        Any: null
      },
      isResult: false,
      isPrimitive: false,
      isConvertable: false
    },
    "20": {
      name: "Result<Array, LangError",
      body: {
        ok: {
          name: "Array",
          body: {
            "0": {
              name: "GovernanceStatus",
              body: {
                Active: null,
                Inactive: null
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            }
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        },
        err: {
          name: "LangError",
          body: {
            CouldNotReadInput: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "21": {
      name: "Array",
      body: {
        "0": {
          name: "GovernanceStatus",
          body: {
            Active: null,
            Inactive: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: false,
      isPrimitive: false,
      isConvertable: false
    },
    "22": {
      name: "GovernanceStatus",
      body: {
        Active: null,
        Inactive: null
      },
      isResult: false,
      isPrimitive: false,
      isConvertable: false
    },
    "23": {
      name: "Result<ReturnNumber, LangError",
      body: {
        ok: {
          name: "ReturnNumber",
          isResult: false,
          isPrimitive: false,
          isConvertable: true
        },
        err: {
          name: "LangError",
          body: {
            CouldNotReadInput: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "24": {
      name: "Result<number, LangError",
      body: {
        ok: {
          name: "number",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        },
        err: {
          name: "LangError",
          body: {
            CouldNotReadInput: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "25": {
      name: "Result<number, LangError",
      body: {
        ok: {
          name: "number",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        },
        err: {
          name: "LangError",
          body: {
            CouldNotReadInput: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "26": {
      name: "number",
      isResult: false,
      isPrimitive: true,
      isConvertable: false
    },
    "27": {
      name: "Result<Result<null, Error, LangError",
      body: {
        ok: {
          name: "Result<null, Error",
          body: {
            ok: {
              name: "null",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            err: {
              name: "Error",
              body: {
                NotAdmin: null,
                NotOwner: null,
                ContractTransferFailed: null,
                ProviderAccountExists: null,
                ProviderExists: null,
                ProviderAccountDoesNotExist: null,
                ProviderDoesNotExist: null,
                ProviderInsufficientFunds: null,
                ProviderInactive: null,
                ProviderUrlUsed: null,
                DappExists: null,
                DappDoesNotExist: null,
                DappInactive: null,
                DappInsufficientFunds: null,
                CaptchaDataDoesNotExist: null,
                CommitDoesNotExist: null,
                DappUserDoesNotExist: null,
                NoActiveProviders: null,
                DatasetIdSolutionsSame: null,
                CodeNotFound: null,
                Unknown: null,
                InvalidContract: null,
                InvalidPayee: null,
                InvalidCaptchaStatus: null,
                NoCorrectCaptcha: null,
                NotEnoughActiveProviders: null,
                ProviderFeeTooHigh: null,
                CommitAlreadyExists: null
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            }
          },
          isResult: true,
          isPrimitive: false,
          isConvertable: false
        },
        err: {
          name: "LangError",
          body: {
            CouldNotReadInput: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "28": {
      name: "Result<null, Error",
      body: {
        ok: {
          name: "null",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        },
        err: {
          name: "Error",
          body: {
            NotAdmin: null,
            NotOwner: null,
            ContractTransferFailed: null,
            ProviderAccountExists: null,
            ProviderExists: null,
            ProviderAccountDoesNotExist: null,
            ProviderDoesNotExist: null,
            ProviderInsufficientFunds: null,
            ProviderInactive: null,
            ProviderUrlUsed: null,
            DappExists: null,
            DappDoesNotExist: null,
            DappInactive: null,
            DappInsufficientFunds: null,
            CaptchaDataDoesNotExist: null,
            CommitDoesNotExist: null,
            DappUserDoesNotExist: null,
            NoActiveProviders: null,
            DatasetIdSolutionsSame: null,
            CodeNotFound: null,
            Unknown: null,
            InvalidContract: null,
            InvalidPayee: null,
            InvalidCaptchaStatus: null,
            NoCorrectCaptcha: null,
            NotEnoughActiveProviders: null,
            ProviderFeeTooHigh: null,
            CommitAlreadyExists: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "29": {
      name: "Error",
      body: {
        NotAdmin: null,
        NotOwner: null,
        ContractTransferFailed: null,
        ProviderAccountExists: null,
        ProviderExists: null,
        ProviderAccountDoesNotExist: null,
        ProviderDoesNotExist: null,
        ProviderInsufficientFunds: null,
        ProviderInactive: null,
        ProviderUrlUsed: null,
        DappExists: null,
        DappDoesNotExist: null,
        DappInactive: null,
        DappInsufficientFunds: null,
        CaptchaDataDoesNotExist: null,
        CommitDoesNotExist: null,
        DappUserDoesNotExist: null,
        NoActiveProviders: null,
        DatasetIdSolutionsSame: null,
        CodeNotFound: null,
        Unknown: null,
        InvalidContract: null,
        InvalidPayee: null,
        InvalidCaptchaStatus: null,
        NoCorrectCaptcha: null,
        NotEnoughActiveProviders: null,
        ProviderFeeTooHigh: null,
        CommitAlreadyExists: null
      },
      isResult: false,
      isPrimitive: false,
      isConvertable: false
    },
    "30": {
      name: "Result<Result<Provider, Error, LangError",
      body: {
        ok: {
          name: "Result<Provider, Error",
          body: {
            ok: {
              name: "Provider",
              body: {
                status: {
                  name: "GovernanceStatus",
                  body: {
                    Active: null,
                    Inactive: null
                  },
                  isResult: false,
                  isPrimitive: false,
                  isConvertable: false
                },
                balance: {
                  name: "ReturnNumber",
                  isResult: false,
                  isPrimitive: false,
                  isConvertable: true
                },
                fee: {
                  name: "number",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                },
                payee: {
                  name: "Payee",
                  body: {
                    Provider: null,
                    Dapp: null
                  },
                  isResult: false,
                  isPrimitive: false,
                  isConvertable: false
                },
                url: {
                  name: "Array",
                  body: {
                    "0": {
                      name: "number",
                      isResult: false,
                      isPrimitive: true,
                      isConvertable: false
                    }
                  },
                  isResult: false,
                  isPrimitive: false,
                  isConvertable: false
                },
                datasetId: {
                  name: "Hash",
                  body: "string | number[]",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                },
                datasetIdContent: {
                  name: "Hash",
                  body: "string | number[]",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                }
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            },
            err: {
              name: "Error",
              body: {
                NotAdmin: null,
                NotOwner: null,
                ContractTransferFailed: null,
                ProviderAccountExists: null,
                ProviderExists: null,
                ProviderAccountDoesNotExist: null,
                ProviderDoesNotExist: null,
                ProviderInsufficientFunds: null,
                ProviderInactive: null,
                ProviderUrlUsed: null,
                DappExists: null,
                DappDoesNotExist: null,
                DappInactive: null,
                DappInsufficientFunds: null,
                CaptchaDataDoesNotExist: null,
                CommitDoesNotExist: null,
                DappUserDoesNotExist: null,
                NoActiveProviders: null,
                DatasetIdSolutionsSame: null,
                CodeNotFound: null,
                Unknown: null,
                InvalidContract: null,
                InvalidPayee: null,
                InvalidCaptchaStatus: null,
                NoCorrectCaptcha: null,
                NotEnoughActiveProviders: null,
                ProviderFeeTooHigh: null,
                CommitAlreadyExists: null
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            }
          },
          isResult: true,
          isPrimitive: false,
          isConvertable: false
        },
        err: {
          name: "LangError",
          body: {
            CouldNotReadInput: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "31": {
      name: "Result<Provider, Error",
      body: {
        ok: {
          name: "Provider",
          body: {
            status: {
              name: "GovernanceStatus",
              body: {
                Active: null,
                Inactive: null
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            },
            balance: {
              name: "ReturnNumber",
              isResult: false,
              isPrimitive: false,
              isConvertable: true
            },
            fee: {
              name: "number",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            payee: {
              name: "Payee",
              body: {
                Provider: null,
                Dapp: null
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            },
            url: {
              name: "Array",
              body: {
                "0": {
                  name: "number",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                }
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            },
            datasetId: {
              name: "Hash",
              body: "string | number[]",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            datasetIdContent: {
              name: "Hash",
              body: "string | number[]",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            }
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        },
        err: {
          name: "Error",
          body: {
            NotAdmin: null,
            NotOwner: null,
            ContractTransferFailed: null,
            ProviderAccountExists: null,
            ProviderExists: null,
            ProviderAccountDoesNotExist: null,
            ProviderDoesNotExist: null,
            ProviderInsufficientFunds: null,
            ProviderInactive: null,
            ProviderUrlUsed: null,
            DappExists: null,
            DappDoesNotExist: null,
            DappInactive: null,
            DappInsufficientFunds: null,
            CaptchaDataDoesNotExist: null,
            CommitDoesNotExist: null,
            DappUserDoesNotExist: null,
            NoActiveProviders: null,
            DatasetIdSolutionsSame: null,
            CodeNotFound: null,
            Unknown: null,
            InvalidContract: null,
            InvalidPayee: null,
            InvalidCaptchaStatus: null,
            NoCorrectCaptcha: null,
            NotEnoughActiveProviders: null,
            ProviderFeeTooHigh: null,
            CommitAlreadyExists: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "32": {
      name: "Provider",
      body: {
        status: {
          name: "GovernanceStatus",
          body: {
            Active: null,
            Inactive: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        },
        balance: {
          name: "ReturnNumber",
          isResult: false,
          isPrimitive: false,
          isConvertable: true
        },
        fee: {
          name: "number",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        },
        payee: {
          name: "Payee",
          body: {
            Provider: null,
            Dapp: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        },
        url: {
          name: "Array",
          body: {
            "0": {
              name: "number",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            }
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        },
        datasetId: {
          name: "Hash",
          body: "string | number[]",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        },
        datasetIdContent: {
          name: "Hash",
          body: "string | number[]",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        }
      },
      isResult: false,
      isPrimitive: false,
      isConvertable: false
    },
    "33": {
      name: "Result<Result<Dapp, Error, LangError",
      body: {
        ok: {
          name: "Result<Dapp, Error",
          body: {
            ok: {
              name: "Dapp",
              body: {
                status: {
                  name: "GovernanceStatus",
                  body: {
                    Active: null,
                    Inactive: null
                  },
                  isResult: false,
                  isPrimitive: false,
                  isConvertable: false
                },
                balance: {
                  name: "ReturnNumber",
                  isResult: false,
                  isPrimitive: false,
                  isConvertable: true
                },
                owner: {
                  name: "AccountId",
                  body: "string | number[]",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                },
                payee: {
                  name: "DappPayee",
                  body: {
                    Provider: null,
                    Dapp: null,
                    Any: null
                  },
                  isResult: false,
                  isPrimitive: false,
                  isConvertable: false
                }
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            },
            err: {
              name: "Error",
              body: {
                NotAdmin: null,
                NotOwner: null,
                ContractTransferFailed: null,
                ProviderAccountExists: null,
                ProviderExists: null,
                ProviderAccountDoesNotExist: null,
                ProviderDoesNotExist: null,
                ProviderInsufficientFunds: null,
                ProviderInactive: null,
                ProviderUrlUsed: null,
                DappExists: null,
                DappDoesNotExist: null,
                DappInactive: null,
                DappInsufficientFunds: null,
                CaptchaDataDoesNotExist: null,
                CommitDoesNotExist: null,
                DappUserDoesNotExist: null,
                NoActiveProviders: null,
                DatasetIdSolutionsSame: null,
                CodeNotFound: null,
                Unknown: null,
                InvalidContract: null,
                InvalidPayee: null,
                InvalidCaptchaStatus: null,
                NoCorrectCaptcha: null,
                NotEnoughActiveProviders: null,
                ProviderFeeTooHigh: null,
                CommitAlreadyExists: null
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            }
          },
          isResult: true,
          isPrimitive: false,
          isConvertable: false
        },
        err: {
          name: "LangError",
          body: {
            CouldNotReadInput: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "34": {
      name: "Result<Dapp, Error",
      body: {
        ok: {
          name: "Dapp",
          body: {
            status: {
              name: "GovernanceStatus",
              body: {
                Active: null,
                Inactive: null
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            },
            balance: {
              name: "ReturnNumber",
              isResult: false,
              isPrimitive: false,
              isConvertable: true
            },
            owner: {
              name: "AccountId",
              body: "string | number[]",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            payee: {
              name: "DappPayee",
              body: {
                Provider: null,
                Dapp: null,
                Any: null
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            }
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        },
        err: {
          name: "Error",
          body: {
            NotAdmin: null,
            NotOwner: null,
            ContractTransferFailed: null,
            ProviderAccountExists: null,
            ProviderExists: null,
            ProviderAccountDoesNotExist: null,
            ProviderDoesNotExist: null,
            ProviderInsufficientFunds: null,
            ProviderInactive: null,
            ProviderUrlUsed: null,
            DappExists: null,
            DappDoesNotExist: null,
            DappInactive: null,
            DappInsufficientFunds: null,
            CaptchaDataDoesNotExist: null,
            CommitDoesNotExist: null,
            DappUserDoesNotExist: null,
            NoActiveProviders: null,
            DatasetIdSolutionsSame: null,
            CodeNotFound: null,
            Unknown: null,
            InvalidContract: null,
            InvalidPayee: null,
            InvalidCaptchaStatus: null,
            NoCorrectCaptcha: null,
            NotEnoughActiveProviders: null,
            ProviderFeeTooHigh: null,
            CommitAlreadyExists: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "35": {
      name: "Dapp",
      body: {
        status: {
          name: "GovernanceStatus",
          body: {
            Active: null,
            Inactive: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        },
        balance: {
          name: "ReturnNumber",
          isResult: false,
          isPrimitive: false,
          isConvertable: true
        },
        owner: {
          name: "AccountId",
          body: "string | number[]",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        },
        payee: {
          name: "DappPayee",
          body: {
            Provider: null,
            Dapp: null,
            Any: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: false,
      isPrimitive: false,
      isConvertable: false
    },
    "36": {
      name: "Result<Result<UserHistorySummary, Error, LangError",
      body: {
        ok: {
          name: "Result<UserHistorySummary, Error",
          body: {
            ok: {
              name: "UserHistorySummary",
              body: {
                correct: {
                  name: "number",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                },
                incorrect: {
                  name: "number",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                },
                score: {
                  name: "number",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                }
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            },
            err: {
              name: "Error",
              body: {
                NotAdmin: null,
                NotOwner: null,
                ContractTransferFailed: null,
                ProviderAccountExists: null,
                ProviderExists: null,
                ProviderAccountDoesNotExist: null,
                ProviderDoesNotExist: null,
                ProviderInsufficientFunds: null,
                ProviderInactive: null,
                ProviderUrlUsed: null,
                DappExists: null,
                DappDoesNotExist: null,
                DappInactive: null,
                DappInsufficientFunds: null,
                CaptchaDataDoesNotExist: null,
                CommitDoesNotExist: null,
                DappUserDoesNotExist: null,
                NoActiveProviders: null,
                DatasetIdSolutionsSame: null,
                CodeNotFound: null,
                Unknown: null,
                InvalidContract: null,
                InvalidPayee: null,
                InvalidCaptchaStatus: null,
                NoCorrectCaptcha: null,
                NotEnoughActiveProviders: null,
                ProviderFeeTooHigh: null,
                CommitAlreadyExists: null
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            }
          },
          isResult: true,
          isPrimitive: false,
          isConvertable: false
        },
        err: {
          name: "LangError",
          body: {
            CouldNotReadInput: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "37": {
      name: "Result<UserHistorySummary, Error",
      body: {
        ok: {
          name: "UserHistorySummary",
          body: {
            correct: {
              name: "number",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            incorrect: {
              name: "number",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            score: {
              name: "number",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            }
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        },
        err: {
          name: "Error",
          body: {
            NotAdmin: null,
            NotOwner: null,
            ContractTransferFailed: null,
            ProviderAccountExists: null,
            ProviderExists: null,
            ProviderAccountDoesNotExist: null,
            ProviderDoesNotExist: null,
            ProviderInsufficientFunds: null,
            ProviderInactive: null,
            ProviderUrlUsed: null,
            DappExists: null,
            DappDoesNotExist: null,
            DappInactive: null,
            DappInsufficientFunds: null,
            CaptchaDataDoesNotExist: null,
            CommitDoesNotExist: null,
            DappUserDoesNotExist: null,
            NoActiveProviders: null,
            DatasetIdSolutionsSame: null,
            CodeNotFound: null,
            Unknown: null,
            InvalidContract: null,
            InvalidPayee: null,
            InvalidCaptchaStatus: null,
            NoCorrectCaptcha: null,
            NotEnoughActiveProviders: null,
            ProviderFeeTooHigh: null,
            CommitAlreadyExists: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "38": {
      name: "UserHistorySummary",
      body: {
        correct: {
          name: "number",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        },
        incorrect: {
          name: "number",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        },
        score: {
          name: "number",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        }
      },
      isResult: false,
      isPrimitive: false,
      isConvertable: false
    },
    "39": {
      name: "Commit",
      body: {
        id: {
          name: "Hash",
          body: "string | number[]",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        },
        userAccount: {
          name: "AccountId",
          body: "string | number[]",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        },
        datasetId: {
          name: "Hash",
          body: "string | number[]",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        },
        status: {
          name: "CaptchaStatus",
          body: {
            Pending: null,
            Approved: null,
            Disapproved: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        },
        dappContract: {
          name: "AccountId",
          body: "string | number[]",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        },
        providerAccount: {
          name: "AccountId",
          body: "string | number[]",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        },
        requestedAt: {
          name: "number",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        },
        completedAt: {
          name: "number",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        },
        userSignaturePart1: {
          name: "Array",
          body: {
            "0": {
              name: "number",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            }
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        },
        userSignaturePart2: {
          name: "Array",
          body: {
            "0": {
              name: "number",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            }
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: false,
      isPrimitive: false,
      isConvertable: false
    },
    "40": {
      name: "CaptchaStatus",
      body: {
        Pending: null,
        Approved: null,
        Disapproved: null
      },
      isResult: false,
      isPrimitive: false,
      isConvertable: false
    },
    "41": {
      name: "Array",
      body: {
        "0": {
          name: "Commit",
          body: {
            id: {
              name: "Hash",
              body: "string | number[]",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            userAccount: {
              name: "AccountId",
              body: "string | number[]",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            datasetId: {
              name: "Hash",
              body: "string | number[]",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            status: {
              name: "CaptchaStatus",
              body: {
                Pending: null,
                Approved: null,
                Disapproved: null
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            },
            dappContract: {
              name: "AccountId",
              body: "string | number[]",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            providerAccount: {
              name: "AccountId",
              body: "string | number[]",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            requestedAt: {
              name: "number",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            completedAt: {
              name: "number",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            userSignaturePart1: {
              name: "Array",
              body: {
                "0": {
                  name: "number",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                }
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            },
            userSignaturePart2: {
              name: "Array",
              body: {
                "0": {
                  name: "number",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                }
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            }
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: false,
      isPrimitive: false,
      isConvertable: false
    },
    "42": {
      name: "Result<Result<boolean, Error, LangError",
      body: {
        ok: {
          name: "Result<boolean, Error",
          body: {
            ok: {
              name: "boolean",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            err: {
              name: "Error",
              body: {
                NotAdmin: null,
                NotOwner: null,
                ContractTransferFailed: null,
                ProviderAccountExists: null,
                ProviderExists: null,
                ProviderAccountDoesNotExist: null,
                ProviderDoesNotExist: null,
                ProviderInsufficientFunds: null,
                ProviderInactive: null,
                ProviderUrlUsed: null,
                DappExists: null,
                DappDoesNotExist: null,
                DappInactive: null,
                DappInsufficientFunds: null,
                CaptchaDataDoesNotExist: null,
                CommitDoesNotExist: null,
                DappUserDoesNotExist: null,
                NoActiveProviders: null,
                DatasetIdSolutionsSame: null,
                CodeNotFound: null,
                Unknown: null,
                InvalidContract: null,
                InvalidPayee: null,
                InvalidCaptchaStatus: null,
                NoCorrectCaptcha: null,
                NotEnoughActiveProviders: null,
                ProviderFeeTooHigh: null,
                CommitAlreadyExists: null
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            }
          },
          isResult: true,
          isPrimitive: false,
          isConvertable: false
        },
        err: {
          name: "LangError",
          body: {
            CouldNotReadInput: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "43": {
      name: "Result<boolean, Error",
      body: {
        ok: {
          name: "boolean",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        },
        err: {
          name: "Error",
          body: {
            NotAdmin: null,
            NotOwner: null,
            ContractTransferFailed: null,
            ProviderAccountExists: null,
            ProviderExists: null,
            ProviderAccountDoesNotExist: null,
            ProviderDoesNotExist: null,
            ProviderInsufficientFunds: null,
            ProviderInactive: null,
            ProviderUrlUsed: null,
            DappExists: null,
            DappDoesNotExist: null,
            DappInactive: null,
            DappInsufficientFunds: null,
            CaptchaDataDoesNotExist: null,
            CommitDoesNotExist: null,
            DappUserDoesNotExist: null,
            NoActiveProviders: null,
            DatasetIdSolutionsSame: null,
            CodeNotFound: null,
            Unknown: null,
            InvalidContract: null,
            InvalidPayee: null,
            InvalidCaptchaStatus: null,
            NoCorrectCaptcha: null,
            NotEnoughActiveProviders: null,
            ProviderFeeTooHigh: null,
            CommitAlreadyExists: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "44": {
      name: "boolean",
      isResult: false,
      isPrimitive: true,
      isConvertable: false
    },
    "45": {
      name: "Result<Result<LastCorrectCaptcha, Error, LangError",
      body: {
        ok: {
          name: "Result<LastCorrectCaptcha, Error",
          body: {
            ok: {
              name: "LastCorrectCaptcha",
              body: {
                before: {
                  name: "number",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                },
                dappContract: {
                  name: "AccountId",
                  body: "string | number[]",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                }
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            },
            err: {
              name: "Error",
              body: {
                NotAdmin: null,
                NotOwner: null,
                ContractTransferFailed: null,
                ProviderAccountExists: null,
                ProviderExists: null,
                ProviderAccountDoesNotExist: null,
                ProviderDoesNotExist: null,
                ProviderInsufficientFunds: null,
                ProviderInactive: null,
                ProviderUrlUsed: null,
                DappExists: null,
                DappDoesNotExist: null,
                DappInactive: null,
                DappInsufficientFunds: null,
                CaptchaDataDoesNotExist: null,
                CommitDoesNotExist: null,
                DappUserDoesNotExist: null,
                NoActiveProviders: null,
                DatasetIdSolutionsSame: null,
                CodeNotFound: null,
                Unknown: null,
                InvalidContract: null,
                InvalidPayee: null,
                InvalidCaptchaStatus: null,
                NoCorrectCaptcha: null,
                NotEnoughActiveProviders: null,
                ProviderFeeTooHigh: null,
                CommitAlreadyExists: null
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            }
          },
          isResult: true,
          isPrimitive: false,
          isConvertable: false
        },
        err: {
          name: "LangError",
          body: {
            CouldNotReadInput: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "46": {
      name: "Result<LastCorrectCaptcha, Error",
      body: {
        ok: {
          name: "LastCorrectCaptcha",
          body: {
            before: {
              name: "number",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            dappContract: {
              name: "AccountId",
              body: "string | number[]",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            }
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        },
        err: {
          name: "Error",
          body: {
            NotAdmin: null,
            NotOwner: null,
            ContractTransferFailed: null,
            ProviderAccountExists: null,
            ProviderExists: null,
            ProviderAccountDoesNotExist: null,
            ProviderDoesNotExist: null,
            ProviderInsufficientFunds: null,
            ProviderInactive: null,
            ProviderUrlUsed: null,
            DappExists: null,
            DappDoesNotExist: null,
            DappInactive: null,
            DappInsufficientFunds: null,
            CaptchaDataDoesNotExist: null,
            CommitDoesNotExist: null,
            DappUserDoesNotExist: null,
            NoActiveProviders: null,
            DatasetIdSolutionsSame: null,
            CodeNotFound: null,
            Unknown: null,
            InvalidContract: null,
            InvalidPayee: null,
            InvalidCaptchaStatus: null,
            NoCorrectCaptcha: null,
            NotEnoughActiveProviders: null,
            ProviderFeeTooHigh: null,
            CommitAlreadyExists: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "47": {
      name: "LastCorrectCaptcha",
      body: {
        before: {
          name: "number",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        },
        dappContract: {
          name: "AccountId",
          body: "string | number[]",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        }
      },
      isResult: false,
      isPrimitive: false,
      isConvertable: false
    },
    "48": {
      name: "Result<Result<CaptchaData, Error, LangError",
      body: {
        ok: {
          name: "Result<CaptchaData, Error",
          body: {
            ok: {
              name: "CaptchaData",
              body: {
                providerAccount: {
                  name: "AccountId",
                  body: "string | number[]",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                },
                datasetId: {
                  name: "Hash",
                  body: "string | number[]",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                },
                datasetIdContent: {
                  name: "Hash",
                  body: "string | number[]",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                }
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            },
            err: {
              name: "Error",
              body: {
                NotAdmin: null,
                NotOwner: null,
                ContractTransferFailed: null,
                ProviderAccountExists: null,
                ProviderExists: null,
                ProviderAccountDoesNotExist: null,
                ProviderDoesNotExist: null,
                ProviderInsufficientFunds: null,
                ProviderInactive: null,
                ProviderUrlUsed: null,
                DappExists: null,
                DappDoesNotExist: null,
                DappInactive: null,
                DappInsufficientFunds: null,
                CaptchaDataDoesNotExist: null,
                CommitDoesNotExist: null,
                DappUserDoesNotExist: null,
                NoActiveProviders: null,
                DatasetIdSolutionsSame: null,
                CodeNotFound: null,
                Unknown: null,
                InvalidContract: null,
                InvalidPayee: null,
                InvalidCaptchaStatus: null,
                NoCorrectCaptcha: null,
                NotEnoughActiveProviders: null,
                ProviderFeeTooHigh: null,
                CommitAlreadyExists: null
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            }
          },
          isResult: true,
          isPrimitive: false,
          isConvertable: false
        },
        err: {
          name: "LangError",
          body: {
            CouldNotReadInput: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "49": {
      name: "Result<CaptchaData, Error",
      body: {
        ok: {
          name: "CaptchaData",
          body: {
            providerAccount: {
              name: "AccountId",
              body: "string | number[]",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            datasetId: {
              name: "Hash",
              body: "string | number[]",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            datasetIdContent: {
              name: "Hash",
              body: "string | number[]",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            }
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        },
        err: {
          name: "Error",
          body: {
            NotAdmin: null,
            NotOwner: null,
            ContractTransferFailed: null,
            ProviderAccountExists: null,
            ProviderExists: null,
            ProviderAccountDoesNotExist: null,
            ProviderDoesNotExist: null,
            ProviderInsufficientFunds: null,
            ProviderInactive: null,
            ProviderUrlUsed: null,
            DappExists: null,
            DappDoesNotExist: null,
            DappInactive: null,
            DappInsufficientFunds: null,
            CaptchaDataDoesNotExist: null,
            CommitDoesNotExist: null,
            DappUserDoesNotExist: null,
            NoActiveProviders: null,
            DatasetIdSolutionsSame: null,
            CodeNotFound: null,
            Unknown: null,
            InvalidContract: null,
            InvalidPayee: null,
            InvalidCaptchaStatus: null,
            NoCorrectCaptcha: null,
            NotEnoughActiveProviders: null,
            ProviderFeeTooHigh: null,
            CommitAlreadyExists: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "50": {
      name: "CaptchaData",
      body: {
        providerAccount: {
          name: "AccountId",
          body: "string | number[]",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        },
        datasetId: {
          name: "Hash",
          body: "string | number[]",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        },
        datasetIdContent: {
          name: "Hash",
          body: "string | number[]",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        }
      },
      isResult: false,
      isPrimitive: false,
      isConvertable: false
    },
    "51": {
      name: "Result<Result<User, Error, LangError",
      body: {
        ok: {
          name: "Result<User, Error",
          body: {
            ok: {
              name: "User",
              body: {
                history: {
                  name: "Array",
                  body: {
                    "0": {
                      name: "Hash",
                      body: "string | number[]",
                      isResult: false,
                      isPrimitive: true,
                      isConvertable: false
                    }
                  },
                  isResult: false,
                  isPrimitive: false,
                  isConvertable: false
                }
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            },
            err: {
              name: "Error",
              body: {
                NotAdmin: null,
                NotOwner: null,
                ContractTransferFailed: null,
                ProviderAccountExists: null,
                ProviderExists: null,
                ProviderAccountDoesNotExist: null,
                ProviderDoesNotExist: null,
                ProviderInsufficientFunds: null,
                ProviderInactive: null,
                ProviderUrlUsed: null,
                DappExists: null,
                DappDoesNotExist: null,
                DappInactive: null,
                DappInsufficientFunds: null,
                CaptchaDataDoesNotExist: null,
                CommitDoesNotExist: null,
                DappUserDoesNotExist: null,
                NoActiveProviders: null,
                DatasetIdSolutionsSame: null,
                CodeNotFound: null,
                Unknown: null,
                InvalidContract: null,
                InvalidPayee: null,
                InvalidCaptchaStatus: null,
                NoCorrectCaptcha: null,
                NotEnoughActiveProviders: null,
                ProviderFeeTooHigh: null,
                CommitAlreadyExists: null
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            }
          },
          isResult: true,
          isPrimitive: false,
          isConvertable: false
        },
        err: {
          name: "LangError",
          body: {
            CouldNotReadInput: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "52": {
      name: "Result<User, Error",
      body: {
        ok: {
          name: "User",
          body: {
            history: {
              name: "Array",
              body: {
                "0": {
                  name: "Hash",
                  body: "string | number[]",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                }
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            }
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        },
        err: {
          name: "Error",
          body: {
            NotAdmin: null,
            NotOwner: null,
            ContractTransferFailed: null,
            ProviderAccountExists: null,
            ProviderExists: null,
            ProviderAccountDoesNotExist: null,
            ProviderDoesNotExist: null,
            ProviderInsufficientFunds: null,
            ProviderInactive: null,
            ProviderUrlUsed: null,
            DappExists: null,
            DappDoesNotExist: null,
            DappInactive: null,
            DappInsufficientFunds: null,
            CaptchaDataDoesNotExist: null,
            CommitDoesNotExist: null,
            DappUserDoesNotExist: null,
            NoActiveProviders: null,
            DatasetIdSolutionsSame: null,
            CodeNotFound: null,
            Unknown: null,
            InvalidContract: null,
            InvalidPayee: null,
            InvalidCaptchaStatus: null,
            NoCorrectCaptcha: null,
            NotEnoughActiveProviders: null,
            ProviderFeeTooHigh: null,
            CommitAlreadyExists: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "53": {
      name: "User",
      body: {
        history: {
          name: "Array",
          body: {
            "0": {
              name: "Hash",
              body: "string | number[]",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            }
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: false,
      isPrimitive: false,
      isConvertable: false
    },
    "54": {
      name: "Result<Result<Commit, Error, LangError",
      body: {
        ok: {
          name: "Result<Commit, Error",
          body: {
            ok: {
              name: "Commit",
              body: {
                id: {
                  name: "Hash",
                  body: "string | number[]",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                },
                userAccount: {
                  name: "AccountId",
                  body: "string | number[]",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                },
                datasetId: {
                  name: "Hash",
                  body: "string | number[]",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                },
                status: {
                  name: "CaptchaStatus",
                  body: {
                    Pending: null,
                    Approved: null,
                    Disapproved: null
                  },
                  isResult: false,
                  isPrimitive: false,
                  isConvertable: false
                },
                dappContract: {
                  name: "AccountId",
                  body: "string | number[]",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                },
                providerAccount: {
                  name: "AccountId",
                  body: "string | number[]",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                },
                requestedAt: {
                  name: "number",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                },
                completedAt: {
                  name: "number",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                },
                userSignaturePart1: {
                  name: "Array",
                  body: {
                    "0": {
                      name: "number",
                      isResult: false,
                      isPrimitive: true,
                      isConvertable: false
                    }
                  },
                  isResult: false,
                  isPrimitive: false,
                  isConvertable: false
                },
                userSignaturePart2: {
                  name: "Array",
                  body: {
                    "0": {
                      name: "number",
                      isResult: false,
                      isPrimitive: true,
                      isConvertable: false
                    }
                  },
                  isResult: false,
                  isPrimitive: false,
                  isConvertable: false
                }
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            },
            err: {
              name: "Error",
              body: {
                NotAdmin: null,
                NotOwner: null,
                ContractTransferFailed: null,
                ProviderAccountExists: null,
                ProviderExists: null,
                ProviderAccountDoesNotExist: null,
                ProviderDoesNotExist: null,
                ProviderInsufficientFunds: null,
                ProviderInactive: null,
                ProviderUrlUsed: null,
                DappExists: null,
                DappDoesNotExist: null,
                DappInactive: null,
                DappInsufficientFunds: null,
                CaptchaDataDoesNotExist: null,
                CommitDoesNotExist: null,
                DappUserDoesNotExist: null,
                NoActiveProviders: null,
                DatasetIdSolutionsSame: null,
                CodeNotFound: null,
                Unknown: null,
                InvalidContract: null,
                InvalidPayee: null,
                InvalidCaptchaStatus: null,
                NoCorrectCaptcha: null,
                NotEnoughActiveProviders: null,
                ProviderFeeTooHigh: null,
                CommitAlreadyExists: null
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            }
          },
          isResult: true,
          isPrimitive: false,
          isConvertable: false
        },
        err: {
          name: "LangError",
          body: {
            CouldNotReadInput: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "55": {
      name: "Result<Commit, Error",
      body: {
        ok: {
          name: "Commit",
          body: {
            id: {
              name: "Hash",
              body: "string | number[]",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            userAccount: {
              name: "AccountId",
              body: "string | number[]",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            datasetId: {
              name: "Hash",
              body: "string | number[]",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            status: {
              name: "CaptchaStatus",
              body: {
                Pending: null,
                Approved: null,
                Disapproved: null
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            },
            dappContract: {
              name: "AccountId",
              body: "string | number[]",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            providerAccount: {
              name: "AccountId",
              body: "string | number[]",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            requestedAt: {
              name: "number",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            completedAt: {
              name: "number",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            userSignaturePart1: {
              name: "Array",
              body: {
                "0": {
                  name: "number",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                }
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            },
            userSignaturePart2: {
              name: "Array",
              body: {
                "0": {
                  name: "number",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                }
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            }
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        },
        err: {
          name: "Error",
          body: {
            NotAdmin: null,
            NotOwner: null,
            ContractTransferFailed: null,
            ProviderAccountExists: null,
            ProviderExists: null,
            ProviderAccountDoesNotExist: null,
            ProviderDoesNotExist: null,
            ProviderInsufficientFunds: null,
            ProviderInactive: null,
            ProviderUrlUsed: null,
            DappExists: null,
            DappDoesNotExist: null,
            DappInactive: null,
            DappInsufficientFunds: null,
            CaptchaDataDoesNotExist: null,
            CommitDoesNotExist: null,
            DappUserDoesNotExist: null,
            NoActiveProviders: null,
            DatasetIdSolutionsSame: null,
            CodeNotFound: null,
            Unknown: null,
            InvalidContract: null,
            InvalidPayee: null,
            InvalidCaptchaStatus: null,
            NoCorrectCaptcha: null,
            NotEnoughActiveProviders: null,
            ProviderFeeTooHigh: null,
            CommitAlreadyExists: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "56": {
      name: "Result<Result<Array, Error, LangError",
      body: {
        ok: {
          name: "Result<Array, Error",
          body: {
            ok: {
              name: "Array",
              body: {
                "0": {
                  name: "Provider",
                  body: {
                    status: {
                      name: "GovernanceStatus",
                      body: {
                        Active: null,
                        Inactive: null
                      },
                      isResult: false,
                      isPrimitive: false,
                      isConvertable: false
                    },
                    balance: {
                      name: "ReturnNumber",
                      isResult: false,
                      isPrimitive: false,
                      isConvertable: true
                    },
                    fee: {
                      name: "number",
                      isResult: false,
                      isPrimitive: true,
                      isConvertable: false
                    },
                    payee: {
                      name: "Payee",
                      body: {
                        Provider: null,
                        Dapp: null
                      },
                      isResult: false,
                      isPrimitive: false,
                      isConvertable: false
                    },
                    url: {
                      name: "Array",
                      body: {
                        "0": {
                          name: "number",
                          isResult: false,
                          isPrimitive: true,
                          isConvertable: false
                        }
                      },
                      isResult: false,
                      isPrimitive: false,
                      isConvertable: false
                    },
                    datasetId: {
                      name: "Hash",
                      body: "string | number[]",
                      isResult: false,
                      isPrimitive: true,
                      isConvertable: false
                    },
                    datasetIdContent: {
                      name: "Hash",
                      body: "string | number[]",
                      isResult: false,
                      isPrimitive: true,
                      isConvertable: false
                    }
                  },
                  isResult: false,
                  isPrimitive: false,
                  isConvertable: false
                }
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            },
            err: {
              name: "Error",
              body: {
                NotAdmin: null,
                NotOwner: null,
                ContractTransferFailed: null,
                ProviderAccountExists: null,
                ProviderExists: null,
                ProviderAccountDoesNotExist: null,
                ProviderDoesNotExist: null,
                ProviderInsufficientFunds: null,
                ProviderInactive: null,
                ProviderUrlUsed: null,
                DappExists: null,
                DappDoesNotExist: null,
                DappInactive: null,
                DappInsufficientFunds: null,
                CaptchaDataDoesNotExist: null,
                CommitDoesNotExist: null,
                DappUserDoesNotExist: null,
                NoActiveProviders: null,
                DatasetIdSolutionsSame: null,
                CodeNotFound: null,
                Unknown: null,
                InvalidContract: null,
                InvalidPayee: null,
                InvalidCaptchaStatus: null,
                NoCorrectCaptcha: null,
                NotEnoughActiveProviders: null,
                ProviderFeeTooHigh: null,
                CommitAlreadyExists: null
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            }
          },
          isResult: true,
          isPrimitive: false,
          isConvertable: false
        },
        err: {
          name: "LangError",
          body: {
            CouldNotReadInput: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "57": {
      name: "Result<Array, Error",
      body: {
        ok: {
          name: "Array",
          body: {
            "0": {
              name: "Provider",
              body: {
                status: {
                  name: "GovernanceStatus",
                  body: {
                    Active: null,
                    Inactive: null
                  },
                  isResult: false,
                  isPrimitive: false,
                  isConvertable: false
                },
                balance: {
                  name: "ReturnNumber",
                  isResult: false,
                  isPrimitive: false,
                  isConvertable: true
                },
                fee: {
                  name: "number",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                },
                payee: {
                  name: "Payee",
                  body: {
                    Provider: null,
                    Dapp: null
                  },
                  isResult: false,
                  isPrimitive: false,
                  isConvertable: false
                },
                url: {
                  name: "Array",
                  body: {
                    "0": {
                      name: "number",
                      isResult: false,
                      isPrimitive: true,
                      isConvertable: false
                    }
                  },
                  isResult: false,
                  isPrimitive: false,
                  isConvertable: false
                },
                datasetId: {
                  name: "Hash",
                  body: "string | number[]",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                },
                datasetIdContent: {
                  name: "Hash",
                  body: "string | number[]",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                }
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            }
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        },
        err: {
          name: "Error",
          body: {
            NotAdmin: null,
            NotOwner: null,
            ContractTransferFailed: null,
            ProviderAccountExists: null,
            ProviderExists: null,
            ProviderAccountDoesNotExist: null,
            ProviderDoesNotExist: null,
            ProviderInsufficientFunds: null,
            ProviderInactive: null,
            ProviderUrlUsed: null,
            DappExists: null,
            DappDoesNotExist: null,
            DappInactive: null,
            DappInsufficientFunds: null,
            CaptchaDataDoesNotExist: null,
            CommitDoesNotExist: null,
            DappUserDoesNotExist: null,
            NoActiveProviders: null,
            DatasetIdSolutionsSame: null,
            CodeNotFound: null,
            Unknown: null,
            InvalidContract: null,
            InvalidPayee: null,
            InvalidCaptchaStatus: null,
            NoCorrectCaptcha: null,
            NotEnoughActiveProviders: null,
            ProviderFeeTooHigh: null,
            CommitAlreadyExists: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "58": {
      name: "Array",
      body: {
        "0": {
          name: "Provider",
          body: {
            status: {
              name: "GovernanceStatus",
              body: {
                Active: null,
                Inactive: null
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            },
            balance: {
              name: "ReturnNumber",
              isResult: false,
              isPrimitive: false,
              isConvertable: true
            },
            fee: {
              name: "number",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            payee: {
              name: "Payee",
              body: {
                Provider: null,
                Dapp: null
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            },
            url: {
              name: "Array",
              body: {
                "0": {
                  name: "number",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                }
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            },
            datasetId: {
              name: "Hash",
              body: "string | number[]",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            datasetIdContent: {
              name: "Hash",
              body: "string | number[]",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            }
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: false,
      isPrimitive: false,
      isConvertable: false
    },
    "59": {
      name: "Result<Result<RandomProvider, Error, LangError",
      body: {
        ok: {
          name: "Result<RandomProvider, Error",
          body: {
            ok: {
              name: "RandomProvider",
              body: {
                providerAccount: {
                  name: "AccountId",
                  body: "string | number[]",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                },
                provider: {
                  name: "Provider",
                  body: {
                    status: {
                      name: "GovernanceStatus",
                      body: {
                        Active: null,
                        Inactive: null
                      },
                      isResult: false,
                      isPrimitive: false,
                      isConvertable: false
                    },
                    balance: {
                      name: "ReturnNumber",
                      isResult: false,
                      isPrimitive: false,
                      isConvertable: true
                    },
                    fee: {
                      name: "number",
                      isResult: false,
                      isPrimitive: true,
                      isConvertable: false
                    },
                    payee: {
                      name: "Payee",
                      body: {
                        Provider: null,
                        Dapp: null
                      },
                      isResult: false,
                      isPrimitive: false,
                      isConvertable: false
                    },
                    url: {
                      name: "Array",
                      body: {
                        "0": {
                          name: "number",
                          isResult: false,
                          isPrimitive: true,
                          isConvertable: false
                        }
                      },
                      isResult: false,
                      isPrimitive: false,
                      isConvertable: false
                    },
                    datasetId: {
                      name: "Hash",
                      body: "string | number[]",
                      isResult: false,
                      isPrimitive: true,
                      isConvertable: false
                    },
                    datasetIdContent: {
                      name: "Hash",
                      body: "string | number[]",
                      isResult: false,
                      isPrimitive: true,
                      isConvertable: false
                    }
                  },
                  isResult: false,
                  isPrimitive: false,
                  isConvertable: false
                },
                blockNumber: {
                  name: "number",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                }
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            },
            err: {
              name: "Error",
              body: {
                NotAdmin: null,
                NotOwner: null,
                ContractTransferFailed: null,
                ProviderAccountExists: null,
                ProviderExists: null,
                ProviderAccountDoesNotExist: null,
                ProviderDoesNotExist: null,
                ProviderInsufficientFunds: null,
                ProviderInactive: null,
                ProviderUrlUsed: null,
                DappExists: null,
                DappDoesNotExist: null,
                DappInactive: null,
                DappInsufficientFunds: null,
                CaptchaDataDoesNotExist: null,
                CommitDoesNotExist: null,
                DappUserDoesNotExist: null,
                NoActiveProviders: null,
                DatasetIdSolutionsSame: null,
                CodeNotFound: null,
                Unknown: null,
                InvalidContract: null,
                InvalidPayee: null,
                InvalidCaptchaStatus: null,
                NoCorrectCaptcha: null,
                NotEnoughActiveProviders: null,
                ProviderFeeTooHigh: null,
                CommitAlreadyExists: null
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            }
          },
          isResult: true,
          isPrimitive: false,
          isConvertable: false
        },
        err: {
          name: "LangError",
          body: {
            CouldNotReadInput: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "60": {
      name: "Result<RandomProvider, Error",
      body: {
        ok: {
          name: "RandomProvider",
          body: {
            providerAccount: {
              name: "AccountId",
              body: "string | number[]",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            provider: {
              name: "Provider",
              body: {
                status: {
                  name: "GovernanceStatus",
                  body: {
                    Active: null,
                    Inactive: null
                  },
                  isResult: false,
                  isPrimitive: false,
                  isConvertable: false
                },
                balance: {
                  name: "ReturnNumber",
                  isResult: false,
                  isPrimitive: false,
                  isConvertable: true
                },
                fee: {
                  name: "number",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                },
                payee: {
                  name: "Payee",
                  body: {
                    Provider: null,
                    Dapp: null
                  },
                  isResult: false,
                  isPrimitive: false,
                  isConvertable: false
                },
                url: {
                  name: "Array",
                  body: {
                    "0": {
                      name: "number",
                      isResult: false,
                      isPrimitive: true,
                      isConvertable: false
                    }
                  },
                  isResult: false,
                  isPrimitive: false,
                  isConvertable: false
                },
                datasetId: {
                  name: "Hash",
                  body: "string | number[]",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                },
                datasetIdContent: {
                  name: "Hash",
                  body: "string | number[]",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                }
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            },
            blockNumber: {
              name: "number",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            }
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        },
        err: {
          name: "Error",
          body: {
            NotAdmin: null,
            NotOwner: null,
            ContractTransferFailed: null,
            ProviderAccountExists: null,
            ProviderExists: null,
            ProviderAccountDoesNotExist: null,
            ProviderDoesNotExist: null,
            ProviderInsufficientFunds: null,
            ProviderInactive: null,
            ProviderUrlUsed: null,
            DappExists: null,
            DappDoesNotExist: null,
            DappInactive: null,
            DappInsufficientFunds: null,
            CaptchaDataDoesNotExist: null,
            CommitDoesNotExist: null,
            DappUserDoesNotExist: null,
            NoActiveProviders: null,
            DatasetIdSolutionsSame: null,
            CodeNotFound: null,
            Unknown: null,
            InvalidContract: null,
            InvalidPayee: null,
            InvalidCaptchaStatus: null,
            NoCorrectCaptcha: null,
            NotEnoughActiveProviders: null,
            ProviderFeeTooHigh: null,
            CommitAlreadyExists: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "61": {
      name: "RandomProvider",
      body: {
        providerAccount: {
          name: "AccountId",
          body: "string | number[]",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        },
        provider: {
          name: "Provider",
          body: {
            status: {
              name: "GovernanceStatus",
              body: {
                Active: null,
                Inactive: null
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            },
            balance: {
              name: "ReturnNumber",
              isResult: false,
              isPrimitive: false,
              isConvertable: true
            },
            fee: {
              name: "number",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            payee: {
              name: "Payee",
              body: {
                Provider: null,
                Dapp: null
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            },
            url: {
              name: "Array",
              body: {
                "0": {
                  name: "number",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                }
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            },
            datasetId: {
              name: "Hash",
              body: "string | number[]",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            },
            datasetIdContent: {
              name: "Hash",
              body: "string | number[]",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            }
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        },
        blockNumber: {
          name: "number",
          isResult: false,
          isPrimitive: true,
          isConvertable: false
        }
      },
      isResult: false,
      isPrimitive: false,
      isConvertable: false
    },
    "62": {
      name: "Result<Result<Array, Error, LangError",
      body: {
        ok: {
          name: "Result<Array, Error",
          body: {
            ok: {
              name: "Array",
              body: {
                "0": {
                  name: "AccountId",
                  body: "string | number[]",
                  isResult: false,
                  isPrimitive: true,
                  isConvertable: false
                }
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            },
            err: {
              name: "Error",
              body: {
                NotAdmin: null,
                NotOwner: null,
                ContractTransferFailed: null,
                ProviderAccountExists: null,
                ProviderExists: null,
                ProviderAccountDoesNotExist: null,
                ProviderDoesNotExist: null,
                ProviderInsufficientFunds: null,
                ProviderInactive: null,
                ProviderUrlUsed: null,
                DappExists: null,
                DappDoesNotExist: null,
                DappInactive: null,
                DappInsufficientFunds: null,
                CaptchaDataDoesNotExist: null,
                CommitDoesNotExist: null,
                DappUserDoesNotExist: null,
                NoActiveProviders: null,
                DatasetIdSolutionsSame: null,
                CodeNotFound: null,
                Unknown: null,
                InvalidContract: null,
                InvalidPayee: null,
                InvalidCaptchaStatus: null,
                NoCorrectCaptcha: null,
                NotEnoughActiveProviders: null,
                ProviderFeeTooHigh: null,
                CommitAlreadyExists: null
              },
              isResult: false,
              isPrimitive: false,
              isConvertable: false
            }
          },
          isResult: true,
          isPrimitive: false,
          isConvertable: false
        },
        err: {
          name: "LangError",
          body: {
            CouldNotReadInput: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    },
    "63": {
      name: "Result<Array, Error",
      body: {
        ok: {
          name: "Array",
          body: {
            "0": {
              name: "AccountId",
              body: "string | number[]",
              isResult: false,
              isPrimitive: true,
              isConvertable: false
            }
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        },
        err: {
          name: "Error",
          body: {
            NotAdmin: null,
            NotOwner: null,
            ContractTransferFailed: null,
            ProviderAccountExists: null,
            ProviderExists: null,
            ProviderAccountDoesNotExist: null,
            ProviderDoesNotExist: null,
            ProviderInsufficientFunds: null,
            ProviderInactive: null,
            ProviderUrlUsed: null,
            DappExists: null,
            DappDoesNotExist: null,
            DappInactive: null,
            DappInsufficientFunds: null,
            CaptchaDataDoesNotExist: null,
            CommitDoesNotExist: null,
            DappUserDoesNotExist: null,
            NoActiveProviders: null,
            DatasetIdSolutionsSame: null,
            CodeNotFound: null,
            Unknown: null,
            InvalidContract: null,
            InvalidPayee: null,
            InvalidCaptchaStatus: null,
            NoCorrectCaptcha: null,
            NotEnoughActiveProviders: null,
            ProviderFeeTooHigh: null,
            CommitAlreadyExists: null
          },
          isResult: false,
          isPrimitive: false,
          isConvertable: false
        }
      },
      isResult: true,
      isPrimitive: false,
      isConvertable: false
    }
  };
  const EVENT_DATA_TYPE_DESCRIPTIONS = {};
  let Methods$2 = class Methods {
    constructor(apiPromise, nativeContract, keyringPair) {
      this.__apiPromise = apiPromise;
      this.__nativeContract = nativeContract;
      this.__keyringPair = keyringPair;
      this.__callerAddress = keyringPair.address;
    }
    /**
     * getAuthor
     *
     * @returns { Result<ReturnTypes.AccountId, ReturnTypes.LangError> }
     */
    getAuthor(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getAuthor", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(13, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getAdmin
     *
     * @returns { Result<ReturnTypes.AccountId, ReturnTypes.LangError> }
     */
    getAdmin(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getAdmin", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(13, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getPayees
     *
     * @returns { Result<Array<ReturnTypes.Payee>, ReturnTypes.LangError> }
     */
    getPayees(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getPayees", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(14, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getDappPayees
     *
     * @returns { Result<Array<ReturnTypes.DappPayee>, ReturnTypes.LangError> }
     */
    getDappPayees(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getDappPayees", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(17, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getStatuses
     *
     * @returns { Result<Array<ReturnTypes.GovernanceStatus>, ReturnTypes.LangError> }
     */
    getStatuses(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getStatuses", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(20, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getProviderStakeThreshold
     *
     * @returns { Result<ReturnNumber, ReturnTypes.LangError> }
     */
    getProviderStakeThreshold(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getProviderStakeThreshold", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(23, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getDappStakeThreshold
     *
     * @returns { Result<ReturnNumber, ReturnTypes.LangError> }
     */
    getDappStakeThreshold(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getDappStakeThreshold", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(23, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getMaxProviderFee
     *
     * @returns { Result<number, ReturnTypes.LangError> }
     */
    getMaxProviderFee(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getMaxProviderFee", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(24, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getMinNumActiveProviders
     *
     * @returns { Result<number, ReturnTypes.LangError> }
     */
    getMinNumActiveProviders(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getMinNumActiveProviders", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(25, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getBlockTime
     *
     * @returns { Result<number, ReturnTypes.LangError> }
     */
    getBlockTime(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getBlockTime", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(25, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getMaxUserHistoryAgeSeconds
     *
     * @returns { Result<number, ReturnTypes.LangError> }
     */
    getMaxUserHistoryAgeSeconds(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getMaxUserHistoryAgeSeconds", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(24, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getMaxUserHistoryLen
     *
     * @returns { Result<number, ReturnTypes.LangError> }
     */
    getMaxUserHistoryLen(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getMaxUserHistoryLen", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(25, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getMaxUserHistoryAgeBlocks
     *
     * @returns { Result<number, ReturnTypes.LangError> }
     */
    getMaxUserHistoryAgeBlocks(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getMaxUserHistoryAgeBlocks", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(24, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * providerRegister
     *
     * @param { Array<(number | string | BN)> } url,
     * @param { (number | string | BN) } fee,
     * @param { ArgumentTypes.Payee } payee,
     * @returns { void }
     */
    providerRegister(url, fee, payee, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerRegister", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [url, fee, payee], __options);
    }
    /**
     * providerUpdate
     *
     * @param { Array<(number | string | BN)> } url,
     * @param { (number | string | BN) } fee,
     * @param { ArgumentTypes.Payee } payee,
     * @returns { void }
     */
    providerUpdate(url, fee, payee, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerUpdate", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [url, fee, payee], __options);
    }
    /**
     * providerDeactivate
     *
     * @returns { void }
     */
    providerDeactivate(__options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerDeactivate", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [], __options);
    }
    /**
     * providerDeregister
     *
     * @returns { void }
     */
    providerDeregister(__options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerDeregister", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [], __options);
    }
    /**
     * getProvider
     *
     * @param { ArgumentTypes.AccountId } account,
     * @returns { Result<Result<ReturnTypes.Provider, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    getProvider(account2, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getProvider", [account2], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(30, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * providerFund
     *
     * @returns { void }
     */
    providerFund(__options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerFund", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [], __options);
    }
    /**
     * providerSetDataset
     *
     * @param { ArgumentTypes.Hash } datasetId,
     * @param { ArgumentTypes.Hash } datasetIdContent,
     * @returns { void }
     */
    providerSetDataset(datasetId, datasetIdContent, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerSetDataset", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [datasetId, datasetIdContent], __options);
    }
    /**
     * getDapp
     *
     * @param { ArgumentTypes.AccountId } contract,
     * @returns { Result<Result<ReturnTypes.Dapp, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    getDapp(contract, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getDapp", [contract], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(33, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * dappRegister
     *
     * @param { ArgumentTypes.AccountId } contract,
     * @param { ArgumentTypes.DappPayee } payee,
     * @returns { void }
     */
    dappRegister(contract, payee, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "dappRegister", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [contract, payee], __options);
    }
    /**
     * dappUpdate
     *
     * @param { ArgumentTypes.AccountId } contract,
     * @param { ArgumentTypes.DappPayee } payee,
     * @param { ArgumentTypes.AccountId } owner,
     * @returns { void }
     */
    dappUpdate(contract, payee, owner, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "dappUpdate", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [contract, payee, owner], __options);
    }
    /**
     * dappFund
     *
     * @param { ArgumentTypes.AccountId } contract,
     * @returns { void }
     */
    dappFund(contract, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "dappFund", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [contract], __options);
    }
    /**
     * dappDeregister
     *
     * @param { ArgumentTypes.AccountId } contract,
     * @returns { void }
     */
    dappDeregister(contract, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "dappDeregister", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [contract], __options);
    }
    /**
     * dappDeactivate
     *
     * @param { ArgumentTypes.AccountId } contract,
     * @returns { void }
     */
    dappDeactivate(contract, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "dappDeactivate", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [contract], __options);
    }
    /**
     * getUserHistorySummary
     *
     * @param { ArgumentTypes.AccountId } userAccount,
     * @returns { Result<Result<ReturnTypes.UserHistorySummary, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    getUserHistorySummary(userAccount, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getUserHistorySummary", [userAccount], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(36, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * providerCommit
     *
     * @param { ArgumentTypes.Commit } commit,
     * @returns { void }
     */
    providerCommit(commit, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerCommit", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [commit], __options);
    }
    /**
     * providerCommitMany
     *
     * @param { Array<ArgumentTypes.Commit> } commits,
     * @returns { void }
     */
    providerCommitMany(commits, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerCommitMany", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [commits], __options);
    }
    /**
     * dappOperatorIsHumanUser
     *
     * @param { ArgumentTypes.AccountId } userAccount,
     * @param { (number | string | BN) } threshold,
     * @returns { Result<Result<boolean, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    dappOperatorIsHumanUser(userAccount, threshold, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "dappOperatorIsHumanUser", [userAccount, threshold], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(42, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * dappOperatorLastCorrectCaptcha
     *
     * @param { ArgumentTypes.AccountId } userAccount,
     * @returns { Result<Result<ReturnTypes.LastCorrectCaptcha, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    dappOperatorLastCorrectCaptcha(userAccount, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "dappOperatorLastCorrectCaptcha", [userAccount], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(45, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getCaptchaData
     *
     * @param { ArgumentTypes.Hash } datasetId,
     * @returns { Result<Result<ReturnTypes.CaptchaData, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    getCaptchaData(datasetId, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getCaptchaData", [datasetId], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(48, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getUser
     *
     * @param { ArgumentTypes.AccountId } userAccount,
     * @returns { Result<Result<ReturnTypes.User, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    getUser(userAccount, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getUser", [userAccount], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(51, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getCommit
     *
     * @param { ArgumentTypes.Hash } commitId,
     * @returns { Result<Result<ReturnTypes.Commit, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    getCommit(commitId, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getCommit", [commitId], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(54, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * listProvidersByAccounts
     *
     * @param { Array<ArgumentTypes.AccountId> } providerAccounts,
     * @returns { Result<Result<Array<ReturnTypes.Provider>, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    listProvidersByAccounts(providerAccounts, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "listProvidersByAccounts", [providerAccounts], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(56, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * listProvidersByStatus
     *
     * @param { Array<ArgumentTypes.GovernanceStatus> } statuses,
     * @returns { Result<Result<Array<ReturnTypes.Provider>, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    listProvidersByStatus(statuses, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "listProvidersByStatus", [statuses], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(56, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getRandomActiveProvider
     *
     * @param { ArgumentTypes.AccountId } userAccount,
     * @param { ArgumentTypes.AccountId } dappContract,
     * @returns { Result<Result<ReturnTypes.RandomProvider, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    getRandomActiveProvider(userAccount, dappContract, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getRandomActiveProvider", [userAccount, dappContract], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(59, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getAllProviderAccounts
     *
     * @returns { Result<Result<Array<ReturnTypes.AccountId>, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    getAllProviderAccounts(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getAllProviderAccounts", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(62, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getRandomNumber
     *
     * @param { (string | number | BN) } len,
     * @param { ArgumentTypes.AccountId } userAccount,
     * @param { ArgumentTypes.AccountId } dappContract,
     * @returns { Result<ReturnNumber, ReturnTypes.LangError> }
     */
    getRandomNumber(len, userAccount, dappContract, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getRandomNumber", [len, userAccount, dappContract], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(23, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * terminate
     *
     * @returns { void }
     */
    terminate(__options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "terminate", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [], __options);
    }
    /**
     * withdraw
     *
     * @param { (string | number | BN) } amount,
     * @returns { void }
     */
    withdraw(amount, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "withdraw", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [amount], __options);
    }
    /**
     * setCodeHash
     *
     * @param { Array<(number | string | BN)> } codeHash,
     * @returns { void }
     */
    setCodeHash(codeHash, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "setCodeHash", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [codeHash], __options);
    }
  };
  let Methods$1 = class Methods {
    constructor(nativeContract, nativeApi, callerAddress) {
      this.__nativeContract = nativeContract;
      this.__callerAddress = callerAddress;
      this.__apiPromise = nativeApi;
    }
    /**
     * getAuthor
     *
     * @returns { Result<ReturnTypes.AccountId, ReturnTypes.LangError> }
     */
    getAuthor(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getAuthor", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(13, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getAdmin
     *
     * @returns { Result<ReturnTypes.AccountId, ReturnTypes.LangError> }
     */
    getAdmin(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getAdmin", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(13, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getPayees
     *
     * @returns { Result<Array<ReturnTypes.Payee>, ReturnTypes.LangError> }
     */
    getPayees(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getPayees", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(14, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getDappPayees
     *
     * @returns { Result<Array<ReturnTypes.DappPayee>, ReturnTypes.LangError> }
     */
    getDappPayees(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getDappPayees", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(17, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getStatuses
     *
     * @returns { Result<Array<ReturnTypes.GovernanceStatus>, ReturnTypes.LangError> }
     */
    getStatuses(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getStatuses", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(20, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getProviderStakeThreshold
     *
     * @returns { Result<ReturnNumber, ReturnTypes.LangError> }
     */
    getProviderStakeThreshold(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getProviderStakeThreshold", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(23, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getDappStakeThreshold
     *
     * @returns { Result<ReturnNumber, ReturnTypes.LangError> }
     */
    getDappStakeThreshold(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getDappStakeThreshold", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(23, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getMaxProviderFee
     *
     * @returns { Result<number, ReturnTypes.LangError> }
     */
    getMaxProviderFee(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getMaxProviderFee", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(24, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getMinNumActiveProviders
     *
     * @returns { Result<number, ReturnTypes.LangError> }
     */
    getMinNumActiveProviders(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getMinNumActiveProviders", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(25, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getBlockTime
     *
     * @returns { Result<number, ReturnTypes.LangError> }
     */
    getBlockTime(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getBlockTime", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(25, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getMaxUserHistoryAgeSeconds
     *
     * @returns { Result<number, ReturnTypes.LangError> }
     */
    getMaxUserHistoryAgeSeconds(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getMaxUserHistoryAgeSeconds", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(24, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getMaxUserHistoryLen
     *
     * @returns { Result<number, ReturnTypes.LangError> }
     */
    getMaxUserHistoryLen(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getMaxUserHistoryLen", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(25, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getMaxUserHistoryAgeBlocks
     *
     * @returns { Result<number, ReturnTypes.LangError> }
     */
    getMaxUserHistoryAgeBlocks(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getMaxUserHistoryAgeBlocks", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(24, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * providerRegister
     *
     * @param { Array<(number | string | BN)> } url,
     * @param { (number | string | BN) } fee,
     * @param { ArgumentTypes.Payee } payee,
     * @returns { Result<Result<null, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    providerRegister(url, fee, payee, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "providerRegister", [url, fee, payee], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(27, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * providerUpdate
     *
     * @param { Array<(number | string | BN)> } url,
     * @param { (number | string | BN) } fee,
     * @param { ArgumentTypes.Payee } payee,
     * @returns { Result<Result<null, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    providerUpdate(url, fee, payee, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "providerUpdate", [url, fee, payee], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(27, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * providerDeactivate
     *
     * @returns { Result<Result<null, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    providerDeactivate(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "providerDeactivate", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(27, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * providerDeregister
     *
     * @returns { Result<Result<null, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    providerDeregister(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "providerDeregister", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(27, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getProvider
     *
     * @param { ArgumentTypes.AccountId } account,
     * @returns { Result<Result<ReturnTypes.Provider, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    getProvider(account2, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getProvider", [account2], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(30, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * providerFund
     *
     * @returns { Result<Result<null, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    providerFund(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "providerFund", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(27, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * providerSetDataset
     *
     * @param { ArgumentTypes.Hash } datasetId,
     * @param { ArgumentTypes.Hash } datasetIdContent,
     * @returns { Result<Result<null, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    providerSetDataset(datasetId, datasetIdContent, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "providerSetDataset", [datasetId, datasetIdContent], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(27, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getDapp
     *
     * @param { ArgumentTypes.AccountId } contract,
     * @returns { Result<Result<ReturnTypes.Dapp, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    getDapp(contract, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getDapp", [contract], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(33, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * dappRegister
     *
     * @param { ArgumentTypes.AccountId } contract,
     * @param { ArgumentTypes.DappPayee } payee,
     * @returns { Result<Result<null, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    dappRegister(contract, payee, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "dappRegister", [contract, payee], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(27, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * dappUpdate
     *
     * @param { ArgumentTypes.AccountId } contract,
     * @param { ArgumentTypes.DappPayee } payee,
     * @param { ArgumentTypes.AccountId } owner,
     * @returns { Result<Result<null, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    dappUpdate(contract, payee, owner, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "dappUpdate", [contract, payee, owner], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(27, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * dappFund
     *
     * @param { ArgumentTypes.AccountId } contract,
     * @returns { Result<Result<null, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    dappFund(contract, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "dappFund", [contract], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(27, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * dappDeregister
     *
     * @param { ArgumentTypes.AccountId } contract,
     * @returns { Result<Result<null, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    dappDeregister(contract, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "dappDeregister", [contract], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(27, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * dappDeactivate
     *
     * @param { ArgumentTypes.AccountId } contract,
     * @returns { Result<Result<null, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    dappDeactivate(contract, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "dappDeactivate", [contract], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(27, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getUserHistorySummary
     *
     * @param { ArgumentTypes.AccountId } userAccount,
     * @returns { Result<Result<ReturnTypes.UserHistorySummary, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    getUserHistorySummary(userAccount, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getUserHistorySummary", [userAccount], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(36, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * providerCommit
     *
     * @param { ArgumentTypes.Commit } commit,
     * @returns { Result<Result<null, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    providerCommit(commit, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "providerCommit", [commit], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(27, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * providerCommitMany
     *
     * @param { Array<ArgumentTypes.Commit> } commits,
     * @returns { Result<Result<null, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    providerCommitMany(commits, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "providerCommitMany", [commits], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(27, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * dappOperatorIsHumanUser
     *
     * @param { ArgumentTypes.AccountId } userAccount,
     * @param { (number | string | BN) } threshold,
     * @returns { Result<Result<boolean, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    dappOperatorIsHumanUser(userAccount, threshold, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "dappOperatorIsHumanUser", [userAccount, threshold], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(42, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * dappOperatorLastCorrectCaptcha
     *
     * @param { ArgumentTypes.AccountId } userAccount,
     * @returns { Result<Result<ReturnTypes.LastCorrectCaptcha, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    dappOperatorLastCorrectCaptcha(userAccount, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "dappOperatorLastCorrectCaptcha", [userAccount], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(45, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getCaptchaData
     *
     * @param { ArgumentTypes.Hash } datasetId,
     * @returns { Result<Result<ReturnTypes.CaptchaData, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    getCaptchaData(datasetId, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getCaptchaData", [datasetId], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(48, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getUser
     *
     * @param { ArgumentTypes.AccountId } userAccount,
     * @returns { Result<Result<ReturnTypes.User, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    getUser(userAccount, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getUser", [userAccount], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(51, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getCommit
     *
     * @param { ArgumentTypes.Hash } commitId,
     * @returns { Result<Result<ReturnTypes.Commit, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    getCommit(commitId, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getCommit", [commitId], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(54, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * listProvidersByAccounts
     *
     * @param { Array<ArgumentTypes.AccountId> } providerAccounts,
     * @returns { Result<Result<Array<ReturnTypes.Provider>, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    listProvidersByAccounts(providerAccounts, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "listProvidersByAccounts", [providerAccounts], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(56, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * listProvidersByStatus
     *
     * @param { Array<ArgumentTypes.GovernanceStatus> } statuses,
     * @returns { Result<Result<Array<ReturnTypes.Provider>, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    listProvidersByStatus(statuses, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "listProvidersByStatus", [statuses], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(56, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getRandomActiveProvider
     *
     * @param { ArgumentTypes.AccountId } userAccount,
     * @param { ArgumentTypes.AccountId } dappContract,
     * @returns { Result<Result<ReturnTypes.RandomProvider, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    getRandomActiveProvider(userAccount, dappContract, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getRandomActiveProvider", [userAccount, dappContract], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(59, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getAllProviderAccounts
     *
     * @returns { Result<Result<Array<ReturnTypes.AccountId>, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    getAllProviderAccounts(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getAllProviderAccounts", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(62, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * getRandomNumber
     *
     * @param { (string | number | BN) } len,
     * @param { ArgumentTypes.AccountId } userAccount,
     * @param { ArgumentTypes.AccountId } dappContract,
     * @returns { Result<ReturnNumber, ReturnTypes.LangError> }
     */
    getRandomNumber(len, userAccount, dappContract, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "getRandomNumber", [len, userAccount, dappContract], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(23, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * terminate
     *
     * @returns { Result<Result<null, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    terminate(__options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "terminate", [], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(27, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * withdraw
     *
     * @param { (string | number | BN) } amount,
     * @returns { Result<Result<null, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    withdraw(amount, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "withdraw", [amount], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(27, DATA_TYPE_DESCRIPTIONS));
      });
    }
    /**
     * setCodeHash
     *
     * @param { Array<(number | string | BN)> } codeHash,
     * @returns { Result<Result<null, ReturnTypes.Error>, ReturnTypes.LangError> }
     */
    setCodeHash(codeHash, __options) {
      return dist.queryOkJSON(this.__apiPromise, this.__nativeContract, this.__callerAddress, "setCodeHash", [codeHash], __options, (result) => {
        return dist.handleReturnType(result, getTypeDescription(27, DATA_TYPE_DESCRIPTIONS));
      });
    }
  };
  class Methods {
    constructor(apiPromise, nativeContract, keyringPair) {
      this.__apiPromise = apiPromise;
      this.__nativeContract = nativeContract;
      this.__keyringPair = keyringPair;
    }
    /**
     * getAuthor
     *
     */
    getAuthor(__options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getAuthor", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [], __options);
    }
    /**
     * getAdmin
     *
     */
    getAdmin(__options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getAdmin", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [], __options);
    }
    /**
     * getPayees
     *
     */
    getPayees(__options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getPayees", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [], __options);
    }
    /**
     * getDappPayees
     *
     */
    getDappPayees(__options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getDappPayees", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [], __options);
    }
    /**
     * getStatuses
     *
     */
    getStatuses(__options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getStatuses", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [], __options);
    }
    /**
     * getProviderStakeThreshold
     *
     */
    getProviderStakeThreshold(__options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getProviderStakeThreshold", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [], __options);
    }
    /**
     * getDappStakeThreshold
     *
     */
    getDappStakeThreshold(__options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getDappStakeThreshold", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [], __options);
    }
    /**
     * getMaxProviderFee
     *
     */
    getMaxProviderFee(__options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getMaxProviderFee", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [], __options);
    }
    /**
     * getMinNumActiveProviders
     *
     */
    getMinNumActiveProviders(__options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getMinNumActiveProviders", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [], __options);
    }
    /**
     * getBlockTime
     *
     */
    getBlockTime(__options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getBlockTime", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [], __options);
    }
    /**
     * getMaxUserHistoryAgeSeconds
     *
     */
    getMaxUserHistoryAgeSeconds(__options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getMaxUserHistoryAgeSeconds", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [], __options);
    }
    /**
     * getMaxUserHistoryLen
     *
     */
    getMaxUserHistoryLen(__options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getMaxUserHistoryLen", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [], __options);
    }
    /**
     * getMaxUserHistoryAgeBlocks
     *
     */
    getMaxUserHistoryAgeBlocks(__options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getMaxUserHistoryAgeBlocks", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [], __options);
    }
    /**
     * providerRegister
     *
     * @param { Array<(number | string | BN)> } url,
     * @param { (number | string | BN) } fee,
     * @param { ArgumentTypes.Payee } payee,
     */
    providerRegister(url, fee, payee, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerRegister", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [url, fee, payee], __options);
    }
    /**
     * providerUpdate
     *
     * @param { Array<(number | string | BN)> } url,
     * @param { (number | string | BN) } fee,
     * @param { ArgumentTypes.Payee } payee,
     */
    providerUpdate(url, fee, payee, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerUpdate", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [url, fee, payee], __options);
    }
    /**
     * providerDeactivate
     *
     */
    providerDeactivate(__options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerDeactivate", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [], __options);
    }
    /**
     * providerDeregister
     *
     */
    providerDeregister(__options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerDeregister", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [], __options);
    }
    /**
     * getProvider
     *
     * @param { ArgumentTypes.AccountId } account,
     */
    getProvider(account2, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getProvider", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [account2], __options);
    }
    /**
     * providerFund
     *
     */
    providerFund(__options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerFund", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [], __options);
    }
    /**
     * providerSetDataset
     *
     * @param { ArgumentTypes.Hash } datasetId,
     * @param { ArgumentTypes.Hash } datasetIdContent,
     */
    providerSetDataset(datasetId, datasetIdContent, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerSetDataset", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [datasetId, datasetIdContent], __options);
    }
    /**
     * getDapp
     *
     * @param { ArgumentTypes.AccountId } contract,
     */
    getDapp(contract, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getDapp", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [contract], __options);
    }
    /**
     * dappRegister
     *
     * @param { ArgumentTypes.AccountId } contract,
     * @param { ArgumentTypes.DappPayee } payee,
     */
    dappRegister(contract, payee, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "dappRegister", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [contract, payee], __options);
    }
    /**
     * dappUpdate
     *
     * @param { ArgumentTypes.AccountId } contract,
     * @param { ArgumentTypes.DappPayee } payee,
     * @param { ArgumentTypes.AccountId } owner,
     */
    dappUpdate(contract, payee, owner, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "dappUpdate", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [contract, payee, owner], __options);
    }
    /**
     * dappFund
     *
     * @param { ArgumentTypes.AccountId } contract,
     */
    dappFund(contract, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "dappFund", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [contract], __options);
    }
    /**
     * dappDeregister
     *
     * @param { ArgumentTypes.AccountId } contract,
     */
    dappDeregister(contract, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "dappDeregister", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [contract], __options);
    }
    /**
     * dappDeactivate
     *
     * @param { ArgumentTypes.AccountId } contract,
     */
    dappDeactivate(contract, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "dappDeactivate", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [contract], __options);
    }
    /**
     * getUserHistorySummary
     *
     * @param { ArgumentTypes.AccountId } userAccount,
     */
    getUserHistorySummary(userAccount, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getUserHistorySummary", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [userAccount], __options);
    }
    /**
     * providerCommit
     *
     * @param { ArgumentTypes.Commit } commit,
     */
    providerCommit(commit, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerCommit", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [commit], __options);
    }
    /**
     * providerCommitMany
     *
     * @param { Array<ArgumentTypes.Commit> } commits,
     */
    providerCommitMany(commits, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "providerCommitMany", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [commits], __options);
    }
    /**
     * dappOperatorIsHumanUser
     *
     * @param { ArgumentTypes.AccountId } userAccount,
     * @param { (number | string | BN) } threshold,
     */
    dappOperatorIsHumanUser(userAccount, threshold, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "dappOperatorIsHumanUser", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [userAccount, threshold], __options);
    }
    /**
     * dappOperatorLastCorrectCaptcha
     *
     * @param { ArgumentTypes.AccountId } userAccount,
     */
    dappOperatorLastCorrectCaptcha(userAccount, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "dappOperatorLastCorrectCaptcha", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [userAccount], __options);
    }
    /**
     * getCaptchaData
     *
     * @param { ArgumentTypes.Hash } datasetId,
     */
    getCaptchaData(datasetId, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getCaptchaData", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [datasetId], __options);
    }
    /**
     * getUser
     *
     * @param { ArgumentTypes.AccountId } userAccount,
     */
    getUser(userAccount, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getUser", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [userAccount], __options);
    }
    /**
     * getCommit
     *
     * @param { ArgumentTypes.Hash } commitId,
     */
    getCommit(commitId, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getCommit", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [commitId], __options);
    }
    /**
     * listProvidersByAccounts
     *
     * @param { Array<ArgumentTypes.AccountId> } providerAccounts,
     */
    listProvidersByAccounts(providerAccounts, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "listProvidersByAccounts", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [providerAccounts], __options);
    }
    /**
     * listProvidersByStatus
     *
     * @param { Array<ArgumentTypes.GovernanceStatus> } statuses,
     */
    listProvidersByStatus(statuses, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "listProvidersByStatus", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [statuses], __options);
    }
    /**
     * getRandomActiveProvider
     *
     * @param { ArgumentTypes.AccountId } userAccount,
     * @param { ArgumentTypes.AccountId } dappContract,
     */
    getRandomActiveProvider(userAccount, dappContract, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getRandomActiveProvider", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [userAccount, dappContract], __options);
    }
    /**
     * getAllProviderAccounts
     *
     */
    getAllProviderAccounts(__options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getAllProviderAccounts", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [], __options);
    }
    /**
     * getRandomNumber
     *
     * @param { (string | number | BN) } len,
     * @param { ArgumentTypes.AccountId } userAccount,
     * @param { ArgumentTypes.AccountId } dappContract,
     */
    getRandomNumber(len, userAccount, dappContract, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "getRandomNumber", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [len, userAccount, dappContract], __options);
    }
    /**
     * terminate
     *
     */
    terminate(__options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "terminate", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [], __options);
    }
    /**
     * withdraw
     *
     * @param { (string | number | BN) } amount,
     */
    withdraw(amount, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "withdraw", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [amount], __options);
    }
    /**
     * setCodeHash
     *
     * @param { Array<(number | string | BN)> } codeHash,
     */
    setCodeHash(codeHash, __options) {
      return dist.txSignAndSend(this.__apiPromise, this.__nativeContract, this.__keyringPair, "setCodeHash", (events2) => {
        return decodeEvents(events2, this.__nativeContract, EVENT_DATA_TYPE_DESCRIPTIONS);
      }, [codeHash], __options);
    }
  }
  class Contract {
    /**
    	     * @constructor
    
    	     * @param address - The address of the contract.
    	     * @param signer - The signer to use for signing transactions.
    	     * @param nativeAPI - The API instance to use for queries.
    	    */
    constructor(address, signer, nativeAPI) {
      this.address = address;
      this.nativeContract = new ContractPromise(nativeAPI, ContractAbi, address);
      this.nativeAPI = nativeAPI;
      this.signer = signer;
      this.contractAbi = new Abi(ContractAbi);
      this.query = new Methods$1(this.nativeContract, this.nativeAPI, signer.address);
      this.buildExtrinsic = new Methods$3(this.nativeContract, this.nativeAPI);
      this.tx = new Methods(nativeAPI, this.nativeContract, signer);
      this.methods = new Methods$2(nativeAPI, this.nativeContract, signer);
      this.events = new EventsClass(this.nativeContract, nativeAPI);
    }
    /**
     * name
     *
     * @returns The name of the contract.
     */
    get name() {
      return this.nativeContract.abi.info.contract.name.toString();
    }
    /**
     * abi
     *
     * @returns The abi of the contract.
     */
    get abi() {
      return this.contractAbi;
    }
    /**
     * withSigner
     *
     * @param signer - The signer to use for signing transactions.
     * @returns New instance of the contract class with new signer.
     * @example
     * ```typescript
     * const contract = new Contract(address, signerAlice, api);
     * await contract.mint(signerBob.address, 100);
     * await contract.withSigner(signerBob).transfer(signerAlice.address, 100);
     * ```
     */
    withSigner(signer) {
      return new Contract(this.address, signer, this.nativeAPI);
    }
    /**
     * withAddress
     *
     * @param address - The address of the contract.
     * @returns New instance of the contract class to interact with new contract.
     */
    withAddress(address) {
      return new Contract(address, this.signer, this.nativeAPI);
    }
    /**
     * withAPI
     *
     * @param api - The API instance to use for queries.
     * @returns New instance of the contract class to interact with new API.
     */
    withAPI(api) {
      return new Contract(this.address, this.signer, api);
    }
  }
  const wrapQuery = (fn, queryMethods) => {
    return async (...args) => {
      let result;
      try {
        result = await fn.bind(queryMethods)(...args);
      } catch (e) {
        throw new ProsopoContractError(e._asError, fn.name, void 0, {
          args
        });
      }
      if (result && result.value.err) {
        throw new ProsopoContractError(result.value.err.toString(), fn.name, {
          result: JSON.stringify(result)
        });
      }
      if (result.value) {
        return result.value.unwrapRecursively();
      }
      throw new ProsopoContractError("CONTRACT.QUERY_ERROR", fn.name, {}, { result: JSON.stringify(result) });
    };
  };
  class ProsopoCaptchaContract extends Contract {
    constructor(api, abi, address, pair, contractName, currentNonce, logLevel) {
      super(address, pair, api);
      this.api = api;
      this.contract = new ContractPromise(api, abi, address);
      this.pair = pair;
      this.contractName = contractName;
      this.nonce = currentNonce;
      this.logger = getLogger(logLevel || LogLevel.enum.info, `${ProsopoCaptchaContract.name}.${contractName}`);
      this.json = AbiMetaDataSpec.parse(this.abi.json);
      this.createStorageGetters();
    }
    /**
     * Create getter functions for contract storage entries
     */
    createStorageGetters() {
      if (this.json.storage.root.layout.struct) {
        for (const storageField of this.json.storage.root.layout.struct.fields) {
          const functionName = `${snakeToCamelCase(storageField.name)}`;
          const proto = ProsopoCaptchaContract.prototype;
          proto[functionName] = () => {
            return this.getStorage(storageField.name);
          };
        }
      }
    }
    /**
     * Get the return value of a contract query function at a specific block in the past
     * @param blockHash
     * @param methodName
     * @param args
     */
    async queryAtBlock(blockHash, methodName, args) {
      const api = await this.api.at(blockHash);
      const methods = new Methods$2(api, this.contract, this.signer);
      if (args) {
        return (await methods[methodName](...args)).value.unwrap().unwrap();
      } else {
        return (await methods[methodName]()).value.unwrap().unwrap();
      }
    }
    /**
     * Get the extrinsic for submitting in a transaction
     * @return {SubmittableExtrinsic} extrinsic
     */
    async getExtrinsicAndGasEstimates(contractMethodName, args, value) {
      const message = this.abi.findMessage(contractMethodName);
      const encodedArgs = encodeStringArgs(this.abi, message, args);
      const expectedBlockTime = getExpectedBlockTime(this.api);
      const weight = await useWeightImpl(this.api, expectedBlockTime, new BN(1));
      const gasLimit = weight.isWeightV2 ? weight.weightV2 : weight.isEmpty ? -1 : weight.weight;
      this.logger.debug("Sending address: ", this.pair.address);
      const initialOptions = {
        gasLimit,
        storageDepositLimit: null
      };
      if (value !== void 0) {
        initialOptions.value = value;
      }
      const func = this.contract.query[message.method];
      if (func === void 0) {
        throw new RangeError(`Method ${contractMethodName} does not exist on contract ${this.contractName}`);
      }
      const extrinsic = func(this.pair.address, initialOptions, ...encodedArgs);
      const response = await extrinsic;
      if (response.result.isOk) {
        let options = getOptions(this.api, message.isMutating, value, response.gasRequired, response.storageDeposit);
        let method = this.contract.tx[contractMethodName];
        if (method === void 0) {
          throw new RangeError(`Method ${contractMethodName} does not exist on contract ${this.contractName}`);
        }
        const extrinsicTx = method(options, ...encodedArgs);
        const paymentInfo = await extrinsicTx.paymentInfo(this.pair.address);
        this.logger.debug("Payment info: ", paymentInfo.partialFee.toHuman());
        options = getOptions(this.api, message.isMutating, value, paymentInfo.weight, response.storageDeposit, true);
        handleContractCallOutcomeErrors(response, contractMethodName);
        method = this.contract.tx[contractMethodName];
        if (method === void 0) {
          throw new RangeError(`Method ${contractMethodName} does not exist on contract ${this.contractName}`);
        }
        return {
          extrinsic: method(options, ...encodedArgs),
          options,
          storageDeposit: response.storageDeposit
        };
      } else {
        throw new ProsopoContractError(response.result.asErr, this.getExtrinsicAndGasEstimates.name);
      }
    }
    /**
     * Get the data at specified storage key
     * @return {any} data
     */
    async getStorage(name) {
      var _a;
      const primitiveTypes = getPrimitiveTypes(this.json);
      const primitiveStorageFields = getPrimitiveStorageFields(((_a = this.json.storage.root.layout.struct) == null ? void 0 : _a.fields) || [], primitiveTypes);
      if (name in primitiveStorageFields) {
        return getPrimitiveStorageValue(this.api, this.abi, name, primitiveStorageFields, this.contract.address);
      } else {
        const { storageKey, storageType } = getStorageKeyAndType(this.api, this.abi, this.json, name);
        if (storageType) {
          const typeDef = this.abi.registry.lookup.getTypeDef(`Lookup${storageType.id.toNumber()}`);
          const promiseResult = this.api.rx.call.contractsApi.getStorage(this.address, storageKey);
          const result = await firstValueFrom(promiseResult);
          const optionBytes = this.abi.registry.createType("Option<Bytes>", result);
          return this.abi.registry.createType(typeDef.type, [optionBytes.unwrap().toU8a(true)]);
        }
      }
      throw new ProsopoContractError("CONTRACT.INVALID_STORAGE_TYPE", this.getStorage.name);
    }
  }
  const abiJson = JSON.parse(ContractAbi);
  const sleep = (ms) => {
    return new Promise((resolve) => setTimeout(resolve, ms));
  };
  async function downloadImage(url) {
    try {
      return new Uint8Array((await axios$1.default.get(url, { url, method: "GET", responseType: "arraybuffer" })).data);
    } catch (error) {
      throw new ProsopoEnvError(error);
    }
  }
  const NO_SOLUTION_VALUE = "NO_SOLUTION";
  function computeCaptchaHash(captcha, includeSolution = false, includeSalt = false, sortItemHashes) {
    try {
      const itemHashes = captcha.items.map((item, index2) => {
        if (item.hash) {
          return item.hash;
        } else {
          throw new ProsopoEnvError("CAPTCHA.MISSING_ITEM_HASH", computeCaptchaHash.name, void 0, index2);
        }
      });
      return hexHashArray([
        captcha.target,
        // empty array hashes as empty string, undefined solution results in the array [`NO_SOLUTION`]
        // [undefined] also hashes as empty string, which is why we don't use it
        ...includeSolution ? getSolutionValueToHash(captcha.solution) : [],
        includeSalt ? captcha.salt : "",
        sortItemHashes ? itemHashes.sort() : itemHashes
      ]);
    } catch (err) {
      throw new ProsopoEnvError(err);
    }
  }
  function getSolutionValueToHash(solution) {
    return solution !== void 0 ? solution.sort() : [NO_SOLUTION_VALUE];
  }
  async function computeItemHash(item) {
    if (item.type === "text") {
      return { ...item, hash: hexHash(item.data) };
    } else if (item.type === "image") {
      return { ...item, hash: hexHash(await downloadImage(item.data)) };
    } else {
      throw new ProsopoEnvError("CAPTCHA.INVALID_ITEM_FORMAT");
    }
  }
  function computeCaptchaSolutionHash(captcha) {
    return hexHashArray([captcha.captchaId, captcha.captchaContentId, [...captcha.solution].sort(), captcha.salt]);
  }
  class MerkleNode {
    constructor(hash2) {
      this.hash = hash2;
      this.parent = null;
    }
  }
  class CaptchaMerkleTree {
    constructor() {
      this.leaves = [];
      this.layers = [];
    }
    build(leaves) {
      if (this.layers.length) {
        this.layers = [];
      }
      const layerZero = [];
      for (const leaf of leaves) {
        const node2 = new MerkleNode(leaf);
        this.leaves.push(node2);
        layerZero.push(node2.hash);
      }
      this.layers.push(layerZero);
      this.root = this.buildMerkleTree(this.leaves)[0];
    }
    buildMerkleTree(leaves) {
      const numLeaves = leaves.length;
      if (numLeaves === 1) {
        return leaves;
      }
      const parents = [];
      let leafIndex = 0;
      const newLayer = [];
      while (leafIndex < numLeaves) {
        const leftChild = leaves[leafIndex];
        if (leftChild === void 0) {
          throw new Error("leftChild undefined");
        }
        const rightChild = leafIndex + 1 < numLeaves ? at(leaves, leafIndex + 1) : leftChild;
        const parentNode = this.createParent(leftChild, rightChild);
        newLayer.push(parentNode.hash);
        parents.push(parentNode);
        leafIndex += 2;
      }
      this.layers.push(newLayer);
      return this.buildMerkleTree(parents);
    }
    createParent(leftChild, rightChild) {
      const parent = new MerkleNode(hexHashArray([leftChild.hash, rightChild.hash]));
      leftChild.parent = parent.hash;
      rightChild.parent = parent.hash;
      return parent;
    }
    proof(leafHash) {
      const proofTree = [];
      let layerNum = 0;
      while (layerNum < this.layers.length - 1) {
        const layer = this.layers[layerNum];
        if (layer === void 0) {
          throw new Error("layer undefined");
        }
        const leafIndex = layer.indexOf(leafHash);
        let partnerIndex = leafIndex % 2 && leafIndex > 0 ? leafIndex - 1 : leafIndex + 1;
        if (partnerIndex > layer.length - 1) {
          partnerIndex = leafIndex;
        }
        const pair = [leafHash];
        const partner = at(layer, partnerIndex);
        if (partnerIndex > leafIndex) {
          pair.push(partner);
        } else {
          pair.unshift(partner);
        }
        proofTree.push([at(pair, 0), at(pair, 1)]);
        layerNum += 1;
        leafHash = hexHashArray(pair);
      }
      const last2 = at(this.layers, this.layers.length - 1);
      return [...proofTree, [at(last2, 0)]];
    }
  }
  function verifyProof(leaf, proof) {
    try {
      if (at(proof, 0).indexOf(leaf) === -1) {
        return false;
      }
      for (const [layerIndex, layer] of proof.entries()) {
        leaf = hexHashArray(layer);
        if (at(proof, layerIndex + 1).indexOf(leaf) === -1) {
          return false;
        }
        const last2 = at(proof, proof.length - 1);
        if (leaf === at(last2, 0)) {
          return true;
        }
      }
      return false;
    } catch (err) {
      return false;
    }
  }
  class ProsopoApiError extends Error {
    constructor(error, context, ...params) {
      super(error ? error.message : "Unknown API Error");
      this.name = context && `${ProsopoApiError.name}@${context}` || ProsopoApiError.name;
      console.error("\n********************* ERROR *********************\n");
      console.error(this.cause, this.stack, ...params);
    }
  }
  class ProsopoCaptchaApi {
    constructor(userAccount, contract, provider, providerApi, web2, dappAccount) {
      this.userAccount = userAccount;
      this.contract = contract;
      this.provider = provider;
      this.providerApi = providerApi;
      this.web2 = web2;
      this.dappAccount = dappAccount;
    }
    async getCaptchaChallenge() {
      try {
        const captchaChallenge = await this.providerApi.getCaptchaChallenge(this.userAccount, this.provider);
        this.verifyCaptchaChallengeContent(this.provider, captchaChallenge);
        return captchaChallenge;
      } catch (e) {
        throw new ProsopoEnvError(e);
      }
    }
    verifyCaptchaChallengeContent(provider, captchaChallenge) {
      const first2 = at(captchaChallenge.captchas, 0);
      const proofLength = first2.proof.length;
      console.log(provider.provider);
      const last2 = at(first2.proof, proofLength - 1);
      if (provider.provider.datasetIdContent.toString() !== at(last2, 0)) {
        throw new ProsopoEnvError("CAPTCHA.INVALID_DATASET_CONTENT_ID");
      }
      for (const captchaWithProof of captchaChallenge.captchas) {
        if (!verifyCaptchaData(captchaWithProof)) {
          throw new ProsopoEnvError("CAPTCHA.INVALID_CAPTCHA_CHALLENGE");
        }
        if (!verifyProof(captchaWithProof.captcha.captchaContentId, captchaWithProof.proof)) {
          throw new ProsopoEnvError("CAPTCHA.INVALID_CAPTCHA_CHALLENGE");
        }
      }
      console.log("CAPTCHA.CHALLENGE_VERIFIED");
      return;
    }
    async submitCaptchaSolution(signer, requestHash, datasetId, solutions, salt) {
      const tree = new CaptchaMerkleTree();
      const captchasHashed = solutions.map((captcha) => computeCaptchaSolutionHash(captcha));
      tree.build(captchasHashed);
      const commitmentId = tree.root.hash;
      console.log("solveCaptchaChallenge commitmentId", commitmentId);
      const tx2 = void 0;
      let signature = void 0;
      if (this.web2) {
        if (!signer || !signer.signRaw) {
          throw new Error("Signer is not defined, cannot sign message to prove account ownership");
        }
        const signed = await signer.signRaw({
          address: this.userAccount,
          data: stringToHex(requestHash),
          type: "bytes"
        });
        signature = signed.signature;
      }
      let result;
      try {
        result = await this.providerApi.submitCaptchaSolution(solutions, requestHash, this.contract.pair.address, salt, signature);
      } catch (err) {
        throw new ProsopoApiError(err);
      }
      return [result, commitmentId, tx2];
    }
  }
  async function verifyCaptchaData(captchaWithProof) {
    const captcha = captchaWithProof.captcha;
    const proof = captchaWithProof.proof;
    if (!(await Promise.all(captcha.items.map(async (item) => (await computeItemHash(item)).hash === item.hash))).every((hash2) => hash2 === true)) {
      return false;
    }
    const captchaHash = computeCaptchaHash(captcha, false, false, false);
    if (captchaHash !== captcha.captchaContentId) {
      return false;
    }
    return at(proof, 0).indexOf(captchaHash) !== -1;
  }
  const ProsopoCaptchaApi$1 = ProsopoCaptchaApi;
  const CURRENT_ACCOUNT_KEY = "@prosopo/current_account";
  const PROVIDER_URL_KEY = "@prosopo/provider";
  function setAccount(account2) {
    localStorage.setItem(CURRENT_ACCOUNT_KEY, account2);
  }
  function getAccount() {
    return localStorage.getItem(CURRENT_ACCOUNT_KEY);
  }
  function setProviderUrl(providerUrl) {
    localStorage.setItem(PROVIDER_URL_KEY, providerUrl);
  }
  function getProviderUrl() {
    return localStorage.getItem(PROVIDER_URL_KEY);
  }
  const storage = {
    setAccount,
    getAccount,
    setProviderUrl,
    getProviderUrl
  };
  const defaultState = () => {
    return {
      // note order matters! see buildUpdateState. These fields are set in order, so disable modal first, then set loading to false, etc.
      showModal: false,
      loading: false,
      challenge: void 0,
      solutions: [],
      index: -1,
      isHuman: false,
      captchaApi: void 0,
      account: void 0
      // don't handle timeout here, this should be handled by the state management
    };
  };
  const buildUpdateState = (state, onStateUpdate) => {
    const updateCurrentState = (nextState) => {
      Object.assign(state, nextState);
      onStateUpdate(nextState);
      console.log("Procaptcha state update:", nextState, "\nResult:", state);
    };
    return updateCurrentState;
  };
  const getNetwork = (config2) => {
    const network = config2.networks[config2.defaultEnvironment];
    if (!network) {
      throw new Error(`No network found for environment ${config2.defaultEnvironment}`);
    }
    return network;
  };
  function Manager(configOptional, state, onStateUpdate, callbacks) {
    const alertError = (error) => {
      console.log(error);
      alert(error.message);
    };
    const events2 = Object.assign({
      onAccountNotFound: alertError,
      onError: alertError,
      onHuman: (output2) => {
        console.log("onHuman event triggered", output2);
      },
      onExtensionNotFound: () => {
        alert("No extension found");
      },
      onExpired: () => {
        alert("Challenge has expired, please try again");
      },
      onFailed: () => {
        alert("Captcha challenge failed. Please try again");
      }
    }, callbacks);
    const dispatchErrorEvent = (err) => {
      const error = err instanceof Error ? err : new Error(String(err));
      if (error instanceof AccountNotFoundError) {
        events2.onAccountNotFound(error.message);
      } else {
        events2.onError(error);
      }
    };
    const updateState = buildUpdateState(state, onStateUpdate);
    const getConfig2 = () => {
      const config2 = {
        userAccountAddress: "",
        ...configOptional
      };
      if (state.account) {
        config2.userAccountAddress = state.account.account.address;
      }
      return config2;
    };
    const fallable = async (fn) => {
      try {
        await fn();
      } catch (err) {
        console.error(err);
        dispatchErrorEvent(err);
        updateState({ isHuman: false, showModal: false, loading: false });
      }
    };
    const start = async () => {
      console.log("Starting procaptcha");
      await fallable(async () => {
        if (state.loading) {
          console.log("Procaptcha already loading");
          return;
        }
        if (state.isHuman) {
          console.log("already human");
          return;
        }
        resetState();
        updateState({ loading: true });
        const config2 = getConfig2();
        updateState({ dappAccount: config2.account.address });
        await sleep(100);
        const account2 = await loadAccount();
        const contract = await loadContract();
        let contractIsHuman = false;
        try {
          contractIsHuman = (await contract.query.dappOperatorIsHumanUser(account2.account.address, config2.solutionThreshold)).value.unwrap().unwrap();
        } catch (error) {
          console.warn(error);
        }
        if (contractIsHuman) {
          updateState({ isHuman: true, loading: false });
          events2.onHuman({
            user: account2.account.address,
            dapp: config2.account.address
          });
          return;
        }
        const providerUrlFromStorage = storage.getProviderUrl();
        let providerApi;
        if (providerUrlFromStorage) {
          providerApi = await loadProviderApi(providerUrlFromStorage);
          try {
            const verifyDappUserResponse = await providerApi.verifyDappUser(account2.account.address);
            if (verifyDappUserResponse.solutionApproved) {
              updateState({ isHuman: true, loading: false });
              events2.onHuman({
                providerUrl: providerUrlFromStorage,
                user: account2.account.address,
                dapp: config2.account.address,
                commitmentId: verifyDappUserResponse.commitmentId
              });
              return;
            }
          } catch (err) {
            console.error("Error contacting provider from storage", providerUrlFromStorage);
          }
        }
        const payload = {
          address: account2.account.address,
          data: stringToU8a("message"),
          type: "bytes"
        };
        const signed = await account2.extension.signer.signRaw(payload);
        console.log("Signature:", signed);
        const getRandomProviderResponse = await wrapQuery(contract.query.getRandomActiveProvider, contract.query)(account2.account.address, config2.account.address);
        const blockNumber = getRandomProviderResponse.blockNumber;
        console.log("provider", getRandomProviderResponse);
        const providerUrl = trimProviderUrl(getRandomProviderResponse.provider.url.toString());
        providerApi = await loadProviderApi(providerUrl);
        console.log("providerApi", providerApi);
        const captchaApi = await loadCaptchaApi(contract, getRandomProviderResponse, providerApi);
        console.log("captchaApi", captchaApi);
        const challenge = await captchaApi.getCaptchaChallenge();
        console.log("challenge", challenge);
        if (challenge.captchas.length <= 0) {
          throw new Error("No captchas returned from provider");
        }
        const timeMillis = challenge.captchas.map((captcha) => captcha.captcha.timeLimitMs || 30 * 1e3).reduce((a, b) => a + b);
        const timeout = setTimeout(() => {
          console.log("challenge expired after " + timeMillis + "ms");
          events2.onExpired();
          updateState({ isHuman: false, showModal: false, loading: false });
        }, timeMillis);
        updateState({
          index: 0,
          solutions: challenge.captchas.map(() => []),
          challenge,
          showModal: true,
          timeout,
          blockNumber
        });
      });
    };
    const submit = async () => {
      await fallable(async () => {
        console.log("submitting solutions");
        clearTimeout2();
        if (!state.challenge) {
          throw new Error("cannot submit, no challenge found");
        }
        updateState({ showModal: false });
        const challenge = state.challenge;
        const salt = randomAsHex();
        const captchaSolution = state.challenge.captchas.map((captcha, index2) => {
          const solution = at(state.solutions, index2);
          return {
            captchaId: captcha.captcha.captchaId,
            captchaContentId: captcha.captcha.captchaContentId,
            salt,
            solution
          };
        });
        const account2 = getAccount2();
        const blockNumber = getBlockNumber();
        const signer = account2.extension.signer;
        const first2 = at(challenge.captchas, 0);
        if (!first2.captcha.datasetId) {
          throw new Error("No datasetId set for challenge");
        }
        const captchaApi = getCaptchaApi();
        const submission = await captchaApi.submitCaptchaSolution(signer, challenge.requestHash, first2.captcha.datasetId, captchaSolution, salt);
        const isHuman = submission[0].solutionApproved;
        if (!isHuman) {
          events2.onFailed();
        }
        updateState({
          submission,
          isHuman,
          loading: false
        });
        if (state.isHuman) {
          const trimmedUrl = trimProviderUrl(captchaApi.provider.provider.url.toString());
          storage.setProviderUrl(trimmedUrl);
          events2.onHuman({
            providerUrl: trimmedUrl,
            user: account2.account.address,
            dapp: getDappAccount(),
            commitmentId: submission[1],
            blockNumber
          });
        }
      });
    };
    const cancel = async () => {
      console.log("cancel");
      clearTimeout2();
      resetState();
    };
    const select = (hash2) => {
      if (!state.challenge) {
        throw new Error("cannot select, no challenge found");
      }
      if (state.index >= state.challenge.captchas.length || state.index < 0) {
        throw new Error("cannot select, round index out of range");
      }
      const index2 = state.index;
      const solutions = state.solutions;
      const solution = at(solutions, index2);
      if (solution.includes(hash2)) {
        console.log("deselecting", hash2);
        solution.splice(solution.indexOf(hash2), 1);
      } else {
        console.log("selecting", hash2);
        solution.push(hash2);
      }
      updateState({ solutions });
    };
    const nextRound = () => {
      if (!state.challenge) {
        throw new Error("cannot proceed to next round, no challenge found");
      }
      if (state.index + 1 >= state.challenge.captchas.length) {
        throw new Error("cannot proceed to next round, already at last round");
      }
      console.log("proceeding to next round");
      updateState({ index: state.index + 1 });
    };
    const loadCaptchaApi = async (contract, provider, providerApi) => {
      const config2 = getConfig2();
      const captchaApi = new ProsopoCaptchaApi$1(getAccount2().account.address, contract, provider, providerApi, config2.web2, config2.account.address);
      updateState({ captchaApi });
      return getCaptchaApi();
    };
    const loadProviderApi = async (providerUrl) => {
      const config2 = getConfig2();
      const network = getNetwork(config2);
      return new ProviderApi(network, providerUrl, config2.account.address);
    };
    const clearTimeout2 = () => {
      window.clearTimeout(state.timeout);
      updateState({ timeout: void 0 });
    };
    const resetState = () => {
      clearTimeout2();
      updateState(defaultState());
    };
    const getCaptchaApi = () => {
      if (!state.captchaApi) {
        throw new Error("Captcha api not set");
      }
      return state.captchaApi;
    };
    const loadAccount = async () => {
      const config2 = getConfig2();
      if (!config2.web2 && !config2.userAccountAddress) {
        throw new Error("Account address has not been set for web3 mode");
      }
      const ext = config2.web2 ? new ExtWeb2() : new ExtWeb3();
      const account2 = await ext.getAccount(config2);
      storage.setAccount(account2.account.address);
      console.log("Using account:", account2);
      updateState({ account: account2 });
      return getAccount2();
    };
    const getAccount2 = () => {
      if (!state.account) {
        throw new Error("Account not loaded");
      }
      const account2 = state.account;
      return account2;
    };
    const getDappAccount = () => {
      if (!state.dappAccount) {
        throw new Error("Dapp account not loaded");
      }
      const dappAccount = state.dappAccount;
      return dappAccount;
    };
    const getBlockNumber = () => {
      if (!state.blockNumber) {
        throw new Error("Account not loaded");
      }
      const blockNumber = state.blockNumber;
      return blockNumber;
    };
    const loadContract = async () => {
      const config2 = getConfig2();
      const network = getNetwork(config2);
      const api = await ApiPromise.create({ provider: new WsProvider(network.endpoint) });
      const type = "sr25519";
      const keyring = new Keyring({ type, ss58Format: api.registry.chainSS58 });
      return new ProsopoCaptchaContract(api, abiJson, network.contract.address, keyring.addFromAddress(getAccount2().account.address), "prosopo", 0);
    };
    return {
      start,
      cancel,
      submit,
      select,
      nextRound
    };
  }
  function x64Add$1(m2, n) {
    m2 = [at(m2, 0) >>> 16, at(m2, 0) & 65535, at(m2, 1) >>> 16, at(m2, 1) & 65535];
    n = [at(n, 0) >>> 16, at(n, 0) & 65535, at(n, 1) >>> 16, at(n, 1) & 65535];
    const o = [0, 0, 0, 0];
    o[3] += at(m2, 3) + at(n, 3);
    o[2] += at(o, 3) >>> 16;
    o[3] &= 65535;
    o[2] += at(m2, 2) + at(n, 2);
    o[1] += at(o, 2) >>> 16;
    o[2] &= 65535;
    o[1] += at(m2, 1) + at(n, 1);
    o[0] += at(o, 1) >>> 16;
    o[1] &= 65535;
    o[0] += at(m2, 0) + at(n, 0);
    o[0] &= 65535;
    return [at(o, 0) << 16 | at(o, 1), at(o, 2) << 16 | at(o, 3)];
  }
  function x64Multiply$1(m2, n) {
    m2 = [at(m2, 0) >>> 16, at(m2, 0) & 65535, at(m2, 1) >>> 16, at(m2, 1) & 65535];
    n = [at(n, 0) >>> 16, at(n, 0) & 65535, at(n, 1) >>> 16, at(n, 1) & 65535];
    const o = [0, 0, 0, 0];
    o[3] += at(m2, 3) * at(n, 3);
    o[2] += at(o, 3) >>> 16;
    o[3] &= 65535;
    o[2] += at(m2, 2) * at(n, 3);
    o[1] += at(o, 2) >>> 16;
    o[2] &= 65535;
    o[2] += at(m2, 3) * at(n, 2);
    o[1] += at(o, 2) >>> 16;
    o[2] &= 65535;
    o[1] += at(m2, 1) * at(n, 3);
    o[0] += at(o, 1) >>> 16;
    o[1] &= 65535;
    o[1] += at(m2, 2) * at(n, 2);
    o[0] += at(o, 1) >>> 16;
    o[1] &= 65535;
    o[1] += at(m2, 3) * at(n, 1);
    o[0] += at(o, 1) >>> 16;
    o[1] &= 65535;
    o[0] += at(m2, 0) * at(n, 3) + at(m2, 1) * at(n, 2) + at(m2, 2) * at(n, 1) + at(m2, 3) * at(n, 0);
    o[0] &= 65535;
    return [at(o, 0) << 16 | at(o, 1), at(o, 2) << 16 | at(o, 3)];
  }
  function x64Rotl$1(m2, n) {
    n %= 64;
    if (n === 32) {
      return [at(m2, 1), at(m2, 0)];
    } else if (n < 32) {
      return [at(m2, 0) << n | at(m2, 1) >>> 32 - n, at(m2, 1) << n | at(m2, 0) >>> 32 - n];
    } else {
      n -= 32;
      return [at(m2, 1) << n | at(m2, 0) >>> 32 - n, at(m2, 0) << n | at(m2, 1) >>> 32 - n];
    }
  }
  function x64LeftShift$1(m2, n) {
    n %= 64;
    if (n === 0) {
      return m2;
    } else if (n < 32) {
      return [at(m2, 0) << n | at(m2, 1) >>> 32 - n, at(m2, 1) << n];
    } else {
      return [at(m2, 1) << n - 32, 0];
    }
  }
  function x64Xor$1(m2, n) {
    return [at(m2, 0) ^ at(n, 0), at(m2, 1) ^ at(n, 1)];
  }
  function x64Fmix$1(h) {
    h = x64Xor$1(h, [0, at(h, 0) >>> 1]);
    h = x64Multiply$1(h, [4283543511, 3981806797]);
    h = x64Xor$1(h, [0, at(h, 0) >>> 1]);
    h = x64Multiply$1(h, [3301882366, 444984403]);
    h = x64Xor$1(h, [0, at(h, 0) >>> 1]);
    return h;
  }
  function x64hash128$1(key, seed) {
    key = key || "";
    seed = seed || 0;
    const remainder = key.length % 16;
    const bytes2 = key.length - remainder;
    let h1 = [0, seed];
    let h2 = [0, seed];
    let k1 = [0, 0];
    let k2 = [0, 0];
    const c1 = [2277735313, 289559509];
    const c2 = [1291169091, 658871167];
    let i2 = 0;
    for (i2 = 0; i2 < bytes2; i2 = i2 + 16) {
      k1 = [
        key.charCodeAt(i2 + 4) & 255 | (key.charCodeAt(i2 + 5) & 255) << 8 | (key.charCodeAt(i2 + 6) & 255) << 16 | (key.charCodeAt(i2 + 7) & 255) << 24,
        key.charCodeAt(i2) & 255 | (key.charCodeAt(i2 + 1) & 255) << 8 | (key.charCodeAt(i2 + 2) & 255) << 16 | (key.charCodeAt(i2 + 3) & 255) << 24
      ];
      k2 = [
        key.charCodeAt(i2 + 12) & 255 | (key.charCodeAt(i2 + 13) & 255) << 8 | (key.charCodeAt(i2 + 14) & 255) << 16 | (key.charCodeAt(i2 + 15) & 255) << 24,
        key.charCodeAt(i2 + 8) & 255 | (key.charCodeAt(i2 + 9) & 255) << 8 | (key.charCodeAt(i2 + 10) & 255) << 16 | (key.charCodeAt(i2 + 11) & 255) << 24
      ];
      k1 = x64Multiply$1(k1, c1);
      k1 = x64Rotl$1(k1, 31);
      k1 = x64Multiply$1(k1, c2);
      h1 = x64Xor$1(h1, k1);
      h1 = x64Rotl$1(h1, 27);
      h1 = x64Add$1(h1, h2);
      h1 = x64Add$1(x64Multiply$1(h1, [0, 5]), [0, 1390208809]);
      k2 = x64Multiply$1(k2, c2);
      k2 = x64Rotl$1(k2, 33);
      k2 = x64Multiply$1(k2, c1);
      h2 = x64Xor$1(h2, k2);
      h2 = x64Rotl$1(h2, 31);
      h2 = x64Add$1(h2, h1);
      h2 = x64Add$1(x64Multiply$1(h2, [0, 5]), [0, 944331445]);
    }
    k1 = [0, 0];
    k2 = [0, 0];
    switch (remainder) {
      case 15:
        k2 = x64Xor$1(k2, x64LeftShift$1([0, key.charCodeAt(i2 + 14)], 48));
        break;
      case 14:
        k2 = x64Xor$1(k2, x64LeftShift$1([0, key.charCodeAt(i2 + 13)], 40));
        break;
      case 13:
        k2 = x64Xor$1(k2, x64LeftShift$1([0, key.charCodeAt(i2 + 12)], 32));
        break;
      case 12:
        k2 = x64Xor$1(k2, x64LeftShift$1([0, key.charCodeAt(i2 + 11)], 24));
        break;
      case 11:
        k2 = x64Xor$1(k2, x64LeftShift$1([0, key.charCodeAt(i2 + 10)], 16));
        break;
      case 10:
        k2 = x64Xor$1(k2, x64LeftShift$1([0, key.charCodeAt(i2 + 9)], 8));
        break;
      case 9:
        k2 = x64Xor$1(k2, [0, key.charCodeAt(i2 + 8)]);
        k2 = x64Multiply$1(k2, c2);
        k2 = x64Rotl$1(k2, 33);
        k2 = x64Multiply$1(k2, c1);
        h2 = x64Xor$1(h2, k2);
        break;
      case 8:
        k1 = x64Xor$1(k1, x64LeftShift$1([0, key.charCodeAt(i2 + 7)], 56));
        break;
      case 7:
        k1 = x64Xor$1(k1, x64LeftShift$1([0, key.charCodeAt(i2 + 6)], 48));
        break;
      case 6:
        k1 = x64Xor$1(k1, x64LeftShift$1([0, key.charCodeAt(i2 + 5)], 40));
        break;
      case 5:
        k1 = x64Xor$1(k1, x64LeftShift$1([0, key.charCodeAt(i2 + 4)], 32));
        break;
      case 4:
        k1 = x64Xor$1(k1, x64LeftShift$1([0, key.charCodeAt(i2 + 3)], 24));
        break;
      case 3:
        k1 = x64Xor$1(k1, x64LeftShift$1([0, key.charCodeAt(i2 + 2)], 16));
        break;
      case 2:
        k1 = x64Xor$1(k1, x64LeftShift$1([0, key.charCodeAt(i2 + 1)], 8));
        break;
      case 1:
        k1 = x64Xor$1(k1, [0, key.charCodeAt(i2)]);
        k1 = x64Multiply$1(k1, c1);
        k1 = x64Rotl$1(k1, 31);
        k1 = x64Multiply$1(k1, c2);
        h1 = x64Xor$1(h1, k1);
    }
    h1 = x64Xor$1(h1, [0, key.length]);
    h2 = x64Xor$1(h2, [0, key.length]);
    h1 = x64Add$1(h1, h2);
    h2 = x64Add$1(h2, h1);
    h1 = x64Fmix$1(h1);
    h2 = x64Fmix$1(h2);
    h1 = x64Add$1(h1, h2);
    h2 = x64Add$1(h2, h1);
    return ("00000000" + (at(h1, 0) >>> 0).toString(16)).slice(-8) + ("00000000" + (at(h1, 1) >>> 0).toString(16)).slice(-8) + ("00000000" + (at(h2, 0) >>> 0).toString(16)).slice(-8) + ("00000000" + (at(h2, 1) >>> 0).toString(16)).slice(-8);
  }
  function picassoCanvas(roundNumber, seed, params) {
    const { area, offsetParameter, multiplier, fontSizeFactor, maxShadowBlur } = params;
    class Prng {
      constructor(seed2) {
        this.currentNumber = seed2 % offsetParameter;
        if (this.currentNumber <= 0) {
          this.currentNumber += offsetParameter;
        }
      }
      getNext() {
        this.currentNumber = multiplier * this.currentNumber % offsetParameter;
        return this.currentNumber;
      }
    }
    function adaptRandomNumberToContext(randomNumber, maxBound, floatAllowed) {
      randomNumber = (randomNumber - 1) / offsetParameter;
      if (floatAllowed) {
        return randomNumber * maxBound;
      }
      return Math.floor(randomNumber * maxBound);
    }
    function addRandomCanvasGradient(prng, context, area2) {
      const canvasGradient = context.createRadialGradient(adaptRandomNumberToContext(prng.getNext(), area2.width, void 0), adaptRandomNumberToContext(prng.getNext(), area2.height, void 0), adaptRandomNumberToContext(prng.getNext(), area2.width, void 0), adaptRandomNumberToContext(prng.getNext(), area2.width, void 0), adaptRandomNumberToContext(prng.getNext(), area2.height, void 0), adaptRandomNumberToContext(prng.getNext(), area2.width, void 0));
      canvasGradient.addColorStop(0, at(colors, adaptRandomNumberToContext(prng.getNext(), colors.length, void 0)));
      canvasGradient.addColorStop(1, at(colors, adaptRandomNumberToContext(prng.getNext(), colors.length, void 0)));
      context.fillStyle = canvasGradient;
    }
    function generateRandomWord(prng, wordLength) {
      const minAscii = 65;
      const maxAscii = 126;
      const wordGenerated = [];
      for (let i2 = 0; i2 < wordLength; i2++) {
        const asciiCode = minAscii + prng.getNext() % (maxAscii - minAscii);
        wordGenerated.push(String.fromCharCode(asciiCode));
      }
      return wordGenerated.join("");
    }
    if (window.CanvasRenderingContext2D) {
      return "unknown";
    }
    const colors = [
      "#FF6633",
      "#FFB399",
      "#FF33FF",
      "#FFFF99",
      "#00B3E6",
      "#E6B333",
      "#3366E6",
      "#999966",
      "#99FF99",
      "#B34D4D",
      "#80B300",
      "#809900",
      "#E6B3B3",
      "#6680B3",
      "#66991A",
      "#FF99E6",
      "#CCFF1A",
      "#FF1A66",
      "#E6331A",
      "#33FFCC",
      "#66994D",
      "#B366CC",
      "#4D8000",
      "#B33300",
      "#CC80CC",
      "#66664D",
      "#991AFF",
      "#E666FF",
      "#4DB3FF",
      "#1AB399",
      "#E666B3",
      "#33991A",
      "#CC9999",
      "#B3B31A",
      "#00E680",
      "#4D8066",
      "#809980",
      "#E6FF80",
      "#1AFF33",
      "#999933",
      "#FF3380",
      "#CCCC00",
      "#66E64D",
      "#4D80CC",
      "#9900B3",
      "#E64D66",
      "#4DB380",
      "#FF4D4D",
      "#99E6E6",
      "#6666FF"
    ];
    const primitives = [
      function arc(prng, context, area2) {
        context.beginPath();
        context.arc(adaptRandomNumberToContext(prng.getNext(), area2.width, void 0), adaptRandomNumberToContext(prng.getNext(), area2.height, void 0), adaptRandomNumberToContext(prng.getNext(), Math.min(area2.width, area2.height), void 0), adaptRandomNumberToContext(prng.getNext(), 2 * Math.PI, true), adaptRandomNumberToContext(prng.getNext(), 2 * Math.PI, true));
        context.stroke();
      },
      function text(prng, context, area2) {
        const wordLength = Math.max(1, adaptRandomNumberToContext(prng.getNext(), 5, void 0));
        const textToStroke = generateRandomWord(prng, wordLength);
        context.font = `${area2.height / fontSizeFactor}px aafakefontaa`;
        context.strokeText(textToStroke, adaptRandomNumberToContext(prng.getNext(), area2.width, void 0), adaptRandomNumberToContext(prng.getNext(), area2.height, void 0), adaptRandomNumberToContext(prng.getNext(), area2.width, void 0));
      },
      function bezierCurve(prng, context, area2) {
        context.beginPath();
        context.moveTo(adaptRandomNumberToContext(prng.getNext(), area2.width, void 0), adaptRandomNumberToContext(prng.getNext(), area2.height, void 0));
        context.bezierCurveTo(adaptRandomNumberToContext(prng.getNext(), area2.width, void 0), adaptRandomNumberToContext(prng.getNext(), area2.height, void 0), adaptRandomNumberToContext(prng.getNext(), area2.width, void 0), adaptRandomNumberToContext(prng.getNext(), area2.height, void 0), adaptRandomNumberToContext(prng.getNext(), area2.width, void 0), adaptRandomNumberToContext(prng.getNext(), area2.height, void 0));
        context.stroke();
      },
      function quadraticCurve(prng, context, area2) {
        context.beginPath();
        context.moveTo(adaptRandomNumberToContext(prng.getNext(), area2.width, void 0), adaptRandomNumberToContext(prng.getNext(), area2.height, void 0));
        context.quadraticCurveTo(adaptRandomNumberToContext(prng.getNext(), area2.width, void 0), adaptRandomNumberToContext(prng.getNext(), area2.height, void 0), adaptRandomNumberToContext(prng.getNext(), area2.width, void 0), adaptRandomNumberToContext(prng.getNext(), area2.height, void 0));
        context.stroke();
      },
      function ellipse(prng, context, area2) {
        context.beginPath();
        context.ellipse(adaptRandomNumberToContext(prng.getNext(), area2.width, void 0), adaptRandomNumberToContext(prng.getNext(), area2.height, void 0), adaptRandomNumberToContext(prng.getNext(), Math.floor(area2.width / 2), void 0), adaptRandomNumberToContext(prng.getNext(), Math.floor(area2.height / 2), void 0), adaptRandomNumberToContext(prng.getNext(), 2 * Math.PI, true), adaptRandomNumberToContext(prng.getNext(), 2 * Math.PI, true), adaptRandomNumberToContext(prng.getNext(), 2 * Math.PI, true));
        context.stroke();
      }
    ];
    try {
      const prng = new Prng(seed);
      const canvasElt = document.createElement("canvas");
      canvasElt.width = area.width;
      canvasElt.height = area.height;
      canvasElt.style.display = "none";
      const context = canvasElt.getContext("2d");
      if (context !== null) {
        for (let i2 = 0; i2 < roundNumber; i2++) {
          addRandomCanvasGradient(prng, context, area);
          context.shadowBlur = adaptRandomNumberToContext(prng.getNext(), maxShadowBlur, void 0);
          context.shadowColor = at(colors, adaptRandomNumberToContext(prng.getNext(), colors.length, void 0));
          const randomPrimitive = at(primitives, adaptRandomNumberToContext(prng.getNext(), primitives.length, void 0));
          randomPrimitive(prng, context, area);
          context.fill();
        }
      }
      return x64hash128$1(canvasElt.toDataURL(), seed);
    } catch (e) {
      console.log(e);
      throw new ProsopoEnvError(e);
    }
  }
  var version = "3.4.2";
  function wait(durationMs, resolveWith) {
    return new Promise(function(resolve) {
      return setTimeout(resolve, durationMs, resolveWith);
    });
  }
  function requestIdleCallbackIfAvailable(fallbackTimeout, deadlineTimeout) {
    if (deadlineTimeout === void 0) {
      deadlineTimeout = Infinity;
    }
    var requestIdleCallback = window.requestIdleCallback;
    if (requestIdleCallback) {
      return new Promise(function(resolve) {
        return requestIdleCallback.call(window, function() {
          return resolve();
        }, { timeout: deadlineTimeout });
      });
    } else {
      return wait(Math.min(fallbackTimeout, deadlineTimeout));
    }
  }
  function isPromise(value) {
    return !!value && typeof value.then === "function";
  }
  function awaitIfAsync(action, callback) {
    try {
      var returnedValue = action();
      if (isPromise(returnedValue)) {
        returnedValue.then(function(result) {
          return callback(true, result);
        }, function(error) {
          return callback(false, error);
        });
      } else {
        callback(true, returnedValue);
      }
    } catch (error) {
      callback(false, error);
    }
  }
  function mapWithBreaks(items, callback, loopReleaseInterval) {
    if (loopReleaseInterval === void 0) {
      loopReleaseInterval = 16;
    }
    return __awaiter$2(this, void 0, void 0, function() {
      var results, lastLoopReleaseTime, i2, now;
      return __generator$2(this, function(_a) {
        switch (_a.label) {
          case 0:
            results = Array(items.length);
            lastLoopReleaseTime = Date.now();
            i2 = 0;
            _a.label = 1;
          case 1:
            if (!(i2 < items.length))
              return [3, 4];
            results[i2] = callback(items[i2], i2);
            now = Date.now();
            if (!(now >= lastLoopReleaseTime + loopReleaseInterval))
              return [3, 3];
            lastLoopReleaseTime = now;
            return [4, wait(0)];
          case 2:
            _a.sent();
            _a.label = 3;
          case 3:
            ++i2;
            return [3, 1];
          case 4:
            return [2, results];
        }
      });
    });
  }
  function suppressUnhandledRejectionWarning(promise) {
    promise.then(void 0, function() {
      return void 0;
    });
  }
  function x64Add(m2, n) {
    m2 = [m2[0] >>> 16, m2[0] & 65535, m2[1] >>> 16, m2[1] & 65535];
    n = [n[0] >>> 16, n[0] & 65535, n[1] >>> 16, n[1] & 65535];
    var o = [0, 0, 0, 0];
    o[3] += m2[3] + n[3];
    o[2] += o[3] >>> 16;
    o[3] &= 65535;
    o[2] += m2[2] + n[2];
    o[1] += o[2] >>> 16;
    o[2] &= 65535;
    o[1] += m2[1] + n[1];
    o[0] += o[1] >>> 16;
    o[1] &= 65535;
    o[0] += m2[0] + n[0];
    o[0] &= 65535;
    return [o[0] << 16 | o[1], o[2] << 16 | o[3]];
  }
  function x64Multiply(m2, n) {
    m2 = [m2[0] >>> 16, m2[0] & 65535, m2[1] >>> 16, m2[1] & 65535];
    n = [n[0] >>> 16, n[0] & 65535, n[1] >>> 16, n[1] & 65535];
    var o = [0, 0, 0, 0];
    o[3] += m2[3] * n[3];
    o[2] += o[3] >>> 16;
    o[3] &= 65535;
    o[2] += m2[2] * n[3];
    o[1] += o[2] >>> 16;
    o[2] &= 65535;
    o[2] += m2[3] * n[2];
    o[1] += o[2] >>> 16;
    o[2] &= 65535;
    o[1] += m2[1] * n[3];
    o[0] += o[1] >>> 16;
    o[1] &= 65535;
    o[1] += m2[2] * n[2];
    o[0] += o[1] >>> 16;
    o[1] &= 65535;
    o[1] += m2[3] * n[1];
    o[0] += o[1] >>> 16;
    o[1] &= 65535;
    o[0] += m2[0] * n[3] + m2[1] * n[2] + m2[2] * n[1] + m2[3] * n[0];
    o[0] &= 65535;
    return [o[0] << 16 | o[1], o[2] << 16 | o[3]];
  }
  function x64Rotl(m2, n) {
    n %= 64;
    if (n === 32) {
      return [m2[1], m2[0]];
    } else if (n < 32) {
      return [m2[0] << n | m2[1] >>> 32 - n, m2[1] << n | m2[0] >>> 32 - n];
    } else {
      n -= 32;
      return [m2[1] << n | m2[0] >>> 32 - n, m2[0] << n | m2[1] >>> 32 - n];
    }
  }
  function x64LeftShift(m2, n) {
    n %= 64;
    if (n === 0) {
      return m2;
    } else if (n < 32) {
      return [m2[0] << n | m2[1] >>> 32 - n, m2[1] << n];
    } else {
      return [m2[1] << n - 32, 0];
    }
  }
  function x64Xor(m2, n) {
    return [m2[0] ^ n[0], m2[1] ^ n[1]];
  }
  function x64Fmix(h) {
    h = x64Xor(h, [0, h[0] >>> 1]);
    h = x64Multiply(h, [4283543511, 3981806797]);
    h = x64Xor(h, [0, h[0] >>> 1]);
    h = x64Multiply(h, [3301882366, 444984403]);
    h = x64Xor(h, [0, h[0] >>> 1]);
    return h;
  }
  function x64hash128(key, seed) {
    key = key || "";
    seed = seed || 0;
    var remainder = key.length % 16;
    var bytes2 = key.length - remainder;
    var h1 = [0, seed];
    var h2 = [0, seed];
    var k1 = [0, 0];
    var k2 = [0, 0];
    var c1 = [2277735313, 289559509];
    var c2 = [1291169091, 658871167];
    var i2;
    for (i2 = 0; i2 < bytes2; i2 = i2 + 16) {
      k1 = [
        key.charCodeAt(i2 + 4) & 255 | (key.charCodeAt(i2 + 5) & 255) << 8 | (key.charCodeAt(i2 + 6) & 255) << 16 | (key.charCodeAt(i2 + 7) & 255) << 24,
        key.charCodeAt(i2) & 255 | (key.charCodeAt(i2 + 1) & 255) << 8 | (key.charCodeAt(i2 + 2) & 255) << 16 | (key.charCodeAt(i2 + 3) & 255) << 24
      ];
      k2 = [
        key.charCodeAt(i2 + 12) & 255 | (key.charCodeAt(i2 + 13) & 255) << 8 | (key.charCodeAt(i2 + 14) & 255) << 16 | (key.charCodeAt(i2 + 15) & 255) << 24,
        key.charCodeAt(i2 + 8) & 255 | (key.charCodeAt(i2 + 9) & 255) << 8 | (key.charCodeAt(i2 + 10) & 255) << 16 | (key.charCodeAt(i2 + 11) & 255) << 24
      ];
      k1 = x64Multiply(k1, c1);
      k1 = x64Rotl(k1, 31);
      k1 = x64Multiply(k1, c2);
      h1 = x64Xor(h1, k1);
      h1 = x64Rotl(h1, 27);
      h1 = x64Add(h1, h2);
      h1 = x64Add(x64Multiply(h1, [0, 5]), [0, 1390208809]);
      k2 = x64Multiply(k2, c2);
      k2 = x64Rotl(k2, 33);
      k2 = x64Multiply(k2, c1);
      h2 = x64Xor(h2, k2);
      h2 = x64Rotl(h2, 31);
      h2 = x64Add(h2, h1);
      h2 = x64Add(x64Multiply(h2, [0, 5]), [0, 944331445]);
    }
    k1 = [0, 0];
    k2 = [0, 0];
    switch (remainder) {
      case 15:
        k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i2 + 14)], 48));
      case 14:
        k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i2 + 13)], 40));
      case 13:
        k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i2 + 12)], 32));
      case 12:
        k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i2 + 11)], 24));
      case 11:
        k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i2 + 10)], 16));
      case 10:
        k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i2 + 9)], 8));
      case 9:
        k2 = x64Xor(k2, [0, key.charCodeAt(i2 + 8)]);
        k2 = x64Multiply(k2, c2);
        k2 = x64Rotl(k2, 33);
        k2 = x64Multiply(k2, c1);
        h2 = x64Xor(h2, k2);
      case 8:
        k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i2 + 7)], 56));
      case 7:
        k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i2 + 6)], 48));
      case 6:
        k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i2 + 5)], 40));
      case 5:
        k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i2 + 4)], 32));
      case 4:
        k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i2 + 3)], 24));
      case 3:
        k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i2 + 2)], 16));
      case 2:
        k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i2 + 1)], 8));
      case 1:
        k1 = x64Xor(k1, [0, key.charCodeAt(i2)]);
        k1 = x64Multiply(k1, c1);
        k1 = x64Rotl(k1, 31);
        k1 = x64Multiply(k1, c2);
        h1 = x64Xor(h1, k1);
    }
    h1 = x64Xor(h1, [0, key.length]);
    h2 = x64Xor(h2, [0, key.length]);
    h1 = x64Add(h1, h2);
    h2 = x64Add(h2, h1);
    h1 = x64Fmix(h1);
    h2 = x64Fmix(h2);
    h1 = x64Add(h1, h2);
    h2 = x64Add(h2, h1);
    return ("00000000" + (h1[0] >>> 0).toString(16)).slice(-8) + ("00000000" + (h1[1] >>> 0).toString(16)).slice(-8) + ("00000000" + (h2[0] >>> 0).toString(16)).slice(-8) + ("00000000" + (h2[1] >>> 0).toString(16)).slice(-8);
  }
  function errorToObject(error) {
    var _a;
    return __assign({ name: error.name, message: error.message, stack: (_a = error.stack) === null || _a === void 0 ? void 0 : _a.split("\n") }, error);
  }
  function includes(haystack, needle) {
    for (var i2 = 0, l2 = haystack.length; i2 < l2; ++i2) {
      if (haystack[i2] === needle) {
        return true;
      }
    }
    return false;
  }
  function excludes(haystack, needle) {
    return !includes(haystack, needle);
  }
  function toInt(value) {
    return parseInt(value);
  }
  function toFloat(value) {
    return parseFloat(value);
  }
  function replaceNaN(value, replacement) {
    return typeof value === "number" && isNaN(value) ? replacement : value;
  }
  function countTruthy(values2) {
    return values2.reduce(function(sum, value) {
      return sum + (value ? 1 : 0);
    }, 0);
  }
  function round$1(value, base) {
    if (base === void 0) {
      base = 1;
    }
    if (Math.abs(base) >= 1) {
      return Math.round(value / base) * base;
    } else {
      var counterBase = 1 / base;
      return Math.round(value * counterBase) / counterBase;
    }
  }
  function parseSimpleCssSelector(selector) {
    var _a, _b;
    var errorMessage = "Unexpected syntax '".concat(selector, "'");
    var tagMatch = /^\s*([a-z-]*)(.*)$/i.exec(selector);
    var tag = tagMatch[1] || void 0;
    var attributes = {};
    var partsRegex = /([.:#][\w-]+|\[.+?\])/gi;
    var addAttribute = function(name, value) {
      attributes[name] = attributes[name] || [];
      attributes[name].push(value);
    };
    for (; ; ) {
      var match2 = partsRegex.exec(tagMatch[2]);
      if (!match2) {
        break;
      }
      var part = match2[0];
      switch (part[0]) {
        case ".":
          addAttribute("class", part.slice(1));
          break;
        case "#":
          addAttribute("id", part.slice(1));
          break;
        case "[": {
          var attributeMatch = /^\[([\w-]+)([~|^$*]?=("(.*?)"|([\w-]+)))?(\s+[is])?\]$/.exec(part);
          if (attributeMatch) {
            addAttribute(attributeMatch[1], (_b = (_a = attributeMatch[4]) !== null && _a !== void 0 ? _a : attributeMatch[5]) !== null && _b !== void 0 ? _b : "");
          } else {
            throw new Error(errorMessage);
          }
          break;
        }
        default:
          throw new Error(errorMessage);
      }
    }
    return [tag, attributes];
  }
  function ensureErrorWithMessage(error) {
    return error && typeof error === "object" && "message" in error ? error : { message: error };
  }
  function isFinalResultLoaded(loadResult) {
    return typeof loadResult !== "function";
  }
  function loadSource(source, sourceOptions) {
    var sourceLoadPromise = new Promise(function(resolveLoad) {
      var loadStartTime = Date.now();
      awaitIfAsync(source.bind(null, sourceOptions), function() {
        var loadArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          loadArgs[_i] = arguments[_i];
        }
        var loadDuration = Date.now() - loadStartTime;
        if (!loadArgs[0]) {
          return resolveLoad(function() {
            return { error: ensureErrorWithMessage(loadArgs[1]), duration: loadDuration };
          });
        }
        var loadResult = loadArgs[1];
        if (isFinalResultLoaded(loadResult)) {
          return resolveLoad(function() {
            return { value: loadResult, duration: loadDuration };
          });
        }
        resolveLoad(function() {
          return new Promise(function(resolveGet) {
            var getStartTime = Date.now();
            awaitIfAsync(loadResult, function() {
              var getArgs = [];
              for (var _i2 = 0; _i2 < arguments.length; _i2++) {
                getArgs[_i2] = arguments[_i2];
              }
              var duration2 = loadDuration + Date.now() - getStartTime;
              if (!getArgs[0]) {
                return resolveGet({ error: ensureErrorWithMessage(getArgs[1]), duration: duration2 });
              }
              resolveGet({ value: getArgs[1], duration: duration2 });
            });
          });
        });
      });
    });
    suppressUnhandledRejectionWarning(sourceLoadPromise);
    return function getComponent() {
      return sourceLoadPromise.then(function(finalizeSource) {
        return finalizeSource();
      });
    };
  }
  function loadSources(sources2, sourceOptions, excludeSources) {
    var includedSources = Object.keys(sources2).filter(function(sourceKey) {
      return excludes(excludeSources, sourceKey);
    });
    var sourceGettersPromise = mapWithBreaks(includedSources, function(sourceKey) {
      return loadSource(sources2[sourceKey], sourceOptions);
    });
    suppressUnhandledRejectionWarning(sourceGettersPromise);
    return function getComponents() {
      return __awaiter$2(this, void 0, void 0, function() {
        var sourceGetters, componentPromises, componentArray, components, index2;
        return __generator$2(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, sourceGettersPromise];
            case 1:
              sourceGetters = _a.sent();
              return [4, mapWithBreaks(sourceGetters, function(sourceGetter) {
                var componentPromise = sourceGetter();
                suppressUnhandledRejectionWarning(componentPromise);
                return componentPromise;
              })];
            case 2:
              componentPromises = _a.sent();
              return [
                4,
                Promise.all(componentPromises)
                // Keeping the component keys order the same as the source keys order
              ];
            case 3:
              componentArray = _a.sent();
              components = {};
              for (index2 = 0; index2 < includedSources.length; ++index2) {
                components[includedSources[index2]] = componentArray[index2];
              }
              return [2, components];
          }
        });
      });
    };
  }
  function isTrident() {
    var w = window;
    var n = navigator;
    return countTruthy([
      "MSCSSMatrix" in w,
      "msSetImmediate" in w,
      "msIndexedDB" in w,
      "msMaxTouchPoints" in n,
      "msPointerEnabled" in n
    ]) >= 4;
  }
  function isEdgeHTML() {
    var w = window;
    var n = navigator;
    return countTruthy(["msWriteProfilerMark" in w, "MSStream" in w, "msLaunchUri" in n, "msSaveBlob" in n]) >= 3 && !isTrident();
  }
  function isChromium() {
    var w = window;
    var n = navigator;
    return countTruthy([
      "webkitPersistentStorage" in n,
      "webkitTemporaryStorage" in n,
      n.vendor.indexOf("Google") === 0,
      "webkitResolveLocalFileSystemURL" in w,
      "BatteryManager" in w,
      "webkitMediaStream" in w,
      "webkitSpeechGrammar" in w
    ]) >= 5;
  }
  function isWebKit() {
    var w = window;
    var n = navigator;
    return countTruthy([
      "ApplePayError" in w,
      "CSSPrimitiveValue" in w,
      "Counter" in w,
      n.vendor.indexOf("Apple") === 0,
      "getStorageUpdates" in n,
      "WebKitMediaKeys" in w
    ]) >= 4;
  }
  function isDesktopSafari() {
    var w = window;
    return countTruthy([
      "safari" in w,
      !("DeviceMotionEvent" in w),
      !("ongestureend" in w),
      !("standalone" in navigator)
    ]) >= 3;
  }
  function isGecko() {
    var _a, _b;
    var w = window;
    return countTruthy([
      "buildID" in navigator,
      "MozAppearance" in ((_b = (_a = document.documentElement) === null || _a === void 0 ? void 0 : _a.style) !== null && _b !== void 0 ? _b : {}),
      "onmozfullscreenchange" in w,
      "mozInnerScreenX" in w,
      "CSSMozDocumentRule" in w,
      "CanvasCaptureMediaStream" in w
    ]) >= 4;
  }
  function isChromium86OrNewer() {
    var w = window;
    return countTruthy([
      !("MediaSettingsRange" in w),
      "RTCEncodedAudioFrame" in w,
      "" + w.Intl === "[object Intl]",
      "" + w.Reflect === "[object Reflect]"
    ]) >= 3;
  }
  function isWebKit606OrNewer() {
    var w = window;
    return countTruthy([
      "DOMRectList" in w,
      "RTCPeerConnectionIceEvent" in w,
      "SVGGeometryElement" in w,
      "ontransitioncancel" in w
    ]) >= 3;
  }
  function isIPad() {
    if (navigator.platform === "iPad") {
      return true;
    }
    var s = screen;
    var screenRatio = s.width / s.height;
    return countTruthy([
      "MediaSource" in window,
      !!Element.prototype.webkitRequestFullscreen,
      // iPhone 4S that runs iOS 9 matches this. But it won't match the criteria above, so it won't be detected as iPad.
      screenRatio > 0.65 && screenRatio < 1.53
    ]) >= 2;
  }
  function getFullscreenElement() {
    var d = document;
    return d.fullscreenElement || d.msFullscreenElement || d.mozFullScreenElement || d.webkitFullscreenElement || null;
  }
  function exitFullscreen() {
    var d = document;
    return (d.exitFullscreen || d.msExitFullscreen || d.mozCancelFullScreen || d.webkitExitFullscreen).call(d);
  }
  function isAndroid() {
    var isItChromium = isChromium();
    var isItGecko = isGecko();
    if (!isItChromium && !isItGecko) {
      return false;
    }
    var w = window;
    return countTruthy([
      "onorientationchange" in w,
      "orientation" in w,
      isItChromium && !("SharedWorker" in w),
      isItGecko && /android/i.test(navigator.appVersion)
    ]) >= 2;
  }
  function getAudioFingerprint() {
    var w = window;
    var AudioContext = w.OfflineAudioContext || w.webkitOfflineAudioContext;
    if (!AudioContext) {
      return -2;
    }
    if (doesCurrentBrowserSuspendAudioContext()) {
      return -1;
    }
    var hashFromIndex = 4500;
    var hashToIndex = 5e3;
    var context = new AudioContext(1, hashToIndex, 44100);
    var oscillator = context.createOscillator();
    oscillator.type = "triangle";
    oscillator.frequency.value = 1e4;
    var compressor = context.createDynamicsCompressor();
    compressor.threshold.value = -50;
    compressor.knee.value = 40;
    compressor.ratio.value = 12;
    compressor.attack.value = 0;
    compressor.release.value = 0.25;
    oscillator.connect(compressor);
    compressor.connect(context.destination);
    oscillator.start(0);
    var _a = startRenderingAudio(context), renderPromise = _a[0], finishRendering = _a[1];
    var fingerprintPromise = renderPromise.then(function(buffer) {
      return getHash$1(buffer.getChannelData(0).subarray(hashFromIndex));
    }, function(error) {
      if (error.name === "timeout" || error.name === "suspended") {
        return -3;
      }
      throw error;
    });
    suppressUnhandledRejectionWarning(fingerprintPromise);
    return function() {
      finishRendering();
      return fingerprintPromise;
    };
  }
  function doesCurrentBrowserSuspendAudioContext() {
    return isWebKit() && !isDesktopSafari() && !isWebKit606OrNewer();
  }
  function startRenderingAudio(context) {
    var renderTryMaxCount = 3;
    var renderRetryDelay = 500;
    var runningMaxAwaitTime = 500;
    var runningSufficientTime = 5e3;
    var finalize = function() {
      return void 0;
    };
    var resultPromise = new Promise(function(resolve, reject) {
      var isFinalized = false;
      var renderTryCount = 0;
      var startedRunningAt = 0;
      context.oncomplete = function(event) {
        return resolve(event.renderedBuffer);
      };
      var startRunningTimeout = function() {
        setTimeout(function() {
          return reject(makeInnerError(
            "timeout"
            /* InnerErrorName.Timeout */
          ));
        }, Math.min(runningMaxAwaitTime, startedRunningAt + runningSufficientTime - Date.now()));
      };
      var tryRender = function() {
        try {
          var renderingPromise = context.startRendering();
          if (isPromise(renderingPromise)) {
            suppressUnhandledRejectionWarning(renderingPromise);
          }
          switch (context.state) {
            case "running":
              startedRunningAt = Date.now();
              if (isFinalized) {
                startRunningTimeout();
              }
              break;
            case "suspended":
              if (!document.hidden) {
                renderTryCount++;
              }
              if (isFinalized && renderTryCount >= renderTryMaxCount) {
                reject(makeInnerError(
                  "suspended"
                  /* InnerErrorName.Suspended */
                ));
              } else {
                setTimeout(tryRender, renderRetryDelay);
              }
              break;
          }
        } catch (error) {
          reject(error);
        }
      };
      tryRender();
      finalize = function() {
        if (!isFinalized) {
          isFinalized = true;
          if (startedRunningAt > 0) {
            startRunningTimeout();
          }
        }
      };
    });
    return [resultPromise, finalize];
  }
  function getHash$1(signal) {
    var hash2 = 0;
    for (var i2 = 0; i2 < signal.length; ++i2) {
      hash2 += Math.abs(signal[i2]);
    }
    return hash2;
  }
  function makeInnerError(name) {
    var error = new Error(name);
    error.name = name;
    return error;
  }
  function withIframe(action, initialHtml, domPollInterval) {
    var _a, _b, _c;
    if (domPollInterval === void 0) {
      domPollInterval = 50;
    }
    return __awaiter$2(this, void 0, void 0, function() {
      var d, iframe;
      return __generator$2(this, function(_d) {
        switch (_d.label) {
          case 0:
            d = document;
            _d.label = 1;
          case 1:
            if (!!d.body)
              return [3, 3];
            return [4, wait(domPollInterval)];
          case 2:
            _d.sent();
            return [3, 1];
          case 3:
            iframe = d.createElement("iframe");
            _d.label = 4;
          case 4:
            _d.trys.push([4, , 10, 11]);
            return [4, new Promise(function(_resolve, _reject) {
              var isComplete = false;
              var resolve = function() {
                isComplete = true;
                _resolve();
              };
              var reject = function(error) {
                isComplete = true;
                _reject(error);
              };
              iframe.onload = resolve;
              iframe.onerror = reject;
              var style2 = iframe.style;
              style2.setProperty("display", "block", "important");
              style2.position = "absolute";
              style2.top = "0";
              style2.left = "0";
              style2.visibility = "hidden";
              if (initialHtml && "srcdoc" in iframe) {
                iframe.srcdoc = initialHtml;
              } else {
                iframe.src = "about:blank";
              }
              d.body.appendChild(iframe);
              var checkReadyState = function() {
                var _a2, _b2;
                if (isComplete) {
                  return;
                }
                if (((_b2 = (_a2 = iframe.contentWindow) === null || _a2 === void 0 ? void 0 : _a2.document) === null || _b2 === void 0 ? void 0 : _b2.readyState) === "complete") {
                  resolve();
                } else {
                  setTimeout(checkReadyState, 10);
                }
              };
              checkReadyState();
            })];
          case 5:
            _d.sent();
            _d.label = 6;
          case 6:
            if (!!((_b = (_a = iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.document) === null || _b === void 0 ? void 0 : _b.body))
              return [3, 8];
            return [4, wait(domPollInterval)];
          case 7:
            _d.sent();
            return [3, 6];
          case 8:
            return [4, action(iframe, iframe.contentWindow)];
          case 9:
            return [2, _d.sent()];
          case 10:
            (_c = iframe.parentNode) === null || _c === void 0 ? void 0 : _c.removeChild(iframe);
            return [
              7
              /*endfinally*/
            ];
          case 11:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }
  function selectorToElement(selector) {
    var _a = parseSimpleCssSelector(selector), tag = _a[0], attributes = _a[1];
    var element = document.createElement(tag !== null && tag !== void 0 ? tag : "div");
    for (var _i = 0, _b = Object.keys(attributes); _i < _b.length; _i++) {
      var name_1 = _b[_i];
      var value = attributes[name_1].join(" ");
      if (name_1 === "style") {
        addStyleString(element.style, value);
      } else {
        element.setAttribute(name_1, value);
      }
    }
    return element;
  }
  function addStyleString(style2, source) {
    for (var _i = 0, _a = source.split(";"); _i < _a.length; _i++) {
      var property = _a[_i];
      var match2 = /^\s*([\w-]+)\s*:\s*(.+?)(\s*!([\w-]+))?\s*$/.exec(property);
      if (match2) {
        var name_2 = match2[1], value = match2[2], priority = match2[4];
        style2.setProperty(name_2, value, priority || "");
      }
    }
  }
  var testString = "mmMwWLliI0O&1";
  var textSize = "48px";
  var baseFonts = ["monospace", "sans-serif", "serif"];
  var fontList = [
    // This is android-specific font from "Roboto" family
    "sans-serif-thin",
    "ARNO PRO",
    "Agency FB",
    "Arabic Typesetting",
    "Arial Unicode MS",
    "AvantGarde Bk BT",
    "BankGothic Md BT",
    "Batang",
    "Bitstream Vera Sans Mono",
    "Calibri",
    "Century",
    "Century Gothic",
    "Clarendon",
    "EUROSTILE",
    "Franklin Gothic",
    "Futura Bk BT",
    "Futura Md BT",
    "GOTHAM",
    "Gill Sans",
    "HELV",
    "Haettenschweiler",
    "Helvetica Neue",
    "Humanst521 BT",
    "Leelawadee",
    "Letter Gothic",
    "Levenim MT",
    "Lucida Bright",
    "Lucida Sans",
    "Menlo",
    "MS Mincho",
    "MS Outlook",
    "MS Reference Specialty",
    "MS UI Gothic",
    "MT Extra",
    "MYRIAD PRO",
    "Marlett",
    "Meiryo UI",
    "Microsoft Uighur",
    "Minion Pro",
    "Monotype Corsiva",
    "PMingLiU",
    "Pristina",
    "SCRIPTINA",
    "Segoe UI Light",
    "Serifa",
    "SimHei",
    "Small Fonts",
    "Staccato222 BT",
    "TRAJAN PRO",
    "Univers CE 55 Medium",
    "Vrinda",
    "ZWAdobeF"
  ];
  function getFonts() {
    return withIframe(function(_2, _a) {
      var document2 = _a.document;
      var holder = document2.body;
      holder.style.fontSize = textSize;
      var spansContainer = document2.createElement("div");
      var defaultWidth = {};
      var defaultHeight = {};
      var createSpan = function(fontFamily) {
        var span = document2.createElement("span");
        var style2 = span.style;
        style2.position = "absolute";
        style2.top = "0";
        style2.left = "0";
        style2.fontFamily = fontFamily;
        span.textContent = testString;
        spansContainer.appendChild(span);
        return span;
      };
      var createSpanWithFonts = function(fontToDetect, baseFont) {
        return createSpan("'".concat(fontToDetect, "',").concat(baseFont));
      };
      var initializeBaseFontsSpans = function() {
        return baseFonts.map(createSpan);
      };
      var initializeFontsSpans = function() {
        var spans = {};
        var _loop_1 = function(font2) {
          spans[font2] = baseFonts.map(function(baseFont) {
            return createSpanWithFonts(font2, baseFont);
          });
        };
        for (var _i = 0, fontList_1 = fontList; _i < fontList_1.length; _i++) {
          var font = fontList_1[_i];
          _loop_1(font);
        }
        return spans;
      };
      var isFontAvailable = function(fontSpans) {
        return baseFonts.some(function(baseFont, baseFontIndex) {
          return fontSpans[baseFontIndex].offsetWidth !== defaultWidth[baseFont] || fontSpans[baseFontIndex].offsetHeight !== defaultHeight[baseFont];
        });
      };
      var baseFontsSpans = initializeBaseFontsSpans();
      var fontsSpans = initializeFontsSpans();
      holder.appendChild(spansContainer);
      for (var index2 = 0; index2 < baseFonts.length; index2++) {
        defaultWidth[baseFonts[index2]] = baseFontsSpans[index2].offsetWidth;
        defaultHeight[baseFonts[index2]] = baseFontsSpans[index2].offsetHeight;
      }
      return fontList.filter(function(font) {
        return isFontAvailable(fontsSpans[font]);
      });
    });
  }
  function getPlugins() {
    var rawPlugins = navigator.plugins;
    if (!rawPlugins) {
      return void 0;
    }
    var plugins = [];
    for (var i2 = 0; i2 < rawPlugins.length; ++i2) {
      var plugin = rawPlugins[i2];
      if (!plugin) {
        continue;
      }
      var mimeTypes = [];
      for (var j = 0; j < plugin.length; ++j) {
        var mimeType = plugin[j];
        mimeTypes.push({
          type: mimeType.type,
          suffixes: mimeType.suffixes
        });
      }
      plugins.push({
        name: plugin.name,
        description: plugin.description,
        mimeTypes
      });
    }
    return plugins;
  }
  function getCanvasFingerprint() {
    var winding = false;
    var geometry;
    var text;
    var _a = makeCanvasContext(), canvas = _a[0], context = _a[1];
    if (!isSupported(canvas, context)) {
      geometry = text = "";
    } else {
      winding = doesSupportWinding(context);
      renderTextImage(canvas, context);
      var textImage1 = canvasToString(canvas);
      var textImage2 = canvasToString(canvas);
      if (textImage1 !== textImage2) {
        geometry = text = "unstable";
      } else {
        text = textImage1;
        renderGeometryImage(canvas, context);
        geometry = canvasToString(canvas);
      }
    }
    return { winding, geometry, text };
  }
  function makeCanvasContext() {
    var canvas = document.createElement("canvas");
    canvas.width = 1;
    canvas.height = 1;
    return [canvas, canvas.getContext("2d")];
  }
  function isSupported(canvas, context) {
    return !!(context && canvas.toDataURL);
  }
  function doesSupportWinding(context) {
    context.rect(0, 0, 10, 10);
    context.rect(2, 2, 6, 6);
    return !context.isPointInPath(5, 5, "evenodd");
  }
  function renderTextImage(canvas, context) {
    canvas.width = 240;
    canvas.height = 60;
    context.textBaseline = "alphabetic";
    context.fillStyle = "#f60";
    context.fillRect(100, 1, 62, 20);
    context.fillStyle = "#069";
    context.font = '11pt "Times New Roman"';
    var printedText = "Cwm fjordbank gly ".concat(
      String.fromCharCode(55357, 56835)
      /* 😃 */
    );
    context.fillText(printedText, 2, 15);
    context.fillStyle = "rgba(102, 204, 0, 0.2)";
    context.font = "18pt Arial";
    context.fillText(printedText, 4, 45);
  }
  function renderGeometryImage(canvas, context) {
    canvas.width = 122;
    canvas.height = 110;
    context.globalCompositeOperation = "multiply";
    for (var _i = 0, _a = [
      ["#f2f", 40, 40],
      ["#2ff", 80, 40],
      ["#ff2", 60, 80]
    ]; _i < _a.length; _i++) {
      var _b = _a[_i], color2 = _b[0], x = _b[1], y = _b[2];
      context.fillStyle = color2;
      context.beginPath();
      context.arc(x, y, 40, 0, Math.PI * 2, true);
      context.closePath();
      context.fill();
    }
    context.fillStyle = "#f9c";
    context.arc(60, 60, 60, 0, Math.PI * 2, true);
    context.arc(60, 60, 20, 0, Math.PI * 2, true);
    context.fill("evenodd");
  }
  function canvasToString(canvas) {
    return canvas.toDataURL();
  }
  function getTouchSupport() {
    var n = navigator;
    var maxTouchPoints = 0;
    var touchEvent;
    if (n.maxTouchPoints !== void 0) {
      maxTouchPoints = toInt(n.maxTouchPoints);
    } else if (n.msMaxTouchPoints !== void 0) {
      maxTouchPoints = n.msMaxTouchPoints;
    }
    try {
      document.createEvent("TouchEvent");
      touchEvent = true;
    } catch (_a) {
      touchEvent = false;
    }
    var touchStart = "ontouchstart" in window;
    return {
      maxTouchPoints,
      touchEvent,
      touchStart
    };
  }
  function getOsCpu() {
    return navigator.oscpu;
  }
  function getLanguages() {
    var n = navigator;
    var result = [];
    var language = n.language || n.userLanguage || n.browserLanguage || n.systemLanguage;
    if (language !== void 0) {
      result.push([language]);
    }
    if (Array.isArray(n.languages)) {
      if (!(isChromium() && isChromium86OrNewer())) {
        result.push(n.languages);
      }
    } else if (typeof n.languages === "string") {
      var languages = n.languages;
      if (languages) {
        result.push(languages.split(","));
      }
    }
    return result;
  }
  function getColorDepth() {
    return window.screen.colorDepth;
  }
  function getDeviceMemory() {
    return replaceNaN(toFloat(navigator.deviceMemory), void 0);
  }
  function getScreenResolution() {
    var s = screen;
    var parseDimension = function(value) {
      return replaceNaN(toInt(value), null);
    };
    var dimensions = [parseDimension(s.width), parseDimension(s.height)];
    dimensions.sort().reverse();
    return dimensions;
  }
  var screenFrameCheckInterval = 2500;
  var roundingPrecision = 10;
  var screenFrameBackup;
  var screenFrameSizeTimeoutId;
  function watchScreenFrame() {
    if (screenFrameSizeTimeoutId !== void 0) {
      return;
    }
    var checkScreenFrame = function() {
      var frameSize = getCurrentScreenFrame();
      if (isFrameSizeNull(frameSize)) {
        screenFrameSizeTimeoutId = setTimeout(checkScreenFrame, screenFrameCheckInterval);
      } else {
        screenFrameBackup = frameSize;
        screenFrameSizeTimeoutId = void 0;
      }
    };
    checkScreenFrame();
  }
  function getScreenFrame() {
    var _this = this;
    watchScreenFrame();
    return function() {
      return __awaiter$2(_this, void 0, void 0, function() {
        var frameSize;
        return __generator$2(this, function(_a) {
          switch (_a.label) {
            case 0:
              frameSize = getCurrentScreenFrame();
              if (!isFrameSizeNull(frameSize))
                return [3, 2];
              if (screenFrameBackup) {
                return [2, __spreadArray$2([], screenFrameBackup, true)];
              }
              if (!getFullscreenElement())
                return [3, 2];
              return [4, exitFullscreen()];
            case 1:
              _a.sent();
              frameSize = getCurrentScreenFrame();
              _a.label = 2;
            case 2:
              if (!isFrameSizeNull(frameSize)) {
                screenFrameBackup = frameSize;
              }
              return [2, frameSize];
          }
        });
      });
    };
  }
  function getRoundedScreenFrame() {
    var _this = this;
    var screenFrameGetter = getScreenFrame();
    return function() {
      return __awaiter$2(_this, void 0, void 0, function() {
        var frameSize, processSize;
        return __generator$2(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, screenFrameGetter()];
            case 1:
              frameSize = _a.sent();
              processSize = function(sideSize) {
                return sideSize === null ? null : round$1(sideSize, roundingPrecision);
              };
              return [2, [processSize(frameSize[0]), processSize(frameSize[1]), processSize(frameSize[2]), processSize(frameSize[3])]];
          }
        });
      });
    };
  }
  function getCurrentScreenFrame() {
    var s = screen;
    return [
      replaceNaN(toFloat(s.availTop), null),
      replaceNaN(toFloat(s.width) - toFloat(s.availWidth) - replaceNaN(toFloat(s.availLeft), 0), null),
      replaceNaN(toFloat(s.height) - toFloat(s.availHeight) - replaceNaN(toFloat(s.availTop), 0), null),
      replaceNaN(toFloat(s.availLeft), null)
    ];
  }
  function isFrameSizeNull(frameSize) {
    for (var i2 = 0; i2 < 4; ++i2) {
      if (frameSize[i2]) {
        return false;
      }
    }
    return true;
  }
  function getHardwareConcurrency() {
    return replaceNaN(toInt(navigator.hardwareConcurrency), void 0);
  }
  function getTimezone() {
    var _a;
    var DateTimeFormat = (_a = window.Intl) === null || _a === void 0 ? void 0 : _a.DateTimeFormat;
    if (DateTimeFormat) {
      var timezone = new DateTimeFormat().resolvedOptions().timeZone;
      if (timezone) {
        return timezone;
      }
    }
    var offset = -getTimezoneOffset();
    return "UTC".concat(offset >= 0 ? "+" : "").concat(Math.abs(offset));
  }
  function getTimezoneOffset() {
    var currentYear = (/* @__PURE__ */ new Date()).getFullYear();
    return Math.max(
      // `getTimezoneOffset` returns a number as a string in some unidentified cases
      toFloat(new Date(currentYear, 0, 1).getTimezoneOffset()),
      toFloat(new Date(currentYear, 6, 1).getTimezoneOffset())
    );
  }
  function getSessionStorage() {
    try {
      return !!window.sessionStorage;
    } catch (error) {
      return true;
    }
  }
  function getLocalStorage() {
    try {
      return !!window.localStorage;
    } catch (e) {
      return true;
    }
  }
  function getIndexedDB() {
    if (isTrident() || isEdgeHTML()) {
      return void 0;
    }
    try {
      return !!window.indexedDB;
    } catch (e) {
      return true;
    }
  }
  function getOpenDatabase() {
    return !!window.openDatabase;
  }
  function getCpuClass() {
    return navigator.cpuClass;
  }
  function getPlatform() {
    var platform = navigator.platform;
    if (platform === "MacIntel") {
      if (isWebKit() && !isDesktopSafari()) {
        return isIPad() ? "iPad" : "iPhone";
      }
    }
    return platform;
  }
  function getVendor() {
    return navigator.vendor || "";
  }
  function getVendorFlavors() {
    var flavors = [];
    for (var _i = 0, _a = [
      // Blink and some browsers on iOS
      "chrome",
      // Safari on macOS
      "safari",
      // Chrome on iOS (checked in 85 on 13 and 87 on 14)
      "__crWeb",
      "__gCrWeb",
      // Yandex Browser on iOS, macOS and Android (checked in 21.2 on iOS 14, macOS and Android)
      "yandex",
      // Yandex Browser on iOS (checked in 21.2 on 14)
      "__yb",
      "__ybro",
      // Firefox on iOS (checked in 32 on 14)
      "__firefox__",
      // Edge on iOS (checked in 46 on 14)
      "__edgeTrackingPreventionStatistics",
      "webkit",
      // Opera Touch on iOS (checked in 2.6 on 14)
      "oprt",
      // Samsung Internet on Android (checked in 11.1)
      "samsungAr",
      // UC Browser on Android (checked in 12.10 and 13.0)
      "ucweb",
      "UCShellJava",
      // Puffin on Android (checked in 9.0)
      "puffinDevice"
      // UC on iOS and Opera on Android have no specific global variables
      // Edge for Android isn't checked
    ]; _i < _a.length; _i++) {
      var key = _a[_i];
      var value = window[key];
      if (value && typeof value === "object") {
        flavors.push(key);
      }
    }
    return flavors.sort();
  }
  function areCookiesEnabled() {
    var d = document;
    try {
      d.cookie = "cookietest=1; SameSite=Strict;";
      var result = d.cookie.indexOf("cookietest=") !== -1;
      d.cookie = "cookietest=1; SameSite=Strict; expires=Thu, 01-Jan-1970 00:00:01 GMT";
      return result;
    } catch (e) {
      return false;
    }
  }
  function getFilters() {
    var fromB64 = atob;
    return {
      abpIndo: [
        "#Iklan-Melayang",
        "#Kolom-Iklan-728",
        "#SidebarIklan-wrapper",
        '[title="ALIENBOLA" i]',
        fromB64("I0JveC1CYW5uZXItYWRz")
      ],
      abpvn: [".quangcao", "#mobileCatfish", fromB64("LmNsb3NlLWFkcw=="), '[id^="bn_bottom_fixed_"]', "#pmadv"],
      adBlockFinland: [
        ".mainostila",
        fromB64("LnNwb25zb3JpdA=="),
        ".ylamainos",
        fromB64("YVtocmVmKj0iL2NsaWNrdGhyZ2guYXNwPyJd"),
        fromB64("YVtocmVmXj0iaHR0cHM6Ly9hcHAucmVhZHBlYWsuY29tL2FkcyJd")
      ],
      adBlockPersian: [
        "#navbar_notice_50",
        ".kadr",
        'TABLE[width="140px"]',
        "#divAgahi",
        fromB64("YVtocmVmXj0iaHR0cDovL2cxLnYuZndtcm0ubmV0L2FkLyJd")
      ],
      adBlockWarningRemoval: [
        "#adblock-honeypot",
        ".adblocker-root",
        ".wp_adblock_detect",
        fromB64("LmhlYWRlci1ibG9ja2VkLWFk"),
        fromB64("I2FkX2Jsb2NrZXI=")
      ],
      adGuardAnnoyances: [
        ".hs-sosyal",
        "#cookieconsentdiv",
        'div[class^="app_gdpr"]',
        ".as-oil",
        '[data-cypress="soft-push-notification-modal"]'
      ],
      adGuardBase: [
        ".BetterJsPopOverlay",
        fromB64("I2FkXzMwMFgyNTA="),
        fromB64("I2Jhbm5lcmZsb2F0MjI="),
        fromB64("I2NhbXBhaWduLWJhbm5lcg=="),
        fromB64("I0FkLUNvbnRlbnQ=")
      ],
      adGuardChinese: [
        fromB64("LlppX2FkX2FfSA=="),
        fromB64("YVtocmVmKj0iLmh0aGJldDM0LmNvbSJd"),
        "#widget-quan",
        fromB64("YVtocmVmKj0iLzg0OTkyMDIwLnh5eiJd"),
        fromB64("YVtocmVmKj0iLjE5NTZobC5jb20vIl0=")
      ],
      adGuardFrench: [
        "#pavePub",
        fromB64("LmFkLWRlc2t0b3AtcmVjdGFuZ2xl"),
        ".mobile_adhesion",
        ".widgetadv",
        fromB64("LmFkc19iYW4=")
      ],
      adGuardGerman: ['aside[data-portal-id="leaderboard"]'],
      adGuardJapanese: [
        "#kauli_yad_1",
        fromB64("YVtocmVmXj0iaHR0cDovL2FkMi50cmFmZmljZ2F0ZS5uZXQvIl0="),
        fromB64("Ll9wb3BJbl9pbmZpbml0ZV9hZA=="),
        fromB64("LmFkZ29vZ2xl"),
        fromB64("Ll9faXNib29zdFJldHVybkFk")
      ],
      adGuardMobile: [
        fromB64("YW1wLWF1dG8tYWRz"),
        fromB64("LmFtcF9hZA=="),
        'amp-embed[type="24smi"]',
        "#mgid_iframe1",
        fromB64("I2FkX2ludmlld19hcmVh")
      ],
      adGuardRussian: [
        fromB64("YVtocmVmXj0iaHR0cHM6Ly9hZC5sZXRtZWFkcy5jb20vIl0="),
        fromB64("LnJlY2xhbWE="),
        'div[id^="smi2adblock"]',
        fromB64("ZGl2W2lkXj0iQWRGb3hfYmFubmVyXyJd"),
        "#psyduckpockeball"
      ],
      adGuardSocial: [
        fromB64("YVtocmVmXj0iLy93d3cuc3R1bWJsZXVwb24uY29tL3N1Ym1pdD91cmw9Il0="),
        fromB64("YVtocmVmXj0iLy90ZWxlZ3JhbS5tZS9zaGFyZS91cmw/Il0="),
        ".etsy-tweet",
        "#inlineShare",
        ".popup-social"
      ],
      adGuardSpanishPortuguese: ["#barraPublicidade", "#Publicidade", "#publiEspecial", "#queTooltip", ".cnt-publi"],
      adGuardTrackingProtection: [
        "#qoo-counter",
        fromB64("YVtocmVmXj0iaHR0cDovL2NsaWNrLmhvdGxvZy5ydS8iXQ=="),
        fromB64("YVtocmVmXj0iaHR0cDovL2hpdGNvdW50ZXIucnUvdG9wL3N0YXQucGhwIl0="),
        fromB64("YVtocmVmXj0iaHR0cDovL3RvcC5tYWlsLnJ1L2p1bXAiXQ=="),
        "#top100counter"
      ],
      adGuardTurkish: [
        "#backkapat",
        fromB64("I3Jla2xhbWk="),
        fromB64("YVtocmVmXj0iaHR0cDovL2Fkc2Vydi5vbnRlay5jb20udHIvIl0="),
        fromB64("YVtocmVmXj0iaHR0cDovL2l6bGVuemkuY29tL2NhbXBhaWduLyJd"),
        fromB64("YVtocmVmXj0iaHR0cDovL3d3dy5pbnN0YWxsYWRzLm5ldC8iXQ==")
      ],
      bulgarian: [fromB64("dGQjZnJlZW5ldF90YWJsZV9hZHM="), "#ea_intext_div", ".lapni-pop-over", "#xenium_hot_offers"],
      easyList: [
        ".yb-floorad",
        fromB64("LndpZGdldF9wb19hZHNfd2lkZ2V0"),
        fromB64("LnRyYWZmaWNqdW5reS1hZA=="),
        ".textad_headline",
        fromB64("LnNwb25zb3JlZC10ZXh0LWxpbmtz")
      ],
      easyListChina: [
        fromB64("LmFwcGd1aWRlLXdyYXBbb25jbGljayo9ImJjZWJvcy5jb20iXQ=="),
        fromB64("LmZyb250cGFnZUFkdk0="),
        "#taotaole",
        "#aafoot.top_box",
        ".cfa_popup"
      ],
      easyListCookie: [
        ".ezmob-footer",
        ".cc-CookieWarning",
        "[data-cookie-number]",
        fromB64("LmF3LWNvb2tpZS1iYW5uZXI="),
        ".sygnal24-gdpr-modal-wrap"
      ],
      easyListCzechSlovak: [
        "#onlajny-stickers",
        fromB64("I3Jla2xhbW5pLWJveA=="),
        fromB64("LnJla2xhbWEtbWVnYWJvYXJk"),
        ".sklik",
        fromB64("W2lkXj0ic2tsaWtSZWtsYW1hIl0=")
      ],
      easyListDutch: [
        fromB64("I2FkdmVydGVudGll"),
        fromB64("I3ZpcEFkbWFya3RCYW5uZXJCbG9jaw=="),
        ".adstekst",
        fromB64("YVtocmVmXj0iaHR0cHM6Ly94bHR1YmUubmwvY2xpY2svIl0="),
        "#semilo-lrectangle"
      ],
      easyListGermany: [
        "#SSpotIMPopSlider",
        fromB64("LnNwb25zb3JsaW5rZ3J1ZW4="),
        fromB64("I3dlcmJ1bmdza3k="),
        fromB64("I3Jla2xhbWUtcmVjaHRzLW1pdHRl"),
        fromB64("YVtocmVmXj0iaHR0cHM6Ly9iZDc0Mi5jb20vIl0=")
      ],
      easyListItaly: [
        fromB64("LmJveF9hZHZfYW5udW5jaQ=="),
        ".sb-box-pubbliredazionale",
        fromB64("YVtocmVmXj0iaHR0cDovL2FmZmlsaWF6aW9uaWFkcy5zbmFpLml0LyJd"),
        fromB64("YVtocmVmXj0iaHR0cHM6Ly9hZHNlcnZlci5odG1sLml0LyJd"),
        fromB64("YVtocmVmXj0iaHR0cHM6Ly9hZmZpbGlhemlvbmlhZHMuc25haS5pdC8iXQ==")
      ],
      easyListLithuania: [
        fromB64("LnJla2xhbW9zX3RhcnBhcw=="),
        fromB64("LnJla2xhbW9zX251b3JvZG9z"),
        fromB64("aW1nW2FsdD0iUmVrbGFtaW5pcyBza3lkZWxpcyJd"),
        fromB64("aW1nW2FsdD0iRGVkaWt1b3RpLmx0IHNlcnZlcmlhaSJd"),
        fromB64("aW1nW2FsdD0iSG9zdGluZ2FzIFNlcnZlcmlhaS5sdCJd")
      ],
      estonian: [fromB64("QVtocmVmKj0iaHR0cDovL3BheTRyZXN1bHRzMjQuZXUiXQ==")],
      fanboyAnnoyances: ["#ac-lre-player", ".navigate-to-top", "#subscribe_popup", ".newsletter_holder", "#back-top"],
      fanboyAntiFacebook: [".util-bar-module-firefly-visible"],
      fanboyEnhancedTrackers: [
        ".open.pushModal",
        "#issuem-leaky-paywall-articles-zero-remaining-nag",
        "#sovrn_container",
        'div[class$="-hide"][zoompage-fontsize][style="display: block;"]',
        ".BlockNag__Card"
      ],
      fanboySocial: ["#FollowUs", "#meteored_share", "#social_follow", ".article-sharer", ".community__social-desc"],
      frellwitSwedish: [
        fromB64("YVtocmVmKj0iY2FzaW5vcHJvLnNlIl1bdGFyZ2V0PSJfYmxhbmsiXQ=="),
        fromB64("YVtocmVmKj0iZG9rdG9yLXNlLm9uZWxpbmsubWUiXQ=="),
        "article.category-samarbete",
        fromB64("ZGl2LmhvbGlkQWRz"),
        "ul.adsmodern"
      ],
      greekAdBlock: [
        fromB64("QVtocmVmKj0iYWRtYW4ub3RlbmV0LmdyL2NsaWNrPyJd"),
        fromB64("QVtocmVmKj0iaHR0cDovL2F4aWFiYW5uZXJzLmV4b2R1cy5nci8iXQ=="),
        fromB64("QVtocmVmKj0iaHR0cDovL2ludGVyYWN0aXZlLmZvcnRobmV0LmdyL2NsaWNrPyJd"),
        "DIV.agores300",
        "TABLE.advright"
      ],
      hungarian: [
        "#cemp_doboz",
        ".optimonk-iframe-container",
        fromB64("LmFkX19tYWlu"),
        fromB64("W2NsYXNzKj0iR29vZ2xlQWRzIl0="),
        "#hirdetesek_box"
      ],
      iDontCareAboutCookies: [
        '.alert-info[data-block-track*="CookieNotice"]',
        ".ModuleTemplateCookieIndicator",
        ".o--cookies--container",
        "#cookies-policy-sticky",
        "#stickyCookieBar"
      ],
      icelandicAbp: [fromB64("QVtocmVmXj0iL2ZyYW1ld29yay9yZXNvdXJjZXMvZm9ybXMvYWRzLmFzcHgiXQ==")],
      latvian: [
        fromB64("YVtocmVmPSJodHRwOi8vd3d3LnNhbGlkemluaS5sdi8iXVtzdHlsZT0iZGlzcGxheTogYmxvY2s7IHdpZHRoOiAxMjBweDsgaGVpZ2h0OiA0MHB4OyBvdmVyZmxvdzogaGlkZGVuOyBwb3NpdGlvbjogcmVsYXRpdmU7Il0="),
        fromB64("YVtocmVmPSJodHRwOi8vd3d3LnNhbGlkemluaS5sdi8iXVtzdHlsZT0iZGlzcGxheTogYmxvY2s7IHdpZHRoOiA4OHB4OyBoZWlnaHQ6IDMxcHg7IG92ZXJmbG93OiBoaWRkZW47IHBvc2l0aW9uOiByZWxhdGl2ZTsiXQ==")
      ],
      listKr: [
        fromB64("YVtocmVmKj0iLy9hZC5wbGFuYnBsdXMuY28ua3IvIl0="),
        fromB64("I2xpdmVyZUFkV3JhcHBlcg=="),
        fromB64("YVtocmVmKj0iLy9hZHYuaW1hZHJlcC5jby5rci8iXQ=="),
        fromB64("aW5zLmZhc3R2aWV3LWFk"),
        ".revenue_unit_item.dable"
      ],
      listeAr: [
        fromB64("LmdlbWluaUxCMUFk"),
        ".right-and-left-sponsers",
        fromB64("YVtocmVmKj0iLmFmbGFtLmluZm8iXQ=="),
        fromB64("YVtocmVmKj0iYm9vcmFxLm9yZyJd"),
        fromB64("YVtocmVmKj0iZHViaXp6bGUuY29tL2FyLz91dG1fc291cmNlPSJd")
      ],
      listeFr: [
        fromB64("YVtocmVmXj0iaHR0cDovL3Byb21vLnZhZG9yLmNvbS8iXQ=="),
        fromB64("I2FkY29udGFpbmVyX3JlY2hlcmNoZQ=="),
        fromB64("YVtocmVmKj0id2Vib3JhbWEuZnIvZmNnaS1iaW4vIl0="),
        ".site-pub-interstitiel",
        'div[id^="crt-"][data-criteo-id]'
      ],
      officialPolish: [
        "#ceneo-placeholder-ceneo-12",
        fromB64("W2hyZWZePSJodHRwczovL2FmZi5zZW5kaHViLnBsLyJd"),
        fromB64("YVtocmVmXj0iaHR0cDovL2Fkdm1hbmFnZXIudGVjaGZ1bi5wbC9yZWRpcmVjdC8iXQ=="),
        fromB64("YVtocmVmXj0iaHR0cDovL3d3dy50cml6ZXIucGwvP3V0bV9zb3VyY2UiXQ=="),
        fromB64("ZGl2I3NrYXBpZWNfYWQ=")
      ],
      ro: [
        fromB64("YVtocmVmXj0iLy9hZmZ0cmsuYWx0ZXgucm8vQ291bnRlci9DbGljayJd"),
        fromB64("YVtocmVmXj0iaHR0cHM6Ly9ibGFja2ZyaWRheXNhbGVzLnJvL3Ryay9zaG9wLyJd"),
        fromB64("YVtocmVmXj0iaHR0cHM6Ly9ldmVudC4ycGVyZm9ybWFudC5jb20vZXZlbnRzL2NsaWNrIl0="),
        fromB64("YVtocmVmXj0iaHR0cHM6Ly9sLnByb2ZpdHNoYXJlLnJvLyJd"),
        'a[href^="/url/"]'
      ],
      ruAd: [
        fromB64("YVtocmVmKj0iLy9mZWJyYXJlLnJ1LyJd"),
        fromB64("YVtocmVmKj0iLy91dGltZy5ydS8iXQ=="),
        fromB64("YVtocmVmKj0iOi8vY2hpa2lkaWtpLnJ1Il0="),
        "#pgeldiz",
        ".yandex-rtb-block"
      ],
      thaiAds: [
        "a[href*=macau-uta-popup]",
        fromB64("I2Fkcy1nb29nbGUtbWlkZGxlX3JlY3RhbmdsZS1ncm91cA=="),
        fromB64("LmFkczMwMHM="),
        ".bumq",
        ".img-kosana"
      ],
      webAnnoyancesUltralist: [
        "#mod-social-share-2",
        "#social-tools",
        fromB64("LmN0cGwtZnVsbGJhbm5lcg=="),
        ".zergnet-recommend",
        ".yt.btn-link.btn-md.btn"
      ]
    };
  }
  function getDomBlockers(_a) {
    var _b = _a === void 0 ? {} : _a, debug = _b.debug;
    return __awaiter$2(this, void 0, void 0, function() {
      var filters, filterNames, allSelectors, blockedSelectors, activeBlockers;
      var _c;
      return __generator$2(this, function(_d) {
        switch (_d.label) {
          case 0:
            if (!isApplicable()) {
              return [2, void 0];
            }
            filters = getFilters();
            filterNames = Object.keys(filters);
            allSelectors = (_c = []).concat.apply(_c, filterNames.map(function(filterName) {
              return filters[filterName];
            }));
            return [4, getBlockedSelectors(allSelectors)];
          case 1:
            blockedSelectors = _d.sent();
            if (debug) {
              printDebug(filters, blockedSelectors);
            }
            activeBlockers = filterNames.filter(function(filterName) {
              var selectors = filters[filterName];
              var blockedCount = countTruthy(selectors.map(function(selector) {
                return blockedSelectors[selector];
              }));
              return blockedCount > selectors.length * 0.6;
            });
            activeBlockers.sort();
            return [2, activeBlockers];
        }
      });
    });
  }
  function isApplicable() {
    return isWebKit() || isAndroid();
  }
  function getBlockedSelectors(selectors) {
    var _a;
    return __awaiter$2(this, void 0, void 0, function() {
      var d, root, elements, blockedSelectors, i2, element, holder, i2;
      return __generator$2(this, function(_b) {
        switch (_b.label) {
          case 0:
            d = document;
            root = d.createElement("div");
            elements = new Array(selectors.length);
            blockedSelectors = {};
            forceShow(root);
            for (i2 = 0; i2 < selectors.length; ++i2) {
              element = selectorToElement(selectors[i2]);
              if (element.tagName === "DIALOG") {
                element.show();
              }
              holder = d.createElement("div");
              forceShow(holder);
              holder.appendChild(element);
              root.appendChild(holder);
              elements[i2] = element;
            }
            _b.label = 1;
          case 1:
            if (!!d.body)
              return [3, 3];
            return [4, wait(50)];
          case 2:
            _b.sent();
            return [3, 1];
          case 3:
            d.body.appendChild(root);
            try {
              for (i2 = 0; i2 < selectors.length; ++i2) {
                if (!elements[i2].offsetParent) {
                  blockedSelectors[selectors[i2]] = true;
                }
              }
            } finally {
              (_a = root.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(root);
            }
            return [2, blockedSelectors];
        }
      });
    });
  }
  function forceShow(element) {
    element.style.setProperty("display", "block", "important");
  }
  function printDebug(filters, blockedSelectors) {
    var message = "DOM blockers debug:\n```";
    for (var _i = 0, _a = Object.keys(filters); _i < _a.length; _i++) {
      var filterName = _a[_i];
      message += "\n".concat(filterName, ":");
      for (var _b = 0, _c = filters[filterName]; _b < _c.length; _b++) {
        var selector = _c[_b];
        message += "\n  ".concat(blockedSelectors[selector] ? "🚫" : "➡️", " ").concat(selector);
      }
    }
    console.log("".concat(message, "\n```"));
  }
  function getColorGamut() {
    for (var _i = 0, _a = ["rec2020", "p3", "srgb"]; _i < _a.length; _i++) {
      var gamut = _a[_i];
      if (matchMedia("(color-gamut: ".concat(gamut, ")")).matches) {
        return gamut;
      }
    }
    return void 0;
  }
  function areColorsInverted() {
    if (doesMatch$4("inverted")) {
      return true;
    }
    if (doesMatch$4("none")) {
      return false;
    }
    return void 0;
  }
  function doesMatch$4(value) {
    return matchMedia("(inverted-colors: ".concat(value, ")")).matches;
  }
  function areColorsForced() {
    if (doesMatch$3("active")) {
      return true;
    }
    if (doesMatch$3("none")) {
      return false;
    }
    return void 0;
  }
  function doesMatch$3(value) {
    return matchMedia("(forced-colors: ".concat(value, ")")).matches;
  }
  var maxValueToCheck = 100;
  function getMonochromeDepth() {
    if (!matchMedia("(min-monochrome: 0)").matches) {
      return void 0;
    }
    for (var i2 = 0; i2 <= maxValueToCheck; ++i2) {
      if (matchMedia("(max-monochrome: ".concat(i2, ")")).matches) {
        return i2;
      }
    }
    throw new Error("Too high value");
  }
  function getContrastPreference() {
    if (doesMatch$2("no-preference")) {
      return 0;
    }
    if (doesMatch$2("high") || doesMatch$2("more")) {
      return 1;
    }
    if (doesMatch$2("low") || doesMatch$2("less")) {
      return -1;
    }
    if (doesMatch$2("forced")) {
      return 10;
    }
    return void 0;
  }
  function doesMatch$2(value) {
    return matchMedia("(prefers-contrast: ".concat(value, ")")).matches;
  }
  function isMotionReduced() {
    if (doesMatch$1("reduce")) {
      return true;
    }
    if (doesMatch$1("no-preference")) {
      return false;
    }
    return void 0;
  }
  function doesMatch$1(value) {
    return matchMedia("(prefers-reduced-motion: ".concat(value, ")")).matches;
  }
  function isHDR() {
    if (doesMatch("high")) {
      return true;
    }
    if (doesMatch("standard")) {
      return false;
    }
    return void 0;
  }
  function doesMatch(value) {
    return matchMedia("(dynamic-range: ".concat(value, ")")).matches;
  }
  var M = Math;
  var fallbackFn = function() {
    return 0;
  };
  function getMathFingerprint() {
    var acos = M.acos || fallbackFn;
    var acosh = M.acosh || fallbackFn;
    var asin = M.asin || fallbackFn;
    var asinh = M.asinh || fallbackFn;
    var atanh = M.atanh || fallbackFn;
    var atan = M.atan || fallbackFn;
    var sin = M.sin || fallbackFn;
    var sinh = M.sinh || fallbackFn;
    var cos = M.cos || fallbackFn;
    var cosh = M.cosh || fallbackFn;
    var tan = M.tan || fallbackFn;
    var tanh = M.tanh || fallbackFn;
    var exp = M.exp || fallbackFn;
    var expm1 = M.expm1 || fallbackFn;
    var log1p = M.log1p || fallbackFn;
    var powPI = function(value) {
      return M.pow(M.PI, value);
    };
    var acoshPf = function(value) {
      return M.log(value + M.sqrt(value * value - 1));
    };
    var asinhPf = function(value) {
      return M.log(value + M.sqrt(value * value + 1));
    };
    var atanhPf = function(value) {
      return M.log((1 + value) / (1 - value)) / 2;
    };
    var sinhPf = function(value) {
      return M.exp(value) - 1 / M.exp(value) / 2;
    };
    var coshPf = function(value) {
      return (M.exp(value) + 1 / M.exp(value)) / 2;
    };
    var expm1Pf = function(value) {
      return M.exp(value) - 1;
    };
    var tanhPf = function(value) {
      return (M.exp(2 * value) - 1) / (M.exp(2 * value) + 1);
    };
    var log1pPf = function(value) {
      return M.log(1 + value);
    };
    return {
      acos: acos(0.12312423423423424),
      acosh: acosh(1e308),
      acoshPf: acoshPf(1e154),
      asin: asin(0.12312423423423424),
      asinh: asinh(1),
      asinhPf: asinhPf(1),
      atanh: atanh(0.5),
      atanhPf: atanhPf(0.5),
      atan: atan(0.5),
      sin: sin(-1e300),
      sinh: sinh(1),
      sinhPf: sinhPf(1),
      cos: cos(10.000000000123),
      cosh: cosh(1),
      coshPf: coshPf(1),
      tan: tan(-1e300),
      tanh: tanh(1),
      tanhPf: tanhPf(1),
      exp: exp(1),
      expm1: expm1(1),
      expm1Pf: expm1Pf(1),
      log1p: log1p(10),
      log1pPf: log1pPf(10),
      powPI: powPI(-100)
    };
  }
  var defaultText = "mmMwWLliI0fiflO&1";
  var presets = {
    /**
     * The default font. User can change it in desktop Chrome, desktop Firefox, IE 11,
     * Android Chrome (but only when the size is ≥ than the default) and Android Firefox.
     */
    default: [],
    /** OS font on macOS. User can change its size and weight. Applies after Safari restart. */
    apple: [{ font: "-apple-system-body" }],
    /** User can change it in desktop Chrome and desktop Firefox. */
    serif: [{ fontFamily: "serif" }],
    /** User can change it in desktop Chrome and desktop Firefox. */
    sans: [{ fontFamily: "sans-serif" }],
    /** User can change it in desktop Chrome and desktop Firefox. */
    mono: [{ fontFamily: "monospace" }],
    /**
     * Check the smallest allowed font size. User can change it in desktop Chrome, desktop Firefox and desktop Safari.
     * The height can be 0 in Chrome on a retina display.
     */
    min: [{ fontSize: "1px" }],
    /** Tells one OS from another in desktop Chrome. */
    system: [{ fontFamily: "system-ui" }]
  };
  function getFontPreferences() {
    return withNaturalFonts(function(document2, container) {
      var elements = {};
      var sizes = {};
      for (var _i = 0, _a = Object.keys(presets); _i < _a.length; _i++) {
        var key = _a[_i];
        var _b = presets[key], _c = _b[0], style2 = _c === void 0 ? {} : _c, _d = _b[1], text = _d === void 0 ? defaultText : _d;
        var element = document2.createElement("span");
        element.textContent = text;
        element.style.whiteSpace = "nowrap";
        for (var _e = 0, _f = Object.keys(style2); _e < _f.length; _e++) {
          var name_1 = _f[_e];
          var value = style2[name_1];
          if (value !== void 0) {
            element.style[name_1] = value;
          }
        }
        elements[key] = element;
        container.appendChild(document2.createElement("br"));
        container.appendChild(element);
      }
      for (var _g = 0, _h = Object.keys(presets); _g < _h.length; _g++) {
        var key = _h[_g];
        sizes[key] = elements[key].getBoundingClientRect().width;
      }
      return sizes;
    });
  }
  function withNaturalFonts(action, containerWidthPx) {
    if (containerWidthPx === void 0) {
      containerWidthPx = 4e3;
    }
    return withIframe(function(_2, iframeWindow) {
      var iframeDocument = iframeWindow.document;
      var iframeBody = iframeDocument.body;
      var bodyStyle = iframeBody.style;
      bodyStyle.width = "".concat(containerWidthPx, "px");
      bodyStyle.webkitTextSizeAdjust = bodyStyle.textSizeAdjust = "none";
      if (isChromium()) {
        iframeBody.style.zoom = "".concat(1 / iframeWindow.devicePixelRatio);
      } else if (isWebKit()) {
        iframeBody.style.zoom = "reset";
      }
      var linesOfText = iframeDocument.createElement("div");
      linesOfText.textContent = __spreadArray$2([], Array(containerWidthPx / 20 << 0), true).map(function() {
        return "word";
      }).join(" ");
      iframeBody.appendChild(linesOfText);
      return action(iframeDocument, iframeBody);
    }, '<!doctype html><html><head><meta name="viewport" content="width=device-width, initial-scale=1">');
  }
  function getVideoCard() {
    var _a;
    var canvas = document.createElement("canvas");
    var gl = (_a = canvas.getContext("webgl")) !== null && _a !== void 0 ? _a : canvas.getContext("experimental-webgl");
    if (gl && "getExtension" in gl) {
      var debugInfo = gl.getExtension("WEBGL_debug_renderer_info");
      if (debugInfo) {
        return {
          vendor: (gl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL) || "").toString(),
          renderer: (gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL) || "").toString()
        };
      }
    }
    return void 0;
  }
  function isPdfViewerEnabled() {
    return navigator.pdfViewerEnabled;
  }
  function getArchitecture() {
    var f = new Float32Array(1);
    var u82 = new Uint8Array(f.buffer);
    f[0] = Infinity;
    f[0] = f[0] - f[0];
    return u82[3];
  }
  var sources = {
    // READ FIRST:
    // See https://github.com/fingerprintjs/fingerprintjs/blob/master/contributing.md#how-to-make-an-entropy-source
    // to learn how entropy source works and how to make your own.
    // The sources run in this exact order.
    // The asynchronous sources are at the start to run in parallel with other sources.
    fonts: getFonts,
    domBlockers: getDomBlockers,
    fontPreferences: getFontPreferences,
    audio: getAudioFingerprint,
    screenFrame: getRoundedScreenFrame,
    osCpu: getOsCpu,
    languages: getLanguages,
    colorDepth: getColorDepth,
    deviceMemory: getDeviceMemory,
    screenResolution: getScreenResolution,
    hardwareConcurrency: getHardwareConcurrency,
    timezone: getTimezone,
    sessionStorage: getSessionStorage,
    localStorage: getLocalStorage,
    indexedDB: getIndexedDB,
    openDatabase: getOpenDatabase,
    cpuClass: getCpuClass,
    platform: getPlatform,
    plugins: getPlugins,
    canvas: getCanvasFingerprint,
    touchSupport: getTouchSupport,
    vendor: getVendor,
    vendorFlavors: getVendorFlavors,
    cookiesEnabled: areCookiesEnabled,
    colorGamut: getColorGamut,
    invertedColors: areColorsInverted,
    forcedColors: areColorsForced,
    monochrome: getMonochromeDepth,
    contrast: getContrastPreference,
    reducedMotion: isMotionReduced,
    hdr: isHDR,
    math: getMathFingerprint,
    videoCard: getVideoCard,
    pdfViewerEnabled: isPdfViewerEnabled,
    architecture: getArchitecture
  };
  function loadBuiltinSources(options) {
    return loadSources(sources, options, []);
  }
  var commentTemplate = "$ if upgrade to Pro: https://fpjs.dev/pro";
  function getConfidence(components) {
    var openConfidenceScore = getOpenConfidenceScore(components);
    var proConfidenceScore = deriveProConfidenceScore(openConfidenceScore);
    return { score: openConfidenceScore, comment: commentTemplate.replace(/\$/g, "".concat(proConfidenceScore)) };
  }
  function getOpenConfidenceScore(components) {
    if (isAndroid()) {
      return 0.4;
    }
    if (isWebKit()) {
      return isDesktopSafari() ? 0.5 : 0.3;
    }
    var platform = components.platform.value || "";
    if (/^Win/.test(platform)) {
      return 0.6;
    }
    if (/^Mac/.test(platform)) {
      return 0.5;
    }
    return 0.7;
  }
  function deriveProConfidenceScore(openConfidenceScore) {
    return round$1(0.99 + 0.01 * openConfidenceScore, 1e-4);
  }
  function componentsToCanonicalString(components) {
    var result = "";
    for (var _i = 0, _a = Object.keys(components).sort(); _i < _a.length; _i++) {
      var componentKey = _a[_i];
      var component = components[componentKey];
      var value = component.error ? "error" : JSON.stringify(component.value);
      result += "".concat(result ? "|" : "").concat(componentKey.replace(/([:|\\])/g, "\\$1"), ":").concat(value);
    }
    return result;
  }
  function componentsToDebugString(components) {
    return JSON.stringify(components, function(_key, value) {
      if (value instanceof Error) {
        return errorToObject(value);
      }
      return value;
    }, 2);
  }
  function hashComponents(components) {
    return x64hash128(componentsToCanonicalString(components));
  }
  function makeLazyGetResult(components) {
    var visitorIdCache;
    var confidence = getConfidence(components);
    return {
      get visitorId() {
        if (visitorIdCache === void 0) {
          visitorIdCache = hashComponents(this.components);
        }
        return visitorIdCache;
      },
      set visitorId(visitorId) {
        visitorIdCache = visitorId;
      },
      confidence,
      components,
      version
    };
  }
  function prepareForSources(delayFallback) {
    if (delayFallback === void 0) {
      delayFallback = 50;
    }
    return requestIdleCallbackIfAvailable(delayFallback, delayFallback * 2);
  }
  function makeAgent(getComponents, debug) {
    var creationTime = Date.now();
    return {
      get: function(options) {
        return __awaiter$2(this, void 0, void 0, function() {
          var startTime, components, result;
          return __generator$2(this, function(_a) {
            switch (_a.label) {
              case 0:
                startTime = Date.now();
                return [4, getComponents()];
              case 1:
                components = _a.sent();
                result = makeLazyGetResult(components);
                if (debug || (options === null || options === void 0 ? void 0 : options.debug)) {
                  console.log("Copy the text below to get the debug data:\n\n```\nversion: ".concat(result.version, "\nuserAgent: ").concat(navigator.userAgent, "\ntimeBetweenLoadAndGet: ").concat(startTime - creationTime, "\nvisitorId: ").concat(result.visitorId, "\ncomponents: ").concat(componentsToDebugString(components), "\n```"));
                }
                return [2, result];
            }
          });
        });
      }
    };
  }
  function monitor() {
    if (window.__fpjs_d_m || Math.random() >= 1e-3) {
      return;
    }
    try {
      var request2 = new XMLHttpRequest();
      request2.open("get", "https://m1.openfpcdn.io/fingerprintjs/v".concat(version, "/npm-monitoring"), true);
      request2.send();
    } catch (error) {
      console.error(error);
    }
  }
  function load(_a) {
    var _b = _a === void 0 ? {} : _a, delayFallback = _b.delayFallback, debug = _b.debug, _c = _b.monitoring, monitoring = _c === void 0 ? true : _c;
    return __awaiter$2(this, void 0, void 0, function() {
      var getComponents;
      return __generator$2(this, function(_d) {
        switch (_d.label) {
          case 0:
            if (monitoring) {
              monitor();
            }
            return [4, prepareForSources(delayFallback)];
          case 1:
            _d.sent();
            getComponents = loadBuiltinSources({ debug });
            return [2, makeAgent(getComponents, debug)];
        }
      });
    });
  }
  var index = { load, hashComponents, componentsToDebugString };
  let sendRequest;
  let nextId = 0;
  class Signer {
    constructor(_sendRequest) {
      sendRequest = _sendRequest;
    }
    async signPayload(payload) {
      const id = ++nextId;
      const result = await sendRequest("pub(extrinsic.sign)", payload);
      return {
        ...result,
        id
      };
    }
    async signRaw(payload) {
      const id = ++nextId;
      const result = await sendRequest("pub(bytes.sign)", payload);
      return {
        ...result,
        id
      };
    }
  }
  class ExtWeb2 extends Extension {
    async getAccount(config2) {
      const network = getNetwork(config2);
      const wsProvider = new WsProvider(network.endpoint);
      const account2 = await this.createAccount(wsProvider);
      const extension = await this.createExtension(account2);
      return {
        account: account2,
        extension
      };
    }
    async createExtension(account2) {
      const signer = new Signer(async () => {
        return;
      });
      signer.signRaw = async (payload) => {
        const signature = account2.keypair.sign(payload.data);
        return {
          id: 1,
          signature: u8aToHex(signature)
        };
      };
      return {
        accounts: {
          get: async () => {
            return [account2];
          },
          subscribe: () => {
            return () => {
              return;
            };
          }
        },
        name: "procaptcha-web2",
        version: "0.1.11",
        signer
      };
    }
    async createAccount(wsProvider) {
      const params = {
        area: { width: 300, height: 300 },
        offsetParameter: 2001000001,
        multiplier: 15e3,
        fontSizeFactor: 1.5,
        maxShadowBlur: 50,
        numberOfRounds: 5,
        seed: 42
      };
      const browserEntropy = await this.getFingerprint();
      const canvasEntropy = picassoCanvas(params.numberOfRounds, params.seed, params);
      const entropy = hexHash([canvasEntropy, browserEntropy].join(""), 128).slice(2);
      const u8Entropy = stringToU8a(entropy);
      const mnemonic = entropyToMnemonic(u8Entropy);
      const api = await ApiPromise.create({ provider: wsProvider });
      const type = "sr25519";
      const keyring = new Keyring({ type, ss58Format: api.registry.chainSS58 });
      await cryptoWaitReady();
      const keypair = keyring.addFromMnemonic(mnemonic);
      const address = keypair.address.length === 42 ? keypair.address : encodeAddress(decodeAddress(keypair.address), api.registry.chainSS58);
      return {
        address,
        type,
        name: address,
        keypair
      };
    }
    async getFingerprint() {
      const fpPromise = index.load();
      const fp = await fpPromise;
      const result = await fp.get();
      const { screenFrame, ...componentsReduced } = result.components;
      return hashComponents(componentsReduced);
    }
  }
  const ProcapchaEventNames = [
    "onError",
    "onAccountNotFound",
    "onHuman",
    "onExtensionNotFound",
    "onExpired",
    "onFailed"
  ];
  var jsxRuntime = { exports: {} };
  var reactJsxRuntime_development = {};
  /**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  {
    (function() {
      var React2 = reactExports;
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function error(format) {
        {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning2("error", format, args);
          }
        }
      }
      function printWarning2(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var enableScopeAPI = false;
      var enableCacheElement = false;
      var enableTransitionTracing = false;
      var enableLegacyHidden = false;
      var enableDebugTracing = false;
      var REACT_MODULE_REFERENCE;
      {
        REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      }
      function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") {
          return true;
        }
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
          return true;
        }
        if (typeof type === "object" && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
          // types supported by any Flight configuration anywhere since
          // we don't know which Flight build this will end up being used
          // with.
          type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
            return true;
          }
        }
        return false;
      }
      function getWrappedName2(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName2(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init2 = lazyComponent._init;
              try {
                return getComponentNameFromType(init2(payload));
              } catch (x) {
                return null;
              }
            }
          }
        }
        return null;
      }
      var assign2 = Object.assign;
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign2({}, props, {
                value: prevLog
              }),
              info: assign2({}, props, {
                value: prevInfo
              }),
              warn: assign2({}, props, {
                value: prevWarn
              }),
              error: assign2({}, props, {
                value: prevError
              }),
              group: assign2({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign2({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign2({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0) {
            try {
              throw Error();
            } catch (x) {
              var match2 = x.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match2 && match2[1] || "";
            }
          }
          return "\n" + prefix2 + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s = sampleLines.length - 1;
            var c = controlLines.length - 1;
            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
              c--;
            }
            for (; s >= 1 && c >= 0; s--, c--) {
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1) {
                  do {
                    s--;
                    c--;
                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                      if (fn.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn.displayName);
                      }
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s >= 1 && c >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component) {
        var prototype2 = Component.prototype;
        return !!(prototype2 && prototype2.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init2 = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init2(payload));
              } catch (x) {
              }
            }
          }
        }
        return "";
      }
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var loggedTypeFailures2 = {};
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var stack = describeUnknownElementTypeFrameInDEV(element.type);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes2(typeSpecs, values2, location2, componentName, element) {
        {
          var has2 = Function.call.bind(hasOwnProperty2);
          for (var typeSpecName in typeSpecs) {
            if (has2(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures2)) {
                loggedTypeFailures2[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location2, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray2(a) {
        return isArrayImpl(a);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        {
          try {
            return false;
          } catch (e) {
            return true;
          }
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow()) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown;
      var specialPropRefWarningShown;
      var didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }
      function hasValidRef(config2) {
        {
          if (hasOwnProperty2.call(config2, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config2.ref !== void 0;
      }
      function hasValidKey(config2) {
        {
          if (hasOwnProperty2.call(config2, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config2.key !== void 0;
      }
      function warnIfStringRefCannotBeAutoConverted(config2, self2) {
        {
          if (typeof config2.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
              error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config2.ref);
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
      }
      function defineKeyPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
      }
      function defineRefPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
      }
      var ReactElement = function(type, key, ref, self2, source, owner, props) {
        var element = {
          // This tag allows us to uniquely identify this as a React Element
          $$typeof: REACT_ELEMENT_TYPE,
          // Built-in properties that belong on the element
          type,
          key,
          ref,
          props,
          // Record the component responsible for creating this element.
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self2
          });
          Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };
      function jsxDEV(type, config2, maybeKey, source, self2) {
        {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          if (maybeKey !== void 0) {
            {
              checkKeyStringCoercion(maybeKey);
            }
            key = "" + maybeKey;
          }
          if (hasValidKey(config2)) {
            {
              checkKeyStringCoercion(config2.key);
            }
            key = "" + config2.key;
          }
          if (hasValidRef(config2)) {
            ref = config2.ref;
            warnIfStringRefCannotBeAutoConverted(config2, self2);
          }
          for (propName in config2) {
            if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config2[propName];
            }
          }
          if (type && type.defaultProps) {
            var defaultProps2 = type.defaultProps;
            for (propName in defaultProps2) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps2[propName];
              }
            }
          }
          if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var stack = describeUnknownElementTypeFrameInDEV(element.type);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }
      function isValidElement(object) {
        {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
      }
      function getDeclarationErrorAddendum() {
        {
          if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
      }
      function getSourceInfoErrorAddendum(source) {
        {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        {
          var info2 = getDeclarationErrorAddendum();
          if (!info2) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info2 = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info2;
        }
      }
      function validateExplicitKey(element, parentType) {
        {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          setCurrentlyValidatingElement$1(element);
          error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node2, parentType) {
        {
          if (typeof node2 !== "object") {
            return;
          }
          if (isArray2(node2)) {
            for (var i2 = 0; i2 < node2.length; i2++) {
              var child = node2[i2];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node2)) {
            if (node2._store) {
              node2._store.validated = true;
            }
          } else if (node2) {
            var iteratorFn = getIteratorFn(node2);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node2.entries) {
                var iterator2 = iteratorFn.call(node2);
                var step;
                while (!(step = iterator2.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type === null || type === void 0 || typeof type === "string") {
            return;
          }
          var propTypes2;
          if (typeof type === "function") {
            propTypes2 = type.propTypes;
          } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
          // Inner props are checked in the reconciler.
          type.$$typeof === REACT_MEMO_TYPE)) {
            propTypes2 = type.propTypes;
          } else {
            return;
          }
          if (propTypes2) {
            var name = getComponentNameFromType(type);
            checkPropTypes2(propTypes2, element.props, "prop", name, element);
          } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
          }
        }
      }
      function validateFragmentProps(fragment) {
        {
          var keys2 = Object.keys(fragment.props);
          for (var i2 = 0; i2 < keys2.length; i2++) {
            var key = keys2[i2];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
              setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
          }
        }
      }
      function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
        {
          var validType = isValidElementType(type);
          if (!validType) {
            var info2 = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info2 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendum(source);
            if (sourceInfo) {
              info2 += sourceInfo;
            } else {
              info2 += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (isArray2(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
              info2 = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info2);
          }
          var element = jsxDEV(type, props, key, source, self2);
          if (element == null) {
            return element;
          }
          if (validType) {
            var children = props.children;
            if (children !== void 0) {
              if (isStaticChildren) {
                if (isArray2(children)) {
                  for (var i2 = 0; i2 < children.length; i2++) {
                    validateChildKeys(children[i2], type);
                  }
                  if (Object.freeze) {
                    Object.freeze(children);
                  }
                } else {
                  error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                }
              } else {
                validateChildKeys(children, type);
              }
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
      }
      function jsxWithValidationStatic(type, props, key) {
        {
          return jsxWithValidation(type, props, key, true);
        }
      }
      function jsxWithValidationDynamic(type, props, key) {
        {
          return jsxWithValidation(type, props, key, false);
        }
      }
      var jsx2 = jsxWithValidationDynamic;
      var jsxs2 = jsxWithValidationStatic;
      reactJsxRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
      reactJsxRuntime_development.jsx = jsx2;
      reactJsxRuntime_development.jsxs = jsxs2;
    })();
  }
  {
    jsxRuntime.exports = reactJsxRuntime_development;
  }
  var jsxRuntimeExports = jsxRuntime.exports;
  const common = {
    black: "#000",
    white: "#fff"
  };
  const common$1 = common;
  const red = {
    50: "#ffebee",
    100: "#ffcdd2",
    200: "#ef9a9a",
    300: "#e57373",
    400: "#ef5350",
    500: "#f44336",
    600: "#e53935",
    700: "#d32f2f",
    800: "#c62828",
    900: "#b71c1c",
    A100: "#ff8a80",
    A200: "#ff5252",
    A400: "#ff1744",
    A700: "#d50000"
  };
  const red$1 = red;
  const purple = {
    50: "#f3e5f5",
    100: "#e1bee7",
    200: "#ce93d8",
    300: "#ba68c8",
    400: "#ab47bc",
    500: "#9c27b0",
    600: "#8e24aa",
    700: "#7b1fa2",
    800: "#6a1b9a",
    900: "#4a148c",
    A100: "#ea80fc",
    A200: "#e040fb",
    A400: "#d500f9",
    A700: "#aa00ff"
  };
  const purple$1 = purple;
  const blue = {
    50: "#e3f2fd",
    100: "#bbdefb",
    200: "#90caf9",
    300: "#64b5f6",
    400: "#42a5f5",
    500: "#2196f3",
    600: "#1e88e5",
    700: "#1976d2",
    800: "#1565c0",
    900: "#0d47a1",
    A100: "#82b1ff",
    A200: "#448aff",
    A400: "#2979ff",
    A700: "#2962ff"
  };
  const blue$1 = blue;
  const lightBlue = {
    50: "#e1f5fe",
    100: "#b3e5fc",
    200: "#81d4fa",
    300: "#4fc3f7",
    400: "#29b6f6",
    500: "#03a9f4",
    600: "#039be5",
    700: "#0288d1",
    800: "#0277bd",
    900: "#01579b",
    A100: "#80d8ff",
    A200: "#40c4ff",
    A400: "#00b0ff",
    A700: "#0091ea"
  };
  const lightBlue$1 = lightBlue;
  const green = {
    50: "#e8f5e9",
    100: "#c8e6c9",
    200: "#a5d6a7",
    300: "#81c784",
    400: "#66bb6a",
    500: "#4caf50",
    600: "#43a047",
    700: "#388e3c",
    800: "#2e7d32",
    900: "#1b5e20",
    A100: "#b9f6ca",
    A200: "#69f0ae",
    A400: "#00e676",
    A700: "#00c853"
  };
  const green$1 = green;
  const orange = {
    50: "#fff3e0",
    100: "#ffe0b2",
    200: "#ffcc80",
    300: "#ffb74d",
    400: "#ffa726",
    500: "#ff9800",
    600: "#fb8c00",
    700: "#f57c00",
    800: "#ef6c00",
    900: "#e65100",
    A100: "#ffd180",
    A200: "#ffab40",
    A400: "#ff9100",
    A700: "#ff6d00"
  };
  const orange$1 = orange;
  const grey = {
    50: "#fafafa",
    100: "#f5f5f5",
    200: "#eeeeee",
    300: "#e0e0e0",
    400: "#bdbdbd",
    500: "#9e9e9e",
    600: "#757575",
    700: "#616161",
    800: "#424242",
    900: "#212121",
    A100: "#f5f5f5",
    A200: "#eeeeee",
    A400: "#bdbdbd",
    A700: "#616161"
  };
  const grey$1 = grey;
  function chainPropTypes(propType1, propType2) {
    return function validate(...args) {
      return propType1(...args) || propType2(...args);
    };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function isPlainObject(item) {
    return item !== null && typeof item === "object" && item.constructor === Object;
  }
  function deepClone(source) {
    if (!isPlainObject(source)) {
      return source;
    }
    const output2 = {};
    Object.keys(source).forEach((key) => {
      output2[key] = deepClone(source[key]);
    });
    return output2;
  }
  function deepmerge(target, source, options = {
    clone: true
  }) {
    const output2 = options.clone ? _extends({}, target) : target;
    if (isPlainObject(target) && isPlainObject(source)) {
      Object.keys(source).forEach((key) => {
        if (key === "__proto__") {
          return;
        }
        if (isPlainObject(source[key]) && key in target && isPlainObject(target[key])) {
          output2[key] = deepmerge(target[key], source[key], options);
        } else if (options.clone) {
          output2[key] = isPlainObject(source[key]) ? deepClone(source[key]) : source[key];
        } else {
          output2[key] = source[key];
        }
      });
    }
    return output2;
  }
  var propTypes = { exports: {} };
  var reactIs$1 = { exports: {} };
  var reactIs_development$1 = {};
  /** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  {
    (function() {
      var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
      var REACT_ELEMENT_TYPE = hasSymbol2 ? Symbol.for("react.element") : 60103;
      var REACT_PORTAL_TYPE = hasSymbol2 ? Symbol.for("react.portal") : 60106;
      var REACT_FRAGMENT_TYPE = hasSymbol2 ? Symbol.for("react.fragment") : 60107;
      var REACT_STRICT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.strict_mode") : 60108;
      var REACT_PROFILER_TYPE = hasSymbol2 ? Symbol.for("react.profiler") : 60114;
      var REACT_PROVIDER_TYPE = hasSymbol2 ? Symbol.for("react.provider") : 60109;
      var REACT_CONTEXT_TYPE = hasSymbol2 ? Symbol.for("react.context") : 60110;
      var REACT_ASYNC_MODE_TYPE = hasSymbol2 ? Symbol.for("react.async_mode") : 60111;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.concurrent_mode") : 60111;
      var REACT_FORWARD_REF_TYPE = hasSymbol2 ? Symbol.for("react.forward_ref") : 60112;
      var REACT_SUSPENSE_TYPE = hasSymbol2 ? Symbol.for("react.suspense") : 60113;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol2 ? Symbol.for("react.suspense_list") : 60120;
      var REACT_MEMO_TYPE = hasSymbol2 ? Symbol.for("react.memo") : 60115;
      var REACT_LAZY_TYPE = hasSymbol2 ? Symbol.for("react.lazy") : 60116;
      var REACT_BLOCK_TYPE = hasSymbol2 ? Symbol.for("react.block") : 60121;
      var REACT_FUNDAMENTAL_TYPE = hasSymbol2 ? Symbol.for("react.fundamental") : 60117;
      var REACT_RESPONDER_TYPE = hasSymbol2 ? Symbol.for("react.responder") : 60118;
      var REACT_SCOPE_TYPE = hasSymbol2 ? Symbol.for("react.scope") : 60119;
      function isValidElementType(type) {
        return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
        type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
      }
      function typeOf(object) {
        if (typeof object === "object" && object !== null) {
          var $$typeof = object.$$typeof;
          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type;
              switch (type) {
                case REACT_ASYNC_MODE_TYPE:
                case REACT_CONCURRENT_MODE_TYPE:
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                  return type;
                default:
                  var $$typeofType = type && type.$$typeof;
                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;
                    default:
                      return $$typeof;
                  }
              }
            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }
        return void 0;
      }
      var AsyncMode = REACT_ASYNC_MODE_TYPE;
      var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element2 = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false;
      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true;
            console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
          }
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
      }
      function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
      }
      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }
      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }
      function isElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }
      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }
      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }
      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }
      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }
      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }
      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }
      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }
      reactIs_development$1.AsyncMode = AsyncMode;
      reactIs_development$1.ConcurrentMode = ConcurrentMode;
      reactIs_development$1.ContextConsumer = ContextConsumer;
      reactIs_development$1.ContextProvider = ContextProvider;
      reactIs_development$1.Element = Element2;
      reactIs_development$1.ForwardRef = ForwardRef;
      reactIs_development$1.Fragment = Fragment;
      reactIs_development$1.Lazy = Lazy;
      reactIs_development$1.Memo = Memo;
      reactIs_development$1.Portal = Portal;
      reactIs_development$1.Profiler = Profiler;
      reactIs_development$1.StrictMode = StrictMode;
      reactIs_development$1.Suspense = Suspense;
      reactIs_development$1.isAsyncMode = isAsyncMode;
      reactIs_development$1.isConcurrentMode = isConcurrentMode;
      reactIs_development$1.isContextConsumer = isContextConsumer;
      reactIs_development$1.isContextProvider = isContextProvider;
      reactIs_development$1.isElement = isElement;
      reactIs_development$1.isForwardRef = isForwardRef;
      reactIs_development$1.isFragment = isFragment;
      reactIs_development$1.isLazy = isLazy;
      reactIs_development$1.isMemo = isMemo;
      reactIs_development$1.isPortal = isPortal;
      reactIs_development$1.isProfiler = isProfiler;
      reactIs_development$1.isStrictMode = isStrictMode;
      reactIs_development$1.isSuspense = isSuspense;
      reactIs_development$1.isValidElementType = isValidElementType;
      reactIs_development$1.typeOf = typeOf;
    })();
  }
  {
    reactIs$1.exports = reactIs_development$1;
  }
  var reactIsExports$1 = reactIs$1.exports;
  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;
  function toObject(val) {
    if (val === null || val === void 0) {
      throw new TypeError("Object.assign cannot be called with null or undefined");
    }
    return Object(val);
  }
  function shouldUseNative() {
    try {
      if (!Object.assign) {
        return false;
      }
      var test1 = new String("abc");
      test1[5] = "de";
      if (Object.getOwnPropertyNames(test1)[0] === "5") {
        return false;
      }
      var test2 = {};
      for (var i2 = 0; i2 < 10; i2++) {
        test2["_" + String.fromCharCode(i2)] = i2;
      }
      var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
        return test2[n];
      });
      if (order2.join("") !== "0123456789") {
        return false;
      }
      var test3 = {};
      "abcdefghijklmnopqrst".split("").forEach(function(letter) {
        test3[letter] = letter;
      });
      if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
        return false;
      }
      return true;
    } catch (err) {
      return false;
    }
  }
  var objectAssign = shouldUseNative() ? Object.assign : function(target, source) {
    var from2;
    var to = toObject(target);
    var symbols;
    for (var s = 1; s < arguments.length; s++) {
      from2 = Object(arguments[s]);
      for (var key in from2) {
        if (hasOwnProperty$1.call(from2, key)) {
          to[key] = from2[key];
        }
      }
      if (getOwnPropertySymbols) {
        symbols = getOwnPropertySymbols(from2);
        for (var i2 = 0; i2 < symbols.length; i2++) {
          if (propIsEnumerable.call(from2, symbols[i2])) {
            to[symbols[i2]] = from2[symbols[i2]];
          }
        }
      }
    }
    return to;
  };
  var ReactPropTypesSecret$2 = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
  var ReactPropTypesSecret_1 = ReactPropTypesSecret$2;
  var has$2 = Function.call.bind(Object.prototype.hasOwnProperty);
  var printWarning$1 = function() {
  };
  {
    var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
    var loggedTypeFailures = {};
    var has$1 = has$2;
    printWarning$1 = function(text) {
      var message = "Warning: " + text;
      if (typeof console !== "undefined") {
        console.error(message);
      }
      try {
        throw new Error(message);
      } catch (x) {
      }
    };
  }
  function checkPropTypes$1(typeSpecs, values2, location2, componentName, getStack) {
    {
      for (var typeSpecName in typeSpecs) {
        if (has$1(typeSpecs, typeSpecName)) {
          var error;
          try {
            if (typeof typeSpecs[typeSpecName] !== "function") {
              var err = Error(
                (componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
              );
              err.name = "Invariant Violation";
              throw err;
            }
            error = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, ReactPropTypesSecret$1);
          } catch (ex) {
            error = ex;
          }
          if (error && !(error instanceof Error)) {
            printWarning$1(
              (componentName || "React class") + ": type specification of " + location2 + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
            );
          }
          if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : "";
            printWarning$1(
              "Failed " + location2 + " type: " + error.message + (stack != null ? stack : "")
            );
          }
        }
      }
    }
  }
  checkPropTypes$1.resetWarningCache = function() {
    {
      loggedTypeFailures = {};
    }
  };
  var checkPropTypes_1 = checkPropTypes$1;
  var ReactIs$1 = reactIsExports$1;
  var assign$1 = objectAssign;
  var ReactPropTypesSecret = ReactPropTypesSecret_1;
  var has = has$2;
  var checkPropTypes = checkPropTypes_1;
  var printWarning = function() {
  };
  {
    printWarning = function(text) {
      var message = "Warning: " + text;
      if (typeof console !== "undefined") {
        console.error(message);
      }
      try {
        throw new Error(message);
      } catch (x) {
      }
    };
  }
  function emptyFunctionThatReturnsNull() {
    return null;
  }
  var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess2) {
    var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
      var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
      if (typeof iteratorFn === "function") {
        return iteratorFn;
      }
    }
    var ANONYMOUS = "<<anonymous>>";
    var ReactPropTypes = {
      array: createPrimitiveTypeChecker("array"),
      bigint: createPrimitiveTypeChecker("bigint"),
      bool: createPrimitiveTypeChecker("boolean"),
      func: createPrimitiveTypeChecker("function"),
      number: createPrimitiveTypeChecker("number"),
      object: createPrimitiveTypeChecker("object"),
      string: createPrimitiveTypeChecker("string"),
      symbol: createPrimitiveTypeChecker("symbol"),
      any: createAnyTypeChecker(),
      arrayOf: createArrayOfTypeChecker,
      element: createElementTypeChecker(),
      elementType: createElementTypeTypeChecker(),
      instanceOf: createInstanceTypeChecker,
      node: createNodeChecker(),
      objectOf: createObjectOfTypeChecker,
      oneOf: createEnumTypeChecker,
      oneOfType: createUnionTypeChecker,
      shape: createShapeTypeChecker,
      exact: createStrictShapeTypeChecker
    };
    function is(x, y) {
      if (x === y) {
        return x !== 0 || 1 / x === 1 / y;
      } else {
        return x !== x && y !== y;
      }
    }
    function PropTypeError(message, data2) {
      this.message = message;
      this.data = data2 && typeof data2 === "object" ? data2 : {};
      this.stack = "";
    }
    PropTypeError.prototype = Error.prototype;
    function createChainableTypeChecker(validate) {
      {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
      }
      function checkType(isRequired, props, propName, componentName, location2, propFullName, secret) {
        componentName = componentName || ANONYMOUS;
        propFullName = propFullName || propName;
        if (secret !== ReactPropTypesSecret) {
          if (throwOnDirectAccess2) {
            var err = new Error(
              "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
            );
            err.name = "Invariant Violation";
            throw err;
          } else if (typeof console !== "undefined") {
            var cacheKey = componentName + ":" + propName;
            if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3) {
              printWarning(
                "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
              );
              manualPropTypeCallCache[cacheKey] = true;
              manualPropTypeWarningCount++;
            }
          }
        }
        if (props[propName] == null) {
          if (isRequired) {
            if (props[propName] === null) {
              return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
            }
            return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
          }
          return null;
        } else {
          return validate(props, propName, componentName, location2, propFullName);
        }
      }
      var chainedCheckType = checkType.bind(null, false);
      chainedCheckType.isRequired = checkType.bind(null, true);
      return chainedCheckType;
    }
    function createPrimitiveTypeChecker(expectedType) {
      function validate(props, propName, componentName, location2, propFullName, secret) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== expectedType) {
          var preciseType = getPreciseType(propValue);
          return new PropTypeError(
            "Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
            { expectedType }
          );
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createAnyTypeChecker() {
      return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }
    function createArrayOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location2, propFullName) {
        if (typeof typeChecker !== "function") {
          return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
        }
        var propValue = props[propName];
        if (!Array.isArray(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
        }
        for (var i2 = 0; i2 < propValue.length; i2++) {
          var error = typeChecker(propValue, i2, componentName, location2, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createElementTypeChecker() {
      function validate(props, propName, componentName, location2, propFullName) {
        var propValue = props[propName];
        if (!isValidElement(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createElementTypeTypeChecker() {
      function validate(props, propName, componentName, location2, propFullName) {
        var propValue = props[propName];
        if (!ReactIs$1.isValidElementType(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createInstanceTypeChecker(expectedClass) {
      function validate(props, propName, componentName, location2, propFullName) {
        if (!(props[propName] instanceof expectedClass)) {
          var expectedClassName = expectedClass.name || ANONYMOUS;
          var actualClassName = getClassName(props[propName]);
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createEnumTypeChecker(expectedValues) {
      if (!Array.isArray(expectedValues)) {
        {
          if (arguments.length > 1) {
            printWarning(
              "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
            );
          } else {
            printWarning("Invalid argument supplied to oneOf, expected an array.");
          }
        }
        return emptyFunctionThatReturnsNull;
      }
      function validate(props, propName, componentName, location2, propFullName) {
        var propValue = props[propName];
        for (var i2 = 0; i2 < expectedValues.length; i2++) {
          if (is(propValue, expectedValues[i2])) {
            return null;
          }
        }
        var valuesString = JSON.stringify(expectedValues, function replacer2(key, value) {
          var type = getPreciseType(value);
          if (type === "symbol") {
            return String(value);
          }
          return value;
        });
        return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
      }
      return createChainableTypeChecker(validate);
    }
    function createObjectOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location2, propFullName) {
        if (typeof typeChecker !== "function") {
          return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
        }
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== "object") {
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
        }
        for (var key in propValue) {
          if (has(propValue, key)) {
            var error = typeChecker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createUnionTypeChecker(arrayOfTypeCheckers) {
      if (!Array.isArray(arrayOfTypeCheckers)) {
        printWarning("Invalid argument supplied to oneOfType, expected an instance of array.");
        return emptyFunctionThatReturnsNull;
      }
      for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
        var checker = arrayOfTypeCheckers[i2];
        if (typeof checker !== "function") {
          printWarning(
            "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + "."
          );
          return emptyFunctionThatReturnsNull;
        }
      }
      function validate(props, propName, componentName, location2, propFullName) {
        var expectedTypes = [];
        for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
          var checker2 = arrayOfTypeCheckers[i3];
          var checkerResult = checker2(props, propName, componentName, location2, propFullName, ReactPropTypesSecret);
          if (checkerResult == null) {
            return null;
          }
          if (checkerResult.data && has(checkerResult.data, "expectedType")) {
            expectedTypes.push(checkerResult.data.expectedType);
          }
        }
        var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
        return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
      }
      return createChainableTypeChecker(validate);
    }
    function createNodeChecker() {
      function validate(props, propName, componentName, location2, propFullName) {
        if (!isNode(props[propName])) {
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function invalidValidatorError(componentName, location2, propFullName, key, type) {
      return new PropTypeError(
        (componentName || "React class") + ": " + location2 + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
      );
    }
    function createShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location2, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== "object") {
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
        }
        for (var key in shapeTypes) {
          var checker = shapeTypes[key];
          if (typeof checker !== "function") {
            return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
          }
          var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
          if (error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createStrictShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location2, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== "object") {
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
        }
        var allKeys = assign$1({}, props[propName], shapeTypes);
        for (var key in allKeys) {
          var checker = shapeTypes[key];
          if (has(shapeTypes, key) && typeof checker !== "function") {
            return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
          }
          if (!checker) {
            return new PropTypeError(
              "Invalid " + location2 + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
            );
          }
          var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
          if (error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function isNode(propValue) {
      switch (typeof propValue) {
        case "number":
        case "string":
        case "undefined":
          return true;
        case "boolean":
          return !propValue;
        case "object":
          if (Array.isArray(propValue)) {
            return propValue.every(isNode);
          }
          if (propValue === null || isValidElement(propValue)) {
            return true;
          }
          var iteratorFn = getIteratorFn(propValue);
          if (iteratorFn) {
            var iterator2 = iteratorFn.call(propValue);
            var step;
            if (iteratorFn !== propValue.entries) {
              while (!(step = iterator2.next()).done) {
                if (!isNode(step.value)) {
                  return false;
                }
              }
            } else {
              while (!(step = iterator2.next()).done) {
                var entry = step.value;
                if (entry) {
                  if (!isNode(entry[1])) {
                    return false;
                  }
                }
              }
            }
          } else {
            return false;
          }
          return true;
        default:
          return false;
      }
    }
    function isSymbol(propType, propValue) {
      if (propType === "symbol") {
        return true;
      }
      if (!propValue) {
        return false;
      }
      if (propValue["@@toStringTag"] === "Symbol") {
        return true;
      }
      if (typeof Symbol === "function" && propValue instanceof Symbol) {
        return true;
      }
      return false;
    }
    function getPropType(propValue) {
      var propType = typeof propValue;
      if (Array.isArray(propValue)) {
        return "array";
      }
      if (propValue instanceof RegExp) {
        return "object";
      }
      if (isSymbol(propType, propValue)) {
        return "symbol";
      }
      return propType;
    }
    function getPreciseType(propValue) {
      if (typeof propValue === "undefined" || propValue === null) {
        return "" + propValue;
      }
      var propType = getPropType(propValue);
      if (propType === "object") {
        if (propValue instanceof Date) {
          return "date";
        } else if (propValue instanceof RegExp) {
          return "regexp";
        }
      }
      return propType;
    }
    function getPostfixForTypeWarning(value) {
      var type = getPreciseType(value);
      switch (type) {
        case "array":
        case "object":
          return "an " + type;
        case "boolean":
        case "date":
        case "regexp":
          return "a " + type;
        default:
          return type;
      }
    }
    function getClassName(propValue) {
      if (!propValue.constructor || !propValue.constructor.name) {
        return ANONYMOUS;
      }
      return propValue.constructor.name;
    }
    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
  {
    var ReactIs = reactIsExports$1;
    var throwOnDirectAccess = true;
    propTypes.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
  }
  var propTypesExports = propTypes.exports;
  const PropTypes = /* @__PURE__ */ getDefaultExportFromCjs(propTypesExports);
  function isClassComponent$1(elementType) {
    const {
      prototype: prototype2 = {}
    } = elementType;
    return Boolean(prototype2.isReactComponent);
  }
  function acceptingRef(props, propName, componentName, location2, propFullName) {
    const element = props[propName];
    const safePropName = propFullName || propName;
    if (element == null || // When server-side rendering React doesn't warn either.
    // This is not an accurate check for SSR.
    // This is only in place for Emotion compat.
    // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
    typeof window === "undefined") {
      return null;
    }
    let warningHint;
    const elementType = element.type;
    if (typeof elementType === "function" && !isClassComponent$1(elementType)) {
      warningHint = "Did you accidentally use a plain function component for an element instead?";
    }
    if (warningHint !== void 0) {
      return new Error(`Invalid ${location2} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
    }
    return null;
  }
  const elementAcceptingRef = chainPropTypes(PropTypes.element, acceptingRef);
  elementAcceptingRef.isRequired = chainPropTypes(PropTypes.element.isRequired, acceptingRef);
  const elementAcceptingRef$1 = elementAcceptingRef;
  function isClassComponent(elementType) {
    const {
      prototype: prototype2 = {}
    } = elementType;
    return Boolean(prototype2.isReactComponent);
  }
  function elementTypeAcceptingRef(props, propName, componentName, location2, propFullName) {
    const propValue = props[propName];
    const safePropName = propFullName || propName;
    if (propValue == null || // When server-side rendering React doesn't warn either.
    // This is not an accurate check for SSR.
    // This is only in place for emotion compat.
    // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
    typeof window === "undefined") {
      return null;
    }
    let warningHint;
    if (typeof propValue === "function" && !isClassComponent(propValue)) {
      warningHint = "Did you accidentally provide a plain function component instead?";
    }
    if (warningHint !== void 0) {
      return new Error(`Invalid ${location2} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element type that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
    }
    return null;
  }
  const elementTypeAcceptingRef$1 = chainPropTypes(PropTypes.elementType, elementTypeAcceptingRef);
  const specialProperty = "exact-prop: ​";
  function exactProp(propTypes2) {
    return _extends({}, propTypes2, {
      [specialProperty]: (props) => {
        const unsupportedProps = Object.keys(props).filter((prop) => !propTypes2.hasOwnProperty(prop));
        if (unsupportedProps.length > 0) {
          return new Error(`The following props are not supported: ${unsupportedProps.map((prop) => `\`${prop}\``).join(", ")}. Please remove them.`);
        }
        return null;
      }
    });
  }
  var reactIs = { exports: {} };
  var reactIs_development = {};
  /**
   * @license React
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  {
    (function() {
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var enableScopeAPI = false;
      var enableCacheElement = false;
      var enableTransitionTracing = false;
      var enableLegacyHidden = false;
      var enableDebugTracing = false;
      var REACT_MODULE_REFERENCE;
      {
        REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      }
      function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") {
          return true;
        }
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
          return true;
        }
        if (typeof type === "object" && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
          // types supported by any Flight configuration anywhere since
          // we don't know which Flight build this will end up being used
          // with.
          type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
            return true;
          }
        }
        return false;
      }
      function typeOf(object) {
        if (typeof object === "object" && object !== null) {
          var $$typeof = object.$$typeof;
          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type;
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                case REACT_SUSPENSE_LIST_TYPE:
                  return type;
                default:
                  var $$typeofType = type && type.$$typeof;
                  switch ($$typeofType) {
                    case REACT_SERVER_CONTEXT_TYPE:
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;
                    default:
                      return $$typeof;
                  }
              }
            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }
        return void 0;
      }
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element2 = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false;
      var hasWarnedAboutDeprecatedIsConcurrentMode = false;
      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true;
            console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
          }
        }
        return false;
      }
      function isConcurrentMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
            hasWarnedAboutDeprecatedIsConcurrentMode = true;
            console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
          }
        }
        return false;
      }
      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }
      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }
      function isElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }
      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }
      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }
      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }
      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }
      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }
      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }
      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }
      function isSuspenseList(object) {
        return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
      }
      reactIs_development.ContextConsumer = ContextConsumer;
      reactIs_development.ContextProvider = ContextProvider;
      reactIs_development.Element = Element2;
      reactIs_development.ForwardRef = ForwardRef;
      reactIs_development.Fragment = Fragment;
      reactIs_development.Lazy = Lazy;
      reactIs_development.Memo = Memo;
      reactIs_development.Portal = Portal;
      reactIs_development.Profiler = Profiler;
      reactIs_development.StrictMode = StrictMode;
      reactIs_development.Suspense = Suspense;
      reactIs_development.SuspenseList = SuspenseList;
      reactIs_development.isAsyncMode = isAsyncMode;
      reactIs_development.isConcurrentMode = isConcurrentMode;
      reactIs_development.isContextConsumer = isContextConsumer;
      reactIs_development.isContextProvider = isContextProvider;
      reactIs_development.isElement = isElement;
      reactIs_development.isForwardRef = isForwardRef;
      reactIs_development.isFragment = isFragment;
      reactIs_development.isLazy = isLazy;
      reactIs_development.isMemo = isMemo;
      reactIs_development.isPortal = isPortal;
      reactIs_development.isProfiler = isProfiler;
      reactIs_development.isStrictMode = isStrictMode;
      reactIs_development.isSuspense = isSuspense;
      reactIs_development.isSuspenseList = isSuspenseList;
      reactIs_development.isValidElementType = isValidElementType;
      reactIs_development.typeOf = typeOf;
    })();
  }
  {
    reactIs.exports = reactIs_development;
  }
  var reactIsExports = reactIs.exports;
  const fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
  function getFunctionName(fn) {
    const match2 = `${fn}`.match(fnNameMatchRegex);
    const name = match2 && match2[1];
    return name || "";
  }
  function getFunctionComponentName(Component, fallback = "") {
    return Component.displayName || Component.name || getFunctionName(Component) || fallback;
  }
  function getWrappedName(outerType, innerType, wrapperName) {
    const functionName = getFunctionComponentName(innerType);
    return outerType.displayName || (functionName !== "" ? `${wrapperName}(${functionName})` : wrapperName);
  }
  function getDisplayName(Component) {
    if (Component == null) {
      return void 0;
    }
    if (typeof Component === "string") {
      return Component;
    }
    if (typeof Component === "function") {
      return getFunctionComponentName(Component, "Component");
    }
    if (typeof Component === "object") {
      switch (Component.$$typeof) {
        case reactIsExports.ForwardRef:
          return getWrappedName(Component, Component.render, "ForwardRef");
        case reactIsExports.Memo:
          return getWrappedName(Component, Component.type, "memo");
        default:
          return void 0;
      }
    }
    return void 0;
  }
  const refType = PropTypes.oneOfType([PropTypes.func, PropTypes.object]);
  const refType$1 = refType;
  function capitalize(string) {
    if (typeof string !== "string") {
      throw new Error(`MUI: \`capitalize(string)\` expects a string argument.`);
    }
    return string.charAt(0).toUpperCase() + string.slice(1);
  }
  function createChainedFunction(...funcs) {
    return funcs.reduce((acc, func) => {
      if (func == null) {
        return acc;
      }
      return function chainedFunction(...args) {
        acc.apply(this, args);
        func.apply(this, args);
      };
    }, () => {
    });
  }
  function debounce(func, wait2 = 166) {
    let timeout;
    function debounced(...args) {
      const later = () => {
        func.apply(this, args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait2);
    }
    debounced.clear = () => {
      clearTimeout(timeout);
    };
    return debounced;
  }
  function deprecatedPropType(validator2, reason) {
    return (props, propName, componentName, location2, propFullName) => {
      const componentNameSafe = componentName || "<<anonymous>>";
      const propFullNameSafe = propFullName || propName;
      if (typeof props[propName] !== "undefined") {
        return new Error(`The ${location2} \`${propFullNameSafe}\` of \`${componentNameSafe}\` is deprecated. ${reason}`);
      }
      return null;
    };
  }
  function isMuiElement(element, muiNames) {
    return /* @__PURE__ */ reactExports.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
  }
  function ownerDocument(node2) {
    return node2 && node2.ownerDocument || document;
  }
  function ownerWindow(node2) {
    const doc = ownerDocument(node2);
    return doc.defaultView || window;
  }
  function requirePropFactory(componentNameInError, Component) {
    const prevPropTypes = Component ? _extends({}, Component.propTypes) : null;
    const requireProp = (requiredProp) => (props, propName, componentName, location2, propFullName, ...args) => {
      const propFullNameSafe = propFullName || propName;
      const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];
      if (defaultTypeChecker) {
        const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location2, propFullName, ...args);
        if (typeCheckerResult) {
          return typeCheckerResult;
        }
      }
      if (typeof props[propName] !== "undefined" && !props[requiredProp]) {
        return new Error(`The prop \`${propFullNameSafe}\` of \`${componentNameInError}\` can only be used together with the \`${requiredProp}\` prop.`);
      }
      return null;
    };
    return requireProp;
  }
  function setRef(ref, value) {
    if (typeof ref === "function") {
      ref(value);
    } else if (ref) {
      ref.current = value;
    }
  }
  const useEnhancedEffect = typeof window !== "undefined" ? reactExports.useLayoutEffect : reactExports.useEffect;
  const useEnhancedEffect$1 = useEnhancedEffect;
  let globalId = 0;
  function useGlobalId(idOverride) {
    const [defaultId, setDefaultId] = reactExports.useState(idOverride);
    const id = idOverride || defaultId;
    reactExports.useEffect(() => {
      if (defaultId == null) {
        globalId += 1;
        setDefaultId(`mui-${globalId}`);
      }
    }, [defaultId]);
    return id;
  }
  const maybeReactUseId = React$1["useId".toString()];
  function useId(idOverride) {
    if (maybeReactUseId !== void 0) {
      const reactId = maybeReactUseId();
      return idOverride != null ? idOverride : reactId;
    }
    return useGlobalId(idOverride);
  }
  function unsupportedProp(props, propName, componentName, location2, propFullName) {
    const propFullNameSafe = propFullName || propName;
    if (typeof props[propName] !== "undefined") {
      return new Error(`The prop \`${propFullNameSafe}\` is not supported. Please remove it.`);
    }
    return null;
  }
  function useControlled({
    controlled,
    default: defaultProp,
    name,
    state = "value"
  }) {
    const {
      current: isControlled
    } = reactExports.useRef(controlled !== void 0);
    const [valueState, setValue] = reactExports.useState(defaultProp);
    const value = isControlled ? controlled : valueState;
    {
      reactExports.useEffect(() => {
        if (isControlled !== (controlled !== void 0)) {
          console.error([`MUI: A component is changing the ${isControlled ? "" : "un"}controlled ${state} state of ${name} to be ${isControlled ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${name} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
        }
      }, [state, name, controlled]);
      const {
        current: defaultValue
      } = reactExports.useRef(defaultProp);
      reactExports.useEffect(() => {
        if (!isControlled && defaultValue !== defaultProp) {
          console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. To suppress this warning opt to use a controlled ${name}.`].join("\n"));
        }
      }, [JSON.stringify(defaultProp)]);
    }
    const setValueIfUncontrolled = reactExports.useCallback((newValue) => {
      if (!isControlled) {
        setValue(newValue);
      }
    }, []);
    return [value, setValueIfUncontrolled];
  }
  function useEventCallback(fn) {
    const ref = reactExports.useRef(fn);
    useEnhancedEffect$1(() => {
      ref.current = fn;
    });
    return reactExports.useCallback((...args) => (
      // @ts-expect-error hide `this`
      // tslint:disable-next-line:ban-comma-operator
      (0, ref.current)(...args)
    ), []);
  }
  function useForkRef(...refs) {
    return reactExports.useMemo(() => {
      if (refs.every((ref) => ref == null)) {
        return null;
      }
      return (instance2) => {
        refs.forEach((ref) => {
          setRef(ref, instance2);
        });
      };
    }, refs);
  }
  let hadKeyboardEvent = true;
  let hadFocusVisibleRecently = false;
  let hadFocusVisibleRecentlyTimeout;
  const inputTypesWhitelist = {
    text: true,
    search: true,
    url: true,
    tel: true,
    email: true,
    password: true,
    number: true,
    date: true,
    month: true,
    week: true,
    time: true,
    datetime: true,
    "datetime-local": true
  };
  function focusTriggersKeyboardModality(node2) {
    const {
      type,
      tagName
    } = node2;
    if (tagName === "INPUT" && inputTypesWhitelist[type] && !node2.readOnly) {
      return true;
    }
    if (tagName === "TEXTAREA" && !node2.readOnly) {
      return true;
    }
    if (node2.isContentEditable) {
      return true;
    }
    return false;
  }
  function handleKeyDown(event) {
    if (event.metaKey || event.altKey || event.ctrlKey) {
      return;
    }
    hadKeyboardEvent = true;
  }
  function handlePointerDown() {
    hadKeyboardEvent = false;
  }
  function handleVisibilityChange() {
    if (this.visibilityState === "hidden") {
      if (hadFocusVisibleRecently) {
        hadKeyboardEvent = true;
      }
    }
  }
  function prepare(doc) {
    doc.addEventListener("keydown", handleKeyDown, true);
    doc.addEventListener("mousedown", handlePointerDown, true);
    doc.addEventListener("pointerdown", handlePointerDown, true);
    doc.addEventListener("touchstart", handlePointerDown, true);
    doc.addEventListener("visibilitychange", handleVisibilityChange, true);
  }
  function isFocusVisible(event) {
    const {
      target
    } = event;
    try {
      return target.matches(":focus-visible");
    } catch (error) {
    }
    return hadKeyboardEvent || focusTriggersKeyboardModality(target);
  }
  function useIsFocusVisible() {
    const ref = reactExports.useCallback((node2) => {
      if (node2 != null) {
        prepare(node2.ownerDocument);
      }
    }, []);
    const isFocusVisibleRef = reactExports.useRef(false);
    function handleBlurVisible() {
      if (isFocusVisibleRef.current) {
        hadFocusVisibleRecently = true;
        window.clearTimeout(hadFocusVisibleRecentlyTimeout);
        hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {
          hadFocusVisibleRecently = false;
        }, 100);
        isFocusVisibleRef.current = false;
        return true;
      }
      return false;
    }
    function handleFocusVisible(event) {
      if (isFocusVisible(event)) {
        isFocusVisibleRef.current = true;
        return true;
      }
      return false;
    }
    return {
      isFocusVisibleRef,
      onFocus: handleFocusVisible,
      onBlur: handleBlurVisible,
      ref
    };
  }
  function getTypeByValue(value) {
    const valueType = typeof value;
    switch (valueType) {
      case "number":
        if (Number.isNaN(value)) {
          return "NaN";
        }
        if (!Number.isFinite(value)) {
          return "Infinity";
        }
        if (value !== Math.floor(value)) {
          return "float";
        }
        return "number";
      case "object":
        if (value === null) {
          return "null";
        }
        return value.constructor.name;
      default:
        return valueType;
    }
  }
  function ponyfillIsInteger(x) {
    return typeof x === "number" && isFinite(x) && Math.floor(x) === x;
  }
  const isInteger = Number.isInteger || ponyfillIsInteger;
  function requiredInteger(props, propName, componentName, location2) {
    const propValue = props[propName];
    if (propValue == null || !isInteger(propValue)) {
      const propType = getTypeByValue(propValue);
      return new RangeError(`Invalid ${location2} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
    }
    return null;
  }
  function validator(props, propName, ...other) {
    const propValue = props[propName];
    if (propValue === void 0) {
      return null;
    }
    return requiredInteger(props, propName, ...other);
  }
  function validatorNoop() {
    return null;
  }
  validator.isRequired = requiredInteger;
  validatorNoop.isRequired = validatorNoop;
  const integerPropType = validator;
  function resolveProps(defaultProps2, props) {
    const output2 = _extends({}, props);
    Object.keys(defaultProps2).forEach((propName) => {
      if (propName.toString().match(/^(components|slots)$/)) {
        output2[propName] = _extends({}, defaultProps2[propName], output2[propName]);
      } else if (propName.toString().match(/^(componentsProps|slotProps)$/)) {
        const defaultSlotProps = defaultProps2[propName] || {};
        const slotProps = props[propName];
        output2[propName] = {};
        if (!slotProps || !Object.keys(slotProps)) {
          output2[propName] = defaultSlotProps;
        } else if (!defaultSlotProps || !Object.keys(defaultSlotProps)) {
          output2[propName] = slotProps;
        } else {
          output2[propName] = _extends({}, slotProps);
          Object.keys(defaultSlotProps).forEach((slotPropName) => {
            output2[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName]);
          });
        }
      } else if (output2[propName] === void 0) {
        output2[propName] = defaultProps2[propName];
      }
    });
    return output2;
  }
  function composeClasses(slots, getUtilityClass, classes = void 0) {
    const output2 = {};
    Object.keys(slots).forEach(
      // `Object.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
      // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
      (slot) => {
        output2[slot] = slots[slot].reduce((acc, key) => {
          if (key) {
            const utilityClass = getUtilityClass(key);
            if (utilityClass !== "") {
              acc.push(utilityClass);
            }
            if (classes && classes[key]) {
              acc.push(classes[key]);
            }
          }
          return acc;
        }, []).join(" ");
      }
    );
    return output2;
  }
  const defaultGenerator = (componentName) => componentName;
  const createClassNameGenerator = () => {
    let generate = defaultGenerator;
    return {
      configure(generator) {
        generate = generator;
      },
      generate(componentName) {
        return generate(componentName);
      },
      reset() {
        generate = defaultGenerator;
      }
    };
  };
  const ClassNameGenerator = createClassNameGenerator();
  const ClassNameGenerator$1 = ClassNameGenerator;
  const globalStateClassesMapping = {
    active: "active",
    checked: "checked",
    completed: "completed",
    disabled: "disabled",
    error: "error",
    expanded: "expanded",
    focused: "focused",
    focusVisible: "focusVisible",
    open: "open",
    readOnly: "readOnly",
    required: "required",
    selected: "selected"
  };
  function generateUtilityClass(componentName, slot, globalStatePrefix = "Mui") {
    const globalStateClass = globalStateClassesMapping[slot];
    return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${ClassNameGenerator$1.generate(componentName)}-${slot}`;
  }
  function generateUtilityClasses(componentName, slots, globalStatePrefix = "Mui") {
    const result = {};
    slots.forEach((slot) => {
      result[slot] = generateUtilityClass(componentName, slot, globalStatePrefix);
    });
    return result;
  }
  const THEME_ID = "$$material";
  function memoize$1(fn) {
    var cache = /* @__PURE__ */ Object.create(null);
    return function(arg) {
      if (cache[arg] === void 0)
        cache[arg] = fn(arg);
      return cache[arg];
    };
  }
  var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
  var isPropValid = /* @__PURE__ */ memoize$1(
    function(prop) {
      return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
    }
    /* Z+1 */
  );
  function sheetForTag(tag) {
    if (tag.sheet) {
      return tag.sheet;
    }
    for (var i2 = 0; i2 < document.styleSheets.length; i2++) {
      if (document.styleSheets[i2].ownerNode === tag) {
        return document.styleSheets[i2];
      }
    }
  }
  function createStyleElement(options) {
    var tag = document.createElement("style");
    tag.setAttribute("data-emotion", options.key);
    if (options.nonce !== void 0) {
      tag.setAttribute("nonce", options.nonce);
    }
    tag.appendChild(document.createTextNode(""));
    tag.setAttribute("data-s", "");
    return tag;
  }
  var StyleSheet = /* @__PURE__ */ function() {
    function StyleSheet2(options) {
      var _this = this;
      this._insertTag = function(tag) {
        var before;
        if (_this.tags.length === 0) {
          if (_this.insertionPoint) {
            before = _this.insertionPoint.nextSibling;
          } else if (_this.prepend) {
            before = _this.container.firstChild;
          } else {
            before = _this.before;
          }
        } else {
          before = _this.tags[_this.tags.length - 1].nextSibling;
        }
        _this.container.insertBefore(tag, before);
        _this.tags.push(tag);
      };
      this.isSpeedy = options.speedy === void 0 ? false : options.speedy;
      this.tags = [];
      this.ctr = 0;
      this.nonce = options.nonce;
      this.key = options.key;
      this.container = options.container;
      this.prepend = options.prepend;
      this.insertionPoint = options.insertionPoint;
      this.before = null;
    }
    var _proto = StyleSheet2.prototype;
    _proto.hydrate = function hydrate(nodes) {
      nodes.forEach(this._insertTag);
    };
    _proto.insert = function insert(rule) {
      if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
        this._insertTag(createStyleElement(this));
      }
      var tag = this.tags[this.tags.length - 1];
      {
        var isImportRule2 = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
        if (isImportRule2 && this._alreadyInsertedOrderInsensitiveRule) {
          console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
        }
        this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule2;
      }
      if (this.isSpeedy) {
        var sheet = sheetForTag(tag);
        try {
          sheet.insertRule(rule, sheet.cssRules.length);
        } catch (e) {
          if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule)) {
            console.error('There was a problem inserting the following rule: "' + rule + '"', e);
          }
        }
      } else {
        tag.appendChild(document.createTextNode(rule));
      }
      this.ctr++;
    };
    _proto.flush = function flush() {
      this.tags.forEach(function(tag) {
        return tag.parentNode && tag.parentNode.removeChild(tag);
      });
      this.tags = [];
      this.ctr = 0;
      {
        this._alreadyInsertedOrderInsensitiveRule = false;
      }
    };
    return StyleSheet2;
  }();
  var MS = "-ms-";
  var MOZ = "-moz-";
  var WEBKIT = "-webkit-";
  var COMMENT = "comm";
  var RULESET = "rule";
  var DECLARATION = "decl";
  var IMPORT = "@import";
  var KEYFRAMES = "@keyframes";
  var LAYER = "@layer";
  var abs = Math.abs;
  var from = String.fromCharCode;
  var assign = Object.assign;
  function hash(value, length2) {
    return charat(value, 0) ^ 45 ? (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
  }
  function trim(value) {
    return value.trim();
  }
  function match(value, pattern) {
    return (value = pattern.exec(value)) ? value[0] : value;
  }
  function replace(value, pattern, replacement) {
    return value.replace(pattern, replacement);
  }
  function indexof(value, search) {
    return value.indexOf(search);
  }
  function charat(value, index2) {
    return value.charCodeAt(index2) | 0;
  }
  function substr(value, begin, end) {
    return value.slice(begin, end);
  }
  function strlen(value) {
    return value.length;
  }
  function sizeof(value) {
    return value.length;
  }
  function append(value, array) {
    return array.push(value), value;
  }
  function combine(array, callback) {
    return array.map(callback).join("");
  }
  var line = 1;
  var column = 1;
  var length = 0;
  var position = 0;
  var character = 0;
  var characters = "";
  function node(value, root, parent, type, props, children, length2) {
    return { value, root, parent, type, props, children, line, column, length: length2, return: "" };
  }
  function copy(root, props) {
    return assign(node("", null, null, "", null, null, 0), root, { length: -root.length }, props);
  }
  function char() {
    return character;
  }
  function prev() {
    character = position > 0 ? charat(characters, --position) : 0;
    if (column--, character === 10)
      column = 1, line--;
    return character;
  }
  function next() {
    character = position < length ? charat(characters, position++) : 0;
    if (column++, character === 10)
      column = 1, line++;
    return character;
  }
  function peek() {
    return charat(characters, position);
  }
  function caret() {
    return position;
  }
  function slice(begin, end) {
    return substr(characters, begin, end);
  }
  function token(type) {
    switch (type) {
      case 0:
      case 9:
      case 10:
      case 13:
      case 32:
        return 5;
      case 33:
      case 43:
      case 44:
      case 47:
      case 62:
      case 64:
      case 126:
      case 59:
      case 123:
      case 125:
        return 4;
      case 58:
        return 3;
      case 34:
      case 39:
      case 40:
      case 91:
        return 2;
      case 41:
      case 93:
        return 1;
    }
    return 0;
  }
  function alloc(value) {
    return line = column = 1, length = strlen(characters = value), position = 0, [];
  }
  function dealloc(value) {
    return characters = "", value;
  }
  function delimit(type) {
    return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
  }
  function whitespace(type) {
    while (character = peek())
      if (character < 33)
        next();
      else
        break;
    return token(type) > 2 || token(character) > 3 ? "" : " ";
  }
  function escaping(index2, count) {
    while (--count && next())
      if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
        break;
    return slice(index2, caret() + (count < 6 && peek() == 32 && next() == 32));
  }
  function delimiter(type) {
    while (next())
      switch (character) {
        case type:
          return position;
        case 34:
        case 39:
          if (type !== 34 && type !== 39)
            delimiter(character);
          break;
        case 40:
          if (type === 41)
            delimiter(type);
          break;
        case 92:
          next();
          break;
      }
    return position;
  }
  function commenter(type, index2) {
    while (next())
      if (type + character === 47 + 10)
        break;
      else if (type + character === 42 + 42 && peek() === 47)
        break;
    return "/*" + slice(index2, position - 1) + "*" + from(type === 47 ? type : next());
  }
  function identifier(index2) {
    while (!token(peek()))
      next();
    return slice(index2, position);
  }
  function compile(value) {
    return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
  }
  function parse(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
    var index2 = 0;
    var offset = 0;
    var length2 = pseudo;
    var atrule = 0;
    var property = 0;
    var previous = 0;
    var variable = 1;
    var scanning = 1;
    var ampersand = 1;
    var character2 = 0;
    var type = "";
    var props = rules;
    var children = rulesets;
    var reference = rule;
    var characters2 = type;
    while (scanning)
      switch (previous = character2, character2 = next()) {
        case 40:
          if (previous != 108 && charat(characters2, length2 - 1) == 58) {
            if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
              ampersand = -1;
            break;
          }
        case 34:
        case 39:
        case 91:
          characters2 += delimit(character2);
          break;
        case 9:
        case 10:
        case 13:
        case 32:
          characters2 += whitespace(previous);
          break;
        case 92:
          characters2 += escaping(caret() - 1, 7);
          continue;
        case 47:
          switch (peek()) {
            case 42:
            case 47:
              append(comment(commenter(next(), caret()), root, parent), declarations);
              break;
            default:
              characters2 += "/";
          }
          break;
        case 123 * variable:
          points[index2++] = strlen(characters2) * ampersand;
        case 125 * variable:
        case 59:
        case 0:
          switch (character2) {
            case 0:
            case 125:
              scanning = 0;
            case 59 + offset:
              if (ampersand == -1)
                characters2 = replace(characters2, /\f/g, "");
              if (property > 0 && strlen(characters2) - length2)
                append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2), declarations);
              break;
            case 59:
              characters2 += ";";
            default:
              append(reference = ruleset(characters2, root, parent, index2, offset, rules, points, type, props = [], children = [], length2), rulesets);
              if (character2 === 123)
                if (offset === 0)
                  parse(characters2, root, reference, reference, props, rulesets, length2, points, children);
                else
                  switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                    case 100:
                    case 108:
                    case 109:
                    case 115:
                      parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length2), children), rules, children, length2, points, rule ? props : children);
                      break;
                    default:
                      parse(characters2, reference, reference, reference, [""], children, 0, points, children);
                  }
          }
          index2 = offset = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
          break;
        case 58:
          length2 = 1 + strlen(characters2), property = previous;
        default:
          if (variable < 1) {
            if (character2 == 123)
              --variable;
            else if (character2 == 125 && variable++ == 0 && prev() == 125)
              continue;
          }
          switch (characters2 += from(character2), character2 * variable) {
            case 38:
              ampersand = offset > 0 ? 1 : (characters2 += "\f", -1);
              break;
            case 44:
              points[index2++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
              break;
            case 64:
              if (peek() === 45)
                characters2 += delimit(next());
              atrule = peek(), offset = length2 = strlen(type = characters2 += identifier(caret())), character2++;
              break;
            case 45:
              if (previous === 45 && strlen(characters2) == 2)
                variable = 0;
          }
      }
    return rulesets;
  }
  function ruleset(value, root, parent, index2, offset, rules, points, type, props, children, length2) {
    var post = offset - 1;
    var rule = offset === 0 ? rules : [""];
    var size = sizeof(rule);
    for (var i2 = 0, j = 0, k = 0; i2 < index2; ++i2)
      for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i2])), z2 = value; x < size; ++x)
        if (z2 = trim(j > 0 ? rule[x] + " " + y : replace(y, /&\f/g, rule[x])))
          props[k++] = z2;
    return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length2);
  }
  function comment(value, root, parent) {
    return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
  }
  function declaration(value, root, parent, length2) {
    return node(value, root, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
  }
  function serialize(children, callback) {
    var output2 = "";
    var length2 = sizeof(children);
    for (var i2 = 0; i2 < length2; i2++)
      output2 += callback(children[i2], i2, children, callback) || "";
    return output2;
  }
  function stringify(element, index2, children, callback) {
    switch (element.type) {
      case LAYER:
        if (element.children.length)
          break;
      case IMPORT:
      case DECLARATION:
        return element.return = element.return || element.value;
      case COMMENT:
        return "";
      case KEYFRAMES:
        return element.return = element.value + "{" + serialize(element.children, callback) + "}";
      case RULESET:
        element.value = element.props.join(",");
    }
    return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
  }
  function middleware(collection) {
    var length2 = sizeof(collection);
    return function(element, index2, children, callback) {
      var output2 = "";
      for (var i2 = 0; i2 < length2; i2++)
        output2 += collection[i2](element, index2, children, callback) || "";
      return output2;
    };
  }
  var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index2) {
    var previous = 0;
    var character2 = 0;
    while (true) {
      previous = character2;
      character2 = peek();
      if (previous === 38 && character2 === 12) {
        points[index2] = 1;
      }
      if (token(character2)) {
        break;
      }
      next();
    }
    return slice(begin, position);
  };
  var toRules = function toRules2(parsed, points) {
    var index2 = -1;
    var character2 = 44;
    do {
      switch (token(character2)) {
        case 0:
          if (character2 === 38 && peek() === 12) {
            points[index2] = 1;
          }
          parsed[index2] += identifierWithPointTracking(position - 1, points, index2);
          break;
        case 2:
          parsed[index2] += delimit(character2);
          break;
        case 4:
          if (character2 === 44) {
            parsed[++index2] = peek() === 58 ? "&\f" : "";
            points[index2] = parsed[index2].length;
            break;
          }
        default:
          parsed[index2] += from(character2);
      }
    } while (character2 = next());
    return parsed;
  };
  var getRules = function getRules2(value, points) {
    return dealloc(toRules(alloc(value), points));
  };
  var fixedElements = /* @__PURE__ */ new WeakMap();
  var compat = function compat2(element) {
    if (element.type !== "rule" || !element.parent || // positive .length indicates that this rule contains pseudo
    // negative .length indicates that this rule has been already prefixed
    element.length < 1) {
      return;
    }
    var value = element.value, parent = element.parent;
    var isImplicitRule = element.column === parent.column && element.line === parent.line;
    while (parent.type !== "rule") {
      parent = parent.parent;
      if (!parent)
        return;
    }
    if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
      return;
    }
    if (isImplicitRule) {
      return;
    }
    fixedElements.set(element, true);
    var points = [];
    var rules = getRules(value, points);
    var parentRules = parent.props;
    for (var i2 = 0, k = 0; i2 < rules.length; i2++) {
      for (var j = 0; j < parentRules.length; j++, k++) {
        element.props[k] = points[i2] ? rules[i2].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i2];
      }
    }
  };
  var removeLabel = function removeLabel2(element) {
    if (element.type === "decl") {
      var value = element.value;
      if (
        // charcode for l
        value.charCodeAt(0) === 108 && // charcode for b
        value.charCodeAt(2) === 98
      ) {
        element["return"] = "";
        element.value = "";
      }
    }
  };
  var ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
  var isIgnoringComment = function isIgnoringComment2(element) {
    return element.type === "comm" && element.children.indexOf(ignoreFlag) > -1;
  };
  var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache) {
    return function(element, index2, children) {
      if (element.type !== "rule" || cache.compat)
        return;
      var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
      if (unsafePseudoClasses) {
        var isNested = !!element.parent;
        var commentContainer = isNested ? element.parent.children : (
          // global rule at the root level
          children
        );
        for (var i2 = commentContainer.length - 1; i2 >= 0; i2--) {
          var node2 = commentContainer[i2];
          if (node2.line < element.line) {
            break;
          }
          if (node2.column < element.column) {
            if (isIgnoringComment(node2)) {
              return;
            }
            break;
          }
        }
        unsafePseudoClasses.forEach(function(unsafePseudoClass) {
          console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
        });
      }
    };
  };
  var isImportRule = function isImportRule2(element) {
    return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
  };
  var isPrependedWithRegularRules = function isPrependedWithRegularRules2(index2, children) {
    for (var i2 = index2 - 1; i2 >= 0; i2--) {
      if (!isImportRule(children[i2])) {
        return true;
      }
    }
    return false;
  };
  var nullifyElement = function nullifyElement2(element) {
    element.type = "";
    element.value = "";
    element["return"] = "";
    element.children = "";
    element.props = "";
  };
  var incorrectImportAlarm = function incorrectImportAlarm2(element, index2, children) {
    if (!isImportRule(element)) {
      return;
    }
    if (element.parent) {
      console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
      nullifyElement(element);
    } else if (isPrependedWithRegularRules(index2, children)) {
      console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
      nullifyElement(element);
    }
  };
  function prefix(value, length2) {
    switch (hash(value, length2)) {
      case 5103:
        return WEBKIT + "print-" + value + value;
      case 5737:
      case 4201:
      case 3177:
      case 3433:
      case 1641:
      case 4457:
      case 2921:
      case 5572:
      case 6356:
      case 5844:
      case 3191:
      case 6645:
      case 3005:
      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855:
      case 4215:
      case 6389:
      case 5109:
      case 5365:
      case 5621:
      case 3829:
        return WEBKIT + value + value;
      case 5349:
      case 4246:
      case 4810:
      case 6968:
      case 2756:
        return WEBKIT + value + MOZ + value + MS + value + value;
      case 6828:
      case 4268:
        return WEBKIT + value + MS + value + value;
      case 6165:
        return WEBKIT + value + MS + "flex-" + value + value;
      case 5187:
        return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
      case 5443:
        return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/, "") + value;
      case 4675:
        return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/, "") + value;
      case 5548:
        return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
      case 5292:
        return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
      case 6060:
        return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
      case 4554:
        return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
      case 6187:
        return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
      case 5495:
      case 3959:
        return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
      case 4968:
        return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        if (strlen(value) - 1 - length2 > 6)
          switch (charat(value, length2 + 1)) {
            case 109:
              if (charat(value, length2 + 4) !== 45)
                break;
            case 102:
              return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
            case 115:
              return ~indexof(value, "stretch") ? prefix(replace(value, "stretch", "fill-available"), length2) + value : value;
          }
        break;
      case 4949:
        if (charat(value, length2 + 1) !== 115)
          break;
      case 6444:
        switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
          case 107:
            return replace(value, ":", ":" + WEBKIT) + value;
          case 101:
            return replace(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
        }
        break;
      case 5936:
        switch (charat(value, length2 + 11)) {
          case 114:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
          case 108:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
          case 45:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
        }
        return WEBKIT + value + MS + value + value;
    }
    return value;
  }
  var prefixer = function prefixer2(element, index2, children, callback) {
    if (element.length > -1) {
      if (!element["return"])
        switch (element.type) {
          case DECLARATION:
            element["return"] = prefix(element.value, element.length);
            break;
          case KEYFRAMES:
            return serialize([copy(element, {
              value: replace(element.value, "@", "@" + WEBKIT)
            })], callback);
          case RULESET:
            if (element.length)
              return combine(element.props, function(value) {
                switch (match(value, /(::plac\w+|:read-\w+)/)) {
                  case ":read-only":
                  case ":read-write":
                    return serialize([copy(element, {
                      props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")]
                    })], callback);
                  case "::placeholder":
                    return serialize([copy(element, {
                      props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
                    }), copy(element, {
                      props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")]
                    }), copy(element, {
                      props: [replace(value, /:(plac\w+)/, MS + "input-$1")]
                    })], callback);
                }
                return "";
              });
        }
    }
  };
  var defaultStylisPlugins = [prefixer];
  var createCache = function createCache2(options) {
    var key = options.key;
    if (!key) {
      throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
    }
    if (key === "css") {
      var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
      Array.prototype.forEach.call(ssrStyles, function(node2) {
        var dataEmotionAttribute = node2.getAttribute("data-emotion");
        if (dataEmotionAttribute.indexOf(" ") === -1) {
          return;
        }
        document.head.appendChild(node2);
        node2.setAttribute("data-s", "");
      });
    }
    var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
    {
      if (/[^a-z-]/.test(key)) {
        throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
      }
    }
    var inserted = {};
    var container;
    var nodesToHydrate = [];
    {
      container = options.container || document.head;
      Array.prototype.forEach.call(
        // this means we will ignore elements which don't have a space in them which
        // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
        document.querySelectorAll('style[data-emotion^="' + key + ' "]'),
        function(node2) {
          var attrib = node2.getAttribute("data-emotion").split(" ");
          for (var i2 = 1; i2 < attrib.length; i2++) {
            inserted[attrib[i2]] = true;
          }
          nodesToHydrate.push(node2);
        }
      );
    }
    var _insert;
    var omnipresentPlugins = [compat, removeLabel];
    {
      omnipresentPlugins.push(createUnsafeSelectorsAlarm({
        get compat() {
          return cache.compat;
        }
      }), incorrectImportAlarm);
    }
    {
      var currentSheet;
      var finalizingPlugins = [stringify, function(element) {
        if (!element.root) {
          if (element["return"]) {
            currentSheet.insert(element["return"]);
          } else if (element.value && element.type !== COMMENT) {
            currentSheet.insert(element.value + "{}");
          }
        }
      }];
      var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
      var stylis = function stylis2(styles2) {
        return serialize(compile(styles2), serializer);
      };
      _insert = function insert(selector, serialized, sheet, shouldCache) {
        currentSheet = sheet;
        if (serialized.map !== void 0) {
          currentSheet = {
            insert: function insert2(rule) {
              sheet.insert(rule + serialized.map);
            }
          };
        }
        stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
        if (shouldCache) {
          cache.inserted[serialized.name] = true;
        }
      };
    }
    var cache = {
      key,
      sheet: new StyleSheet({
        key,
        container,
        nonce: options.nonce,
        speedy: options.speedy,
        prepend: options.prepend,
        insertionPoint: options.insertionPoint
      }),
      nonce: options.nonce,
      inserted,
      registered: {},
      insert: _insert
    };
    cache.sheet.hydrate(nodesToHydrate);
    return cache;
  };
  var isBrowser$1 = true;
  function getRegisteredStyles(registered, registeredStyles, classNames) {
    var rawClassName = "";
    classNames.split(" ").forEach(function(className) {
      if (registered[className] !== void 0) {
        registeredStyles.push(registered[className] + ";");
      } else {
        rawClassName += className + " ";
      }
    });
    return rawClassName;
  }
  var registerStyles = function registerStyles2(cache, serialized, isStringTag2) {
    var className = cache.key + "-" + serialized.name;
    if (
      // we only need to add the styles to the registered cache if the
      // class name could be used further down
      // the tree but if it's a string tag, we know it won't
      // so we don't have to add it to registered cache.
      // this improves memory usage since we can avoid storing the whole style string
      (isStringTag2 === false || // we need to always store it if we're in compat mode and
      // in node since emotion-server relies on whether a style is in
      // the registered cache to know whether a style is global or not
      // also, note that this check will be dead code eliminated in the browser
      isBrowser$1 === false) && cache.registered[className] === void 0
    ) {
      cache.registered[className] = serialized.styles;
    }
  };
  var insertStyles = function insertStyles2(cache, serialized, isStringTag2) {
    registerStyles(cache, serialized, isStringTag2);
    var className = cache.key + "-" + serialized.name;
    if (cache.inserted[serialized.name] === void 0) {
      var current = serialized;
      do {
        cache.insert(serialized === current ? "." + className : "", current, cache.sheet, true);
        current = current.next;
      } while (current !== void 0);
    }
  };
  function murmur2(str) {
    var h = 0;
    var k, i2 = 0, len = str.length;
    for (; len >= 4; ++i2, len -= 4) {
      k = str.charCodeAt(i2) & 255 | (str.charCodeAt(++i2) & 255) << 8 | (str.charCodeAt(++i2) & 255) << 16 | (str.charCodeAt(++i2) & 255) << 24;
      k = /* Math.imul(k, m): */
      (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
      k ^= /* k >>> r: */
      k >>> 24;
      h = /* Math.imul(k, m): */
      (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
      (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    switch (len) {
      case 3:
        h ^= (str.charCodeAt(i2 + 2) & 255) << 16;
      case 2:
        h ^= (str.charCodeAt(i2 + 1) & 255) << 8;
      case 1:
        h ^= str.charCodeAt(i2) & 255;
        h = /* Math.imul(h, m): */
        (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    h ^= h >>> 13;
    h = /* Math.imul(h, m): */
    (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    return ((h ^ h >>> 15) >>> 0).toString(36);
  }
  var unitlessKeys = {
    animationIterationCount: 1,
    aspectRatio: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    // SVG-related properties
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
  };
  var ILLEGAL_ESCAPE_SEQUENCE_ERROR$1 = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
  var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
  var hyphenateRegex = /[A-Z]|^ms/g;
  var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
  var isCustomProperty = function isCustomProperty2(property) {
    return property.charCodeAt(1) === 45;
  };
  var isProcessableValue = function isProcessableValue2(value) {
    return value != null && typeof value !== "boolean";
  };
  var processStyleName = /* @__PURE__ */ memoize$1(function(styleName) {
    return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
  });
  var processStyleValue = function processStyleValue2(key, value) {
    switch (key) {
      case "animation":
      case "animationName": {
        if (typeof value === "string") {
          return value.replace(animationRegex, function(match2, p1, p2) {
            cursor = {
              name: p1,
              styles: p2,
              next: cursor
            };
            return p1;
          });
        }
      }
    }
    if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
      return value + "px";
    }
    return value;
  };
  {
    var contentValuePattern = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
    var contentValues = ["normal", "none", "initial", "inherit", "unset"];
    var oldProcessStyleValue = processStyleValue;
    var msPattern = /^-ms-/;
    var hyphenPattern = /-(.)/g;
    var hyphenatedCache = {};
    processStyleValue = function processStyleValue2(key, value) {
      if (key === "content") {
        if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
          throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
        }
      }
      var processed = oldProcessStyleValue(key, value);
      if (processed !== "" && !isCustomProperty(key) && key.indexOf("-") !== -1 && hyphenatedCache[key] === void 0) {
        hyphenatedCache[key] = true;
        console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, "ms-").replace(hyphenPattern, function(str, _char) {
          return _char.toUpperCase();
        }) + "?");
      }
      return processed;
    };
  }
  var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
  function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) {
      return "";
    }
    if (interpolation.__emotion_styles !== void 0) {
      if (interpolation.toString() === "NO_COMPONENT_SELECTOR") {
        throw new Error(noComponentSelectorMessage);
      }
      return interpolation;
    }
    switch (typeof interpolation) {
      case "boolean": {
        return "";
      }
      case "object": {
        if (interpolation.anim === 1) {
          cursor = {
            name: interpolation.name,
            styles: interpolation.styles,
            next: cursor
          };
          return interpolation.name;
        }
        if (interpolation.styles !== void 0) {
          var next2 = interpolation.next;
          if (next2 !== void 0) {
            while (next2 !== void 0) {
              cursor = {
                name: next2.name,
                styles: next2.styles,
                next: cursor
              };
              next2 = next2.next;
            }
          }
          var styles2 = interpolation.styles + ";";
          if (interpolation.map !== void 0) {
            styles2 += interpolation.map;
          }
          return styles2;
        }
        return createStringFromObject(mergedProps, registered, interpolation);
      }
      case "function": {
        if (mergedProps !== void 0) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result);
        } else {
          console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
        }
        break;
      }
      case "string":
        {
          var matched = [];
          var replaced = interpolation.replace(animationRegex, function(match2, p1, p2) {
            var fakeVarName = "animation" + matched.length;
            matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, "") + "`");
            return "${" + fakeVarName + "}";
          });
          if (matched.length) {
            console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
          }
        }
        break;
    }
    if (registered == null) {
      return interpolation;
    }
    var cached = registered[interpolation];
    return cached !== void 0 ? cached : interpolation;
  }
  function createStringFromObject(mergedProps, registered, obj) {
    var string = "";
    if (Array.isArray(obj)) {
      for (var i2 = 0; i2 < obj.length; i2++) {
        string += handleInterpolation(mergedProps, registered, obj[i2]) + ";";
      }
    } else {
      for (var _key in obj) {
        var value = obj[_key];
        if (typeof value !== "object") {
          if (registered != null && registered[value] !== void 0) {
            string += _key + "{" + registered[value] + "}";
          } else if (isProcessableValue(value)) {
            string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
          }
        } else {
          if (_key === "NO_COMPONENT_SELECTOR" && true) {
            throw new Error(noComponentSelectorMessage);
          }
          if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
            for (var _i = 0; _i < value.length; _i++) {
              if (isProcessableValue(value[_i])) {
                string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
              }
            }
          } else {
            var interpolated = handleInterpolation(mergedProps, registered, value);
            switch (_key) {
              case "animation":
              case "animationName": {
                string += processStyleName(_key) + ":" + interpolated + ";";
                break;
              }
              default: {
                if (_key === "undefined") {
                  console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                }
                string += _key + "{" + interpolated + "}";
              }
            }
          }
        }
      }
    }
    return string;
  }
  var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
  var sourceMapPattern;
  {
    sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
  }
  var cursor;
  var serializeStyles = function serializeStyles2(args, registered, mergedProps) {
    if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
      return args[0];
    }
    var stringMode = true;
    var styles2 = "";
    cursor = void 0;
    var strings = args[0];
    if (strings == null || strings.raw === void 0) {
      stringMode = false;
      styles2 += handleInterpolation(mergedProps, registered, strings);
    } else {
      if (strings[0] === void 0) {
        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR$1);
      }
      styles2 += strings[0];
    }
    for (var i2 = 1; i2 < args.length; i2++) {
      styles2 += handleInterpolation(mergedProps, registered, args[i2]);
      if (stringMode) {
        if (strings[i2] === void 0) {
          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR$1);
        }
        styles2 += strings[i2];
      }
    }
    var sourceMap;
    {
      styles2 = styles2.replace(sourceMapPattern, function(match3) {
        sourceMap = match3;
        return "";
      });
    }
    labelPattern.lastIndex = 0;
    var identifierName = "";
    var match2;
    while ((match2 = labelPattern.exec(styles2)) !== null) {
      identifierName += "-" + // $FlowFixMe we know it's not null
      match2[1];
    }
    var name = murmur2(styles2) + identifierName;
    {
      return {
        name,
        styles: styles2,
        map: sourceMap,
        next: cursor,
        toString: function toString2() {
          return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
        }
      };
    }
  };
  var syncFallback = function syncFallback2(create) {
    return create();
  };
  var useInsertionEffect = React$1["useInsertionEffect"] ? React$1["useInsertionEffect"] : false;
  var useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect || syncFallback;
  var useInsertionEffectWithLayoutFallback = useInsertionEffect || reactExports.useLayoutEffect;
  var hasOwnProperty = {}.hasOwnProperty;
  var EmotionCacheContext = /* @__PURE__ */ reactExports.createContext(
    // we're doing this to avoid preconstruct's dead code elimination in this one case
    // because this module is primarily intended for the browser and node
    // but it's also required in react native and similar environments sometimes
    // and we could have a special build just for that
    // but this is much easier and the native packages
    // might use a different theme context in the future anyway
    typeof HTMLElement !== "undefined" ? /* @__PURE__ */ createCache({
      key: "css"
    }) : null
  );
  {
    EmotionCacheContext.displayName = "EmotionCacheContext";
  }
  var withEmotionCache = function withEmotionCache2(func) {
    return /* @__PURE__ */ reactExports.forwardRef(function(props, ref) {
      var cache = reactExports.useContext(EmotionCacheContext);
      return func(props, cache, ref);
    });
  };
  var ThemeContext$2 = /* @__PURE__ */ reactExports.createContext({});
  {
    ThemeContext$2.displayName = "EmotionThemeContext";
  }
  var getLastPart = function getLastPart2(functionName) {
    var parts = functionName.split(".");
    return parts[parts.length - 1];
  };
  var getFunctionNameFromStackTraceLine = function getFunctionNameFromStackTraceLine2(line2) {
    var match2 = /^\s+at\s+([A-Za-z0-9$.]+)\s/.exec(line2);
    if (match2)
      return getLastPart(match2[1]);
    match2 = /^([A-Za-z0-9$.]+)@/.exec(line2);
    if (match2)
      return getLastPart(match2[1]);
    return void 0;
  };
  var internalReactFunctionNames = /* @__PURE__ */ new Set(["renderWithHooks", "processChild", "finishClassComponent", "renderToString"]);
  var sanitizeIdentifier = function sanitizeIdentifier2(identifier2) {
    return identifier2.replace(/\$/g, "-");
  };
  var getLabelFromStackTrace = function getLabelFromStackTrace2(stackTrace) {
    if (!stackTrace)
      return void 0;
    var lines = stackTrace.split("\n");
    for (var i2 = 0; i2 < lines.length; i2++) {
      var functionName = getFunctionNameFromStackTraceLine(lines[i2]);
      if (!functionName)
        continue;
      if (internalReactFunctionNames.has(functionName))
        break;
      if (/^[A-Z]/.test(functionName))
        return sanitizeIdentifier(functionName);
    }
    return void 0;
  };
  var typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
  var labelPropName = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
  var createEmotionProps = function createEmotionProps2(type, props) {
    if (typeof props.css === "string" && // check if there is a css declaration
    props.css.indexOf(":") !== -1) {
      throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`" + props.css + "`");
    }
    var newProps = {};
    for (var key in props) {
      if (hasOwnProperty.call(props, key)) {
        newProps[key] = props[key];
      }
    }
    newProps[typePropName] = type;
    if (!!props.css && (typeof props.css !== "object" || typeof props.css.name !== "string" || props.css.name.indexOf("-") === -1)) {
      var label = getLabelFromStackTrace(new Error().stack);
      if (label)
        newProps[labelPropName] = label;
    }
    return newProps;
  };
  var Insertion$2 = function Insertion2(_ref) {
    var cache = _ref.cache, serialized = _ref.serialized, isStringTag2 = _ref.isStringTag;
    registerStyles(cache, serialized, isStringTag2);
    useInsertionEffectAlwaysWithSyncFallback(function() {
      return insertStyles(cache, serialized, isStringTag2);
    });
    return null;
  };
  var Emotion = /* @__PURE__ */ withEmotionCache(function(props, cache, ref) {
    var cssProp = props.css;
    if (typeof cssProp === "string" && cache.registered[cssProp] !== void 0) {
      cssProp = cache.registered[cssProp];
    }
    var WrappedComponent = props[typePropName];
    var registeredStyles = [cssProp];
    var className = "";
    if (typeof props.className === "string") {
      className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
    } else if (props.className != null) {
      className = props.className + " ";
    }
    var serialized = serializeStyles(registeredStyles, void 0, reactExports.useContext(ThemeContext$2));
    if (serialized.name.indexOf("-") === -1) {
      var labelFromStack = props[labelPropName];
      if (labelFromStack) {
        serialized = serializeStyles([serialized, "label:" + labelFromStack + ";"]);
      }
    }
    className += cache.key + "-" + serialized.name;
    var newProps = {};
    for (var key in props) {
      if (hasOwnProperty.call(props, key) && key !== "css" && key !== typePropName && key !== labelPropName) {
        newProps[key] = props[key];
      }
    }
    newProps.ref = ref;
    newProps.className = className;
    return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement(Insertion$2, {
      cache,
      serialized,
      isStringTag: typeof WrappedComponent === "string"
    }), /* @__PURE__ */ reactExports.createElement(WrappedComponent, newProps));
  });
  {
    Emotion.displayName = "EmotionCssPropInternal";
  }
  var Emotion$1 = Emotion;
  var pkg = {
    name: "@emotion/react",
    version: "11.11.1",
    main: "dist/emotion-react.cjs.js",
    module: "dist/emotion-react.esm.js",
    browser: {
      "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
    },
    exports: {
      ".": {
        module: {
          worker: "./dist/emotion-react.worker.esm.js",
          browser: "./dist/emotion-react.browser.esm.js",
          "default": "./dist/emotion-react.esm.js"
        },
        "import": "./dist/emotion-react.cjs.mjs",
        "default": "./dist/emotion-react.cjs.js"
      },
      "./jsx-runtime": {
        module: {
          worker: "./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js",
          browser: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",
          "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js"
        },
        "import": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.mjs",
        "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
      },
      "./_isolated-hnrs": {
        module: {
          worker: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js",
          browser: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",
          "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"
        },
        "import": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.mjs",
        "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
      },
      "./jsx-dev-runtime": {
        module: {
          worker: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js",
          browser: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",
          "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js"
        },
        "import": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.mjs",
        "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
      },
      "./package.json": "./package.json",
      "./types/css-prop": "./types/css-prop.d.ts",
      "./macro": {
        types: {
          "import": "./macro.d.mts",
          "default": "./macro.d.ts"
        },
        "default": "./macro.js"
      }
    },
    types: "types/index.d.ts",
    files: [
      "src",
      "dist",
      "jsx-runtime",
      "jsx-dev-runtime",
      "_isolated-hnrs",
      "types/*.d.ts",
      "macro.*"
    ],
    sideEffects: false,
    author: "Emotion Contributors",
    license: "MIT",
    scripts: {
      "test:typescript": "dtslint types"
    },
    dependencies: {
      "@babel/runtime": "^7.18.3",
      "@emotion/babel-plugin": "^11.11.0",
      "@emotion/cache": "^11.11.0",
      "@emotion/serialize": "^1.1.2",
      "@emotion/use-insertion-effect-with-fallbacks": "^1.0.1",
      "@emotion/utils": "^1.2.1",
      "@emotion/weak-memoize": "^0.3.1",
      "hoist-non-react-statics": "^3.3.1"
    },
    peerDependencies: {
      react: ">=16.8.0"
    },
    peerDependenciesMeta: {
      "@types/react": {
        optional: true
      }
    },
    devDependencies: {
      "@definitelytyped/dtslint": "0.0.112",
      "@emotion/css": "11.11.0",
      "@emotion/css-prettifier": "1.1.3",
      "@emotion/server": "11.11.0",
      "@emotion/styled": "11.11.0",
      "html-tag-names": "^1.1.2",
      react: "16.14.0",
      "svg-tag-names": "^1.1.1",
      typescript: "^4.5.5"
    },
    repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
    publishConfig: {
      access: "public"
    },
    "umd:main": "dist/emotion-react.umd.min.js",
    preconstruct: {
      entrypoints: [
        "./index.js",
        "./jsx-runtime.js",
        "./jsx-dev-runtime.js",
        "./_isolated-hnrs.js"
      ],
      umdName: "emotionReact",
      exports: {
        envConditions: [
          "browser",
          "worker"
        ],
        extra: {
          "./types/css-prop": "./types/css-prop.d.ts",
          "./macro": {
            types: {
              "import": "./macro.d.mts",
              "default": "./macro.d.ts"
            },
            "default": "./macro.js"
          }
        }
      }
    }
  };
  var warnedAboutCssPropForGlobal = false;
  var Global = /* @__PURE__ */ withEmotionCache(function(props, cache) {
    if (!warnedAboutCssPropForGlobal && // check for className as well since the user is
    // probably using the custom createElement which
    // means it will be turned into a className prop
    // $FlowFixMe I don't really want to add it to the type since it shouldn't be used
    (props.className || props.css)) {
      console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
      warnedAboutCssPropForGlobal = true;
    }
    var styles2 = props.styles;
    var serialized = serializeStyles([styles2], void 0, reactExports.useContext(ThemeContext$2));
    var sheetRef = reactExports.useRef();
    useInsertionEffectWithLayoutFallback(function() {
      var key = cache.key + "-global";
      var sheet = new cache.sheet.constructor({
        key,
        nonce: cache.sheet.nonce,
        container: cache.sheet.container,
        speedy: cache.sheet.isSpeedy
      });
      var rehydrating = false;
      var node2 = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
      if (cache.sheet.tags.length) {
        sheet.before = cache.sheet.tags[0];
      }
      if (node2 !== null) {
        rehydrating = true;
        node2.setAttribute("data-emotion", key);
        sheet.hydrate([node2]);
      }
      sheetRef.current = [sheet, rehydrating];
      return function() {
        sheet.flush();
      };
    }, [cache]);
    useInsertionEffectWithLayoutFallback(function() {
      var sheetRefCurrent = sheetRef.current;
      var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
      if (rehydrating) {
        sheetRefCurrent[1] = false;
        return;
      }
      if (serialized.next !== void 0) {
        insertStyles(cache, serialized.next, true);
      }
      if (sheet.tags.length) {
        var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
        sheet.before = element;
        sheet.flush();
      }
      cache.insert("", serialized, sheet, false);
    }, [cache, serialized.name]);
    return null;
  });
  {
    Global.displayName = "EmotionGlobal";
  }
  function css() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return serializeStyles(args);
  }
  var keyframes = function keyframes2() {
    var insertable = css.apply(void 0, arguments);
    var name = "animation-" + insertable.name;
    return {
      name,
      styles: "@keyframes " + name + "{" + insertable.styles + "}",
      anim: 1,
      toString: function toString2() {
        return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
      }
    };
  };
  var classnames = function classnames2(args) {
    var len = args.length;
    var i2 = 0;
    var cls = "";
    for (; i2 < len; i2++) {
      var arg = args[i2];
      if (arg == null)
        continue;
      var toAdd = void 0;
      switch (typeof arg) {
        case "boolean":
          break;
        case "object": {
          if (Array.isArray(arg)) {
            toAdd = classnames2(arg);
          } else {
            if (arg.styles !== void 0 && arg.name !== void 0) {
              console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
            }
            toAdd = "";
            for (var k in arg) {
              if (arg[k] && k) {
                toAdd && (toAdd += " ");
                toAdd += k;
              }
            }
          }
          break;
        }
        default: {
          toAdd = arg;
        }
      }
      if (toAdd) {
        cls && (cls += " ");
        cls += toAdd;
      }
    }
    return cls;
  };
  function merge$1(registered, css2, className) {
    var registeredStyles = [];
    var rawClassName = getRegisteredStyles(registered, registeredStyles, className);
    if (registeredStyles.length < 2) {
      return className;
    }
    return rawClassName + css2(registeredStyles);
  }
  var Insertion$1 = function Insertion2(_ref) {
    var cache = _ref.cache, serializedArr = _ref.serializedArr;
    useInsertionEffectAlwaysWithSyncFallback(function() {
      for (var i2 = 0; i2 < serializedArr.length; i2++) {
        insertStyles(cache, serializedArr[i2], false);
      }
    });
    return null;
  };
  var ClassNames = /* @__PURE__ */ withEmotionCache(function(props, cache) {
    var hasRendered = false;
    var serializedArr = [];
    var css2 = function css3() {
      if (hasRendered && true) {
        throw new Error("css can only be used during render");
      }
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var serialized = serializeStyles(args, cache.registered);
      serializedArr.push(serialized);
      registerStyles(cache, serialized, false);
      return cache.key + "-" + serialized.name;
    };
    var cx = function cx2() {
      if (hasRendered && true) {
        throw new Error("cx can only be used during render");
      }
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return merge$1(cache.registered, css2, classnames(args));
    };
    var content = {
      css: css2,
      cx,
      theme: reactExports.useContext(ThemeContext$2)
    };
    var ele = props.children(content);
    hasRendered = true;
    return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement(Insertion$1, {
      cache,
      serializedArr
    }), ele);
  });
  {
    ClassNames.displayName = "EmotionClassNames";
  }
  {
    var isBrowser = true;
    var isTestEnv = typeof jest !== "undefined" || typeof vi !== "undefined";
    if (isBrowser && !isTestEnv) {
      var globalContext = (
        // $FlowIgnore
        typeof globalThis !== "undefined" ? globalThis : isBrowser ? window : global
      );
      var globalKey = "__EMOTION_REACT_" + pkg.version.split(".")[0] + "__";
      if (globalContext[globalKey]) {
        console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
      }
      globalContext[globalKey] = true;
    }
  }
  var testOmitPropsOnStringTag = isPropValid;
  var testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
    return key !== "theme";
  };
  var getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag) {
    return typeof tag === "string" && // 96 is one less than the char code
    // for "a" so this is checking that
    // it's a lowercase character
    tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
  };
  var composeShouldForwardProps = function composeShouldForwardProps2(tag, options, isReal) {
    var shouldForwardProp2;
    if (options) {
      var optionsShouldForwardProp = options.shouldForwardProp;
      shouldForwardProp2 = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
        return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
      } : optionsShouldForwardProp;
    }
    if (typeof shouldForwardProp2 !== "function" && isReal) {
      shouldForwardProp2 = tag.__emotion_forwardProp;
    }
    return shouldForwardProp2;
  };
  var ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
  var Insertion = function Insertion2(_ref) {
    var cache = _ref.cache, serialized = _ref.serialized, isStringTag2 = _ref.isStringTag;
    registerStyles(cache, serialized, isStringTag2);
    useInsertionEffectAlwaysWithSyncFallback(function() {
      return insertStyles(cache, serialized, isStringTag2);
    });
    return null;
  };
  var createStyled$1 = function createStyled2(tag, options) {
    {
      if (tag === void 0) {
        throw new Error("You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.");
      }
    }
    var isReal = tag.__emotion_real === tag;
    var baseTag = isReal && tag.__emotion_base || tag;
    var identifierName;
    var targetClassName;
    if (options !== void 0) {
      identifierName = options.label;
      targetClassName = options.target;
    }
    var shouldForwardProp2 = composeShouldForwardProps(tag, options, isReal);
    var defaultShouldForwardProp = shouldForwardProp2 || getDefaultShouldForwardProp(baseTag);
    var shouldUseAs = !defaultShouldForwardProp("as");
    return function() {
      var args = arguments;
      var styles2 = isReal && tag.__emotion_styles !== void 0 ? tag.__emotion_styles.slice(0) : [];
      if (identifierName !== void 0) {
        styles2.push("label:" + identifierName + ";");
      }
      if (args[0] == null || args[0].raw === void 0) {
        styles2.push.apply(styles2, args);
      } else {
        if (args[0][0] === void 0) {
          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
        }
        styles2.push(args[0][0]);
        var len = args.length;
        var i2 = 1;
        for (; i2 < len; i2++) {
          if (args[0][i2] === void 0) {
            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
          }
          styles2.push(args[i2], args[0][i2]);
        }
      }
      var Styled = withEmotionCache(function(props, cache, ref) {
        var FinalTag = shouldUseAs && props.as || baseTag;
        var className = "";
        var classInterpolations = [];
        var mergedProps = props;
        if (props.theme == null) {
          mergedProps = {};
          for (var key in props) {
            mergedProps[key] = props[key];
          }
          mergedProps.theme = reactExports.useContext(ThemeContext$2);
        }
        if (typeof props.className === "string") {
          className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
        } else if (props.className != null) {
          className = props.className + " ";
        }
        var serialized = serializeStyles(styles2.concat(classInterpolations), cache.registered, mergedProps);
        className += cache.key + "-" + serialized.name;
        if (targetClassName !== void 0) {
          className += " " + targetClassName;
        }
        var finalShouldForwardProp = shouldUseAs && shouldForwardProp2 === void 0 ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
        var newProps = {};
        for (var _key in props) {
          if (shouldUseAs && _key === "as")
            continue;
          if (
            // $FlowFixMe
            finalShouldForwardProp(_key)
          ) {
            newProps[_key] = props[_key];
          }
        }
        newProps.className = className;
        newProps.ref = ref;
        return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement(Insertion, {
          cache,
          serialized,
          isStringTag: typeof FinalTag === "string"
        }), /* @__PURE__ */ reactExports.createElement(FinalTag, newProps));
      });
      Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
      Styled.defaultProps = tag.defaultProps;
      Styled.__emotion_real = Styled;
      Styled.__emotion_base = baseTag;
      Styled.__emotion_styles = styles2;
      Styled.__emotion_forwardProp = shouldForwardProp2;
      Object.defineProperty(Styled, "toString", {
        value: function value() {
          if (targetClassName === void 0 && true) {
            return "NO_COMPONENT_SELECTOR";
          }
          return "." + targetClassName;
        }
      });
      Styled.withComponent = function(nextTag, nextOptions) {
        return createStyled2(nextTag, _extends({}, options, nextOptions, {
          shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
        })).apply(void 0, styles2);
      };
      return Styled;
    };
  };
  var tags = [
    "a",
    "abbr",
    "address",
    "area",
    "article",
    "aside",
    "audio",
    "b",
    "base",
    "bdi",
    "bdo",
    "big",
    "blockquote",
    "body",
    "br",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "col",
    "colgroup",
    "data",
    "datalist",
    "dd",
    "del",
    "details",
    "dfn",
    "dialog",
    "div",
    "dl",
    "dt",
    "em",
    "embed",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hgroup",
    "hr",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "keygen",
    "label",
    "legend",
    "li",
    "link",
    "main",
    "map",
    "mark",
    "marquee",
    "menu",
    "menuitem",
    "meta",
    "meter",
    "nav",
    "noscript",
    "object",
    "ol",
    "optgroup",
    "option",
    "output",
    "p",
    "param",
    "picture",
    "pre",
    "progress",
    "q",
    "rp",
    "rt",
    "ruby",
    "s",
    "samp",
    "script",
    "section",
    "select",
    "small",
    "source",
    "span",
    "strong",
    "style",
    "sub",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "title",
    "tr",
    "track",
    "u",
    "ul",
    "var",
    "video",
    "wbr",
    // SVG
    "circle",
    "clipPath",
    "defs",
    "ellipse",
    "foreignObject",
    "g",
    "image",
    "line",
    "linearGradient",
    "mask",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "radialGradient",
    "rect",
    "stop",
    "svg",
    "text",
    "tspan"
  ];
  var newStyled = createStyled$1.bind();
  tags.forEach(function(tagName) {
    newStyled[tagName] = newStyled(tagName);
  });
  /**
   * @mui/styled-engine v5.14.9
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  function styled$2(tag, options) {
    const stylesFactory = newStyled(tag, options);
    {
      return (...styles2) => {
        const component = typeof tag === "string" ? `"${tag}"` : "component";
        if (styles2.length === 0) {
          console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join("\n"));
        } else if (styles2.some((style2) => style2 === void 0)) {
          console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
        }
        return stylesFactory(...styles2);
      };
    }
  }
  const internal_processStyles = (tag, processor) => {
    if (Array.isArray(tag.__emotion_styles)) {
      tag.__emotion_styles = processor(tag.__emotion_styles);
    }
  };
  const _excluded$o = ["values", "unit", "step"];
  const sortBreakpointsValues = (values2) => {
    const breakpointsAsArray = Object.keys(values2).map((key) => ({
      key,
      val: values2[key]
    })) || [];
    breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
    return breakpointsAsArray.reduce((acc, obj) => {
      return _extends({}, acc, {
        [obj.key]: obj.val
      });
    }, {});
  };
  function createBreakpoints(breakpoints) {
    const {
      // The breakpoint **start** at this value.
      // For instance with the first breakpoint xs: [xs, sm).
      values: values2 = {
        xs: 0,
        // phone
        sm: 600,
        // tablet
        md: 900,
        // small laptop
        lg: 1200,
        // desktop
        xl: 1536
        // large screen
      },
      unit = "px",
      step = 5
    } = breakpoints, other = _objectWithoutPropertiesLoose(breakpoints, _excluded$o);
    const sortedValues = sortBreakpointsValues(values2);
    const keys2 = Object.keys(sortedValues);
    function up(key) {
      const value = typeof values2[key] === "number" ? values2[key] : key;
      return `@media (min-width:${value}${unit})`;
    }
    function down(key) {
      const value = typeof values2[key] === "number" ? values2[key] : key;
      return `@media (max-width:${value - step / 100}${unit})`;
    }
    function between(start, end) {
      const endIndex = keys2.indexOf(end);
      return `@media (min-width:${typeof values2[start] === "number" ? values2[start] : start}${unit}) and (max-width:${(endIndex !== -1 && typeof values2[keys2[endIndex]] === "number" ? values2[keys2[endIndex]] : end) - step / 100}${unit})`;
    }
    function only(key) {
      if (keys2.indexOf(key) + 1 < keys2.length) {
        return between(key, keys2[keys2.indexOf(key) + 1]);
      }
      return up(key);
    }
    function not(key) {
      const keyIndex = keys2.indexOf(key);
      if (keyIndex === 0) {
        return up(keys2[1]);
      }
      if (keyIndex === keys2.length - 1) {
        return down(keys2[keyIndex]);
      }
      return between(key, keys2[keys2.indexOf(key) + 1]).replace("@media", "@media not all and");
    }
    return _extends({
      keys: keys2,
      values: sortedValues,
      up,
      down,
      between,
      only,
      not,
      unit
    }, other);
  }
  const shape = {
    borderRadius: 4
  };
  const shape$1 = shape;
  const responsivePropType = PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.object, PropTypes.array]);
  const responsivePropType$1 = responsivePropType;
  function merge(acc, item) {
    if (!item) {
      return acc;
    }
    return deepmerge(acc, item, {
      clone: false
      // No need to clone deep, it's way faster.
    });
  }
  const values$1 = {
    xs: 0,
    // phone
    sm: 600,
    // tablet
    md: 900,
    // small laptop
    lg: 1200,
    // desktop
    xl: 1536
    // large screen
  };
  const defaultBreakpoints = {
    // Sorted ASC by size. That's important.
    // It can't be configured as it's used statically for propTypes.
    keys: ["xs", "sm", "md", "lg", "xl"],
    up: (key) => `@media (min-width:${values$1[key]}px)`
  };
  function handleBreakpoints(props, propValue, styleFromPropValue) {
    const theme = props.theme || {};
    if (Array.isArray(propValue)) {
      const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
      return propValue.reduce((acc, item, index2) => {
        acc[themeBreakpoints.up(themeBreakpoints.keys[index2])] = styleFromPropValue(propValue[index2]);
        return acc;
      }, {});
    }
    if (typeof propValue === "object") {
      const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
      return Object.keys(propValue).reduce((acc, breakpoint) => {
        if (Object.keys(themeBreakpoints.values || values$1).indexOf(breakpoint) !== -1) {
          const mediaKey = themeBreakpoints.up(breakpoint);
          acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
        } else {
          const cssKey = breakpoint;
          acc[cssKey] = propValue[cssKey];
        }
        return acc;
      }, {});
    }
    const output2 = styleFromPropValue(propValue);
    return output2;
  }
  function createEmptyBreakpointObject(breakpointsInput = {}) {
    var _breakpointsInput$key;
    const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
      const breakpointStyleKey = breakpointsInput.up(key);
      acc[breakpointStyleKey] = {};
      return acc;
    }, {});
    return breakpointsInOrder || {};
  }
  function removeUnusedBreakpoints(breakpointKeys, style2) {
    return breakpointKeys.reduce((acc, key) => {
      const breakpointOutput = acc[key];
      const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
      if (isBreakpointUnused) {
        delete acc[key];
      }
      return acc;
    }, style2);
  }
  function getPath(obj, path2, checkVars = true) {
    if (!path2 || typeof path2 !== "string") {
      return null;
    }
    if (obj && obj.vars && checkVars) {
      const val = `vars.${path2}`.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
      if (val != null) {
        return val;
      }
    }
    return path2.split(".").reduce((acc, item) => {
      if (acc && acc[item] != null) {
        return acc[item];
      }
      return null;
    }, obj);
  }
  function getStyleValue(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
    let value;
    if (typeof themeMapping === "function") {
      value = themeMapping(propValueFinal);
    } else if (Array.isArray(themeMapping)) {
      value = themeMapping[propValueFinal] || userValue;
    } else {
      value = getPath(themeMapping, propValueFinal) || userValue;
    }
    if (transform) {
      value = transform(value, userValue, themeMapping);
    }
    return value;
  }
  function style$1(options) {
    const {
      prop,
      cssProperty = options.prop,
      themeKey,
      transform
    } = options;
    const fn = (props) => {
      if (props[prop] == null) {
        return null;
      }
      const propValue = props[prop];
      const theme = props.theme;
      const themeMapping = getPath(theme, themeKey) || {};
      const styleFromPropValue = (propValueFinal) => {
        let value = getStyleValue(themeMapping, transform, propValueFinal);
        if (propValueFinal === value && typeof propValueFinal === "string") {
          value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : capitalize(propValueFinal)}`, propValueFinal);
        }
        if (cssProperty === false) {
          return value;
        }
        return {
          [cssProperty]: value
        };
      };
      return handleBreakpoints(props, propValue, styleFromPropValue);
    };
    fn.propTypes = {
      [prop]: responsivePropType$1
    };
    fn.filterProps = [prop];
    return fn;
  }
  function memoize(fn) {
    const cache = {};
    return (arg) => {
      if (cache[arg] === void 0) {
        cache[arg] = fn(arg);
      }
      return cache[arg];
    };
  }
  const properties = {
    m: "margin",
    p: "padding"
  };
  const directions = {
    t: "Top",
    r: "Right",
    b: "Bottom",
    l: "Left",
    x: ["Left", "Right"],
    y: ["Top", "Bottom"]
  };
  const aliases = {
    marginX: "mx",
    marginY: "my",
    paddingX: "px",
    paddingY: "py"
  };
  const getCssProperties = memoize((prop) => {
    if (prop.length > 2) {
      if (aliases[prop]) {
        prop = aliases[prop];
      } else {
        return [prop];
      }
    }
    const [a, b] = prop.split("");
    const property = properties[a];
    const direction = directions[b] || "";
    return Array.isArray(direction) ? direction.map((dir) => property + dir) : [property + direction];
  });
  const marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
  const paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
  const spacingKeys = [...marginKeys, ...paddingKeys];
  function createUnaryUnit(theme, themeKey, defaultValue, propName) {
    var _getPath;
    const themeSpacing = (_getPath = getPath(theme, themeKey, false)) != null ? _getPath : defaultValue;
    if (typeof themeSpacing === "number") {
      return (abs2) => {
        if (typeof abs2 === "string") {
          return abs2;
        }
        {
          if (typeof abs2 !== "number") {
            console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs2}.`);
          }
        }
        return themeSpacing * abs2;
      };
    }
    if (Array.isArray(themeSpacing)) {
      return (abs2) => {
        if (typeof abs2 === "string") {
          return abs2;
        }
        {
          if (!Number.isInteger(abs2)) {
            console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join("\n"));
          } else if (abs2 > themeSpacing.length - 1) {
            console.error([`MUI: The value provided (${abs2}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs2} > ${themeSpacing.length - 1}, you need to add the missing values.`].join("\n"));
          }
        }
        return themeSpacing[abs2];
      };
    }
    if (typeof themeSpacing === "function") {
      return themeSpacing;
    }
    {
      console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, "It should be a number, an array or a function."].join("\n"));
    }
    return () => void 0;
  }
  function createUnarySpacing(theme) {
    return createUnaryUnit(theme, "spacing", 8, "spacing");
  }
  function getValue(transformer, propValue) {
    if (typeof propValue === "string" || propValue == null) {
      return propValue;
    }
    const abs2 = Math.abs(propValue);
    const transformed = transformer(abs2);
    if (propValue >= 0) {
      return transformed;
    }
    if (typeof transformed === "number") {
      return -transformed;
    }
    return `-${transformed}`;
  }
  function getStyleFromPropValue(cssProperties, transformer) {
    return (propValue) => cssProperties.reduce((acc, cssProperty) => {
      acc[cssProperty] = getValue(transformer, propValue);
      return acc;
    }, {});
  }
  function resolveCssProperty(props, keys2, prop, transformer) {
    if (keys2.indexOf(prop) === -1) {
      return null;
    }
    const cssProperties = getCssProperties(prop);
    const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
    const propValue = props[prop];
    return handleBreakpoints(props, propValue, styleFromPropValue);
  }
  function style(props, keys2) {
    const transformer = createUnarySpacing(props.theme);
    return Object.keys(props).map((prop) => resolveCssProperty(props, keys2, prop, transformer)).reduce(merge, {});
  }
  function margin(props) {
    return style(props, marginKeys);
  }
  margin.propTypes = marginKeys.reduce((obj, key) => {
    obj[key] = responsivePropType$1;
    return obj;
  }, {});
  margin.filterProps = marginKeys;
  function padding(props) {
    return style(props, paddingKeys);
  }
  padding.propTypes = paddingKeys.reduce((obj, key) => {
    obj[key] = responsivePropType$1;
    return obj;
  }, {});
  padding.filterProps = paddingKeys;
  spacingKeys.reduce((obj, key) => {
    obj[key] = responsivePropType$1;
    return obj;
  }, {});
  function createSpacing(spacingInput = 8) {
    if (spacingInput.mui) {
      return spacingInput;
    }
    const transform = createUnarySpacing({
      spacing: spacingInput
    });
    const spacing = (...argsInput) => {
      {
        if (!(argsInput.length <= 4)) {
          console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
        }
      }
      const args = argsInput.length === 0 ? [1] : argsInput;
      return args.map((argument) => {
        const output2 = transform(argument);
        return typeof output2 === "number" ? `${output2}px` : output2;
      }).join(" ");
    };
    spacing.mui = true;
    return spacing;
  }
  function compose(...styles2) {
    const handlers = styles2.reduce((acc, style2) => {
      style2.filterProps.forEach((prop) => {
        acc[prop] = style2;
      });
      return acc;
    }, {});
    const fn = (props) => {
      return Object.keys(props).reduce((acc, prop) => {
        if (handlers[prop]) {
          return merge(acc, handlers[prop](props));
        }
        return acc;
      }, {});
    };
    fn.propTypes = styles2.reduce((acc, style2) => Object.assign(acc, style2.propTypes), {});
    fn.filterProps = styles2.reduce((acc, style2) => acc.concat(style2.filterProps), []);
    return fn;
  }
  function borderTransform(value) {
    if (typeof value !== "number") {
      return value;
    }
    return `${value}px solid`;
  }
  const border = style$1({
    prop: "border",
    themeKey: "borders",
    transform: borderTransform
  });
  const borderTop = style$1({
    prop: "borderTop",
    themeKey: "borders",
    transform: borderTransform
  });
  const borderRight = style$1({
    prop: "borderRight",
    themeKey: "borders",
    transform: borderTransform
  });
  const borderBottom = style$1({
    prop: "borderBottom",
    themeKey: "borders",
    transform: borderTransform
  });
  const borderLeft = style$1({
    prop: "borderLeft",
    themeKey: "borders",
    transform: borderTransform
  });
  const borderColor = style$1({
    prop: "borderColor",
    themeKey: "palette"
  });
  const borderTopColor = style$1({
    prop: "borderTopColor",
    themeKey: "palette"
  });
  const borderRightColor = style$1({
    prop: "borderRightColor",
    themeKey: "palette"
  });
  const borderBottomColor = style$1({
    prop: "borderBottomColor",
    themeKey: "palette"
  });
  const borderLeftColor = style$1({
    prop: "borderLeftColor",
    themeKey: "palette"
  });
  const borderRadius = (props) => {
    if (props.borderRadius !== void 0 && props.borderRadius !== null) {
      const transformer = createUnaryUnit(props.theme, "shape.borderRadius", 4, "borderRadius");
      const styleFromPropValue = (propValue) => ({
        borderRadius: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
    }
    return null;
  };
  borderRadius.propTypes = {
    borderRadius: responsivePropType$1
  };
  borderRadius.filterProps = ["borderRadius"];
  compose(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius);
  const gap = (props) => {
    if (props.gap !== void 0 && props.gap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "gap");
      const styleFromPropValue = (propValue) => ({
        gap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.gap, styleFromPropValue);
    }
    return null;
  };
  gap.propTypes = {
    gap: responsivePropType$1
  };
  gap.filterProps = ["gap"];
  const columnGap = (props) => {
    if (props.columnGap !== void 0 && props.columnGap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "columnGap");
      const styleFromPropValue = (propValue) => ({
        columnGap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.columnGap, styleFromPropValue);
    }
    return null;
  };
  columnGap.propTypes = {
    columnGap: responsivePropType$1
  };
  columnGap.filterProps = ["columnGap"];
  const rowGap = (props) => {
    if (props.rowGap !== void 0 && props.rowGap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "rowGap");
      const styleFromPropValue = (propValue) => ({
        rowGap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.rowGap, styleFromPropValue);
    }
    return null;
  };
  rowGap.propTypes = {
    rowGap: responsivePropType$1
  };
  rowGap.filterProps = ["rowGap"];
  const gridColumn = style$1({
    prop: "gridColumn"
  });
  const gridRow = style$1({
    prop: "gridRow"
  });
  const gridAutoFlow = style$1({
    prop: "gridAutoFlow"
  });
  const gridAutoColumns = style$1({
    prop: "gridAutoColumns"
  });
  const gridAutoRows = style$1({
    prop: "gridAutoRows"
  });
  const gridTemplateColumns = style$1({
    prop: "gridTemplateColumns"
  });
  const gridTemplateRows = style$1({
    prop: "gridTemplateRows"
  });
  const gridTemplateAreas = style$1({
    prop: "gridTemplateAreas"
  });
  const gridArea = style$1({
    prop: "gridArea"
  });
  compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
  function paletteTransform(value, userValue) {
    if (userValue === "grey") {
      return userValue;
    }
    return value;
  }
  const color = style$1({
    prop: "color",
    themeKey: "palette",
    transform: paletteTransform
  });
  const bgcolor = style$1({
    prop: "bgcolor",
    cssProperty: "backgroundColor",
    themeKey: "palette",
    transform: paletteTransform
  });
  const backgroundColor = style$1({
    prop: "backgroundColor",
    themeKey: "palette",
    transform: paletteTransform
  });
  compose(color, bgcolor, backgroundColor);
  function sizingTransform(value) {
    return value <= 1 && value !== 0 ? `${value * 100}%` : value;
  }
  const width = style$1({
    prop: "width",
    transform: sizingTransform
  });
  const maxWidth = (props) => {
    if (props.maxWidth !== void 0 && props.maxWidth !== null) {
      const styleFromPropValue = (propValue) => {
        var _props$theme, _props$theme2;
        const breakpoint = ((_props$theme = props.theme) == null || (_props$theme = _props$theme.breakpoints) == null || (_props$theme = _props$theme.values) == null ? void 0 : _props$theme[propValue]) || values$1[propValue];
        if (!breakpoint) {
          return {
            maxWidth: sizingTransform(propValue)
          };
        }
        if (((_props$theme2 = props.theme) == null || (_props$theme2 = _props$theme2.breakpoints) == null ? void 0 : _props$theme2.unit) !== "px") {
          return {
            maxWidth: `${breakpoint}${props.theme.breakpoints.unit}`
          };
        }
        return {
          maxWidth: breakpoint
        };
      };
      return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
    }
    return null;
  };
  maxWidth.filterProps = ["maxWidth"];
  const minWidth = style$1({
    prop: "minWidth",
    transform: sizingTransform
  });
  const height = style$1({
    prop: "height",
    transform: sizingTransform
  });
  const maxHeight = style$1({
    prop: "maxHeight",
    transform: sizingTransform
  });
  const minHeight = style$1({
    prop: "minHeight",
    transform: sizingTransform
  });
  style$1({
    prop: "size",
    cssProperty: "width",
    transform: sizingTransform
  });
  style$1({
    prop: "size",
    cssProperty: "height",
    transform: sizingTransform
  });
  const boxSizing = style$1({
    prop: "boxSizing"
  });
  compose(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
  const defaultSxConfig = {
    // borders
    border: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderTop: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderRight: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderBottom: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderLeft: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderColor: {
      themeKey: "palette"
    },
    borderTopColor: {
      themeKey: "palette"
    },
    borderRightColor: {
      themeKey: "palette"
    },
    borderBottomColor: {
      themeKey: "palette"
    },
    borderLeftColor: {
      themeKey: "palette"
    },
    borderRadius: {
      themeKey: "shape.borderRadius",
      style: borderRadius
    },
    // palette
    color: {
      themeKey: "palette",
      transform: paletteTransform
    },
    bgcolor: {
      themeKey: "palette",
      cssProperty: "backgroundColor",
      transform: paletteTransform
    },
    backgroundColor: {
      themeKey: "palette",
      transform: paletteTransform
    },
    // spacing
    p: {
      style: padding
    },
    pt: {
      style: padding
    },
    pr: {
      style: padding
    },
    pb: {
      style: padding
    },
    pl: {
      style: padding
    },
    px: {
      style: padding
    },
    py: {
      style: padding
    },
    padding: {
      style: padding
    },
    paddingTop: {
      style: padding
    },
    paddingRight: {
      style: padding
    },
    paddingBottom: {
      style: padding
    },
    paddingLeft: {
      style: padding
    },
    paddingX: {
      style: padding
    },
    paddingY: {
      style: padding
    },
    paddingInline: {
      style: padding
    },
    paddingInlineStart: {
      style: padding
    },
    paddingInlineEnd: {
      style: padding
    },
    paddingBlock: {
      style: padding
    },
    paddingBlockStart: {
      style: padding
    },
    paddingBlockEnd: {
      style: padding
    },
    m: {
      style: margin
    },
    mt: {
      style: margin
    },
    mr: {
      style: margin
    },
    mb: {
      style: margin
    },
    ml: {
      style: margin
    },
    mx: {
      style: margin
    },
    my: {
      style: margin
    },
    margin: {
      style: margin
    },
    marginTop: {
      style: margin
    },
    marginRight: {
      style: margin
    },
    marginBottom: {
      style: margin
    },
    marginLeft: {
      style: margin
    },
    marginX: {
      style: margin
    },
    marginY: {
      style: margin
    },
    marginInline: {
      style: margin
    },
    marginInlineStart: {
      style: margin
    },
    marginInlineEnd: {
      style: margin
    },
    marginBlock: {
      style: margin
    },
    marginBlockStart: {
      style: margin
    },
    marginBlockEnd: {
      style: margin
    },
    // display
    displayPrint: {
      cssProperty: false,
      transform: (value) => ({
        "@media print": {
          display: value
        }
      })
    },
    display: {},
    overflow: {},
    textOverflow: {},
    visibility: {},
    whiteSpace: {},
    // flexbox
    flexBasis: {},
    flexDirection: {},
    flexWrap: {},
    justifyContent: {},
    alignItems: {},
    alignContent: {},
    order: {},
    flex: {},
    flexGrow: {},
    flexShrink: {},
    alignSelf: {},
    justifyItems: {},
    justifySelf: {},
    // grid
    gap: {
      style: gap
    },
    rowGap: {
      style: rowGap
    },
    columnGap: {
      style: columnGap
    },
    gridColumn: {},
    gridRow: {},
    gridAutoFlow: {},
    gridAutoColumns: {},
    gridAutoRows: {},
    gridTemplateColumns: {},
    gridTemplateRows: {},
    gridTemplateAreas: {},
    gridArea: {},
    // positions
    position: {},
    zIndex: {
      themeKey: "zIndex"
    },
    top: {},
    right: {},
    bottom: {},
    left: {},
    // shadows
    boxShadow: {
      themeKey: "shadows"
    },
    // sizing
    width: {
      transform: sizingTransform
    },
    maxWidth: {
      style: maxWidth
    },
    minWidth: {
      transform: sizingTransform
    },
    height: {
      transform: sizingTransform
    },
    maxHeight: {
      transform: sizingTransform
    },
    minHeight: {
      transform: sizingTransform
    },
    boxSizing: {},
    // typography
    fontFamily: {
      themeKey: "typography"
    },
    fontSize: {
      themeKey: "typography"
    },
    fontStyle: {
      themeKey: "typography"
    },
    fontWeight: {
      themeKey: "typography"
    },
    letterSpacing: {},
    textTransform: {},
    lineHeight: {},
    textAlign: {},
    typography: {
      cssProperty: false,
      themeKey: "typography"
    }
  };
  const defaultSxConfig$1 = defaultSxConfig;
  function objectsHaveSameKeys(...objects) {
    const allKeys = objects.reduce((keys2, object) => keys2.concat(Object.keys(object)), []);
    const union = new Set(allKeys);
    return objects.every((object) => union.size === Object.keys(object).length);
  }
  function callIfFn(maybeFn, arg) {
    return typeof maybeFn === "function" ? maybeFn(arg) : maybeFn;
  }
  function unstable_createStyleFunctionSx() {
    function getThemeValue(prop, val, theme, config2) {
      const props = {
        [prop]: val,
        theme
      };
      const options = config2[prop];
      if (!options) {
        return {
          [prop]: val
        };
      }
      const {
        cssProperty = prop,
        themeKey,
        transform,
        style: style2
      } = options;
      if (val == null) {
        return null;
      }
      if (themeKey === "typography" && val === "inherit") {
        return {
          [prop]: val
        };
      }
      const themeMapping = getPath(theme, themeKey) || {};
      if (style2) {
        return style2(props);
      }
      const styleFromPropValue = (propValueFinal) => {
        let value = getStyleValue(themeMapping, transform, propValueFinal);
        if (propValueFinal === value && typeof propValueFinal === "string") {
          value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : capitalize(propValueFinal)}`, propValueFinal);
        }
        if (cssProperty === false) {
          return value;
        }
        return {
          [cssProperty]: value
        };
      };
      return handleBreakpoints(props, val, styleFromPropValue);
    }
    function styleFunctionSx2(props) {
      var _theme$unstable_sxCon;
      const {
        sx,
        theme = {}
      } = props || {};
      if (!sx) {
        return null;
      }
      const config2 = (_theme$unstable_sxCon = theme.unstable_sxConfig) != null ? _theme$unstable_sxCon : defaultSxConfig$1;
      function traverse(sxInput) {
        let sxObject = sxInput;
        if (typeof sxInput === "function") {
          sxObject = sxInput(theme);
        } else if (typeof sxInput !== "object") {
          return sxInput;
        }
        if (!sxObject) {
          return null;
        }
        const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
        const breakpointsKeys = Object.keys(emptyBreakpoints);
        let css2 = emptyBreakpoints;
        Object.keys(sxObject).forEach((styleKey) => {
          const value = callIfFn(sxObject[styleKey], theme);
          if (value !== null && value !== void 0) {
            if (typeof value === "object") {
              if (config2[styleKey]) {
                css2 = merge(css2, getThemeValue(styleKey, value, theme, config2));
              } else {
                const breakpointsValues = handleBreakpoints({
                  theme
                }, value, (x) => ({
                  [styleKey]: x
                }));
                if (objectsHaveSameKeys(breakpointsValues, value)) {
                  css2[styleKey] = styleFunctionSx2({
                    sx: value,
                    theme
                  });
                } else {
                  css2 = merge(css2, breakpointsValues);
                }
              }
            } else {
              css2 = merge(css2, getThemeValue(styleKey, value, theme, config2));
            }
          }
        });
        return removeUnusedBreakpoints(breakpointsKeys, css2);
      }
      return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
    }
    return styleFunctionSx2;
  }
  const styleFunctionSx = unstable_createStyleFunctionSx();
  styleFunctionSx.filterProps = ["sx"];
  const styleFunctionSx$1 = styleFunctionSx;
  const _excluded$n = ["breakpoints", "palette", "spacing", "shape"];
  function createTheme$1(options = {}, ...args) {
    const {
      breakpoints: breakpointsInput = {},
      palette: paletteInput = {},
      spacing: spacingInput,
      shape: shapeInput = {}
    } = options, other = _objectWithoutPropertiesLoose(options, _excluded$n);
    const breakpoints = createBreakpoints(breakpointsInput);
    const spacing = createSpacing(spacingInput);
    let muiTheme = deepmerge({
      breakpoints,
      direction: "ltr",
      components: {},
      // Inject component definitions.
      palette: _extends({
        mode: "light"
      }, paletteInput),
      spacing,
      shape: _extends({}, shape$1, shapeInput)
    }, other);
    muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
    muiTheme.unstable_sxConfig = _extends({}, defaultSxConfig$1, other == null ? void 0 : other.unstable_sxConfig);
    muiTheme.unstable_sx = function sx(props) {
      return styleFunctionSx$1({
        sx: props,
        theme: this
      });
    };
    return muiTheme;
  }
  function isObjectEmpty(obj) {
    return Object.keys(obj).length === 0;
  }
  function useTheme$3(defaultTheme2 = null) {
    const contextTheme = reactExports.useContext(ThemeContext$2);
    return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme2 : contextTheme;
  }
  const systemDefaultTheme$1 = createTheme$1();
  function useTheme$2(defaultTheme2 = systemDefaultTheme$1) {
    return useTheme$3(defaultTheme2);
  }
  const _excluded$m = ["sx"];
  const splitProps = (props) => {
    var _props$theme$unstable, _props$theme;
    const result = {
      systemProps: {},
      otherProps: {}
    };
    const config2 = (_props$theme$unstable = props == null || (_props$theme = props.theme) == null ? void 0 : _props$theme.unstable_sxConfig) != null ? _props$theme$unstable : defaultSxConfig$1;
    Object.keys(props).forEach((prop) => {
      if (config2[prop]) {
        result.systemProps[prop] = props[prop];
      } else {
        result.otherProps[prop] = props[prop];
      }
    });
    return result;
  };
  function extendSxProp(props) {
    const {
      sx: inSx
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$m);
    const {
      systemProps,
      otherProps
    } = splitProps(other);
    let finalSx;
    if (Array.isArray(inSx)) {
      finalSx = [systemProps, ...inSx];
    } else if (typeof inSx === "function") {
      finalSx = (...args) => {
        const result = inSx(...args);
        if (!isPlainObject(result)) {
          return systemProps;
        }
        return _extends({}, systemProps, result);
      };
    } else {
      finalSx = _extends({}, systemProps, inSx);
    }
    return _extends({}, otherProps, {
      sx: finalSx
    });
  }
  function r(e) {
    var t, f, n = "";
    if ("string" == typeof e || "number" == typeof e)
      n += e;
    else if ("object" == typeof e)
      if (Array.isArray(e))
        for (t = 0; t < e.length; t++)
          e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
      else
        for (t in e)
          e[t] && (n && (n += " "), n += t);
    return n;
  }
  function clsx() {
    for (var e, t, f = 0, n = ""; f < arguments.length; )
      (e = arguments[f++]) && (t = r(e)) && (n && (n += " "), n += t);
    return n;
  }
  const _excluded$l = ["className", "component"];
  function createBox(options = {}) {
    const {
      themeId,
      defaultTheme: defaultTheme2,
      defaultClassName = "MuiBox-root",
      generateClassName
    } = options;
    const BoxRoot = styled$2("div", {
      shouldForwardProp: (prop) => prop !== "theme" && prop !== "sx" && prop !== "as"
    })(styleFunctionSx$1);
    const Box2 = /* @__PURE__ */ reactExports.forwardRef(function Box3(inProps, ref) {
      const theme = useTheme$2(defaultTheme2);
      const _extendSxProp = extendSxProp(inProps), {
        className,
        component = "div"
      } = _extendSxProp, other = _objectWithoutPropertiesLoose(_extendSxProp, _excluded$l);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(BoxRoot, _extends({
        as: component,
        ref,
        className: clsx(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
        theme: themeId ? theme[themeId] || theme : theme
      }, other));
    });
    return Box2;
  }
  const _excluded$k = ["variant"];
  function isEmpty$1(string) {
    return string.length === 0;
  }
  function propsToClassKey(props) {
    const {
      variant
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$k);
    let classKey = variant || "";
    Object.keys(other).sort().forEach((key) => {
      if (key === "color") {
        classKey += isEmpty$1(classKey) ? props[key] : capitalize(props[key]);
      } else {
        classKey += `${isEmpty$1(classKey) ? key : capitalize(key)}${capitalize(props[key].toString())}`;
      }
    });
    return classKey;
  }
  const _excluded$j = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
  function isEmpty(obj) {
    return Object.keys(obj).length === 0;
  }
  function isStringTag(tag) {
    return typeof tag === "string" && // 96 is one less than the char code
    // for "a" so this is checking that
    // it's a lowercase character
    tag.charCodeAt(0) > 96;
  }
  const getStyleOverrides = (name, theme) => {
    if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
      return theme.components[name].styleOverrides;
    }
    return null;
  };
  const getVariantStyles = (name, theme) => {
    let variants = [];
    if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
      variants = theme.components[name].variants;
    }
    const variantsStyles = {};
    variants.forEach((definition) => {
      const key = propsToClassKey(definition.props);
      variantsStyles[key] = definition.style;
    });
    return variantsStyles;
  };
  const variantsResolver = (props, styles2, theme, name) => {
    var _theme$components;
    const {
      ownerState = {}
    } = props;
    const variantsStyles = [];
    const themeVariants = theme == null || (_theme$components = theme.components) == null || (_theme$components = _theme$components[name]) == null ? void 0 : _theme$components.variants;
    if (themeVariants) {
      themeVariants.forEach((themeVariant) => {
        let isMatch = true;
        Object.keys(themeVariant.props).forEach((key) => {
          if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {
            isMatch = false;
          }
        });
        if (isMatch) {
          variantsStyles.push(styles2[propsToClassKey(themeVariant.props)]);
        }
      });
    }
    return variantsStyles;
  };
  function shouldForwardProp(prop) {
    return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
  }
  const systemDefaultTheme = createTheme$1();
  const lowercaseFirstLetter = (string) => {
    if (!string) {
      return string;
    }
    return string.charAt(0).toLowerCase() + string.slice(1);
  };
  function resolveTheme({
    defaultTheme: defaultTheme2,
    theme,
    themeId
  }) {
    return isEmpty(theme) ? defaultTheme2 : theme[themeId] || theme;
  }
  function defaultOverridesResolver(slot) {
    if (!slot) {
      return null;
    }
    return (props, styles2) => styles2[slot];
  }
  function createStyled(input = {}) {
    const {
      themeId,
      defaultTheme: defaultTheme2 = systemDefaultTheme,
      rootShouldForwardProp: rootShouldForwardProp2 = shouldForwardProp,
      slotShouldForwardProp = shouldForwardProp
    } = input;
    const systemSx = (props) => {
      return styleFunctionSx$1(_extends({}, props, {
        theme: resolveTheme(_extends({}, props, {
          defaultTheme: defaultTheme2,
          themeId
        }))
      }));
    };
    systemSx.__mui_systemSx = true;
    return (tag, inputOptions = {}) => {
      internal_processStyles(tag, (styles2) => styles2.filter((style2) => !(style2 != null && style2.__mui_systemSx)));
      const {
        name: componentName,
        slot: componentSlot,
        skipVariantsResolver: inputSkipVariantsResolver,
        skipSx: inputSkipSx,
        // TODO v6: remove `lowercaseFirstLetter()` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        overridesResolver = defaultOverridesResolver(lowercaseFirstLetter(componentSlot))
      } = inputOptions, options = _objectWithoutPropertiesLoose(inputOptions, _excluded$j);
      const skipVariantsResolver = inputSkipVariantsResolver !== void 0 ? inputSkipVariantsResolver : (
        // TODO v6: remove `Root` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        componentSlot && componentSlot !== "Root" && componentSlot !== "root" || false
      );
      const skipSx = inputSkipSx || false;
      let label;
      {
        if (componentName) {
          label = `${componentName}-${lowercaseFirstLetter(componentSlot || "Root")}`;
        }
      }
      let shouldForwardPropOption = shouldForwardProp;
      if (componentSlot === "Root" || componentSlot === "root") {
        shouldForwardPropOption = rootShouldForwardProp2;
      } else if (componentSlot) {
        shouldForwardPropOption = slotShouldForwardProp;
      } else if (isStringTag(tag)) {
        shouldForwardPropOption = void 0;
      }
      const defaultStyledResolver = styled$2(tag, _extends({
        shouldForwardProp: shouldForwardPropOption,
        label
      }, options));
      const muiStyledResolver = (styleArg, ...expressions) => {
        const expressionsWithDefaultTheme = expressions ? expressions.map((stylesArg) => {
          return typeof stylesArg === "function" && stylesArg.__emotion_real !== stylesArg ? (props) => {
            return stylesArg(_extends({}, props, {
              theme: resolveTheme(_extends({}, props, {
                defaultTheme: defaultTheme2,
                themeId
              }))
            }));
          } : stylesArg;
        }) : [];
        let transformedStyleArg = styleArg;
        if (componentName && overridesResolver) {
          expressionsWithDefaultTheme.push((props) => {
            const theme = resolveTheme(_extends({}, props, {
              defaultTheme: defaultTheme2,
              themeId
            }));
            const styleOverrides = getStyleOverrides(componentName, theme);
            if (styleOverrides) {
              const resolvedStyleOverrides = {};
              Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
                resolvedStyleOverrides[slotKey] = typeof slotStyle === "function" ? slotStyle(_extends({}, props, {
                  theme
                })) : slotStyle;
              });
              return overridesResolver(props, resolvedStyleOverrides);
            }
            return null;
          });
        }
        if (componentName && !skipVariantsResolver) {
          expressionsWithDefaultTheme.push((props) => {
            const theme = resolveTheme(_extends({}, props, {
              defaultTheme: defaultTheme2,
              themeId
            }));
            return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
          });
        }
        if (!skipSx) {
          expressionsWithDefaultTheme.push(systemSx);
        }
        const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
        if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
          const placeholders = new Array(numOfCustomFnsApplied).fill("");
          transformedStyleArg = [...styleArg, ...placeholders];
          transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
        } else if (typeof styleArg === "function" && // On the server Emotion doesn't use React.forwardRef for creating components, so the created
        // component stays as a function. This condition makes sure that we do not interpolate functions
        // which are basically components used as a selectors.
        styleArg.__emotion_real !== styleArg) {
          transformedStyleArg = (props) => styleArg(_extends({}, props, {
            theme: resolveTheme(_extends({}, props, {
              defaultTheme: defaultTheme2,
              themeId
            }))
          }));
        }
        const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
        {
          let displayName;
          if (componentName) {
            displayName = `${componentName}${capitalize(componentSlot || "")}`;
          }
          if (displayName === void 0) {
            displayName = `Styled(${getDisplayName(tag)})`;
          }
          Component.displayName = displayName;
        }
        if (tag.muiName) {
          Component.muiName = tag.muiName;
        }
        return Component;
      };
      if (defaultStyledResolver.withConfig) {
        muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
      }
      return muiStyledResolver;
    };
  }
  function getThemeProps(params) {
    const {
      theme,
      name,
      props
    } = params;
    if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
      return props;
    }
    return resolveProps(theme.components[name].defaultProps, props);
  }
  function useThemeProps$1({
    props,
    name,
    defaultTheme: defaultTheme2,
    themeId
  }) {
    let theme = useTheme$2(defaultTheme2);
    if (themeId) {
      theme = theme[themeId] || theme;
    }
    const mergedProps = getThemeProps({
      theme,
      name,
      props
    });
    return mergedProps;
  }
  function clamp(value, min = 0, max2 = 1) {
    {
      if (value < min || value > max2) {
        console.error(`MUI: The value provided ${value} is out of range [${min}, ${max2}].`);
      }
    }
    return Math.min(Math.max(min, value), max2);
  }
  function hexToRgb(color2) {
    color2 = color2.slice(1);
    const re = new RegExp(`.{1,${color2.length >= 6 ? 2 : 1}}`, "g");
    let colors = color2.match(re);
    if (colors && colors[0].length === 1) {
      colors = colors.map((n) => n + n);
    }
    return colors ? `rgb${colors.length === 4 ? "a" : ""}(${colors.map((n, index2) => {
      return index2 < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1e3) / 1e3;
    }).join(", ")})` : "";
  }
  function decomposeColor(color2) {
    if (color2.type) {
      return color2;
    }
    if (color2.charAt(0) === "#") {
      return decomposeColor(hexToRgb(color2));
    }
    const marker = color2.indexOf("(");
    const type = color2.substring(0, marker);
    if (["rgb", "rgba", "hsl", "hsla", "color"].indexOf(type) === -1) {
      throw new Error(`MUI: Unsupported \`${color2}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().`);
    }
    let values2 = color2.substring(marker + 1, color2.length - 1);
    let colorSpace;
    if (type === "color") {
      values2 = values2.split(" ");
      colorSpace = values2.shift();
      if (values2.length === 4 && values2[3].charAt(0) === "/") {
        values2[3] = values2[3].slice(1);
      }
      if (["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].indexOf(colorSpace) === -1) {
        throw new Error(`MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.`);
      }
    } else {
      values2 = values2.split(",");
    }
    values2 = values2.map((value) => parseFloat(value));
    return {
      type,
      values: values2,
      colorSpace
    };
  }
  function recomposeColor(color2) {
    const {
      type,
      colorSpace
    } = color2;
    let {
      values: values2
    } = color2;
    if (type.indexOf("rgb") !== -1) {
      values2 = values2.map((n, i2) => i2 < 3 ? parseInt(n, 10) : n);
    } else if (type.indexOf("hsl") !== -1) {
      values2[1] = `${values2[1]}%`;
      values2[2] = `${values2[2]}%`;
    }
    if (type.indexOf("color") !== -1) {
      values2 = `${colorSpace} ${values2.join(" ")}`;
    } else {
      values2 = `${values2.join(", ")}`;
    }
    return `${type}(${values2})`;
  }
  function hslToRgb(color2) {
    color2 = decomposeColor(color2);
    const {
      values: values2
    } = color2;
    const h = values2[0];
    const s = values2[1] / 100;
    const l2 = values2[2] / 100;
    const a = s * Math.min(l2, 1 - l2);
    const f = (n, k = (n + h / 30) % 12) => l2 - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    let type = "rgb";
    const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
    if (color2.type === "hsla") {
      type += "a";
      rgb.push(values2[3]);
    }
    return recomposeColor({
      type,
      values: rgb
    });
  }
  function getLuminance(color2) {
    color2 = decomposeColor(color2);
    let rgb = color2.type === "hsl" || color2.type === "hsla" ? decomposeColor(hslToRgb(color2)).values : color2.values;
    rgb = rgb.map((val) => {
      if (color2.type !== "color") {
        val /= 255;
      }
      return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
    });
    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
  }
  function getContrastRatio(foreground, background) {
    const lumA = getLuminance(foreground);
    const lumB = getLuminance(background);
    return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
  }
  function alpha(color2, value) {
    color2 = decomposeColor(color2);
    value = clamp(value);
    if (color2.type === "rgb" || color2.type === "hsl") {
      color2.type += "a";
    }
    if (color2.type === "color") {
      color2.values[3] = `/${value}`;
    } else {
      color2.values[3] = value;
    }
    return recomposeColor(color2);
  }
  function darken(color2, coefficient) {
    color2 = decomposeColor(color2);
    coefficient = clamp(coefficient);
    if (color2.type.indexOf("hsl") !== -1) {
      color2.values[2] *= 1 - coefficient;
    } else if (color2.type.indexOf("rgb") !== -1 || color2.type.indexOf("color") !== -1) {
      for (let i2 = 0; i2 < 3; i2 += 1) {
        color2.values[i2] *= 1 - coefficient;
      }
    }
    return recomposeColor(color2);
  }
  function lighten(color2, coefficient) {
    color2 = decomposeColor(color2);
    coefficient = clamp(coefficient);
    if (color2.type.indexOf("hsl") !== -1) {
      color2.values[2] += (100 - color2.values[2]) * coefficient;
    } else if (color2.type.indexOf("rgb") !== -1) {
      for (let i2 = 0; i2 < 3; i2 += 1) {
        color2.values[i2] += (255 - color2.values[i2]) * coefficient;
      }
    } else if (color2.type.indexOf("color") !== -1) {
      for (let i2 = 0; i2 < 3; i2 += 1) {
        color2.values[i2] += (1 - color2.values[i2]) * coefficient;
      }
    }
    return recomposeColor(color2);
  }
  const ThemeContext = /* @__PURE__ */ reactExports.createContext(null);
  {
    ThemeContext.displayName = "ThemeContext";
  }
  const ThemeContext$1 = ThemeContext;
  function useTheme$1() {
    const theme = reactExports.useContext(ThemeContext$1);
    {
      reactExports.useDebugValue(theme);
    }
    return theme;
  }
  const hasSymbol = typeof Symbol === "function" && Symbol.for;
  const nested = hasSymbol ? Symbol.for("mui.nested") : "__THEME_NESTED__";
  function mergeOuterLocalTheme(outerTheme, localTheme) {
    if (typeof localTheme === "function") {
      const mergedTheme = localTheme(outerTheme);
      {
        if (!mergedTheme) {
          console.error(["MUI: You should return an object from your theme function, i.e.", "<ThemeProvider theme={() => ({})} />"].join("\n"));
        }
      }
      return mergedTheme;
    }
    return _extends({}, outerTheme, localTheme);
  }
  function ThemeProvider$2(props) {
    const {
      children,
      theme: localTheme
    } = props;
    const outerTheme = useTheme$1();
    {
      if (outerTheme === null && typeof localTheme === "function") {
        console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
      }
    }
    const theme = reactExports.useMemo(() => {
      const output2 = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);
      if (output2 != null) {
        output2[nested] = outerTheme !== null;
      }
      return output2;
    }, [localTheme, outerTheme]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ThemeContext$1.Provider, {
      value: theme,
      children
    });
  }
  ThemeProvider$2.propTypes = {
    /**
     * Your component tree.
     */
    children: PropTypes.node,
    /**
     * A theme object. You can provide a function to extend the outer theme.
     */
    theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired
  };
  {
    ThemeProvider$2.propTypes = exactProp(ThemeProvider$2.propTypes);
  }
  const EMPTY_THEME = {};
  function useThemeScoping(themeId, upperTheme, localTheme, isPrivate = false) {
    return reactExports.useMemo(() => {
      const resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;
      if (typeof localTheme === "function") {
        const mergedTheme = localTheme(resolvedTheme);
        const result = themeId ? _extends({}, upperTheme, {
          [themeId]: mergedTheme
        }) : mergedTheme;
        if (isPrivate) {
          return () => result;
        }
        return result;
      }
      return themeId ? _extends({}, upperTheme, {
        [themeId]: localTheme
      }) : _extends({}, upperTheme, localTheme);
    }, [themeId, upperTheme, localTheme, isPrivate]);
  }
  function ThemeProvider$1(props) {
    const {
      children,
      theme: localTheme,
      themeId
    } = props;
    const upperTheme = useTheme$3(EMPTY_THEME);
    const upperPrivateTheme = useTheme$1() || EMPTY_THEME;
    {
      if (upperTheme === null && typeof localTheme === "function" || themeId && upperTheme && !upperTheme[themeId] && typeof localTheme === "function") {
        console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
      }
    }
    const engineTheme = useThemeScoping(themeId, upperTheme, localTheme);
    const privateTheme = useThemeScoping(themeId, upperPrivateTheme, localTheme, true);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ThemeProvider$2, {
      theme: privateTheme,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(ThemeContext$2.Provider, {
        value: engineTheme,
        children
      })
    });
  }
  ThemeProvider$1.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Your component tree.
     */
    children: PropTypes.node,
    /**
     * A theme object. You can provide a function to extend the outer theme.
     */
    theme: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,
    /**
     * The design system's unique id for getting the corresponded theme when there are multiple design systems.
     */
    themeId: PropTypes.string
  };
  {
    ThemeProvider$1.propTypes = exactProp(ThemeProvider$1.propTypes);
  }
  function createMixins(breakpoints, mixins) {
    return _extends({
      toolbar: {
        minHeight: 56,
        [breakpoints.up("xs")]: {
          "@media (orientation: landscape)": {
            minHeight: 48
          }
        },
        [breakpoints.up("sm")]: {
          minHeight: 64
        }
      }
    }, mixins);
  }
  const _excluded$i = ["mode", "contrastThreshold", "tonalOffset"];
  const light = {
    // The colors used to style the text.
    text: {
      // The most important text.
      primary: "rgba(0, 0, 0, 0.87)",
      // Secondary text.
      secondary: "rgba(0, 0, 0, 0.6)",
      // Disabled text have even lower visual prominence.
      disabled: "rgba(0, 0, 0, 0.38)"
    },
    // The color used to divide different elements.
    divider: "rgba(0, 0, 0, 0.12)",
    // The background colors used to style the surfaces.
    // Consistency between these values is important.
    background: {
      paper: common$1.white,
      default: common$1.white
    },
    // The colors used to style the action elements.
    action: {
      // The color of an active action like an icon button.
      active: "rgba(0, 0, 0, 0.54)",
      // The color of an hovered action.
      hover: "rgba(0, 0, 0, 0.04)",
      hoverOpacity: 0.04,
      // The color of a selected action.
      selected: "rgba(0, 0, 0, 0.08)",
      selectedOpacity: 0.08,
      // The color of a disabled action.
      disabled: "rgba(0, 0, 0, 0.26)",
      // The background color of a disabled action.
      disabledBackground: "rgba(0, 0, 0, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(0, 0, 0, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.12
    }
  };
  const dark = {
    text: {
      primary: common$1.white,
      secondary: "rgba(255, 255, 255, 0.7)",
      disabled: "rgba(255, 255, 255, 0.5)",
      icon: "rgba(255, 255, 255, 0.5)"
    },
    divider: "rgba(255, 255, 255, 0.12)",
    background: {
      paper: "#121212",
      default: "#121212"
    },
    action: {
      active: common$1.white,
      hover: "rgba(255, 255, 255, 0.08)",
      hoverOpacity: 0.08,
      selected: "rgba(255, 255, 255, 0.16)",
      selectedOpacity: 0.16,
      disabled: "rgba(255, 255, 255, 0.3)",
      disabledBackground: "rgba(255, 255, 255, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(255, 255, 255, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.24
    }
  };
  function addLightOrDark(intent, direction, shade, tonalOffset) {
    const tonalOffsetLight = tonalOffset.light || tonalOffset;
    const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
    if (!intent[direction]) {
      if (intent.hasOwnProperty(shade)) {
        intent[direction] = intent[shade];
      } else if (direction === "light") {
        intent.light = lighten(intent.main, tonalOffsetLight);
      } else if (direction === "dark") {
        intent.dark = darken(intent.main, tonalOffsetDark);
      }
    }
  }
  function getDefaultPrimary(mode = "light") {
    if (mode === "dark") {
      return {
        main: blue$1[200],
        light: blue$1[50],
        dark: blue$1[400]
      };
    }
    return {
      main: blue$1[700],
      light: blue$1[400],
      dark: blue$1[800]
    };
  }
  function getDefaultSecondary(mode = "light") {
    if (mode === "dark") {
      return {
        main: purple$1[200],
        light: purple$1[50],
        dark: purple$1[400]
      };
    }
    return {
      main: purple$1[500],
      light: purple$1[300],
      dark: purple$1[700]
    };
  }
  function getDefaultError(mode = "light") {
    if (mode === "dark") {
      return {
        main: red$1[500],
        light: red$1[300],
        dark: red$1[700]
      };
    }
    return {
      main: red$1[700],
      light: red$1[400],
      dark: red$1[800]
    };
  }
  function getDefaultInfo(mode = "light") {
    if (mode === "dark") {
      return {
        main: lightBlue$1[400],
        light: lightBlue$1[300],
        dark: lightBlue$1[700]
      };
    }
    return {
      main: lightBlue$1[700],
      light: lightBlue$1[500],
      dark: lightBlue$1[900]
    };
  }
  function getDefaultSuccess(mode = "light") {
    if (mode === "dark") {
      return {
        main: green$1[400],
        light: green$1[300],
        dark: green$1[700]
      };
    }
    return {
      main: green$1[800],
      light: green$1[500],
      dark: green$1[900]
    };
  }
  function getDefaultWarning(mode = "light") {
    if (mode === "dark") {
      return {
        main: orange$1[400],
        light: orange$1[300],
        dark: orange$1[700]
      };
    }
    return {
      main: "#ed6c02",
      // closest to orange[800] that pass 3:1.
      light: orange$1[500],
      dark: orange$1[900]
    };
  }
  function createPalette(palette) {
    const {
      mode = "light",
      contrastThreshold = 3,
      tonalOffset = 0.2
    } = palette, other = _objectWithoutPropertiesLoose(palette, _excluded$i);
    const primary = palette.primary || getDefaultPrimary(mode);
    const secondary = palette.secondary || getDefaultSecondary(mode);
    const error = palette.error || getDefaultError(mode);
    const info2 = palette.info || getDefaultInfo(mode);
    const success = palette.success || getDefaultSuccess(mode);
    const warning = palette.warning || getDefaultWarning(mode);
    function getContrastText(background) {
      const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
      {
        const contrast = getContrastRatio(background, contrastText);
        if (contrast < 3) {
          console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"));
        }
      }
      return contrastText;
    }
    const augmentColor = ({
      color: color2,
      name,
      mainShade = 500,
      lightShade = 300,
      darkShade = 700
    }) => {
      color2 = _extends({}, color2);
      if (!color2.main && color2[mainShade]) {
        color2.main = color2[mainShade];
      }
      if (!color2.hasOwnProperty("main")) {
        throw new Error(`MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.`);
      }
      if (typeof color2.main !== "string") {
        throw new Error(`MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color2.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });`);
      }
      addLightOrDark(color2, "light", lightShade, tonalOffset);
      addLightOrDark(color2, "dark", darkShade, tonalOffset);
      if (!color2.contrastText) {
        color2.contrastText = getContrastText(color2.main);
      }
      return color2;
    };
    const modes = {
      dark,
      light
    };
    {
      if (!modes[mode]) {
        console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
      }
    }
    const paletteOutput = deepmerge(_extends({
      // A collection of common colors.
      common: _extends({}, common$1),
      // prevent mutable object.
      // The palette mode, can be light or dark.
      mode,
      // The colors used to represent primary interface elements for a user.
      primary: augmentColor({
        color: primary,
        name: "primary"
      }),
      // The colors used to represent secondary interface elements for a user.
      secondary: augmentColor({
        color: secondary,
        name: "secondary",
        mainShade: "A400",
        lightShade: "A200",
        darkShade: "A700"
      }),
      // The colors used to represent interface elements that the user should be made aware of.
      error: augmentColor({
        color: error,
        name: "error"
      }),
      // The colors used to represent potentially dangerous actions or important messages.
      warning: augmentColor({
        color: warning,
        name: "warning"
      }),
      // The colors used to present information to the user that is neutral and not necessarily important.
      info: augmentColor({
        color: info2,
        name: "info"
      }),
      // The colors used to indicate the successful completion of an action that user triggered.
      success: augmentColor({
        color: success,
        name: "success"
      }),
      // The grey colors.
      grey: grey$1,
      // Used by `getContrastText()` to maximize the contrast between
      // the background and the text.
      contrastThreshold,
      // Takes a background color and returns the text color that maximizes the contrast.
      getContrastText,
      // Generate a rich color object.
      augmentColor,
      // Used by the functions below to shift a color's luminance by approximately
      // two indexes within its tonal palette.
      // E.g., shift from Red 500 to Red 300 or Red 700.
      tonalOffset
    }, modes[mode]), other);
    return paletteOutput;
  }
  const _excluded$h = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
  function round(value) {
    return Math.round(value * 1e5) / 1e5;
  }
  const caseAllCaps = {
    textTransform: "uppercase"
  };
  const defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
  function createTypography(palette, typography) {
    const _ref = typeof typography === "function" ? typography(palette) : typography, {
      fontFamily = defaultFontFamily,
      // The default font size of the Material Specification.
      fontSize = 14,
      // px
      fontWeightLight = 300,
      fontWeightRegular = 400,
      fontWeightMedium = 500,
      fontWeightBold = 700,
      // Tell MUI what's the font-size on the html element.
      // 16px is the default font-size used by browsers.
      htmlFontSize = 16,
      // Apply the CSS properties to all the variants.
      allVariants,
      pxToRem: pxToRem2
    } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded$h);
    {
      if (typeof fontSize !== "number") {
        console.error("MUI: `fontSize` is required to be a number.");
      }
      if (typeof htmlFontSize !== "number") {
        console.error("MUI: `htmlFontSize` is required to be a number.");
      }
    }
    const coef = fontSize / 14;
    const pxToRem = pxToRem2 || ((size) => `${size / htmlFontSize * coef}rem`);
    const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => _extends({
      fontFamily,
      fontWeight,
      fontSize: pxToRem(size),
      // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
      lineHeight
    }, fontFamily === defaultFontFamily ? {
      letterSpacing: `${round(letterSpacing / size)}em`
    } : {}, casing, allVariants);
    const variants = {
      h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
      h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
      h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
      h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
      h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
      h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
      subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
      subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
      body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
      body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
      button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
      caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
      overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),
      // TODO v6: Remove handling of 'inherit' variant from the theme as it is already handled in Material UI's Typography component. Also, remember to remove the associated types.
      inherit: {
        fontFamily: "inherit",
        fontWeight: "inherit",
        fontSize: "inherit",
        lineHeight: "inherit",
        letterSpacing: "inherit"
      }
    };
    return deepmerge(_extends({
      htmlFontSize,
      pxToRem,
      fontFamily,
      fontSize,
      fontWeightLight,
      fontWeightRegular,
      fontWeightMedium,
      fontWeightBold
    }, variants), other, {
      clone: false
      // No need to clone deep
    });
  }
  const shadowKeyUmbraOpacity = 0.2;
  const shadowKeyPenumbraOpacity = 0.14;
  const shadowAmbientShadowOpacity = 0.12;
  function createShadow(...px) {
    return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(",");
  }
  const shadows = ["none", createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
  const shadows$1 = shadows;
  const _excluded$g = ["duration", "easing", "delay"];
  const easing = {
    // This is the most common easing curve.
    easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
    // Objects enter the screen at full velocity from off-screen and
    // slowly decelerate to a resting point.
    easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
    // Objects leave the screen at full velocity. They do not decelerate when off-screen.
    easeIn: "cubic-bezier(0.4, 0, 1, 1)",
    // The sharp curve is used by objects that may return to the screen at any time.
    sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
  };
  const duration = {
    shortest: 150,
    shorter: 200,
    short: 250,
    // most basic recommended timing
    standard: 300,
    // this is to be used in complex animations
    complex: 375,
    // recommended when something is entering screen
    enteringScreen: 225,
    // recommended when something is leaving screen
    leavingScreen: 195
  };
  function formatMs(milliseconds) {
    return `${Math.round(milliseconds)}ms`;
  }
  function getAutoHeightDuration(height2) {
    if (!height2) {
      return 0;
    }
    const constant = height2 / 36;
    return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
  }
  function createTransitions(inputTransitions) {
    const mergedEasing = _extends({}, easing, inputTransitions.easing);
    const mergedDuration = _extends({}, duration, inputTransitions.duration);
    const create = (props = ["all"], options = {}) => {
      const {
        duration: durationOption = mergedDuration.standard,
        easing: easingOption = mergedEasing.easeInOut,
        delay = 0
      } = options, other = _objectWithoutPropertiesLoose(options, _excluded$g);
      {
        const isString2 = (value) => typeof value === "string";
        const isNumber2 = (value) => !isNaN(parseFloat(value));
        if (!isString2(props) && !Array.isArray(props)) {
          console.error('MUI: Argument "props" must be a string or Array.');
        }
        if (!isNumber2(durationOption) && !isString2(durationOption)) {
          console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
        }
        if (!isString2(easingOption)) {
          console.error('MUI: Argument "easing" must be a string.');
        }
        if (!isNumber2(delay) && !isString2(delay)) {
          console.error('MUI: Argument "delay" must be a number or a string.');
        }
        if (typeof options !== "object") {
          console.error(["MUI: Secong argument of transition.create must be an object.", "Arguments should be either `create('prop1', options)` or `create(['prop1', 'prop2'], options)`"].join("\n"));
        }
        if (Object.keys(other).length !== 0) {
          console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(",")}].`);
        }
      }
      return (Array.isArray(props) ? props : [props]).map((animatedProp) => `${animatedProp} ${typeof durationOption === "string" ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === "string" ? delay : formatMs(delay)}`).join(",");
    };
    return _extends({
      getAutoHeightDuration,
      create
    }, inputTransitions, {
      easing: mergedEasing,
      duration: mergedDuration
    });
  }
  const zIndex = {
    mobileStepper: 1e3,
    fab: 1050,
    speedDial: 1050,
    appBar: 1100,
    drawer: 1200,
    modal: 1300,
    snackbar: 1400,
    tooltip: 1500
  };
  const zIndex$1 = zIndex;
  const _excluded$f = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
  function createTheme(options = {}, ...args) {
    const {
      mixins: mixinsInput = {},
      palette: paletteInput = {},
      transitions: transitionsInput = {},
      typography: typographyInput = {}
    } = options, other = _objectWithoutPropertiesLoose(options, _excluded$f);
    if (options.vars) {
      throw new Error(`MUI: \`vars\` is a private field used for CSS variables support.
Please use another name.`);
    }
    const palette = createPalette(paletteInput);
    const systemTheme = createTheme$1(options);
    let muiTheme = deepmerge(systemTheme, {
      mixins: createMixins(systemTheme.breakpoints, mixinsInput),
      palette,
      // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
      shadows: shadows$1.slice(),
      typography: createTypography(palette, typographyInput),
      transitions: createTransitions(transitionsInput),
      zIndex: _extends({}, zIndex$1)
    });
    muiTheme = deepmerge(muiTheme, other);
    muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
    {
      const stateClasses = ["active", "checked", "completed", "disabled", "error", "expanded", "focused", "focusVisible", "required", "selected"];
      const traverse = (node2, component) => {
        let key;
        for (key in node2) {
          const child = node2[key];
          if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
            {
              const stateClass = generateUtilityClass("", key);
              console.error([`MUI: The \`${component}\` component increases the CSS specificity of the \`${key}\` internal state.`, "You can not override it like this: ", JSON.stringify(node2, null, 2), "", `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
                root: {
                  [`&.${stateClass}`]: child
                }
              }, null, 2), "", "https://mui.com/r/state-classes-guide"].join("\n"));
            }
            node2[key] = {};
          }
        }
      };
      Object.keys(muiTheme.components).forEach((component) => {
        const styleOverrides = muiTheme.components[component].styleOverrides;
        if (styleOverrides && component.indexOf("Mui") === 0) {
          traverse(styleOverrides, component);
        }
      });
    }
    muiTheme.unstable_sxConfig = _extends({}, defaultSxConfig$1, other == null ? void 0 : other.unstable_sxConfig);
    muiTheme.unstable_sx = function sx(props) {
      return styleFunctionSx$1({
        sx: props,
        theme: this
      });
    };
    return muiTheme;
  }
  const defaultTheme$1 = createTheme();
  const defaultTheme$2 = defaultTheme$1;
  function useTheme() {
    const theme = useTheme$2(defaultTheme$2);
    {
      reactExports.useDebugValue(theme);
    }
    return theme[THEME_ID] || theme;
  }
  function useThemeProps({
    props,
    name
  }) {
    return useThemeProps$1({
      props,
      name,
      defaultTheme: defaultTheme$2,
      themeId: THEME_ID
    });
  }
  const rootShouldForwardProp = (prop) => shouldForwardProp(prop) && prop !== "classes";
  const styled = createStyled({
    themeId: THEME_ID,
    defaultTheme: defaultTheme$2,
    rootShouldForwardProp
  });
  const styled$1 = styled;
  const _excluded$e = ["theme"];
  function ThemeProvider(_ref) {
    let {
      theme: themeInput
    } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded$e);
    const scopedTheme = themeInput[THEME_ID];
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ThemeProvider$1, _extends({}, props, {
      themeId: scopedTheme ? THEME_ID : void 0,
      theme: scopedTheme || themeInput
    }));
  }
  ThemeProvider.propTypes = {
    /**
     * Your component tree.
     */
    children: PropTypes.node,
    /**
     * A theme object. You can provide a function to extend the outer theme.
     */
    theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired
  };
  const getOverlayAlpha = (elevation) => {
    let alphaValue;
    if (elevation < 1) {
      alphaValue = 5.11916 * elevation ** 2;
    } else {
      alphaValue = 4.5 * Math.log(elevation + 1) + 2;
    }
    return (alphaValue / 100).toFixed(2);
  };
  const getOverlayAlpha$1 = getOverlayAlpha;
  function getSvgIconUtilityClass(slot) {
    return generateUtilityClass("MuiSvgIcon", slot);
  }
  generateUtilityClasses("MuiSvgIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);
  const _excluded$d = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];
  const useUtilityClasses$b = (ownerState) => {
    const {
      color: color2,
      fontSize,
      classes
    } = ownerState;
    const slots = {
      root: ["root", color2 !== "inherit" && `color${capitalize(color2)}`, `fontSize${capitalize(fontSize)}`]
    };
    return composeClasses(slots, getSvgIconUtilityClass, classes);
  };
  const SvgIconRoot = styled$1("svg", {
    name: "MuiSvgIcon",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.color !== "inherit" && styles2[`color${capitalize(ownerState.color)}`], styles2[`fontSize${capitalize(ownerState.fontSize)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _palette$ownerState$c, _palette, _palette2, _palette3;
    return {
      userSelect: "none",
      width: "1em",
      height: "1em",
      display: "inline-block",
      // the <svg> will define the property that has `currentColor`
      // e.g. heroicons uses fill="none" and stroke="currentColor"
      fill: ownerState.hasSvgAsChild ? void 0 : "currentColor",
      flexShrink: 0,
      transition: (_theme$transitions = theme.transitions) == null || (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, "fill", {
        duration: (_theme$transitions2 = theme.transitions) == null || (_theme$transitions2 = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2.shorter
      }),
      fontSize: {
        inherit: "inherit",
        small: ((_theme$typography = theme.typography) == null || (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || "1.25rem",
        medium: ((_theme$typography2 = theme.typography) == null || (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || "1.5rem",
        large: ((_theme$typography3 = theme.typography) == null || (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || "2.1875rem"
      }[ownerState.fontSize],
      // TODO v5 deprecate, v6 remove for sx
      color: (_palette$ownerState$c = (_palette = (theme.vars || theme).palette) == null || (_palette = _palette[ownerState.color]) == null ? void 0 : _palette.main) != null ? _palette$ownerState$c : {
        action: (_palette2 = (theme.vars || theme).palette) == null || (_palette2 = _palette2.action) == null ? void 0 : _palette2.active,
        disabled: (_palette3 = (theme.vars || theme).palette) == null || (_palette3 = _palette3.action) == null ? void 0 : _palette3.disabled,
        inherit: void 0
      }[ownerState.color]
    };
  });
  const SvgIcon = /* @__PURE__ */ reactExports.forwardRef(function SvgIcon2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiSvgIcon"
    });
    const {
      children,
      className,
      color: color2 = "inherit",
      component = "svg",
      fontSize = "medium",
      htmlColor,
      inheritViewBox = false,
      titleAccess,
      viewBox = "0 0 24 24"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$d);
    const hasSvgAsChild = /* @__PURE__ */ reactExports.isValidElement(children) && children.type === "svg";
    const ownerState = _extends({}, props, {
      color: color2,
      component,
      fontSize,
      instanceFontSize: inProps.fontSize,
      inheritViewBox,
      viewBox,
      hasSvgAsChild
    });
    const more = {};
    if (!inheritViewBox) {
      more.viewBox = viewBox;
    }
    const classes = useUtilityClasses$b(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(SvgIconRoot, _extends({
      as: component,
      className: clsx(classes.root, className),
      focusable: "false",
      color: htmlColor,
      "aria-hidden": titleAccess ? void 0 : true,
      role: titleAccess ? "img" : void 0,
      ref
    }, more, other, hasSvgAsChild && children.props, {
      ownerState,
      children: [hasSvgAsChild ? children.props.children : children, titleAccess ? /* @__PURE__ */ jsxRuntimeExports.jsx("title", {
        children: titleAccess
      }) : null]
    }));
  });
  SvgIcon.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Node passed into the SVG element.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
     * @default 'inherit'
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), PropTypes.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
     * @default 'medium'
     */
    fontSize: PropTypes.oneOfType([PropTypes.oneOf(["inherit", "large", "medium", "small"]), PropTypes.string]),
    /**
     * Applies a color attribute to the SVG element.
     */
    htmlColor: PropTypes.string,
    /**
     * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
     * prop will be ignored.
     * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
     * `component`'s viewBox to the root node.
     * @default false
     */
    inheritViewBox: PropTypes.bool,
    /**
     * The shape-rendering attribute. The behavior of the different options is described on the
     * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
     * If you are having issues with blurry icons you should investigate this prop.
     */
    shapeRendering: PropTypes.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * Provides a human-readable title for the element that contains it.
     * https://www.w3.org/TR/SVG-access/#Equivalent
     */
    titleAccess: PropTypes.string,
    /**
     * Allows you to redefine what the coordinates without units mean inside an SVG element.
     * For example, if the SVG element is 500 (width) by 200 (height),
     * and you pass viewBox="0 0 50 20",
     * this means that the coordinates inside the SVG will go from the top left corner (0,0)
     * to bottom right (50,20) and each unit will be worth 10px.
     * @default '0 0 24 24'
     */
    viewBox: PropTypes.string
  };
  SvgIcon.muiName = "SvgIcon";
  const SvgIcon$1 = SvgIcon;
  function createSvgIcon$1(path2, displayName) {
    function Component(props, ref) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(SvgIcon$1, _extends({
        "data-testid": `${displayName}Icon`,
        ref
      }, props, {
        children: path2
      }));
    }
    {
      Component.displayName = `${displayName}Icon`;
    }
    Component.muiName = SvgIcon$1.muiName;
    return /* @__PURE__ */ reactExports.memo(/* @__PURE__ */ reactExports.forwardRef(Component));
  }
  const unstable_ClassNameGenerator = {
    configure: (generator) => {
      {
        console.warn(["MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.", "", "You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead", "", "The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401", "", "The updated documentation: https://mui.com/guides/classname-generator/"].join("\n"));
      }
      ClassNameGenerator$1.configure(generator);
    }
  };
  const utils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    capitalize,
    createChainedFunction,
    createSvgIcon: createSvgIcon$1,
    debounce,
    deprecatedPropType,
    isMuiElement,
    ownerDocument,
    ownerWindow,
    requirePropFactory,
    setRef,
    unstable_ClassNameGenerator,
    unstable_useEnhancedEffect: useEnhancedEffect$1,
    unstable_useId: useId,
    unsupportedProp,
    useControlled,
    useEventCallback,
    useForkRef,
    useIsFocusVisible
  }, Symbol.toStringTag, { value: "Module" }));
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
  }
  var reactDom = { exports: {} };
  var reactDom_development = {};
  var scheduler = { exports: {} };
  var scheduler_development = {};
  /**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  (function(exports2) {
    {
      (function() {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var enableSchedulerDebugging = false;
        var frameYieldMs = 5;
        function push(heap, node2) {
          var index2 = heap.length;
          heap.push(node2);
          siftUp(heap, node2, index2);
        }
        function peek2(heap) {
          return heap.length === 0 ? null : heap[0];
        }
        function pop(heap) {
          if (heap.length === 0) {
            return null;
          }
          var first2 = heap[0];
          var last2 = heap.pop();
          if (last2 !== first2) {
            heap[0] = last2;
            siftDown(heap, last2, 0);
          }
          return first2;
        }
        function siftUp(heap, node2, i2) {
          var index2 = i2;
          while (index2 > 0) {
            var parentIndex = index2 - 1 >>> 1;
            var parent = heap[parentIndex];
            if (compare(parent, node2) > 0) {
              heap[parentIndex] = node2;
              heap[index2] = parent;
              index2 = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node2, i2) {
          var index2 = i2;
          var length2 = heap.length;
          var halfLength = length2 >>> 1;
          while (index2 < halfLength) {
            var leftIndex = (index2 + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex];
            if (compare(left, node2) < 0) {
              if (rightIndex < length2 && compare(right, left) < 0) {
                heap[index2] = right;
                heap[rightIndex] = node2;
                index2 = rightIndex;
              } else {
                heap[index2] = left;
                heap[leftIndex] = node2;
                index2 = leftIndex;
              }
            } else if (rightIndex < length2 && compare(right, node2) < 0) {
              heap[index2] = right;
              heap[rightIndex] = node2;
              index2 = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare(a, b) {
          var diff = a.sortIndex - b.sortIndex;
          return diff !== 0 ? diff : a.id - b.id;
        }
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
        if (hasPerformanceNow) {
          var localPerformance = performance;
          exports2.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          var initialTime = localDate.now();
          exports2.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
        var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
        var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
        typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
        function advanceTimers(currentTime) {
          var timer = peek2(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
            } else {
              return;
            }
            timer = peek2(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek2(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek2(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek2(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
              break;
            }
            var callback = currentTask.callback;
            if (typeof callback === "function") {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports2.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
              } else {
                if (currentTask === peek2(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek2(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek2(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports2.unstable_now();
          var startTime2;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime2 = currentTime + delay;
            } else {
              startTime2 = currentTime;
            }
          } else {
            startTime2 = currentTime;
          }
          var timeout;
          switch (priorityLevel) {
            case ImmediatePriority:
              timeout = IMMEDIATE_PRIORITY_TIMEOUT;
              break;
            case UserBlockingPriority:
              timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;
            case IdlePriority:
              timeout = IDLE_PRIORITY_TIMEOUT;
              break;
            case LowPriority:
              timeout = LOW_PRIORITY_TIMEOUT;
              break;
            case NormalPriority:
            default:
              timeout = NORMAL_PRIORITY_TIMEOUT;
              break;
          }
          var expirationTime = startTime2 + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime: startTime2,
            expirationTime,
            sortIndex: -1
          };
          if (startTime2 > currentTime) {
            newTask.sortIndex = startTime2;
            push(timerQueue, newTask);
            if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime2 - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek2(taskQueue);
        }
        function unstable_cancelCallback(task) {
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1;
        var frameInterval = frameYieldMs;
        var startTime = -1;
        function shouldYieldToHost() {
          var timeElapsed = exports2.unstable_now() - startTime;
          if (timeElapsed < frameInterval) {
            return false;
          }
          return true;
        }
        function requestPaint() {
        }
        function forceFrameRate(fps) {
          if (fps < 0 || fps > 125) {
            console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
          }
          if (fps > 0) {
            frameInterval = Math.floor(1e3 / fps);
          } else {
            frameInterval = frameYieldMs;
          }
        }
        var performWorkUntilDeadline = function() {
          if (scheduledHostCallback !== null) {
            var currentTime = exports2.unstable_now();
            startTime = currentTime;
            var hasTimeRemaining = true;
            var hasMoreWork = true;
            try {
              hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            } finally {
              if (hasMoreWork) {
                schedulePerformWorkUntilDeadline();
              } else {
                isMessageLoopRunning = false;
                scheduledHostCallback = null;
              }
            }
          } else {
            isMessageLoopRunning = false;
          }
        };
        var schedulePerformWorkUntilDeadline;
        if (typeof localSetImmediate === "function") {
          schedulePerformWorkUntilDeadline = function() {
            localSetImmediate(performWorkUntilDeadline);
          };
        } else if (typeof MessageChannel !== "undefined") {
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
          };
        } else {
          schedulePerformWorkUntilDeadline = function() {
            localSetTimeout(performWorkUntilDeadline, 0);
          };
        }
        function requestHostCallback(callback) {
          scheduledHostCallback = callback;
          if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
          }
        }
        function requestHostTimeout(callback, ms) {
          taskTimeoutID = localSetTimeout(function() {
            callback(exports2.unstable_now());
          }, ms);
        }
        function cancelHostTimeout() {
          localClearTimeout(taskTimeoutID);
          taskTimeoutID = -1;
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = null;
        exports2.unstable_IdlePriority = IdlePriority;
        exports2.unstable_ImmediatePriority = ImmediatePriority;
        exports2.unstable_LowPriority = LowPriority;
        exports2.unstable_NormalPriority = NormalPriority;
        exports2.unstable_Profiling = unstable_Profiling;
        exports2.unstable_UserBlockingPriority = UserBlockingPriority;
        exports2.unstable_cancelCallback = unstable_cancelCallback;
        exports2.unstable_continueExecution = unstable_continueExecution;
        exports2.unstable_forceFrameRate = forceFrameRate;
        exports2.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports2.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports2.unstable_next = unstable_next;
        exports2.unstable_pauseExecution = unstable_pauseExecution;
        exports2.unstable_requestPaint = unstable_requestPaint;
        exports2.unstable_runWithPriority = unstable_runWithPriority;
        exports2.unstable_scheduleCallback = unstable_scheduleCallback;
        exports2.unstable_shouldYield = shouldYieldToHost;
        exports2.unstable_wrapCallback = unstable_wrapCallback;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  })(scheduler_development);
  {
    scheduler.exports = scheduler_development;
  }
  var schedulerExports = scheduler.exports;
  /**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  {
    (function() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      }
      var React2 = reactExports;
      var Scheduler2 = schedulerExports;
      var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      var suppressWarning = false;
      function setSuppressWarning(newSuppressWarning) {
        {
          suppressWarning = newSuppressWarning;
        }
      }
      function warn2(format) {
        {
          if (!suppressWarning) {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning2("warn", format, args);
          }
        }
      }
      function error(format) {
        {
          if (!suppressWarning) {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning2("error", format, args);
          }
        }
      }
      function printWarning2(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var FunctionComponent = 0;
      var ClassComponent = 1;
      var IndeterminateComponent = 2;
      var HostRoot = 3;
      var HostPortal = 4;
      var HostComponent = 5;
      var HostText = 6;
      var Fragment = 7;
      var Mode = 8;
      var ContextConsumer = 9;
      var ContextProvider = 10;
      var ForwardRef = 11;
      var Profiler = 12;
      var SuspenseComponent = 13;
      var MemoComponent = 14;
      var SimpleMemoComponent = 15;
      var LazyComponent = 16;
      var IncompleteClassComponent = 17;
      var DehydratedFragment = 18;
      var SuspenseListComponent = 19;
      var ScopeComponent = 21;
      var OffscreenComponent = 22;
      var LegacyHiddenComponent = 23;
      var CacheComponent = 24;
      var TracingMarkerComponent = 25;
      var enableClientRenderFallbackOnTextMismatch = true;
      var enableNewReconciler = false;
      var enableLazyContextPropagation = false;
      var enableLegacyHidden = false;
      var enableSuspenseAvoidThisFallback = false;
      var disableCommentsAsDOMContainers = true;
      var enableCustomElementPropertySupport = false;
      var warnAboutStringRefs = false;
      var allNativeEvents = /* @__PURE__ */ new Set();
      var registrationNameDependencies = {};
      var possibleRegistrationNames = {};
      function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + "Capture", dependencies);
      }
      function registerDirectEvent(registrationName, dependencies) {
        {
          if (registrationNameDependencies[registrationName]) {
            error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
          }
        }
        registrationNameDependencies[registrationName] = dependencies;
        {
          var lowerCasedName = registrationName.toLowerCase();
          possibleRegistrationNames[lowerCasedName] = registrationName;
          if (registrationName === "onDoubleClick") {
            possibleRegistrationNames.ondblclick = registrationName;
          }
        }
        for (var i2 = 0; i2 < dependencies.length; i2++) {
          allNativeEvents.add(dependencies[i2]);
        }
      }
      var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        {
          try {
            return false;
          } catch (e) {
            return true;
          }
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkAttributeStringCoercion(value, attributeName) {
        {
          if (willCoercionThrow()) {
            error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow()) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkPropStringCoercion(value, propName) {
        {
          if (willCoercionThrow()) {
            error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkCSSPropertyStringCoercion(value, propName) {
        {
          if (willCoercionThrow()) {
            error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkHtmlStringCoercion(value) {
        {
          if (willCoercionThrow()) {
            error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkFormFieldValueStringCoercion(value) {
        {
          if (willCoercionThrow()) {
            error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      var RESERVED2 = 0;
      var STRING = 1;
      var BOOLEANISH_STRING = 2;
      var BOOLEAN = 3;
      var OVERLOADED_BOOLEAN = 4;
      var NUMERIC = 5;
      var POSITIVE_NUMERIC = 6;
      var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
      var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
      var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
      var illegalAttributeNameCache = {};
      var validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
          return true;
        }
        if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
          return false;
        }
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
          validatedAttributeNameCache[attributeName] = true;
          return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        {
          error("Invalid attribute name: `%s`", attributeName);
        }
        return false;
      }
      function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) {
          return propertyInfo.type === RESERVED2;
        }
        if (isCustomComponentTag) {
          return false;
        }
        if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
          return true;
        }
        return false;
      }
      function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED2) {
          return false;
        }
        switch (typeof value) {
          case "function":
          case "symbol":
            return true;
          case "boolean": {
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              return !propertyInfo.acceptsBooleans;
            } else {
              var prefix3 = name.toLowerCase().slice(0, 5);
              return prefix3 !== "data-" && prefix3 !== "aria-";
            }
          }
          default:
            return false;
        }
      }
      function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === "undefined") {
          return true;
        }
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
          return true;
        }
        if (isCustomComponentTag) {
          return false;
        }
        if (propertyInfo !== null) {
          switch (propertyInfo.type) {
            case BOOLEAN:
              return !value;
            case OVERLOADED_BOOLEAN:
              return value === false;
            case NUMERIC:
              return isNaN(value);
            case POSITIVE_NUMERIC:
              return isNaN(value) || value < 1;
          }
        }
        return false;
      }
      function getPropertyInfo(name) {
        return properties2.hasOwnProperty(name) ? properties2[name] : null;
      }
      function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL2;
        this.removeEmptyString = removeEmptyString;
      }
      var properties2 = {};
      var reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        // TODO: This prevents the assignment of defaultValue to regular
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
      ];
      reservedProps.forEach(function(name) {
        properties2[name] = new PropertyInfoRecord(
          name,
          RESERVED2,
          false,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties2[name] = new PropertyInfoRecord(
          name,
          STRING,
          false,
          // mustUseProperty
          attributeName,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
        properties2[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          false,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
        properties2[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          false,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      [
        "allowFullScreen",
        "async",
        // Note: there is a special case that prevents it from being written to the DOM
        // on the client side because the browsers are inconsistent. Instead we call focus().
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        // Microdata
        "itemScope"
      ].forEach(function(name) {
        properties2[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          false,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      [
        "checked",
        // Note: `option.selected` is not updated if `select.multiple` is
        // disabled with `removeAttribute`. We have special logic for handling this.
        "multiple",
        "muted",
        "selected"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties2[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          true,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      [
        "capture",
        "download"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties2[name] = new PropertyInfoRecord(
          name,
          OVERLOADED_BOOLEAN,
          false,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      [
        "cols",
        "rows",
        "size",
        "span"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties2[name] = new PropertyInfoRecord(
          name,
          POSITIVE_NUMERIC,
          false,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      ["rowSpan", "start"].forEach(function(name) {
        properties2[name] = new PropertyInfoRecord(
          name,
          NUMERIC,
          false,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      var CAMELIZE = /[\-\:]([a-z])/g;
      var capitalize2 = function(token2) {
        return token2[1].toUpperCase();
      };
      [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize2);
        properties2[name] = new PropertyInfoRecord(
          name,
          STRING,
          false,
          // mustUseProperty
          attributeName,
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize2);
        properties2[name] = new PropertyInfoRecord(
          name,
          STRING,
          false,
          // mustUseProperty
          attributeName,
          "http://www.w3.org/1999/xlink",
          false,
          // sanitizeURL
          false
        );
      });
      [
        "xml:base",
        "xml:lang",
        "xml:space"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize2);
        properties2[name] = new PropertyInfoRecord(
          name,
          STRING,
          false,
          // mustUseProperty
          attributeName,
          "http://www.w3.org/XML/1998/namespace",
          false,
          // sanitizeURL
          false
        );
      });
      ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
        properties2[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          false,
          // mustUseProperty
          attributeName.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      var xlinkHref = "xlinkHref";
      properties2[xlinkHref] = new PropertyInfoRecord(
        "xlinkHref",
        STRING,
        false,
        // mustUseProperty
        "xlink:href",
        "http://www.w3.org/1999/xlink",
        true,
        // sanitizeURL
        false
      );
      ["src", "href", "action", "formAction"].forEach(function(attributeName) {
        properties2[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          false,
          // mustUseProperty
          attributeName.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          true,
          // sanitizeURL
          true
        );
      });
      var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
      var didWarn = false;
      function sanitizeURL(url) {
        {
          if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true;
            error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
          }
        }
      }
      function getValueForProperty(node2, name, expected, propertyInfo) {
        {
          if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node2[propertyName];
          } else {
            {
              checkAttributeStringCoercion(expected, name);
            }
            if (propertyInfo.sanitizeURL) {
              sanitizeURL("" + expected);
            }
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
              if (node2.hasAttribute(attributeName)) {
                var value = node2.getAttribute(attributeName);
                if (value === "") {
                  return true;
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return value;
                }
                if (value === "" + expected) {
                  return expected;
                }
                return value;
              }
            } else if (node2.hasAttribute(attributeName)) {
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return node2.getAttribute(attributeName);
              }
              if (propertyInfo.type === BOOLEAN) {
                return expected;
              }
              stringValue = node2.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
              return stringValue === null ? expected : stringValue;
            } else if (stringValue === "" + expected) {
              return expected;
            } else {
              return stringValue;
            }
          }
        }
      }
      function getValueForAttribute(node2, name, expected, isCustomComponentTag) {
        {
          if (!isAttributeNameSafe(name)) {
            return;
          }
          if (!node2.hasAttribute(name)) {
            return expected === void 0 ? void 0 : null;
          }
          var value = node2.getAttribute(name);
          {
            checkAttributeStringCoercion(expected, name);
          }
          if (value === "" + expected) {
            return expected;
          }
          return value;
        }
      }
      function setValueForProperty(node2, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
          return;
        }
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
          value = null;
        }
        if (isCustomComponentTag || propertyInfo === null) {
          if (isAttributeNameSafe(name)) {
            var _attributeName = name;
            if (value === null) {
              node2.removeAttribute(_attributeName);
            } else {
              {
                checkAttributeStringCoercion(value, name);
              }
              node2.setAttribute(_attributeName, "" + value);
            }
          }
          return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
          var propertyName = propertyInfo.propertyName;
          if (value === null) {
            var type = propertyInfo.type;
            node2[propertyName] = type === BOOLEAN ? false : "";
          } else {
            node2[propertyName] = value;
          }
          return;
        }
        var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
        if (value === null) {
          node2.removeAttribute(attributeName);
        } else {
          var _type = propertyInfo.type;
          var attributeValue;
          if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
            attributeValue = "";
          } else {
            {
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
            }
            if (propertyInfo.sanitizeURL) {
              sanitizeURL(attributeValue.toString());
            }
          }
          if (attributeNamespace) {
            node2.setAttributeNS(attributeNamespace, attributeName, attributeValue);
          } else {
            node2.setAttribute(attributeName, attributeValue);
          }
        }
      }
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_SCOPE_TYPE = Symbol.for("react.scope");
      var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
      var REACT_CACHE_TYPE = Symbol.for("react.cache");
      var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var assign2 = Object.assign;
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign2({}, props, {
                value: prevLog
              }),
              info: assign2({}, props, {
                value: prevInfo
              }),
              warn: assign2({}, props, {
                value: prevWarn
              }),
              error: assign2({}, props, {
                value: prevError
              }),
              group: assign2({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign2({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign2({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0) {
            try {
              throw Error();
            } catch (x) {
              var match2 = x.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match2 && match2[1] || "";
            }
          }
          return "\n" + prefix2 + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s = sampleLines.length - 1;
            var c = controlLines.length - 1;
            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
              c--;
            }
            for (; s >= 1 && c >= 0; s--, c--) {
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1) {
                  do {
                    s--;
                    c--;
                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                      if (fn.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn.displayName);
                      }
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s >= 1 && c >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeClassComponentFrame(ctor, source, ownerFn) {
        {
          return describeNativeComponentFrame(ctor, true);
        }
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component) {
        var prototype2 = Component.prototype;
        return !!(prototype2 && prototype2.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init2 = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init2(payload));
              } catch (x) {
              }
            }
          }
        }
        return "";
      }
      function describeFiber(fiber) {
        switch (fiber.tag) {
          case HostComponent:
            return describeBuiltInComponentFrame(fiber.type);
          case LazyComponent:
            return describeBuiltInComponentFrame("Lazy");
          case SuspenseComponent:
            return describeBuiltInComponentFrame("Suspense");
          case SuspenseListComponent:
            return describeBuiltInComponentFrame("SuspenseList");
          case FunctionComponent:
          case IndeterminateComponent:
          case SimpleMemoComponent:
            return describeFunctionComponentFrame(fiber.type);
          case ForwardRef:
            return describeFunctionComponentFrame(fiber.type.render);
          case ClassComponent:
            return describeClassComponentFrame(fiber.type);
          default:
            return "";
        }
      }
      function getStackByFiberInDevAndProd(workInProgress2) {
        try {
          var info2 = "";
          var node2 = workInProgress2;
          do {
            info2 += describeFiber(node2);
            node2 = node2.return;
          } while (node2);
          return info2;
        } catch (x) {
          return "\nError generating stack: " + x.message + "\n" + x.stack;
        }
      }
      function getWrappedName2(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName2(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init2 = lazyComponent._init;
              try {
                return getComponentNameFromType(init2(payload));
              } catch (x) {
                return null;
              }
            }
          }
        }
        return null;
      }
      function getWrappedName$1(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
      }
      function getContextName$1(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromFiber(fiber) {
        var tag = fiber.tag, type = fiber.type;
        switch (tag) {
          case CacheComponent:
            return "Cache";
          case ContextConsumer:
            var context = type;
            return getContextName$1(context) + ".Consumer";
          case ContextProvider:
            var provider = type;
            return getContextName$1(provider._context) + ".Provider";
          case DehydratedFragment:
            return "DehydratedFragment";
          case ForwardRef:
            return getWrappedName$1(type, type.render, "ForwardRef");
          case Fragment:
            return "Fragment";
          case HostComponent:
            return type;
          case HostPortal:
            return "Portal";
          case HostRoot:
            return "Root";
          case HostText:
            return "Text";
          case LazyComponent:
            return getComponentNameFromType(type);
          case Mode:
            if (type === REACT_STRICT_MODE_TYPE) {
              return "StrictMode";
            }
            return "Mode";
          case OffscreenComponent:
            return "Offscreen";
          case Profiler:
            return "Profiler";
          case ScopeComponent:
            return "Scope";
          case SuspenseComponent:
            return "Suspense";
          case SuspenseListComponent:
            return "SuspenseList";
          case TracingMarkerComponent:
            return "TracingMarker";
          case ClassComponent:
          case FunctionComponent:
          case IncompleteClassComponent:
          case IndeterminateComponent:
          case MemoComponent:
          case SimpleMemoComponent:
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            break;
        }
        return null;
      }
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      var current = null;
      var isRendering = false;
      function getCurrentFiberOwnerNameInDevOrNull() {
        {
          if (current === null) {
            return null;
          }
          var owner = current._debugOwner;
          if (owner !== null && typeof owner !== "undefined") {
            return getComponentNameFromFiber(owner);
          }
        }
        return null;
      }
      function getCurrentFiberStackInDev() {
        {
          if (current === null) {
            return "";
          }
          return getStackByFiberInDevAndProd(current);
        }
      }
      function resetCurrentFiber() {
        {
          ReactDebugCurrentFrame.getCurrentStack = null;
          current = null;
          isRendering = false;
        }
      }
      function setCurrentFiber(fiber) {
        {
          ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
          current = fiber;
          isRendering = false;
        }
      }
      function getCurrentFiber() {
        {
          return current;
        }
      }
      function setIsRendering(rendering) {
        {
          isRendering = rendering;
        }
      }
      function toString2(value) {
        return "" + value;
      }
      function getToStringValue(value) {
        switch (typeof value) {
          case "boolean":
          case "number":
          case "string":
          case "undefined":
            return value;
          case "object":
            {
              checkFormFieldValueStringCoercion(value);
            }
            return value;
          default:
            return "";
        }
      }
      var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
      };
      function checkControlledValueProps(tagName, props) {
        {
          if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
            error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
          }
          if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
            error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
          }
        }
      }
      function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
      }
      function getTracker(node2) {
        return node2._valueTracker;
      }
      function detachTracker(node2) {
        node2._valueTracker = null;
      }
      function getValueFromNode(node2) {
        var value = "";
        if (!node2) {
          return value;
        }
        if (isCheckable(node2)) {
          value = node2.checked ? "true" : "false";
        } else {
          value = node2.value;
        }
        return value;
      }
      function trackValueOnNode(node2) {
        var valueField = isCheckable(node2) ? "checked" : "value";
        var descriptor = Object.getOwnPropertyDescriptor(node2.constructor.prototype, valueField);
        {
          checkFormFieldValueStringCoercion(node2[valueField]);
        }
        var currentValue = "" + node2[valueField];
        if (node2.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
          return;
        }
        var get3 = descriptor.get, set2 = descriptor.set;
        Object.defineProperty(node2, valueField, {
          configurable: true,
          get: function() {
            return get3.call(this);
          },
          set: function(value) {
            {
              checkFormFieldValueStringCoercion(value);
            }
            currentValue = "" + value;
            set2.call(this, value);
          }
        });
        Object.defineProperty(node2, valueField, {
          enumerable: descriptor.enumerable
        });
        var tracker = {
          getValue: function() {
            return currentValue;
          },
          setValue: function(value) {
            {
              checkFormFieldValueStringCoercion(value);
            }
            currentValue = "" + value;
          },
          stopTracking: function() {
            detachTracker(node2);
            delete node2[valueField];
          }
        };
        return tracker;
      }
      function track(node2) {
        if (getTracker(node2)) {
          return;
        }
        node2._valueTracker = trackValueOnNode(node2);
      }
      function updateValueIfChanged(node2) {
        if (!node2) {
          return false;
        }
        var tracker = getTracker(node2);
        if (!tracker) {
          return true;
        }
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node2);
        if (nextValue !== lastValue) {
          tracker.setValue(nextValue);
          return true;
        }
        return false;
      }
      function getActiveElement(doc) {
        doc = doc || (typeof document !== "undefined" ? document : void 0);
        if (typeof doc === "undefined") {
          return null;
        }
        try {
          return doc.activeElement || doc.body;
        } catch (e) {
          return doc.body;
        }
      }
      var didWarnValueDefaultValue = false;
      var didWarnCheckedDefaultChecked = false;
      var didWarnControlledToUncontrolled = false;
      var didWarnUncontrolledToControlled = false;
      function isControlled(props) {
        var usesChecked = props.type === "checkbox" || props.type === "radio";
        return usesChecked ? props.checked != null : props.value != null;
      }
      function getHostProps(element, props) {
        var node2 = element;
        var checked = props.checked;
        var hostProps = assign2({}, props, {
          defaultChecked: void 0,
          defaultValue: void 0,
          value: void 0,
          checked: checked != null ? checked : node2._wrapperState.initialChecked
        });
        return hostProps;
      }
      function initWrapperState(element, props) {
        {
          checkControlledValueProps("input", props);
          if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
            error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
            didWarnCheckedDefaultChecked = true;
          }
          if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
            error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
            didWarnValueDefaultValue = true;
          }
        }
        var node2 = element;
        var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
        node2._wrapperState = {
          initialChecked: props.checked != null ? props.checked : props.defaultChecked,
          initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
          controlled: isControlled(props)
        };
      }
      function updateChecked(element, props) {
        var node2 = element;
        var checked = props.checked;
        if (checked != null) {
          setValueForProperty(node2, "checked", checked, false);
        }
      }
      function updateWrapper(element, props) {
        var node2 = element;
        {
          var controlled = isControlled(props);
          if (!node2._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnUncontrolledToControlled = true;
          }
          if (node2._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnControlledToUncontrolled = true;
          }
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
          if (type === "number") {
            if (value === 0 && node2.value === "" || // We explicitly want to coerce to number here if possible.
            // eslint-disable-next-line
            node2.value != value) {
              node2.value = toString2(value);
            }
          } else if (node2.value !== toString2(value)) {
            node2.value = toString2(value);
          }
        } else if (type === "submit" || type === "reset") {
          node2.removeAttribute("value");
          return;
        }
        {
          if (props.hasOwnProperty("value")) {
            setDefaultValue(node2, props.type, value);
          } else if (props.hasOwnProperty("defaultValue")) {
            setDefaultValue(node2, props.type, getToStringValue(props.defaultValue));
          }
        }
        {
          if (props.checked == null && props.defaultChecked != null) {
            node2.defaultChecked = !!props.defaultChecked;
          }
        }
      }
      function postMountWrapper(element, props, isHydrating2) {
        var node2 = element;
        if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
          var type = props.type;
          var isButton = type === "submit" || type === "reset";
          if (isButton && (props.value === void 0 || props.value === null)) {
            return;
          }
          var initialValue = toString2(node2._wrapperState.initialValue);
          if (!isHydrating2) {
            {
              if (initialValue !== node2.value) {
                node2.value = initialValue;
              }
            }
          }
          {
            node2.defaultValue = initialValue;
          }
        }
        var name = node2.name;
        if (name !== "") {
          node2.name = "";
        }
        {
          node2.defaultChecked = !node2.defaultChecked;
          node2.defaultChecked = !!node2._wrapperState.initialChecked;
        }
        if (name !== "") {
          node2.name = name;
        }
      }
      function restoreControlledState(element, props) {
        var node2 = element;
        updateWrapper(node2, props);
        updateNamedCousins(node2, props);
      }
      function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === "radio" && name != null) {
          var queryRoot = rootNode;
          while (queryRoot.parentNode) {
            queryRoot = queryRoot.parentNode;
          }
          {
            checkAttributeStringCoercion(name, "name");
          }
          var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
          for (var i2 = 0; i2 < group.length; i2++) {
            var otherNode = group[i2];
            if (otherNode === rootNode || otherNode.form !== rootNode.form) {
              continue;
            }
            var otherProps = getFiberCurrentPropsFromNode(otherNode);
            if (!otherProps) {
              throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
            }
            updateValueIfChanged(otherNode);
            updateWrapper(otherNode, otherProps);
          }
        }
      }
      function setDefaultValue(node2, type, value) {
        if (
          // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
          type !== "number" || getActiveElement(node2.ownerDocument) !== node2
        ) {
          if (value == null) {
            node2.defaultValue = toString2(node2._wrapperState.initialValue);
          } else if (node2.defaultValue !== toString2(value)) {
            node2.defaultValue = toString2(value);
          }
        }
      }
      var didWarnSelectedSetOnOption = false;
      var didWarnInvalidChild = false;
      var didWarnInvalidInnerHTML = false;
      function validateProps(element, props) {
        {
          if (props.value == null) {
            if (typeof props.children === "object" && props.children !== null) {
              React2.Children.forEach(props.children, function(child) {
                if (child == null) {
                  return;
                }
                if (typeof child === "string" || typeof child === "number") {
                  return;
                }
                if (!didWarnInvalidChild) {
                  didWarnInvalidChild = true;
                  error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                }
              });
            } else if (props.dangerouslySetInnerHTML != null) {
              if (!didWarnInvalidInnerHTML) {
                didWarnInvalidInnerHTML = true;
                error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
              }
            }
          }
          if (props.selected != null && !didWarnSelectedSetOnOption) {
            error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
          }
        }
      }
      function postMountWrapper$1(element, props) {
        if (props.value != null) {
          element.setAttribute("value", toString2(getToStringValue(props.value)));
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray2(a) {
        return isArrayImpl(a);
      }
      var didWarnValueDefaultValue$1;
      {
        didWarnValueDefaultValue$1 = false;
      }
      function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) {
          return "\n\nCheck the render method of `" + ownerName + "`.";
        }
        return "";
      }
      var valuePropNames = ["value", "defaultValue"];
      function checkSelectPropTypes(props) {
        {
          checkControlledValueProps("select", props);
          for (var i2 = 0; i2 < valuePropNames.length; i2++) {
            var propName = valuePropNames[i2];
            if (props[propName] == null) {
              continue;
            }
            var propNameIsArray = isArray2(props[propName]);
            if (props.multiple && !propNameIsArray) {
              error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            } else if (!props.multiple && propNameIsArray) {
              error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
            }
          }
        }
      }
      function updateOptions(node2, multiple, propValue, setDefaultSelected) {
        var options2 = node2.options;
        if (multiple) {
          var selectedValues = propValue;
          var selectedValue = {};
          for (var i2 = 0; i2 < selectedValues.length; i2++) {
            selectedValue["$" + selectedValues[i2]] = true;
          }
          for (var _i = 0; _i < options2.length; _i++) {
            var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
            if (options2[_i].selected !== selected) {
              options2[_i].selected = selected;
            }
            if (selected && setDefaultSelected) {
              options2[_i].defaultSelected = true;
            }
          }
        } else {
          var _selectedValue = toString2(getToStringValue(propValue));
          var defaultSelected = null;
          for (var _i2 = 0; _i2 < options2.length; _i2++) {
            if (options2[_i2].value === _selectedValue) {
              options2[_i2].selected = true;
              if (setDefaultSelected) {
                options2[_i2].defaultSelected = true;
              }
              return;
            }
            if (defaultSelected === null && !options2[_i2].disabled) {
              defaultSelected = options2[_i2];
            }
          }
          if (defaultSelected !== null) {
            defaultSelected.selected = true;
          }
        }
      }
      function getHostProps$1(element, props) {
        return assign2({}, props, {
          value: void 0
        });
      }
      function initWrapperState$1(element, props) {
        var node2 = element;
        {
          checkSelectPropTypes(props);
        }
        node2._wrapperState = {
          wasMultiple: !!props.multiple
        };
        {
          if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
            error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
            didWarnValueDefaultValue$1 = true;
          }
        }
      }
      function postMountWrapper$2(element, props) {
        var node2 = element;
        node2.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) {
          updateOptions(node2, !!props.multiple, value, false);
        } else if (props.defaultValue != null) {
          updateOptions(node2, !!props.multiple, props.defaultValue, true);
        }
      }
      function postUpdateWrapper(element, props) {
        var node2 = element;
        var wasMultiple = node2._wrapperState.wasMultiple;
        node2._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) {
          updateOptions(node2, !!props.multiple, value, false);
        } else if (wasMultiple !== !!props.multiple) {
          if (props.defaultValue != null) {
            updateOptions(node2, !!props.multiple, props.defaultValue, true);
          } else {
            updateOptions(node2, !!props.multiple, props.multiple ? [] : "", false);
          }
        }
      }
      function restoreControlledState$1(element, props) {
        var node2 = element;
        var value = props.value;
        if (value != null) {
          updateOptions(node2, !!props.multiple, value, false);
        }
      }
      var didWarnValDefaultVal = false;
      function getHostProps$2(element, props) {
        var node2 = element;
        if (props.dangerouslySetInnerHTML != null) {
          throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
        }
        var hostProps = assign2({}, props, {
          value: void 0,
          defaultValue: void 0,
          children: toString2(node2._wrapperState.initialValue)
        });
        return hostProps;
      }
      function initWrapperState$2(element, props) {
        var node2 = element;
        {
          checkControlledValueProps("textarea", props);
          if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
            error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
            didWarnValDefaultVal = true;
          }
        }
        var initialValue = props.value;
        if (initialValue == null) {
          var children = props.children, defaultValue = props.defaultValue;
          if (children != null) {
            {
              error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            }
            {
              if (defaultValue != null) {
                throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
              }
              if (isArray2(children)) {
                if (children.length > 1) {
                  throw new Error("<textarea> can only have at most one child.");
                }
                children = children[0];
              }
              defaultValue = children;
            }
          }
          if (defaultValue == null) {
            defaultValue = "";
          }
          initialValue = defaultValue;
        }
        node2._wrapperState = {
          initialValue: getToStringValue(initialValue)
        };
      }
      function updateWrapper$1(element, props) {
        var node2 = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
          var newValue = toString2(value);
          if (newValue !== node2.value) {
            node2.value = newValue;
          }
          if (props.defaultValue == null && node2.defaultValue !== newValue) {
            node2.defaultValue = newValue;
          }
        }
        if (defaultValue != null) {
          node2.defaultValue = toString2(defaultValue);
        }
      }
      function postMountWrapper$3(element, props) {
        var node2 = element;
        var textContent = node2.textContent;
        if (textContent === node2._wrapperState.initialValue) {
          if (textContent !== "" && textContent !== null) {
            node2.value = textContent;
          }
        }
      }
      function restoreControlledState$2(element, props) {
        updateWrapper$1(element, props);
      }
      var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
      var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
      var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
      function getIntrinsicNamespace(type) {
        switch (type) {
          case "svg":
            return SVG_NAMESPACE;
          case "math":
            return MATH_NAMESPACE;
          default:
            return HTML_NAMESPACE;
        }
      }
      function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
          return getIntrinsicNamespace(type);
        }
        if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
          return HTML_NAMESPACE;
        }
        return parentNamespace;
      }
      var createMicrosoftUnsafeLocalFunction = function(func) {
        if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
          return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
              return func(arg0, arg1, arg2, arg3);
            });
          };
        } else {
          return func;
        }
      };
      var reusableSVGContainer;
      var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node2, html) {
        if (node2.namespaceURI === SVG_NAMESPACE) {
          if (!("innerHTML" in node2)) {
            reusableSVGContainer = reusableSVGContainer || document.createElement("div");
            reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
            var svgNode = reusableSVGContainer.firstChild;
            while (node2.firstChild) {
              node2.removeChild(node2.firstChild);
            }
            while (svgNode.firstChild) {
              node2.appendChild(svgNode.firstChild);
            }
            return;
          }
        }
        node2.innerHTML = html;
      });
      var ELEMENT_NODE = 1;
      var TEXT_NODE = 3;
      var COMMENT_NODE = 8;
      var DOCUMENT_NODE = 9;
      var DOCUMENT_FRAGMENT_NODE = 11;
      var setTextContent = function(node2, text) {
        if (text) {
          var firstChild = node2.firstChild;
          if (firstChild && firstChild === node2.lastChild && firstChild.nodeType === TEXT_NODE) {
            firstChild.nodeValue = text;
            return;
          }
        }
        node2.textContent = text;
      };
      var shorthandToLonghand = {
        animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
        background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
        backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
        border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
        borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
        borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
        borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
        borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
        borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
        borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
        borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
        borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
        borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
        borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
        borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
        columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
        columns: ["columnCount", "columnWidth"],
        flex: ["flexBasis", "flexGrow", "flexShrink"],
        flexFlow: ["flexDirection", "flexWrap"],
        font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
        fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
        gap: ["columnGap", "rowGap"],
        grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
        gridColumn: ["gridColumnEnd", "gridColumnStart"],
        gridColumnGap: ["columnGap"],
        gridGap: ["columnGap", "rowGap"],
        gridRow: ["gridRowEnd", "gridRowStart"],
        gridRowGap: ["rowGap"],
        gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
        margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
        marker: ["markerEnd", "markerMid", "markerStart"],
        mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
        maskPosition: ["maskPositionX", "maskPositionY"],
        outline: ["outlineColor", "outlineStyle", "outlineWidth"],
        overflow: ["overflowX", "overflowY"],
        padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
        placeContent: ["alignContent", "justifyContent"],
        placeItems: ["alignItems", "justifyItems"],
        placeSelf: ["alignSelf", "justifySelf"],
        textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
        textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
        transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
        wordWrap: ["overflowWrap"]
      };
      var isUnitlessNumber = {
        animationIterationCount: true,
        aspectRatio: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        // SVG-related properties
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
      };
      function prefixKey(prefix3, key) {
        return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
      }
      var prefixes = ["Webkit", "ms", "Moz", "O"];
      Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix3) {
          isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
        });
      });
      function dangerousStyleValue(name, value, isCustomProperty2) {
        var isEmpty2 = value == null || typeof value === "boolean" || value === "";
        if (isEmpty2) {
          return "";
        }
        if (!isCustomProperty2 && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
          return value + "px";
        }
        {
          checkCSSPropertyStringCoercion(value, name);
        }
        return ("" + value).trim();
      }
      var uppercasePattern = /([A-Z])/g;
      var msPattern2 = /^ms-/;
      function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern2, "-ms-");
      }
      var warnValidStyle = function() {
      };
      {
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
        var msPattern$1 = /^-ms-/;
        var hyphenPattern2 = /-(.)/g;
        var badStyleValueWithSemicolonPattern = /;\s*$/;
        var warnedStyleNames = {};
        var warnedStyleValues = {};
        var warnedForNaNValue = false;
        var warnedForInfinityValue = false;
        var camelize = function(string) {
          return string.replace(hyphenPattern2, function(_2, character2) {
            return character2.toUpperCase();
          });
        };
        var warnHyphenatedStyleName = function(name) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return;
          }
          warnedStyleNames[name] = true;
          error(
            "Unsupported style property %s. Did you mean %s?",
            name,
            // As Andi Smith suggests
            // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
            // is converted to lowercase `ms`.
            camelize(name.replace(msPattern$1, "ms-"))
          );
        };
        var warnBadVendoredStyleName = function(name) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return;
          }
          warnedStyleNames[name] = true;
          error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
        };
        var warnStyleValueWithSemicolon = function(name, value) {
          if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
            return;
          }
          warnedStyleValues[value] = true;
          error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
        };
        var warnStyleValueIsNaN = function(name, value) {
          if (warnedForNaNValue) {
            return;
          }
          warnedForNaNValue = true;
          error("`NaN` is an invalid value for the `%s` css style property.", name);
        };
        var warnStyleValueIsInfinity = function(name, value) {
          if (warnedForInfinityValue) {
            return;
          }
          warnedForInfinityValue = true;
          error("`Infinity` is an invalid value for the `%s` css style property.", name);
        };
        warnValidStyle = function(name, value) {
          if (name.indexOf("-") > -1) {
            warnHyphenatedStyleName(name);
          } else if (badVendoredStyleNamePattern.test(name)) {
            warnBadVendoredStyleName(name);
          } else if (badStyleValueWithSemicolonPattern.test(value)) {
            warnStyleValueWithSemicolon(name, value);
          }
          if (typeof value === "number") {
            if (isNaN(value)) {
              warnStyleValueIsNaN(name, value);
            } else if (!isFinite(value)) {
              warnStyleValueIsInfinity(name, value);
            }
          }
        };
      }
      var warnValidStyle$1 = warnValidStyle;
      function createDangerousStringForStyles(styles2) {
        {
          var serialized = "";
          var delimiter2 = "";
          for (var styleName in styles2) {
            if (!styles2.hasOwnProperty(styleName)) {
              continue;
            }
            var styleValue = styles2[styleName];
            if (styleValue != null) {
              var isCustomProperty2 = styleName.indexOf("--") === 0;
              serialized += delimiter2 + (isCustomProperty2 ? styleName : hyphenateStyleName(styleName)) + ":";
              serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty2);
              delimiter2 = ";";
            }
          }
          return serialized || null;
        }
      }
      function setValueForStyles(node2, styles2) {
        var style3 = node2.style;
        for (var styleName in styles2) {
          if (!styles2.hasOwnProperty(styleName)) {
            continue;
          }
          var isCustomProperty2 = styleName.indexOf("--") === 0;
          {
            if (!isCustomProperty2) {
              warnValidStyle$1(styleName, styles2[styleName]);
            }
          }
          var styleValue = dangerousStyleValue(styleName, styles2[styleName], isCustomProperty2);
          if (styleName === "float") {
            styleName = "cssFloat";
          }
          if (isCustomProperty2) {
            style3.setProperty(styleName, styleValue);
          } else {
            style3[styleName] = styleValue;
          }
        }
      }
      function isValueEmpty(value) {
        return value == null || typeof value === "boolean" || value === "";
      }
      function expandShorthandMap(styles2) {
        var expanded = {};
        for (var key in styles2) {
          var longhands = shorthandToLonghand[key] || [key];
          for (var i2 = 0; i2 < longhands.length; i2++) {
            expanded[longhands[i2]] = key;
          }
        }
        return expanded;
      }
      function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        {
          if (!nextStyles) {
            return;
          }
          var expandedUpdates = expandShorthandMap(styleUpdates);
          var expandedStyles = expandShorthandMap(nextStyles);
          var warnedAbout = {};
          for (var key in expandedUpdates) {
            var originalKey = expandedUpdates[key];
            var correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
              var warningKey = originalKey + "," + correctOriginalKey;
              if (warnedAbout[warningKey]) {
                continue;
              }
              warnedAbout[warningKey] = true;
              error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
            }
          }
        }
      }
      var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true
        // NOTE: menuitem's close tag should be omitted, but that causes problems.
      };
      var voidElementTags = assign2({
        menuitem: true
      }, omittedCloseTags);
      var HTML = "__html";
      function assertValidProps(tag, props) {
        if (!props) {
          return;
        }
        if (voidElementTags[tag]) {
          if (props.children != null || props.dangerouslySetInnerHTML != null) {
            throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
          }
        }
        if (props.dangerouslySetInnerHTML != null) {
          if (props.children != null) {
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          }
          if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          }
        }
        {
          if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
            error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
          }
        }
        if (props.style != null && typeof props.style !== "object") {
          throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
        }
      }
      function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1) {
          return typeof props.is === "string";
        }
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      var possibleStandardNames = {
        // HTML
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        // SVG
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      };
      var ariaProperties = {
        "aria-current": 0,
        // state
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        // state
        "aria-hidden": 0,
        // state
        "aria-invalid": 0,
        // state
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        // Widget Attributes
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        // Live Region Attributes
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        // Drag-and-Drop Attributes
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        // Relationship Attributes
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      };
      var warnedProperties = {};
      var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
      var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      function validateProperty(tagName, name) {
        {
          if (hasOwnProperty2.call(warnedProperties, name) && warnedProperties[name]) {
            return true;
          }
          if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null) {
              error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
              warnedProperties[name] = true;
              return true;
            }
            if (name !== correctName) {
              error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
              warnedProperties[name] = true;
              return true;
            }
          }
          if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null) {
              warnedProperties[name] = true;
              return false;
            }
            if (name !== standardName) {
              error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
              warnedProperties[name] = true;
              return true;
            }
          }
        }
        return true;
      }
      function warnInvalidARIAProps(type, props) {
        {
          var invalidProps = [];
          for (var key in props) {
            var isValid2 = validateProperty(type, key);
            if (!isValid2) {
              invalidProps.push(key);
            }
          }
          var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          if (invalidProps.length === 1) {
            error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
          } else if (invalidProps.length > 1) {
            error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
          }
        }
      }
      function validateProperties(type, props) {
        if (isCustomComponent(type, props)) {
          return;
        }
        warnInvalidARIAProps(type, props);
      }
      var didWarnValueNull = false;
      function validateProperties$1(type, props) {
        {
          if (type !== "input" && type !== "textarea" && type !== "select") {
            return;
          }
          if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === "select" && props.multiple) {
              error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            } else {
              error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
            }
          }
        }
      }
      var validateProperty$1 = function() {
      };
      {
        var warnedProperties$1 = {};
        var EVENT_NAME_REGEX = /^on./;
        var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
        var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        validateProperty$1 = function(tagName, name, value, eventRegistry) {
          if (hasOwnProperty2.call(warnedProperties$1, name) && warnedProperties$1[name]) {
            return true;
          }
          var lowerCasedName = name.toLowerCase();
          if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
            error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (eventRegistry != null) {
            var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies2.hasOwnProperty(name)) {
              return true;
            }
            var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
            if (registrationName != null) {
              error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
              error("Unknown event handler property `%s`. It will be ignored.", name);
              warnedProperties$1[name] = true;
              return true;
            }
          } else if (EVENT_NAME_REGEX.test(name)) {
            if (INVALID_EVENT_NAME_REGEX.test(name)) {
              error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            }
            warnedProperties$1[name] = true;
            return true;
          }
          if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
            return true;
          }
          if (lowerCasedName === "innerhtml") {
            error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (lowerCasedName === "aria") {
            error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
            error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
          }
          if (typeof value === "number" && isNaN(value)) {
            error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
          }
          var propertyInfo = getPropertyInfo(name);
          var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED2;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
              error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
              warnedProperties$1[name] = true;
              return true;
            }
          } else if (!isReserved && name !== lowerCasedName) {
            error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
          }
          if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) {
              error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
            } else {
              error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
            }
            warnedProperties$1[name] = true;
            return true;
          }
          if (isReserved) {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
          }
          if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
          }
          return true;
        };
      }
      var warnUnknownProperties = function(type, props, eventRegistry) {
        {
          var unknownProps = [];
          for (var key in props) {
            var isValid2 = validateProperty$1(type, key, props[key], eventRegistry);
            if (!isValid2) {
              unknownProps.push(key);
            }
          }
          var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          if (unknownProps.length === 1) {
            error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
          } else if (unknownProps.length > 1) {
            error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
          }
        }
      };
      function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) {
          return;
        }
        warnUnknownProperties(type, props, eventRegistry);
      }
      var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
      var IS_NON_DELEGATED = 1 << 1;
      var IS_CAPTURE_PHASE = 1 << 2;
      var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
      var currentReplayingEvent = null;
      function setReplayingEvent(event) {
        {
          if (currentReplayingEvent !== null) {
            error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        currentReplayingEvent = event;
      }
      function resetReplayingEvent() {
        {
          if (currentReplayingEvent === null) {
            error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        currentReplayingEvent = null;
      }
      function isReplayingEvent(event) {
        return event === currentReplayingEvent;
      }
      function getEventTarget(nativeEvent) {
        var target = nativeEvent.target || nativeEvent.srcElement || window;
        if (target.correspondingUseElement) {
          target = target.correspondingUseElement;
        }
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
      }
      var restoreImpl = null;
      var restoreTarget = null;
      var restoreQueue = null;
      function restoreStateOfTarget(target) {
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) {
          return;
        }
        if (typeof restoreImpl !== "function") {
          throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        }
        var stateNode = internalInstance.stateNode;
        if (stateNode) {
          var _props = getFiberCurrentPropsFromNode(stateNode);
          restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
        }
      }
      function setRestoreImplementation(impl) {
        restoreImpl = impl;
      }
      function enqueueStateRestore(target) {
        if (restoreTarget) {
          if (restoreQueue) {
            restoreQueue.push(target);
          } else {
            restoreQueue = [target];
          }
        } else {
          restoreTarget = target;
        }
      }
      function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
      }
      function restoreStateIfNeeded() {
        if (!restoreTarget) {
          return;
        }
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) {
          for (var i2 = 0; i2 < queuedTargets.length; i2++) {
            restoreStateOfTarget(queuedTargets[i2]);
          }
        }
      }
      var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
      };
      var flushSyncImpl = function() {
      };
      var isInsideEventHandler = false;
      function finishEventHandler() {
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
          flushSyncImpl();
          restoreStateIfNeeded();
        }
      }
      function batchedUpdates(fn, a, b) {
        if (isInsideEventHandler) {
          return fn(a, b);
        }
        isInsideEventHandler = true;
        try {
          return batchedUpdatesImpl(fn, a, b);
        } finally {
          isInsideEventHandler = false;
          finishEventHandler();
        }
      }
      function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        flushSyncImpl = _flushSyncImpl;
      }
      function isInteractive(tag) {
        return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
      }
      function shouldPreventMouseEvent(name, type, props) {
        switch (name) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            return !!(props.disabled && isInteractive(type));
          default:
            return false;
        }
      }
      function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null) {
          return null;
        }
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null) {
          return null;
        }
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
          return null;
        }
        if (listener && typeof listener !== "function") {
          throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        }
        return listener;
      }
      var passiveBrowserEventsSupported = false;
      if (canUseDOM) {
        try {
          var options = {};
          Object.defineProperty(options, "passive", {
            get: function() {
              passiveBrowserEventsSupported = true;
            }
          });
          window.addEventListener("test", options, options);
          window.removeEventListener("test", options, options);
        } catch (e) {
          passiveBrowserEventsSupported = false;
        }
      }
      function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
          func.apply(context, funcArgs);
        } catch (error2) {
          this.onError(error2);
        }
      }
      var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
      {
        if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
          var fakeNode = document.createElement("react");
          invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            if (typeof document === "undefined" || document === null) {
              throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            }
            var evt = document.createEvent("Event");
            var didCall = false;
            var didError = true;
            var windowEvent = window.event;
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
            function restoreAfterDispatch() {
              fakeNode.removeEventListener(evtType, callCallback2, false);
              if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                window.event = windowEvent;
              }
            }
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback2() {
              didCall = true;
              restoreAfterDispatch();
              func.apply(context, funcArgs);
              didError = false;
            }
            var error2;
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
              error2 = event.error;
              didSetError = true;
              if (error2 === null && event.colno === 0 && event.lineno === 0) {
                isCrossOriginError = true;
              }
              if (event.defaultPrevented) {
                if (error2 != null && typeof error2 === "object") {
                  try {
                    error2._suppressLogging = true;
                  } catch (inner) {
                  }
                }
              }
            }
            var evtType = "react-" + (name ? name : "invokeguardedcallback");
            window.addEventListener("error", handleWindowError);
            fakeNode.addEventListener(evtType, callCallback2, false);
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) {
              Object.defineProperty(window, "event", windowEventDescriptor);
            }
            if (didCall && didError) {
              if (!didSetError) {
                error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
              } else if (isCrossOriginError) {
                error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
              }
              this.onError(error2);
            }
            window.removeEventListener("error", handleWindowError);
            if (!didCall) {
              restoreAfterDispatch();
              return invokeGuardedCallbackProd.apply(this, arguments);
            }
          };
        }
      }
      var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
      var hasError = false;
      var caughtError = null;
      var hasRethrowError = false;
      var rethrowError = null;
      var reporter = {
        onError: function(error2) {
          hasError = true;
          caughtError = error2;
        }
      };
      function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
      }
      function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
          var error2 = clearCaughtError();
          if (!hasRethrowError) {
            hasRethrowError = true;
            rethrowError = error2;
          }
        }
      }
      function rethrowCaughtError() {
        if (hasRethrowError) {
          var error2 = rethrowError;
          hasRethrowError = false;
          rethrowError = null;
          throw error2;
        }
      }
      function hasCaughtError() {
        return hasError;
      }
      function clearCaughtError() {
        if (hasError) {
          var error2 = caughtError;
          hasError = false;
          caughtError = null;
          return error2;
        } else {
          throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      function get2(key) {
        return key._reactInternals;
      }
      function has2(key) {
        return key._reactInternals !== void 0;
      }
      function set(key, value) {
        key._reactInternals = value;
      }
      var NoFlags = (
        /*                      */
        0
      );
      var PerformedWork = (
        /*                */
        1
      );
      var Placement = (
        /*                    */
        2
      );
      var Update = (
        /*                       */
        4
      );
      var ChildDeletion = (
        /*                */
        16
      );
      var ContentReset = (
        /*                 */
        32
      );
      var Callback = (
        /*                     */
        64
      );
      var DidCapture = (
        /*                   */
        128
      );
      var ForceClientRender = (
        /*            */
        256
      );
      var Ref = (
        /*                          */
        512
      );
      var Snapshot = (
        /*                     */
        1024
      );
      var Passive = (
        /*                      */
        2048
      );
      var Hydrating = (
        /*                    */
        4096
      );
      var Visibility = (
        /*                   */
        8192
      );
      var StoreConsistency = (
        /*             */
        16384
      );
      var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
      var HostEffectMask = (
        /*               */
        32767
      );
      var Incomplete = (
        /*                   */
        32768
      );
      var ShouldCapture = (
        /*                */
        65536
      );
      var ForceUpdateForLegacySuspense = (
        /* */
        131072
      );
      var Forked = (
        /*                       */
        1048576
      );
      var RefStatic = (
        /*                    */
        2097152
      );
      var LayoutStatic = (
        /*                 */
        4194304
      );
      var PassiveStatic = (
        /*                */
        8388608
      );
      var MountLayoutDev = (
        /*               */
        16777216
      );
      var MountPassiveDev = (
        /*              */
        33554432
      );
      var BeforeMutationMask = (
        // TODO: Remove Update flag from before mutation phase by re-landing Visibility
        // flag logic (see #20043)
        Update | Snapshot | 0
      );
      var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
      var LayoutMask = Update | Callback | Ref | Visibility;
      var PassiveMask = Passive | ChildDeletion;
      var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      function getNearestMountedFiber(fiber) {
        var node2 = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
          var nextNode = node2;
          do {
            node2 = nextNode;
            if ((node2.flags & (Placement | Hydrating)) !== NoFlags) {
              nearestMounted = node2.return;
            }
            nextNode = node2.return;
          } while (nextNode);
        } else {
          while (node2.return) {
            node2 = node2.return;
          }
        }
        if (node2.tag === HostRoot) {
          return nearestMounted;
        }
        return null;
      }
      function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState === null) {
            var current2 = fiber.alternate;
            if (current2 !== null) {
              suspenseState = current2.memoizedState;
            }
          }
          if (suspenseState !== null) {
            return suspenseState.dehydrated;
          }
        }
        return null;
      }
      function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
      }
      function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
      }
      function isMounted(component) {
        {
          var owner = ReactCurrentOwner.current;
          if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance2 = ownerFiber.stateNode;
            if (!instance2._warnedAboutRefsInRender) {
              error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
            }
            instance2._warnedAboutRefsInRender = true;
          }
        }
        var fiber = get2(component);
        if (!fiber) {
          return false;
        }
        return getNearestMountedFiber(fiber) === fiber;
      }
      function assertIsMounted(fiber) {
        if (getNearestMountedFiber(fiber) !== fiber) {
          throw new Error("Unable to find node on an unmounted component.");
        }
      }
      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
          var nearestMounted = getNearestMountedFiber(fiber);
          if (nearestMounted === null) {
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (nearestMounted !== fiber) {
            return null;
          }
          return fiber;
        }
        var a = fiber;
        var b = alternate;
        while (true) {
          var parentA = a.return;
          if (parentA === null) {
            break;
          }
          var parentB = parentA.alternate;
          if (parentB === null) {
            var nextParent = parentA.return;
            if (nextParent !== null) {
              a = b = nextParent;
              continue;
            }
            break;
          }
          if (parentA.child === parentB.child) {
            var child = parentA.child;
            while (child) {
              if (child === a) {
                assertIsMounted(parentA);
                return fiber;
              }
              if (child === b) {
                assertIsMounted(parentA);
                return alternate;
              }
              child = child.sibling;
            }
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a.return !== b.return) {
            a = parentA;
            b = parentB;
          } else {
            var didFindChild = false;
            var _child = parentA.child;
            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentA;
                b = parentB;
                break;
              }
              if (_child === b) {
                didFindChild = true;
                b = parentA;
                a = parentB;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild) {
              _child = parentB.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentB;
                  b = parentA;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentB;
                  a = parentA;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
              }
            }
          }
          if (a.alternate !== b) {
            throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        if (a.tag !== HostRoot) {
          throw new Error("Unable to find node on an unmounted component.");
        }
        if (a.stateNode.current === a) {
          return fiber;
        }
        return alternate;
      }
      function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
      }
      function findCurrentHostFiberImpl(node2) {
        if (node2.tag === HostComponent || node2.tag === HostText) {
          return node2;
        }
        var child = node2.child;
        while (child !== null) {
          var match2 = findCurrentHostFiberImpl(child);
          if (match2 !== null) {
            return match2;
          }
          child = child.sibling;
        }
        return null;
      }
      function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
      }
      function findCurrentHostFiberWithNoPortalsImpl(node2) {
        if (node2.tag === HostComponent || node2.tag === HostText) {
          return node2;
        }
        var child = node2.child;
        while (child !== null) {
          if (child.tag !== HostPortal) {
            var match2 = findCurrentHostFiberWithNoPortalsImpl(child);
            if (match2 !== null) {
              return match2;
            }
          }
          child = child.sibling;
        }
        return null;
      }
      var scheduleCallback = Scheduler2.unstable_scheduleCallback;
      var cancelCallback = Scheduler2.unstable_cancelCallback;
      var shouldYield = Scheduler2.unstable_shouldYield;
      var requestPaint = Scheduler2.unstable_requestPaint;
      var now = Scheduler2.unstable_now;
      var getCurrentPriorityLevel = Scheduler2.unstable_getCurrentPriorityLevel;
      var ImmediatePriority = Scheduler2.unstable_ImmediatePriority;
      var UserBlockingPriority = Scheduler2.unstable_UserBlockingPriority;
      var NormalPriority = Scheduler2.unstable_NormalPriority;
      var LowPriority = Scheduler2.unstable_LowPriority;
      var IdlePriority = Scheduler2.unstable_IdlePriority;
      var unstable_yieldValue = Scheduler2.unstable_yieldValue;
      var unstable_setDisableYieldValue = Scheduler2.unstable_setDisableYieldValue;
      var rendererID = null;
      var injectedHook = null;
      var injectedProfilingHooks = null;
      var hasLoggedError = false;
      var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
      function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
          return false;
        }
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) {
          return true;
        }
        if (!hook.supportsFiber) {
          {
            error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
          }
          return true;
        }
        try {
          {
            internals = assign2({}, internals, {
              getLaneLabelMap,
              injectProfilingHooks
            });
          }
          rendererID = hook.inject(internals);
          injectedHook = hook;
        } catch (err) {
          {
            error("React instrumentation encountered an error: %s.", err);
          }
        }
        if (hook.checkDCE) {
          return true;
        } else {
          return false;
        }
      }
      function onScheduleRoot(root2, children) {
        {
          if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
            try {
              injectedHook.onScheduleFiberRoot(rendererID, root2, children);
            } catch (err) {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onCommitRoot(root2, eventPriority) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
          try {
            var didError = (root2.current.flags & DidCapture) === DidCapture;
            {
              var schedulerPriority;
              switch (eventPriority) {
                case DiscreteEventPriority:
                  schedulerPriority = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriority = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriority = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriority = IdlePriority;
                  break;
                default:
                  schedulerPriority = NormalPriority;
                  break;
              }
              injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
            }
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onPostCommitRoot(root2) {
        if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
          try {
            injectedHook.onPostCommitFiberRoot(rendererID, root2);
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
          try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function setIsStrictModeForDevtools(newIsStrictMode) {
        {
          if (typeof unstable_yieldValue === "function") {
            unstable_setDisableYieldValue(newIsStrictMode);
            setSuppressWarning(newIsStrictMode);
          }
          if (injectedHook && typeof injectedHook.setStrictMode === "function") {
            try {
              injectedHook.setStrictMode(rendererID, newIsStrictMode);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
      }
      function injectProfilingHooks(profilingHooks) {
        injectedProfilingHooks = profilingHooks;
      }
      function getLaneLabelMap() {
        {
          var map2 = /* @__PURE__ */ new Map();
          var lane = 1;
          for (var index3 = 0; index3 < TotalLanes; index3++) {
            var label = getLabelForLane(lane);
            map2.set(lane, label);
            lane *= 2;
          }
          return map2;
        }
      }
      function markCommitStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
            injectedProfilingHooks.markCommitStarted(lanes);
          }
        }
      }
      function markCommitStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
            injectedProfilingHooks.markCommitStopped();
          }
        }
      }
      function markComponentRenderStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
            injectedProfilingHooks.markComponentRenderStarted(fiber);
          }
        }
      }
      function markComponentRenderStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
            injectedProfilingHooks.markComponentRenderStopped();
          }
        }
      }
      function markComponentPassiveEffectMountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
            injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
          }
        }
      }
      function markComponentPassiveEffectMountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
            injectedProfilingHooks.markComponentPassiveEffectMountStopped();
          }
        }
      }
      function markComponentPassiveEffectUnmountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
            injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
          }
        }
      }
      function markComponentPassiveEffectUnmountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
            injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
          }
        }
      }
      function markComponentLayoutEffectMountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
            injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
          }
        }
      }
      function markComponentLayoutEffectMountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
            injectedProfilingHooks.markComponentLayoutEffectMountStopped();
          }
        }
      }
      function markComponentLayoutEffectUnmountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
            injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
          }
        }
      }
      function markComponentLayoutEffectUnmountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
            injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
          }
        }
      }
      function markComponentErrored(fiber, thrownValue, lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
            injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
          }
        }
      }
      function markComponentSuspended(fiber, wakeable, lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
            injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
          }
        }
      }
      function markLayoutEffectsStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
            injectedProfilingHooks.markLayoutEffectsStarted(lanes);
          }
        }
      }
      function markLayoutEffectsStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
            injectedProfilingHooks.markLayoutEffectsStopped();
          }
        }
      }
      function markPassiveEffectsStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
            injectedProfilingHooks.markPassiveEffectsStarted(lanes);
          }
        }
      }
      function markPassiveEffectsStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
            injectedProfilingHooks.markPassiveEffectsStopped();
          }
        }
      }
      function markRenderStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
            injectedProfilingHooks.markRenderStarted(lanes);
          }
        }
      }
      function markRenderYielded() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
            injectedProfilingHooks.markRenderYielded();
          }
        }
      }
      function markRenderStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
            injectedProfilingHooks.markRenderStopped();
          }
        }
      }
      function markRenderScheduled(lane) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
            injectedProfilingHooks.markRenderScheduled(lane);
          }
        }
      }
      function markForceUpdateScheduled(fiber, lane) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
            injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
          }
        }
      }
      function markStateUpdateScheduled(fiber, lane) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
            injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
          }
        }
      }
      var NoMode = (
        /*                         */
        0
      );
      var ConcurrentMode = (
        /*                 */
        1
      );
      var ProfileMode = (
        /*                    */
        2
      );
      var StrictLegacyMode = (
        /*               */
        8
      );
      var StrictEffectsMode = (
        /*              */
        16
      );
      var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
      var log = Math.log;
      var LN2 = Math.LN2;
      function clz32Fallback(x) {
        var asUint = x >>> 0;
        if (asUint === 0) {
          return 32;
        }
        return 31 - (log(asUint) / LN2 | 0) | 0;
      }
      var TotalLanes = 31;
      var NoLanes = (
        /*                        */
        0
      );
      var NoLane = (
        /*                          */
        0
      );
      var SyncLane = (
        /*                        */
        1
      );
      var InputContinuousHydrationLane = (
        /*    */
        2
      );
      var InputContinuousLane = (
        /*             */
        4
      );
      var DefaultHydrationLane = (
        /*            */
        8
      );
      var DefaultLane = (
        /*                     */
        16
      );
      var TransitionHydrationLane = (
        /*                */
        32
      );
      var TransitionLanes = (
        /*                       */
        4194240
      );
      var TransitionLane1 = (
        /*                        */
        64
      );
      var TransitionLane2 = (
        /*                        */
        128
      );
      var TransitionLane3 = (
        /*                        */
        256
      );
      var TransitionLane4 = (
        /*                        */
        512
      );
      var TransitionLane5 = (
        /*                        */
        1024
      );
      var TransitionLane6 = (
        /*                        */
        2048
      );
      var TransitionLane7 = (
        /*                        */
        4096
      );
      var TransitionLane8 = (
        /*                        */
        8192
      );
      var TransitionLane9 = (
        /*                        */
        16384
      );
      var TransitionLane10 = (
        /*                       */
        32768
      );
      var TransitionLane11 = (
        /*                       */
        65536
      );
      var TransitionLane12 = (
        /*                       */
        131072
      );
      var TransitionLane13 = (
        /*                       */
        262144
      );
      var TransitionLane14 = (
        /*                       */
        524288
      );
      var TransitionLane15 = (
        /*                       */
        1048576
      );
      var TransitionLane16 = (
        /*                       */
        2097152
      );
      var RetryLanes = (
        /*                            */
        130023424
      );
      var RetryLane1 = (
        /*                             */
        4194304
      );
      var RetryLane2 = (
        /*                             */
        8388608
      );
      var RetryLane3 = (
        /*                             */
        16777216
      );
      var RetryLane4 = (
        /*                             */
        33554432
      );
      var RetryLane5 = (
        /*                             */
        67108864
      );
      var SomeRetryLane = RetryLane1;
      var SelectiveHydrationLane = (
        /*          */
        134217728
      );
      var NonIdleLanes = (
        /*                          */
        268435455
      );
      var IdleHydrationLane = (
        /*               */
        268435456
      );
      var IdleLane = (
        /*                        */
        536870912
      );
      var OffscreenLane = (
        /*                   */
        1073741824
      );
      function getLabelForLane(lane) {
        {
          if (lane & SyncLane) {
            return "Sync";
          }
          if (lane & InputContinuousHydrationLane) {
            return "InputContinuousHydration";
          }
          if (lane & InputContinuousLane) {
            return "InputContinuous";
          }
          if (lane & DefaultHydrationLane) {
            return "DefaultHydration";
          }
          if (lane & DefaultLane) {
            return "Default";
          }
          if (lane & TransitionHydrationLane) {
            return "TransitionHydration";
          }
          if (lane & TransitionLanes) {
            return "Transition";
          }
          if (lane & RetryLanes) {
            return "Retry";
          }
          if (lane & SelectiveHydrationLane) {
            return "SelectiveHydration";
          }
          if (lane & IdleHydrationLane) {
            return "IdleHydration";
          }
          if (lane & IdleLane) {
            return "Idle";
          }
          if (lane & OffscreenLane) {
            return "Offscreen";
          }
        }
      }
      var NoTimestamp = -1;
      var nextTransitionLane = TransitionLane1;
      var nextRetryLane = RetryLane1;
      function getHighestPriorityLanes(lanes) {
        switch (getHighestPriorityLane(lanes)) {
          case SyncLane:
            return SyncLane;
          case InputContinuousHydrationLane:
            return InputContinuousHydrationLane;
          case InputContinuousLane:
            return InputContinuousLane;
          case DefaultHydrationLane:
            return DefaultHydrationLane;
          case DefaultLane:
            return DefaultLane;
          case TransitionHydrationLane:
            return TransitionHydrationLane;
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
            return lanes & TransitionLanes;
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            return lanes & RetryLanes;
          case SelectiveHydrationLane:
            return SelectiveHydrationLane;
          case IdleHydrationLane:
            return IdleHydrationLane;
          case IdleLane:
            return IdleLane;
          case OffscreenLane:
            return OffscreenLane;
          default:
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return lanes;
        }
      }
      function getNextLanes(root2, wipLanes) {
        var pendingLanes = root2.pendingLanes;
        if (pendingLanes === NoLanes) {
          return NoLanes;
        }
        var nextLanes = NoLanes;
        var suspendedLanes = root2.suspendedLanes;
        var pingedLanes = root2.pingedLanes;
        var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
        if (nonIdlePendingLanes !== NoLanes) {
          var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
          if (nonIdleUnblockedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
          } else {
            var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
            if (nonIdlePingedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
            }
          }
        } else {
          var unblockedLanes = pendingLanes & ~suspendedLanes;
          if (unblockedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(unblockedLanes);
          } else {
            if (pingedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(pingedLanes);
            }
          }
        }
        if (nextLanes === NoLanes) {
          return NoLanes;
        }
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
        // bother waiting until the root is complete.
        (wipLanes & suspendedLanes) === NoLanes) {
          var nextLane = getHighestPriorityLane(nextLanes);
          var wipLane = getHighestPriorityLane(wipLanes);
          if (
            // Tests whether the next lane is equal or lower priority than the wip
            // one. This works because the bits decrease in priority as you go left.
            nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
            // only difference between default updates and transition updates is that
            // default updates do not support refresh transitions.
            nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
          ) {
            return wipLanes;
          }
        }
        if ((nextLanes & InputContinuousLane) !== NoLanes) {
          nextLanes |= pendingLanes & DefaultLane;
        }
        var entangledLanes = root2.entangledLanes;
        if (entangledLanes !== NoLanes) {
          var entanglements = root2.entanglements;
          var lanes = nextLanes & entangledLanes;
          while (lanes > 0) {
            var index3 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index3;
            nextLanes |= entanglements[index3];
            lanes &= ~lane;
          }
        }
        return nextLanes;
      }
      function getMostRecentEventTime(root2, lanes) {
        var eventTimes = root2.eventTimes;
        var mostRecentEventTime = NoTimestamp;
        while (lanes > 0) {
          var index3 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index3;
          var eventTime = eventTimes[index3];
          if (eventTime > mostRecentEventTime) {
            mostRecentEventTime = eventTime;
          }
          lanes &= ~lane;
        }
        return mostRecentEventTime;
      }
      function computeExpirationTime(lane, currentTime) {
        switch (lane) {
          case SyncLane:
          case InputContinuousHydrationLane:
          case InputContinuousLane:
            return currentTime + 250;
          case DefaultHydrationLane:
          case DefaultLane:
          case TransitionHydrationLane:
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
            return currentTime + 5e3;
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            return NoTimestamp;
          case SelectiveHydrationLane:
          case IdleHydrationLane:
          case IdleLane:
          case OffscreenLane:
            return NoTimestamp;
          default:
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return NoTimestamp;
        }
      }
      function markStarvedLanesAsExpired(root2, currentTime) {
        var pendingLanes = root2.pendingLanes;
        var suspendedLanes = root2.suspendedLanes;
        var pingedLanes = root2.pingedLanes;
        var expirationTimes = root2.expirationTimes;
        var lanes = pendingLanes;
        while (lanes > 0) {
          var index3 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index3;
          var expirationTime = expirationTimes[index3];
          if (expirationTime === NoTimestamp) {
            if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
              expirationTimes[index3] = computeExpirationTime(lane, currentTime);
            }
          } else if (expirationTime <= currentTime) {
            root2.expiredLanes |= lane;
          }
          lanes &= ~lane;
        }
      }
      function getHighestPriorityPendingLanes(root2) {
        return getHighestPriorityLanes(root2.pendingLanes);
      }
      function getLanesToRetrySynchronouslyOnError(root2) {
        var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
        if (everythingButOffscreen !== NoLanes) {
          return everythingButOffscreen;
        }
        if (everythingButOffscreen & OffscreenLane) {
          return OffscreenLane;
        }
        return NoLanes;
      }
      function includesSyncLane(lanes) {
        return (lanes & SyncLane) !== NoLanes;
      }
      function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
      }
      function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
      }
      function includesOnlyNonUrgentLanes(lanes) {
        var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
        return (lanes & UrgentLanes) === NoLanes;
      }
      function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
      }
      function includesBlockingLane(root2, lanes) {
        var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
        return (lanes & SyncDefaultLanes) !== NoLanes;
      }
      function includesExpiredLane(root2, lanes) {
        return (lanes & root2.expiredLanes) !== NoLanes;
      }
      function isTransitionLane(lane) {
        return (lane & TransitionLanes) !== NoLanes;
      }
      function claimNextTransitionLane() {
        var lane = nextTransitionLane;
        nextTransitionLane <<= 1;
        if ((nextTransitionLane & TransitionLanes) === NoLanes) {
          nextTransitionLane = TransitionLane1;
        }
        return lane;
      }
      function claimNextRetryLane() {
        var lane = nextRetryLane;
        nextRetryLane <<= 1;
        if ((nextRetryLane & RetryLanes) === NoLanes) {
          nextRetryLane = RetryLane1;
        }
        return lane;
      }
      function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
      }
      function pickArbitraryLane(lanes) {
        return getHighestPriorityLane(lanes);
      }
      function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
      }
      function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
      }
      function includesSomeLane(a, b) {
        return (a & b) !== NoLanes;
      }
      function isSubsetOfLanes(set2, subset) {
        return (set2 & subset) === subset;
      }
      function mergeLanes(a, b) {
        return a | b;
      }
      function removeLanes(set2, subset) {
        return set2 & ~subset;
      }
      function intersectLanes(a, b) {
        return a & b;
      }
      function laneToLanes(lane) {
        return lane;
      }
      function higherPriorityLane(a, b) {
        return a !== NoLane && a < b ? a : b;
      }
      function createLaneMap(initial) {
        var laneMap = [];
        for (var i2 = 0; i2 < TotalLanes; i2++) {
          laneMap.push(initial);
        }
        return laneMap;
      }
      function markRootUpdated(root2, updateLane, eventTime) {
        root2.pendingLanes |= updateLane;
        if (updateLane !== IdleLane) {
          root2.suspendedLanes = NoLanes;
          root2.pingedLanes = NoLanes;
        }
        var eventTimes = root2.eventTimes;
        var index3 = laneToIndex(updateLane);
        eventTimes[index3] = eventTime;
      }
      function markRootSuspended(root2, suspendedLanes) {
        root2.suspendedLanes |= suspendedLanes;
        root2.pingedLanes &= ~suspendedLanes;
        var expirationTimes = root2.expirationTimes;
        var lanes = suspendedLanes;
        while (lanes > 0) {
          var index3 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index3;
          expirationTimes[index3] = NoTimestamp;
          lanes &= ~lane;
        }
      }
      function markRootPinged(root2, pingedLanes, eventTime) {
        root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
      }
      function markRootFinished(root2, remainingLanes) {
        var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
        root2.pendingLanes = remainingLanes;
        root2.suspendedLanes = NoLanes;
        root2.pingedLanes = NoLanes;
        root2.expiredLanes &= remainingLanes;
        root2.mutableReadLanes &= remainingLanes;
        root2.entangledLanes &= remainingLanes;
        var entanglements = root2.entanglements;
        var eventTimes = root2.eventTimes;
        var expirationTimes = root2.expirationTimes;
        var lanes = noLongerPendingLanes;
        while (lanes > 0) {
          var index3 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index3;
          entanglements[index3] = NoLanes;
          eventTimes[index3] = NoTimestamp;
          expirationTimes[index3] = NoTimestamp;
          lanes &= ~lane;
        }
      }
      function markRootEntangled(root2, entangledLanes) {
        var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
        var entanglements = root2.entanglements;
        var lanes = rootEntangledLanes;
        while (lanes) {
          var index3 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index3;
          if (
            // Is this one of the newly entangled lanes?
            lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
            entanglements[index3] & entangledLanes
          ) {
            entanglements[index3] |= entangledLanes;
          }
          lanes &= ~lane;
        }
      }
      function getBumpedLaneForHydration(root2, renderLanes2) {
        var renderLane = getHighestPriorityLane(renderLanes2);
        var lane;
        switch (renderLane) {
          case InputContinuousLane:
            lane = InputContinuousHydrationLane;
            break;
          case DefaultLane:
            lane = DefaultHydrationLane;
            break;
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            lane = TransitionHydrationLane;
            break;
          case IdleLane:
            lane = IdleHydrationLane;
            break;
          default:
            lane = NoLane;
            break;
        }
        if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
          return NoLane;
        }
        return lane;
      }
      function addFiberToLanesMap(root2, fiber, lanes) {
        if (!isDevToolsPresent) {
          return;
        }
        var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
        while (lanes > 0) {
          var index3 = laneToIndex(lanes);
          var lane = 1 << index3;
          var updaters = pendingUpdatersLaneMap[index3];
          updaters.add(fiber);
          lanes &= ~lane;
        }
      }
      function movePendingFibersToMemoized(root2, lanes) {
        if (!isDevToolsPresent) {
          return;
        }
        var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
        var memoizedUpdaters = root2.memoizedUpdaters;
        while (lanes > 0) {
          var index3 = laneToIndex(lanes);
          var lane = 1 << index3;
          var updaters = pendingUpdatersLaneMap[index3];
          if (updaters.size > 0) {
            updaters.forEach(function(fiber) {
              var alternate = fiber.alternate;
              if (alternate === null || !memoizedUpdaters.has(alternate)) {
                memoizedUpdaters.add(fiber);
              }
            });
            updaters.clear();
          }
          lanes &= ~lane;
        }
      }
      function getTransitionsForLanes(root2, lanes) {
        {
          return null;
        }
      }
      var DiscreteEventPriority = SyncLane;
      var ContinuousEventPriority = InputContinuousLane;
      var DefaultEventPriority = DefaultLane;
      var IdleEventPriority = IdleLane;
      var currentUpdatePriority = NoLane;
      function getCurrentUpdatePriority() {
        return currentUpdatePriority;
      }
      function setCurrentUpdatePriority(newPriority) {
        currentUpdatePriority = newPriority;
      }
      function runWithPriority(priority, fn) {
        var previousPriority = currentUpdatePriority;
        try {
          currentUpdatePriority = priority;
          return fn();
        } finally {
          currentUpdatePriority = previousPriority;
        }
      }
      function higherEventPriority(a, b) {
        return a !== 0 && a < b ? a : b;
      }
      function lowerEventPriority(a, b) {
        return a === 0 || a > b ? a : b;
      }
      function isHigherEventPriority(a, b) {
        return a !== 0 && a < b;
      }
      function lanesToEventPriority(lanes) {
        var lane = getHighestPriorityLane(lanes);
        if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
          return DiscreteEventPriority;
        }
        if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
          return ContinuousEventPriority;
        }
        if (includesNonIdleWork(lane)) {
          return DefaultEventPriority;
        }
        return IdleEventPriority;
      }
      function isRootDehydrated(root2) {
        var currentState = root2.current.memoizedState;
        return currentState.isDehydrated;
      }
      var _attemptSynchronousHydration;
      function setAttemptSynchronousHydration(fn) {
        _attemptSynchronousHydration = fn;
      }
      function attemptSynchronousHydration(fiber) {
        _attemptSynchronousHydration(fiber);
      }
      var attemptContinuousHydration;
      function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
      }
      var attemptHydrationAtCurrentPriority;
      function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
      }
      var getCurrentUpdatePriority$1;
      function setGetCurrentUpdatePriority(fn) {
        getCurrentUpdatePriority$1 = fn;
      }
      var attemptHydrationAtPriority;
      function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
      }
      var hasScheduledReplayAttempt = false;
      var queuedDiscreteEvents = [];
      var queuedFocus = null;
      var queuedDrag = null;
      var queuedMouse = null;
      var queuedPointers = /* @__PURE__ */ new Map();
      var queuedPointerCaptures = /* @__PURE__ */ new Map();
      var queuedExplicitHydrationTargets = [];
      var discreteReplayableEvents = [
        "mousedown",
        "mouseup",
        "touchcancel",
        "touchend",
        "touchstart",
        "auxclick",
        "dblclick",
        "pointercancel",
        "pointerdown",
        "pointerup",
        "dragend",
        "dragstart",
        "drop",
        "compositionend",
        "compositionstart",
        "keydown",
        "keypress",
        "keyup",
        "input",
        "textInput",
        // Intentionally camelCase
        "copy",
        "cut",
        "paste",
        "click",
        "change",
        "contextmenu",
        "reset",
        "submit"
      ];
      function isDiscreteEventThatRequiresHydration(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
      }
      function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
          blockedOn,
          domEventName,
          eventSystemFlags,
          nativeEvent,
          targetContainers: [targetContainer]
        };
      }
      function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch (domEventName) {
          case "focusin":
          case "focusout":
            queuedFocus = null;
            break;
          case "dragenter":
          case "dragleave":
            queuedDrag = null;
            break;
          case "mouseover":
          case "mouseout":
            queuedMouse = null;
            break;
          case "pointerover":
          case "pointerout": {
            var pointerId = nativeEvent.pointerId;
            queuedPointers.delete(pointerId);
            break;
          }
          case "gotpointercapture":
          case "lostpointercapture": {
            var _pointerId = nativeEvent.pointerId;
            queuedPointerCaptures.delete(_pointerId);
            break;
          }
        }
      }
      function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
          var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn !== null) {
            var _fiber2 = getInstanceFromNode(blockedOn);
            if (_fiber2 !== null) {
              attemptContinuousHydration(_fiber2);
            }
          }
          return queuedEvent;
        }
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
          targetContainers.push(targetContainer);
        }
        return existingQueuedEvent;
      }
      function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        switch (domEventName) {
          case "focusin": {
            var focusEvent = nativeEvent;
            queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
            return true;
          }
          case "dragenter": {
            var dragEvent = nativeEvent;
            queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
            return true;
          }
          case "mouseover": {
            var mouseEvent = nativeEvent;
            queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
            return true;
          }
          case "pointerover": {
            var pointerEvent = nativeEvent;
            var pointerId = pointerEvent.pointerId;
            queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
            return true;
          }
          case "gotpointercapture": {
            var _pointerEvent = nativeEvent;
            var _pointerId2 = _pointerEvent.pointerId;
            queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
            return true;
          }
        }
        return false;
      }
      function attemptExplicitHydrationTarget(queuedTarget) {
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted !== null) {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance2 = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance2 !== null) {
                queuedTarget.blockedOn = instance2;
                attemptHydrationAtPriority(queuedTarget.priority, function() {
                  attemptHydrationAtCurrentPriority(nearestMounted);
                });
                return;
              }
            } else if (tag === HostRoot) {
              var root2 = nearestMounted.stateNode;
              if (isRootDehydrated(root2)) {
                queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                return;
              }
            }
          }
        }
        queuedTarget.blockedOn = null;
      }
      function queueExplicitHydrationTarget(target) {
        var updatePriority = getCurrentUpdatePriority$1();
        var queuedTarget = {
          blockedOn: null,
          target,
          priority: updatePriority
        };
        var i2 = 0;
        for (; i2 < queuedExplicitHydrationTargets.length; i2++) {
          if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i2].priority)) {
            break;
          }
        }
        queuedExplicitHydrationTargets.splice(i2, 0, queuedTarget);
        if (i2 === 0) {
          attemptExplicitHydrationTarget(queuedTarget);
        }
      }
      function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) {
          return false;
        }
        var targetContainers = queuedEvent.targetContainers;
        while (targetContainers.length > 0) {
          var targetContainer = targetContainers[0];
          var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
          if (nextBlockedOn === null) {
            {
              var nativeEvent = queuedEvent.nativeEvent;
              var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
              setReplayingEvent(nativeEventClone);
              nativeEvent.target.dispatchEvent(nativeEventClone);
              resetReplayingEvent();
            }
          } else {
            var _fiber3 = getInstanceFromNode(nextBlockedOn);
            if (_fiber3 !== null) {
              attemptContinuousHydration(_fiber3);
            }
            queuedEvent.blockedOn = nextBlockedOn;
            return false;
          }
          targetContainers.shift();
        }
        return true;
      }
      function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map2) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
          map2.delete(key);
        }
      }
      function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false;
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
          queuedFocus = null;
        }
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
          queuedDrag = null;
        }
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
          queuedMouse = null;
        }
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
      }
      function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
          queuedEvent.blockedOn = null;
          if (!hasScheduledReplayAttempt) {
            hasScheduledReplayAttempt = true;
            Scheduler2.unstable_scheduleCallback(Scheduler2.unstable_NormalPriority, replayUnblockedEvents);
          }
        }
      }
      function retryIfBlockedOn(unblocked) {
        if (queuedDiscreteEvents.length > 0) {
          scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
          for (var i2 = 1; i2 < queuedDiscreteEvents.length; i2++) {
            var queuedEvent = queuedDiscreteEvents[i2];
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
            }
          }
        }
        if (queuedFocus !== null) {
          scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        }
        if (queuedDrag !== null) {
          scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        }
        if (queuedMouse !== null) {
          scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        }
        var unblock = function(queuedEvent2) {
          return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
          var queuedTarget = queuedExplicitHydrationTargets[_i];
          if (queuedTarget.blockedOn === unblocked) {
            queuedTarget.blockedOn = null;
          }
        }
        while (queuedExplicitHydrationTargets.length > 0) {
          var nextExplicitTarget = queuedExplicitHydrationTargets[0];
          if (nextExplicitTarget.blockedOn !== null) {
            break;
          } else {
            attemptExplicitHydrationTarget(nextExplicitTarget);
            if (nextExplicitTarget.blockedOn === null) {
              queuedExplicitHydrationTargets.shift();
            }
          }
        }
      }
      var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
      var _enabled = true;
      function setEnabled(enabled) {
        _enabled = !!enabled;
      }
      function isEnabled() {
        return _enabled;
      }
      function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriority(domEventName);
        var listenerWrapper;
        switch (eventPriority) {
          case DiscreteEventPriority:
            listenerWrapper = dispatchDiscreteEvent;
            break;
          case ContinuousEventPriority:
            listenerWrapper = dispatchContinuousEvent;
            break;
          case DefaultEventPriority:
          default:
            listenerWrapper = dispatchEvent;
            break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
      }
      function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
          setCurrentUpdatePriority(DiscreteEventPriority);
          dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig.transition = prevTransition;
        }
      }
      function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
          setCurrentUpdatePriority(ContinuousEventPriority);
          dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig.transition = prevTransition;
        }
      }
      function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (!_enabled) {
          return;
        }
        {
          dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        }
      }
      function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
          clearIfContinuousEvent(domEventName, nativeEvent);
          return;
        }
        if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
          nativeEvent.stopPropagation();
          return;
        }
        clearIfContinuousEvent(domEventName, nativeEvent);
        if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
          while (blockedOn !== null) {
            var fiber = getInstanceFromNode(blockedOn);
            if (fiber !== null) {
              attemptSynchronousHydration(fiber);
            }
            var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (nextBlockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            }
            if (nextBlockedOn === blockedOn) {
              break;
            }
            blockedOn = nextBlockedOn;
          }
          if (blockedOn !== null) {
            nativeEvent.stopPropagation();
          }
          return;
        }
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
      }
      var return_targetInst = null;
      function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return_targetInst = null;
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted === null) {
            targetInst = null;
          } else {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance2 = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance2 !== null) {
                return instance2;
              }
              targetInst = null;
            } else if (tag === HostRoot) {
              var root2 = nearestMounted.stateNode;
              if (isRootDehydrated(root2)) {
                return getContainerFromFiber(nearestMounted);
              }
              targetInst = null;
            } else if (nearestMounted !== targetInst) {
              targetInst = null;
            }
          }
        }
        return_targetInst = targetInst;
        return null;
      }
      function getEventPriority(domEventName) {
        switch (domEventName) {
          case "cancel":
          case "click":
          case "close":
          case "contextmenu":
          case "copy":
          case "cut":
          case "auxclick":
          case "dblclick":
          case "dragend":
          case "dragstart":
          case "drop":
          case "focusin":
          case "focusout":
          case "input":
          case "invalid":
          case "keydown":
          case "keypress":
          case "keyup":
          case "mousedown":
          case "mouseup":
          case "paste":
          case "pause":
          case "play":
          case "pointercancel":
          case "pointerdown":
          case "pointerup":
          case "ratechange":
          case "reset":
          case "resize":
          case "seeked":
          case "submit":
          case "touchcancel":
          case "touchend":
          case "touchstart":
          case "volumechange":
          case "change":
          case "selectionchange":
          case "textInput":
          case "compositionstart":
          case "compositionend":
          case "compositionupdate":
          case "beforeblur":
          case "afterblur":
          case "beforeinput":
          case "blur":
          case "fullscreenchange":
          case "focus":
          case "hashchange":
          case "popstate":
          case "select":
          case "selectstart":
            return DiscreteEventPriority;
          case "drag":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "mousemove":
          case "mouseout":
          case "mouseover":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "scroll":
          case "toggle":
          case "touchmove":
          case "wheel":
          case "mouseenter":
          case "mouseleave":
          case "pointerenter":
          case "pointerleave":
            return ContinuousEventPriority;
          case "message": {
            var schedulerPriority = getCurrentPriorityLevel();
            switch (schedulerPriority) {
              case ImmediatePriority:
                return DiscreteEventPriority;
              case UserBlockingPriority:
                return ContinuousEventPriority;
              case NormalPriority:
              case LowPriority:
                return DefaultEventPriority;
              case IdlePriority:
                return IdleEventPriority;
              default:
                return DefaultEventPriority;
            }
          }
          default:
            return DefaultEventPriority;
        }
      }
      function addEventBubbleListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, false);
        return listener;
      }
      function addEventCaptureListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, true);
        return listener;
      }
      function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
          capture: true,
          passive
        });
        return listener;
      }
      function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
          passive
        });
        return listener;
      }
      var root = null;
      var startText = null;
      var fallbackText = null;
      function initialize(nativeEventTarget) {
        root = nativeEventTarget;
        startText = getText();
        return true;
      }
      function reset() {
        root = null;
        startText = null;
        fallbackText = null;
      }
      function getData() {
        if (fallbackText) {
          return fallbackText;
        }
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for (start = 0; start < startLength; start++) {
          if (startValue[start] !== endValue[start]) {
            break;
          }
        }
        var minEnd = startLength - start;
        for (end = 1; end <= minEnd; end++) {
          if (startValue[startLength - end] !== endValue[endLength - end]) {
            break;
          }
        }
        var sliceTail = end > 1 ? 1 - end : void 0;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
      }
      function getText() {
        if ("value" in root) {
          return root.value;
        }
        return root.textContent;
      }
      function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ("charCode" in nativeEvent) {
          charCode = nativeEvent.charCode;
          if (charCode === 0 && keyCode === 13) {
            charCode = 13;
          }
        } else {
          charCode = keyCode;
        }
        if (charCode === 10) {
          charCode = 13;
        }
        if (charCode >= 32 || charCode === 13) {
          return charCode;
        }
        return 0;
      }
      function functionThatReturnsTrue() {
        return true;
      }
      function functionThatReturnsFalse() {
        return false;
      }
      function createSyntheticEvent(Interface) {
        function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
          this._reactName = reactName;
          this._targetInst = targetInst;
          this.type = reactEventType;
          this.nativeEvent = nativeEvent;
          this.target = nativeEventTarget;
          this.currentTarget = null;
          for (var _propName in Interface) {
            if (!Interface.hasOwnProperty(_propName)) {
              continue;
            }
            var normalize2 = Interface[_propName];
            if (normalize2) {
              this[_propName] = normalize2(nativeEvent);
            } else {
              this[_propName] = nativeEvent[_propName];
            }
          }
          var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
          if (defaultPrevented) {
            this.isDefaultPrevented = functionThatReturnsTrue;
          } else {
            this.isDefaultPrevented = functionThatReturnsFalse;
          }
          this.isPropagationStopped = functionThatReturnsFalse;
          return this;
        }
        assign2(SyntheticBaseEvent.prototype, {
          preventDefault: function() {
            this.defaultPrevented = true;
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.preventDefault) {
              event.preventDefault();
            } else if (typeof event.returnValue !== "unknown") {
              event.returnValue = false;
            }
            this.isDefaultPrevented = functionThatReturnsTrue;
          },
          stopPropagation: function() {
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.stopPropagation) {
              event.stopPropagation();
            } else if (typeof event.cancelBubble !== "unknown") {
              event.cancelBubble = true;
            }
            this.isPropagationStopped = functionThatReturnsTrue;
          },
          /**
           * We release all dispatched `SyntheticEvent`s after each event loop, adding
           * them back into the pool. This allows a way to hold onto a reference that
           * won't be added back into the pool.
           */
          persist: function() {
          },
          /**
           * Checks if this event should be released back into the pool.
           *
           * @return {boolean} True if this should not be released, false otherwise.
           */
          isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
      }
      var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
      };
      var SyntheticEvent = createSyntheticEvent(EventInterface);
      var UIEventInterface = assign2({}, EventInterface, {
        view: 0,
        detail: 0
      });
      var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
      var lastMovementX;
      var lastMovementY;
      var lastMouseEvent;
      function updateMouseMovementPolyfillState(event) {
        if (event !== lastMouseEvent) {
          if (lastMouseEvent && event.type === "mousemove") {
            lastMovementX = event.screenX - lastMouseEvent.screenX;
            lastMovementY = event.screenY - lastMouseEvent.screenY;
          } else {
            lastMovementX = 0;
            lastMovementY = 0;
          }
          lastMouseEvent = event;
        }
      }
      var MouseEventInterface = assign2({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
          if (event.relatedTarget === void 0)
            return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
          return event.relatedTarget;
        },
        movementX: function(event) {
          if ("movementX" in event) {
            return event.movementX;
          }
          updateMouseMovementPolyfillState(event);
          return lastMovementX;
        },
        movementY: function(event) {
          if ("movementY" in event) {
            return event.movementY;
          }
          return lastMovementY;
        }
      });
      var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
      var DragEventInterface = assign2({}, MouseEventInterface, {
        dataTransfer: 0
      });
      var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
      var FocusEventInterface = assign2({}, UIEventInterface, {
        relatedTarget: 0
      });
      var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
      var AnimationEventInterface = assign2({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      });
      var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
      var ClipboardEventInterface = assign2({}, EventInterface, {
        clipboardData: function(event) {
          return "clipboardData" in event ? event.clipboardData : window.clipboardData;
        }
      });
      var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
      var CompositionEventInterface = assign2({}, EventInterface, {
        data: 0
      });
      var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
      var SyntheticInputEvent = SyntheticCompositionEvent;
      var normalizeKey = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
      };
      var translateToKey = {
        "8": "Backspace",
        "9": "Tab",
        "12": "Clear",
        "13": "Enter",
        "16": "Shift",
        "17": "Control",
        "18": "Alt",
        "19": "Pause",
        "20": "CapsLock",
        "27": "Escape",
        "32": " ",
        "33": "PageUp",
        "34": "PageDown",
        "35": "End",
        "36": "Home",
        "37": "ArrowLeft",
        "38": "ArrowUp",
        "39": "ArrowRight",
        "40": "ArrowDown",
        "45": "Insert",
        "46": "Delete",
        "112": "F1",
        "113": "F2",
        "114": "F3",
        "115": "F4",
        "116": "F5",
        "117": "F6",
        "118": "F7",
        "119": "F8",
        "120": "F9",
        "121": "F10",
        "122": "F11",
        "123": "F12",
        "144": "NumLock",
        "145": "ScrollLock",
        "224": "Meta"
      };
      function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
          var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
          if (key !== "Unidentified") {
            return key;
          }
        }
        if (nativeEvent.type === "keypress") {
          var charCode = getEventCharCode(nativeEvent);
          return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
          return translateToKey[nativeEvent.keyCode] || "Unidentified";
        }
        return "";
      }
      var modifierKeyToProp = {
        Alt: "altKey",
        Control: "ctrlKey",
        Meta: "metaKey",
        Shift: "shiftKey"
      };
      function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) {
          return nativeEvent.getModifierState(keyArg);
        }
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
      }
      function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
      }
      var KeyboardEventInterface = assign2({}, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        // Legacy Interface
        charCode: function(event) {
          if (event.type === "keypress") {
            return getEventCharCode(event);
          }
          return 0;
        },
        keyCode: function(event) {
          if (event.type === "keydown" || event.type === "keyup") {
            return event.keyCode;
          }
          return 0;
        },
        which: function(event) {
          if (event.type === "keypress") {
            return getEventCharCode(event);
          }
          if (event.type === "keydown" || event.type === "keyup") {
            return event.keyCode;
          }
          return 0;
        }
      });
      var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
      var PointerEventInterface = assign2({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
      });
      var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
      var TouchEventInterface = assign2({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
      });
      var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
      var TransitionEventInterface = assign2({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      });
      var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
      var WheelEventInterface = assign2({}, MouseEventInterface, {
        deltaX: function(event) {
          return "deltaX" in event ? event.deltaX : (
            // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
            "wheelDeltaX" in event ? -event.wheelDeltaX : 0
          );
        },
        deltaY: function(event) {
          return "deltaY" in event ? event.deltaY : (
            // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
            "wheelDeltaY" in event ? -event.wheelDeltaY : (
              // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
              "wheelDelta" in event ? -event.wheelDelta : 0
            )
          );
        },
        deltaZ: 0,
        // Browsers without "deltaMode" is reporting in raw wheel delta where one
        // notch on the scroll is always +/- 120, roughly equivalent to pixels.
        // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
        // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
        deltaMode: 0
      });
      var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
      var END_KEYCODES = [9, 13, 27, 32];
      var START_KEYCODE = 229;
      var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
      var documentMode = null;
      if (canUseDOM && "documentMode" in document) {
        documentMode = document.documentMode;
      }
      var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
      var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
      var SPACEBAR_CODE = 32;
      var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
      function registerEvents() {
        registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
        registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
      }
      var hasSpaceKeypress = false;
      function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
        !(nativeEvent.ctrlKey && nativeEvent.altKey);
      }
      function getCompositionEventType(domEventName) {
        switch (domEventName) {
          case "compositionstart":
            return "onCompositionStart";
          case "compositionend":
            return "onCompositionEnd";
          case "compositionupdate":
            return "onCompositionUpdate";
        }
      }
      function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
      }
      function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch (domEventName) {
          case "keyup":
            return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
          case "keydown":
            return nativeEvent.keyCode !== START_KEYCODE;
          case "keypress":
          case "mousedown":
          case "focusout":
            return true;
          default:
            return false;
        }
      }
      function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === "object" && "data" in detail) {
          return detail.data;
        }
        return null;
      }
      function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === "ko";
      }
      var isComposing = false;
      function extractCompositionEvent(dispatchQueue2, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) {
          eventType = getCompositionEventType(domEventName);
        } else if (!isComposing) {
          if (isFallbackCompositionStart(domEventName, nativeEvent)) {
            eventType = "onCompositionStart";
          }
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
          eventType = "onCompositionEnd";
        }
        if (!eventType) {
          return null;
        }
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
          if (!isComposing && eventType === "onCompositionStart") {
            isComposing = initialize(nativeEventTarget);
          } else if (eventType === "onCompositionEnd") {
            if (isComposing) {
              fallbackData = getData();
            }
          }
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
          var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
          dispatchQueue2.push({
            event,
            listeners
          });
          if (fallbackData) {
            event.data = fallbackData;
          } else {
            var customData = getDataFromCustomEvent(nativeEvent);
            if (customData !== null) {
              event.data = customData;
            }
          }
        }
      }
      function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch (domEventName) {
          case "compositionend":
            return getDataFromCustomEvent(nativeEvent);
          case "keypress":
            var which = nativeEvent.which;
            if (which !== SPACEBAR_CODE) {
              return null;
            }
            hasSpaceKeypress = true;
            return SPACEBAR_CHAR;
          case "textInput":
            var chars2 = nativeEvent.data;
            if (chars2 === SPACEBAR_CHAR && hasSpaceKeypress) {
              return null;
            }
            return chars2;
          default:
            return null;
        }
      }
      function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        if (isComposing) {
          if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
            var chars2 = getData();
            reset();
            isComposing = false;
            return chars2;
          }
          return null;
        }
        switch (domEventName) {
          case "paste":
            return null;
          case "keypress":
            if (!isKeypressCommand(nativeEvent)) {
              if (nativeEvent.char && nativeEvent.char.length > 1) {
                return nativeEvent.char;
              } else if (nativeEvent.which) {
                return String.fromCharCode(nativeEvent.which);
              }
            }
            return null;
          case "compositionend":
            return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
          default:
            return null;
        }
      }
      function extractBeforeInputEvent(dispatchQueue2, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars2;
        if (canUseTextInputEvent) {
          chars2 = getNativeBeforeInputChars(domEventName, nativeEvent);
        } else {
          chars2 = getFallbackBeforeInputChars(domEventName, nativeEvent);
        }
        if (!chars2) {
          return null;
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
        if (listeners.length > 0) {
          var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
          dispatchQueue2.push({
            event,
            listeners
          });
          event.data = chars2;
        }
      }
      function extractEvents(dispatchQueue2, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue2, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractBeforeInputEvent(dispatchQueue2, domEventName, targetInst, nativeEvent, nativeEventTarget);
      }
      var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        "datetime-local": true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
      };
      function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === "input") {
          return !!supportedInputTypes[elem.type];
        }
        if (nodeName === "textarea") {
          return true;
        }
        return false;
      }
      /**
       * Checks if an event is supported in the current execution environment.
       *
       * NOTE: This will not work correctly for non-generic events such as `change`,
       * `reset`, `load`, `error`, and `select`.
       *
       * Borrows from Modernizr.
       *
       * @param {string} eventNameSuffix Event name, e.g. "click".
       * @return {boolean} True if the event is supported.
       * @internal
       * @license Modernizr 3.0.0pre (Custom Build) | MIT
       */
      function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) {
          return false;
        }
        var eventName = "on" + eventNameSuffix;
        var isSupported2 = eventName in document;
        if (!isSupported2) {
          var element = document.createElement("div");
          element.setAttribute(eventName, "return;");
          isSupported2 = typeof element[eventName] === "function";
        }
        return isSupported2;
      }
      function registerEvents$1() {
        registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
      }
      function createAndAccumulateChangeEvent(dispatchQueue2, inst, nativeEvent, target) {
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, "onChange");
        if (listeners.length > 0) {
          var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
          dispatchQueue2.push({
            event,
            listeners
          });
        }
      }
      var activeElement = null;
      var activeElementInst = null;
      function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === "select" || nodeName === "input" && elem.type === "file";
      }
      function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue2 = [];
        createAndAccumulateChangeEvent(dispatchQueue2, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
        batchedUpdates(runEventInBatch, dispatchQueue2);
      }
      function runEventInBatch(dispatchQueue2) {
        processDispatchQueue(dispatchQueue2, 0);
      }
      function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) {
          return targetInst;
        }
      }
      function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === "change") {
          return targetInst;
        }
      }
      var isInputEventSupported = false;
      if (canUseDOM) {
        isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
      }
      function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent("onpropertychange", handlePropertyChange);
      }
      function stopWatchingForValueChange() {
        if (!activeElement) {
          return;
        }
        activeElement.detachEvent("onpropertychange", handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
      }
      function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== "value") {
          return;
        }
        if (getInstIfValueChanged(activeElementInst)) {
          manualDispatchChangeEvent(nativeEvent);
        }
      }
      function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        if (domEventName === "focusin") {
          stopWatchingForValueChange();
          startWatchingForValueChange(target, targetInst);
        } else if (domEventName === "focusout") {
          stopWatchingForValueChange();
        }
      }
      function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
          return getInstIfValueChanged(activeElementInst);
        }
      }
      function shouldUseClickEvent(elem) {
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
      }
      function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === "click") {
          return getInstIfValueChanged(targetInst);
        }
      }
      function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === "input" || domEventName === "change") {
          return getInstIfValueChanged(targetInst);
        }
      }
      function handleControlledInputBlur(node2) {
        var state = node2._wrapperState;
        if (!state || !state.controlled || node2.type !== "number") {
          return;
        }
        {
          setDefaultValue(node2, "number", node2.value);
        }
      }
      function extractEvents$1(dispatchQueue2, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForChangeEvent;
        } else if (isTextInputElement(targetNode)) {
          if (isInputEventSupported) {
            getTargetInstFunc = getTargetInstForInputOrChangeEvent;
          } else {
            getTargetInstFunc = getTargetInstForInputEventPolyfill;
            handleEventFunc = handleEventsForInputEventPolyfill;
          }
        } else if (shouldUseClickEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForClickEvent;
        }
        if (getTargetInstFunc) {
          var inst = getTargetInstFunc(domEventName, targetInst);
          if (inst) {
            createAndAccumulateChangeEvent(dispatchQueue2, inst, nativeEvent, nativeEventTarget);
            return;
          }
        }
        if (handleEventFunc) {
          handleEventFunc(domEventName, targetNode, targetInst);
        }
        if (domEventName === "focusout") {
          handleControlledInputBlur(targetNode);
        }
      }
      function registerEvents$2() {
        registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
        registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
        registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
        registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
      }
      function extractEvents$2(dispatchQueue2, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
        var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
        if (isOverEvent && !isReplayingEvent(nativeEvent)) {
          var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
          if (related) {
            if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
              return;
            }
          }
        }
        if (!isOutEvent && !isOverEvent) {
          return;
        }
        var win2;
        if (nativeEventTarget.window === nativeEventTarget) {
          win2 = nativeEventTarget;
        } else {
          var doc = nativeEventTarget.ownerDocument;
          if (doc) {
            win2 = doc.defaultView || doc.parentWindow;
          } else {
            win2 = window;
          }
        }
        var from2;
        var to;
        if (isOutEvent) {
          var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
          from2 = targetInst;
          to = _related ? getClosestInstanceFromNode(_related) : null;
          if (to !== null) {
            var nearestMounted = getNearestMountedFiber(to);
            if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
              to = null;
            }
          }
        } else {
          from2 = null;
          to = targetInst;
        }
        if (from2 === to) {
          return;
        }
        var SyntheticEventCtor = SyntheticMouseEvent;
        var leaveEventType = "onMouseLeave";
        var enterEventType = "onMouseEnter";
        var eventTypePrefix = "mouse";
        if (domEventName === "pointerout" || domEventName === "pointerover") {
          SyntheticEventCtor = SyntheticPointerEvent;
          leaveEventType = "onPointerLeave";
          enterEventType = "onPointerEnter";
          eventTypePrefix = "pointer";
        }
        var fromNode = from2 == null ? win2 : getNodeFromInstance(from2);
        var toNode = to == null ? win2 : getNodeFromInstance(to);
        var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from2, nativeEvent, nativeEventTarget);
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = null;
        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (nativeTargetInst === targetInst) {
          var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
          enterEvent.target = toNode;
          enterEvent.relatedTarget = fromNode;
          enter = enterEvent;
        }
        accumulateEnterLeaveTwoPhaseListeners(dispatchQueue2, leave, enter, from2, to);
      }
      function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
      }
      var objectIs = typeof Object.is === "function" ? Object.is : is;
      function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) {
          return true;
        }
        if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
          return false;
        }
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) {
          return false;
        }
        for (var i2 = 0; i2 < keysA.length; i2++) {
          var currentKey = keysA[i2];
          if (!hasOwnProperty2.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
            return false;
          }
        }
        return true;
      }
      function getLeafNode(node2) {
        while (node2 && node2.firstChild) {
          node2 = node2.firstChild;
        }
        return node2;
      }
      function getSiblingNode(node2) {
        while (node2) {
          if (node2.nextSibling) {
            return node2.nextSibling;
          }
          node2 = node2.parentNode;
        }
      }
      function getNodeForCharacterOffset(root2, offset) {
        var node2 = getLeafNode(root2);
        var nodeStart = 0;
        var nodeEnd = 0;
        while (node2) {
          if (node2.nodeType === TEXT_NODE) {
            nodeEnd = nodeStart + node2.textContent.length;
            if (nodeStart <= offset && nodeEnd >= offset) {
              return {
                node: node2,
                offset: offset - nodeStart
              };
            }
            nodeStart = nodeEnd;
          }
          node2 = getLeafNode(getSiblingNode(node2));
        }
      }
      function getOffsets(outerNode) {
        var ownerDocument2 = outerNode.ownerDocument;
        var win2 = ownerDocument2 && ownerDocument2.defaultView || window;
        var selection = win2.getSelection && win2.getSelection();
        if (!selection || selection.rangeCount === 0) {
          return null;
        }
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
      }
      function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length2 = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node2 = outerNode;
        var parentNode = null;
        outer:
          while (true) {
            var next2 = null;
            while (true) {
              if (node2 === anchorNode && (anchorOffset === 0 || node2.nodeType === TEXT_NODE)) {
                start = length2 + anchorOffset;
              }
              if (node2 === focusNode && (focusOffset === 0 || node2.nodeType === TEXT_NODE)) {
                end = length2 + focusOffset;
              }
              if (node2.nodeType === TEXT_NODE) {
                length2 += node2.nodeValue.length;
              }
              if ((next2 = node2.firstChild) === null) {
                break;
              }
              parentNode = node2;
              node2 = next2;
            }
            while (true) {
              if (node2 === outerNode) {
                break outer;
              }
              if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                start = length2;
              }
              if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                end = length2;
              }
              if ((next2 = node2.nextSibling) !== null) {
                break;
              }
              node2 = parentNode;
              parentNode = node2.parentNode;
            }
            node2 = next2;
          }
        if (start === -1 || end === -1) {
          return null;
        }
        return {
          start,
          end
        };
      }
      function setOffsets(node2, offsets) {
        var doc = node2.ownerDocument || document;
        var win2 = doc && doc.defaultView || window;
        if (!win2.getSelection) {
          return;
        }
        var selection = win2.getSelection();
        var length2 = node2.textContent.length;
        var start = Math.min(offsets.start, length2);
        var end = offsets.end === void 0 ? start : Math.min(offsets.end, length2);
        if (!selection.extend && start > end) {
          var temp = end;
          end = start;
          start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node2, start);
        var endMarker = getNodeForCharacterOffset(node2, end);
        if (startMarker && endMarker) {
          if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
            return;
          }
          var range = doc.createRange();
          range.setStart(startMarker.node, startMarker.offset);
          selection.removeAllRanges();
          if (start > end) {
            selection.addRange(range);
            selection.extend(endMarker.node, endMarker.offset);
          } else {
            range.setEnd(endMarker.node, endMarker.offset);
            selection.addRange(range);
          }
        }
      }
      function isTextNode(node2) {
        return node2 && node2.nodeType === TEXT_NODE;
      }
      function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) {
          return false;
        } else if (outerNode === innerNode) {
          return true;
        } else if (isTextNode(outerNode)) {
          return false;
        } else if (isTextNode(innerNode)) {
          return containsNode(outerNode, innerNode.parentNode);
        } else if ("contains" in outerNode) {
          return outerNode.contains(innerNode);
        } else if (outerNode.compareDocumentPosition) {
          return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        } else {
          return false;
        }
      }
      function isInDocument(node2) {
        return node2 && node2.ownerDocument && containsNode(node2.ownerDocument.documentElement, node2);
      }
      function isSameOriginFrame(iframe) {
        try {
          return typeof iframe.contentWindow.location.href === "string";
        } catch (err) {
          return false;
        }
      }
      function getActiveElementDeep() {
        var win2 = window;
        var element = getActiveElement();
        while (element instanceof win2.HTMLIFrameElement) {
          if (isSameOriginFrame(element)) {
            win2 = element.contentWindow;
          } else {
            return element;
          }
          element = getActiveElement(win2.document);
        }
        return element;
      }
      function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
      }
      function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
          focusedElem,
          selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
      }
      function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
          if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
            setSelection(priorFocusedElem, priorSelectionRange);
          }
          var ancestors = [];
          var ancestor = priorFocusedElem;
          while (ancestor = ancestor.parentNode) {
            if (ancestor.nodeType === ELEMENT_NODE) {
              ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
              });
            }
          }
          if (typeof priorFocusedElem.focus === "function") {
            priorFocusedElem.focus();
          }
          for (var i2 = 0; i2 < ancestors.length; i2++) {
            var info2 = ancestors[i2];
            info2.element.scrollLeft = info2.left;
            info2.element.scrollTop = info2.top;
          }
        }
      }
      function getSelection(input) {
        var selection;
        if ("selectionStart" in input) {
          selection = {
            start: input.selectionStart,
            end: input.selectionEnd
          };
        } else {
          selection = getOffsets(input);
        }
        return selection || {
          start: 0,
          end: 0
        };
      }
      function setSelection(input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (end === void 0) {
          end = start;
        }
        if ("selectionStart" in input) {
          input.selectionStart = start;
          input.selectionEnd = Math.min(end, input.value.length);
        } else {
          setOffsets(input, offsets);
        }
      }
      var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
      function registerEvents$3() {
        registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
      }
      var activeElement$1 = null;
      var activeElementInst$1 = null;
      var lastSelection = null;
      var mouseDown = false;
      function getSelection$1(node2) {
        if ("selectionStart" in node2 && hasSelectionCapabilities(node2)) {
          return {
            start: node2.selectionStart,
            end: node2.selectionEnd
          };
        } else {
          var win2 = node2.ownerDocument && node2.ownerDocument.defaultView || window;
          var selection = win2.getSelection();
          return {
            anchorNode: selection.anchorNode,
            anchorOffset: selection.anchorOffset,
            focusNode: selection.focusNode,
            focusOffset: selection.focusOffset
          };
        }
      }
      function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
      }
      function constructSelectEvent(dispatchQueue2, nativeEvent, nativeEventTarget) {
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
          return;
        }
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
          lastSelection = currentSelection;
          var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
            dispatchQueue2.push({
              event,
              listeners
            });
            event.target = activeElement$1;
          }
        }
      }
      function extractEvents$3(dispatchQueue2, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch (domEventName) {
          case "focusin":
            if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
              activeElement$1 = targetNode;
              activeElementInst$1 = targetInst;
              lastSelection = null;
            }
            break;
          case "focusout":
            activeElement$1 = null;
            activeElementInst$1 = null;
            lastSelection = null;
            break;
          case "mousedown":
            mouseDown = true;
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            mouseDown = false;
            constructSelectEvent(dispatchQueue2, nativeEvent, nativeEventTarget);
            break;
          case "selectionchange":
            if (skipSelectionChangeEvent) {
              break;
            }
          case "keydown":
          case "keyup":
            constructSelectEvent(dispatchQueue2, nativeEvent, nativeEventTarget);
        }
      }
      function makePrefixMap(styleProp, eventName) {
        var prefixes2 = {};
        prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes2["Webkit" + styleProp] = "webkit" + eventName;
        prefixes2["Moz" + styleProp] = "moz" + eventName;
        return prefixes2;
      }
      var vendorPrefixes = {
        animationend: makePrefixMap("Animation", "AnimationEnd"),
        animationiteration: makePrefixMap("Animation", "AnimationIteration"),
        animationstart: makePrefixMap("Animation", "AnimationStart"),
        transitionend: makePrefixMap("Transition", "TransitionEnd")
      };
      var prefixedEventNames = {};
      var style2 = {};
      if (canUseDOM) {
        style2 = document.createElement("div").style;
        if (!("AnimationEvent" in window)) {
          delete vendorPrefixes.animationend.animation;
          delete vendorPrefixes.animationiteration.animation;
          delete vendorPrefixes.animationstart.animation;
        }
        if (!("TransitionEvent" in window)) {
          delete vendorPrefixes.transitionend.transition;
        }
      }
      function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) {
          return prefixedEventNames[eventName];
        } else if (!vendorPrefixes[eventName]) {
          return eventName;
        }
        var prefixMap = vendorPrefixes[eventName];
        for (var styleProp in prefixMap) {
          if (prefixMap.hasOwnProperty(styleProp) && styleProp in style2) {
            return prefixedEventNames[eventName] = prefixMap[styleProp];
          }
        }
        return eventName;
      }
      var ANIMATION_END = getVendorPrefixedEventName("animationend");
      var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
      var ANIMATION_START = getVendorPrefixedEventName("animationstart");
      var TRANSITION_END = getVendorPrefixedEventName("transitionend");
      var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
      var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
      function registerSimpleEvent(domEventName, reactName) {
        topLevelEventsToReactNames.set(domEventName, reactName);
        registerTwoPhaseEvent(reactName, [domEventName]);
      }
      function registerSimpleEvents() {
        for (var i2 = 0; i2 < simpleEventPluginEvents.length; i2++) {
          var eventName = simpleEventPluginEvents[i2];
          var domEventName = eventName.toLowerCase();
          var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
          registerSimpleEvent(domEventName, "on" + capitalizedEvent);
        }
        registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
        registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
        registerSimpleEvent(ANIMATION_START, "onAnimationStart");
        registerSimpleEvent("dblclick", "onDoubleClick");
        registerSimpleEvent("focusin", "onFocus");
        registerSimpleEvent("focusout", "onBlur");
        registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
      }
      function extractEvents$4(dispatchQueue2, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName === void 0) {
          return;
        }
        var SyntheticEventCtor = SyntheticEvent;
        var reactEventType = domEventName;
        switch (domEventName) {
          case "keypress":
            if (getEventCharCode(nativeEvent) === 0) {
              return;
            }
          case "keydown":
          case "keyup":
            SyntheticEventCtor = SyntheticKeyboardEvent;
            break;
          case "focusin":
            reactEventType = "focus";
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "focusout":
            reactEventType = "blur";
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "beforeblur":
          case "afterblur":
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "click":
            if (nativeEvent.button === 2) {
              return;
            }
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            SyntheticEventCtor = SyntheticMouseEvent;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            SyntheticEventCtor = SyntheticDragEvent;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            SyntheticEventCtor = SyntheticTouchEvent;
            break;
          case ANIMATION_END:
          case ANIMATION_ITERATION:
          case ANIMATION_START:
            SyntheticEventCtor = SyntheticAnimationEvent;
            break;
          case TRANSITION_END:
            SyntheticEventCtor = SyntheticTransitionEvent;
            break;
          case "scroll":
            SyntheticEventCtor = SyntheticUIEvent;
            break;
          case "wheel":
            SyntheticEventCtor = SyntheticWheelEvent;
            break;
          case "copy":
          case "cut":
          case "paste":
            SyntheticEventCtor = SyntheticClipboardEvent;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            SyntheticEventCtor = SyntheticPointerEvent;
            break;
        }
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        {
          var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
          // nonDelegatedEvents list in DOMPluginEventSystem.
          // Then we can remove this special list.
          // This is a breaking change that can wait until React 18.
          domEventName === "scroll";
          var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
          if (_listeners.length > 0) {
            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
            dispatchQueue2.push({
              event: _event,
              listeners: _listeners
            });
          }
        }
      }
      registerSimpleEvents();
      registerEvents$2();
      registerEvents$1();
      registerEvents$3();
      registerEvents();
      function extractEvents$5(dispatchQueue2, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractEvents$4(dispatchQueue2, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
        if (shouldProcessPolyfillPlugins) {
          extractEvents$2(dispatchQueue2, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents$1(dispatchQueue2, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents$3(dispatchQueue2, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents(dispatchQueue2, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
      }
      var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
      var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
      function executeDispatch(event, listener, currentTarget) {
        var type = event.type || "unknown-event";
        event.currentTarget = currentTarget;
        invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
        event.currentTarget = null;
      }
      function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase) {
          for (var i2 = dispatchListeners.length - 1; i2 >= 0; i2--) {
            var _dispatchListeners$i = dispatchListeners[i2], instance2 = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance2 !== previousInstance && event.isPropagationStopped()) {
              return;
            }
            executeDispatch(event, listener, currentTarget);
            previousInstance = instance2;
          }
        } else {
          for (var _i = 0; _i < dispatchListeners.length; _i++) {
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped()) {
              return;
            }
            executeDispatch(event, _listener, _currentTarget);
            previousInstance = _instance;
          }
        }
      }
      function processDispatchQueue(dispatchQueue2, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        for (var i2 = 0; i2 < dispatchQueue2.length; i2++) {
          var _dispatchQueue$i = dispatchQueue2[i2], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
          processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
        }
        rethrowCaughtError();
      }
      function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var dispatchQueue2 = [];
        extractEvents$5(dispatchQueue2, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        processDispatchQueue(dispatchQueue2, eventSystemFlags);
      }
      function listenToNonDelegatedEvent(domEventName, targetElement) {
        {
          if (!nonDelegatedEvents.has(domEventName)) {
            error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
          }
        }
        var isCapturePhaseListener = false;
        var listenerSet = getEventListenerSet(targetElement);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
          addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
          listenerSet.add(listenerSetKey);
        }
      }
      function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
        {
          if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
            error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
          }
        }
        var eventSystemFlags = 0;
        if (isCapturePhaseListener) {
          eventSystemFlags |= IS_CAPTURE_PHASE;
        }
        addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
      }
      var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
      function listenToAllSupportedEvents(rootContainerElement) {
        if (!rootContainerElement[listeningMarker]) {
          rootContainerElement[listeningMarker] = true;
          allNativeEvents.forEach(function(domEventName) {
            if (domEventName !== "selectionchange") {
              if (!nonDelegatedEvents.has(domEventName)) {
                listenToNativeEvent(domEventName, false, rootContainerElement);
              }
              listenToNativeEvent(domEventName, true, rootContainerElement);
            }
          });
          var ownerDocument2 = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          if (ownerDocument2 !== null) {
            if (!ownerDocument2[listeningMarker]) {
              ownerDocument2[listeningMarker] = true;
              listenToNativeEvent("selectionchange", false, ownerDocument2);
            }
          }
        }
      }
      function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
        var isPassiveListener = void 0;
        if (passiveBrowserEventsSupported) {
          if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
            isPassiveListener = true;
          }
        }
        targetContainer = targetContainer;
        if (isCapturePhaseListener) {
          if (isPassiveListener !== void 0) {
            addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
          } else {
            addEventCaptureListener(targetContainer, domEventName, listener);
          }
        } else {
          if (isPassiveListener !== void 0) {
            addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
          } else {
            addEventBubbleListener(targetContainer, domEventName, listener);
          }
        }
      }
      function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
      }
      function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
          var targetContainerNode = targetContainer;
          if (targetInst !== null) {
            var node2 = targetInst;
            mainLoop:
              while (true) {
                if (node2 === null) {
                  return;
                }
                var nodeTag = node2.tag;
                if (nodeTag === HostRoot || nodeTag === HostPortal) {
                  var container = node2.stateNode.containerInfo;
                  if (isMatchingRootContainer(container, targetContainerNode)) {
                    break;
                  }
                  if (nodeTag === HostPortal) {
                    var grandNode = node2.return;
                    while (grandNode !== null) {
                      var grandTag = grandNode.tag;
                      if (grandTag === HostRoot || grandTag === HostPortal) {
                        var grandContainer = grandNode.stateNode.containerInfo;
                        if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                          return;
                        }
                      }
                      grandNode = grandNode.return;
                    }
                  }
                  while (container !== null) {
                    var parentNode = getClosestInstanceFromNode(container);
                    if (parentNode === null) {
                      return;
                    }
                    var parentTag = parentNode.tag;
                    if (parentTag === HostComponent || parentTag === HostText) {
                      node2 = ancestorInst = parentNode;
                      continue mainLoop;
                    }
                    container = container.parentNode;
                  }
                }
                node2 = node2.return;
              }
          }
        }
        batchedUpdates(function() {
          return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
      }
      function createDispatchListener(instance2, listener, currentTarget) {
        return {
          instance: instance2,
          listener,
          currentTarget
        };
      }
      function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
        var captureName = reactName !== null ? reactName + "Capture" : null;
        var reactEventName = inCapturePhase ? captureName : reactName;
        var listeners = [];
        var instance2 = targetFiber;
        var lastHostComponent = null;
        while (instance2 !== null) {
          var _instance2 = instance2, stateNode = _instance2.stateNode, tag = _instance2.tag;
          if (tag === HostComponent && stateNode !== null) {
            lastHostComponent = stateNode;
            if (reactEventName !== null) {
              var listener = getListener(instance2, reactEventName);
              if (listener != null) {
                listeners.push(createDispatchListener(instance2, listener, lastHostComponent));
              }
            }
          }
          if (accumulateTargetOnly) {
            break;
          }
          instance2 = instance2.return;
        }
        return listeners;
      }
      function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + "Capture";
        var listeners = [];
        var instance2 = targetFiber;
        while (instance2 !== null) {
          var _instance3 = instance2, stateNode = _instance3.stateNode, tag = _instance3.tag;
          if (tag === HostComponent && stateNode !== null) {
            var currentTarget = stateNode;
            var captureListener = getListener(instance2, captureName);
            if (captureListener != null) {
              listeners.unshift(createDispatchListener(instance2, captureListener, currentTarget));
            }
            var bubbleListener = getListener(instance2, reactName);
            if (bubbleListener != null) {
              listeners.push(createDispatchListener(instance2, bubbleListener, currentTarget));
            }
          }
          instance2 = instance2.return;
        }
        return listeners;
      }
      function getParent2(inst) {
        if (inst === null) {
          return null;
        }
        do {
          inst = inst.return;
        } while (inst && inst.tag !== HostComponent);
        if (inst) {
          return inst;
        }
        return null;
      }
      function getLowestCommonAncestor(instA, instB) {
        var nodeA = instA;
        var nodeB = instB;
        var depthA = 0;
        for (var tempA = nodeA; tempA; tempA = getParent2(tempA)) {
          depthA++;
        }
        var depthB = 0;
        for (var tempB = nodeB; tempB; tempB = getParent2(tempB)) {
          depthB++;
        }
        while (depthA - depthB > 0) {
          nodeA = getParent2(nodeA);
          depthA--;
        }
        while (depthB - depthA > 0) {
          nodeB = getParent2(nodeB);
          depthB--;
        }
        var depth = depthA;
        while (depth--) {
          if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
            return nodeA;
          }
          nodeA = getParent2(nodeA);
          nodeB = getParent2(nodeB);
        }
        return null;
      }
      function accumulateEnterLeaveListenersForEvent(dispatchQueue2, event, target, common2, inCapturePhase) {
        var registrationName = event._reactName;
        var listeners = [];
        var instance2 = target;
        while (instance2 !== null) {
          if (instance2 === common2) {
            break;
          }
          var _instance4 = instance2, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
          if (alternate !== null && alternate === common2) {
            break;
          }
          if (tag === HostComponent && stateNode !== null) {
            var currentTarget = stateNode;
            if (inCapturePhase) {
              var captureListener = getListener(instance2, registrationName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance2, captureListener, currentTarget));
              }
            } else if (!inCapturePhase) {
              var bubbleListener = getListener(instance2, registrationName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance2, bubbleListener, currentTarget));
              }
            }
          }
          instance2 = instance2.return;
        }
        if (listeners.length !== 0) {
          dispatchQueue2.push({
            event,
            listeners
          });
        }
      }
      function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue2, leaveEvent, enterEvent, from2, to) {
        var common2 = from2 && to ? getLowestCommonAncestor(from2, to) : null;
        if (from2 !== null) {
          accumulateEnterLeaveListenersForEvent(dispatchQueue2, leaveEvent, from2, common2, false);
        }
        if (to !== null && enterEvent !== null) {
          accumulateEnterLeaveListenersForEvent(dispatchQueue2, enterEvent, to, common2, true);
        }
      }
      function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? "capture" : "bubble");
      }
      var didWarnInvalidHydration = false;
      var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
      var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
      var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
      var AUTOFOCUS = "autoFocus";
      var CHILDREN = "children";
      var STYLE = "style";
      var HTML$1 = "__html";
      var warnedUnknownTags;
      var validatePropertiesInDevelopment;
      var warnForPropDifference;
      var warnForExtraAttributes;
      var warnForInvalidEventListener;
      var canDiffStyleForHydrationWarning;
      var normalizeHTML;
      {
        warnedUnknownTags = {
          // There are working polyfills for <dialog>. Let people use it.
          dialog: true,
          // Electron ships a custom <webview> tag to display external web content in
          // an isolated frame and process.
          // This tag is not present in non Electron environments such as JSDom which
          // is often used for testing purposes.
          // @see https://electronjs.org/docs/api/webview-tag
          webview: true
        };
        validatePropertiesInDevelopment = function(type, props) {
          validateProperties(type, props);
          validateProperties$1(type, props);
          validateProperties$2(type, props, {
            registrationNameDependencies,
            possibleRegistrationNames
          });
        };
        canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
        warnForPropDifference = function(propName, serverValue, clientValue) {
          if (didWarnInvalidHydration) {
            return;
          }
          var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
          var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
          if (normalizedServerValue === normalizedClientValue) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
        };
        warnForExtraAttributes = function(attributeNames) {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          var names = [];
          attributeNames.forEach(function(name) {
            names.push(name);
          });
          error("Extra attributes from the server: %s", names);
        };
        warnForInvalidEventListener = function(registrationName, listener) {
          if (listener === false) {
            error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
          } else {
            error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
          }
        };
        normalizeHTML = function(parent, html) {
          var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
          testElement.innerHTML = html;
          return testElement.innerHTML;
        };
      }
      var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
      var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
      function normalizeMarkupForTextOrAttribute(markup) {
        {
          checkHtmlStringCoercion(markup);
        }
        var markupString = typeof markup === "string" ? markup : "" + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
      }
      function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) {
          return;
        }
        if (shouldWarnDev) {
          {
            if (!didWarnInvalidHydration) {
              didWarnInvalidHydration = true;
              error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            }
          }
        }
        if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
          throw new Error("Text content does not match server-rendered HTML.");
        }
      }
      function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
      }
      function noop2() {
      }
      function trapClickOnNonInteractiveElement(node2) {
        node2.onclick = noop2;
      }
      function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for (var propKey in nextProps) {
          if (!nextProps.hasOwnProperty(propKey)) {
            continue;
          }
          var nextProp = nextProps[propKey];
          if (propKey === STYLE) {
            {
              if (nextProp) {
                Object.freeze(nextProp);
              }
            }
            setValueForStyles(domElement, nextProp);
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
            if (nextHtml != null) {
              setInnerHTML(domElement, nextHtml);
            }
          } else if (propKey === CHILDREN) {
            if (typeof nextProp === "string") {
              var canSetTextContent = tag !== "textarea" || nextProp !== "";
              if (canSetTextContent) {
                setTextContent(domElement, nextProp);
              }
            } else if (typeof nextProp === "number") {
              setTextContent(domElement, "" + nextProp);
            }
          } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (propKey === AUTOFOCUS)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
          } else if (nextProp != null) {
            setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
          }
        }
      }
      function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        for (var i2 = 0; i2 < updatePayload.length; i2 += 2) {
          var propKey = updatePayload[i2];
          var propValue = updatePayload[i2 + 1];
          if (propKey === STYLE) {
            setValueForStyles(domElement, propValue);
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            setInnerHTML(domElement, propValue);
          } else if (propKey === CHILDREN) {
            setTextContent(domElement, propValue);
          } else {
            setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
          }
        }
      }
      function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag;
        var ownerDocument2 = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE) {
          namespaceURI = getIntrinsicNamespace(type);
        }
        if (namespaceURI === HTML_NAMESPACE) {
          {
            isCustomComponentTag = isCustomComponent(type, props);
            if (!isCustomComponentTag && type !== type.toLowerCase()) {
              error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
            }
          }
          if (type === "script") {
            var div = ownerDocument2.createElement("div");
            div.innerHTML = "<script><\/script>";
            var firstChild = div.firstChild;
            domElement = div.removeChild(firstChild);
          } else if (typeof props.is === "string") {
            domElement = ownerDocument2.createElement(type, {
              is: props.is
            });
          } else {
            domElement = ownerDocument2.createElement(type);
            if (type === "select") {
              var node2 = domElement;
              if (props.multiple) {
                node2.multiple = true;
              } else if (props.size) {
                node2.size = props.size;
              }
            }
          }
        } else {
          domElement = ownerDocument2.createElementNS(namespaceURI, type);
        }
        {
          if (namespaceURI === HTML_NAMESPACE) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty2.call(warnedUnknownTags, type)) {
              warnedUnknownTags[type] = true;
              error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
            }
          }
        }
        return domElement;
      }
      function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
      }
      function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        {
          validatePropertiesInDevelopment(tag, rawProps);
        }
        var props;
        switch (tag) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement);
            listenToNonDelegatedEvent("close", domElement);
            props = rawProps;
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement);
            props = rawProps;
            break;
          case "video":
          case "audio":
            for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
              listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
            }
            props = rawProps;
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement);
            props = rawProps;
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            props = rawProps;
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            props = rawProps;
            break;
          case "input":
            initWrapperState(domElement, rawProps);
            props = getHostProps(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "option":
            validateProps(domElement, rawProps);
            props = rawProps;
            break;
          case "select":
            initWrapperState$1(domElement, rawProps);
            props = getHostProps$1(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "textarea":
            initWrapperState$2(domElement, rawProps);
            props = getHostProps$2(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          default:
            props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch (tag) {
          case "input":
            track(domElement);
            postMountWrapper(domElement, rawProps, false);
            break;
          case "textarea":
            track(domElement);
            postMountWrapper$3(domElement);
            break;
          case "option":
            postMountWrapper$1(domElement, rawProps);
            break;
          case "select":
            postMountWrapper$2(domElement, rawProps);
            break;
          default:
            if (typeof props.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
      }
      function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        {
          validatePropertiesInDevelopment(tag, nextRawProps);
        }
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch (tag) {
          case "input":
            lastProps = getHostProps(domElement, lastRawProps);
            nextProps = getHostProps(domElement, nextRawProps);
            updatePayload = [];
            break;
          case "select":
            lastProps = getHostProps$1(domElement, lastRawProps);
            nextProps = getHostProps$1(domElement, nextRawProps);
            updatePayload = [];
            break;
          case "textarea":
            lastProps = getHostProps$2(domElement, lastRawProps);
            nextProps = getHostProps$2(domElement, nextRawProps);
            updatePayload = [];
            break;
          default:
            lastProps = lastRawProps;
            nextProps = nextRawProps;
            if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
        assertValidProps(tag, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for (propKey in lastProps) {
          if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
            continue;
          }
          if (propKey === STYLE) {
            var lastStyle = lastProps[propKey];
            for (styleName in lastStyle) {
              if (lastStyle.hasOwnProperty(styleName)) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }
                styleUpdates[styleName] = "";
              }
            }
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
            ;
          else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (propKey === AUTOFOCUS)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (!updatePayload) {
              updatePayload = [];
            }
          } else {
            (updatePayload = updatePayload || []).push(propKey, null);
          }
        }
        for (propKey in nextProps) {
          var nextProp = nextProps[propKey];
          var lastProp = lastProps != null ? lastProps[propKey] : void 0;
          if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
            continue;
          }
          if (propKey === STYLE) {
            {
              if (nextProp) {
                Object.freeze(nextProp);
              }
            }
            if (lastProp) {
              for (styleName in lastProp) {
                if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
              for (styleName in nextProp) {
                if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = nextProp[styleName];
                }
              }
            } else {
              if (!styleUpdates) {
                if (!updatePayload) {
                  updatePayload = [];
                }
                updatePayload.push(propKey, styleUpdates);
              }
              styleUpdates = nextProp;
            }
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
            var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
            if (nextHtml != null) {
              if (lastHtml !== nextHtml) {
                (updatePayload = updatePayload || []).push(propKey, nextHtml);
              }
            }
          } else if (propKey === CHILDREN) {
            if (typeof nextProp === "string" || typeof nextProp === "number") {
              (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
            }
          } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
            if (!updatePayload && lastProp !== nextProp) {
              updatePayload = [];
            }
          } else {
            (updatePayload = updatePayload || []).push(propKey, nextProp);
          }
        }
        if (styleUpdates) {
          {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
          }
          (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
      }
      function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
          updateChecked(domElement, nextRawProps);
        }
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
        switch (tag) {
          case "input":
            updateWrapper(domElement, nextRawProps);
            break;
          case "textarea":
            updateWrapper$1(domElement, nextRawProps);
            break;
          case "select":
            postUpdateWrapper(domElement, nextRawProps);
            break;
        }
      }
      function getPossibleStandardName(propName) {
        {
          var lowerCasedName = propName.toLowerCase();
          if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            return null;
          }
          return possibleStandardNames[lowerCasedName] || null;
        }
      }
      function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
        var isCustomComponentTag;
        var extraAttributeNames;
        {
          isCustomComponentTag = isCustomComponent(tag, rawProps);
          validatePropertiesInDevelopment(tag, rawProps);
        }
        switch (tag) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement);
            listenToNonDelegatedEvent("close", domElement);
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "video":
          case "audio":
            for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
              listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
            }
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement);
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            break;
          case "input":
            initWrapperState(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "option":
            validateProps(domElement, rawProps);
            break;
          case "select":
            initWrapperState$1(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "textarea":
            initWrapperState$2(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
        }
        assertValidProps(tag, rawProps);
        {
          extraAttributeNames = /* @__PURE__ */ new Set();
          var attributes = domElement.attributes;
          for (var _i = 0; _i < attributes.length; _i++) {
            var name = attributes[_i].name.toLowerCase();
            switch (name) {
              case "value":
                break;
              case "checked":
                break;
              case "selected":
                break;
              default:
                extraAttributeNames.add(attributes[_i].name);
            }
          }
        }
        var updatePayload = null;
        for (var propKey in rawProps) {
          if (!rawProps.hasOwnProperty(propKey)) {
            continue;
          }
          var nextProp = rawProps[propKey];
          if (propKey === CHILDREN) {
            if (typeof nextProp === "string") {
              if (domElement.textContent !== nextProp) {
                if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                }
                updatePayload = [CHILDREN, nextProp];
              }
            } else if (typeof nextProp === "number") {
              if (domElement.textContent !== "" + nextProp) {
                if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                }
                updatePayload = [CHILDREN, "" + nextProp];
              }
            }
          } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
          } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
          typeof isCustomComponentTag === "boolean") {
            var serverValue = void 0;
            var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
            if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
            // TODO: Only ignore them on controlled tags.
            propKey === "value" || propKey === "checked" || propKey === "selected")
              ;
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var serverHTML = domElement.innerHTML;
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                var expectedHTML = normalizeHTML(domElement, nextHtml);
                if (expectedHTML !== serverHTML) {
                  warnForPropDifference(propKey, serverHTML, expectedHTML);
                }
              }
            } else if (propKey === STYLE) {
              extraAttributeNames.delete(propKey);
              if (canDiffStyleForHydrationWarning) {
                var expectedStyle = createDangerousStringForStyles(nextProp);
                serverValue = domElement.getAttribute("style");
                if (expectedStyle !== serverValue) {
                  warnForPropDifference(propKey, serverValue, expectedStyle);
                }
              }
            } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
              extraAttributeNames.delete(propKey.toLowerCase());
              serverValue = getValueForAttribute(domElement, propKey, nextProp);
              if (nextProp !== serverValue) {
                warnForPropDifference(propKey, serverValue, nextProp);
              }
            } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
              var isMismatchDueToBadCasing = false;
              if (propertyInfo !== null) {
                extraAttributeNames.delete(propertyInfo.attributeName);
                serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
              } else {
                var ownNamespace = parentNamespace;
                if (ownNamespace === HTML_NAMESPACE) {
                  ownNamespace = getIntrinsicNamespace(tag);
                }
                if (ownNamespace === HTML_NAMESPACE) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                } else {
                  var standardName = getPossibleStandardName(propKey);
                  if (standardName !== null && standardName !== propKey) {
                    isMismatchDueToBadCasing = true;
                    extraAttributeNames.delete(standardName);
                  }
                  extraAttributeNames.delete(propKey);
                }
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
              }
              var dontWarnCustomElement = enableCustomElementPropertySupport;
              if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                warnForPropDifference(propKey, serverValue, nextProp);
              }
            }
          }
        }
        {
          if (shouldWarnDev) {
            if (
              // $FlowFixMe - Should be inferred as not undefined.
              extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
            ) {
              warnForExtraAttributes(extraAttributeNames);
            }
          }
        }
        switch (tag) {
          case "input":
            track(domElement);
            postMountWrapper(domElement, rawProps, true);
            break;
          case "textarea":
            track(domElement);
            postMountWrapper$3(domElement);
            break;
          case "select":
          case "option":
            break;
          default:
            if (typeof rawProps.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
        return updatePayload;
      }
      function diffHydratedText(textNode, text, isConcurrentMode) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
      }
      function warnForDeletedHydratableElement(parentNode, child) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
        }
      }
      function warnForDeletedHydratableText(parentNode, child) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedElement(parentNode, tag, props) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedText(parentNode, text) {
        {
          if (text === "") {
            return;
          }
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
        }
      }
      function restoreControlledState$3(domElement, tag, props) {
        switch (tag) {
          case "input":
            restoreControlledState(domElement, props);
            return;
          case "textarea":
            restoreControlledState$2(domElement, props);
            return;
          case "select":
            restoreControlledState$1(domElement, props);
            return;
        }
      }
      var validateDOMNesting = function() {
      };
      var updatedAncestorInfo = function() {
      };
      {
        var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
        var inScopeTags = [
          "applet",
          "caption",
          "html",
          "table",
          "td",
          "th",
          "marquee",
          "object",
          "template",
          // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
          // TODO: Distinguish by namespace here -- for <title>, including it here
          // errs on the side of fewer warnings
          "foreignObject",
          "desc",
          "title"
        ];
        var buttonScopeTags = inScopeTags.concat(["button"]);
        var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
        var emptyAncestorInfo = {
          current: null,
          formTag: null,
          aTagInScope: null,
          buttonTagInScope: null,
          nobrTagInScope: null,
          pTagInButtonScope: null,
          listItemTagAutoclosing: null,
          dlItemTagAutoclosing: null
        };
        updatedAncestorInfo = function(oldInfo, tag) {
          var ancestorInfo = assign2({}, oldInfo || emptyAncestorInfo);
          var info2 = {
            tag
          };
          if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
          }
          if (buttonScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.pTagInButtonScope = null;
          }
          if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
          }
          ancestorInfo.current = info2;
          if (tag === "form") {
            ancestorInfo.formTag = info2;
          }
          if (tag === "a") {
            ancestorInfo.aTagInScope = info2;
          }
          if (tag === "button") {
            ancestorInfo.buttonTagInScope = info2;
          }
          if (tag === "nobr") {
            ancestorInfo.nobrTagInScope = info2;
          }
          if (tag === "p") {
            ancestorInfo.pTagInButtonScope = info2;
          }
          if (tag === "li") {
            ancestorInfo.listItemTagAutoclosing = info2;
          }
          if (tag === "dd" || tag === "dt") {
            ancestorInfo.dlItemTagAutoclosing = info2;
          }
          return ancestorInfo;
        };
        var isTagValidWithParent = function(tag, parentTag) {
          switch (parentTag) {
            case "select":
              return tag === "option" || tag === "optgroup" || tag === "#text";
            case "optgroup":
              return tag === "option" || tag === "#text";
            case "option":
              return tag === "#text";
            case "tr":
              return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
            case "tbody":
            case "thead":
            case "tfoot":
              return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
            case "colgroup":
              return tag === "col" || tag === "template";
            case "table":
              return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
            case "head":
              return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
            case "html":
              return tag === "head" || tag === "body" || tag === "frameset";
            case "frameset":
              return tag === "frame";
            case "#document":
              return tag === "html";
          }
          switch (tag) {
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
            case "rp":
            case "rt":
              return impliedEndTags.indexOf(parentTag) === -1;
            case "body":
            case "caption":
            case "col":
            case "colgroup":
            case "frameset":
            case "frame":
            case "head":
            case "html":
            case "tbody":
            case "td":
            case "tfoot":
            case "th":
            case "thead":
            case "tr":
              return parentTag == null;
          }
          return true;
        };
        var findInvalidAncestorForTag = function(tag, ancestorInfo) {
          switch (tag) {
            case "address":
            case "article":
            case "aside":
            case "blockquote":
            case "center":
            case "details":
            case "dialog":
            case "dir":
            case "div":
            case "dl":
            case "fieldset":
            case "figcaption":
            case "figure":
            case "footer":
            case "header":
            case "hgroup":
            case "main":
            case "menu":
            case "nav":
            case "ol":
            case "p":
            case "section":
            case "summary":
            case "ul":
            case "pre":
            case "listing":
            case "table":
            case "hr":
            case "xmp":
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return ancestorInfo.pTagInButtonScope;
            case "form":
              return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case "li":
              return ancestorInfo.listItemTagAutoclosing;
            case "dd":
            case "dt":
              return ancestorInfo.dlItemTagAutoclosing;
            case "button":
              return ancestorInfo.buttonTagInScope;
            case "a":
              return ancestorInfo.aTagInScope;
            case "nobr":
              return ancestorInfo.nobrTagInScope;
          }
          return null;
        };
        var didWarn$1 = {};
        validateDOMNesting = function(childTag, childText, ancestorInfo) {
          ancestorInfo = ancestorInfo || emptyAncestorInfo;
          var parentInfo = ancestorInfo.current;
          var parentTag = parentInfo && parentInfo.tag;
          if (childText != null) {
            if (childTag != null) {
              error("validateDOMNesting: when childText is passed, childTag should be null");
            }
            childTag = "#text";
          }
          var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
          var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
          var invalidParentOrAncestor = invalidParent || invalidAncestor;
          if (!invalidParentOrAncestor) {
            return;
          }
          var ancestorTag = invalidParentOrAncestor.tag;
          var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
          if (didWarn$1[warnKey]) {
            return;
          }
          didWarn$1[warnKey] = true;
          var tagDisplayName = childTag;
          var whitespaceInfo = "";
          if (childTag === "#text") {
            if (/\S/.test(childText)) {
              tagDisplayName = "Text nodes";
            } else {
              tagDisplayName = "Whitespace text nodes";
              whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
            }
          } else {
            tagDisplayName = "<" + childTag + ">";
          }
          if (invalidParent) {
            var info2 = "";
            if (ancestorTag === "table" && childTag === "tr") {
              info2 += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
            }
            error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info2);
          } else {
            error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
          }
        };
      }
      var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
      var SUSPENSE_START_DATA = "$";
      var SUSPENSE_END_DATA = "/$";
      var SUSPENSE_PENDING_START_DATA = "$?";
      var SUSPENSE_FALLBACK_START_DATA = "$!";
      var STYLE$1 = "style";
      var eventsEnabled = null;
      var selectionInformation = null;
      function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch (nodeType) {
          case DOCUMENT_NODE:
          case DOCUMENT_FRAGMENT_NODE: {
            type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
            var root2 = rootContainerInstance.documentElement;
            namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
            break;
          }
          default: {
            var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
            var ownNamespace = container.namespaceURI || null;
            type = container.tagName;
            namespace = getChildNamespace(ownNamespace, type);
            break;
          }
        }
        {
          var validatedTag = type.toLowerCase();
          var ancestorInfo = updatedAncestorInfo(null, validatedTag);
          return {
            namespace,
            ancestorInfo
          };
        }
      }
      function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        {
          var parentHostContextDev = parentHostContext;
          var namespace = getChildNamespace(parentHostContextDev.namespace, type);
          var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
          return {
            namespace,
            ancestorInfo
          };
        }
      }
      function getPublicInstance(instance2) {
        return instance2;
      }
      function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        var activeInstance = null;
        setEnabled(false);
        return activeInstance;
      }
      function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        setEnabled(eventsEnabled);
        eventsEnabled = null;
        selectionInformation = null;
      }
      function createInstance2(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          validateDOMNesting(type, null, hostContextDev.ancestorInfo);
          if (typeof props.children === "string" || typeof props.children === "number") {
            var string = "" + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
          }
          parentNamespace = hostContextDev.namespace;
        }
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
      }
      function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        switch (type) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            return !!props.autoFocus;
          case "img":
            return true;
          default:
            return false;
        }
      }
      function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        {
          var hostContextDev = hostContext;
          if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
            var string = "" + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
          }
        }
        return diffProperties(domElement, type, oldProps, newProps);
      }
      function shouldSetTextContent(type, props) {
        return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
      }
      function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        {
          var hostContextDev = hostContext;
          validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        }
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
      }
      function getCurrentEventPriority() {
        var currentEvent = window.event;
        if (currentEvent === void 0) {
          return DefaultEventPriority;
        }
        return getEventPriority(currentEvent.type);
      }
      var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
      var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
      var noTimeout = -1;
      var localPromise = typeof Promise === "function" ? Promise : void 0;
      var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
        return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
      } : scheduleTimeout;
      function handleErrorInNextTick(error2) {
        setTimeout(function() {
          throw error2;
        });
      }
      function commitMount(domElement, type, newProps, internalInstanceHandle) {
        switch (type) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            if (newProps.autoFocus) {
              domElement.focus();
            }
            return;
          case "img": {
            if (newProps.src) {
              domElement.src = newProps.src;
            }
            return;
          }
        }
      }
      function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        updateProperties(domElement, updatePayload, type, oldProps, newProps);
        updateFiberProps(domElement, newProps);
      }
      function resetTextContent(domElement) {
        setTextContent(domElement, "");
      }
      function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
      }
      function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function appendChildToContainer(container, child) {
        var parentNode;
        if (container.nodeType === COMMENT_NODE) {
          parentNode = container.parentNode;
          parentNode.insertBefore(child, container);
        } else {
          parentNode = container;
          parentNode.appendChild(child);
        }
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
          trapClickOnNonInteractiveElement(parentNode);
        }
      }
      function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
      }
      function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) {
          container.parentNode.insertBefore(child, beforeChild);
        } else {
          container.insertBefore(child, beforeChild);
        }
      }
      function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
      }
      function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) {
          container.parentNode.removeChild(child);
        } else {
          container.removeChild(child);
        }
      }
      function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node2 = suspenseInstance;
        var depth = 0;
        do {
          var nextNode = node2.nextSibling;
          parentInstance.removeChild(node2);
          if (nextNode && nextNode.nodeType === COMMENT_NODE) {
            var data2 = nextNode.data;
            if (data2 === SUSPENSE_END_DATA) {
              if (depth === 0) {
                parentInstance.removeChild(nextNode);
                retryIfBlockedOn(suspenseInstance);
                return;
              } else {
                depth--;
              }
            } else if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_PENDING_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA) {
              depth++;
            }
          }
          node2 = nextNode;
        } while (node2);
        retryIfBlockedOn(suspenseInstance);
      }
      function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
        if (container.nodeType === COMMENT_NODE) {
          clearSuspenseBoundary(container.parentNode, suspenseInstance);
        } else if (container.nodeType === ELEMENT_NODE) {
          clearSuspenseBoundary(container, suspenseInstance);
        }
        retryIfBlockedOn(container);
      }
      function hideInstance(instance2) {
        instance2 = instance2;
        var style3 = instance2.style;
        if (typeof style3.setProperty === "function") {
          style3.setProperty("display", "none", "important");
        } else {
          style3.display = "none";
        }
      }
      function hideTextInstance(textInstance) {
        textInstance.nodeValue = "";
      }
      function unhideInstance(instance2, props) {
        instance2 = instance2;
        var styleProp = props[STYLE$1];
        var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
        instance2.style.display = dangerousStyleValue("display", display);
      }
      function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
      }
      function clearContainer(container) {
        if (container.nodeType === ELEMENT_NODE) {
          container.textContent = "";
        } else if (container.nodeType === DOCUMENT_NODE) {
          if (container.documentElement) {
            container.removeChild(container.documentElement);
          }
        }
      }
      function canHydrateInstance(instance2, type, props) {
        if (instance2.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance2.nodeName.toLowerCase()) {
          return null;
        }
        return instance2;
      }
      function canHydrateTextInstance(instance2, text) {
        if (text === "" || instance2.nodeType !== TEXT_NODE) {
          return null;
        }
        return instance2;
      }
      function canHydrateSuspenseInstance(instance2) {
        if (instance2.nodeType !== COMMENT_NODE) {
          return null;
        }
        return instance2;
      }
      function isSuspenseInstancePending(instance2) {
        return instance2.data === SUSPENSE_PENDING_START_DATA;
      }
      function isSuspenseInstanceFallback(instance2) {
        return instance2.data === SUSPENSE_FALLBACK_START_DATA;
      }
      function getSuspenseInstanceFallbackErrorDetails(instance2) {
        var dataset = instance2.nextSibling && instance2.nextSibling.dataset;
        var digest, message, stack;
        if (dataset) {
          digest = dataset.dgst;
          {
            message = dataset.msg;
            stack = dataset.stck;
          }
        }
        {
          return {
            message,
            digest,
            stack
          };
        }
      }
      function registerSuspenseInstanceRetry(instance2, callback) {
        instance2._reactRetry = callback;
      }
      function getNextHydratable(node2) {
        for (; node2 != null; node2 = node2.nextSibling) {
          var nodeType = node2.nodeType;
          if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
            break;
          }
          if (nodeType === COMMENT_NODE) {
            var nodeData = node2.data;
            if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
              break;
            }
            if (nodeData === SUSPENSE_END_DATA) {
              return null;
            }
          }
        }
        return node2;
      }
      function getNextHydratableSibling(instance2) {
        return getNextHydratable(instance2.nextSibling);
      }
      function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
      }
      function getFirstHydratableChildWithinContainer(parentContainer) {
        return getNextHydratable(parentContainer.firstChild);
      }
      function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
        return getNextHydratable(parentInstance.nextSibling);
      }
      function hydrateInstance(instance2, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, instance2);
        updateFiberProps(instance2, props);
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          parentNamespace = hostContextDev.namespace;
        }
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedProperties(instance2, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
      }
      function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        return diffHydratedText(textInstance, text);
      }
      function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, suspenseInstance);
      }
      function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node2 = suspenseInstance.nextSibling;
        var depth = 0;
        while (node2) {
          if (node2.nodeType === COMMENT_NODE) {
            var data2 = node2.data;
            if (data2 === SUSPENSE_END_DATA) {
              if (depth === 0) {
                return getNextHydratableSibling(node2);
              } else {
                depth--;
              }
            } else if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA || data2 === SUSPENSE_PENDING_START_DATA) {
              depth++;
            }
          }
          node2 = node2.nextSibling;
        }
        return null;
      }
      function getParentSuspenseInstance(targetInstance) {
        var node2 = targetInstance.previousSibling;
        var depth = 0;
        while (node2) {
          if (node2.nodeType === COMMENT_NODE) {
            var data2 = node2.data;
            if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA || data2 === SUSPENSE_PENDING_START_DATA) {
              if (depth === 0) {
                return node2;
              } else {
                depth--;
              }
            } else if (data2 === SUSPENSE_END_DATA) {
              depth++;
            }
          }
          node2 = node2.previousSibling;
        }
        return null;
      }
      function commitHydratedContainer(container) {
        retryIfBlockedOn(container);
      }
      function commitHydratedSuspenseInstance(suspenseInstance) {
        retryIfBlockedOn(suspenseInstance);
      }
      function shouldDeleteUnhydratedTailInstances(parentType) {
        return parentType !== "head" && parentType !== "body";
      }
      function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
        var shouldWarnDev = true;
        checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
      }
      function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          var shouldWarnDev = true;
          checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
      }
      function didNotHydrateInstanceWithinContainer(parentContainer, instance2) {
        {
          if (instance2.nodeType === ELEMENT_NODE) {
            warnForDeletedHydratableElement(parentContainer, instance2);
          } else if (instance2.nodeType === COMMENT_NODE)
            ;
          else {
            warnForDeletedHydratableText(parentContainer, instance2);
          }
        }
      }
      function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance2) {
        {
          var parentNode = parentInstance.parentNode;
          if (parentNode !== null) {
            if (instance2.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentNode, instance2);
            } else if (instance2.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentNode, instance2);
            }
          }
        }
      }
      function didNotHydrateInstance(parentType, parentProps, parentInstance, instance2, isConcurrentMode) {
        {
          if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance2.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentInstance, instance2);
            } else if (instance2.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentInstance, instance2);
            }
          }
        }
      }
      function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
        {
          warnForInsertedHydratedElement(parentContainer, type);
        }
      }
      function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
        {
          warnForInsertedHydratedText(parentContainer, text);
        }
      }
      function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
        {
          var parentNode = parentInstance.parentNode;
          if (parentNode !== null)
            warnForInsertedHydratedElement(parentNode, type);
        }
      }
      function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
        {
          var parentNode = parentInstance.parentNode;
          if (parentNode !== null)
            warnForInsertedHydratedText(parentNode, text);
        }
      }
      function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
        {
          if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedElement(parentInstance, type);
          }
        }
      }
      function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
        {
          if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedText(parentInstance, text);
          }
        }
      }
      function errorHydratingContainer(parentContainer) {
        {
          error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
        }
      }
      function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
      }
      var randomKey = Math.random().toString(36).slice(2);
      var internalInstanceKey = "__reactFiber$" + randomKey;
      var internalPropsKey = "__reactProps$" + randomKey;
      var internalContainerInstanceKey = "__reactContainer$" + randomKey;
      var internalEventHandlersKey = "__reactEvents$" + randomKey;
      var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
      var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
      function detachDeletedInstance(node2) {
        delete node2[internalInstanceKey];
        delete node2[internalPropsKey];
        delete node2[internalEventHandlersKey];
        delete node2[internalEventHandlerListenersKey];
        delete node2[internalEventHandlesSetKey];
      }
      function precacheFiberNode(hostInst, node2) {
        node2[internalInstanceKey] = hostInst;
      }
      function markContainerAsRoot(hostRoot, node2) {
        node2[internalContainerInstanceKey] = hostRoot;
      }
      function unmarkContainerAsRoot(node2) {
        node2[internalContainerInstanceKey] = null;
      }
      function isContainerMarkedAsRoot(node2) {
        return !!node2[internalContainerInstanceKey];
      }
      function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) {
          return targetInst;
        }
        var parentNode = targetNode.parentNode;
        while (parentNode) {
          targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
          if (targetInst) {
            var alternate = targetInst.alternate;
            if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
              var suspenseInstance = getParentSuspenseInstance(targetNode);
              while (suspenseInstance !== null) {
                var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                if (targetSuspenseInst) {
                  return targetSuspenseInst;
                }
                suspenseInstance = getParentSuspenseInstance(suspenseInstance);
              }
            }
            return targetInst;
          }
          targetNode = parentNode;
          parentNode = targetNode.parentNode;
        }
        return null;
      }
      function getInstanceFromNode(node2) {
        var inst = node2[internalInstanceKey] || node2[internalContainerInstanceKey];
        if (inst) {
          if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
            return inst;
          } else {
            return null;
          }
        }
        return null;
      }
      function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) {
          return inst.stateNode;
        }
        throw new Error("getNodeFromInstance: Invalid argument.");
      }
      function getFiberCurrentPropsFromNode(node2) {
        return node2[internalPropsKey] || null;
      }
      function updateFiberProps(node2, props) {
        node2[internalPropsKey] = props;
      }
      function getEventListenerSet(node2) {
        var elementListenerSet = node2[internalEventHandlersKey];
        if (elementListenerSet === void 0) {
          elementListenerSet = node2[internalEventHandlersKey] = /* @__PURE__ */ new Set();
        }
        return elementListenerSet;
      }
      var loggedTypeFailures2 = {};
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var stack = describeUnknownElementTypeFrameInDEV(element.type);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes2(typeSpecs, values2, location2, componentName, element) {
        {
          var has3 = Function.call.bind(hasOwnProperty2);
          for (var typeSpecName in typeSpecs) {
            if (has3(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures2)) {
                loggedTypeFailures2[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location2, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      var valueStack = [];
      var fiberStack;
      {
        fiberStack = [];
      }
      var index2 = -1;
      function createCursor(defaultValue) {
        return {
          current: defaultValue
        };
      }
      function pop(cursor2, fiber) {
        if (index2 < 0) {
          {
            error("Unexpected pop.");
          }
          return;
        }
        {
          if (fiber !== fiberStack[index2]) {
            error("Unexpected Fiber popped.");
          }
        }
        cursor2.current = valueStack[index2];
        valueStack[index2] = null;
        {
          fiberStack[index2] = null;
        }
        index2--;
      }
      function push(cursor2, value, fiber) {
        index2++;
        valueStack[index2] = cursor2.current;
        {
          fiberStack[index2] = fiber;
        }
        cursor2.current = value;
      }
      var warnedAboutMissingGetChildContext;
      {
        warnedAboutMissingGetChildContext = {};
      }
      var emptyContextObject = {};
      {
        Object.freeze(emptyContextObject);
      }
      var contextStackCursor = createCursor(emptyContextObject);
      var didPerformWorkStackCursor = createCursor(false);
      var previousContext = emptyContextObject;
      function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
        {
          if (didPushOwnContextIfProvider && isContextProvider(Component)) {
            return previousContext;
          }
          return contextStackCursor.current;
        }
      }
      function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
        {
          var instance2 = workInProgress2.stateNode;
          instance2.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
          instance2.__reactInternalMemoizedMaskedChildContext = maskedContext;
        }
      }
      function getMaskedContext(workInProgress2, unmaskedContext) {
        {
          var type = workInProgress2.type;
          var contextTypes = type.contextTypes;
          if (!contextTypes) {
            return emptyContextObject;
          }
          var instance2 = workInProgress2.stateNode;
          if (instance2 && instance2.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
            return instance2.__reactInternalMemoizedMaskedChildContext;
          }
          var context = {};
          for (var key in contextTypes) {
            context[key] = unmaskedContext[key];
          }
          {
            var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
            checkPropTypes2(contextTypes, context, "context", name);
          }
          if (instance2) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return context;
        }
      }
      function hasContextChanged() {
        {
          return didPerformWorkStackCursor.current;
        }
      }
      function isContextProvider(type) {
        {
          var childContextTypes = type.childContextTypes;
          return childContextTypes !== null && childContextTypes !== void 0;
        }
      }
      function popContext(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }
      function popTopLevelContextObject(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }
      function pushTopLevelContextObject(fiber, context, didChange) {
        {
          if (contextStackCursor.current !== emptyContextObject) {
            throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
          }
          push(contextStackCursor, context, fiber);
          push(didPerformWorkStackCursor, didChange, fiber);
        }
      }
      function processChildContext(fiber, type, parentContext) {
        {
          var instance2 = fiber.stateNode;
          var childContextTypes = type.childContextTypes;
          if (typeof instance2.getChildContext !== "function") {
            {
              var componentName = getComponentNameFromFiber(fiber) || "Unknown";
              if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
              }
            }
            return parentContext;
          }
          var childContext = instance2.getChildContext();
          for (var contextKey in childContext) {
            if (!(contextKey in childContextTypes)) {
              throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
            }
          }
          {
            var name = getComponentNameFromFiber(fiber) || "Unknown";
            checkPropTypes2(childContextTypes, childContext, "child context", name);
          }
          return assign2({}, parentContext, childContext);
        }
      }
      function pushContextProvider(workInProgress2) {
        {
          var instance2 = workInProgress2.stateNode;
          var memoizedMergedChildContext = instance2 && instance2.__reactInternalMemoizedMergedChildContext || emptyContextObject;
          previousContext = contextStackCursor.current;
          push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
          push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
          return true;
        }
      }
      function invalidateContextProvider(workInProgress2, type, didChange) {
        {
          var instance2 = workInProgress2.stateNode;
          if (!instance2) {
            throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
          }
          if (didChange) {
            var mergedContext = processChildContext(workInProgress2, type, previousContext);
            instance2.__reactInternalMemoizedMergedChildContext = mergedContext;
            pop(didPerformWorkStackCursor, workInProgress2);
            pop(contextStackCursor, workInProgress2);
            push(contextStackCursor, mergedContext, workInProgress2);
            push(didPerformWorkStackCursor, didChange, workInProgress2);
          } else {
            pop(didPerformWorkStackCursor, workInProgress2);
            push(didPerformWorkStackCursor, didChange, workInProgress2);
          }
        }
      }
      function findCurrentUnmaskedContext(fiber) {
        {
          if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
            throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
          }
          var node2 = fiber;
          do {
            switch (node2.tag) {
              case HostRoot:
                return node2.stateNode.context;
              case ClassComponent: {
                var Component = node2.type;
                if (isContextProvider(Component)) {
                  return node2.stateNode.__reactInternalMemoizedMergedChildContext;
                }
                break;
              }
            }
            node2 = node2.return;
          } while (node2 !== null);
          throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      var LegacyRoot = 0;
      var ConcurrentRoot = 1;
      var syncQueue = null;
      var includesLegacySyncCallbacks = false;
      var isFlushingSyncQueue = false;
      function scheduleSyncCallback(callback) {
        if (syncQueue === null) {
          syncQueue = [callback];
        } else {
          syncQueue.push(callback);
        }
      }
      function scheduleLegacySyncCallback(callback) {
        includesLegacySyncCallbacks = true;
        scheduleSyncCallback(callback);
      }
      function flushSyncCallbacksOnlyInLegacyMode() {
        if (includesLegacySyncCallbacks) {
          flushSyncCallbacks();
        }
      }
      function flushSyncCallbacks() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
          isFlushingSyncQueue = true;
          var i2 = 0;
          var previousUpdatePriority = getCurrentUpdatePriority();
          try {
            var isSync = true;
            var queue2 = syncQueue;
            setCurrentUpdatePriority(DiscreteEventPriority);
            for (; i2 < queue2.length; i2++) {
              var callback = queue2[i2];
              do {
                callback = callback(isSync);
              } while (callback !== null);
            }
            syncQueue = null;
            includesLegacySyncCallbacks = false;
          } catch (error2) {
            if (syncQueue !== null) {
              syncQueue = syncQueue.slice(i2 + 1);
            }
            scheduleCallback(ImmediatePriority, flushSyncCallbacks);
            throw error2;
          } finally {
            setCurrentUpdatePriority(previousUpdatePriority);
            isFlushingSyncQueue = false;
          }
        }
        return null;
      }
      var forkStack = [];
      var forkStackIndex = 0;
      var treeForkProvider = null;
      var treeForkCount = 0;
      var idStack = [];
      var idStackIndex = 0;
      var treeContextProvider = null;
      var treeContextId = 1;
      var treeContextOverflow = "";
      function isForkedChild(workInProgress2) {
        warnIfNotHydrating();
        return (workInProgress2.flags & Forked) !== NoFlags;
      }
      function getForksAtLevel(workInProgress2) {
        warnIfNotHydrating();
        return treeForkCount;
      }
      function getTreeId() {
        var overflow = treeContextOverflow;
        var idWithLeadingBit = treeContextId;
        var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id.toString(32) + overflow;
      }
      function pushTreeFork(workInProgress2, totalChildren) {
        warnIfNotHydrating();
        forkStack[forkStackIndex++] = treeForkCount;
        forkStack[forkStackIndex++] = treeForkProvider;
        treeForkProvider = workInProgress2;
        treeForkCount = totalChildren;
      }
      function pushTreeId(workInProgress2, totalChildren, index3) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextProvider = workInProgress2;
        var baseIdWithLeadingBit = treeContextId;
        var baseOverflow = treeContextOverflow;
        var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
        var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
        var slot = index3 + 1;
        var length2 = getBitLength(totalChildren) + baseLength;
        if (length2 > 30) {
          var numberOfOverflowBits = baseLength - baseLength % 5;
          var newOverflowBits = (1 << numberOfOverflowBits) - 1;
          var newOverflow = (baseId & newOverflowBits).toString(32);
          var restOfBaseId = baseId >> numberOfOverflowBits;
          var restOfBaseLength = baseLength - numberOfOverflowBits;
          var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
          var restOfNewBits = slot << restOfBaseLength;
          var id = restOfNewBits | restOfBaseId;
          var overflow = newOverflow + baseOverflow;
          treeContextId = 1 << restOfLength | id;
          treeContextOverflow = overflow;
        } else {
          var newBits = slot << baseLength;
          var _id = newBits | baseId;
          var _overflow = baseOverflow;
          treeContextId = 1 << length2 | _id;
          treeContextOverflow = _overflow;
        }
      }
      function pushMaterializedTreeId(workInProgress2) {
        warnIfNotHydrating();
        var returnFiber = workInProgress2.return;
        if (returnFiber !== null) {
          var numberOfForks = 1;
          var slotIndex = 0;
          pushTreeFork(workInProgress2, numberOfForks);
          pushTreeId(workInProgress2, numberOfForks, slotIndex);
        }
      }
      function getBitLength(number2) {
        return 32 - clz32(number2);
      }
      function getLeadingBit(id) {
        return 1 << getBitLength(id) - 1;
      }
      function popTreeContext(workInProgress2) {
        while (workInProgress2 === treeForkProvider) {
          treeForkProvider = forkStack[--forkStackIndex];
          forkStack[forkStackIndex] = null;
          treeForkCount = forkStack[--forkStackIndex];
          forkStack[forkStackIndex] = null;
        }
        while (workInProgress2 === treeContextProvider) {
          treeContextProvider = idStack[--idStackIndex];
          idStack[idStackIndex] = null;
          treeContextOverflow = idStack[--idStackIndex];
          idStack[idStackIndex] = null;
          treeContextId = idStack[--idStackIndex];
          idStack[idStackIndex] = null;
        }
      }
      function getSuspendedTreeContext() {
        warnIfNotHydrating();
        if (treeContextProvider !== null) {
          return {
            id: treeContextId,
            overflow: treeContextOverflow
          };
        } else {
          return null;
        }
      }
      function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextId = suspendedContext.id;
        treeContextOverflow = suspendedContext.overflow;
        treeContextProvider = workInProgress2;
      }
      function warnIfNotHydrating() {
        {
          if (!getIsHydrating()) {
            error("Expected to be hydrating. This is a bug in React. Please file an issue.");
          }
        }
      }
      var hydrationParentFiber = null;
      var nextHydratableInstance = null;
      var isHydrating = false;
      var didSuspendOrErrorDEV = false;
      var hydrationErrors = null;
      function warnIfHydrating() {
        {
          if (isHydrating) {
            error("We should not be hydrating here. This is a bug in React. Please file a bug.");
          }
        }
      }
      function markDidThrowWhileHydratingDEV() {
        {
          didSuspendOrErrorDEV = true;
        }
      }
      function didSuspendOrErrorWhileHydratingDEV() {
        {
          return didSuspendOrErrorDEV;
        }
      }
      function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        hydrationErrors = null;
        didSuspendOrErrorDEV = false;
        return true;
      }
      function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
        nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        hydrationErrors = null;
        didSuspendOrErrorDEV = false;
        if (treeContext !== null) {
          restoreSuspendedTreeContext(fiber, treeContext);
        }
        return true;
      }
      function warnUnhydratedInstance(returnFiber, instance2) {
        {
          switch (returnFiber.tag) {
            case HostRoot: {
              didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance2);
              break;
            }
            case HostComponent: {
              var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
              didNotHydrateInstance(
                returnFiber.type,
                returnFiber.memoizedProps,
                returnFiber.stateNode,
                instance2,
                // TODO: Delete this argument when we remove the legacy root API.
                isConcurrentMode
              );
              break;
            }
            case SuspenseComponent: {
              var suspenseState = returnFiber.memoizedState;
              if (suspenseState.dehydrated !== null)
                didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance2);
              break;
            }
          }
        }
      }
      function deleteHydratableInstance(returnFiber, instance2) {
        warnUnhydratedInstance(returnFiber, instance2);
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance2;
        childToDelete.return = returnFiber;
        var deletions = returnFiber.deletions;
        if (deletions === null) {
          returnFiber.deletions = [childToDelete];
          returnFiber.flags |= ChildDeletion;
        } else {
          deletions.push(childToDelete);
        }
      }
      function warnNonhydratedInstance(returnFiber, fiber) {
        {
          if (didSuspendOrErrorDEV) {
            return;
          }
          switch (returnFiber.tag) {
            case HostRoot: {
              var parentContainer = returnFiber.stateNode.containerInfo;
              switch (fiber.tag) {
                case HostComponent:
                  var type = fiber.type;
                  didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                  break;
                case HostText:
                  var text = fiber.pendingProps;
                  didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                  break;
              }
              break;
            }
            case HostComponent: {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              switch (fiber.tag) {
                case HostComponent: {
                  var _type = fiber.type;
                  var _props = fiber.pendingProps;
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotFindHydratableInstance(
                    parentType,
                    parentProps,
                    parentInstance,
                    _type,
                    _props,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case HostText: {
                  var _text = fiber.pendingProps;
                  var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotFindHydratableTextInstance(
                    parentType,
                    parentProps,
                    parentInstance,
                    _text,
                    // TODO: Delete this argument when we remove the legacy root API.
                    _isConcurrentMode
                  );
                  break;
                }
              }
              break;
            }
            case SuspenseComponent: {
              var suspenseState = returnFiber.memoizedState;
              var _parentInstance = suspenseState.dehydrated;
              if (_parentInstance !== null)
                switch (fiber.tag) {
                  case HostComponent:
                    var _type2 = fiber.type;
                    didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                    break;
                  case HostText:
                    var _text2 = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                    break;
                }
              break;
            }
            default:
              return;
          }
        }
      }
      function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement;
        warnNonhydratedInstance(returnFiber, fiber);
      }
      function tryHydrate(fiber, nextInstance) {
        switch (fiber.tag) {
          case HostComponent: {
            var type = fiber.type;
            var instance2 = canHydrateInstance(nextInstance, type);
            if (instance2 !== null) {
              fiber.stateNode = instance2;
              hydrationParentFiber = fiber;
              nextHydratableInstance = getFirstHydratableChild(instance2);
              return true;
            }
            return false;
          }
          case HostText: {
            var text = fiber.pendingProps;
            var textInstance = canHydrateTextInstance(nextInstance, text);
            if (textInstance !== null) {
              fiber.stateNode = textInstance;
              hydrationParentFiber = fiber;
              nextHydratableInstance = null;
              return true;
            }
            return false;
          }
          case SuspenseComponent: {
            var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
            if (suspenseInstance !== null) {
              var suspenseState = {
                dehydrated: suspenseInstance,
                treeContext: getSuspendedTreeContext(),
                retryLane: OffscreenLane
              };
              fiber.memoizedState = suspenseState;
              var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
              dehydratedFragment.return = fiber;
              fiber.child = dehydratedFragment;
              hydrationParentFiber = fiber;
              nextHydratableInstance = null;
              return true;
            }
            return false;
          }
          default:
            return false;
        }
      }
      function shouldClientRenderOnMismatch(fiber) {
        return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
      }
      function throwOnHydrationMismatch(fiber) {
        throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
      }
      function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) {
          return;
        }
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
          if (shouldClientRenderOnMismatch(fiber)) {
            warnNonhydratedInstance(hydrationParentFiber, fiber);
            throwOnHydrationMismatch();
          }
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
          if (shouldClientRenderOnMismatch(fiber)) {
            warnNonhydratedInstance(hydrationParentFiber, fiber);
            throwOnHydrationMismatch();
          }
          nextInstance = getNextHydratableSibling(firstAttemptedInstance);
          var prevHydrationParentFiber = hydrationParentFiber;
          if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
        }
      }
      function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance2 = fiber.stateNode;
        var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
        var updatePayload = hydrateInstance(instance2, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
        fiber.updateQueue = updatePayload;
        if (updatePayload !== null) {
          return true;
        }
        return false;
      }
      function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
          var returnFiber = hydrationParentFiber;
          if (returnFiber !== null) {
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotMatchHydratedContainerTextInstance(
                  parentContainer,
                  textInstance,
                  textContent,
                  // TODO: Delete this argument when we remove the legacy root API.
                  isConcurrentMode
                );
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotMatchHydratedTextInstance(
                  parentType,
                  parentProps,
                  parentInstance,
                  textInstance,
                  textContent,
                  // TODO: Delete this argument when we remove the legacy root API.
                  _isConcurrentMode2
                );
                break;
              }
            }
          }
        }
        return shouldUpdate;
      }
      function prepareToHydrateHostSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) {
          throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        }
        hydrateSuspenseInstance(suspenseInstance, fiber);
      }
      function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) {
          throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        }
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
      }
      function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
          parent = parent.return;
        }
        hydrationParentFiber = parent;
      }
      function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) {
          return false;
        }
        if (!isHydrating) {
          popToNextHostParent(fiber);
          isHydrating = true;
          return false;
        }
        if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
          var nextInstance = nextHydratableInstance;
          if (nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnIfUnhydratedTailNodes(fiber);
              throwOnHydrationMismatch();
            } else {
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
              }
            }
          }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) {
          nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        } else {
          nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        }
        return true;
      }
      function hasUnhydratedTailNodes() {
        return isHydrating && nextHydratableInstance !== null;
      }
      function warnIfUnhydratedTailNodes(fiber) {
        var nextInstance = nextHydratableInstance;
        while (nextInstance) {
          warnUnhydratedInstance(fiber, nextInstance);
          nextInstance = getNextHydratableSibling(nextInstance);
        }
      }
      function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
        didSuspendOrErrorDEV = false;
      }
      function upgradeHydrationErrorsToRecoverable() {
        if (hydrationErrors !== null) {
          queueRecoverableErrors(hydrationErrors);
          hydrationErrors = null;
        }
      }
      function getIsHydrating() {
        return isHydrating;
      }
      function queueHydrationError(error2) {
        if (hydrationErrors === null) {
          hydrationErrors = [error2];
        } else {
          hydrationErrors.push(error2);
        }
      }
      var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
      var NoTransition = null;
      function requestCurrentTransition() {
        return ReactCurrentBatchConfig$1.transition;
      }
      var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance2) {
        },
        flushPendingUnsafeLifecycleWarnings: function() {
        },
        recordLegacyContextWarning: function(fiber, instance2) {
        },
        flushLegacyContextWarning: function() {
        },
        discardPendingWarnings: function() {
        }
      };
      {
        var findStrictRoot = function(fiber) {
          var maybeStrictRoot = null;
          var node2 = fiber;
          while (node2 !== null) {
            if (node2.mode & StrictLegacyMode) {
              maybeStrictRoot = node2;
            }
            node2 = node2.return;
          }
          return maybeStrictRoot;
        };
        var setToSortedString = function(set2) {
          var array = [];
          set2.forEach(function(value) {
            array.push(value);
          });
          return array.sort().join(", ");
        };
        var pendingComponentWillMountWarnings = [];
        var pendingUNSAFE_ComponentWillMountWarnings = [];
        var pendingComponentWillReceivePropsWarnings = [];
        var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        var pendingComponentWillUpdateWarnings = [];
        var pendingUNSAFE_ComponentWillUpdateWarnings = [];
        var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance2) {
          if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
            return;
          }
          if (typeof instance2.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
          instance2.componentWillMount.__suppressDeprecationWarning !== true) {
            pendingComponentWillMountWarnings.push(fiber);
          }
          if (fiber.mode & StrictLegacyMode && typeof instance2.UNSAFE_componentWillMount === "function") {
            pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
          }
          if (typeof instance2.componentWillReceiveProps === "function" && instance2.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            pendingComponentWillReceivePropsWarnings.push(fiber);
          }
          if (fiber.mode & StrictLegacyMode && typeof instance2.UNSAFE_componentWillReceiveProps === "function") {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
          }
          if (typeof instance2.componentWillUpdate === "function" && instance2.componentWillUpdate.__suppressDeprecationWarning !== true) {
            pendingComponentWillUpdateWarnings.push(fiber);
          }
          if (fiber.mode & StrictLegacyMode && typeof instance2.UNSAFE_componentWillUpdate === "function") {
            pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
          }
        };
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
          var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
          if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
              componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
          }
          var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
          if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
              UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
          }
          var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
          if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
              componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
          }
          var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
          if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
              UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          }
          var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
          if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
              componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
          }
          var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
          if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
              UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
          }
          if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
          }
          if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
          }
          if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
          }
          if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn2("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
          }
          if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn2("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
          }
          if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn2("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
          }
        };
        var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
        var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
        ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance2) {
          var strictRoot = findStrictRoot(fiber);
          if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
          }
          if (didWarnAboutLegacyContext.has(fiber.type)) {
            return;
          }
          var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
          if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance2 !== null && typeof instance2.getChildContext === "function") {
            if (warningsForRoot === void 0) {
              warningsForRoot = [];
              pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
          }
        };
        ReactStrictModeWarnings.flushLegacyContextWarning = function() {
          pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) {
              return;
            }
            var firstFiber = fiberArray[0];
            var uniqueNames = /* @__PURE__ */ new Set();
            fiberArray.forEach(function(fiber) {
              uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            try {
              setCurrentFiber(firstFiber);
              error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
            } finally {
              resetCurrentFiber();
            }
          });
        };
        ReactStrictModeWarnings.discardPendingWarnings = function() {
          pendingComponentWillMountWarnings = [];
          pendingUNSAFE_ComponentWillMountWarnings = [];
          pendingComponentWillReceivePropsWarnings = [];
          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          pendingComponentWillUpdateWarnings = [];
          pendingUNSAFE_ComponentWillUpdateWarnings = [];
          pendingLegacyContextWarning = /* @__PURE__ */ new Map();
        };
      }
      function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
          var props = assign2({}, baseProps);
          var defaultProps2 = Component.defaultProps;
          for (var propName in defaultProps2) {
            if (props[propName] === void 0) {
              props[propName] = defaultProps2[propName];
            }
          }
          return props;
        }
        return baseProps;
      }
      var valueCursor = createCursor(null);
      var rendererSigil;
      {
        rendererSigil = {};
      }
      var currentlyRenderingFiber = null;
      var lastContextDependency = null;
      var lastFullyObservedContext = null;
      var isDisallowedContextReadInDEV = false;
      function resetContextDependencies() {
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        {
          isDisallowedContextReadInDEV = false;
        }
      }
      function enterDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = true;
        }
      }
      function exitDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = false;
        }
      }
      function pushProvider(providerFiber, context, nextValue) {
        {
          push(valueCursor, context._currentValue, providerFiber);
          context._currentValue = nextValue;
          {
            if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
              error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
            }
            context._currentRenderer = rendererSigil;
          }
        }
      }
      function popProvider(context, providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        {
          {
            context._currentValue = currentValue;
          }
        }
      }
      function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
        var node2 = parent;
        while (node2 !== null) {
          var alternate = node2.alternate;
          if (!isSubsetOfLanes(node2.childLanes, renderLanes2)) {
            node2.childLanes = mergeLanes(node2.childLanes, renderLanes2);
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            }
          } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
          }
          if (node2 === propagationRoot) {
            break;
          }
          node2 = node2.return;
        }
        {
          if (node2 !== propagationRoot) {
            error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
      function propagateContextChange(workInProgress2, context, renderLanes2) {
        {
          propagateContextChange_eager(workInProgress2, context, renderLanes2);
        }
      }
      function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
        var fiber = workInProgress2.child;
        if (fiber !== null) {
          fiber.return = workInProgress2;
        }
        while (fiber !== null) {
          var nextFiber = void 0;
          var list = fiber.dependencies;
          if (list !== null) {
            nextFiber = fiber.child;
            var dependency = list.firstContext;
            while (dependency !== null) {
              if (dependency.context === context) {
                if (fiber.tag === ClassComponent) {
                  var lane = pickArbitraryLane(renderLanes2);
                  var update = createUpdate(NoTimestamp, lane);
                  update.tag = ForceUpdate;
                  var updateQueue = fiber.updateQueue;
                  if (updateQueue === null)
                    ;
                  else {
                    var sharedQueue = updateQueue.shared;
                    var pending = sharedQueue.pending;
                    if (pending === null) {
                      update.next = update;
                    } else {
                      update.next = pending.next;
                      pending.next = update;
                    }
                    sharedQueue.pending = update;
                  }
                }
                fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                list.lanes = mergeLanes(list.lanes, renderLanes2);
                break;
              }
              dependency = dependency.next;
            }
          } else if (fiber.tag === ContextProvider) {
            nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
          } else if (fiber.tag === DehydratedFragment) {
            var parentSuspense = fiber.return;
            if (parentSuspense === null) {
              throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
            }
            parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
            var _alternate = parentSuspense.alternate;
            if (_alternate !== null) {
              _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
            nextFiber = fiber.sibling;
          } else {
            nextFiber = fiber.child;
          }
          if (nextFiber !== null) {
            nextFiber.return = fiber;
          } else {
            nextFiber = fiber;
            while (nextFiber !== null) {
              if (nextFiber === workInProgress2) {
                nextFiber = null;
                break;
              }
              var sibling = nextFiber.sibling;
              if (sibling !== null) {
                sibling.return = nextFiber.return;
                nextFiber = sibling;
                break;
              }
              nextFiber = nextFiber.return;
            }
          }
          fiber = nextFiber;
        }
      }
      function prepareToReadContext(workInProgress2, renderLanes2) {
        currentlyRenderingFiber = workInProgress2;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        var dependencies = workInProgress2.dependencies;
        if (dependencies !== null) {
          {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
              if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                markWorkInProgressReceivedUpdate();
              }
              dependencies.firstContext = null;
            }
          }
        }
      }
      function readContext(context) {
        {
          if (isDisallowedContextReadInDEV) {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          }
        }
        var value = context._currentValue;
        if (lastFullyObservedContext === context)
          ;
        else {
          var contextItem = {
            context,
            memoizedValue: value,
            next: null
          };
          if (lastContextDependency === null) {
            if (currentlyRenderingFiber === null) {
              throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
            lastContextDependency = contextItem;
            currentlyRenderingFiber.dependencies = {
              lanes: NoLanes,
              firstContext: contextItem
            };
          } else {
            lastContextDependency = lastContextDependency.next = contextItem;
          }
        }
        return value;
      }
      var concurrentQueues = null;
      function pushConcurrentUpdateQueue(queue2) {
        if (concurrentQueues === null) {
          concurrentQueues = [queue2];
        } else {
          concurrentQueues.push(queue2);
        }
      }
      function finishQueueingConcurrentUpdates() {
        if (concurrentQueues !== null) {
          for (var i2 = 0; i2 < concurrentQueues.length; i2++) {
            var queue2 = concurrentQueues[i2];
            var lastInterleavedUpdate = queue2.interleaved;
            if (lastInterleavedUpdate !== null) {
              queue2.interleaved = null;
              var firstInterleavedUpdate = lastInterleavedUpdate.next;
              var lastPendingUpdate = queue2.pending;
              if (lastPendingUpdate !== null) {
                var firstPendingUpdate = lastPendingUpdate.next;
                lastPendingUpdate.next = firstInterleavedUpdate;
                lastInterleavedUpdate.next = firstPendingUpdate;
              }
              queue2.pending = lastInterleavedUpdate;
            }
          }
          concurrentQueues = null;
        }
      }
      function enqueueConcurrentHookUpdate(fiber, queue2, update, lane) {
        var interleaved = queue2.interleaved;
        if (interleaved === null) {
          update.next = update;
          pushConcurrentUpdateQueue(queue2);
        } else {
          update.next = interleaved.next;
          interleaved.next = update;
        }
        queue2.interleaved = update;
        return markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue2, update, lane) {
        var interleaved = queue2.interleaved;
        if (interleaved === null) {
          update.next = update;
          pushConcurrentUpdateQueue(queue2);
        } else {
          update.next = interleaved.next;
          interleaved.next = update;
        }
        queue2.interleaved = update;
      }
      function enqueueConcurrentClassUpdate(fiber, queue2, update, lane) {
        var interleaved = queue2.interleaved;
        if (interleaved === null) {
          update.next = update;
          pushConcurrentUpdateQueue(queue2);
        } else {
          update.next = interleaved.next;
          interleaved.next = update;
        }
        queue2.interleaved = update;
        return markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      function enqueueConcurrentRenderForLane(fiber, lane) {
        return markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
      function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, lane);
        }
        {
          if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
            warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
          }
        }
        var node2 = sourceFiber;
        var parent = sourceFiber.return;
        while (parent !== null) {
          parent.childLanes = mergeLanes(parent.childLanes, lane);
          alternate = parent.alternate;
          if (alternate !== null) {
            alternate.childLanes = mergeLanes(alternate.childLanes, lane);
          } else {
            {
              if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
          }
          node2 = parent;
          parent = parent.return;
        }
        if (node2.tag === HostRoot) {
          var root2 = node2.stateNode;
          return root2;
        } else {
          return null;
        }
      }
      var UpdateState = 0;
      var ReplaceState = 1;
      var ForceUpdate = 2;
      var CaptureUpdate = 3;
      var hasForceUpdate = false;
      var didWarnUpdateInsideUpdate;
      var currentlyProcessingQueue;
      {
        didWarnUpdateInsideUpdate = false;
        currentlyProcessingQueue = null;
      }
      function initializeUpdateQueue(fiber) {
        var queue2 = {
          baseState: fiber.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: {
            pending: null,
            interleaved: null,
            lanes: NoLanes
          },
          effects: null
        };
        fiber.updateQueue = queue2;
      }
      function cloneUpdateQueue(current2, workInProgress2) {
        var queue2 = workInProgress2.updateQueue;
        var currentQueue = current2.updateQueue;
        if (queue2 === currentQueue) {
          var clone = {
            baseState: currentQueue.baseState,
            firstBaseUpdate: currentQueue.firstBaseUpdate,
            lastBaseUpdate: currentQueue.lastBaseUpdate,
            shared: currentQueue.shared,
            effects: currentQueue.effects
          };
          workInProgress2.updateQueue = clone;
        }
      }
      function createUpdate(eventTime, lane) {
        var update = {
          eventTime,
          lane,
          tag: UpdateState,
          payload: null,
          callback: null,
          next: null
        };
        return update;
      }
      function enqueueUpdate(fiber, update, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) {
          return null;
        }
        var sharedQueue = updateQueue.shared;
        {
          if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
          }
        }
        if (isUnsafeClassRenderPhaseUpdate()) {
          var pending = sharedQueue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          sharedQueue.pending = update;
          return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
        } else {
          return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
        }
      }
      function entangleTransitions(root2, fiber, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) {
          return;
        }
        var sharedQueue = updateQueue.shared;
        if (isTransitionLane(lane)) {
          var queueLanes = sharedQueue.lanes;
          queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
          var newQueueLanes = mergeLanes(queueLanes, lane);
          sharedQueue.lanes = newQueueLanes;
          markRootEntangled(root2, newQueueLanes);
        }
      }
      function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
        var queue2 = workInProgress2.updateQueue;
        var current2 = workInProgress2.alternate;
        if (current2 !== null) {
          var currentQueue = current2.updateQueue;
          if (queue2 === currentQueue) {
            var newFirst = null;
            var newLast = null;
            var firstBaseUpdate = queue2.firstBaseUpdate;
            if (firstBaseUpdate !== null) {
              var update = firstBaseUpdate;
              do {
                var clone = {
                  eventTime: update.eventTime,
                  lane: update.lane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLast === null) {
                  newFirst = newLast = clone;
                } else {
                  newLast.next = clone;
                  newLast = clone;
                }
                update = update.next;
              } while (update !== null);
              if (newLast === null) {
                newFirst = newLast = capturedUpdate;
              } else {
                newLast.next = capturedUpdate;
                newLast = capturedUpdate;
              }
            } else {
              newFirst = newLast = capturedUpdate;
            }
            queue2 = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: newFirst,
              lastBaseUpdate: newLast,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = queue2;
            return;
          }
        }
        var lastBaseUpdate = queue2.lastBaseUpdate;
        if (lastBaseUpdate === null) {
          queue2.firstBaseUpdate = capturedUpdate;
        } else {
          lastBaseUpdate.next = capturedUpdate;
        }
        queue2.lastBaseUpdate = capturedUpdate;
      }
      function getStateFromUpdate(workInProgress2, queue2, update, prevState, nextProps, instance2) {
        switch (update.tag) {
          case ReplaceState: {
            var payload = update.payload;
            if (typeof payload === "function") {
              {
                enterDisallowedContextReadInDEV();
              }
              var nextState = payload.call(instance2, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    payload.call(instance2, prevState, nextProps);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                exitDisallowedContextReadInDEV();
              }
              return nextState;
            }
            return payload;
          }
          case CaptureUpdate: {
            workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
          }
          case UpdateState: {
            var _payload = update.payload;
            var partialState;
            if (typeof _payload === "function") {
              {
                enterDisallowedContextReadInDEV();
              }
              partialState = _payload.call(instance2, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    _payload.call(instance2, prevState, nextProps);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                exitDisallowedContextReadInDEV();
              }
            } else {
              partialState = _payload;
            }
            if (partialState === null || partialState === void 0) {
              return prevState;
            }
            return assign2({}, prevState, partialState);
          }
          case ForceUpdate: {
            hasForceUpdate = true;
            return prevState;
          }
        }
        return prevState;
      }
      function processUpdateQueue(workInProgress2, props, instance2, renderLanes2) {
        var queue2 = workInProgress2.updateQueue;
        hasForceUpdate = false;
        {
          currentlyProcessingQueue = queue2.shared;
        }
        var firstBaseUpdate = queue2.firstBaseUpdate;
        var lastBaseUpdate = queue2.lastBaseUpdate;
        var pendingQueue = queue2.shared.pending;
        if (pendingQueue !== null) {
          queue2.shared.pending = null;
          var lastPendingUpdate = pendingQueue;
          var firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = null;
          if (lastBaseUpdate === null) {
            firstBaseUpdate = firstPendingUpdate;
          } else {
            lastBaseUpdate.next = firstPendingUpdate;
          }
          lastBaseUpdate = lastPendingUpdate;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
            if (currentLastBaseUpdate !== lastBaseUpdate) {
              if (currentLastBaseUpdate === null) {
                currentQueue.firstBaseUpdate = firstPendingUpdate;
              } else {
                currentLastBaseUpdate.next = firstPendingUpdate;
              }
              currentQueue.lastBaseUpdate = lastPendingUpdate;
            }
          }
        }
        if (firstBaseUpdate !== null) {
          var newState = queue2.baseState;
          var newLanes = NoLanes;
          var newBaseState = null;
          var newFirstBaseUpdate = null;
          var newLastBaseUpdate = null;
          var update = firstBaseUpdate;
          do {
            var updateLane = update.lane;
            var updateEventTime = update.eventTime;
            if (!isSubsetOfLanes(renderLanes2, updateLane)) {
              var clone = {
                eventTime: updateEventTime,
                lane: updateLane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              if (newLastBaseUpdate === null) {
                newFirstBaseUpdate = newLastBaseUpdate = clone;
                newBaseState = newState;
              } else {
                newLastBaseUpdate = newLastBaseUpdate.next = clone;
              }
              newLanes = mergeLanes(newLanes, updateLane);
            } else {
              if (newLastBaseUpdate !== null) {
                var _clone = {
                  eventTime: updateEventTime,
                  // This update is going to be committed so we never want uncommit
                  // it. Using NoLane works because 0 is a subset of all bitmasks, so
                  // this will never be skipped by the check above.
                  lane: NoLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                newLastBaseUpdate = newLastBaseUpdate.next = _clone;
              }
              newState = getStateFromUpdate(workInProgress2, queue2, update, newState, props, instance2);
              var callback = update.callback;
              if (callback !== null && // If the update was already committed, we should not queue its
              // callback again.
              update.lane !== NoLane) {
                workInProgress2.flags |= Callback;
                var effects = queue2.effects;
                if (effects === null) {
                  queue2.effects = [update];
                } else {
                  effects.push(update);
                }
              }
            }
            update = update.next;
            if (update === null) {
              pendingQueue = queue2.shared.pending;
              if (pendingQueue === null) {
                break;
              } else {
                var _lastPendingUpdate = pendingQueue;
                var _firstPendingUpdate = _lastPendingUpdate.next;
                _lastPendingUpdate.next = null;
                update = _firstPendingUpdate;
                queue2.lastBaseUpdate = _lastPendingUpdate;
                queue2.shared.pending = null;
              }
            }
          } while (true);
          if (newLastBaseUpdate === null) {
            newBaseState = newState;
          }
          queue2.baseState = newBaseState;
          queue2.firstBaseUpdate = newFirstBaseUpdate;
          queue2.lastBaseUpdate = newLastBaseUpdate;
          var lastInterleaved = queue2.shared.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
              newLanes = mergeLanes(newLanes, interleaved.lane);
              interleaved = interleaved.next;
            } while (interleaved !== lastInterleaved);
          } else if (firstBaseUpdate === null) {
            queue2.shared.lanes = NoLanes;
          }
          markSkippedUpdateLanes(newLanes);
          workInProgress2.lanes = newLanes;
          workInProgress2.memoizedState = newState;
        }
        {
          currentlyProcessingQueue = null;
        }
      }
      function callCallback(callback, context) {
        if (typeof callback !== "function") {
          throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
        }
        callback.call(context);
      }
      function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
      }
      function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
      }
      function commitUpdateQueue(finishedWork, finishedQueue, instance2) {
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;
        if (effects !== null) {
          for (var i2 = 0; i2 < effects.length; i2++) {
            var effect = effects[i2];
            var callback = effect.callback;
            if (callback !== null) {
              effect.callback = null;
              callCallback(callback, instance2);
            }
          }
        }
      }
      var fakeInternalInstance = {};
      var emptyRefsObject = new React2.Component().refs;
      var didWarnAboutStateAssignmentForComponent;
      var didWarnAboutUninitializedState;
      var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
      var didWarnAboutLegacyLifecyclesAndDerivedState;
      var didWarnAboutUndefinedDerivedState;
      var warnOnUndefinedDerivedState;
      var warnOnInvalidCallback;
      var didWarnAboutDirectlyAssigningPropsToState;
      var didWarnAboutContextTypeAndContextTypes;
      var didWarnAboutInvalidateContextType;
      {
        didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
        didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
        didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
        didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
        didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
        didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
        didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
        var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
        warnOnInvalidCallback = function(callback, callerName) {
          if (callback === null || typeof callback === "function") {
            return;
          }
          var key = callerName + "_" + callback;
          if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
          }
        };
        warnOnUndefinedDerivedState = function(type, partialState) {
          if (partialState === void 0) {
            var componentName = getComponentNameFromType(type) || "Component";
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
              didWarnAboutUndefinedDerivedState.add(componentName);
              error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
          }
        };
        Object.defineProperty(fakeInternalInstance, "_processChildContext", {
          enumerable: false,
          value: function() {
            throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
          }
        });
        Object.freeze(fakeInternalInstance);
      }
      function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress2.memoizedState;
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              partialState = getDerivedStateFromProps(nextProps, prevState);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          warnOnUndefinedDerivedState(ctor, partialState);
        }
        var memoizedState = partialState === null || partialState === void 0 ? prevState : assign2({}, prevState, partialState);
        workInProgress2.memoizedState = memoizedState;
        if (workInProgress2.lanes === NoLanes) {
          var updateQueue = workInProgress2.updateQueue;
          updateQueue.baseState = memoizedState;
        }
      }
      var classComponentUpdater = {
        isMounted,
        enqueueSetState: function(inst, payload, callback) {
          var fiber = get2(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.payload = payload;
          if (callback !== void 0 && callback !== null) {
            {
              warnOnInvalidCallback(callback, "setState");
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(fiber, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitions(root2, fiber, lane);
          }
          {
            markStateUpdateScheduled(fiber, lane);
          }
        },
        enqueueReplaceState: function(inst, payload, callback) {
          var fiber = get2(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.tag = ReplaceState;
          update.payload = payload;
          if (callback !== void 0 && callback !== null) {
            {
              warnOnInvalidCallback(callback, "replaceState");
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(fiber, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitions(root2, fiber, lane);
          }
          {
            markStateUpdateScheduled(fiber, lane);
          }
        },
        enqueueForceUpdate: function(inst, callback) {
          var fiber = get2(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.tag = ForceUpdate;
          if (callback !== void 0 && callback !== null) {
            {
              warnOnInvalidCallback(callback, "forceUpdate");
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(fiber, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitions(root2, fiber, lane);
          }
          {
            markForceUpdateScheduled(fiber, lane);
          }
        }
      };
      function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance2 = workInProgress2.stateNode;
        if (typeof instance2.shouldComponentUpdate === "function") {
          var shouldUpdate = instance2.shouldComponentUpdate(newProps, newState, nextContext);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                shouldUpdate = instance2.shouldComponentUpdate(newProps, newState, nextContext);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            if (shouldUpdate === void 0) {
              error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
            }
          }
          return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) {
          return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        }
        return true;
      }
      function checkClassInstance(workInProgress2, ctor, newProps) {
        var instance2 = workInProgress2.stateNode;
        {
          var name = getComponentNameFromType(ctor) || "Component";
          var renderPresent = instance2.render;
          if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === "function") {
              error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            } else {
              error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
            }
          }
          if (instance2.getInitialState && !instance2.getInitialState.isReactClassApproved && !instance2.state) {
            error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
          }
          if (instance2.getDefaultProps && !instance2.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
          }
          if (instance2.propTypes) {
            error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
          }
          if (instance2.contextType) {
            error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
          }
          {
            if (instance2.contextTypes) {
              error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
            }
            if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
              didWarnAboutContextTypeAndContextTypes.add(ctor);
              error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
            }
          }
          if (typeof instance2.componentShouldUpdate === "function") {
            error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance2.shouldComponentUpdate !== "undefined") {
            error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
          }
          if (typeof instance2.componentDidUnmount === "function") {
            error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
          }
          if (typeof instance2.componentDidReceiveProps === "function") {
            error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
          }
          if (typeof instance2.componentWillRecieveProps === "function") {
            error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
          }
          if (typeof instance2.UNSAFE_componentWillRecieveProps === "function") {
            error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          }
          var hasMutatedProps = instance2.props !== newProps;
          if (instance2.props !== void 0 && hasMutatedProps) {
            error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
          }
          if (instance2.defaultProps) {
            error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
          }
          if (typeof instance2.getSnapshotBeforeUpdate === "function" && typeof instance2.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
          }
          if (typeof instance2.getDerivedStateFromProps === "function") {
            error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
          }
          if (typeof instance2.getDerivedStateFromError === "function") {
            error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
          }
          if (typeof ctor.getSnapshotBeforeUpdate === "function") {
            error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
          }
          var _state = instance2.state;
          if (_state && (typeof _state !== "object" || isArray2(_state))) {
            error("%s.state: must be set to an object or null", name);
          }
          if (typeof instance2.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
            error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
          }
        }
      }
      function adoptClassInstance(workInProgress2, instance2) {
        instance2.updater = classComponentUpdater;
        workInProgress2.stateNode = instance2;
        set(instance2, workInProgress2);
        {
          instance2._reactInternalInstance = fakeInternalInstance;
        }
      }
      function constructClassInstance(workInProgress2, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        {
          if ("contextType" in ctor) {
            var isValid2 = (
              // Allow null for conditional declaration
              contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
            );
            if (!isValid2 && !didWarnAboutInvalidateContextType.has(ctor)) {
              didWarnAboutInvalidateContextType.add(ctor);
              var addendum = "";
              if (contextType === void 0) {
                addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
              } else if (typeof contextType !== "object") {
                addendum = " However, it is set to a " + typeof contextType + ".";
              } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                addendum = " Did you accidentally pass the Context.Provider instead?";
              } else if (contextType._context !== void 0) {
                addendum = " Did you accidentally pass the Context.Consumer instead?";
              } else {
                addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
              }
              error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
            }
          }
        }
        if (typeof contextType === "object" && contextType !== null) {
          context = readContext(contextType);
        } else {
          unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          var contextTypes = ctor.contextTypes;
          isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
          context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
        }
        var instance2 = new ctor(props, context);
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              instance2 = new ctor(props, context);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
        }
        var state = workInProgress2.memoizedState = instance2.state !== null && instance2.state !== void 0 ? instance2.state : null;
        adoptClassInstance(workInProgress2, instance2);
        {
          if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            if (!didWarnAboutUninitializedState.has(componentName)) {
              didWarnAboutUninitializedState.add(componentName);
              error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance2.state === null ? "null" : "undefined", componentName);
            }
          }
          if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance2.getSnapshotBeforeUpdate === "function") {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance2.componentWillMount === "function" && instance2.componentWillMount.__suppressDeprecationWarning !== true) {
              foundWillMountName = "componentWillMount";
            } else if (typeof instance2.UNSAFE_componentWillMount === "function") {
              foundWillMountName = "UNSAFE_componentWillMount";
            }
            if (typeof instance2.componentWillReceiveProps === "function" && instance2.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              foundWillReceivePropsName = "componentWillReceiveProps";
            } else if (typeof instance2.UNSAFE_componentWillReceiveProps === "function") {
              foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
            }
            if (typeof instance2.componentWillUpdate === "function" && instance2.componentWillUpdate.__suppressDeprecationWarning !== true) {
              foundWillUpdateName = "componentWillUpdate";
            } else if (typeof instance2.UNSAFE_componentWillUpdate === "function") {
              foundWillUpdateName = "UNSAFE_componentWillUpdate";
            }
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentNameFromType(ctor) || "Component";
              var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
              }
            }
          }
        }
        if (isLegacyContextConsumer) {
          cacheContext(workInProgress2, unmaskedContext, context);
        }
        return instance2;
      }
      function callComponentWillMount(workInProgress2, instance2) {
        var oldState = instance2.state;
        if (typeof instance2.componentWillMount === "function") {
          instance2.componentWillMount();
        }
        if (typeof instance2.UNSAFE_componentWillMount === "function") {
          instance2.UNSAFE_componentWillMount();
        }
        if (oldState !== instance2.state) {
          {
            error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
          }
          classComponentUpdater.enqueueReplaceState(instance2, instance2.state, null);
        }
      }
      function callComponentWillReceiveProps(workInProgress2, instance2, newProps, nextContext) {
        var oldState = instance2.state;
        if (typeof instance2.componentWillReceiveProps === "function") {
          instance2.componentWillReceiveProps(newProps, nextContext);
        }
        if (typeof instance2.UNSAFE_componentWillReceiveProps === "function") {
          instance2.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        }
        if (instance2.state !== oldState) {
          {
            var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
              didWarnAboutStateAssignmentForComponent.add(componentName);
              error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
          }
          classComponentUpdater.enqueueReplaceState(instance2, instance2.state, null);
        }
      }
      function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        {
          checkClassInstance(workInProgress2, ctor, newProps);
        }
        var instance2 = workInProgress2.stateNode;
        instance2.props = newProps;
        instance2.state = workInProgress2.memoizedState;
        instance2.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress2);
        var contextType = ctor.contextType;
        if (typeof contextType === "object" && contextType !== null) {
          instance2.context = readContext(contextType);
        } else {
          var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          instance2.context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        {
          if (instance2.state === newProps) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
              didWarnAboutDirectlyAssigningPropsToState.add(componentName);
              error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
          }
          if (workInProgress2.mode & StrictLegacyMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance2);
          }
          {
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance2);
          }
        }
        instance2.state = workInProgress2.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          instance2.state = workInProgress2.memoizedState;
        }
        if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance2.getSnapshotBeforeUpdate !== "function" && (typeof instance2.UNSAFE_componentWillMount === "function" || typeof instance2.componentWillMount === "function")) {
          callComponentWillMount(workInProgress2, instance2);
          processUpdateQueue(workInProgress2, newProps, instance2, renderLanes2);
          instance2.state = workInProgress2.memoizedState;
        }
        if (typeof instance2.componentDidMount === "function") {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          workInProgress2.flags |= fiberFlags;
        }
      }
      function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        var instance2 = workInProgress2.stateNode;
        var oldProps = workInProgress2.memoizedProps;
        instance2.props = oldProps;
        var oldContext = instance2.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) {
          nextContext = readContext(contextType);
        } else {
          var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance2.getSnapshotBeforeUpdate === "function";
        if (!hasNewLifecycles && (typeof instance2.UNSAFE_componentWillReceiveProps === "function" || typeof instance2.componentWillReceiveProps === "function")) {
          if (oldProps !== newProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress2, instance2, newProps, nextContext);
          }
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState;
        var newState = instance2.state = oldState;
        processUpdateQueue(workInProgress2, newProps, instance2, renderLanes2);
        newState = workInProgress2.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
          if (typeof instance2.componentDidMount === "function") {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= fiberFlags;
          }
          return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress2.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance2.UNSAFE_componentWillMount === "function" || typeof instance2.componentWillMount === "function")) {
            if (typeof instance2.componentWillMount === "function") {
              instance2.componentWillMount();
            }
            if (typeof instance2.UNSAFE_componentWillMount === "function") {
              instance2.UNSAFE_componentWillMount();
            }
          }
          if (typeof instance2.componentDidMount === "function") {
            var _fiberFlags = Update;
            {
              _fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              _fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= _fiberFlags;
          }
        } else {
          if (typeof instance2.componentDidMount === "function") {
            var _fiberFlags2 = Update;
            {
              _fiberFlags2 |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              _fiberFlags2 |= MountLayoutDev;
            }
            workInProgress2.flags |= _fiberFlags2;
          }
          workInProgress2.memoizedProps = newProps;
          workInProgress2.memoizedState = newState;
        }
        instance2.props = newProps;
        instance2.state = newState;
        instance2.context = nextContext;
        return shouldUpdate;
      }
      function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
        var instance2 = workInProgress2.stateNode;
        cloneUpdateQueue(current2, workInProgress2);
        var unresolvedOldProps = workInProgress2.memoizedProps;
        var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
        instance2.props = oldProps;
        var unresolvedNewProps = workInProgress2.pendingProps;
        var oldContext = instance2.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) {
          nextContext = readContext(contextType);
        } else {
          var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance2.getSnapshotBeforeUpdate === "function";
        if (!hasNewLifecycles && (typeof instance2.UNSAFE_componentWillReceiveProps === "function" || typeof instance2.componentWillReceiveProps === "function")) {
          if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress2, instance2, newProps, nextContext);
          }
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState;
        var newState = instance2.state = oldState;
        processUpdateQueue(workInProgress2, newProps, instance2, renderLanes2);
        newState = workInProgress2.memoizedState;
        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
          if (typeof instance2.componentDidUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Update;
            }
          }
          if (typeof instance2.getSnapshotBeforeUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Snapshot;
            }
          }
          return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress2.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
        // both before and after `shouldComponentUpdate` has been called. Not ideal,
        // but I'm loath to refactor this function. This only happens for memoized
        // components so it's not that common.
        enableLazyContextPropagation;
        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance2.UNSAFE_componentWillUpdate === "function" || typeof instance2.componentWillUpdate === "function")) {
            if (typeof instance2.componentWillUpdate === "function") {
              instance2.componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance2.UNSAFE_componentWillUpdate === "function") {
              instance2.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
          }
          if (typeof instance2.componentDidUpdate === "function") {
            workInProgress2.flags |= Update;
          }
          if (typeof instance2.getSnapshotBeforeUpdate === "function") {
            workInProgress2.flags |= Snapshot;
          }
        } else {
          if (typeof instance2.componentDidUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Update;
            }
          }
          if (typeof instance2.getSnapshotBeforeUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Snapshot;
            }
          }
          workInProgress2.memoizedProps = newProps;
          workInProgress2.memoizedState = newState;
        }
        instance2.props = newProps;
        instance2.state = newState;
        instance2.context = nextContext;
        return shouldUpdate;
      }
      var didWarnAboutMaps;
      var didWarnAboutGenerators;
      var didWarnAboutStringRefs;
      var ownerHasKeyUseWarning;
      var ownerHasFunctionTypeWarning;
      var warnForMissingKey = function(child, returnFiber) {
      };
      {
        didWarnAboutMaps = false;
        didWarnAboutGenerators = false;
        didWarnAboutStringRefs = {};
        ownerHasKeyUseWarning = {};
        ownerHasFunctionTypeWarning = {};
        warnForMissingKey = function(child, returnFiber) {
          if (child === null || typeof child !== "object") {
            return;
          }
          if (!child._store || child._store.validated || child.key != null) {
            return;
          }
          if (typeof child._store !== "object") {
            throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
          }
          child._store.validated = true;
          var componentName = getComponentNameFromFiber(returnFiber) || "Component";
          if (ownerHasKeyUseWarning[componentName]) {
            return;
          }
          ownerHasKeyUseWarning[componentName] = true;
          error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
        };
      }
      function coerceRef(returnFiber, current2, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
          {
            if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
            // because these cannot be automatically converted to an arrow function
            // using a codemod. Therefore, we don't have to warn about string refs again.
            !(element._owner && element._self && element._owner.stateNode !== element._self)) {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (!didWarnAboutStringRefs[componentName]) {
                {
                  error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                }
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
          if (element._owner) {
            var owner = element._owner;
            var inst;
            if (owner) {
              var ownerFiber = owner;
              if (ownerFiber.tag !== ClassComponent) {
                throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
              }
              inst = ownerFiber.stateNode;
            }
            if (!inst) {
              throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
            }
            var resolvedInst = inst;
            {
              checkPropStringCoercion(mixedRef, "ref");
            }
            var stringRef = "" + mixedRef;
            if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
              return current2.ref;
            }
            var ref = function(value) {
              var refs = resolvedInst.refs;
              if (refs === emptyRefsObject) {
                refs = resolvedInst.refs = {};
              }
              if (value === null) {
                delete refs[stringRef];
              } else {
                refs[stringRef] = value;
              }
            };
            ref._stringRef = stringRef;
            return ref;
          } else {
            if (typeof mixedRef !== "string") {
              throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
            }
            if (!element._owner) {
              throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
            }
          }
        }
        return mixedRef;
      }
      function throwOnInvalidObjectType(returnFiber, newChild) {
        var childString = Object.prototype.toString.call(newChild);
        throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
      }
      function warnOnFunctionType(returnFiber) {
        {
          var componentName = getComponentNameFromFiber(returnFiber) || "Component";
          if (ownerHasFunctionTypeWarning[componentName]) {
            return;
          }
          ownerHasFunctionTypeWarning[componentName] = true;
          error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
        }
      }
      function resolveLazy(lazyType2) {
        var payload = lazyType2._payload;
        var init2 = lazyType2._init;
        return init2(payload);
      }
      function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (!shouldTrackSideEffects) {
            return;
          }
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [childToDelete];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(childToDelete);
          }
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects) {
            return null;
          }
          var childToDelete = currentFirstChild;
          while (childToDelete !== null) {
            deleteChild(returnFiber, childToDelete);
            childToDelete = childToDelete.sibling;
          }
          return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
          var existingChildren = /* @__PURE__ */ new Map();
          var existingChild = currentFirstChild;
          while (existingChild !== null) {
            if (existingChild.key !== null) {
              existingChildren.set(existingChild.key, existingChild);
            } else {
              existingChildren.set(existingChild.index, existingChild);
            }
            existingChild = existingChild.sibling;
          }
          return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
          var clone = createWorkInProgress(fiber, pendingProps);
          clone.index = 0;
          clone.sibling = null;
          return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          newFiber.index = newIndex;
          if (!shouldTrackSideEffects) {
            newFiber.flags |= Forked;
            return lastPlacedIndex;
          }
          var current2 = newFiber.alternate;
          if (current2 !== null) {
            var oldIndex = current2.index;
            if (oldIndex < lastPlacedIndex) {
              newFiber.flags |= Placement;
              return lastPlacedIndex;
            } else {
              return oldIndex;
            }
          } else {
            newFiber.flags |= Placement;
            return lastPlacedIndex;
          }
        }
        function placeSingleChild(newFiber) {
          if (shouldTrackSideEffects && newFiber.alternate === null) {
            newFiber.flags |= Placement;
          }
          return newFiber;
        }
        function updateTextNode(returnFiber, current2, textContent, lanes) {
          if (current2 === null || current2.tag !== HostText) {
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, textContent);
            existing.return = returnFiber;
            return existing;
          }
        }
        function updateElement(returnFiber, current2, element, lanes) {
          var elementType = element.type;
          if (elementType === REACT_FRAGMENT_TYPE) {
            return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
          }
          if (current2 !== null) {
            if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
            isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
            // We need to do this after the Hot Reloading check above,
            // because hot reloading has different semantics than prod because
            // it doesn't resuspend. So we can't let the call below suspend.
            typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
              var existing = useFiber(current2, element.props);
              existing.ref = coerceRef(returnFiber, current2, element);
              existing.return = returnFiber;
              {
                existing._debugSource = element._source;
                existing._debugOwner = element._owner;
              }
              return existing;
            }
          }
          var created = createFiberFromElement(element, returnFiber.mode, lanes);
          created.ref = coerceRef(returnFiber, current2, element);
          created.return = returnFiber;
          return created;
        }
        function updatePortal(returnFiber, current2, portal, lanes) {
          if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, portal.children || []);
            existing.return = returnFiber;
            return existing;
          }
        }
        function updateFragment2(returnFiber, current2, fragment, lanes, key) {
          if (current2 === null || current2.tag !== Fragment) {
            var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, fragment);
            existing.return = returnFiber;
            return existing;
          }
        }
        function createChild(returnFiber, newChild, lanes) {
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                _created.ref = coerceRef(returnFiber, null, newChild);
                _created.return = returnFiber;
                return _created;
              }
              case REACT_PORTAL_TYPE: {
                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                _created2.return = returnFiber;
                return _created2;
              }
              case REACT_LAZY_TYPE: {
                var payload = newChild._payload;
                var init2 = newChild._init;
                return createChild(returnFiber, init2(payload), lanes);
              }
            }
            if (isArray2(newChild) || getIteratorFn(newChild)) {
              var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
              _created3.return = returnFiber;
              return _created3;
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
          var key = oldFiber !== null ? oldFiber.key : null;
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            if (key !== null) {
              return null;
            }
            return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                if (newChild.key === key) {
                  return updateElement(returnFiber, oldFiber, newChild, lanes);
                } else {
                  return null;
                }
              }
              case REACT_PORTAL_TYPE: {
                if (newChild.key === key) {
                  return updatePortal(returnFiber, oldFiber, newChild, lanes);
                } else {
                  return null;
                }
              }
              case REACT_LAZY_TYPE: {
                var payload = newChild._payload;
                var init2 = newChild._init;
                return updateSlot(returnFiber, oldFiber, init2(payload), lanes);
              }
            }
            if (isArray2(newChild) || getIteratorFn(newChild)) {
              if (key !== null) {
                return null;
              }
              return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            var matchedFiber = existingChildren.get(newIdx) || null;
            return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updateElement(returnFiber, _matchedFiber, newChild, lanes);
              }
              case REACT_PORTAL_TYPE: {
                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
              }
              case REACT_LAZY_TYPE:
                var payload = newChild._payload;
                var init2 = newChild._init;
                return updateFromMap(existingChildren, returnFiber, newIdx, init2(payload), lanes);
            }
            if (isArray2(newChild) || getIteratorFn(newChild)) {
              var _matchedFiber3 = existingChildren.get(newIdx) || null;
              return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function warnOnInvalidKey(child, knownKeys, returnFiber) {
          {
            if (typeof child !== "object" || child === null) {
              return knownKeys;
            }
            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(child, returnFiber);
                var key = child.key;
                if (typeof key !== "string") {
                  break;
                }
                if (knownKeys === null) {
                  knownKeys = /* @__PURE__ */ new Set();
                  knownKeys.add(key);
                  break;
                }
                if (!knownKeys.has(key)) {
                  knownKeys.add(key);
                  break;
                }
                error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", key);
                break;
              case REACT_LAZY_TYPE:
                var payload = child._payload;
                var init2 = child._init;
                warnOnInvalidKey(init2(payload), knownKeys, returnFiber);
                break;
            }
          }
          return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
          {
            var knownKeys = null;
            for (var i2 = 0; i2 < newChildren.length; i2++) {
              var child = newChildren[i2];
              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }
            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }
              break;
            }
            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }
            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (newIdx === newChildren.length) {
            deleteRemainingChildren(returnFiber, oldFiber);
            if (getIsHydrating()) {
              var numberOfForks = newIdx;
              pushTreeFork(returnFiber, numberOfForks);
            }
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
              if (_newFiber === null) {
                continue;
              }
              lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber;
              } else {
                previousNewFiber.sibling = _newFiber;
              }
              previousNewFiber = _newFiber;
            }
            if (getIsHydrating()) {
              var _numberOfForks = newIdx;
              pushTreeFork(returnFiber, _numberOfForks);
            }
            return resultingFirstChild;
          }
          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
            if (_newFiber2 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber2.alternate !== null) {
                  existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                }
              }
              lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber2;
              } else {
                previousNewFiber.sibling = _newFiber2;
              }
              previousNewFiber = _newFiber2;
            }
          }
          if (shouldTrackSideEffects) {
            existingChildren.forEach(function(child2) {
              return deleteChild(returnFiber, child2);
            });
          }
          if (getIsHydrating()) {
            var _numberOfForks2 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks2);
          }
          return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
          var iteratorFn = getIteratorFn(newChildrenIterable);
          if (typeof iteratorFn !== "function") {
            throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
          }
          {
            if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
            newChildrenIterable[Symbol.toStringTag] === "Generator") {
              if (!didWarnAboutGenerators) {
                error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
              }
              didWarnAboutGenerators = true;
            }
            if (newChildrenIterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
              }
              didWarnAboutMaps = true;
            }
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
              var knownKeys = null;
              var _step = _newChildren.next();
              for (; !_step.done; _step = _newChildren.next()) {
                var child = _step.value;
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
          }
          var newChildren = iteratorFn.call(newChildrenIterable);
          if (newChildren == null) {
            throw new Error("An iterable object provided no iterator.");
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          var step = newChildren.next();
          for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }
              break;
            }
            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }
            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (step.done) {
            deleteRemainingChildren(returnFiber, oldFiber);
            if (getIsHydrating()) {
              var numberOfForks = newIdx;
              pushTreeFork(returnFiber, numberOfForks);
            }
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber3 = createChild(returnFiber, step.value, lanes);
              if (_newFiber3 === null) {
                continue;
              }
              lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber3;
              } else {
                previousNewFiber.sibling = _newFiber3;
              }
              previousNewFiber = _newFiber3;
            }
            if (getIsHydrating()) {
              var _numberOfForks3 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks3);
            }
            return resultingFirstChild;
          }
          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
            if (_newFiber4 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber4.alternate !== null) {
                  existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                }
              }
              lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber4;
              } else {
                previousNewFiber.sibling = _newFiber4;
              }
              previousNewFiber = _newFiber4;
            }
          }
          if (shouldTrackSideEffects) {
            existingChildren.forEach(function(child2) {
              return deleteChild(returnFiber, child2);
            });
          }
          if (getIsHydrating()) {
            var _numberOfForks4 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks4);
          }
          return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, textContent);
            existing.return = returnFiber;
            return existing;
          }
          deleteRemainingChildren(returnFiber, currentFirstChild);
          var created = createFiberFromText(textContent, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
          var key = element.key;
          var child = currentFirstChild;
          while (child !== null) {
            if (child.key === key) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                if (child.tag === Fragment) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, element.props.children);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              } else {
                if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var _existing = useFiber(child, element.props);
                  _existing.ref = coerceRef(returnFiber, child, element);
                  _existing.return = returnFiber;
                  {
                    _existing._debugSource = element._source;
                    _existing._debugOwner = element._owner;
                  }
                  return _existing;
                }
              }
              deleteRemainingChildren(returnFiber, child);
              break;
            } else {
              deleteChild(returnFiber, child);
            }
            child = child.sibling;
          }
          if (element.type === REACT_FRAGMENT_TYPE) {
            var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
            created.return = returnFiber;
            return created;
          } else {
            var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
            _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
            _created4.return = returnFiber;
            return _created4;
          }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
          var key = portal.key;
          var child = currentFirstChild;
          while (child !== null) {
            if (child.key === key) {
              if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, portal.children || []);
                existing.return = returnFiber;
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }
            child = child.sibling;
          }
          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }
        function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
          var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
          if (isUnkeyedTopLevelFragment) {
            newChild = newChild.props.children;
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
              case REACT_PORTAL_TYPE:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
              case REACT_LAZY_TYPE:
                var payload = newChild._payload;
                var init2 = newChild._init;
                return reconcileChildFibers2(returnFiber, currentFirstChild, init2(payload), lanes);
            }
            if (isArray2(newChild)) {
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            }
            if (getIteratorFn(newChild)) {
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers2;
      }
      var reconcileChildFibers = ChildReconciler(true);
      var mountChildFibers = ChildReconciler(false);
      function cloneChildFibers(current2, workInProgress2) {
        if (current2 !== null && workInProgress2.child !== current2.child) {
          throw new Error("Resuming work not yet implemented.");
        }
        if (workInProgress2.child === null) {
          return;
        }
        var currentChild = workInProgress2.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress2.child = newChild;
        newChild.return = workInProgress2;
        while (currentChild.sibling !== null) {
          currentChild = currentChild.sibling;
          newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
          newChild.return = workInProgress2;
        }
        newChild.sibling = null;
      }
      function resetChildFibers(workInProgress2, lanes) {
        var child = workInProgress2.child;
        while (child !== null) {
          resetWorkInProgress(child, lanes);
          child = child.sibling;
        }
      }
      var NO_CONTEXT = {};
      var contextStackCursor$1 = createCursor(NO_CONTEXT);
      var contextFiberStackCursor = createCursor(NO_CONTEXT);
      var rootInstanceStackCursor = createCursor(NO_CONTEXT);
      function requiredContext(c) {
        if (c === NO_CONTEXT) {
          throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        }
        return c;
      }
      function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
      }
      function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance);
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
      }
      function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
      }
      function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
      }
      function pushHostContext(fiber) {
        requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type);
        if (context === nextContext) {
          return;
        }
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
      }
      function popHostContext(fiber) {
        if (contextFiberStackCursor.current !== fiber) {
          return;
        }
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
      }
      var DefaultSuspenseContext = 0;
      var SubtreeSuspenseContextMask = 1;
      var InvisibleParentSuspenseContext = 1;
      var ForceSuspenseFallback = 2;
      var suspenseStackCursor = createCursor(DefaultSuspenseContext);
      function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
      }
      function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
      }
      function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
      }
      function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
      }
      function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
      }
      function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
      }
      function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
        var nextState = workInProgress2.memoizedState;
        if (nextState !== null) {
          if (nextState.dehydrated !== null) {
            return true;
          }
          return false;
        }
        {
          return true;
        }
      }
      function findFirstSuspended(row) {
        var node2 = row;
        while (node2 !== null) {
          if (node2.tag === SuspenseComponent) {
            var state = node2.memoizedState;
            if (state !== null) {
              var dehydrated = state.dehydrated;
              if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                return node2;
              }
            }
          } else if (node2.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
          // keep track of whether it suspended or not.
          node2.memoizedProps.revealOrder !== void 0) {
            var didSuspend = (node2.flags & DidCapture) !== NoFlags;
            if (didSuspend) {
              return node2;
            }
          } else if (node2.child !== null) {
            node2.child.return = node2;
            node2 = node2.child;
            continue;
          }
          if (node2 === row) {
            return null;
          }
          while (node2.sibling === null) {
            if (node2.return === null || node2.return === row) {
              return null;
            }
            node2 = node2.return;
          }
          node2.sibling.return = node2.return;
          node2 = node2.sibling;
        }
        return null;
      }
      var NoFlags$1 = (
        /*   */
        0
      );
      var HasEffect = (
        /* */
        1
      );
      var Insertion2 = (
        /*  */
        2
      );
      var Layout = (
        /*    */
        4
      );
      var Passive$1 = (
        /*   */
        8
      );
      var workInProgressSources = [];
      function resetWorkInProgressVersions() {
        for (var i2 = 0; i2 < workInProgressSources.length; i2++) {
          var mutableSource = workInProgressSources[i2];
          {
            mutableSource._workInProgressVersionPrimary = null;
          }
        }
        workInProgressSources.length = 0;
      }
      function registerMutableSourceForHydration(root2, mutableSource) {
        var getVersion = mutableSource._getVersion;
        var version2 = getVersion(mutableSource._source);
        if (root2.mutableSourceEagerHydrationData == null) {
          root2.mutableSourceEagerHydrationData = [mutableSource, version2];
        } else {
          root2.mutableSourceEagerHydrationData.push(mutableSource, version2);
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
      var didWarnAboutMismatchedHooksForComponent;
      var didWarnUncachedGetSnapshot;
      {
        didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
      }
      var renderLanes = NoLanes;
      var currentlyRenderingFiber$1 = null;
      var currentHook = null;
      var workInProgressHook = null;
      var didScheduleRenderPhaseUpdate = false;
      var didScheduleRenderPhaseUpdateDuringThisPass = false;
      var localIdCounter = 0;
      var globalClientIdCounter = 0;
      var RE_RENDER_LIMIT = 25;
      var currentHookNameInDev = null;
      var hookTypesDev = null;
      var hookTypesUpdateIndexDev = -1;
      var ignorePreviousDependencies = false;
      function mountHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          if (hookTypesDev === null) {
            hookTypesDev = [hookName];
          } else {
            hookTypesDev.push(hookName);
          }
        }
      }
      function updateHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
              warnOnHookMismatchInDev(hookName);
            }
          }
        }
      }
      function checkDepsAreArrayDev(deps) {
        {
          if (deps !== void 0 && deps !== null && !isArray2(deps)) {
            error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
          }
        }
      }
      function warnOnHookMismatchInDev(currentHookName) {
        {
          var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
          if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
              var table = "";
              var secondColumnStart = 30;
              for (var i2 = 0; i2 <= hookTypesUpdateIndexDev; i2++) {
                var oldHookName = hookTypesDev[i2];
                var newHookName = i2 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                var row = i2 + 1 + ". " + oldHookName;
                while (row.length < secondColumnStart) {
                  row += " ";
                }
                row += newHookName + "\n";
                table += row;
              }
              error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
          }
        }
      }
      function throwInvalidHookError() {
        throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        {
          if (ignorePreviousDependencies) {
            return false;
          }
        }
        if (prevDeps === null) {
          {
            error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
          }
          return false;
        }
        {
          if (nextDeps.length !== prevDeps.length) {
            error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
          }
        }
        for (var i2 = 0; i2 < prevDeps.length && i2 < nextDeps.length; i2++) {
          if (objectIs(nextDeps[i2], prevDeps[i2])) {
            continue;
          }
          return false;
        }
        return true;
      }
      function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress2;
        {
          hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
          hookTypesUpdateIndexDev = -1;
          ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
        }
        workInProgress2.memoizedState = null;
        workInProgress2.updateQueue = null;
        workInProgress2.lanes = NoLanes;
        {
          if (current2 !== null && current2.memoizedState !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
          } else if (hookTypesDev !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
          } else {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
          }
        }
        var children = Component(props, secondArg);
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
          var numberOfReRenders = 0;
          do {
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
            if (numberOfReRenders >= RE_RENDER_LIMIT) {
              throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
            }
            numberOfReRenders += 1;
            {
              ignorePreviousDependencies = false;
            }
            currentHook = null;
            workInProgressHook = null;
            workInProgress2.updateQueue = null;
            {
              hookTypesUpdateIndexDev = -1;
            }
            ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
            children = Component(props, secondArg);
          } while (didScheduleRenderPhaseUpdateDuringThisPass);
        }
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        {
          workInProgress2._debugHookTypes = hookTypesDev;
        }
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          currentHookNameInDev = null;
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
          if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
          // and creates false positives. To make this work in legacy mode, we'd
          // need to mark fibers that commit in an incomplete state, somehow. For
          // now I'll disable the warning that most of the bugs that would trigger
          // it are either exclusive to concurrent mode or exist in both.
          (current2.mode & ConcurrentMode) !== NoMode) {
            error("Internal React error: Expected static flag was missing. Please notify the React team.");
          }
        }
        didScheduleRenderPhaseUpdate = false;
        if (didRenderTooFewHooks) {
          throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        }
        return children;
      }
      function checkDidRenderIdHook() {
        var didRenderIdHook = localIdCounter !== 0;
        localIdCounter = 0;
        return didRenderIdHook;
      }
      function bailoutHooks(current2, workInProgress2, lanes) {
        workInProgress2.updateQueue = current2.updateQueue;
        if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
          workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
        } else {
          workInProgress2.flags &= ~(Passive | Update);
        }
        current2.lanes = removeLanes(current2.lanes, lanes);
      }
      function resetHooksAfterThrow() {
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
          var hook = currentlyRenderingFiber$1.memoizedState;
          while (hook !== null) {
            var queue2 = hook.queue;
            if (queue2 !== null) {
              queue2.pending = null;
            }
            hook = hook.next;
          }
          didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
          currentHookNameInDev = null;
          isUpdatingOpaqueValueInRenderPhase = false;
        }
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        localIdCounter = 0;
      }
      function mountWorkInProgressHook() {
        var hook = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };
        if (workInProgressHook === null) {
          currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        } else {
          workInProgressHook = workInProgressHook.next = hook;
        }
        return workInProgressHook;
      }
      function updateWorkInProgressHook() {
        var nextCurrentHook;
        if (currentHook === null) {
          var current2 = currentlyRenderingFiber$1.alternate;
          if (current2 !== null) {
            nextCurrentHook = current2.memoizedState;
          } else {
            nextCurrentHook = null;
          }
        } else {
          nextCurrentHook = currentHook.next;
        }
        var nextWorkInProgressHook;
        if (workInProgressHook === null) {
          nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        } else {
          nextWorkInProgressHook = workInProgressHook.next;
        }
        if (nextWorkInProgressHook !== null) {
          workInProgressHook = nextWorkInProgressHook;
          nextWorkInProgressHook = workInProgressHook.next;
          currentHook = nextCurrentHook;
        } else {
          if (nextCurrentHook === null) {
            throw new Error("Rendered more hooks than during the previous render.");
          }
          currentHook = nextCurrentHook;
          var newHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
          } else {
            workInProgressHook = workInProgressHook.next = newHook;
          }
        }
        return workInProgressHook;
      }
      function createFunctionComponentUpdateQueue() {
        return {
          lastEffect: null,
          stores: null
        };
      }
      function basicStateReducer(state, action) {
        return typeof action === "function" ? action(state) : action;
      }
      function mountReducer(reducer, initialArg, init2) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init2 !== void 0) {
          initialState = init2(initialArg);
        } else {
          initialState = initialArg;
        }
        hook.memoizedState = hook.baseState = initialState;
        var queue2 = {
          pending: null,
          interleaved: null,
          lanes: NoLanes,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialState
        };
        hook.queue = queue2;
        var dispatch = queue2.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue2);
        return [hook.memoizedState, dispatch];
      }
      function updateReducer(reducer, initialArg, init2) {
        var hook = updateWorkInProgressHook();
        var queue2 = hook.queue;
        if (queue2 === null) {
          throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }
        queue2.lastRenderedReducer = reducer;
        var current2 = currentHook;
        var baseQueue = current2.baseQueue;
        var pendingQueue = queue2.pending;
        if (pendingQueue !== null) {
          if (baseQueue !== null) {
            var baseFirst = baseQueue.next;
            var pendingFirst = pendingQueue.next;
            baseQueue.next = pendingFirst;
            pendingQueue.next = baseFirst;
          }
          {
            if (current2.baseQueue !== baseQueue) {
              error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
            }
          }
          current2.baseQueue = baseQueue = pendingQueue;
          queue2.pending = null;
        }
        if (baseQueue !== null) {
          var first2 = baseQueue.next;
          var newState = current2.baseState;
          var newBaseState = null;
          var newBaseQueueFirst = null;
          var newBaseQueueLast = null;
          var update = first2;
          do {
            var updateLane = update.lane;
            if (!isSubsetOfLanes(renderLanes, updateLane)) {
              var clone = {
                lane: updateLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              };
              if (newBaseQueueLast === null) {
                newBaseQueueFirst = newBaseQueueLast = clone;
                newBaseState = newState;
              } else {
                newBaseQueueLast = newBaseQueueLast.next = clone;
              }
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
              markSkippedUpdateLanes(updateLane);
            } else {
              if (newBaseQueueLast !== null) {
                var _clone = {
                  // This update is going to be committed so we never want uncommit
                  // it. Using NoLane works because 0 is a subset of all bitmasks, so
                  // this will never be skipped by the check above.
                  lane: NoLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                newBaseQueueLast = newBaseQueueLast.next = _clone;
              }
              if (update.hasEagerState) {
                newState = update.eagerState;
              } else {
                var action = update.action;
                newState = reducer(newState, action);
              }
            }
            update = update.next;
          } while (update !== null && update !== first2);
          if (newBaseQueueLast === null) {
            newBaseState = newState;
          } else {
            newBaseQueueLast.next = newBaseQueueFirst;
          }
          if (!objectIs(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = newState;
          hook.baseState = newBaseState;
          hook.baseQueue = newBaseQueueLast;
          queue2.lastRenderedState = newState;
        }
        var lastInterleaved = queue2.interleaved;
        if (lastInterleaved !== null) {
          var interleaved = lastInterleaved;
          do {
            var interleavedLane = interleaved.lane;
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
            markSkippedUpdateLanes(interleavedLane);
            interleaved = interleaved.next;
          } while (interleaved !== lastInterleaved);
        } else if (baseQueue === null) {
          queue2.lanes = NoLanes;
        }
        var dispatch = queue2.dispatch;
        return [hook.memoizedState, dispatch];
      }
      function rerenderReducer(reducer, initialArg, init2) {
        var hook = updateWorkInProgressHook();
        var queue2 = hook.queue;
        if (queue2 === null) {
          throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }
        queue2.lastRenderedReducer = reducer;
        var dispatch = queue2.dispatch;
        var lastRenderPhaseUpdate = queue2.pending;
        var newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
          queue2.pending = null;
          var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
          var update = firstRenderPhaseUpdate;
          do {
            var action = update.action;
            newState = reducer(newState, action);
            update = update.next;
          } while (update !== firstRenderPhaseUpdate);
          if (!objectIs(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = newState;
          if (hook.baseQueue === null) {
            hook.baseState = newState;
          }
          queue2.lastRenderedState = newState;
        }
        return [newState, dispatch];
      }
      function mountMutableSource(source, getSnapshot, subscribe) {
        {
          return void 0;
        }
      }
      function updateMutableSource(source, getSnapshot, subscribe) {
        {
          return void 0;
        }
      }
      function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = mountWorkInProgressHook();
        var nextSnapshot;
        var isHydrating2 = getIsHydrating();
        if (isHydrating2) {
          if (getServerSnapshot === void 0) {
            throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
          }
          nextSnapshot = getServerSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              if (nextSnapshot !== getServerSnapshot()) {
                error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
        } else {
          nextSnapshot = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedSnapshot = getSnapshot();
              if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var root2 = getWorkInProgressRoot();
          if (root2 === null) {
            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          }
          if (!includesBlockingLane(root2, renderLanes)) {
            pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
          }
        }
        hook.memoizedState = nextSnapshot;
        var inst = {
          value: nextSnapshot,
          getSnapshot
        };
        hook.queue = inst;
        mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
        fiber.flags |= Passive;
        pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
        return nextSnapshot;
      }
      function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = updateWorkInProgressHook();
        var nextSnapshot = getSnapshot();
        {
          if (!didWarnUncachedGetSnapshot) {
            var cachedSnapshot = getSnapshot();
            if (!objectIs(nextSnapshot, cachedSnapshot)) {
              error("The result of getSnapshot should be cached to avoid an infinite loop");
              didWarnUncachedGetSnapshot = true;
            }
          }
        }
        var prevSnapshot = hook.memoizedState;
        var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
        if (snapshotChanged) {
          hook.memoizedState = nextSnapshot;
          markWorkInProgressReceivedUpdate();
        }
        var inst = hook.queue;
        updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
        if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
        // checking whether we scheduled a subscription effect above.
        workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
          fiber.flags |= Passive;
          pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
          var root2 = getWorkInProgressRoot();
          if (root2 === null) {
            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          }
          if (!includesBlockingLane(root2, renderLanes)) {
            pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
          }
        }
        return nextSnapshot;
      }
      function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
        fiber.flags |= StoreConsistency;
        var check = {
          getSnapshot,
          value: renderedSnapshot
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
          componentUpdateQueue = createFunctionComponentUpdateQueue();
          currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
          componentUpdateQueue.stores = [check];
        } else {
          var stores = componentUpdateQueue.stores;
          if (stores === null) {
            componentUpdateQueue.stores = [check];
          } else {
            stores.push(check);
          }
        }
      }
      function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
        inst.value = nextSnapshot;
        inst.getSnapshot = getSnapshot;
        if (checkIfSnapshotChanged(inst)) {
          forceStoreRerender(fiber);
        }
      }
      function subscribeToStore(fiber, inst, subscribe) {
        var handleStoreChange = function() {
          if (checkIfSnapshotChanged(inst)) {
            forceStoreRerender(fiber);
          }
        };
        return subscribe(handleStoreChange);
      }
      function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        var prevValue = inst.value;
        try {
          var nextValue = latestGetSnapshot();
          return !objectIs(prevValue, nextValue);
        } catch (error2) {
          return true;
        }
      }
      function forceStoreRerender(fiber) {
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }
      }
      function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === "function") {
          initialState = initialState();
        }
        hook.memoizedState = hook.baseState = initialState;
        var queue2 = {
          pending: null,
          interleaved: null,
          lanes: NoLanes,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialState
        };
        hook.queue = queue2;
        var dispatch = queue2.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue2);
        return [hook.memoizedState, dispatch];
      }
      function updateState(initialState) {
        return updateReducer(basicStateReducer);
      }
      function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
      }
      function pushEffect(tag, create, destroy, deps) {
        var effect = {
          tag,
          create,
          destroy,
          deps,
          // Circular
          next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
          componentUpdateQueue = createFunctionComponentUpdateQueue();
          currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
          componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
          var lastEffect = componentUpdateQueue.lastEffect;
          if (lastEffect === null) {
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var firstEffect = lastEffect.next;
            lastEffect.next = effect;
            effect.next = firstEffect;
            componentUpdateQueue.lastEffect = effect;
          }
        }
        return effect;
      }
      function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        {
          var _ref2 = {
            current: initialValue
          };
          hook.memoizedState = _ref2;
          return _ref2;
        }
      }
      function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
      }
      function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
      }
      function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        var destroy = void 0;
        if (currentHook !== null) {
          var prevEffect = currentHook.memoizedState;
          destroy = prevEffect.destroy;
          if (nextDeps !== null) {
            var prevDeps = prevEffect.deps;
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
              return;
            }
          }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
      }
      function mountEffect(create, deps) {
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
          return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
        } else {
          return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
        }
      }
      function updateEffect(create, deps) {
        return updateEffectImpl(Passive, Passive$1, create, deps);
      }
      function mountInsertionEffect(create, deps) {
        return mountEffectImpl(Update, Insertion2, create, deps);
      }
      function updateInsertionEffect(create, deps) {
        return updateEffectImpl(Update, Insertion2, create, deps);
      }
      function mountLayoutEffect(create, deps) {
        var fiberFlags = Update;
        {
          fiberFlags |= LayoutStatic;
        }
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
          fiberFlags |= MountLayoutDev;
        }
        return mountEffectImpl(fiberFlags, Layout, create, deps);
      }
      function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps);
      }
      function imperativeHandleEffect(create, ref) {
        if (typeof ref === "function") {
          var refCallback = ref;
          var _inst = create();
          refCallback(_inst);
          return function() {
            refCallback(null);
          };
        } else if (ref !== null && ref !== void 0) {
          var refObject = ref;
          {
            if (!refObject.hasOwnProperty("current")) {
              error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
            }
          }
          var _inst2 = create();
          refObject.current = _inst2;
          return function() {
            refObject.current = null;
          };
        }
      }
      function mountImperativeHandle(ref, create, deps) {
        {
          if (typeof create !== "function") {
            error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
          }
        }
        var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
        var fiberFlags = Update;
        {
          fiberFlags |= LayoutStatic;
        }
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
          fiberFlags |= MountLayoutDev;
        }
        return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }
      function updateImperativeHandle(ref, create, deps) {
        {
          if (typeof create !== "function") {
            error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
          }
        }
        var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }
      function mountDebugValue(value, formatterFn) {
      }
      var updateDebugValue = mountDebugValue;
      function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        hook.memoizedState = [callback, nextDeps];
        return callback;
      }
      function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }
        hook.memoizedState = [callback, nextDeps];
        return callback;
      }
      function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }
      function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }
      function mountDeferredValue(value) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = value;
        return value;
      }
      function updateDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        var resolvedCurrentHook = currentHook;
        var prevValue = resolvedCurrentHook.memoizedState;
        return updateDeferredValueImpl(hook, prevValue, value);
      }
      function rerenderDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        if (currentHook === null) {
          hook.memoizedState = value;
          return value;
        } else {
          var prevValue = currentHook.memoizedState;
          return updateDeferredValueImpl(hook, prevValue, value);
        }
      }
      function updateDeferredValueImpl(hook, prevValue, value) {
        var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
        if (shouldDeferValue) {
          if (!objectIs(value, prevValue)) {
            var deferredLane = claimNextTransitionLane();
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
            markSkippedUpdateLanes(deferredLane);
            hook.baseState = true;
          }
          return prevValue;
        } else {
          if (hook.baseState) {
            hook.baseState = false;
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = value;
          return value;
        }
      }
      function startTransition(setPending, callback, options2) {
        var previousPriority = getCurrentUpdatePriority();
        setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
        setPending(true);
        var prevTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition = {};
        var currentTransition = ReactCurrentBatchConfig$2.transition;
        {
          ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
        }
        try {
          setPending(false);
          callback();
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$2.transition = prevTransition;
          {
            if (prevTransition === null && currentTransition._updatedFibers) {
              var updatedFibersCount = currentTransition._updatedFibers.size;
              if (updatedFibersCount > 10) {
                warn2("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
              }
              currentTransition._updatedFibers.clear();
            }
          }
        }
      }
      function mountTransition() {
        var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
        var start = startTransition.bind(null, setPending);
        var hook = mountWorkInProgressHook();
        hook.memoizedState = start;
        return [isPending, start];
      }
      function updateTransition() {
        var _updateState = updateState(), isPending = _updateState[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [isPending, start];
      }
      function rerenderTransition() {
        var _rerenderState = rerenderState(), isPending = _rerenderState[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [isPending, start];
      }
      var isUpdatingOpaqueValueInRenderPhase = false;
      function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        {
          return isUpdatingOpaqueValueInRenderPhase;
        }
      }
      function mountId() {
        var hook = mountWorkInProgressHook();
        var root2 = getWorkInProgressRoot();
        var identifierPrefix = root2.identifierPrefix;
        var id;
        if (getIsHydrating()) {
          var treeId = getTreeId();
          id = ":" + identifierPrefix + "R" + treeId;
          var localId = localIdCounter++;
          if (localId > 0) {
            id += "H" + localId.toString(32);
          }
          id += ":";
        } else {
          var globalClientId = globalClientIdCounter++;
          id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
        }
        hook.memoizedState = id;
        return id;
      }
      function updateId() {
        var hook = updateWorkInProgressHook();
        var id = hook.memoizedState;
        return id;
      }
      function dispatchReducerAction(fiber, queue2, action) {
        {
          if (typeof arguments[3] === "function") {
            error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
          }
        }
        var lane = requestUpdateLane(fiber);
        var update = {
          lane,
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber)) {
          enqueueRenderPhaseUpdate(queue2, update);
        } else {
          var root2 = enqueueConcurrentHookUpdate(fiber, queue2, update, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitionUpdate(root2, queue2, lane);
          }
        }
        markUpdateInDevTools(fiber, lane);
      }
      function dispatchSetState(fiber, queue2, action) {
        {
          if (typeof arguments[3] === "function") {
            error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
          }
        }
        var lane = requestUpdateLane(fiber);
        var update = {
          lane,
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber)) {
          enqueueRenderPhaseUpdate(queue2, update);
        } else {
          var alternate = fiber.alternate;
          if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
            var lastRenderedReducer = queue2.lastRenderedReducer;
            if (lastRenderedReducer !== null) {
              var prevDispatcher;
              {
                prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              }
              try {
                var currentState = queue2.lastRenderedState;
                var eagerState = lastRenderedReducer(currentState, action);
                update.hasEagerState = true;
                update.eagerState = eagerState;
                if (objectIs(eagerState, currentState)) {
                  enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue2, update);
                  return;
                }
              } catch (error2) {
              } finally {
                {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }
            }
          }
          var root2 = enqueueConcurrentHookUpdate(fiber, queue2, update, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitionUpdate(root2, queue2, lane);
          }
        }
        markUpdateInDevTools(fiber, lane);
      }
      function isRenderPhaseUpdate(fiber) {
        var alternate = fiber.alternate;
        return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
      }
      function enqueueRenderPhaseUpdate(queue2, update) {
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        var pending = queue2.pending;
        if (pending === null) {
          update.next = update;
        } else {
          update.next = pending.next;
          pending.next = update;
        }
        queue2.pending = update;
      }
      function entangleTransitionUpdate(root2, queue2, lane) {
        if (isTransitionLane(lane)) {
          var queueLanes = queue2.lanes;
          queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
          var newQueueLanes = mergeLanes(queueLanes, lane);
          queue2.lanes = newQueueLanes;
          markRootEntangled(root2, newQueueLanes);
        }
      }
      function markUpdateInDevTools(fiber, lane, action) {
        {
          markStateUpdateScheduled(fiber, lane);
        }
      }
      var ContextOnlyDispatcher = {
        readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
      };
      var HooksDispatcherOnMountInDEV = null;
      var HooksDispatcherOnMountWithHookTypesInDEV = null;
      var HooksDispatcherOnUpdateInDEV = null;
      var HooksDispatcherOnRerenderInDEV = null;
      var InvalidNestedHooksDispatcherOnMountInDEV = null;
      var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
      var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
      {
        var warnInvalidContextAccess = function() {
          error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        };
        var warnInvalidHookAccess = function() {
          error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
        };
        HooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            mountHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init2) {
            currentHookNameInDev = "useReducer";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init2);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            mountHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            mountHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            mountHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            mountHookTypesDev();
            return mountMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            mountHookTypesDev();
            return mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnMountWithHookTypesInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init2) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init2);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return mountMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init2) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState();
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return updateDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return updateTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init2) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderReducer(reducer);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderState();
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return rerenderDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return rerenderTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init2) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init2);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init2) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState();
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init2) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderReducer(reducer);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderState();
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
      }
      var now$1 = Scheduler2.unstable_now;
      var commitTime = 0;
      var layoutEffectStartTime = -1;
      var profilerStartTime = -1;
      var passiveEffectStartTime = -1;
      var currentUpdateIsNested = false;
      var nestedUpdateScheduled = false;
      function isCurrentUpdateNested() {
        return currentUpdateIsNested;
      }
      function markNestedUpdateScheduled() {
        {
          nestedUpdateScheduled = true;
        }
      }
      function resetNestedUpdateFlag() {
        {
          currentUpdateIsNested = false;
          nestedUpdateScheduled = false;
        }
      }
      function syncNestedUpdateFlag() {
        {
          currentUpdateIsNested = nestedUpdateScheduled;
          nestedUpdateScheduled = false;
        }
      }
      function getCommitTime() {
        return commitTime;
      }
      function recordCommitTime() {
        commitTime = now$1();
      }
      function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) {
          fiber.actualStartTime = now$1();
        }
      }
      function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
      }
      function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
          var elapsedTime = now$1() - profilerStartTime;
          fiber.actualDuration += elapsedTime;
          if (overrideBaseTime) {
            fiber.selfBaseDuration = elapsedTime;
          }
          profilerStartTime = -1;
        }
      }
      function recordLayoutEffectDuration(fiber) {
        if (layoutEffectStartTime >= 0) {
          var elapsedTime = now$1() - layoutEffectStartTime;
          layoutEffectStartTime = -1;
          var parentFiber = fiber.return;
          while (parentFiber !== null) {
            switch (parentFiber.tag) {
              case HostRoot:
                var root2 = parentFiber.stateNode;
                root2.effectDuration += elapsedTime;
                return;
              case Profiler:
                var parentStateNode = parentFiber.stateNode;
                parentStateNode.effectDuration += elapsedTime;
                return;
            }
            parentFiber = parentFiber.return;
          }
        }
      }
      function recordPassiveEffectDuration(fiber) {
        if (passiveEffectStartTime >= 0) {
          var elapsedTime = now$1() - passiveEffectStartTime;
          passiveEffectStartTime = -1;
          var parentFiber = fiber.return;
          while (parentFiber !== null) {
            switch (parentFiber.tag) {
              case HostRoot:
                var root2 = parentFiber.stateNode;
                if (root2 !== null) {
                  root2.passiveEffectDuration += elapsedTime;
                }
                return;
              case Profiler:
                var parentStateNode = parentFiber.stateNode;
                if (parentStateNode !== null) {
                  parentStateNode.passiveEffectDuration += elapsedTime;
                }
                return;
            }
            parentFiber = parentFiber.return;
          }
        }
      }
      function startLayoutEffectTimer() {
        layoutEffectStartTime = now$1();
      }
      function startPassiveEffectTimer() {
        passiveEffectStartTime = now$1();
      }
      function transferActualDuration(fiber) {
        var child = fiber.child;
        while (child) {
          fiber.actualDuration += child.actualDuration;
          child = child.sibling;
        }
      }
      function createCapturedValueAtFiber(value, source) {
        return {
          value,
          source,
          stack: getStackByFiberInDevAndProd(source),
          digest: null
        };
      }
      function createCapturedValue(value, digest, stack) {
        return {
          value,
          source: null,
          stack: stack != null ? stack : null,
          digest: digest != null ? digest : null
        };
      }
      function showErrorDialog(boundary, errorInfo) {
        return true;
      }
      function logCapturedError(boundary, errorInfo) {
        try {
          var logError = showErrorDialog();
          if (logError === false) {
            return;
          }
          var error2 = errorInfo.value;
          {
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : "";
            if (error2 != null && error2._suppressLogging) {
              if (boundary.tag === ClassComponent) {
                return;
              }
              console["error"](error2);
            }
            var componentName = source ? getComponentNameFromFiber(source) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
            var errorBoundaryMessage;
            if (boundary.tag === HostRoot) {
              errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            } else {
              var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
              errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            }
            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
            console["error"](combinedMessage);
          }
        } catch (e) {
          setTimeout(function() {
            throw e;
          });
        }
      }
      var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
      function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        update.payload = {
          element: null
        };
        var error2 = errorInfo.value;
        update.callback = function() {
          onUncaughtError(error2);
          logCapturedError(fiber, errorInfo);
        };
        return update;
      }
      function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === "function") {
          var error$1 = errorInfo.value;
          update.payload = function() {
            return getDerivedStateFromError(error$1);
          };
          update.callback = function() {
            {
              markFailedErrorBoundaryForHotReloading(fiber);
            }
            logCapturedError(fiber, errorInfo);
          };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === "function") {
          update.callback = function callback() {
            {
              markFailedErrorBoundaryForHotReloading(fiber);
            }
            logCapturedError(fiber, errorInfo);
            if (typeof getDerivedStateFromError !== "function") {
              markLegacyErrorBoundaryAsFailed(this);
            }
            var error$12 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$12, {
              componentStack: stack !== null ? stack : ""
            });
            {
              if (typeof getDerivedStateFromError !== "function") {
                if (!includesSomeLane(fiber.lanes, SyncLane)) {
                  error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                }
              }
            }
          };
        }
        return update;
      }
      function attachPingListener(root2, wakeable, lanes) {
        var pingCache = root2.pingCache;
        var threadIDs;
        if (pingCache === null) {
          pingCache = root2.pingCache = new PossiblyWeakMap$1();
          threadIDs = /* @__PURE__ */ new Set();
          pingCache.set(wakeable, threadIDs);
        } else {
          threadIDs = pingCache.get(wakeable);
          if (threadIDs === void 0) {
            threadIDs = /* @__PURE__ */ new Set();
            pingCache.set(wakeable, threadIDs);
          }
        }
        if (!threadIDs.has(lanes)) {
          threadIDs.add(lanes);
          var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
          {
            if (isDevToolsPresent) {
              restorePendingUpdaters(root2, lanes);
            }
          }
          wakeable.then(ping, ping);
        }
      }
      function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
        var wakeables = suspenseBoundary.updateQueue;
        if (wakeables === null) {
          var updateQueue = /* @__PURE__ */ new Set();
          updateQueue.add(wakeable);
          suspenseBoundary.updateQueue = updateQueue;
        } else {
          wakeables.add(wakeable);
        }
      }
      function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
        var tag = sourceFiber.tag;
        if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
          var currentSource = sourceFiber.alternate;
          if (currentSource) {
            sourceFiber.updateQueue = currentSource.updateQueue;
            sourceFiber.memoizedState = currentSource.memoizedState;
            sourceFiber.lanes = currentSource.lanes;
          } else {
            sourceFiber.updateQueue = null;
            sourceFiber.memoizedState = null;
          }
        }
      }
      function getNearestSuspenseBoundaryToCapture(returnFiber) {
        var node2 = returnFiber;
        do {
          if (node2.tag === SuspenseComponent && shouldCaptureSuspense(node2)) {
            return node2;
          }
          node2 = node2.return;
        } while (node2 !== null);
        return null;
      }
      function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
        if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
          if (suspenseBoundary === returnFiber) {
            suspenseBoundary.flags |= ShouldCapture;
          } else {
            suspenseBoundary.flags |= DidCapture;
            sourceFiber.flags |= ForceUpdateForLegacySuspense;
            sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
            if (sourceFiber.tag === ClassComponent) {
              var currentSourceFiber = sourceFiber.alternate;
              if (currentSourceFiber === null) {
                sourceFiber.tag = IncompleteClassComponent;
              } else {
                var update = createUpdate(NoTimestamp, SyncLane);
                update.tag = ForceUpdate;
                enqueueUpdate(sourceFiber, update, SyncLane);
              }
            }
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
          }
          return suspenseBoundary;
        }
        suspenseBoundary.flags |= ShouldCapture;
        suspenseBoundary.lanes = rootRenderLanes;
        return suspenseBoundary;
      }
      function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
        sourceFiber.flags |= Incomplete;
        {
          if (isDevToolsPresent) {
            restorePendingUpdaters(root2, rootRenderLanes);
          }
        }
        if (value !== null && typeof value === "object" && typeof value.then === "function") {
          var wakeable = value;
          resetSuspendedComponent(sourceFiber);
          {
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
            }
          }
          var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
          if (suspenseBoundary !== null) {
            suspenseBoundary.flags &= ~ForceClientRender;
            markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
            if (suspenseBoundary.mode & ConcurrentMode) {
              attachPingListener(root2, wakeable, rootRenderLanes);
            }
            attachRetryListener(suspenseBoundary, root2, wakeable);
            return;
          } else {
            if (!includesSyncLane(rootRenderLanes)) {
              attachPingListener(root2, wakeable, rootRenderLanes);
              renderDidSuspendDelayIfPossible();
              return;
            }
            var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
            value = uncaughtSuspenseError;
          }
        } else {
          if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
            markDidThrowWhileHydratingDEV();
            var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (_suspenseBoundary !== null) {
              if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                _suspenseBoundary.flags |= ForceClientRender;
              }
              markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
              queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
              return;
            }
          }
        }
        value = createCapturedValueAtFiber(value, sourceFiber);
        renderDidError(value);
        var workInProgress2 = returnFiber;
        do {
          switch (workInProgress2.tag) {
            case HostRoot: {
              var _errorInfo = value;
              workInProgress2.flags |= ShouldCapture;
              var lane = pickArbitraryLane(rootRenderLanes);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
              var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
              enqueueCapturedUpdate(workInProgress2, update);
              return;
            }
            case ClassComponent:
              var errorInfo = value;
              var ctor = workInProgress2.type;
              var instance2 = workInProgress2.stateNode;
              if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance2 !== null && typeof instance2.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance2))) {
                workInProgress2.flags |= ShouldCapture;
                var _lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                enqueueCapturedUpdate(workInProgress2, _update);
                return;
              }
              break;
          }
          workInProgress2 = workInProgress2.return;
        } while (workInProgress2 !== null);
      }
      function getSuspendedCache() {
        {
          return null;
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      var didReceiveUpdate = false;
      var didWarnAboutBadClass;
      var didWarnAboutModulePatternComponent;
      var didWarnAboutContextTypeOnFunctionComponent;
      var didWarnAboutGetDerivedStateOnFunctionComponent;
      var didWarnAboutFunctionRefs;
      var didWarnAboutReassigningProps;
      var didWarnAboutRevealOrder;
      var didWarnAboutTailOptions;
      {
        didWarnAboutBadClass = {};
        didWarnAboutModulePatternComponent = {};
        didWarnAboutContextTypeOnFunctionComponent = {};
        didWarnAboutGetDerivedStateOnFunctionComponent = {};
        didWarnAboutFunctionRefs = {};
        didWarnAboutReassigningProps = false;
        didWarnAboutRevealOrder = {};
        didWarnAboutTailOptions = {};
      }
      function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
        if (current2 === null) {
          workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        } else {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
        }
      }
      function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
        workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
      }
      function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) {
              checkPropTypes2(
                innerPropTypes,
                nextProps,
                // Resolved props
                "prop",
                getComponentNameFromType(Component)
              );
            }
          }
        }
        var render3 = Component.render;
        var ref = workInProgress2.ref;
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress2, renderLanes2);
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          nextChildren = renderWithHooks(current2, workInProgress2, render3, nextProps, ref, renderLanes2);
          hasId = checkDidRenderIdHook();
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              nextChildren = renderWithHooks(current2, workInProgress2, render3, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        if (current2 !== null && !didReceiveUpdate) {
          bailoutHooks(current2, workInProgress2, renderLanes2);
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        if (getIsHydrating() && hasId) {
          pushMaterializedTreeId(workInProgress2);
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        if (current2 === null) {
          var type = Component.type;
          if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
          Component.defaultProps === void 0) {
            var resolvedType = type;
            {
              resolvedType = resolveFunctionForHotReloading(type);
            }
            workInProgress2.tag = SimpleMemoComponent;
            workInProgress2.type = resolvedType;
            {
              validateFunctionComponentInDev(workInProgress2, type);
            }
            return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
          }
          {
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) {
              checkPropTypes2(
                innerPropTypes,
                nextProps,
                // Resolved props
                "prop",
                getComponentNameFromType(type)
              );
            }
          }
          var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
          child.ref = workInProgress2.ref;
          child.return = workInProgress2;
          workInProgress2.child = child;
          return child;
        }
        {
          var _type = Component.type;
          var _innerPropTypes = _type.propTypes;
          if (_innerPropTypes) {
            checkPropTypes2(
              _innerPropTypes,
              nextProps,
              // Resolved props
              "prop",
              getComponentNameFromType(_type)
            );
          }
        }
        var currentChild = current2.child;
        var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
        if (!hasScheduledUpdateOrContext) {
          var prevProps = currentChild.memoizedProps;
          var compare = Component.compare;
          compare = compare !== null ? compare : shallowEqual;
          if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
        }
        workInProgress2.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress2.ref;
        newChild.return = workInProgress2;
        workInProgress2.child = newChild;
        return newChild;
      }
      function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var outerMemoType = workInProgress2.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
              var lazyComponent = outerMemoType;
              var payload = lazyComponent._payload;
              var init2 = lazyComponent._init;
              try {
                outerMemoType = init2(payload);
              } catch (x) {
                outerMemoType = null;
              }
              var outerPropTypes = outerMemoType && outerMemoType.propTypes;
              if (outerPropTypes) {
                checkPropTypes2(
                  outerPropTypes,
                  nextProps,
                  // Resolved (SimpleMemoComponent has no defaultProps)
                  "prop",
                  getComponentNameFromType(outerMemoType)
                );
              }
            }
          }
        }
        if (current2 !== null) {
          var prevProps = current2.memoizedProps;
          if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
          workInProgress2.type === current2.type) {
            didReceiveUpdate = false;
            workInProgress2.pendingProps = nextProps = prevProps;
            if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
              workInProgress2.lanes = current2.lanes;
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
              didReceiveUpdate = true;
            }
          }
        }
        return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
      }
      function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current2 !== null ? current2.memoizedState : null;
        if (nextProps.mode === "hidden" || enableLegacyHidden) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            var nextState = {
              baseLanes: NoLanes,
              cachePool: null,
              transitions: null
            };
            workInProgress2.memoizedState = nextState;
            pushRenderLanes(workInProgress2, renderLanes2);
          } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
            var spawnedCachePool = null;
            var nextBaseLanes;
            if (prevState !== null) {
              var prevBaseLanes = prevState.baseLanes;
              nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
            } else {
              nextBaseLanes = renderLanes2;
            }
            workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
            var _nextState = {
              baseLanes: nextBaseLanes,
              cachePool: spawnedCachePool,
              transitions: null
            };
            workInProgress2.memoizedState = _nextState;
            workInProgress2.updateQueue = null;
            pushRenderLanes(workInProgress2, nextBaseLanes);
            return null;
          } else {
            var _nextState2 = {
              baseLanes: NoLanes,
              cachePool: null,
              transitions: null
            };
            workInProgress2.memoizedState = _nextState2;
            var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
            pushRenderLanes(workInProgress2, subtreeRenderLanes2);
          }
        } else {
          var _subtreeRenderLanes;
          if (prevState !== null) {
            _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
            workInProgress2.memoizedState = null;
          } else {
            _subtreeRenderLanes = renderLanes2;
          }
          pushRenderLanes(workInProgress2, _subtreeRenderLanes);
        }
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateFragment(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateMode(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps.children;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateProfiler(current2, workInProgress2, renderLanes2) {
        {
          workInProgress2.flags |= Update;
          {
            var stateNode = workInProgress2.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
        }
        var nextProps = workInProgress2.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function markRef(current2, workInProgress2) {
        var ref = workInProgress2.ref;
        if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
          workInProgress2.flags |= Ref;
          {
            workInProgress2.flags |= RefStatic;
          }
        }
      }
      function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) {
              checkPropTypes2(
                innerPropTypes,
                nextProps,
                // Resolved props
                "prop",
                getComponentNameFromType(Component)
              );
            }
          }
        }
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
          context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress2, renderLanes2);
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
          hasId = checkDidRenderIdHook();
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        if (current2 !== null && !didReceiveUpdate) {
          bailoutHooks(current2, workInProgress2, renderLanes2);
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        if (getIsHydrating() && hasId) {
          pushMaterializedTreeId(workInProgress2);
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        {
          switch (shouldError(workInProgress2)) {
            case false: {
              var _instance = workInProgress2.stateNode;
              var ctor = workInProgress2.type;
              var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
              var state = tempInstance.state;
              _instance.updater.enqueueSetState(_instance, state, null);
              break;
            }
            case true: {
              workInProgress2.flags |= DidCapture;
              workInProgress2.flags |= ShouldCapture;
              var error$1 = new Error("Simulated error coming from DevTools");
              var lane = pickArbitraryLane(renderLanes2);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
              var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
              enqueueCapturedUpdate(workInProgress2, update);
              break;
            }
          }
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) {
              checkPropTypes2(
                innerPropTypes,
                nextProps,
                // Resolved props
                "prop",
                getComponentNameFromType(Component)
              );
            }
          }
        }
        var hasContext;
        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress2);
        } else {
          hasContext = false;
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var instance2 = workInProgress2.stateNode;
        var shouldUpdate;
        if (instance2 === null) {
          resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
          constructClassInstance(workInProgress2, Component, nextProps);
          mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          shouldUpdate = true;
        } else if (current2 === null) {
          shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
        } else {
          shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
        }
        var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
        {
          var inst = workInProgress2.stateNode;
          if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) {
              error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
            }
            didWarnAboutReassigningProps = true;
          }
        }
        return nextUnitOfWork;
      }
      function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
        markRef(current2, workInProgress2);
        var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError) {
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component, false);
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        var instance2 = workInProgress2.stateNode;
        ReactCurrentOwner$1.current = workInProgress2;
        var nextChildren;
        if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
          nextChildren = null;
          {
            stopProfilerTimerIfRunning();
          }
        } else {
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            setIsRendering(true);
            nextChildren = instance2.render();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance2.render();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
        }
        workInProgress2.flags |= PerformedWork;
        if (current2 !== null && didCaptureError) {
          forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
        } else {
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        workInProgress2.memoizedState = instance2.state;
        if (hasContext) {
          invalidateContextProvider(workInProgress2, Component, true);
        }
        return workInProgress2.child;
      }
      function pushHostRootContext(workInProgress2) {
        var root2 = workInProgress2.stateNode;
        if (root2.pendingContext) {
          pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
        } else if (root2.context) {
          pushTopLevelContextObject(workInProgress2, root2.context, false);
        }
        pushHostContainer(workInProgress2, root2.containerInfo);
      }
      function updateHostRoot(current2, workInProgress2, renderLanes2) {
        pushHostRootContext(workInProgress2);
        if (current2 === null) {
          throw new Error("Should have a current fiber. This is a bug in React.");
        }
        var nextProps = workInProgress2.pendingProps;
        var prevState = workInProgress2.memoizedState;
        var prevChildren = prevState.element;
        cloneUpdateQueue(current2, workInProgress2);
        processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
        var nextState = workInProgress2.memoizedState;
        var nextChildren = nextState.element;
        if (prevState.isDehydrated) {
          var overrideState = {
            element: nextChildren,
            isDehydrated: false,
            cache: nextState.cache,
            pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
            transitions: nextState.transitions
          };
          var updateQueue = workInProgress2.updateQueue;
          updateQueue.baseState = overrideState;
          workInProgress2.memoizedState = overrideState;
          if (workInProgress2.flags & ForceClientRender) {
            var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
            return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
          } else if (nextChildren !== prevChildren) {
            var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
            return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
          } else {
            enterHydrationState(workInProgress2);
            var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            workInProgress2.child = child;
            var node2 = child;
            while (node2) {
              node2.flags = node2.flags & ~Placement | Hydrating;
              node2 = node2.sibling;
            }
          }
        } else {
          resetHydrationState();
          if (nextChildren === prevChildren) {
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        return workInProgress2.child;
      }
      function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
        resetHydrationState();
        queueHydrationError(recoverableError);
        workInProgress2.flags |= ForceClientRender;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateHostComponent(current2, workInProgress2, renderLanes2) {
        pushHostContext(workInProgress2);
        if (current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
        }
        var type = workInProgress2.type;
        var nextProps = workInProgress2.pendingProps;
        var prevProps = current2 !== null ? current2.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) {
          nextChildren = null;
        } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
          workInProgress2.flags |= ContentReset;
        }
        markRef(current2, workInProgress2);
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateHostText(current2, workInProgress2) {
        if (current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
        }
        return null;
      }
      function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        var props = workInProgress2.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init2 = lazyComponent._init;
        var Component = init2(payload);
        workInProgress2.type = Component;
        var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;
        switch (resolvedTag) {
          case FunctionComponent: {
            {
              validateFunctionComponentInDev(workInProgress2, Component);
              workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
            }
            child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
            return child;
          }
          case ClassComponent: {
            {
              workInProgress2.type = Component = resolveClassForHotReloading(Component);
            }
            child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
            return child;
          }
          case ForwardRef: {
            {
              workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
            }
            child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
            return child;
          }
          case MemoComponent: {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerPropTypes = Component.propTypes;
                if (outerPropTypes) {
                  checkPropTypes2(
                    outerPropTypes,
                    resolvedProps,
                    // Resolved for outer only
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            child = updateMemoComponent(
              null,
              workInProgress2,
              Component,
              resolveDefaultProps(Component.type, resolvedProps),
              // The inner type can have defaults too
              renderLanes2
            );
            return child;
          }
        }
        var hint = "";
        {
          if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
            hint = " Did you wrap a component in React.lazy() more than once?";
          }
        }
        throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
      }
      function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        workInProgress2.tag = ClassComponent;
        var hasContext;
        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress2);
        } else {
          hasContext = false;
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        constructClassInstance(workInProgress2, Component, nextProps);
        mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
        return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
      }
      function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        var props = workInProgress2.pendingProps;
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
          context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var value;
        var hasId;
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          if (Component.prototype && typeof Component.prototype.render === "function") {
            var componentName = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutBadClass[componentName]) {
              error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
              didWarnAboutBadClass[componentName] = true;
            }
          }
          if (workInProgress2.mode & StrictLegacyMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
          }
          setIsRendering(true);
          ReactCurrentOwner$1.current = workInProgress2;
          value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
          hasId = checkDidRenderIdHook();
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        workInProgress2.flags |= PerformedWork;
        {
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
            var _componentName = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName]) {
              error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
              didWarnAboutModulePatternComponent[_componentName] = true;
            }
          }
        }
        if (
          // Run these checks in production only if the flag is off.
          // Eventually we'll delete this branch altogether.
          typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
        ) {
          {
            var _componentName2 = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName2]) {
              error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
              didWarnAboutModulePatternComponent[_componentName2] = true;
            }
          }
          workInProgress2.tag = ClassComponent;
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          var hasContext = false;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
          initializeUpdateQueue(workInProgress2);
          adoptClassInstance(workInProgress2, value);
          mountClassInstance(workInProgress2, Component, props, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
        } else {
          workInProgress2.tag = FunctionComponent;
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          reconcileChildren(null, workInProgress2, value, renderLanes2);
          {
            validateFunctionComponentInDev(workInProgress2, Component);
          }
          return workInProgress2.child;
        }
      }
      function validateFunctionComponentInDev(workInProgress2, Component) {
        {
          if (Component) {
            if (Component.childContextTypes) {
              error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
            }
          }
          if (workInProgress2.ref !== null) {
            var info2 = "";
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              info2 += "\n\nCheck the render method of `" + ownerName + "`.";
            }
            var warningKey = ownerName || "";
            var debugSource = workInProgress2._debugSource;
            if (debugSource) {
              warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
            }
            if (!didWarnAboutFunctionRefs[warningKey]) {
              didWarnAboutFunctionRefs[warningKey] = true;
              error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info2);
            }
          }
          if (typeof Component.getDerivedStateFromProps === "function") {
            var _componentName3 = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
              error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
              didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
          }
          if (typeof Component.contextType === "object" && Component.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
              error("%s: Function components do not support contextType.", _componentName4);
              didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
          }
        }
      }
      var SUSPENDED_MARKER = {
        dehydrated: null,
        treeContext: null,
        retryLane: NoLane
      };
      function mountSuspenseOffscreenState(renderLanes2) {
        return {
          baseLanes: renderLanes2,
          cachePool: getSuspendedCache(),
          transitions: null
        };
      }
      function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
        var cachePool = null;
        return {
          baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
          cachePool,
          transitions: prevOffscreenState.transitions
        };
      }
      function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
        if (current2 !== null) {
          var suspenseState = current2.memoizedState;
          if (suspenseState === null) {
            return false;
          }
        }
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
      }
      function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
        return removeLanes(current2.childLanes, renderLanes2);
      }
      function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        {
          if (shouldSuspend(workInProgress2)) {
            workInProgress2.flags |= DidCapture;
          }
        }
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
          showFallback = true;
          workInProgress2.flags &= ~DidCapture;
        } else {
          if (current2 === null || current2.memoizedState !== null) {
            {
              suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
            }
          }
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress2, suspenseContext);
        if (current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
          var suspenseState = workInProgress2.memoizedState;
          if (suspenseState !== null) {
            var dehydrated = suspenseState.dehydrated;
            if (dehydrated !== null) {
              return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
            }
          }
          var nextPrimaryChildren = nextProps.children;
          var nextFallbackChildren = nextProps.fallback;
          if (showFallback) {
            var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
            var primaryChildFragment = workInProgress2.child;
            primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            return fallbackFragment;
          } else {
            return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
          }
        } else {
          var prevState = current2.memoizedState;
          if (prevState !== null) {
            var _dehydrated = prevState.dehydrated;
            if (_dehydrated !== null) {
              return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
            }
          }
          if (showFallback) {
            var _nextFallbackChildren = nextProps.fallback;
            var _nextPrimaryChildren = nextProps.children;
            var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
            var _primaryChildFragment2 = workInProgress2.child;
            var prevOffscreenState = current2.child.memoizedState;
            _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
            _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            return fallbackChildFragment;
          } else {
            var _nextPrimaryChildren2 = nextProps.children;
            var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
            workInProgress2.memoizedState = null;
            return _primaryChildFragment3;
          }
        }
      }
      function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
        primaryChildFragment.return = workInProgress2;
        workInProgress2.child = primaryChildFragment;
        return primaryChildFragment;
      }
      function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var progressedPrimaryFragment = workInProgress2.child;
        var primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;
        if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
          primaryChildFragment = progressedPrimaryFragment;
          primaryChildFragment.childLanes = NoLanes;
          primaryChildFragment.pendingProps = primaryChildProps;
          if (workInProgress2.mode & ProfileMode) {
            primaryChildFragment.actualDuration = 0;
            primaryChildFragment.actualStartTime = -1;
            primaryChildFragment.selfBaseDuration = 0;
            primaryChildFragment.treeBaseDuration = 0;
          }
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
        } else {
          primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
        }
        primaryChildFragment.return = workInProgress2;
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        return fallbackChildFragment;
      }
      function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
        return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
      }
      function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
        return createWorkInProgress(current2, offscreenProps);
      }
      function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
        var currentPrimaryChildFragment = current2.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
          mode: "visible",
          children: primaryChildren
        });
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          primaryChildFragment.lanes = renderLanes2;
        }
        primaryChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = null;
        if (currentFallbackChildFragment !== null) {
          var deletions = workInProgress2.deletions;
          if (deletions === null) {
            workInProgress2.deletions = [currentFallbackChildFragment];
            workInProgress2.flags |= ChildDeletion;
          } else {
            deletions.push(currentFallbackChildFragment);
          }
        }
        workInProgress2.child = primaryChildFragment;
        return primaryChildFragment;
      }
      function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var currentPrimaryChildFragment = current2.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        };
        var primaryChildFragment;
        if (
          // In legacy mode, we commit the primary tree as if it successfully
          // completed, even though it's in an inconsistent state.
          (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
          // already cloned. In legacy mode, the only case where this isn't true is
          // when DevTools forces us to display a fallback; we skip the first render
          // pass entirely and go straight to rendering the fallback. (In Concurrent
          // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
          // only codepath.)
          workInProgress2.child !== currentPrimaryChildFragment
        ) {
          var progressedPrimaryFragment = workInProgress2.child;
          primaryChildFragment = progressedPrimaryFragment;
          primaryChildFragment.childLanes = NoLanes;
          primaryChildFragment.pendingProps = primaryChildProps;
          if (workInProgress2.mode & ProfileMode) {
            primaryChildFragment.actualDuration = 0;
            primaryChildFragment.actualStartTime = -1;
            primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
            primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
          }
          workInProgress2.deletions = null;
        } else {
          primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
          primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
        }
        var fallbackChildFragment;
        if (currentFallbackChildFragment !== null) {
          fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        } else {
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement;
        }
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        return fallbackChildFragment;
      }
      function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
        if (recoverableError !== null) {
          queueHydrationError(recoverableError);
        }
        reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        var nextProps = workInProgress2.pendingProps;
        var primaryChildren = nextProps.children;
        var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
        primaryChildFragment.flags |= Placement;
        workInProgress2.memoizedState = null;
        return primaryChildFragment;
      }
      function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var fiberMode = workInProgress2.mode;
        var primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
        var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
        fallbackChildFragment.flags |= Placement;
        primaryChildFragment.return = workInProgress2;
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        }
        return fallbackChildFragment;
      }
      function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          {
            error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
          }
          workInProgress2.lanes = laneToLanes(SyncLane);
        } else if (isSuspenseInstanceFallback(suspenseInstance)) {
          workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
        } else {
          workInProgress2.lanes = laneToLanes(OffscreenLane);
        }
        return null;
      }
      function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
        if (!didSuspend) {
          warnIfHydrating();
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            return retrySuspenseComponentWithoutHydrating(
              current2,
              workInProgress2,
              renderLanes2,
              // TODO: When we delete legacy mode, we should make this error argument
              // required — every concurrent mode path that causes hydration to
              // de-opt to client rendering should have an error message.
              null
            );
          }
          if (isSuspenseInstanceFallback(suspenseInstance)) {
            var digest, message, stack;
            {
              var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
              digest = _getSuspenseInstanceF.digest;
              message = _getSuspenseInstanceF.message;
              stack = _getSuspenseInstanceF.stack;
            }
            var error2;
            if (message) {
              error2 = new Error(message);
            } else {
              error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
            }
            var capturedValue = createCapturedValue(error2, digest, stack);
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
          }
          var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
          if (didReceiveUpdate || hasContextChanged2) {
            var root2 = getWorkInProgressRoot();
            if (root2 !== null) {
              var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
              if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                suspenseState.retryLane = attemptHydrationAtLane;
                var eventTime = NoTimestamp;
                enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
              }
            }
            renderDidSuspendDelayIfPossible();
            var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
          } else if (isSuspenseInstancePending(suspenseInstance)) {
            workInProgress2.flags |= DidCapture;
            workInProgress2.child = current2.child;
            var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
            registerSuspenseInstanceRetry(suspenseInstance, retry);
            return null;
          } else {
            reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Hydrating;
            return primaryChildFragment;
          }
        } else {
          if (workInProgress2.flags & ForceClientRender) {
            workInProgress2.flags &= ~ForceClientRender;
            var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
          } else if (workInProgress2.memoizedState !== null) {
            workInProgress2.child = current2.child;
            workInProgress2.flags |= DidCapture;
            return null;
          } else {
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
            var _primaryChildFragment4 = workInProgress2.child;
            _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            return fallbackChildFragment;
          }
        }
      }
      function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
        var alternate = fiber.alternate;
        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
        }
        scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
      }
      function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
        var node2 = firstChild;
        while (node2 !== null) {
          if (node2.tag === SuspenseComponent) {
            var state = node2.memoizedState;
            if (state !== null) {
              scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
            }
          } else if (node2.tag === SuspenseListComponent) {
            scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
          } else if (node2.child !== null) {
            node2.child.return = node2;
            node2 = node2.child;
            continue;
          }
          if (node2 === workInProgress2) {
            return;
          }
          while (node2.sibling === null) {
            if (node2.return === null || node2.return === workInProgress2) {
              return;
            }
            node2 = node2.return;
          }
          node2.sibling.return = node2.return;
          node2 = node2.sibling;
        }
      }
      function findLastContentRow(firstChild) {
        var row = firstChild;
        var lastContentRow = null;
        while (row !== null) {
          var currentRow = row.alternate;
          if (currentRow !== null && findFirstSuspended(currentRow) === null) {
            lastContentRow = row;
          }
          row = row.sibling;
        }
        return lastContentRow;
      }
      function validateRevealOrder(revealOrder) {
        {
          if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === "string") {
              switch (revealOrder.toLowerCase()) {
                case "together":
                case "forwards":
                case "backwards": {
                  error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
                case "forward":
                case "backward": {
                  error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
                default:
                  error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                  break;
              }
            } else {
              error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
            }
          }
        }
      }
      function validateTailOptions(tailMode, revealOrder) {
        {
          if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== "collapsed" && tailMode !== "hidden") {
              didWarnAboutTailOptions[tailMode] = true;
              error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
            } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
              didWarnAboutTailOptions[tailMode] = true;
              error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
            }
          }
        }
      }
      function validateSuspenseListNestedChild(childSlot, index3) {
        {
          var isAnArray = isArray2(childSlot);
          var isIterable2 = !isAnArray && typeof getIteratorFn(childSlot) === "function";
          if (isAnArray || isIterable2) {
            var type = isAnArray ? "array" : "iterable";
            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index3, type);
            return false;
          }
        }
        return true;
      }
      function validateSuspenseListChildren(children, revealOrder) {
        {
          if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
            if (isArray2(children)) {
              for (var i2 = 0; i2 < children.length; i2++) {
                if (!validateSuspenseListNestedChild(children[i2], i2)) {
                  return;
                }
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var childrenIterator = iteratorFn.call(children);
                if (childrenIterator) {
                  var step = childrenIterator.next();
                  var _i = 0;
                  for (; !step.done; step = childrenIterator.next()) {
                    if (!validateSuspenseListNestedChild(step.value, _i)) {
                      return;
                    }
                    _i++;
                  }
                }
              } else {
                error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
              }
            }
          }
        }
      }
      function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
        var renderState = workInProgress2.memoizedState;
        if (renderState === null) {
          workInProgress2.memoizedState = {
            isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail,
            tailMode
          };
        } else {
          renderState.isBackwards = isBackwards;
          renderState.rendering = null;
          renderState.renderingStartTime = 0;
          renderState.last = lastContentRow;
          renderState.tail = tail;
          renderState.tailMode = tailMode;
        }
      }
      function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
          suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          workInProgress2.flags |= DidCapture;
        } else {
          var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
          if (didSuspendBefore) {
            propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress2, suspenseContext);
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          workInProgress2.memoizedState = null;
        } else {
          switch (revealOrder) {
            case "forwards": {
              var lastContentRow = findLastContentRow(workInProgress2.child);
              var tail;
              if (lastContentRow === null) {
                tail = workInProgress2.child;
                workInProgress2.child = null;
              } else {
                tail = lastContentRow.sibling;
                lastContentRow.sibling = null;
              }
              initSuspenseListRenderState(
                workInProgress2,
                false,
                // isBackwards
                tail,
                lastContentRow,
                tailMode
              );
              break;
            }
            case "backwards": {
              var _tail = null;
              var row = workInProgress2.child;
              workInProgress2.child = null;
              while (row !== null) {
                var currentRow = row.alternate;
                if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                  workInProgress2.child = row;
                  break;
                }
                var nextRow = row.sibling;
                row.sibling = _tail;
                _tail = row;
                row = nextRow;
              }
              initSuspenseListRenderState(
                workInProgress2,
                true,
                // isBackwards
                _tail,
                null,
                // last
                tailMode
              );
              break;
            }
            case "together": {
              initSuspenseListRenderState(
                workInProgress2,
                false,
                // isBackwards
                null,
                // tail
                null,
                // last
                void 0
              );
              break;
            }
            default: {
              workInProgress2.memoizedState = null;
            }
          }
        }
        return workInProgress2.child;
      }
      function updatePortalComponent(current2, workInProgress2, renderLanes2) {
        pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
        var nextChildren = workInProgress2.pendingProps;
        if (current2 === null) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        } else {
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        return workInProgress2.child;
      }
      var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
      function updateContextProvider(current2, workInProgress2, renderLanes2) {
        var providerType = workInProgress2.type;
        var context = providerType._context;
        var newProps = workInProgress2.pendingProps;
        var oldProps = workInProgress2.memoizedProps;
        var newValue = newProps.value;
        {
          if (!("value" in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
              hasWarnedAboutUsingNoValuePropOnContextProvider = true;
              error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
            }
          }
          var providerPropTypes = workInProgress2.type.propTypes;
          if (providerPropTypes) {
            checkPropTypes2(providerPropTypes, newProps, "prop", "Context.Provider");
          }
        }
        pushProvider(workInProgress2, context, newValue);
        {
          if (oldProps !== null) {
            var oldValue = oldProps.value;
            if (objectIs(oldValue, newValue)) {
              if (oldProps.children === newProps.children && !hasContextChanged()) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            } else {
              propagateContextChange(workInProgress2, context, renderLanes2);
            }
          }
        }
        var newChildren = newProps.children;
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        return workInProgress2.child;
      }
      var hasWarnedAboutUsingContextAsConsumer = false;
      function updateContextConsumer(current2, workInProgress2, renderLanes2) {
        var context = workInProgress2.type;
        {
          if (context._context === void 0) {
            if (context !== context.Consumer) {
              if (!hasWarnedAboutUsingContextAsConsumer) {
                hasWarnedAboutUsingContextAsConsumer = true;
                error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
              }
            }
          } else {
            context = context._context;
          }
        }
        var newProps = workInProgress2.pendingProps;
        var render3 = newProps.children;
        {
          if (typeof render3 !== "function") {
            error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
          }
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var newValue = readContext(context);
        {
          markComponentRenderStarted(workInProgress2);
        }
        var newChildren;
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          newChildren = render3(newValue);
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        return workInProgress2.child;
      }
      function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
      }
      function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          if (current2 !== null) {
            current2.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement;
          }
        }
      }
      function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
        if (current2 !== null) {
          workInProgress2.dependencies = current2.dependencies;
        }
        {
          stopProfilerTimerIfRunning();
        }
        markSkippedUpdateLanes(workInProgress2.lanes);
        if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
          {
            return null;
          }
        }
        cloneChildFibers(current2, workInProgress2);
        return workInProgress2.child;
      }
      function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
        {
          var returnFiber = oldWorkInProgress.return;
          if (returnFiber === null) {
            throw new Error("Cannot swap the root fiber.");
          }
          current2.alternate = null;
          oldWorkInProgress.alternate = null;
          newWorkInProgress.index = oldWorkInProgress.index;
          newWorkInProgress.sibling = oldWorkInProgress.sibling;
          newWorkInProgress.return = oldWorkInProgress.return;
          newWorkInProgress.ref = oldWorkInProgress.ref;
          if (oldWorkInProgress === returnFiber.child) {
            returnFiber.child = newWorkInProgress;
          } else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) {
              throw new Error("Expected parent to have a child.");
            }
            while (prevSibling.sibling !== oldWorkInProgress) {
              prevSibling = prevSibling.sibling;
              if (prevSibling === null) {
                throw new Error("Expected to find the previous sibling.");
              }
            }
            prevSibling.sibling = newWorkInProgress;
          }
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [current2];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(current2);
          }
          newWorkInProgress.flags |= Placement;
          return newWorkInProgress;
        }
      }
      function checkScheduledUpdateOrContext(current2, renderLanes2) {
        var updateLanes = current2.lanes;
        if (includesSomeLane(updateLanes, renderLanes2)) {
          return true;
        }
        return false;
      }
      function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
        switch (workInProgress2.tag) {
          case HostRoot:
            pushHostRootContext(workInProgress2);
            resetHydrationState();
            break;
          case HostComponent:
            pushHostContext(workInProgress2);
            break;
          case ClassComponent: {
            var Component = workInProgress2.type;
            if (isContextProvider(Component)) {
              pushContextProvider(workInProgress2);
            }
            break;
          }
          case HostPortal:
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            break;
          case ContextProvider: {
            var newValue = workInProgress2.memoizedProps.value;
            var context = workInProgress2.type._context;
            pushProvider(workInProgress2, context, newValue);
            break;
          }
          case Profiler:
            {
              var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              if (hasChildWork) {
                workInProgress2.flags |= Update;
              }
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            break;
          case SuspenseComponent: {
            var state = workInProgress2.memoizedState;
            if (state !== null) {
              if (state.dehydrated !== null) {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                workInProgress2.flags |= DidCapture;
                return null;
              }
              var primaryChildFragment = workInProgress2.child;
              var primaryChildLanes = primaryChildFragment.childLanes;
              if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              } else {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                if (child !== null) {
                  return child.sibling;
                } else {
                  return null;
                }
              }
            } else {
              pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
            }
            break;
          }
          case SuspenseListComponent: {
            var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
            var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
            if (didSuspendBefore) {
              if (_hasChildWork) {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              workInProgress2.flags |= DidCapture;
            }
            var renderState = workInProgress2.memoizedState;
            if (renderState !== null) {
              renderState.rendering = null;
              renderState.tail = null;
              renderState.lastEffect = null;
            }
            pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
            if (_hasChildWork) {
              break;
            } else {
              return null;
            }
          }
          case OffscreenComponent:
          case LegacyHiddenComponent: {
            workInProgress2.lanes = NoLanes;
            return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
          }
        }
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      function beginWork(current2, workInProgress2, renderLanes2) {
        {
          if (workInProgress2._debugNeedsRemount && current2 !== null) {
            return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
          }
        }
        if (current2 !== null) {
          var oldProps = current2.memoizedProps;
          var newProps = workInProgress2.pendingProps;
          if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
          workInProgress2.type !== current2.type) {
            didReceiveUpdate = true;
          } else {
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
            // may not be work scheduled on `current`, so we check for this flag.
            (workInProgress2.flags & DidCapture) === NoFlags) {
              didReceiveUpdate = false;
              return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
            }
            if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
              didReceiveUpdate = true;
            } else {
              didReceiveUpdate = false;
            }
          }
        } else {
          didReceiveUpdate = false;
          if (getIsHydrating() && isForkedChild(workInProgress2)) {
            var slotIndex = workInProgress2.index;
            var numberOfForks = getForksAtLevel();
            pushTreeId(workInProgress2, numberOfForks, slotIndex);
          }
        }
        workInProgress2.lanes = NoLanes;
        switch (workInProgress2.tag) {
          case IndeterminateComponent: {
            return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
          }
          case LazyComponent: {
            var elementType = workInProgress2.elementType;
            return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
          }
          case FunctionComponent: {
            var Component = workInProgress2.type;
            var unresolvedProps = workInProgress2.pendingProps;
            var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
            return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
          }
          case ClassComponent: {
            var _Component = workInProgress2.type;
            var _unresolvedProps = workInProgress2.pendingProps;
            var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
            return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
          }
          case HostRoot:
            return updateHostRoot(current2, workInProgress2, renderLanes2);
          case HostComponent:
            return updateHostComponent(current2, workInProgress2, renderLanes2);
          case HostText:
            return updateHostText(current2, workInProgress2);
          case SuspenseComponent:
            return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
          case HostPortal:
            return updatePortalComponent(current2, workInProgress2, renderLanes2);
          case ForwardRef: {
            var type = workInProgress2.type;
            var _unresolvedProps2 = workInProgress2.pendingProps;
            var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
            return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
          }
          case Fragment:
            return updateFragment(current2, workInProgress2, renderLanes2);
          case Mode:
            return updateMode(current2, workInProgress2, renderLanes2);
          case Profiler:
            return updateProfiler(current2, workInProgress2, renderLanes2);
          case ContextProvider:
            return updateContextProvider(current2, workInProgress2, renderLanes2);
          case ContextConsumer:
            return updateContextConsumer(current2, workInProgress2, renderLanes2);
          case MemoComponent: {
            var _type2 = workInProgress2.type;
            var _unresolvedProps3 = workInProgress2.pendingProps;
            var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerPropTypes = _type2.propTypes;
                if (outerPropTypes) {
                  checkPropTypes2(
                    outerPropTypes,
                    _resolvedProps3,
                    // Resolved for outer only
                    "prop",
                    getComponentNameFromType(_type2)
                  );
                }
              }
            }
            _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
            return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
          }
          case SimpleMemoComponent: {
            return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
          }
          case IncompleteClassComponent: {
            var _Component2 = workInProgress2.type;
            var _unresolvedProps4 = workInProgress2.pendingProps;
            var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
            return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
          }
          case SuspenseListComponent: {
            return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
          }
          case ScopeComponent: {
            break;
          }
          case OffscreenComponent: {
            return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
          }
        }
        throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
      }
      function markUpdate(workInProgress2) {
        workInProgress2.flags |= Update;
      }
      function markRef$1(workInProgress2) {
        workInProgress2.flags |= Ref;
        {
          workInProgress2.flags |= RefStatic;
        }
      }
      var appendAllChildren;
      var updateHostContainer;
      var updateHostComponent$1;
      var updateHostText$1;
      {
        appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
          var node2 = workInProgress2.child;
          while (node2 !== null) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              appendInitialChild(parent, node2.stateNode);
            } else if (node2.tag === HostPortal)
              ;
            else if (node2.child !== null) {
              node2.child.return = node2;
              node2 = node2.child;
              continue;
            }
            if (node2 === workInProgress2) {
              return;
            }
            while (node2.sibling === null) {
              if (node2.return === null || node2.return === workInProgress2) {
                return;
              }
              node2 = node2.return;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
          }
        };
        updateHostContainer = function(current2, workInProgress2) {
        };
        updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
          var oldProps = current2.memoizedProps;
          if (oldProps === newProps) {
            return;
          }
          var instance2 = workInProgress2.stateNode;
          var currentHostContext = getHostContext();
          var updatePayload = prepareUpdate(instance2, type, oldProps, newProps, rootContainerInstance, currentHostContext);
          workInProgress2.updateQueue = updatePayload;
          if (updatePayload) {
            markUpdate(workInProgress2);
          }
        };
        updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
          if (oldText !== newText) {
            markUpdate(workInProgress2);
          }
        };
      }
      function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) {
          return;
        }
        switch (renderState.tailMode) {
          case "hidden": {
            var tailNode = renderState.tail;
            var lastTailNode = null;
            while (tailNode !== null) {
              if (tailNode.alternate !== null) {
                lastTailNode = tailNode;
              }
              tailNode = tailNode.sibling;
            }
            if (lastTailNode === null) {
              renderState.tail = null;
            } else {
              lastTailNode.sibling = null;
            }
            break;
          }
          case "collapsed": {
            var _tailNode = renderState.tail;
            var _lastTailNode = null;
            while (_tailNode !== null) {
              if (_tailNode.alternate !== null) {
                _lastTailNode = _tailNode;
              }
              _tailNode = _tailNode.sibling;
            }
            if (_lastTailNode === null) {
              if (!hasRenderedATailFallback && renderState.tail !== null) {
                renderState.tail.sibling = null;
              } else {
                renderState.tail = null;
              }
            } else {
              _lastTailNode.sibling = null;
            }
            break;
          }
        }
      }
      function bubbleProperties(completedWork) {
        var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
        var newChildLanes = NoLanes;
        var subtreeFlags = NoFlags;
        if (!didBailout) {
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration;
            var child = completedWork.child;
            while (child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
              subtreeFlags |= child.subtreeFlags;
              subtreeFlags |= child.flags;
              actualDuration += child.actualDuration;
              treeBaseDuration += child.treeBaseDuration;
              child = child.sibling;
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
          } else {
            var _child = completedWork.child;
            while (_child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
              subtreeFlags |= _child.subtreeFlags;
              subtreeFlags |= _child.flags;
              _child.return = completedWork;
              _child = _child.sibling;
            }
          }
          completedWork.subtreeFlags |= subtreeFlags;
        } else {
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var _treeBaseDuration = completedWork.selfBaseDuration;
            var _child2 = completedWork.child;
            while (_child2 !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
              subtreeFlags |= _child2.subtreeFlags & StaticMask;
              subtreeFlags |= _child2.flags & StaticMask;
              _treeBaseDuration += _child2.treeBaseDuration;
              _child2 = _child2.sibling;
            }
            completedWork.treeBaseDuration = _treeBaseDuration;
          } else {
            var _child3 = completedWork.child;
            while (_child3 !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
              subtreeFlags |= _child3.subtreeFlags & StaticMask;
              subtreeFlags |= _child3.flags & StaticMask;
              _child3.return = completedWork;
              _child3 = _child3.sibling;
            }
          }
          completedWork.subtreeFlags |= subtreeFlags;
        }
        completedWork.childLanes = newChildLanes;
        return didBailout;
      }
      function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
        if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
          warnIfUnhydratedTailNodes(workInProgress2);
          resetHydrationState();
          workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
          return false;
        }
        var wasHydrated = popHydrationState(workInProgress2);
        if (nextState !== null && nextState.dehydrated !== null) {
          if (current2 === null) {
            if (!wasHydrated) {
              throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
            }
            prepareToHydrateHostSuspenseInstance(workInProgress2);
            bubbleProperties(workInProgress2);
            {
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                var isTimedOutSuspense = nextState !== null;
                if (isTimedOutSuspense) {
                  var primaryChildFragment = workInProgress2.child;
                  if (primaryChildFragment !== null) {
                    workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                  }
                }
              }
            }
            return false;
          } else {
            resetHydrationState();
            if ((workInProgress2.flags & DidCapture) === NoFlags) {
              workInProgress2.memoizedState = null;
            }
            workInProgress2.flags |= Update;
            bubbleProperties(workInProgress2);
            {
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                var _isTimedOutSuspense = nextState !== null;
                if (_isTimedOutSuspense) {
                  var _primaryChildFragment = workInProgress2.child;
                  if (_primaryChildFragment !== null) {
                    workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                  }
                }
              }
            }
            return false;
          }
        } else {
          upgradeHydrationErrorsToRecoverable();
          return true;
        }
      }
      function completeWork(current2, workInProgress2, renderLanes2) {
        var newProps = workInProgress2.pendingProps;
        popTreeContext(workInProgress2);
        switch (workInProgress2.tag) {
          case IndeterminateComponent:
          case LazyComponent:
          case SimpleMemoComponent:
          case FunctionComponent:
          case ForwardRef:
          case Fragment:
          case Mode:
          case Profiler:
          case ContextConsumer:
          case MemoComponent:
            bubbleProperties(workInProgress2);
            return null;
          case ClassComponent: {
            var Component = workInProgress2.type;
            if (isContextProvider(Component)) {
              popContext(workInProgress2);
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case HostRoot: {
            var fiberRoot = workInProgress2.stateNode;
            popHostContainer(workInProgress2);
            popTopLevelContextObject(workInProgress2);
            resetWorkInProgressVersions();
            if (fiberRoot.pendingContext) {
              fiberRoot.context = fiberRoot.pendingContext;
              fiberRoot.pendingContext = null;
            }
            if (current2 === null || current2.child === null) {
              var wasHydrated = popHydrationState(workInProgress2);
              if (wasHydrated) {
                markUpdate(workInProgress2);
              } else {
                if (current2 !== null) {
                  var prevState = current2.memoizedState;
                  if (
                    // Check if this is a client root
                    !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                    (workInProgress2.flags & ForceClientRender) !== NoFlags
                  ) {
                    workInProgress2.flags |= Snapshot;
                    upgradeHydrationErrorsToRecoverable();
                  }
                }
              }
            }
            updateHostContainer(current2, workInProgress2);
            bubbleProperties(workInProgress2);
            return null;
          }
          case HostComponent: {
            popHostContext(workInProgress2);
            var rootContainerInstance = getRootHostContainer();
            var type = workInProgress2.type;
            if (current2 !== null && workInProgress2.stateNode != null) {
              updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
              if (current2.ref !== workInProgress2.ref) {
                markRef$1(workInProgress2);
              }
            } else {
              if (!newProps) {
                if (workInProgress2.stateNode === null) {
                  throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              var currentHostContext = getHostContext();
              var _wasHydrated = popHydrationState(workInProgress2);
              if (_wasHydrated) {
                if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                  markUpdate(workInProgress2);
                }
              } else {
                var instance2 = createInstance2(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                appendAllChildren(instance2, workInProgress2, false, false);
                workInProgress2.stateNode = instance2;
                if (finalizeInitialChildren(instance2, type, newProps, rootContainerInstance)) {
                  markUpdate(workInProgress2);
                }
              }
              if (workInProgress2.ref !== null) {
                markRef$1(workInProgress2);
              }
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case HostText: {
            var newText = newProps;
            if (current2 && workInProgress2.stateNode != null) {
              var oldText = current2.memoizedProps;
              updateHostText$1(current2, workInProgress2, oldText, newText);
            } else {
              if (typeof newText !== "string") {
                if (workInProgress2.stateNode === null) {
                  throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var _rootContainerInstance = getRootHostContainer();
              var _currentHostContext = getHostContext();
              var _wasHydrated2 = popHydrationState(workInProgress2);
              if (_wasHydrated2) {
                if (prepareToHydrateHostTextInstance(workInProgress2)) {
                  markUpdate(workInProgress2);
                }
              } else {
                workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
              }
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var nextState = workInProgress2.memoizedState;
            if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
              var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
              if (!fallthroughToNormalSuspensePath) {
                if (workInProgress2.flags & ShouldCapture) {
                  return workInProgress2;
                } else {
                  return null;
                }
              }
            }
            if ((workInProgress2.flags & DidCapture) !== NoFlags) {
              workInProgress2.lanes = renderLanes2;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            var nextDidTimeout = nextState !== null;
            var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
            if (nextDidTimeout !== prevDidTimeout) {
              if (nextDidTimeout) {
                var _offscreenFiber2 = workInProgress2.child;
                _offscreenFiber2.flags |= Visibility;
                if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                  var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                  if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                    renderDidSuspend();
                  } else {
                    renderDidSuspendDelayIfPossible();
                  }
                }
              }
            }
            var wakeables = workInProgress2.updateQueue;
            if (wakeables !== null) {
              workInProgress2.flags |= Update;
            }
            bubbleProperties(workInProgress2);
            {
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                if (nextDidTimeout) {
                  var primaryChildFragment = workInProgress2.child;
                  if (primaryChildFragment !== null) {
                    workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                  }
                }
              }
            }
            return null;
          }
          case HostPortal:
            popHostContainer(workInProgress2);
            updateHostContainer(current2, workInProgress2);
            if (current2 === null) {
              preparePortalMount(workInProgress2.stateNode.containerInfo);
            }
            bubbleProperties(workInProgress2);
            return null;
          case ContextProvider:
            var context = workInProgress2.type._context;
            popProvider(context, workInProgress2);
            bubbleProperties(workInProgress2);
            return null;
          case IncompleteClassComponent: {
            var _Component = workInProgress2.type;
            if (isContextProvider(_Component)) {
              popContext(workInProgress2);
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case SuspenseListComponent: {
            popSuspenseContext(workInProgress2);
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              bubbleProperties(workInProgress2);
              return null;
            }
            var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
            var renderedTail = renderState.rendering;
            if (renderedTail === null) {
              if (!didSuspendAlready) {
                var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                if (!cannotBeSuspended) {
                  var row = workInProgress2.child;
                  while (row !== null) {
                    var suspended = findFirstSuspended(row);
                    if (suspended !== null) {
                      didSuspendAlready = true;
                      workInProgress2.flags |= DidCapture;
                      cutOffTailIfNeeded(renderState, false);
                      var newThenables = suspended.updateQueue;
                      if (newThenables !== null) {
                        workInProgress2.updateQueue = newThenables;
                        workInProgress2.flags |= Update;
                      }
                      workInProgress2.subtreeFlags = NoFlags;
                      resetChildFibers(workInProgress2, renderLanes2);
                      pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                      return workInProgress2.child;
                    }
                    row = row.sibling;
                  }
                }
                if (renderState.tail !== null && now() > getRenderTargetTime()) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  workInProgress2.lanes = SomeRetryLane;
                }
              } else {
                cutOffTailIfNeeded(renderState, false);
              }
            } else {
              if (!didSuspendAlready) {
                var _suspended = findFirstSuspended(renderedTail);
                if (_suspended !== null) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  var _newThenables = _suspended.updateQueue;
                  if (_newThenables !== null) {
                    workInProgress2.updateQueue = _newThenables;
                    workInProgress2.flags |= Update;
                  }
                  cutOffTailIfNeeded(renderState, true);
                  if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                } else if (
                  // The time it took to render last row is greater than the remaining
                  // time we have to render. So rendering one more row would likely
                  // exceed it.
                  now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                ) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  workInProgress2.lanes = SomeRetryLane;
                }
              }
              if (renderState.isBackwards) {
                renderedTail.sibling = workInProgress2.child;
                workInProgress2.child = renderedTail;
              } else {
                var previousSibling = renderState.last;
                if (previousSibling !== null) {
                  previousSibling.sibling = renderedTail;
                } else {
                  workInProgress2.child = renderedTail;
                }
                renderState.last = renderedTail;
              }
            }
            if (renderState.tail !== null) {
              var next2 = renderState.tail;
              renderState.rendering = next2;
              renderState.tail = next2.sibling;
              renderState.renderingStartTime = now();
              next2.sibling = null;
              var suspenseContext = suspenseStackCursor.current;
              if (didSuspendAlready) {
                suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              } else {
                suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
              }
              pushSuspenseContext(workInProgress2, suspenseContext);
              return next2;
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case ScopeComponent: {
            break;
          }
          case OffscreenComponent:
          case LegacyHiddenComponent: {
            popRenderLanes(workInProgress2);
            var _nextState = workInProgress2.memoizedState;
            var nextIsHidden = _nextState !== null;
            if (current2 !== null) {
              var _prevState = current2.memoizedState;
              var prevIsHidden = _prevState !== null;
              if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
              !enableLegacyHidden) {
                workInProgress2.flags |= Visibility;
              }
            }
            if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
              bubbleProperties(workInProgress2);
            } else {
              if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                bubbleProperties(workInProgress2);
                {
                  if (workInProgress2.subtreeFlags & (Placement | Update)) {
                    workInProgress2.flags |= Visibility;
                  }
                }
              }
            }
            return null;
          }
          case CacheComponent: {
            return null;
          }
          case TracingMarkerComponent: {
            return null;
          }
        }
        throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
      }
      function unwindWork(current2, workInProgress2, renderLanes2) {
        popTreeContext(workInProgress2);
        switch (workInProgress2.tag) {
          case ClassComponent: {
            var Component = workInProgress2.type;
            if (isContextProvider(Component)) {
              popContext(workInProgress2);
            }
            var flags2 = workInProgress2.flags;
            if (flags2 & ShouldCapture) {
              workInProgress2.flags = flags2 & ~ShouldCapture | DidCapture;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            return null;
          }
          case HostRoot: {
            popHostContainer(workInProgress2);
            popTopLevelContextObject(workInProgress2);
            resetWorkInProgressVersions();
            var _flags2 = workInProgress2.flags;
            if ((_flags2 & ShouldCapture) !== NoFlags && (_flags2 & DidCapture) === NoFlags) {
              workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
              return workInProgress2;
            }
            return null;
          }
          case HostComponent: {
            popHostContext(workInProgress2);
            return null;
          }
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              if (workInProgress2.alternate === null) {
                throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
              }
              resetHydrationState();
            }
            var _flags22 = workInProgress2.flags;
            if (_flags22 & ShouldCapture) {
              workInProgress2.flags = _flags22 & ~ShouldCapture | DidCapture;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            return null;
          }
          case SuspenseListComponent: {
            popSuspenseContext(workInProgress2);
            return null;
          }
          case HostPortal:
            popHostContainer(workInProgress2);
            return null;
          case ContextProvider:
            var context = workInProgress2.type._context;
            popProvider(context, workInProgress2);
            return null;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(workInProgress2);
            return null;
          case CacheComponent:
            return null;
          default:
            return null;
        }
      }
      function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
        popTreeContext(interruptedWork);
        switch (interruptedWork.tag) {
          case ClassComponent: {
            var childContextTypes = interruptedWork.type.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== void 0) {
              popContext(interruptedWork);
            }
            break;
          }
          case HostRoot: {
            popHostContainer(interruptedWork);
            popTopLevelContextObject(interruptedWork);
            resetWorkInProgressVersions();
            break;
          }
          case HostComponent: {
            popHostContext(interruptedWork);
            break;
          }
          case HostPortal:
            popHostContainer(interruptedWork);
            break;
          case SuspenseComponent:
            popSuspenseContext(interruptedWork);
            break;
          case SuspenseListComponent:
            popSuspenseContext(interruptedWork);
            break;
          case ContextProvider:
            var context = interruptedWork.type._context;
            popProvider(context, interruptedWork);
            break;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(interruptedWork);
            break;
        }
      }
      var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
      {
        didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
      }
      var offscreenSubtreeIsHidden = false;
      var offscreenSubtreeWasHidden = false;
      var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
      var nextEffect = null;
      var inProgressLanes = null;
      var inProgressRoot = null;
      function reportUncaughtErrorInDEV(error2) {
        {
          invokeGuardedCallback(null, function() {
            throw error2;
          });
          clearCaughtError();
        }
      }
      var callComponentWillUnmountWithTimer = function(current2, instance2) {
        instance2.props = current2.memoizedProps;
        instance2.state = current2.memoizedState;
        if (current2.mode & ProfileMode) {
          try {
            startLayoutEffectTimer();
            instance2.componentWillUnmount();
          } finally {
            recordLayoutEffectDuration(current2);
          }
        } else {
          instance2.componentWillUnmount();
        }
      };
      function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
        try {
          commitHookEffectListMount(Layout, current2);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance2) {
        try {
          callComponentWillUnmountWithTimer(current2, instance2);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance2) {
        try {
          instance2.componentDidMount();
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyAttachRef(current2, nearestMountedAncestor) {
        try {
          commitAttachRef(current2);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyDetachRef(current2, nearestMountedAncestor) {
        var ref = current2.ref;
        if (ref !== null) {
          if (typeof ref === "function") {
            var retVal;
            try {
              if (current2.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  retVal = ref(null);
                } finally {
                  recordLayoutEffectDuration(current2);
                }
              } else {
                retVal = ref(null);
              }
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
            {
              if (typeof retVal === "function") {
                error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
              }
            }
          } else {
            ref.current = null;
          }
        }
      }
      function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
        try {
          destroy();
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      var shouldFireAfterActiveInstanceBlur = false;
      function commitBeforeMutationEffects(root2, firstChild) {
        prepareForCommit();
        nextEffect = firstChild;
        commitBeforeMutationEffects_begin();
        var shouldFire = shouldFireAfterActiveInstanceBlur;
        shouldFireAfterActiveInstanceBlur = false;
        return shouldFire;
      }
      function commitBeforeMutationEffects_begin() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var child = fiber.child;
          if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
            child.return = fiber;
            nextEffect = child;
          } else {
            commitBeforeMutationEffects_complete();
          }
        }
      }
      function commitBeforeMutationEffects_complete() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          try {
            commitBeforeMutationEffectsOnFiber(fiber);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          resetCurrentFiber();
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitBeforeMutationEffectsOnFiber(finishedWork) {
        var current2 = finishedWork.alternate;
        var flags2 = finishedWork.flags;
        if ((flags2 & Snapshot) !== NoFlags) {
          setCurrentFiber(finishedWork);
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              break;
            }
            case ClassComponent: {
              if (current2 !== null) {
                var prevProps = current2.memoizedProps;
                var prevState = current2.memoizedState;
                var instance2 = finishedWork.stateNode;
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance2.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                    if (instance2.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                  }
                }
                var snapshot = instance2.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                {
                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                  if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                    didWarnSet.add(finishedWork.type);
                    error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                  }
                }
                instance2.__reactInternalSnapshotBeforeUpdate = snapshot;
              }
              break;
            }
            case HostRoot: {
              {
                var root2 = finishedWork.stateNode;
                clearContainer(root2.containerInfo);
              }
              break;
            }
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              break;
            default: {
              throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          resetCurrentFiber();
        }
      }
      function commitHookEffectListUnmount(flags2, finishedWork, nearestMountedAncestor) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;
          do {
            if ((effect.tag & flags2) === flags2) {
              var destroy = effect.destroy;
              effect.destroy = void 0;
              if (destroy !== void 0) {
                {
                  if ((flags2 & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectUnmountStarted(finishedWork);
                  } else if ((flags2 & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectUnmountStarted(finishedWork);
                  }
                }
                {
                  if ((flags2 & Insertion2) !== NoFlags$1) {
                    setIsRunningInsertionEffect(true);
                  }
                }
                safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                {
                  if ((flags2 & Insertion2) !== NoFlags$1) {
                    setIsRunningInsertionEffect(false);
                  }
                }
                {
                  if ((flags2 & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectUnmountStopped();
                  } else if ((flags2 & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectUnmountStopped();
                  }
                }
              }
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function commitHookEffectListMount(flags2, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;
          do {
            if ((effect.tag & flags2) === flags2) {
              {
                if ((flags2 & Passive$1) !== NoFlags$1) {
                  markComponentPassiveEffectMountStarted(finishedWork);
                } else if ((flags2 & Layout) !== NoFlags$1) {
                  markComponentLayoutEffectMountStarted(finishedWork);
                }
              }
              var create = effect.create;
              {
                if ((flags2 & Insertion2) !== NoFlags$1) {
                  setIsRunningInsertionEffect(true);
                }
              }
              effect.destroy = create();
              {
                if ((flags2 & Insertion2) !== NoFlags$1) {
                  setIsRunningInsertionEffect(false);
                }
              }
              {
                if ((flags2 & Passive$1) !== NoFlags$1) {
                  markComponentPassiveEffectMountStopped();
                } else if ((flags2 & Layout) !== NoFlags$1) {
                  markComponentLayoutEffectMountStopped();
                }
              }
              {
                var destroy = effect.destroy;
                if (destroy !== void 0 && typeof destroy !== "function") {
                  var hookName = void 0;
                  if ((effect.tag & Layout) !== NoFlags) {
                    hookName = "useLayoutEffect";
                  } else if ((effect.tag & Insertion2) !== NoFlags) {
                    hookName = "useInsertionEffect";
                  } else {
                    hookName = "useEffect";
                  }
                  var addendum = void 0;
                  if (destroy === null) {
                    addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                  } else if (typeof destroy.then === "function") {
                    addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                  } else {
                    addendum = " You returned: " + destroy;
                  }
                  error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                }
              }
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function commitPassiveEffectDurations(finishedRoot, finishedWork) {
        {
          if ((finishedWork.flags & Update) !== NoFlags) {
            switch (finishedWork.tag) {
              case Profiler: {
                var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                var commitTime2 = getCommitTime();
                var phase = finishedWork.alternate === null ? "mount" : "update";
                {
                  if (isCurrentUpdateNested()) {
                    phase = "nested-update";
                  }
                }
                if (typeof onPostCommit === "function") {
                  onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                }
                var parentFiber = finishedWork.return;
                outer:
                  while (parentFiber !== null) {
                    switch (parentFiber.tag) {
                      case HostRoot:
                        var root2 = parentFiber.stateNode;
                        root2.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                      case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                    }
                    parentFiber = parentFiber.return;
                  }
                break;
              }
            }
          }
        }
      }
      function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
        if ((finishedWork.flags & LayoutMask) !== NoFlags) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden) {
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListMount(Layout | HasEffect, finishedWork);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
              }
              break;
            }
            case ClassComponent: {
              var instance2 = finishedWork.stateNode;
              if (finishedWork.flags & Update) {
                if (!offscreenSubtreeWasHidden) {
                  if (current2 === null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance2.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance2.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        instance2.componentDidMount();
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      instance2.componentDidMount();
                    }
                  } else {
                    var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                    var prevState = current2.memoizedState;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance2.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance2.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        instance2.componentDidUpdate(prevProps, prevState, instance2.__reactInternalSnapshotBeforeUpdate);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      instance2.componentDidUpdate(prevProps, prevState, instance2.__reactInternalSnapshotBeforeUpdate);
                    }
                  }
                }
              }
              var updateQueue = finishedWork.updateQueue;
              if (updateQueue !== null) {
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance2.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                    if (instance2.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                  }
                }
                commitUpdateQueue(finishedWork, updateQueue, instance2);
              }
              break;
            }
            case HostRoot: {
              var _updateQueue = finishedWork.updateQueue;
              if (_updateQueue !== null) {
                var _instance = null;
                if (finishedWork.child !== null) {
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = getPublicInstance(finishedWork.child.stateNode);
                      break;
                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                }
                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }
              break;
            }
            case HostComponent: {
              var _instance2 = finishedWork.stateNode;
              if (current2 === null && finishedWork.flags & Update) {
                var type = finishedWork.type;
                var props = finishedWork.memoizedProps;
                commitMount(_instance2, type, props);
              }
              break;
            }
            case HostText: {
              break;
            }
            case HostPortal: {
              break;
            }
            case Profiler: {
              {
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime2 = getCommitTime();
                var phase = current2 === null ? "mount" : "update";
                {
                  if (isCurrentUpdateNested()) {
                    phase = "nested-update";
                  }
                }
                if (typeof onRender === "function") {
                  onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                }
                {
                  if (typeof onCommit === "function") {
                    onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                  }
                  enqueuePendingPassiveProfilerEffect(finishedWork);
                  var parentFiber = finishedWork.return;
                  outer:
                    while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.effectDuration += effectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.effectDuration += effectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                }
              }
              break;
            }
            case SuspenseComponent: {
              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              break;
            }
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
            case TracingMarkerComponent: {
              break;
            }
            default:
              throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        if (!offscreenSubtreeWasHidden) {
          {
            if (finishedWork.flags & Ref) {
              commitAttachRef(finishedWork);
            }
          }
        }
      }
      function reappearLayoutEffectsOnFiber(node2) {
        switch (node2.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (node2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
              } finally {
                recordLayoutEffectDuration(node2);
              }
            } else {
              safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
            }
            break;
          }
          case ClassComponent: {
            var instance2 = node2.stateNode;
            if (typeof instance2.componentDidMount === "function") {
              safelyCallComponentDidMount(node2, node2.return, instance2);
            }
            safelyAttachRef(node2, node2.return);
            break;
          }
          case HostComponent: {
            safelyAttachRef(node2, node2.return);
            break;
          }
        }
      }
      function hideOrUnhideAllChildren(finishedWork, isHidden) {
        var hostSubtreeRoot = null;
        {
          var node2 = finishedWork;
          while (true) {
            if (node2.tag === HostComponent) {
              if (hostSubtreeRoot === null) {
                hostSubtreeRoot = node2;
                try {
                  var instance2 = node2.stateNode;
                  if (isHidden) {
                    hideInstance(instance2);
                  } else {
                    unhideInstance(node2.stateNode, node2.memoizedProps);
                  }
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            } else if (node2.tag === HostText) {
              if (hostSubtreeRoot === null) {
                try {
                  var _instance3 = node2.stateNode;
                  if (isHidden) {
                    hideTextInstance(_instance3);
                  } else {
                    unhideTextInstance(_instance3, node2.memoizedProps);
                  }
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            } else if ((node2.tag === OffscreenComponent || node2.tag === LegacyHiddenComponent) && node2.memoizedState !== null && node2 !== finishedWork)
              ;
            else if (node2.child !== null) {
              node2.child.return = node2;
              node2 = node2.child;
              continue;
            }
            if (node2 === finishedWork) {
              return;
            }
            while (node2.sibling === null) {
              if (node2.return === null || node2.return === finishedWork) {
                return;
              }
              if (hostSubtreeRoot === node2) {
                hostSubtreeRoot = null;
              }
              node2 = node2.return;
            }
            if (hostSubtreeRoot === node2) {
              hostSubtreeRoot = null;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
          }
        }
      }
      function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
          var instance2 = finishedWork.stateNode;
          var instanceToUse;
          switch (finishedWork.tag) {
            case HostComponent:
              instanceToUse = getPublicInstance(instance2);
              break;
            default:
              instanceToUse = instance2;
          }
          if (typeof ref === "function") {
            var retVal;
            if (finishedWork.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                retVal = ref(instanceToUse);
              } finally {
                recordLayoutEffectDuration(finishedWork);
              }
            } else {
              retVal = ref(instanceToUse);
            }
            {
              if (typeof retVal === "function") {
                error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
              }
            }
          } else {
            {
              if (!ref.hasOwnProperty("current")) {
                error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
              }
            }
            ref.current = instanceToUse;
          }
        }
      }
      function detachFiberMutation(fiber) {
        var alternate = fiber.alternate;
        if (alternate !== null) {
          alternate.return = null;
        }
        fiber.return = null;
      }
      function detachFiberAfterEffects(fiber) {
        var alternate = fiber.alternate;
        if (alternate !== null) {
          fiber.alternate = null;
          detachFiberAfterEffects(alternate);
        }
        {
          fiber.child = null;
          fiber.deletions = null;
          fiber.sibling = null;
          if (fiber.tag === HostComponent) {
            var hostInstance = fiber.stateNode;
            if (hostInstance !== null) {
              detachDeletedInstance(hostInstance);
            }
          }
          fiber.stateNode = null;
          {
            fiber._debugOwner = null;
          }
          {
            fiber.return = null;
            fiber.dependencies = null;
            fiber.memoizedProps = null;
            fiber.memoizedState = null;
            fiber.pendingProps = null;
            fiber.stateNode = null;
            fiber.updateQueue = null;
          }
        }
      }
      function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while (parent !== null) {
          if (isHostParent(parent)) {
            return parent;
          }
          parent = parent.return;
        }
        throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
      }
      function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
      }
      function getHostSibling(fiber) {
        var node2 = fiber;
        siblings:
          while (true) {
            while (node2.sibling === null) {
              if (node2.return === null || isHostParent(node2.return)) {
                return null;
              }
              node2 = node2.return;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
            while (node2.tag !== HostComponent && node2.tag !== HostText && node2.tag !== DehydratedFragment) {
              if (node2.flags & Placement) {
                continue siblings;
              }
              if (node2.child === null || node2.tag === HostPortal) {
                continue siblings;
              } else {
                node2.child.return = node2;
                node2 = node2.child;
              }
            }
            if (!(node2.flags & Placement)) {
              return node2.stateNode;
            }
          }
      }
      function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork);
        switch (parentFiber.tag) {
          case HostComponent: {
            var parent = parentFiber.stateNode;
            if (parentFiber.flags & ContentReset) {
              resetTextContent(parent);
              parentFiber.flags &= ~ContentReset;
            }
            var before = getHostSibling(finishedWork);
            insertOrAppendPlacementNode(finishedWork, before, parent);
            break;
          }
          case HostRoot:
          case HostPortal: {
            var _parent = parentFiber.stateNode.containerInfo;
            var _before = getHostSibling(finishedWork);
            insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
            break;
          }
          default:
            throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      function insertOrAppendPlacementNodeIntoContainer(node2, before, parent) {
        var tag = node2.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
          var stateNode = node2.stateNode;
          if (before) {
            insertInContainerBefore(parent, stateNode, before);
          } else {
            appendChildToContainer(parent, stateNode);
          }
        } else if (tag === HostPortal)
          ;
        else {
          var child = node2.child;
          if (child !== null) {
            insertOrAppendPlacementNodeIntoContainer(child, before, parent);
            var sibling = child.sibling;
            while (sibling !== null) {
              insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
              sibling = sibling.sibling;
            }
          }
        }
      }
      function insertOrAppendPlacementNode(node2, before, parent) {
        var tag = node2.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
          var stateNode = node2.stateNode;
          if (before) {
            insertBefore(parent, stateNode, before);
          } else {
            appendChild(parent, stateNode);
          }
        } else if (tag === HostPortal)
          ;
        else {
          var child = node2.child;
          if (child !== null) {
            insertOrAppendPlacementNode(child, before, parent);
            var sibling = child.sibling;
            while (sibling !== null) {
              insertOrAppendPlacementNode(sibling, before, parent);
              sibling = sibling.sibling;
            }
          }
        }
      }
      var hostParent = null;
      var hostParentIsContainer = false;
      function commitDeletionEffects(root2, returnFiber, deletedFiber) {
        {
          var parent = returnFiber;
          findParent:
            while (parent !== null) {
              switch (parent.tag) {
                case HostComponent: {
                  hostParent = parent.stateNode;
                  hostParentIsContainer = false;
                  break findParent;
                }
                case HostRoot: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
                case HostPortal: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
              }
              parent = parent.return;
            }
          if (hostParent === null) {
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
          hostParent = null;
          hostParentIsContainer = false;
        }
        detachFiberMutation(deletedFiber);
      }
      function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
        var child = parent.child;
        while (child !== null) {
          commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
          child = child.sibling;
        }
      }
      function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
        onCommitUnmount(deletedFiber);
        switch (deletedFiber.tag) {
          case HostComponent: {
            if (!offscreenSubtreeWasHidden) {
              safelyDetachRef(deletedFiber, nearestMountedAncestor);
            }
          }
          case HostText: {
            {
              var prevHostParent = hostParent;
              var prevHostParentIsContainer = hostParentIsContainer;
              hostParent = null;
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              hostParent = prevHostParent;
              hostParentIsContainer = prevHostParentIsContainer;
              if (hostParent !== null) {
                if (hostParentIsContainer) {
                  removeChildFromContainer(hostParent, deletedFiber.stateNode);
                } else {
                  removeChild(hostParent, deletedFiber.stateNode);
                }
              }
            }
            return;
          }
          case DehydratedFragment: {
            {
              if (hostParent !== null) {
                if (hostParentIsContainer) {
                  clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                } else {
                  clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                }
              }
            }
            return;
          }
          case HostPortal: {
            {
              var _prevHostParent = hostParent;
              var _prevHostParentIsContainer = hostParentIsContainer;
              hostParent = deletedFiber.stateNode.containerInfo;
              hostParentIsContainer = true;
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              hostParent = _prevHostParent;
              hostParentIsContainer = _prevHostParentIsContainer;
            }
            return;
          }
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            if (!offscreenSubtreeWasHidden) {
              var updateQueue = deletedFiber.updateQueue;
              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;
                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next;
                  var effect = firstEffect;
                  do {
                    var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                    if (destroy !== void 0) {
                      if ((tag & Insertion2) !== NoFlags$1) {
                        safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                      } else if ((tag & Layout) !== NoFlags$1) {
                        {
                          markComponentLayoutEffectUnmountStarted(deletedFiber);
                        }
                        if (deletedFiber.mode & ProfileMode) {
                          startLayoutEffectTimer();
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          recordLayoutEffectDuration(deletedFiber);
                        } else {
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        }
                        {
                          markComponentLayoutEffectUnmountStopped();
                        }
                      }
                    }
                    effect = effect.next;
                  } while (effect !== firstEffect);
                }
              }
            }
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case ClassComponent: {
            if (!offscreenSubtreeWasHidden) {
              safelyDetachRef(deletedFiber, nearestMountedAncestor);
              var instance2 = deletedFiber.stateNode;
              if (typeof instance2.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance2);
              }
            }
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case ScopeComponent: {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case OffscreenComponent: {
            if (
              // TODO: Remove this dead flag
              deletedFiber.mode & ConcurrentMode
            ) {
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            } else {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            }
            break;
          }
          default: {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
        }
      }
      function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
          var current2 = finishedWork.alternate;
          if (current2 !== null) {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var suspenseInstance = prevState.dehydrated;
              if (suspenseInstance !== null) {
                commitHydratedSuspenseInstance(suspenseInstance);
              }
            }
          }
        }
      }
      function attachSuspenseRetryListeners(finishedWork) {
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
          finishedWork.updateQueue = null;
          var retryCache = finishedWork.stateNode;
          if (retryCache === null) {
            retryCache = finishedWork.stateNode = new PossiblyWeakSet();
          }
          wakeables.forEach(function(wakeable) {
            var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
            if (!retryCache.has(wakeable)) {
              retryCache.add(wakeable);
              {
                if (isDevToolsPresent) {
                  if (inProgressLanes !== null && inProgressRoot !== null) {
                    restorePendingUpdaters(inProgressRoot, inProgressLanes);
                  } else {
                    throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                  }
                }
              }
              wakeable.then(retry, retry);
            }
          });
        }
      }
      function commitMutationEffects(root2, finishedWork, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root2;
        setCurrentFiber(finishedWork);
        commitMutationEffectsOnFiber(finishedWork, root2);
        setCurrentFiber(finishedWork);
        inProgressLanes = null;
        inProgressRoot = null;
      }
      function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
        var deletions = parentFiber.deletions;
        if (deletions !== null) {
          for (var i2 = 0; i2 < deletions.length; i2++) {
            var childToDelete = deletions[i2];
            try {
              commitDeletionEffects(root2, parentFiber, childToDelete);
            } catch (error2) {
              captureCommitPhaseError(childToDelete, parentFiber, error2);
            }
          }
        }
        var prevDebugFiber = getCurrentFiber();
        if (parentFiber.subtreeFlags & MutationMask) {
          var child = parentFiber.child;
          while (child !== null) {
            setCurrentFiber(child);
            commitMutationEffectsOnFiber(child, root2);
            child = child.sibling;
          }
        }
        setCurrentFiber(prevDebugFiber);
      }
      function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
        var current2 = finishedWork.alternate;
        var flags2 = finishedWork.flags;
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags2 & Update) {
              try {
                commitHookEffectListUnmount(Insertion2 | HasEffect, finishedWork, finishedWork.return);
                commitHookEffectListMount(Insertion2 | HasEffect, finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                recordLayoutEffectDuration(finishedWork);
              } else {
                try {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            }
            return;
          }
          case ClassComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags2 & Ref) {
              if (current2 !== null) {
                safelyDetachRef(current2, current2.return);
              }
            }
            return;
          }
          case HostComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags2 & Ref) {
              if (current2 !== null) {
                safelyDetachRef(current2, current2.return);
              }
            }
            {
              if (finishedWork.flags & ContentReset) {
                var instance2 = finishedWork.stateNode;
                try {
                  resetTextContent(instance2);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
              if (flags2 & Update) {
                var _instance4 = finishedWork.stateNode;
                if (_instance4 != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    try {
                      commitUpdate(_instance4, updatePayload, type, oldProps, newProps);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
              }
            }
            return;
          }
          case HostText: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags2 & Update) {
              {
                if (finishedWork.stateNode === null) {
                  throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current2 !== null ? current2.memoizedProps : newText;
                try {
                  commitTextUpdate(textInstance, oldText, newText);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            }
            return;
          }
          case HostRoot: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags2 & Update) {
              {
                if (current2 !== null) {
                  var prevRootState = current2.memoizedState;
                  if (prevRootState.isDehydrated) {
                    try {
                      commitHydratedContainer(root2.containerInfo);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
              }
            }
            return;
          }
          case HostPortal: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            return;
          }
          case SuspenseComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            var offscreenFiber = finishedWork.child;
            if (offscreenFiber.flags & Visibility) {
              var offscreenInstance = offscreenFiber.stateNode;
              var newState = offscreenFiber.memoizedState;
              var isHidden = newState !== null;
              offscreenInstance.isHidden = isHidden;
              if (isHidden) {
                var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                if (!wasHidden) {
                  markCommitTimeOfFallback();
                }
              }
            }
            if (flags2 & Update) {
              attachSuspenseRetryListeners(finishedWork);
            }
            return;
          }
          case OffscreenComponent: {
            var _wasHidden = current2 !== null && current2.memoizedState !== null;
            if (
              // TODO: Remove this dead flag
              finishedWork.mode & ConcurrentMode
            ) {
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
              recursivelyTraverseMutationEffects(root2, finishedWork);
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            } else {
              recursivelyTraverseMutationEffects(root2, finishedWork);
            }
            commitReconciliationEffects(finishedWork);
            if (flags2 & Visibility) {
              var _offscreenInstance = finishedWork.stateNode;
              var _newState = finishedWork.memoizedState;
              var _isHidden = _newState !== null;
              var offscreenBoundary = finishedWork;
              _offscreenInstance.isHidden = _isHidden;
              {
                if (_isHidden) {
                  if (!_wasHidden) {
                    if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                      nextEffect = offscreenBoundary;
                      var offscreenChild = offscreenBoundary.child;
                      while (offscreenChild !== null) {
                        nextEffect = offscreenChild;
                        disappearLayoutEffects_begin(offscreenChild);
                        offscreenChild = offscreenChild.sibling;
                      }
                    }
                  }
                }
              }
              {
                hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
              }
            }
            return;
          }
          case SuspenseListComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags2 & Update) {
              attachSuspenseRetryListeners(finishedWork);
            }
            return;
          }
          case ScopeComponent: {
            return;
          }
          default: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            return;
          }
        }
      }
      function commitReconciliationEffects(finishedWork) {
        var flags2 = finishedWork.flags;
        if (flags2 & Placement) {
          try {
            commitPlacement(finishedWork);
          } catch (error2) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error2);
          }
          finishedWork.flags &= ~Placement;
        }
        if (flags2 & Hydrating) {
          finishedWork.flags &= ~Hydrating;
        }
      }
      function commitLayoutEffects(finishedWork, root2, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root2;
        nextEffect = finishedWork;
        commitLayoutEffects_begin(finishedWork, root2);
        inProgressLanes = null;
        inProgressRoot = null;
      }
      function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
        var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          if (fiber.tag === OffscreenComponent && isModernRoot) {
            var isHidden = fiber.memoizedState !== null;
            var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
            if (newOffscreenSubtreeIsHidden) {
              commitLayoutMountEffects_complete(subtreeRoot, root2);
              continue;
            } else {
              var current2 = fiber.alternate;
              var wasHidden = current2 !== null && current2.memoizedState !== null;
              var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
              var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
              offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
              if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                nextEffect = fiber;
                reappearLayoutEffects_begin(fiber);
              }
              var child = firstChild;
              while (child !== null) {
                nextEffect = child;
                commitLayoutEffects_begin(
                  child,
                  // New root; bubble back up to here and stop.
                  root2
                );
                child = child.sibling;
              }
              nextEffect = fiber;
              offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              commitLayoutMountEffects_complete(subtreeRoot, root2);
              continue;
            }
          }
          if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            commitLayoutMountEffects_complete(subtreeRoot, root2);
          }
        }
      }
      function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if ((fiber.flags & LayoutMask) !== NoFlags) {
            var current2 = fiber.alternate;
            setCurrentFiber(fiber);
            try {
              commitLayoutEffectOnFiber(root2, current2, fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
          }
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function disappearLayoutEffects_begin(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (fiber.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  commitHookEffectListUnmount(Layout, fiber, fiber.return);
                } finally {
                  recordLayoutEffectDuration(fiber);
                }
              } else {
                commitHookEffectListUnmount(Layout, fiber, fiber.return);
              }
              break;
            }
            case ClassComponent: {
              safelyDetachRef(fiber, fiber.return);
              var instance2 = fiber.stateNode;
              if (typeof instance2.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(fiber, fiber.return, instance2);
              }
              break;
            }
            case HostComponent: {
              safelyDetachRef(fiber, fiber.return);
              break;
            }
            case OffscreenComponent: {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden) {
                disappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
              break;
            }
          }
          if (firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            disappearLayoutEffects_complete(subtreeRoot);
          }
        }
      }
      function disappearLayoutEffects_complete(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function reappearLayoutEffects_begin(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          if (fiber.tag === OffscreenComponent) {
            var isHidden = fiber.memoizedState !== null;
            if (isHidden) {
              reappearLayoutEffects_complete(subtreeRoot);
              continue;
            }
          }
          if (firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            reappearLayoutEffects_complete(subtreeRoot);
          }
        }
      }
      function reappearLayoutEffects_complete(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          try {
            reappearLayoutEffectsOnFiber(fiber);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          resetCurrentFiber();
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
        nextEffect = finishedWork;
        commitPassiveMountEffects_begin(finishedWork, root2);
      }
      function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            commitPassiveMountEffects_complete(subtreeRoot, root2);
          }
        }
      }
      function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if ((fiber.flags & Passive) !== NoFlags) {
            setCurrentFiber(fiber);
            try {
              commitPassiveMountOnFiber(root2, fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
          }
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (finishedWork.mode & ProfileMode) {
              startPassiveEffectTimer();
              try {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              } finally {
                recordPassiveEffectDuration(finishedWork);
              }
            } else {
              commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
            }
            break;
          }
        }
      }
      function commitPassiveUnmountEffects(firstChild) {
        nextEffect = firstChild;
        commitPassiveUnmountEffects_begin();
      }
      function commitPassiveUnmountEffects_begin() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var child = fiber.child;
          if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
            var deletions = fiber.deletions;
            if (deletions !== null) {
              for (var i2 = 0; i2 < deletions.length; i2++) {
                var fiberToDelete = deletions[i2];
                nextEffect = fiberToDelete;
                commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
              }
              {
                var previousFiber = fiber.alternate;
                if (previousFiber !== null) {
                  var detachedChild = previousFiber.child;
                  if (detachedChild !== null) {
                    previousFiber.child = null;
                    do {
                      var detachedSibling = detachedChild.sibling;
                      detachedChild.sibling = null;
                      detachedChild = detachedSibling;
                    } while (detachedChild !== null);
                  }
                }
              }
              nextEffect = fiber;
            }
          }
          if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
            child.return = fiber;
            nextEffect = child;
          } else {
            commitPassiveUnmountEffects_complete();
          }
        }
      }
      function commitPassiveUnmountEffects_complete() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if ((fiber.flags & Passive) !== NoFlags) {
            setCurrentFiber(fiber);
            commitPassiveUnmountOnFiber(fiber);
            resetCurrentFiber();
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveUnmountOnFiber(finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (finishedWork.mode & ProfileMode) {
              startPassiveEffectTimer();
              commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
              recordPassiveEffectDuration(finishedWork);
            } else {
              commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
            }
            break;
          }
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
          resetCurrentFiber();
          var child = fiber.child;
          if (child !== null) {
            child.return = fiber;
            nextEffect = child;
          } else {
            commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
          }
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var sibling = fiber.sibling;
          var returnFiber = fiber.return;
          {
            detachFiberAfterEffects(fiber);
            if (fiber === deletedSubtreeRoot) {
              nextEffect = null;
              return;
            }
          }
          if (sibling !== null) {
            sibling.return = returnFiber;
            nextEffect = sibling;
            return;
          }
          nextEffect = returnFiber;
        }
      }
      function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
        switch (current2.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (current2.mode & ProfileMode) {
              startPassiveEffectTimer();
              commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
              recordPassiveEffectDuration(current2);
            } else {
              commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
            }
            break;
          }
        }
      }
      function invokeLayoutEffectMountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListMount(Layout | HasEffect, fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
            case ClassComponent: {
              var instance2 = fiber.stateNode;
              try {
                instance2.componentDidMount();
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
          }
        }
      }
      function invokePassiveEffectMountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListMount(Passive$1 | HasEffect, fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
          }
        }
      }
      function invokeLayoutEffectUnmountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
            case ClassComponent: {
              var instance2 = fiber.stateNode;
              if (typeof instance2.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(fiber, fiber.return, instance2);
              }
              break;
            }
          }
        }
      }
      function invokePassiveEffectUnmountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
            }
          }
        }
      }
      if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        symbolFor("selector.component");
        symbolFor("selector.has_pseudo_class");
        symbolFor("selector.role");
        symbolFor("selector.test_id");
        symbolFor("selector.text");
      }
      var commitHooks = [];
      function onCommitRoot$1() {
        {
          commitHooks.forEach(function(commitHook) {
            return commitHook();
          });
        }
      }
      var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
      function isLegacyActEnvironment(fiber) {
        {
          var isReactActEnvironmentGlobal = (
            // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
            typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
          );
          var jestIsDefined = typeof jest !== "undefined";
          return jestIsDefined && isReactActEnvironmentGlobal !== false;
        }
      }
      function isConcurrentActEnvironment() {
        {
          var isReactActEnvironmentGlobal = (
            // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
            typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
          );
          if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
            error("The current testing environment is not configured to support act(...)");
          }
          return isReactActEnvironmentGlobal;
        }
      }
      var ceil = Math.ceil;
      var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
      var NoContext = (
        /*             */
        0
      );
      var BatchedContext = (
        /*               */
        1
      );
      var RenderContext = (
        /*                */
        2
      );
      var CommitContext = (
        /*                */
        4
      );
      var RootInProgress = 0;
      var RootFatalErrored = 1;
      var RootErrored = 2;
      var RootSuspended = 3;
      var RootSuspendedWithDelay = 4;
      var RootCompleted = 5;
      var RootDidNotComplete = 6;
      var executionContext = NoContext;
      var workInProgressRoot = null;
      var workInProgress = null;
      var workInProgressRootRenderLanes = NoLanes;
      var subtreeRenderLanes = NoLanes;
      var subtreeRenderLanesCursor = createCursor(NoLanes);
      var workInProgressRootExitStatus = RootInProgress;
      var workInProgressRootFatalError = null;
      var workInProgressRootSkippedLanes = NoLanes;
      var workInProgressRootInterleavedUpdatedLanes = NoLanes;
      var workInProgressRootPingedLanes = NoLanes;
      var workInProgressRootConcurrentErrors = null;
      var workInProgressRootRecoverableErrors = null;
      var globalMostRecentFallbackTime = 0;
      var FALLBACK_THROTTLE_MS = 500;
      var workInProgressRootRenderTargetTime = Infinity;
      var RENDER_TIMEOUT_MS = 500;
      var workInProgressTransitions = null;
      function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
      }
      function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
      }
      var hasUncaughtError = false;
      var firstUncaughtError = null;
      var legacyErrorBoundariesThatAlreadyFailed = null;
      var rootDoesHavePassiveEffects = false;
      var rootWithPendingPassiveEffects = null;
      var pendingPassiveEffectsLanes = NoLanes;
      var pendingPassiveProfilerEffects = [];
      var NESTED_UPDATE_LIMIT = 50;
      var nestedUpdateCount = 0;
      var rootWithNestedUpdates = null;
      var isFlushingPassiveEffects = false;
      var didScheduleUpdateDuringPassiveEffects = false;
      var NESTED_PASSIVE_UPDATE_LIMIT = 50;
      var nestedPassiveUpdateCount = 0;
      var rootWithPassiveNestedUpdates = null;
      var currentEventTime = NoTimestamp;
      var currentEventTransitionLane = NoLanes;
      var isRunningInsertionEffect = false;
      function getWorkInProgressRoot() {
        return workInProgressRoot;
      }
      function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          return now();
        }
        if (currentEventTime !== NoTimestamp) {
          return currentEventTime;
        }
        currentEventTime = now();
        return currentEventTime;
      }
      function requestUpdateLane(fiber) {
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) {
          return SyncLane;
        } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
          return pickArbitraryLane(workInProgressRootRenderLanes);
        }
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
          if (ReactCurrentBatchConfig$3.transition !== null) {
            var transition = ReactCurrentBatchConfig$3.transition;
            if (!transition._updatedFibers) {
              transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            transition._updatedFibers.add(fiber);
          }
          if (currentEventTransitionLane === NoLane) {
            currentEventTransitionLane = claimNextTransitionLane();
          }
          return currentEventTransitionLane;
        }
        var updateLane = getCurrentUpdatePriority();
        if (updateLane !== NoLane) {
          return updateLane;
        }
        var eventLane = getCurrentEventPriority();
        return eventLane;
      }
      function requestRetryLane(fiber) {
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) {
          return SyncLane;
        }
        return claimNextRetryLane();
      }
      function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
        checkForNestedUpdates();
        {
          if (isRunningInsertionEffect) {
            error("useInsertionEffect must not schedule updates.");
          }
        }
        {
          if (isFlushingPassiveEffects) {
            didScheduleUpdateDuringPassiveEffects = true;
          }
        }
        markRootUpdated(root2, lane, eventTime);
        if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
          warnAboutRenderPhaseUpdatesInDEV(fiber);
        } else {
          {
            if (isDevToolsPresent) {
              addFiberToLanesMap(root2, fiber, lane);
            }
          }
          warnIfUpdatesNotWrappedWithActDEV(fiber);
          if (root2 === workInProgressRoot) {
            if ((executionContext & RenderContext) === NoContext) {
              workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
            }
            if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
              markRootSuspended$1(root2, workInProgressRootRenderLanes);
            }
          }
          ensureRootIsScheduled(root2, eventTime);
          if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
          !ReactCurrentActQueue$1.isBatchingLegacy) {
            resetRenderTimer();
            flushSyncCallbacksOnlyInLegacyMode();
          }
        }
      }
      function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
        var current2 = root2.current;
        current2.lanes = lane;
        markRootUpdated(root2, lane, eventTime);
        ensureRootIsScheduled(root2, eventTime);
      }
      function isUnsafeClassRenderPhaseUpdate(fiber) {
        return (
          // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
          // decided not to enable it.
          (executionContext & RenderContext) !== NoContext
        );
      }
      function ensureRootIsScheduled(root2, currentTime) {
        var existingCallbackNode = root2.callbackNode;
        markStarvedLanesAsExpired(root2, currentTime);
        var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (nextLanes === NoLanes) {
          if (existingCallbackNode !== null) {
            cancelCallback$1(existingCallbackNode);
          }
          root2.callbackNode = null;
          root2.callbackPriority = NoLane;
          return;
        }
        var newCallbackPriority = getHighestPriorityLane(nextLanes);
        var existingCallbackPriority = root2.callbackPriority;
        if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
        // Scheduler task, rather than an `act` task, cancel it and re-scheduled
        // on the `act` queue.
        !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
          {
            if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
              error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return;
        }
        if (existingCallbackNode != null) {
          cancelCallback$1(existingCallbackNode);
        }
        var newCallbackNode;
        if (newCallbackPriority === SyncLane) {
          if (root2.tag === LegacyRoot) {
            if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
              ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
            }
            scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
          } else {
            scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
          }
          {
            if (ReactCurrentActQueue$1.current !== null) {
              ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
            } else {
              scheduleMicrotask(function() {
                if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                  flushSyncCallbacks();
                }
              });
            }
          }
          newCallbackNode = null;
        } else {
          var schedulerPriorityLevel;
          switch (lanesToEventPriority(nextLanes)) {
            case DiscreteEventPriority:
              schedulerPriorityLevel = ImmediatePriority;
              break;
            case ContinuousEventPriority:
              schedulerPriorityLevel = UserBlockingPriority;
              break;
            case DefaultEventPriority:
              schedulerPriorityLevel = NormalPriority;
              break;
            case IdleEventPriority:
              schedulerPriorityLevel = IdlePriority;
              break;
            default:
              schedulerPriorityLevel = NormalPriority;
              break;
          }
          newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
        }
        root2.callbackPriority = newCallbackPriority;
        root2.callbackNode = newCallbackNode;
      }
      function performConcurrentWorkOnRoot(root2, didTimeout) {
        {
          resetNestedUpdateFlag();
        }
        currentEventTime = NoTimestamp;
        currentEventTransitionLane = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Should not already be working.");
        }
        var originalCallbackNode = root2.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects) {
          if (root2.callbackNode !== originalCallbackNode) {
            return null;
          }
        }
        var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes) {
          return null;
        }
        var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
        var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
        if (exitStatus !== RootInProgress) {
          if (exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
            if (errorRetryLanes !== NoLanes) {
              lanes = errorRetryLanes;
              exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root2, NoLanes);
            markRootSuspended$1(root2, lanes);
            ensureRootIsScheduled(root2, now());
            throw fatalError;
          }
          if (exitStatus === RootDidNotComplete) {
            markRootSuspended$1(root2, lanes);
          } else {
            var renderWasConcurrent = !includesBlockingLane(root2, lanes);
            var finishedWork = root2.current.alternate;
            if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
              exitStatus = renderRootSync(root2, lanes);
              if (exitStatus === RootErrored) {
                var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (_errorRetryLanes !== NoLanes) {
                  lanes = _errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var _fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw _fatalError;
              }
            }
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            finishConcurrentRender(root2, exitStatus, lanes);
          }
        }
        ensureRootIsScheduled(root2, now());
        if (root2.callbackNode === originalCallbackNode) {
          return performConcurrentWorkOnRoot.bind(null, root2);
        }
        return null;
      }
      function recoverFromConcurrentError(root2, errorRetryLanes) {
        var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
        if (isRootDehydrated(root2)) {
          var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
          rootWorkInProgress.flags |= ForceClientRender;
          {
            errorHydratingContainer(root2.containerInfo);
          }
        }
        var exitStatus = renderRootSync(root2, errorRetryLanes);
        if (exitStatus !== RootErrored) {
          var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
          workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
          if (errorsFromSecondAttempt !== null) {
            queueRecoverableErrors(errorsFromSecondAttempt);
          }
        }
        return exitStatus;
      }
      function queueRecoverableErrors(errors) {
        if (workInProgressRootRecoverableErrors === null) {
          workInProgressRootRecoverableErrors = errors;
        } else {
          workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
        }
      }
      function finishConcurrentRender(root2, exitStatus, lanes) {
        switch (exitStatus) {
          case RootInProgress:
          case RootFatalErrored: {
            throw new Error("Root did not complete. This is a bug in React.");
          }
          case RootErrored: {
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootSuspended: {
            markRootSuspended$1(root2, lanes);
            if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
            !shouldForceFlushFallbacksInDEV()) {
              var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
              if (msUntilTimeout > 10) {
                var nextLanes = getNextLanes(root2, NoLanes);
                if (nextLanes !== NoLanes) {
                  break;
                }
                var suspendedLanes = root2.suspendedLanes;
                if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                  requestEventTime();
                  markRootPinged(root2, suspendedLanes);
                  break;
                }
                root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                break;
              }
            }
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootSuspendedWithDelay: {
            markRootSuspended$1(root2, lanes);
            if (includesOnlyTransitions(lanes)) {
              break;
            }
            if (!shouldForceFlushFallbacksInDEV()) {
              var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
              var eventTimeMs = mostRecentEventTime;
              var timeElapsedMs = now() - eventTimeMs;
              var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
              if (_msUntilTimeout > 10) {
                root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                break;
              }
            }
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootCompleted: {
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          default: {
            throw new Error("Unknown root exit status.");
          }
        }
      }
      function isRenderConsistentWithExternalStores(finishedWork) {
        var node2 = finishedWork;
        while (true) {
          if (node2.flags & StoreConsistency) {
            var updateQueue = node2.updateQueue;
            if (updateQueue !== null) {
              var checks2 = updateQueue.stores;
              if (checks2 !== null) {
                for (var i2 = 0; i2 < checks2.length; i2++) {
                  var check = checks2[i2];
                  var getSnapshot = check.getSnapshot;
                  var renderedValue = check.value;
                  try {
                    if (!objectIs(getSnapshot(), renderedValue)) {
                      return false;
                    }
                  } catch (error2) {
                    return false;
                  }
                }
              }
            }
          }
          var child = node2.child;
          if (node2.subtreeFlags & StoreConsistency && child !== null) {
            child.return = node2;
            node2 = child;
            continue;
          }
          if (node2 === finishedWork) {
            return true;
          }
          while (node2.sibling === null) {
            if (node2.return === null || node2.return === finishedWork) {
              return true;
            }
            node2 = node2.return;
          }
          node2.sibling.return = node2.return;
          node2 = node2.sibling;
        }
        return true;
      }
      function markRootSuspended$1(root2, suspendedLanes) {
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
        markRootSuspended(root2, suspendedLanes);
      }
      function performSyncWorkOnRoot(root2) {
        {
          syncNestedUpdateFlag();
        }
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Should not already be working.");
        }
        flushPassiveEffects();
        var lanes = getNextLanes(root2, NoLanes);
        if (!includesSomeLane(lanes, SyncLane)) {
          ensureRootIsScheduled(root2, now());
          return null;
        }
        var exitStatus = renderRootSync(root2, lanes);
        if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
          var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
          if (errorRetryLanes !== NoLanes) {
            lanes = errorRetryLanes;
            exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
          }
        }
        if (exitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError;
          prepareFreshStack(root2, NoLanes);
          markRootSuspended$1(root2, lanes);
          ensureRootIsScheduled(root2, now());
          throw fatalError;
        }
        if (exitStatus === RootDidNotComplete) {
          throw new Error("Root did not complete. This is a bug in React.");
        }
        var finishedWork = root2.current.alternate;
        root2.finishedWork = finishedWork;
        root2.finishedLanes = lanes;
        commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
        ensureRootIsScheduled(root2, now());
        return null;
      }
      function flushRoot(root2, lanes) {
        if (lanes !== NoLanes) {
          markRootEntangled(root2, mergeLanes(lanes, SyncLane));
          ensureRootIsScheduled(root2, now());
          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
            resetRenderTimer();
            flushSyncCallbacks();
          }
        }
      }
      function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
          return fn(a);
        } finally {
          executionContext = prevExecutionContext;
          if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
          !ReactCurrentActQueue$1.isBatchingLegacy) {
            resetRenderTimer();
            flushSyncCallbacksOnlyInLegacyMode();
          }
        }
      }
      function discreteUpdates(fn, a, b, c, d) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
          ReactCurrentBatchConfig$3.transition = null;
          setCurrentUpdatePriority(DiscreteEventPriority);
          return fn(a, b, c, d);
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$3.transition = prevTransition;
          if (executionContext === NoContext) {
            resetRenderTimer();
          }
        }
      }
      function flushSync(fn) {
        if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
          flushPassiveEffects();
        }
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        var previousPriority = getCurrentUpdatePriority();
        try {
          ReactCurrentBatchConfig$3.transition = null;
          setCurrentUpdatePriority(DiscreteEventPriority);
          if (fn) {
            return fn();
          } else {
            return void 0;
          }
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$3.transition = prevTransition;
          executionContext = prevExecutionContext;
          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
            flushSyncCallbacks();
          }
        }
      }
      function isAlreadyRendering() {
        return (executionContext & (RenderContext | CommitContext)) !== NoContext;
      }
      function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
        subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
      }
      function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current;
        pop(subtreeRenderLanesCursor, fiber);
      }
      function prepareFreshStack(root2, lanes) {
        root2.finishedWork = null;
        root2.finishedLanes = NoLanes;
        var timeoutHandle = root2.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
          root2.timeoutHandle = noTimeout;
          cancelTimeout(timeoutHandle);
        }
        if (workInProgress !== null) {
          var interruptedWork = workInProgress.return;
          while (interruptedWork !== null) {
            var current2 = interruptedWork.alternate;
            unwindInterruptedWork(current2, interruptedWork);
            interruptedWork = interruptedWork.return;
          }
        }
        workInProgressRoot = root2;
        var rootWorkInProgress = createWorkInProgress(root2.current, null);
        workInProgress = rootWorkInProgress;
        workInProgressRootRenderLanes = subtreeRenderLanes = lanes;
        workInProgressRootExitStatus = RootInProgress;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootInterleavedUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        workInProgressRootConcurrentErrors = null;
        workInProgressRootRecoverableErrors = null;
        finishQueueingConcurrentUpdates();
        {
          ReactStrictModeWarnings.discardPendingWarnings();
        }
        return rootWorkInProgress;
      }
      function handleError(root2, thrownValue) {
        do {
          var erroredWork = workInProgress;
          try {
            resetContextDependencies();
            resetHooksAfterThrow();
            resetCurrentFiber();
            ReactCurrentOwner$2.current = null;
            if (erroredWork === null || erroredWork.return === null) {
              workInProgressRootExitStatus = RootFatalErrored;
              workInProgressRootFatalError = thrownValue;
              workInProgress = null;
              return;
            }
            if (erroredWork.mode & ProfileMode) {
              stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
            }
            {
              markComponentRenderStopped();
              if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                var wakeable = thrownValue;
                markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
              } else {
                markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
              }
            }
            throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
            completeUnitOfWork(erroredWork);
          } catch (yetAnotherThrownValue) {
            thrownValue = yetAnotherThrownValue;
            if (workInProgress === erroredWork && erroredWork !== null) {
              erroredWork = erroredWork.return;
              workInProgress = erroredWork;
            } else {
              erroredWork = workInProgress;
            }
            continue;
          }
          return;
        } while (true);
      }
      function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) {
          return ContextOnlyDispatcher;
        } else {
          return prevDispatcher;
        }
      }
      function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
      }
      function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
      }
      function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
      }
      function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootInProgress) {
          workInProgressRootExitStatus = RootSuspended;
        }
      }
      function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
          workInProgressRootExitStatus = RootSuspendedWithDelay;
        }
        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
          markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
        }
      }
      function renderDidError(error2) {
        if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
          workInProgressRootExitStatus = RootErrored;
        }
        if (workInProgressRootConcurrentErrors === null) {
          workInProgressRootConcurrentErrors = [error2];
        } else {
          workInProgressRootConcurrentErrors.push(error2);
        }
      }
      function renderHasNotSuspendedYet() {
        return workInProgressRootExitStatus === RootInProgress;
      }
      function renderRootSync(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root2.memoizedUpdaters;
              if (memoizedUpdaters.size > 0) {
                restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                memoizedUpdaters.clear();
              }
              movePendingFibersToMemoized(root2, lanes);
            }
          }
          workInProgressTransitions = getTransitionsForLanes();
          prepareFreshStack(root2, lanes);
        }
        {
          markRenderStarted(lanes);
        }
        do {
          try {
            workLoopSync();
            break;
          } catch (thrownValue) {
            handleError(root2, thrownValue);
          }
        } while (true);
        resetContextDependencies();
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        if (workInProgress !== null) {
          throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
        }
        {
          markRenderStopped();
        }
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
      }
      function workLoopSync() {
        while (workInProgress !== null) {
          performUnitOfWork(workInProgress);
        }
      }
      function renderRootConcurrent(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root2.memoizedUpdaters;
              if (memoizedUpdaters.size > 0) {
                restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                memoizedUpdaters.clear();
              }
              movePendingFibersToMemoized(root2, lanes);
            }
          }
          workInProgressTransitions = getTransitionsForLanes();
          resetRenderTimer();
          prepareFreshStack(root2, lanes);
        }
        {
          markRenderStarted(lanes);
        }
        do {
          try {
            workLoopConcurrent();
            break;
          } catch (thrownValue) {
            handleError(root2, thrownValue);
          }
        } while (true);
        resetContextDependencies();
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;
        if (workInProgress !== null) {
          {
            markRenderYielded();
          }
          return RootInProgress;
        } else {
          {
            markRenderStopped();
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
      }
      function workLoopConcurrent() {
        while (workInProgress !== null && !shouldYield()) {
          performUnitOfWork(workInProgress);
        }
      }
      function performUnitOfWork(unitOfWork) {
        var current2 = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next2;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
          startProfilerTimer(unitOfWork);
          next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else {
          next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
        }
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next2 === null) {
          completeUnitOfWork(unitOfWork);
        } else {
          workInProgress = next2;
        }
        ReactCurrentOwner$2.current = null;
      }
      function completeUnitOfWork(unitOfWork) {
        var completedWork = unitOfWork;
        do {
          var current2 = completedWork.alternate;
          var returnFiber = completedWork.return;
          if ((completedWork.flags & Incomplete) === NoFlags) {
            setCurrentFiber(completedWork);
            var next2 = void 0;
            if ((completedWork.mode & ProfileMode) === NoMode) {
              next2 = completeWork(current2, completedWork, subtreeRenderLanes);
            } else {
              startProfilerTimer(completedWork);
              next2 = completeWork(current2, completedWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
            }
            resetCurrentFiber();
            if (next2 !== null) {
              workInProgress = next2;
              return;
            }
          } else {
            var _next = unwindWork(current2, completedWork);
            if (_next !== null) {
              _next.flags &= HostEffectMask;
              workInProgress = _next;
              return;
            }
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              var actualDuration = completedWork.actualDuration;
              var child = completedWork.child;
              while (child !== null) {
                actualDuration += child.actualDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
            }
            if (returnFiber !== null) {
              returnFiber.flags |= Incomplete;
              returnFiber.subtreeFlags = NoFlags;
              returnFiber.deletions = null;
            } else {
              workInProgressRootExitStatus = RootDidNotComplete;
              workInProgress = null;
              return;
            }
          }
          var siblingFiber = completedWork.sibling;
          if (siblingFiber !== null) {
            workInProgress = siblingFiber;
            return;
          }
          completedWork = returnFiber;
          workInProgress = completedWork;
        } while (completedWork !== null);
        if (workInProgressRootExitStatus === RootInProgress) {
          workInProgressRootExitStatus = RootCompleted;
        }
      }
      function commitRoot(root2, recoverableErrors, transitions) {
        var previousUpdateLanePriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
          ReactCurrentBatchConfig$3.transition = null;
          setCurrentUpdatePriority(DiscreteEventPriority);
          commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
        } finally {
          ReactCurrentBatchConfig$3.transition = prevTransition;
          setCurrentUpdatePriority(previousUpdateLanePriority);
        }
        return null;
      }
      function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
        do {
          flushPassiveEffects();
        } while (rootWithPendingPassiveEffects !== null);
        flushRenderPhaseStrictModeWarningsInDEV();
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Should not already be working.");
        }
        var finishedWork = root2.finishedWork;
        var lanes = root2.finishedLanes;
        {
          markCommitStarted(lanes);
        }
        if (finishedWork === null) {
          {
            markCommitStopped();
          }
          return null;
        } else {
          {
            if (lanes === NoLanes) {
              error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
            }
          }
        }
        root2.finishedWork = null;
        root2.finishedLanes = NoLanes;
        if (finishedWork === root2.current) {
          throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
        }
        root2.callbackNode = null;
        root2.callbackPriority = NoLane;
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root2, remainingLanes);
        if (root2 === workInProgressRoot) {
          workInProgressRoot = null;
          workInProgress = null;
          workInProgressRootRenderLanes = NoLanes;
        }
        if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback$1(NormalPriority, function() {
              flushPassiveEffects();
              return null;
            });
          }
        }
        var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        if (subtreeHasEffects || rootHasEffect) {
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          ReactCurrentBatchConfig$3.transition = null;
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(DiscreteEventPriority);
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          ReactCurrentOwner$2.current = null;
          commitBeforeMutationEffects(root2, finishedWork);
          {
            recordCommitTime();
          }
          commitMutationEffects(root2, finishedWork, lanes);
          resetAfterCommit();
          root2.current = finishedWork;
          {
            markLayoutEffectsStarted(lanes);
          }
          commitLayoutEffects(finishedWork, root2, lanes);
          {
            markLayoutEffectsStopped();
          }
          requestPaint();
          executionContext = prevExecutionContext;
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$3.transition = prevTransition;
        } else {
          root2.current = finishedWork;
          {
            recordCommitTime();
          }
        }
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = false;
          rootWithPendingPassiveEffects = root2;
          pendingPassiveEffectsLanes = lanes;
        } else {
          {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = null;
          }
        }
        remainingLanes = root2.pendingLanes;
        if (remainingLanes === NoLanes) {
          legacyErrorBoundariesThatAlreadyFailed = null;
        }
        {
          if (!rootDidHavePassiveEffects) {
            commitDoubleInvokeEffectsInDEV(root2.current, false);
          }
        }
        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        {
          if (isDevToolsPresent) {
            root2.memoizedUpdaters.clear();
          }
        }
        {
          onCommitRoot$1();
        }
        ensureRootIsScheduled(root2, now());
        if (recoverableErrors !== null) {
          var onRecoverableError = root2.onRecoverableError;
          for (var i2 = 0; i2 < recoverableErrors.length; i2++) {
            var recoverableError = recoverableErrors[i2];
            var componentStack = recoverableError.stack;
            var digest = recoverableError.digest;
            onRecoverableError(recoverableError.value, {
              componentStack,
              digest
            });
          }
        }
        if (hasUncaughtError) {
          hasUncaughtError = false;
          var error$1 = firstUncaughtError;
          firstUncaughtError = null;
          throw error$1;
        }
        if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
          flushPassiveEffects();
        }
        remainingLanes = root2.pendingLanes;
        if (includesSomeLane(remainingLanes, SyncLane)) {
          {
            markNestedUpdateScheduled();
          }
          if (root2 === rootWithNestedUpdates) {
            nestedUpdateCount++;
          } else {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = root2;
          }
        } else {
          nestedUpdateCount = 0;
        }
        flushSyncCallbacks();
        {
          markCommitStopped();
        }
        return null;
      }
      function flushPassiveEffects() {
        if (rootWithPendingPassiveEffects !== null) {
          var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
          var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(priority);
            return flushPassiveEffectsImpl();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
          }
        }
        return false;
      }
      function enqueuePendingPassiveProfilerEffect(fiber) {
        {
          pendingPassiveProfilerEffects.push(fiber);
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback$1(NormalPriority, function() {
              flushPassiveEffects();
              return null;
            });
          }
        }
      }
      function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) {
          return false;
        }
        var root2 = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsLanes = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Cannot flush passive effects while already rendering.");
        }
        {
          isFlushingPassiveEffects = true;
          didScheduleUpdateDuringPassiveEffects = false;
        }
        {
          markPassiveEffectsStarted(lanes);
        }
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        commitPassiveUnmountEffects(root2.current);
        commitPassiveMountEffects(root2, root2.current);
        {
          var profilerEffects = pendingPassiveProfilerEffects;
          pendingPassiveProfilerEffects = [];
          for (var i2 = 0; i2 < profilerEffects.length; i2++) {
            var _fiber = profilerEffects[i2];
            commitPassiveEffectDurations(root2, _fiber);
          }
        }
        {
          markPassiveEffectsStopped();
        }
        {
          commitDoubleInvokeEffectsInDEV(root2.current, true);
        }
        executionContext = prevExecutionContext;
        flushSyncCallbacks();
        {
          if (didScheduleUpdateDuringPassiveEffects) {
            if (root2 === rootWithPassiveNestedUpdates) {
              nestedPassiveUpdateCount++;
            } else {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = root2;
            }
          } else {
            nestedPassiveUpdateCount = 0;
          }
          isFlushingPassiveEffects = false;
          didScheduleUpdateDuringPassiveEffects = false;
        }
        onPostCommitRoot(root2);
        {
          var stateNode = root2.current.stateNode;
          stateNode.effectDuration = 0;
          stateNode.passiveEffectDuration = 0;
        }
        return true;
      }
      function isAlreadyFailedLegacyErrorBoundary(instance2) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance2);
      }
      function markLegacyErrorBoundaryAsFailed(instance2) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) {
          legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance2]);
        } else {
          legacyErrorBoundariesThatAlreadyFailed.add(instance2);
        }
      }
      function prepareToThrowUncaughtError(error2) {
        if (!hasUncaughtError) {
          hasUncaughtError = true;
          firstUncaughtError = error2;
        }
      }
      var onUncaughtError = prepareToThrowUncaughtError;
      function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
        var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        var root2 = enqueueUpdate(rootFiber, update, SyncLane);
        var eventTime = requestEventTime();
        if (root2 !== null) {
          markRootUpdated(root2, SyncLane, eventTime);
          ensureRootIsScheduled(root2, eventTime);
        }
      }
      function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
        {
          reportUncaughtErrorInDEV(error$1);
          setIsRunningInsertionEffect(false);
        }
        if (sourceFiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
          return;
        }
        var fiber = null;
        {
          fiber = nearestMountedAncestor;
        }
        while (fiber !== null) {
          if (fiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
            return;
          } else if (fiber.tag === ClassComponent) {
            var ctor = fiber.type;
            var instance2 = fiber.stateNode;
            if (typeof ctor.getDerivedStateFromError === "function" || typeof instance2.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance2)) {
              var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
              var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
              var root2 = enqueueUpdate(fiber, update, SyncLane);
              var eventTime = requestEventTime();
              if (root2 !== null) {
                markRootUpdated(root2, SyncLane, eventTime);
                ensureRootIsScheduled(root2, eventTime);
              }
              return;
            }
          }
          fiber = fiber.return;
        }
        {
          error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
        }
      }
      function pingSuspendedRoot(root2, wakeable, pingedLanes) {
        var pingCache = root2.pingCache;
        if (pingCache !== null) {
          pingCache.delete(wakeable);
        }
        var eventTime = requestEventTime();
        markRootPinged(root2, pingedLanes);
        warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
        if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
          if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
            prepareFreshStack(root2, NoLanes);
          } else {
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
          }
        }
        ensureRootIsScheduled(root2, eventTime);
      }
      function retryTimedOutBoundary(boundaryFiber, retryLane) {
        if (retryLane === NoLane) {
          retryLane = requestRetryLane(boundaryFiber);
        }
        var eventTime = requestEventTime();
        var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
        if (root2 !== null) {
          markRootUpdated(root2, retryLane, eventTime);
          ensureRootIsScheduled(root2, eventTime);
        }
      }
      function retryDehydratedSuspenseBoundary(boundaryFiber) {
        var suspenseState = boundaryFiber.memoizedState;
        var retryLane = NoLane;
        if (suspenseState !== null) {
          retryLane = suspenseState.retryLane;
        }
        retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane;
        var retryCache;
        switch (boundaryFiber.tag) {
          case SuspenseComponent:
            retryCache = boundaryFiber.stateNode;
            var suspenseState = boundaryFiber.memoizedState;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            break;
          case SuspenseListComponent:
            retryCache = boundaryFiber.stateNode;
            break;
          default:
            throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
        }
        if (retryCache !== null) {
          retryCache.delete(wakeable);
        }
        retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
      }
      function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
          nestedUpdateCount = 0;
          rootWithNestedUpdates = null;
          throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        }
        {
          if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = null;
            error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
          }
        }
      }
      function flushRenderPhaseStrictModeWarningsInDEV() {
        {
          ReactStrictModeWarnings.flushLegacyContextWarning();
          {
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
          }
        }
      }
      function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
        {
          setCurrentFiber(fiber);
          invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
          if (hasPassiveEffects) {
            invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
          }
          invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
          if (hasPassiveEffects) {
            invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
          }
          resetCurrentFiber();
        }
      }
      function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
        {
          var current2 = firstChild;
          var subtreeRoot = null;
          while (current2 !== null) {
            var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
            if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
              current2 = current2.child;
            } else {
              if ((current2.flags & fiberFlags) !== NoFlags) {
                invokeEffectFn(current2);
              }
              if (current2.sibling !== null) {
                current2 = current2.sibling;
              } else {
                current2 = subtreeRoot = current2.return;
              }
            }
          }
        }
      }
      var didWarnStateUpdateForNotYetMountedComponent = null;
      function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        {
          if ((executionContext & RenderContext) !== NoContext) {
            return;
          }
          if (!(fiber.mode & ConcurrentMode)) {
            return;
          }
          var tag = fiber.tag;
          if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
            return;
          }
          var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
          if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
              return;
            }
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
          } else {
            didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
          }
          var previousFiber = current;
          try {
            setCurrentFiber(fiber);
            error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
          } finally {
            if (previousFiber) {
              setCurrentFiber(fiber);
            } else {
              resetCurrentFiber();
            }
          }
        }
      }
      var beginWork$1;
      {
        var dummyFiber = null;
        beginWork$1 = function(current2, unitOfWork, lanes) {
          var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
          try {
            return beginWork(current2, unitOfWork, lanes);
          } catch (originalError) {
            if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
              throw originalError;
            }
            resetContextDependencies();
            resetHooksAfterThrow();
            unwindInterruptedWork(current2, unitOfWork);
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) {
              startProfilerTimer(unitOfWork);
            }
            invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
            if (hasCaughtError()) {
              var replayError = clearCaughtError();
              if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                originalError._suppressLogging = true;
              }
            }
            throw originalError;
          }
        };
      }
      var didWarnAboutUpdateInRender = false;
      var didWarnAboutUpdateInRenderForAnotherComponent;
      {
        didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
      }
      function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        {
          if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                  didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                  var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                  error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
              }
              case ClassComponent: {
                if (!didWarnAboutUpdateInRender) {
                  error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                  didWarnAboutUpdateInRender = true;
                }
                break;
              }
            }
          }
        }
      }
      function restorePendingUpdaters(root2, lanes) {
        {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root2.memoizedUpdaters;
            memoizedUpdaters.forEach(function(schedulingFiber) {
              addFiberToLanesMap(root2, schedulingFiber, lanes);
            });
          }
        }
      }
      var fakeActCallbackNode = {};
      function scheduleCallback$1(priorityLevel, callback) {
        {
          var actQueue = ReactCurrentActQueue$1.current;
          if (actQueue !== null) {
            actQueue.push(callback);
            return fakeActCallbackNode;
          } else {
            return scheduleCallback(priorityLevel, callback);
          }
        }
      }
      function cancelCallback$1(callbackNode) {
        if (callbackNode === fakeActCallbackNode) {
          return;
        }
        return cancelCallback(callbackNode);
      }
      function shouldForceFlushFallbacksInDEV() {
        return ReactCurrentActQueue$1.current !== null;
      }
      function warnIfUpdatesNotWrappedWithActDEV(fiber) {
        {
          if (fiber.mode & ConcurrentMode) {
            if (!isConcurrentActEnvironment()) {
              return;
            }
          } else {
            if (!isLegacyActEnvironment()) {
              return;
            }
            if (executionContext !== NoContext) {
              return;
            }
            if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
              return;
            }
          }
          if (ReactCurrentActQueue$1.current === null) {
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
      }
      function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
        {
          if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
            error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
          }
        }
      }
      function setIsRunningInsertionEffect(isRunning) {
        {
          isRunningInsertionEffect = isRunning;
        }
      }
      var resolveFamily = null;
      var failedBoundaries = null;
      var setRefreshHandler = function(handler) {
        {
          resolveFamily = handler;
        }
      };
      function resolveFunctionForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }
          var family = resolveFamily(type);
          if (family === void 0) {
            return type;
          }
          return family.current;
        }
      }
      function resolveClassForHotReloading(type) {
        return resolveFunctionForHotReloading(type);
      }
      function resolveForwardRefForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }
          var family = resolveFamily(type);
          if (family === void 0) {
            if (type !== null && type !== void 0 && typeof type.render === "function") {
              var currentRender = resolveFunctionForHotReloading(type.render);
              if (type.render !== currentRender) {
                var syntheticType = {
                  $$typeof: REACT_FORWARD_REF_TYPE,
                  render: currentRender
                };
                if (type.displayName !== void 0) {
                  syntheticType.displayName = type.displayName;
                }
                return syntheticType;
              }
            }
            return type;
          }
          return family.current;
        }
      }
      function isCompatibleFamilyForHotReloading(fiber, element) {
        {
          if (resolveFamily === null) {
            return false;
          }
          var prevType = fiber.elementType;
          var nextType = element.type;
          var needsCompareFamilies = false;
          var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
          switch (fiber.tag) {
            case ClassComponent: {
              if (typeof nextType === "function") {
                needsCompareFamilies = true;
              }
              break;
            }
            case FunctionComponent: {
              if (typeof nextType === "function") {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            case ForwardRef: {
              if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            case MemoComponent:
            case SimpleMemoComponent: {
              if ($$typeofNextType === REACT_MEMO_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            default:
              return false;
          }
          if (needsCompareFamilies) {
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
              return true;
            }
          }
          return false;
        }
      }
      function markFailedErrorBoundaryForHotReloading(fiber) {
        {
          if (resolveFamily === null) {
            return;
          }
          if (typeof WeakSet !== "function") {
            return;
          }
          if (failedBoundaries === null) {
            failedBoundaries = /* @__PURE__ */ new WeakSet();
          }
          failedBoundaries.add(fiber);
        }
      }
      var scheduleRefresh = function(root2, update) {
        {
          if (resolveFamily === null) {
            return;
          }
          var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
          flushPassiveEffects();
          flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
          });
        }
      };
      var scheduleRoot = function(root2, element) {
        {
          if (root2.context !== emptyContextObject) {
            return;
          }
          flushPassiveEffects();
          flushSync(function() {
            updateContainer(element, root2, null, null);
          });
        }
      };
      function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        {
          var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
          var candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          if (resolveFamily === null) {
            throw new Error("Expected resolveFamily to be set during hot reload.");
          }
          var needsRender = false;
          var needsRemount = false;
          if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== void 0) {
              if (staleFamilies.has(family)) {
                needsRemount = true;
              } else if (updatedFamilies.has(family)) {
                if (tag === ClassComponent) {
                  needsRemount = true;
                } else {
                  needsRender = true;
                }
              }
            }
          }
          if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
              needsRemount = true;
            }
          }
          if (needsRemount) {
            fiber._debugNeedsRemount = true;
          }
          if (needsRemount || needsRender) {
            var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (_root !== null) {
              scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
            }
          }
          if (child !== null && !needsRemount) {
            scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
          }
          if (sibling !== null) {
            scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
          }
        }
      }
      var findHostInstancesForRefresh = function(root2, families) {
        {
          var hostInstances = /* @__PURE__ */ new Set();
          var types2 = new Set(families.map(function(family) {
            return family.current;
          }));
          findHostInstancesForMatchingFibersRecursively(root2.current, types2, hostInstances);
          return hostInstances;
        }
      };
      function findHostInstancesForMatchingFibersRecursively(fiber, types2, hostInstances) {
        {
          var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
          var candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          var didMatch = false;
          if (candidateType !== null) {
            if (types2.has(candidateType)) {
              didMatch = true;
            }
          }
          if (didMatch) {
            findHostInstancesForFiberShallowly(fiber, hostInstances);
          } else {
            if (child !== null) {
              findHostInstancesForMatchingFibersRecursively(child, types2, hostInstances);
            }
          }
          if (sibling !== null) {
            findHostInstancesForMatchingFibersRecursively(sibling, types2, hostInstances);
          }
        }
      }
      function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
          if (foundHostInstances) {
            return;
          }
          var node2 = fiber;
          while (true) {
            switch (node2.tag) {
              case HostComponent:
                hostInstances.add(node2.stateNode);
                return;
              case HostPortal:
                hostInstances.add(node2.stateNode.containerInfo);
                return;
              case HostRoot:
                hostInstances.add(node2.stateNode.containerInfo);
                return;
            }
            if (node2.return === null) {
              throw new Error("Expected to reach root first.");
            }
            node2 = node2.return;
          }
        }
      }
      function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var node2 = fiber;
          var foundHostInstances = false;
          while (true) {
            if (node2.tag === HostComponent) {
              foundHostInstances = true;
              hostInstances.add(node2.stateNode);
            } else if (node2.child !== null) {
              node2.child.return = node2;
              node2 = node2.child;
              continue;
            }
            if (node2 === fiber) {
              return foundHostInstances;
            }
            while (node2.sibling === null) {
              if (node2.return === null || node2.return === fiber) {
                return foundHostInstances;
              }
              node2 = node2.return;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
          }
        }
        return false;
      }
      var hasBadMapPolyfill;
      {
        hasBadMapPolyfill = false;
        try {
          Object.preventExtensions({});
        } catch (e) {
          hasBadMapPolyfill = true;
        }
      }
      function FiberNode(tag, pendingProps, key, mode) {
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null;
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode;
        this.flags = NoFlags;
        this.subtreeFlags = NoFlags;
        this.deletions = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        {
          this.actualDuration = Number.NaN;
          this.actualStartTime = Number.NaN;
          this.selfBaseDuration = Number.NaN;
          this.treeBaseDuration = Number.NaN;
          this.actualDuration = 0;
          this.actualStartTime = -1;
          this.selfBaseDuration = 0;
          this.treeBaseDuration = 0;
        }
        {
          this._debugSource = null;
          this._debugOwner = null;
          this._debugNeedsRemount = false;
          this._debugHookTypes = null;
          if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
            Object.preventExtensions(this);
          }
        }
      }
      var createFiber = function(tag, pendingProps, key, mode) {
        return new FiberNode(tag, pendingProps, key, mode);
      };
      function shouldConstruct$1(Component) {
        var prototype2 = Component.prototype;
        return !!(prototype2 && prototype2.isReactComponent);
      }
      function isSimpleFunctionComponent(type) {
        return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
      }
      function resolveLazyComponentTag(Component) {
        if (typeof Component === "function") {
          return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
        } else if (Component !== void 0 && Component !== null) {
          var $$typeof = Component.$$typeof;
          if ($$typeof === REACT_FORWARD_REF_TYPE) {
            return ForwardRef;
          }
          if ($$typeof === REACT_MEMO_TYPE) {
            return MemoComponent;
          }
        }
        return IndeterminateComponent;
      }
      function createWorkInProgress(current2, pendingProps) {
        var workInProgress2 = current2.alternate;
        if (workInProgress2 === null) {
          workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
          workInProgress2.elementType = current2.elementType;
          workInProgress2.type = current2.type;
          workInProgress2.stateNode = current2.stateNode;
          {
            workInProgress2._debugSource = current2._debugSource;
            workInProgress2._debugOwner = current2._debugOwner;
            workInProgress2._debugHookTypes = current2._debugHookTypes;
          }
          workInProgress2.alternate = current2;
          current2.alternate = workInProgress2;
        } else {
          workInProgress2.pendingProps = pendingProps;
          workInProgress2.type = current2.type;
          workInProgress2.flags = NoFlags;
          workInProgress2.subtreeFlags = NoFlags;
          workInProgress2.deletions = null;
          {
            workInProgress2.actualDuration = 0;
            workInProgress2.actualStartTime = -1;
          }
        }
        workInProgress2.flags = current2.flags & StaticMask;
        workInProgress2.childLanes = current2.childLanes;
        workInProgress2.lanes = current2.lanes;
        workInProgress2.child = current2.child;
        workInProgress2.memoizedProps = current2.memoizedProps;
        workInProgress2.memoizedState = current2.memoizedState;
        workInProgress2.updateQueue = current2.updateQueue;
        var currentDependencies = current2.dependencies;
        workInProgress2.dependencies = currentDependencies === null ? null : {
          lanes: currentDependencies.lanes,
          firstContext: currentDependencies.firstContext
        };
        workInProgress2.sibling = current2.sibling;
        workInProgress2.index = current2.index;
        workInProgress2.ref = current2.ref;
        {
          workInProgress2.selfBaseDuration = current2.selfBaseDuration;
          workInProgress2.treeBaseDuration = current2.treeBaseDuration;
        }
        {
          workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
              workInProgress2.type = resolveFunctionForHotReloading(current2.type);
              break;
            case ClassComponent:
              workInProgress2.type = resolveClassForHotReloading(current2.type);
              break;
            case ForwardRef:
              workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
              break;
          }
        }
        return workInProgress2;
      }
      function resetWorkInProgress(workInProgress2, renderLanes2) {
        workInProgress2.flags &= StaticMask | Placement;
        var current2 = workInProgress2.alternate;
        if (current2 === null) {
          workInProgress2.childLanes = NoLanes;
          workInProgress2.lanes = renderLanes2;
          workInProgress2.child = null;
          workInProgress2.subtreeFlags = NoFlags;
          workInProgress2.memoizedProps = null;
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.dependencies = null;
          workInProgress2.stateNode = null;
          {
            workInProgress2.selfBaseDuration = 0;
            workInProgress2.treeBaseDuration = 0;
          }
        } else {
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.subtreeFlags = NoFlags;
          workInProgress2.deletions = null;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          workInProgress2.type = current2.type;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
        }
        return workInProgress2;
      }
      function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
        var mode;
        if (tag === ConcurrentRoot) {
          mode = ConcurrentMode;
          if (isStrictMode === true) {
            mode |= StrictLegacyMode;
            {
              mode |= StrictEffectsMode;
            }
          }
        } else {
          mode = NoMode;
        }
        if (isDevToolsPresent) {
          mode |= ProfileMode;
        }
        return createFiber(HostRoot, null, null, mode);
      }
      function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent;
        var resolvedType = type;
        if (typeof type === "function") {
          if (shouldConstruct$1(type)) {
            fiberTag = ClassComponent;
            {
              resolvedType = resolveClassForHotReloading(resolvedType);
            }
          } else {
            {
              resolvedType = resolveFunctionForHotReloading(resolvedType);
            }
          }
        } else if (typeof type === "string") {
          fiberTag = HostComponent;
        } else {
          getTag:
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
              case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictLegacyMode;
                if ((mode & ConcurrentMode) !== NoMode) {
                  mode |= StrictEffectsMode;
                }
                break;
              case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
              case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
              case REACT_LEGACY_HIDDEN_TYPE:
              case REACT_SCOPE_TYPE:
              case REACT_CACHE_TYPE:
              case REACT_TRACING_MARKER_TYPE:
              case REACT_DEBUG_TRACING_MODE_TYPE:
              default: {
                if (typeof type === "object" && type !== null) {
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break getTag;
                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break getTag;
                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = ForwardRef;
                      {
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      }
                      break getTag;
                    case REACT_MEMO_TYPE:
                      fiberTag = MemoComponent;
                      break getTag;
                    case REACT_LAZY_TYPE:
                      fiberTag = LazyComponent;
                      resolvedType = null;
                      break getTag;
                  }
                }
                var info2 = "";
                {
                  if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                    info2 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                  }
                  var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                  if (ownerName) {
                    info2 += "\n\nCheck the render method of `" + ownerName + "`.";
                  }
                }
                throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info2));
              }
            }
        }
        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        {
          fiber._debugOwner = owner;
        }
        return fiber;
      }
      function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        {
          owner = element._owner;
        }
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        {
          fiber._debugSource = element._source;
          fiber._debugOwner = element._owner;
        }
        return fiber;
      }
      function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        {
          if (typeof pendingProps.id !== "string") {
            error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
          }
        }
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        {
          fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
          };
        }
        return fiber;
      }
      function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        var primaryChildInstance = {
          isHidden: false
        };
        fiber.stateNode = primaryChildInstance;
        return fiber;
      }
      function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode);
        fiber.elementType = "DELETED";
        return fiber;
      }
      function createFiberFromDehydratedFragment(dehydratedNode) {
        var fiber = createFiber(DehydratedFragment, null, null, NoMode);
        fiber.stateNode = dehydratedNode;
        return fiber;
      }
      function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          // Used by persistent updates
          implementation: portal.implementation
        };
        return fiber;
      }
      function assignFiberPropertiesInDEV(target, source) {
        if (target === null) {
          target = createFiber(IndeterminateComponent, null, null, NoMode);
        }
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.flags = source.flags;
        target.subtreeFlags = source.subtreeFlags;
        target.deletions = source.deletions;
        target.lanes = source.lanes;
        target.childLanes = source.childLanes;
        target.alternate = source.alternate;
        {
          target.actualDuration = source.actualDuration;
          target.actualStartTime = source.actualStartTime;
          target.selfBaseDuration = source.selfBaseDuration;
          target.treeBaseDuration = source.treeBaseDuration;
        }
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
      }
      function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.callbackNode = null;
        this.callbackPriority = NoLane;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        this.identifierPrefix = identifierPrefix;
        this.onRecoverableError = onRecoverableError;
        {
          this.mutableSourceEagerHydrationData = null;
        }
        {
          this.effectDuration = 0;
          this.passiveEffectDuration = 0;
        }
        {
          this.memoizedUpdaters = /* @__PURE__ */ new Set();
          var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
          for (var _i = 0; _i < TotalLanes; _i++) {
            pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
          }
        }
        {
          switch (tag) {
            case ConcurrentRoot:
              this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
              break;
            case LegacyRoot:
              this._debugRootType = hydrate2 ? "hydrate()" : "render()";
              break;
          }
        }
      }
      function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
        var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
        root2.current = uninitializedFiber;
        uninitializedFiber.stateNode = root2;
        {
          var _initialState = {
            element: initialChildren,
            isDehydrated: hydrate2,
            cache: null,
            // not enabled yet
            transitions: null,
            pendingSuspenseBoundaries: null
          };
          uninitializedFiber.memoizedState = _initialState;
        }
        initializeUpdateQueue(uninitializedFiber);
        return root2;
      }
      var ReactVersion = "18.2.0";
      function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
        {
          checkKeyStringCoercion(key);
        }
        return {
          // This tag allow us to uniquely identify this as a React Portal
          $$typeof: REACT_PORTAL_TYPE,
          key: key == null ? null : "" + key,
          children,
          containerInfo,
          implementation
        };
      }
      var didWarnAboutNestedUpdates;
      var didWarnAboutFindNodeInStrictMode;
      {
        didWarnAboutNestedUpdates = false;
        didWarnAboutFindNodeInStrictMode = {};
      }
      function getContextForSubtree(parentComponent) {
        if (!parentComponent) {
          return emptyContextObject;
        }
        var fiber = get2(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
          var Component = fiber.type;
          if (isContextProvider(Component)) {
            return processChildContext(fiber, Component, parentContext);
          }
        }
        return parentContext;
      }
      function findHostInstanceWithWarning(component, methodName) {
        {
          var fiber = get2(component);
          if (fiber === void 0) {
            if (typeof component.render === "function") {
              throw new Error("Unable to find node on an unmounted component.");
            } else {
              var keys2 = Object.keys(component).join(",");
              throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys2);
            }
          }
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          if (hostFiber.mode & StrictLegacyMode) {
            var componentName = getComponentNameFromFiber(fiber) || "Component";
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
              didWarnAboutFindNodeInStrictMode[componentName] = true;
              var previousFiber = current;
              try {
                setCurrentFiber(hostFiber);
                if (fiber.mode & StrictLegacyMode) {
                  error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } else {
                  error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                }
              } finally {
                if (previousFiber) {
                  setCurrentFiber(previousFiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          return hostFiber.stateNode;
        }
      }
      function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate2 = false;
        var initialChildren = null;
        return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      }
      function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate2 = true;
        var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        root2.context = getContextForSubtree(null);
        var current2 = root2.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current2);
        var update = createUpdate(eventTime, lane);
        update.callback = callback !== void 0 && callback !== null ? callback : null;
        enqueueUpdate(current2, update, lane);
        scheduleInitialHydrationOnRoot(root2, lane, eventTime);
        return root2;
      }
      function updateContainer(element, container, parentComponent, callback) {
        {
          onScheduleRoot(container, element);
        }
        var current$1 = container.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current$1);
        {
          markRenderScheduled(lane);
        }
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) {
          container.context = context;
        } else {
          container.pendingContext = context;
        }
        {
          if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
          }
        }
        var update = createUpdate(eventTime, lane);
        update.payload = {
          element
        };
        callback = callback === void 0 ? null : callback;
        if (callback !== null) {
          {
            if (typeof callback !== "function") {
              error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            }
          }
          update.callback = callback;
        }
        var root2 = enqueueUpdate(current$1, update, lane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
          entangleTransitions(root2, current$1, lane);
        }
        return lane;
      }
      function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) {
          return null;
        }
        switch (containerFiber.child.tag) {
          case HostComponent:
            return getPublicInstance(containerFiber.child.stateNode);
          default:
            return containerFiber.child.stateNode;
        }
      }
      function attemptSynchronousHydration$1(fiber) {
        switch (fiber.tag) {
          case HostRoot: {
            var root2 = fiber.stateNode;
            if (isRootDehydrated(root2)) {
              var lanes = getHighestPriorityPendingLanes(root2);
              flushRoot(root2, lanes);
            }
            break;
          }
          case SuspenseComponent: {
            flushSync(function() {
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
              }
            });
            var retryLane = SyncLane;
            markRetryLaneIfNotHydrated(fiber, retryLane);
            break;
          }
        }
      }
      function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) {
          suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
        }
      }
      function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        if (alternate) {
          markRetryLaneImpl(alternate, retryLane);
        }
      }
      function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          return;
        }
        var lane = SelectiveHydrationLane;
        var root2 = enqueueConcurrentRenderForLane(fiber, lane);
        if (root2 !== null) {
          var eventTime = requestEventTime();
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
        }
        markRetryLaneIfNotHydrated(fiber, lane);
      }
      function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          return;
        }
        var lane = requestUpdateLane(fiber);
        var root2 = enqueueConcurrentRenderForLane(fiber, lane);
        if (root2 !== null) {
          var eventTime = requestEventTime();
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
        }
        markRetryLaneIfNotHydrated(fiber, lane);
      }
      function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) {
          return null;
        }
        return hostFiber.stateNode;
      }
      var shouldErrorImpl = function(fiber) {
        return null;
      };
      function shouldError(fiber) {
        return shouldErrorImpl(fiber);
      }
      var shouldSuspendImpl = function(fiber) {
        return false;
      };
      function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
      }
      var overrideHookState = null;
      var overrideHookStateDeletePath = null;
      var overrideHookStateRenamePath = null;
      var overrideProps = null;
      var overridePropsDeletePath = null;
      var overridePropsRenamePath = null;
      var scheduleUpdate = null;
      var setErrorHandler = null;
      var setSuspenseHandler = null;
      {
        var copyWithDeleteImpl = function(obj, path2, index3) {
          var key = path2[index3];
          var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
          if (index3 + 1 === path2.length) {
            if (isArray2(updated)) {
              updated.splice(key, 1);
            } else {
              delete updated[key];
            }
            return updated;
          }
          updated[key] = copyWithDeleteImpl(obj[key], path2, index3 + 1);
          return updated;
        };
        var copyWithDelete = function(obj, path2) {
          return copyWithDeleteImpl(obj, path2, 0);
        };
        var copyWithRenameImpl = function(obj, oldPath, newPath, index3) {
          var oldKey = oldPath[index3];
          var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
          if (index3 + 1 === oldPath.length) {
            var newKey = newPath[index3];
            updated[newKey] = updated[oldKey];
            if (isArray2(updated)) {
              updated.splice(oldKey, 1);
            } else {
              delete updated[oldKey];
            }
          } else {
            updated[oldKey] = copyWithRenameImpl(
              // $FlowFixMe number or string is fine here
              obj[oldKey],
              oldPath,
              newPath,
              index3 + 1
            );
          }
          return updated;
        };
        var copyWithRename = function(obj, oldPath, newPath) {
          if (oldPath.length !== newPath.length) {
            warn2("copyWithRename() expects paths of the same length");
            return;
          } else {
            for (var i2 = 0; i2 < newPath.length - 1; i2++) {
              if (oldPath[i2] !== newPath[i2]) {
                warn2("copyWithRename() expects paths to be the same except for the deepest key");
                return;
              }
            }
          }
          return copyWithRenameImpl(obj, oldPath, newPath, 0);
        };
        var copyWithSetImpl = function(obj, path2, index3, value) {
          if (index3 >= path2.length) {
            return value;
          }
          var key = path2[index3];
          var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
          updated[key] = copyWithSetImpl(obj[key], path2, index3 + 1, value);
          return updated;
        };
        var copyWithSet = function(obj, path2, value) {
          return copyWithSetImpl(obj, path2, 0, value);
        };
        var findHook = function(fiber, id) {
          var currentHook2 = fiber.memoizedState;
          while (currentHook2 !== null && id > 0) {
            currentHook2 = currentHook2.next;
            id--;
          }
          return currentHook2;
        };
        overrideHookState = function(fiber, id, path2, value) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path2, value);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign2({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
        };
        overrideHookStateDeletePath = function(fiber, id, path2) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path2);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign2({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
        };
        overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign2({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
        };
        overrideProps = function(fiber, path2, value) {
          fiber.pendingProps = copyWithSet(fiber.memoizedProps, path2, value);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        };
        overridePropsDeletePath = function(fiber, path2) {
          fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path2);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        };
        overridePropsRenamePath = function(fiber, oldPath, newPath) {
          fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        };
        scheduleUpdate = function(fiber) {
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        };
        setErrorHandler = function(newShouldErrorImpl) {
          shouldErrorImpl = newShouldErrorImpl;
        };
        setSuspenseHandler = function(newShouldSuspendImpl) {
          shouldSuspendImpl = newShouldSuspendImpl;
        };
      }
      function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) {
          return null;
        }
        return hostFiber.stateNode;
      }
      function emptyFindFiberByHostInstance(instance2) {
        return null;
      }
      function getCurrentFiberForDevTools() {
        return current;
      }
      function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
          bundleType: devToolsConfig.bundleType,
          version: devToolsConfig.version,
          rendererPackageName: devToolsConfig.rendererPackageName,
          rendererConfig: devToolsConfig.rendererConfig,
          overrideHookState,
          overrideHookStateDeletePath,
          overrideHookStateRenamePath,
          overrideProps,
          overridePropsDeletePath,
          overridePropsRenamePath,
          setErrorHandler,
          setSuspenseHandler,
          scheduleUpdate,
          currentDispatcherRef: ReactCurrentDispatcher2,
          findHostInstanceByFiber,
          findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
          // React Refresh
          findHostInstancesForRefresh,
          scheduleRefresh,
          scheduleRoot,
          setRefreshHandler,
          // Enables DevTools to append owner stacks to error messages in DEV mode.
          getCurrentFiber: getCurrentFiberForDevTools,
          // Enables DevTools to detect reconciler version rather than renderer version
          // which may not match for third party renderers.
          reconcilerVersion: ReactVersion
        });
      }
      var defaultOnRecoverableError = typeof reportError === "function" ? (
        // In modern browsers, reportError will dispatch an error event,
        // emulating an uncaught JavaScript error.
        reportError
      ) : function(error2) {
        console["error"](error2);
      };
      function ReactDOMRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
        var root2 = this._internalRoot;
        if (root2 === null) {
          throw new Error("Cannot update an unmounted root.");
        }
        {
          if (typeof arguments[1] === "function") {
            error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
          } else if (isValidContainer(arguments[1])) {
            error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
          } else if (typeof arguments[1] !== "undefined") {
            error("You passed a second argument to root.render(...) but it only accepts one argument.");
          }
          var container = root2.containerInfo;
          if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root2.current);
            if (hostInstance) {
              if (hostInstance.parentNode !== container) {
                error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
              }
            }
          }
        }
        updateContainer(children, root2, null, null);
      };
      ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
        {
          if (typeof arguments[0] === "function") {
            error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
          }
        }
        var root2 = this._internalRoot;
        if (root2 !== null) {
          this._internalRoot = null;
          var container = root2.containerInfo;
          {
            if (isAlreadyRendering()) {
              error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
            }
          }
          flushSync(function() {
            updateContainer(null, root2, null, null);
          });
          unmarkContainerAsRoot(container);
        }
      };
      function createRoot2(container, options2) {
        if (!isValidContainer(container)) {
          throw new Error("createRoot(...): Target container is not a DOM element.");
        }
        warnIfReactDOMContainerInDEV(container);
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = "";
        var onRecoverableError = defaultOnRecoverableError;
        if (options2 !== null && options2 !== void 0) {
          {
            if (options2.hydrate) {
              warn2("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
            } else {
              if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
              }
            }
          }
          if (options2.unstable_strictMode === true) {
            isStrictMode = true;
          }
          if (options2.identifierPrefix !== void 0) {
            identifierPrefix = options2.identifierPrefix;
          }
          if (options2.onRecoverableError !== void 0) {
            onRecoverableError = options2.onRecoverableError;
          }
        }
        var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root2.current, container);
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        return new ReactDOMRoot(root2);
      }
      function ReactDOMHydrationRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      function scheduleHydration(target) {
        if (target) {
          queueExplicitHydrationTarget(target);
        }
      }
      ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
      function hydrateRoot(container, initialChildren, options2) {
        if (!isValidContainer(container)) {
          throw new Error("hydrateRoot(...): Target container is not a DOM element.");
        }
        warnIfReactDOMContainerInDEV(container);
        {
          if (initialChildren === void 0) {
            error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
          }
        }
        var hydrationCallbacks = options2 != null ? options2 : null;
        var mutableSources = options2 != null && options2.hydratedSources || null;
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = "";
        var onRecoverableError = defaultOnRecoverableError;
        if (options2 !== null && options2 !== void 0) {
          if (options2.unstable_strictMode === true) {
            isStrictMode = true;
          }
          if (options2.identifierPrefix !== void 0) {
            identifierPrefix = options2.identifierPrefix;
          }
          if (options2.onRecoverableError !== void 0) {
            onRecoverableError = options2.onRecoverableError;
          }
        }
        var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root2.current, container);
        listenToAllSupportedEvents(container);
        if (mutableSources) {
          for (var i2 = 0; i2 < mutableSources.length; i2++) {
            var mutableSource = mutableSources[i2];
            registerMutableSourceForHydration(root2, mutableSource);
          }
        }
        return new ReactDOMHydrationRoot(root2);
      }
      function isValidContainer(node2) {
        return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
      }
      function isValidContainerLegacy(node2) {
        return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || node2.nodeType === COMMENT_NODE && node2.nodeValue === " react-mount-point-unstable "));
      }
      function warnIfReactDOMContainerInDEV(container) {
        {
          if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
            error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
          }
          if (isContainerMarkedAsRoot(container)) {
            if (container._reactRootContainer) {
              error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
            } else {
              error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
            }
          }
        }
      }
      var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
      var topLevelUpdateWarnings;
      {
        topLevelUpdateWarnings = function(container) {
          if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
            if (hostInstance) {
              if (hostInstance.parentNode !== container) {
                error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
              }
            }
          }
          var isRootRenderedBySomeReact = !!container._reactRootContainer;
          var rootEl = getReactRootElementInContainer(container);
          var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
          if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
            error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
          }
          if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
            error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
          }
        };
      }
      function getReactRootElementInContainer(container) {
        if (!container) {
          return null;
        }
        if (container.nodeType === DOCUMENT_NODE) {
          return container.documentElement;
        } else {
          return container.firstChild;
        }
      }
      function noopOnRecoverableError() {
      }
      function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
        if (isHydrationContainer) {
          if (typeof callback === "function") {
            var originalCallback = callback;
            callback = function() {
              var instance2 = getPublicRootInstance(root2);
              originalCallback.call(instance2);
            };
          }
          var root2 = createHydrationContainer(
            initialChildren,
            callback,
            container,
            LegacyRoot,
            null,
            // hydrationCallbacks
            false,
            // isStrictMode
            false,
            // concurrentUpdatesByDefaultOverride,
            "",
            // identifierPrefix
            noopOnRecoverableError
          );
          container._reactRootContainer = root2;
          markContainerAsRoot(root2.current, container);
          var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(rootContainerElement);
          flushSync();
          return root2;
        } else {
          var rootSibling;
          while (rootSibling = container.lastChild) {
            container.removeChild(rootSibling);
          }
          if (typeof callback === "function") {
            var _originalCallback = callback;
            callback = function() {
              var instance2 = getPublicRootInstance(_root);
              _originalCallback.call(instance2);
            };
          }
          var _root = createContainer(
            container,
            LegacyRoot,
            null,
            // hydrationCallbacks
            false,
            // isStrictMode
            false,
            // concurrentUpdatesByDefaultOverride,
            "",
            // identifierPrefix
            noopOnRecoverableError
          );
          container._reactRootContainer = _root;
          markContainerAsRoot(_root.current, container);
          var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(_rootContainerElement);
          flushSync(function() {
            updateContainer(initialChildren, _root, parentComponent, callback);
          });
          return _root;
        }
      }
      function warnOnInvalidCallback$1(callback, callerName) {
        {
          if (callback !== null && typeof callback !== "function") {
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
          }
        }
      }
      function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        {
          topLevelUpdateWarnings(container);
          warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
        }
        var maybeRoot = container._reactRootContainer;
        var root2;
        if (!maybeRoot) {
          root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
        } else {
          root2 = maybeRoot;
          if (typeof callback === "function") {
            var originalCallback = callback;
            callback = function() {
              var instance2 = getPublicRootInstance(root2);
              originalCallback.call(instance2);
            };
          }
          updateContainer(children, root2, parentComponent, callback);
        }
        return getPublicRootInstance(root2);
      }
      function findDOMNode(componentOrElement) {
        {
          var owner = ReactCurrentOwner$3.current;
          if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) {
              error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
            }
            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }
        if (componentOrElement == null) {
          return null;
        }
        if (componentOrElement.nodeType === ELEMENT_NODE) {
          return componentOrElement;
        }
        {
          return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
        }
      }
      function hydrate(element, container, callback) {
        {
          error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        }
        if (!isValidContainerLegacy(container)) {
          throw new Error("Target container is not a DOM element.");
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
          if (isModernRoot) {
            error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
          }
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
      }
      function render2(element, container, callback) {
        {
          error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        }
        if (!isValidContainerLegacy(container)) {
          throw new Error("Target container is not a DOM element.");
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
          if (isModernRoot) {
            error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
          }
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
      }
      function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        {
          error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        }
        if (!isValidContainerLegacy(containerNode)) {
          throw new Error("Target container is not a DOM element.");
        }
        if (parentComponent == null || !has2(parentComponent)) {
          throw new Error("parentComponent must be a valid React Component");
        }
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
      }
      function unmountComponentAtNode(container) {
        if (!isValidContainerLegacy(container)) {
          throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
          if (isModernRoot) {
            error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
          }
        }
        if (container._reactRootContainer) {
          {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            if (renderedByDifferentReact) {
              error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
            }
          }
          flushSync(function() {
            legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
              container._reactRootContainer = null;
              unmarkContainerAsRoot(container);
            });
          });
          return true;
        } else {
          {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
            if (hasNonRootReactChild) {
              error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
            }
          }
          return false;
        }
      }
      setAttemptSynchronousHydration(attemptSynchronousHydration$1);
      setAttemptContinuousHydration(attemptContinuousHydration$1);
      setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
      setGetCurrentUpdatePriority(getCurrentUpdatePriority);
      setAttemptHydrationAtPriority(runWithPriority);
      {
        if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
        Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
        Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
          error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        }
      }
      setRestoreImplementation(restoreControlledState$3);
      setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
      function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
        if (!isValidContainer(container)) {
          throw new Error("Target container is not a DOM element.");
        }
        return createPortal(children, container, null, key);
      }
      function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
      }
      var Internals = {
        usingClientEntryPoint: false,
        // Keep in sync with ReactTestUtils.js.
        // This is an array for better minification.
        Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
      };
      function createRoot$1(container, options2) {
        {
          if (!Internals.usingClientEntryPoint && true) {
            error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
          }
        }
        return createRoot2(container, options2);
      }
      function hydrateRoot$1(container, initialChildren, options2) {
        {
          if (!Internals.usingClientEntryPoint && true) {
            error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
          }
        }
        return hydrateRoot(container, initialChildren, options2);
      }
      function flushSync$1(fn) {
        {
          if (isAlreadyRendering()) {
            error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
          }
        }
        return flushSync(fn);
      }
      var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: "react-dom"
      });
      {
        if (!foundDevTools && canUseDOM && window.top === window.self) {
          if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
            var protocol = window.location.protocol;
            if (/^(https?|file):$/.test(protocol)) {
              console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
            }
          }
        }
      }
      reactDom_development.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
      reactDom_development.createPortal = createPortal$1;
      reactDom_development.createRoot = createRoot$1;
      reactDom_development.findDOMNode = findDOMNode;
      reactDom_development.flushSync = flushSync$1;
      reactDom_development.hydrate = hydrate;
      reactDom_development.hydrateRoot = hydrateRoot$1;
      reactDom_development.render = render2;
      reactDom_development.unmountComponentAtNode = unmountComponentAtNode;
      reactDom_development.unstable_batchedUpdates = batchedUpdates$1;
      reactDom_development.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
      reactDom_development.version = ReactVersion;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
      }
    })();
  }
  {
    reactDom.exports = reactDom_development;
  }
  var reactDomExports = reactDom.exports;
  const ReactDOM = /* @__PURE__ */ getDefaultExportFromCjs(reactDomExports);
  const config = {
    disabled: false
  };
  var timeoutsShape = PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
    enter: PropTypes.number,
    exit: PropTypes.number,
    appear: PropTypes.number
  }).isRequired]);
  PropTypes.oneOfType([PropTypes.string, PropTypes.shape({
    enter: PropTypes.string,
    exit: PropTypes.string,
    active: PropTypes.string
  }), PropTypes.shape({
    enter: PropTypes.string,
    enterDone: PropTypes.string,
    enterActive: PropTypes.string,
    exit: PropTypes.string,
    exitDone: PropTypes.string,
    exitActive: PropTypes.string
  })]);
  const TransitionGroupContext = React.createContext(null);
  var UNMOUNTED = "unmounted";
  var EXITED = "exited";
  var ENTERING = "entering";
  var ENTERED = "entered";
  var EXITING = "exiting";
  var Transition = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(Transition2, _React$Component);
    function Transition2(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var parentGroup = context;
      var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
      var initialStatus;
      _this.appearStatus = null;
      if (props.in) {
        if (appear) {
          initialStatus = EXITED;
          _this.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props.unmountOnExit || props.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }
      _this.state = {
        status: initialStatus
      };
      _this.nextCallback = null;
      return _this;
    }
    Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
      var nextIn = _ref.in;
      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED
        };
      }
      return null;
    };
    var _proto = Transition2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;
      if (prevProps !== this.props) {
        var status = this.state.status;
        if (this.props.in) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }
      this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
      var timeout = this.props.timeout;
      var exit, enter, appear;
      exit = enter = appear = timeout;
      if (timeout != null && typeof timeout !== "number") {
        exit = timeout.exit;
        enter = timeout.enter;
        appear = timeout.appear !== void 0 ? timeout.appear : enter;
      }
      return {
        exit,
        enter,
        appear
      };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }
      if (nextStatus !== null) {
        this.cancelNextCallback();
        if (nextStatus === ENTERING) {
          if (this.props.unmountOnExit || this.props.mountOnEnter) {
            this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
          }
          this.performEnter(mounting);
        } else {
          this.performExit();
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED
        });
      }
    };
    _proto.performEnter = function performEnter(mounting) {
      var _this2 = this;
      var enter = this.props.enter;
      var appearing = this.context ? this.context.isMounting : mounting;
      var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
      var timeouts = this.getTimeouts();
      var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
      if (!mounting && !enter || config.disabled) {
        this.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode);
        });
        return;
      }
      this.props.onEnter(maybeNode, maybeAppearing);
      this.safeSetState({
        status: ENTERING
      }, function() {
        _this2.props.onEntering(maybeNode, maybeAppearing);
        _this2.onTransitionEnd(enterTimeout, function() {
          _this2.safeSetState({
            status: ENTERED
          }, function() {
            _this2.props.onEntered(maybeNode, maybeAppearing);
          });
        });
      });
    };
    _proto.performExit = function performExit() {
      var _this3 = this;
      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      var maybeNode = this.props.nodeRef ? void 0 : ReactDOM.findDOMNode(this);
      if (!exit || config.disabled) {
        this.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
        return;
      }
      this.props.onExit(maybeNode);
      this.safeSetState({
        status: EXITING
      }, function() {
        _this3.props.onExiting(maybeNode);
        _this3.onTransitionEnd(timeouts.exit, function() {
          _this3.safeSetState({
            status: EXITED
          }, function() {
            _this3.props.onExited(maybeNode);
          });
        });
      });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;
      var active = true;
      this.nextCallback = function(event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };
      this.nextCallback.cancel = function() {
        active = false;
      };
      return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
      this.setNextCallback(handler);
      var node2 = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
      var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
      if (!node2 || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }
      if (this.props.addEndListener) {
        var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node2, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
        this.props.addEndListener(maybeNode, maybeNextCallback);
      }
      if (timeout != null) {
        setTimeout(this.nextCallback, timeout);
      }
    };
    _proto.render = function render2() {
      var status = this.state.status;
      if (status === UNMOUNTED) {
        return null;
      }
      var _this$props = this.props, children = _this$props.children, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
      return (
        // allows for nested Transitions
        /* @__PURE__ */ React.createElement(TransitionGroupContext.Provider, {
          value: null
        }, typeof children === "function" ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps))
      );
    };
    return Transition2;
  }(React.Component);
  Transition.contextType = TransitionGroupContext;
  Transition.propTypes = {
    /**
     * A React reference to DOM element that need to transition:
     * https://stackoverflow.com/a/51127130/4671932
     *
     *   - When `nodeRef` prop is used, `node` is not passed to callback functions
     *      (e.g. `onEnter`) because user already has direct access to the node.
     *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
     *     `nodeRef` need to be provided to `Transition` with changed `key` prop
     *     (see
     *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
     */
    nodeRef: PropTypes.shape({
      current: typeof Element === "undefined" ? PropTypes.any : function(propValue, key, componentName, location2, propFullName, secret) {
        var value = propValue[key];
        return PropTypes.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location2, propFullName, secret);
      }
    }),
    /**
     * A `function` child can be used instead of a React element. This function is
     * called with the current transition status (`'entering'`, `'entered'`,
     * `'exiting'`, `'exited'`), which can be used to apply context
     * specific props to a component.
     *
     * ```jsx
     * <Transition in={this.state.in} timeout={150}>
     *   {state => (
     *     <MyComponent className={`fade fade-${state}`} />
     *   )}
     * </Transition>
     * ```
     */
    children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,
    /**
     * Show the component; triggers the enter or exit states
     */
    in: PropTypes.bool,
    /**
     * By default the child component is mounted immediately along with
     * the parent `Transition` component. If you want to "lazy mount" the component on the
     * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
     * mounted, even on "exited", unless you also specify `unmountOnExit`.
     */
    mountOnEnter: PropTypes.bool,
    /**
     * By default the child component stays mounted after it reaches the `'exited'` state.
     * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
     */
    unmountOnExit: PropTypes.bool,
    /**
     * By default the child component does not perform the enter transition when
     * it first mounts, regardless of the value of `in`. If you want this
     * behavior, set both `appear` and `in` to `true`.
     *
     * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
     * > only adds an additional enter transition. However, in the
     * > `<CSSTransition>` component that first enter transition does result in
     * > additional `.appear-*` classes, that way you can choose to style it
     * > differently.
     */
    appear: PropTypes.bool,
    /**
     * Enable or disable enter transitions.
     */
    enter: PropTypes.bool,
    /**
     * Enable or disable exit transitions.
     */
    exit: PropTypes.bool,
    /**
     * The duration of the transition, in milliseconds.
     * Required unless `addEndListener` is provided.
     *
     * You may specify a single timeout for all transitions:
     *
     * ```jsx
     * timeout={500}
     * ```
     *
     * or individually:
     *
     * ```jsx
     * timeout={{
     *  appear: 500,
     *  enter: 300,
     *  exit: 500,
     * }}
     * ```
     *
     * - `appear` defaults to the value of `enter`
     * - `enter` defaults to `0`
     * - `exit` defaults to `0`
     *
     * @type {number | { enter?: number, exit?: number, appear?: number }}
     */
    timeout: function timeout(props) {
      var pt = timeoutsShape;
      if (!props.addEndListener)
        pt = pt.isRequired;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return pt.apply(void 0, [props].concat(args));
    },
    /**
     * Add a custom transition end trigger. Called with the transitioning
     * DOM node and a `done` callback. Allows for more fine grained transition end
     * logic. Timeouts are still used as a fallback if provided.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * ```jsx
     * addEndListener={(node, done) => {
     *   // use the css transitionend event to mark the finish of a transition
     *   node.addEventListener('transitionend', done, false);
     * }}
     * ```
     */
    addEndListener: PropTypes.func,
    /**
     * Callback fired before the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEnter: PropTypes.func,
    /**
     * Callback fired after the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: PropTypes.func,
    /**
     * Callback fired after the "entered" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEntered: PropTypes.func,
    /**
     * Callback fired before the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExit: PropTypes.func,
    /**
     * Callback fired after the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExiting: PropTypes.func,
    /**
     * Callback fired after the "exited" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExited: PropTypes.func
  };
  function noop() {
  }
  Transition.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop,
    onEntering: noop,
    onEntered: noop,
    onExit: noop,
    onExiting: noop,
    onExited: noop
  };
  Transition.UNMOUNTED = UNMOUNTED;
  Transition.EXITED = EXITED;
  Transition.ENTERING = ENTERING;
  Transition.ENTERED = ENTERED;
  Transition.EXITING = EXITING;
  const Transition$1 = Transition;
  function getChildMapping(children, mapFn) {
    var mapper = function mapper2(child) {
      return mapFn && reactExports.isValidElement(child) ? mapFn(child) : child;
    };
    var result = /* @__PURE__ */ Object.create(null);
    if (children)
      reactExports.Children.map(children, function(c) {
        return c;
      }).forEach(function(child) {
        result[child.key] = mapper(child);
      });
    return result;
  }
  function mergeChildMappings(prev2, next2) {
    prev2 = prev2 || {};
    next2 = next2 || {};
    function getValueForKey(key) {
      return key in next2 ? next2[key] : prev2[key];
    }
    var nextKeysPending = /* @__PURE__ */ Object.create(null);
    var pendingKeys = [];
    for (var prevKey in prev2) {
      if (prevKey in next2) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];
        }
      } else {
        pendingKeys.push(prevKey);
      }
    }
    var i2;
    var childMapping = {};
    for (var nextKey in next2) {
      if (nextKeysPending[nextKey]) {
        for (i2 = 0; i2 < nextKeysPending[nextKey].length; i2++) {
          var pendingNextKey = nextKeysPending[nextKey][i2];
          childMapping[nextKeysPending[nextKey][i2]] = getValueForKey(pendingNextKey);
        }
      }
      childMapping[nextKey] = getValueForKey(nextKey);
    }
    for (i2 = 0; i2 < pendingKeys.length; i2++) {
      childMapping[pendingKeys[i2]] = getValueForKey(pendingKeys[i2]);
    }
    return childMapping;
  }
  function getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
  }
  function getInitialChildMapping(props, onExited) {
    return getChildMapping(props.children, function(child) {
      return reactExports.cloneElement(child, {
        onExited: onExited.bind(null, child),
        in: true,
        appear: getProp(child, "appear", props),
        enter: getProp(child, "enter", props),
        exit: getProp(child, "exit", props)
      });
    });
  }
  function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function(key) {
      var child = children[key];
      if (!reactExports.isValidElement(child))
        return;
      var hasPrev = key in prevChildMapping;
      var hasNext = key in nextChildMapping;
      var prevChild = prevChildMapping[key];
      var isLeaving = reactExports.isValidElement(prevChild) && !prevChild.props.in;
      if (hasNext && (!hasPrev || isLeaving)) {
        children[key] = reactExports.cloneElement(child, {
          onExited: onExited.bind(null, child),
          in: true,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      } else if (!hasNext && hasPrev && !isLeaving) {
        children[key] = reactExports.cloneElement(child, {
          in: false
        });
      } else if (hasNext && hasPrev && reactExports.isValidElement(prevChild)) {
        children[key] = reactExports.cloneElement(child, {
          onExited: onExited.bind(null, child),
          in: prevChild.props.in,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      }
    });
    return children;
  }
  var values = Object.values || function(obj) {
    return Object.keys(obj).map(function(k) {
      return obj[k];
    });
  };
  var defaultProps = {
    component: "div",
    childFactory: function childFactory(child) {
      return child;
    }
  };
  var TransitionGroup = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(TransitionGroup2, _React$Component);
    function TransitionGroup2(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
      _this.state = {
        contextValue: {
          isMounting: true
        },
        handleExited,
        firstRender: true
      };
      return _this;
    }
    var _proto = TransitionGroup2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.mounted = true;
      this.setState({
        contextValue: {
          isMounting: false
        }
      });
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.mounted = false;
    };
    TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
      var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
      return {
        children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
        firstRender: false
      };
    };
    _proto.handleExited = function handleExited(child, node2) {
      var currentChildMapping = getChildMapping(this.props.children);
      if (child.key in currentChildMapping)
        return;
      if (child.props.onExited) {
        child.props.onExited(node2);
      }
      if (this.mounted) {
        this.setState(function(state) {
          var children = _extends({}, state.children);
          delete children[child.key];
          return {
            children
          };
        });
      }
    };
    _proto.render = function render2() {
      var _this$props = this.props, Component = _this$props.component, childFactory = _this$props.childFactory, props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
      var contextValue = this.state.contextValue;
      var children = values(this.state.children).map(childFactory);
      delete props.appear;
      delete props.enter;
      delete props.exit;
      if (Component === null) {
        return /* @__PURE__ */ React.createElement(TransitionGroupContext.Provider, {
          value: contextValue
        }, children);
      }
      return /* @__PURE__ */ React.createElement(TransitionGroupContext.Provider, {
        value: contextValue
      }, /* @__PURE__ */ React.createElement(Component, props, children));
    };
    return TransitionGroup2;
  }(React.Component);
  TransitionGroup.propTypes = {
    /**
     * `<TransitionGroup>` renders a `<div>` by default. You can change this
     * behavior by providing a `component` prop.
     * If you use React v16+ and would like to avoid a wrapping `<div>` element
     * you can pass in `component={null}`. This is useful if the wrapping div
     * borks your css styles.
     */
    component: PropTypes.any,
    /**
     * A set of `<Transition>` components, that are toggled `in` and out as they
     * leave. the `<TransitionGroup>` will inject specific transition props, so
     * remember to spread them through if you are wrapping the `<Transition>` as
     * with our `<Fade>` example.
     *
     * While this component is meant for multiple `Transition` or `CSSTransition`
     * children, sometimes you may want to have a single transition child with
     * content that you want to be transitioned out and in when you change it
     * (e.g. routes, images etc.) In that case you can change the `key` prop of
     * the transition child as you change its content, this will cause
     * `TransitionGroup` to transition the child out and back in.
     */
    children: PropTypes.node,
    /**
     * A convenience prop that enables or disables appear animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    appear: PropTypes.bool,
    /**
     * A convenience prop that enables or disables enter animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    enter: PropTypes.bool,
    /**
     * A convenience prop that enables or disables exit animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    exit: PropTypes.bool,
    /**
     * You may need to apply reactive updates to a child as it is exiting.
     * This is generally done by using `cloneElement` however in the case of an exiting
     * child the element has already been removed and not accessible to the consumer.
     *
     * If you do need to update a child as it leaves you can provide a `childFactory`
     * to wrap every child, even the ones that are leaving.
     *
     * @type Function(child: ReactElement) -> ReactElement
     */
    childFactory: PropTypes.func
  };
  TransitionGroup.defaultProps = defaultProps;
  const TransitionGroup$1 = TransitionGroup;
  function getTransitionProps(props, options) {
    var _style$transitionDura, _style$transitionTimi;
    const {
      timeout,
      easing: easing2,
      style: style2 = {}
    } = props;
    return {
      duration: (_style$transitionDura = style2.transitionDuration) != null ? _style$transitionDura : typeof timeout === "number" ? timeout : timeout[options.mode] || 0,
      easing: (_style$transitionTimi = style2.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing2 === "object" ? easing2[options.mode] : easing2,
      delay: style2.transitionDelay
    };
  }
  function getPaperUtilityClass(slot) {
    return generateUtilityClass("MuiPaper", slot);
  }
  generateUtilityClasses("MuiPaper", ["root", "rounded", "outlined", "elevation", "elevation0", "elevation1", "elevation2", "elevation3", "elevation4", "elevation5", "elevation6", "elevation7", "elevation8", "elevation9", "elevation10", "elevation11", "elevation12", "elevation13", "elevation14", "elevation15", "elevation16", "elevation17", "elevation18", "elevation19", "elevation20", "elevation21", "elevation22", "elevation23", "elevation24"]);
  const _excluded$c = ["className", "component", "elevation", "square", "variant"];
  const useUtilityClasses$a = (ownerState) => {
    const {
      square,
      elevation,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, !square && "rounded", variant === "elevation" && `elevation${elevation}`]
    };
    return composeClasses(slots, getPaperUtilityClass, classes);
  };
  const PaperRoot = styled$1("div", {
    name: "MuiPaper",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, styles2[ownerState.variant], !ownerState.square && styles2.rounded, ownerState.variant === "elevation" && styles2[`elevation${ownerState.elevation}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$vars$overlays;
    return _extends({
      backgroundColor: (theme.vars || theme).palette.background.paper,
      color: (theme.vars || theme).palette.text.primary,
      transition: theme.transitions.create("box-shadow")
    }, !ownerState.square && {
      borderRadius: theme.shape.borderRadius
    }, ownerState.variant === "outlined" && {
      border: `1px solid ${(theme.vars || theme).palette.divider}`
    }, ownerState.variant === "elevation" && _extends({
      boxShadow: (theme.vars || theme).shadows[ownerState.elevation]
    }, !theme.vars && theme.palette.mode === "dark" && {
      backgroundImage: `linear-gradient(${alpha("#fff", getOverlayAlpha$1(ownerState.elevation))}, ${alpha("#fff", getOverlayAlpha$1(ownerState.elevation))})`
    }, theme.vars && {
      backgroundImage: (_theme$vars$overlays = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays[ownerState.elevation]
    }));
  });
  const Paper = /* @__PURE__ */ reactExports.forwardRef(function Paper2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiPaper"
    });
    const {
      className,
      component = "div",
      elevation = 1,
      square = false,
      variant = "elevation"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$c);
    const ownerState = _extends({}, props, {
      component,
      elevation,
      square,
      variant
    });
    const classes = useUtilityClasses$a(ownerState);
    {
      const theme = useTheme();
      if (theme.shadows[elevation] === void 0) {
        console.error([`MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${elevation}]\` is defined.`].join("\n"));
      }
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(PaperRoot, _extends({
      as: component,
      ownerState,
      className: clsx(classes.root, className),
      ref
    }, other));
  });
  Paper.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * Shadow depth, corresponds to `dp` in the spec.
     * It accepts values between 0 and 24 inclusive.
     * @default 1
     */
    elevation: chainPropTypes(integerPropType, (props) => {
      const {
        elevation,
        variant
      } = props;
      if (elevation > 0 && variant === "outlined") {
        return new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
      }
      return null;
    }),
    /**
     * If `true`, rounded corners are disabled.
     * @default false
     */
    square: PropTypes.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The variant to use.
     * @default 'elevation'
     */
    variant: PropTypes.oneOfType([PropTypes.oneOf(["elevation", "outlined"]), PropTypes.string])
  };
  const Paper$1 = Paper;
  function Ripple(props) {
    const {
      className,
      classes,
      pulsate = false,
      rippleX,
      rippleY,
      rippleSize,
      in: inProp,
      onExited,
      timeout
    } = props;
    const [leaving, setLeaving] = reactExports.useState(false);
    const rippleClassName = clsx(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
    const rippleStyles = {
      width: rippleSize,
      height: rippleSize,
      top: -(rippleSize / 2) + rippleY,
      left: -(rippleSize / 2) + rippleX
    };
    const childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
    if (!inProp && !leaving) {
      setLeaving(true);
    }
    reactExports.useEffect(() => {
      if (!inProp && onExited != null) {
        const timeoutId = setTimeout(onExited, timeout);
        return () => {
          clearTimeout(timeoutId);
        };
      }
      return void 0;
    }, [onExited, inProp, timeout]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
      className: rippleClassName,
      style: rippleStyles,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", {
        className: childClassName
      })
    });
  }
  Ripple.propTypes = {
    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: PropTypes.object.isRequired,
    className: PropTypes.string,
    /**
     * @ignore - injected from TransitionGroup
     */
    in: PropTypes.bool,
    /**
     * @ignore - injected from TransitionGroup
     */
    onExited: PropTypes.func,
    /**
     * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
     */
    pulsate: PropTypes.bool,
    /**
     * Diameter of the ripple.
     */
    rippleSize: PropTypes.number,
    /**
     * Horizontal position of the ripple center.
     */
    rippleX: PropTypes.number,
    /**
     * Vertical position of the ripple center.
     */
    rippleY: PropTypes.number,
    /**
     * exit delay
     */
    timeout: PropTypes.number.isRequired
  };
  const touchRippleClasses = generateUtilityClasses("MuiTouchRipple", ["root", "ripple", "rippleVisible", "ripplePulsate", "child", "childLeaving", "childPulsate"]);
  const touchRippleClasses$1 = touchRippleClasses;
  const _excluded$b = ["center", "classes", "className"];
  let _$1 = (t) => t, _t$1, _t2$1, _t3$1, _t4$1;
  const DURATION = 550;
  const DELAY_RIPPLE = 80;
  const enterKeyframe = keyframes(_t$1 || (_t$1 = _$1`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`));
  const exitKeyframe = keyframes(_t2$1 || (_t2$1 = _$1`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`));
  const pulsateKeyframe = keyframes(_t3$1 || (_t3$1 = _$1`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`));
  const TouchRippleRoot = styled$1("span", {
    name: "MuiTouchRipple",
    slot: "Root"
  })({
    overflow: "hidden",
    pointerEvents: "none",
    position: "absolute",
    zIndex: 0,
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    borderRadius: "inherit"
  });
  const TouchRippleRipple = styled$1(Ripple, {
    name: "MuiTouchRipple",
    slot: "Ripple"
  })(_t4$1 || (_t4$1 = _$1`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`), touchRippleClasses$1.rippleVisible, enterKeyframe, DURATION, ({
    theme
  }) => theme.transitions.easing.easeInOut, touchRippleClasses$1.ripplePulsate, ({
    theme
  }) => theme.transitions.duration.shorter, touchRippleClasses$1.child, touchRippleClasses$1.childLeaving, exitKeyframe, DURATION, ({
    theme
  }) => theme.transitions.easing.easeInOut, touchRippleClasses$1.childPulsate, pulsateKeyframe, ({
    theme
  }) => theme.transitions.easing.easeInOut);
  const TouchRipple = /* @__PURE__ */ reactExports.forwardRef(function TouchRipple2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTouchRipple"
    });
    const {
      center: centerProp = false,
      classes = {},
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$b);
    const [ripples, setRipples] = reactExports.useState([]);
    const nextKey = reactExports.useRef(0);
    const rippleCallback = reactExports.useRef(null);
    reactExports.useEffect(() => {
      if (rippleCallback.current) {
        rippleCallback.current();
        rippleCallback.current = null;
      }
    }, [ripples]);
    const ignoringMouseDown = reactExports.useRef(false);
    const startTimer = reactExports.useRef(0);
    const startTimerCommit = reactExports.useRef(null);
    const container = reactExports.useRef(null);
    reactExports.useEffect(() => {
      return () => {
        if (startTimer.current) {
          clearTimeout(startTimer.current);
        }
      };
    }, []);
    const startCommit = reactExports.useCallback((params) => {
      const {
        pulsate: pulsate2,
        rippleX,
        rippleY,
        rippleSize,
        cb
      } = params;
      setRipples((oldRipples) => [...oldRipples, /* @__PURE__ */ jsxRuntimeExports.jsx(TouchRippleRipple, {
        classes: {
          ripple: clsx(classes.ripple, touchRippleClasses$1.ripple),
          rippleVisible: clsx(classes.rippleVisible, touchRippleClasses$1.rippleVisible),
          ripplePulsate: clsx(classes.ripplePulsate, touchRippleClasses$1.ripplePulsate),
          child: clsx(classes.child, touchRippleClasses$1.child),
          childLeaving: clsx(classes.childLeaving, touchRippleClasses$1.childLeaving),
          childPulsate: clsx(classes.childPulsate, touchRippleClasses$1.childPulsate)
        },
        timeout: DURATION,
        pulsate: pulsate2,
        rippleX,
        rippleY,
        rippleSize
      }, nextKey.current)]);
      nextKey.current += 1;
      rippleCallback.current = cb;
    }, [classes]);
    const start = reactExports.useCallback((event = {}, options = {}, cb = () => {
    }) => {
      const {
        pulsate: pulsate2 = false,
        center = centerProp || options.pulsate,
        fakeElement = false
        // For test purposes
      } = options;
      if ((event == null ? void 0 : event.type) === "mousedown" && ignoringMouseDown.current) {
        ignoringMouseDown.current = false;
        return;
      }
      if ((event == null ? void 0 : event.type) === "touchstart") {
        ignoringMouseDown.current = true;
      }
      const element = fakeElement ? null : container.current;
      const rect = element ? element.getBoundingClientRect() : {
        width: 0,
        height: 0,
        left: 0,
        top: 0
      };
      let rippleX;
      let rippleY;
      let rippleSize;
      if (center || event === void 0 || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
        rippleX = Math.round(rect.width / 2);
        rippleY = Math.round(rect.height / 2);
      } else {
        const {
          clientX,
          clientY
        } = event.touches && event.touches.length > 0 ? event.touches[0] : event;
        rippleX = Math.round(clientX - rect.left);
        rippleY = Math.round(clientY - rect.top);
      }
      if (center) {
        rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3);
        if (rippleSize % 2 === 0) {
          rippleSize += 1;
        }
      } else {
        const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
        const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
        rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
      }
      if (event != null && event.touches) {
        if (startTimerCommit.current === null) {
          startTimerCommit.current = () => {
            startCommit({
              pulsate: pulsate2,
              rippleX,
              rippleY,
              rippleSize,
              cb
            });
          };
          startTimer.current = setTimeout(() => {
            if (startTimerCommit.current) {
              startTimerCommit.current();
              startTimerCommit.current = null;
            }
          }, DELAY_RIPPLE);
        }
      } else {
        startCommit({
          pulsate: pulsate2,
          rippleX,
          rippleY,
          rippleSize,
          cb
        });
      }
    }, [centerProp, startCommit]);
    const pulsate = reactExports.useCallback(() => {
      start({}, {
        pulsate: true
      });
    }, [start]);
    const stop = reactExports.useCallback((event, cb) => {
      clearTimeout(startTimer.current);
      if ((event == null ? void 0 : event.type) === "touchend" && startTimerCommit.current) {
        startTimerCommit.current();
        startTimerCommit.current = null;
        startTimer.current = setTimeout(() => {
          stop(event, cb);
        });
        return;
      }
      startTimerCommit.current = null;
      setRipples((oldRipples) => {
        if (oldRipples.length > 0) {
          return oldRipples.slice(1);
        }
        return oldRipples;
      });
      rippleCallback.current = cb;
    }, []);
    reactExports.useImperativeHandle(ref, () => ({
      pulsate,
      start,
      stop
    }), [pulsate, start, stop]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TouchRippleRoot, _extends({
      className: clsx(touchRippleClasses$1.root, classes.root, className),
      ref: container
    }, other, {
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionGroup$1, {
        component: null,
        exit: true,
        children: ripples
      })
    }));
  });
  TouchRipple.propTypes = {
    /**
     * If `true`, the ripple starts at the center of the component
     * rather than at the point of interaction.
     */
    center: PropTypes.bool,
    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string
  };
  const TouchRipple$1 = TouchRipple;
  function getButtonBaseUtilityClass(slot) {
    return generateUtilityClass("MuiButtonBase", slot);
  }
  const buttonBaseClasses = generateUtilityClasses("MuiButtonBase", ["root", "disabled", "focusVisible"]);
  const buttonBaseClasses$1 = buttonBaseClasses;
  const _excluded$a = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "touchRippleRef", "type"];
  const useUtilityClasses$9 = (ownerState) => {
    const {
      disabled,
      focusVisible,
      focusVisibleClassName,
      classes
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", focusVisible && "focusVisible"]
    };
    const composedClasses = composeClasses(slots, getButtonBaseUtilityClass, classes);
    if (focusVisible && focusVisibleClassName) {
      composedClasses.root += ` ${focusVisibleClassName}`;
    }
    return composedClasses;
  };
  const ButtonBaseRoot = styled$1("button", {
    name: "MuiButtonBase",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  })({
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    position: "relative",
    boxSizing: "border-box",
    WebkitTapHighlightColor: "transparent",
    backgroundColor: "transparent",
    // Reset default value
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    border: 0,
    margin: 0,
    // Remove the margin in Safari
    borderRadius: 0,
    padding: 0,
    // Remove the padding in Firefox
    cursor: "pointer",
    userSelect: "none",
    verticalAlign: "middle",
    MozAppearance: "none",
    // Reset
    WebkitAppearance: "none",
    // Reset
    textDecoration: "none",
    // So we take precedent over the style of a native <a /> element.
    color: "inherit",
    "&::-moz-focus-inner": {
      borderStyle: "none"
      // Remove Firefox dotted outline.
    },
    [`&.${buttonBaseClasses$1.disabled}`]: {
      pointerEvents: "none",
      // Disable link interactions
      cursor: "default"
    },
    "@media print": {
      colorAdjust: "exact"
    }
  });
  const ButtonBase = /* @__PURE__ */ reactExports.forwardRef(function ButtonBase2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiButtonBase"
    });
    const {
      action,
      centerRipple = false,
      children,
      className,
      component = "button",
      disabled = false,
      disableRipple = false,
      disableTouchRipple = false,
      focusRipple = false,
      LinkComponent = "a",
      onBlur,
      onClick,
      onContextMenu,
      onDragLeave,
      onFocus,
      onFocusVisible,
      onKeyDown,
      onKeyUp,
      onMouseDown,
      onMouseLeave,
      onMouseUp,
      onTouchEnd,
      onTouchMove,
      onTouchStart,
      tabIndex = 0,
      TouchRippleProps,
      touchRippleRef,
      type
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$a);
    const buttonRef = reactExports.useRef(null);
    const rippleRef = reactExports.useRef(null);
    const handleRippleRef = useForkRef(rippleRef, touchRippleRef);
    const {
      isFocusVisibleRef,
      onFocus: handleFocusVisible,
      onBlur: handleBlurVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible();
    const [focusVisible, setFocusVisible] = reactExports.useState(false);
    if (disabled && focusVisible) {
      setFocusVisible(false);
    }
    reactExports.useImperativeHandle(action, () => ({
      focusVisible: () => {
        setFocusVisible(true);
        buttonRef.current.focus();
      }
    }), []);
    const [mountedState, setMountedState] = reactExports.useState(false);
    reactExports.useEffect(() => {
      setMountedState(true);
    }, []);
    const enableTouchRipple = mountedState && !disableRipple && !disabled;
    reactExports.useEffect(() => {
      if (focusVisible && focusRipple && !disableRipple && mountedState) {
        rippleRef.current.pulsate();
      }
    }, [disableRipple, focusRipple, focusVisible, mountedState]);
    function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {
      return useEventCallback((event) => {
        if (eventCallback) {
          eventCallback(event);
        }
        const ignore = skipRippleAction;
        if (!ignore && rippleRef.current) {
          rippleRef.current[rippleAction](event);
        }
        return true;
      });
    }
    const handleMouseDown = useRippleHandler("start", onMouseDown);
    const handleContextMenu = useRippleHandler("stop", onContextMenu);
    const handleDragLeave = useRippleHandler("stop", onDragLeave);
    const handleMouseUp = useRippleHandler("stop", onMouseUp);
    const handleMouseLeave = useRippleHandler("stop", (event) => {
      if (focusVisible) {
        event.preventDefault();
      }
      if (onMouseLeave) {
        onMouseLeave(event);
      }
    });
    const handleTouchStart = useRippleHandler("start", onTouchStart);
    const handleTouchEnd = useRippleHandler("stop", onTouchEnd);
    const handleTouchMove = useRippleHandler("stop", onTouchMove);
    const handleBlur = useRippleHandler("stop", (event) => {
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }
      if (onBlur) {
        onBlur(event);
      }
    }, false);
    const handleFocus = useEventCallback((event) => {
      if (!buttonRef.current) {
        buttonRef.current = event.currentTarget;
      }
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setFocusVisible(true);
        if (onFocusVisible) {
          onFocusVisible(event);
        }
      }
      if (onFocus) {
        onFocus(event);
      }
    });
    const isNonNativeButton = () => {
      const button = buttonRef.current;
      return component && component !== "button" && !(button.tagName === "A" && button.href);
    };
    const keydownRef = reactExports.useRef(false);
    const handleKeyDown2 = useEventCallback((event) => {
      if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === " ") {
        keydownRef.current = true;
        rippleRef.current.stop(event, () => {
          rippleRef.current.start(event);
        });
      }
      if (event.target === event.currentTarget && isNonNativeButton() && event.key === " ") {
        event.preventDefault();
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
      if (event.target === event.currentTarget && isNonNativeButton() && event.key === "Enter" && !disabled) {
        event.preventDefault();
        if (onClick) {
          onClick(event);
        }
      }
    });
    const handleKeyUp = useEventCallback((event) => {
      if (focusRipple && event.key === " " && rippleRef.current && focusVisible && !event.defaultPrevented) {
        keydownRef.current = false;
        rippleRef.current.stop(event, () => {
          rippleRef.current.pulsate(event);
        });
      }
      if (onKeyUp) {
        onKeyUp(event);
      }
      if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === " " && !event.defaultPrevented) {
        onClick(event);
      }
    });
    let ComponentProp = component;
    if (ComponentProp === "button" && (other.href || other.to)) {
      ComponentProp = LinkComponent;
    }
    const buttonProps = {};
    if (ComponentProp === "button") {
      buttonProps.type = type === void 0 ? "button" : type;
      buttonProps.disabled = disabled;
    } else {
      if (!other.href && !other.to) {
        buttonProps.role = "button";
      }
      if (disabled) {
        buttonProps["aria-disabled"] = disabled;
      }
    }
    const handleRef = useForkRef(ref, focusVisibleRef, buttonRef);
    {
      reactExports.useEffect(() => {
        if (enableTouchRipple && !rippleRef.current) {
          console.error(["MUI: The `component` prop provided to ButtonBase is invalid.", "Please make sure the children prop is rendered in this custom component."].join("\n"));
        }
      }, [enableTouchRipple]);
    }
    const ownerState = _extends({}, props, {
      centerRipple,
      component,
      disabled,
      disableRipple,
      disableTouchRipple,
      focusRipple,
      tabIndex,
      focusVisible
    });
    const classes = useUtilityClasses$9(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(ButtonBaseRoot, _extends({
      as: ComponentProp,
      className: clsx(classes.root, className),
      ownerState,
      onBlur: handleBlur,
      onClick,
      onContextMenu: handleContextMenu,
      onFocus: handleFocus,
      onKeyDown: handleKeyDown2,
      onKeyUp: handleKeyUp,
      onMouseDown: handleMouseDown,
      onMouseLeave: handleMouseLeave,
      onMouseUp: handleMouseUp,
      onDragLeave: handleDragLeave,
      onTouchEnd: handleTouchEnd,
      onTouchMove: handleTouchMove,
      onTouchStart: handleTouchStart,
      ref: handleRef,
      tabIndex: disabled ? -1 : tabIndex,
      type
    }, buttonProps, other, {
      children: [children, enableTouchRipple ? (
        /* TouchRipple is only needed client-side, x2 boost on the server. */
        /* @__PURE__ */ jsxRuntimeExports.jsx(TouchRipple$1, _extends({
          ref: handleRippleRef,
          center: centerRipple
        }, TouchRippleProps))
      ) : null]
    }));
  });
  ButtonBase.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * A ref for imperative actions.
     * It currently only supports `focusVisible()` action.
     */
    action: refType$1,
    /**
     * If `true`, the ripples are centered.
     * They won't start at the cursor interaction position.
     * @default false
     */
    centerRipple: PropTypes.bool,
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: elementTypeAcceptingRef$1,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: PropTypes.bool,
    /**
     * If `true`, the touch ripple effect is disabled.
     * @default false
     */
    disableTouchRipple: PropTypes.bool,
    /**
     * If `true`, the base button will have a keyboard focus ripple.
     * @default false
     */
    focusRipple: PropTypes.bool,
    /**
     * This prop can help identify which element has keyboard focus.
     * The class name will be applied when the element gains the focus through keyboard interaction.
     * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
     * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
     * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
     * if needed.
     */
    focusVisibleClassName: PropTypes.string,
    /**
     * @ignore
     */
    href: PropTypes.any,
    /**
     * The component used to render a link when the `href` prop is provided.
     * @default 'a'
     */
    LinkComponent: PropTypes.elementType,
    /**
     * @ignore
     */
    onBlur: PropTypes.func,
    /**
     * @ignore
     */
    onClick: PropTypes.func,
    /**
     * @ignore
     */
    onContextMenu: PropTypes.func,
    /**
     * @ignore
     */
    onDragLeave: PropTypes.func,
    /**
     * @ignore
     */
    onFocus: PropTypes.func,
    /**
     * Callback fired when the component is focused with a keyboard.
     * We trigger a `onFocus` callback too.
     */
    onFocusVisible: PropTypes.func,
    /**
     * @ignore
     */
    onKeyDown: PropTypes.func,
    /**
     * @ignore
     */
    onKeyUp: PropTypes.func,
    /**
     * @ignore
     */
    onMouseDown: PropTypes.func,
    /**
     * @ignore
     */
    onMouseLeave: PropTypes.func,
    /**
     * @ignore
     */
    onMouseUp: PropTypes.func,
    /**
     * @ignore
     */
    onTouchEnd: PropTypes.func,
    /**
     * @ignore
     */
    onTouchMove: PropTypes.func,
    /**
     * @ignore
     */
    onTouchStart: PropTypes.func,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * @default 0
     */
    tabIndex: PropTypes.number,
    /**
     * Props applied to the `TouchRipple` element.
     */
    TouchRippleProps: PropTypes.object,
    /**
     * A ref that points to the `TouchRipple` element.
     */
    touchRippleRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
      current: PropTypes.shape({
        pulsate: PropTypes.func.isRequired,
        start: PropTypes.func.isRequired,
        stop: PropTypes.func.isRequired
      })
    })]),
    /**
     * @ignore
     */
    type: PropTypes.oneOfType([PropTypes.oneOf(["button", "reset", "submit"]), PropTypes.string])
  };
  const ButtonBase$1 = ButtonBase;
  function getAlertUtilityClass(slot) {
    return generateUtilityClass("MuiAlert", slot);
  }
  const alertClasses = generateUtilityClasses("MuiAlert", ["root", "action", "icon", "message", "filled", "filledSuccess", "filledInfo", "filledWarning", "filledError", "outlined", "outlinedSuccess", "outlinedInfo", "outlinedWarning", "outlinedError", "standard", "standardSuccess", "standardInfo", "standardWarning", "standardError"]);
  const alertClasses$1 = alertClasses;
  function getIconButtonUtilityClass(slot) {
    return generateUtilityClass("MuiIconButton", slot);
  }
  const iconButtonClasses = generateUtilityClasses("MuiIconButton", ["root", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "colorError", "colorInfo", "colorSuccess", "colorWarning", "edgeStart", "edgeEnd", "sizeSmall", "sizeMedium", "sizeLarge"]);
  const iconButtonClasses$1 = iconButtonClasses;
  const _excluded$9 = ["edge", "children", "className", "color", "disabled", "disableFocusRipple", "size"];
  const useUtilityClasses$8 = (ownerState) => {
    const {
      classes,
      disabled,
      color: color2,
      edge,
      size
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", color2 !== "default" && `color${capitalize(color2)}`, edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`]
    };
    return composeClasses(slots, getIconButtonUtilityClass, classes);
  };
  const IconButtonRoot = styled$1(ButtonBase$1, {
    name: "MuiIconButton",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.color !== "default" && styles2[`color${capitalize(ownerState.color)}`], ownerState.edge && styles2[`edge${capitalize(ownerState.edge)}`], styles2[`size${capitalize(ownerState.size)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    textAlign: "center",
    flex: "0 0 auto",
    fontSize: theme.typography.pxToRem(24),
    padding: 8,
    borderRadius: "50%",
    overflow: "visible",
    // Explicitly set the default value to solve a bug on IE11.
    color: (theme.vars || theme).palette.action.active,
    transition: theme.transitions.create("background-color", {
      duration: theme.transitions.duration.shortest
    })
  }, !ownerState.disableRipple && {
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }, ownerState.edge === "start" && {
    marginLeft: ownerState.size === "small" ? -3 : -12
  }, ownerState.edge === "end" && {
    marginRight: ownerState.size === "small" ? -3 : -12
  }), ({
    theme,
    ownerState
  }) => {
    var _palette;
    const palette = (_palette = (theme.vars || theme).palette) == null ? void 0 : _palette[ownerState.color];
    return _extends({}, ownerState.color === "inherit" && {
      color: "inherit"
    }, ownerState.color !== "inherit" && ownerState.color !== "default" && _extends({
      color: palette == null ? void 0 : palette.main
    }, !ownerState.disableRipple && {
      "&:hover": _extends({}, palette && {
        backgroundColor: theme.vars ? `rgba(${palette.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(palette.main, theme.palette.action.hoverOpacity)
      }, {
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      })
    }), ownerState.size === "small" && {
      padding: 5,
      fontSize: theme.typography.pxToRem(18)
    }, ownerState.size === "large" && {
      padding: 12,
      fontSize: theme.typography.pxToRem(28)
    }, {
      [`&.${iconButtonClasses$1.disabled}`]: {
        backgroundColor: "transparent",
        color: (theme.vars || theme).palette.action.disabled
      }
    });
  });
  const IconButton = /* @__PURE__ */ reactExports.forwardRef(function IconButton2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiIconButton"
    });
    const {
      edge = false,
      children,
      className,
      color: color2 = "default",
      disabled = false,
      disableFocusRipple = false,
      size = "medium"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$9);
    const ownerState = _extends({}, props, {
      edge,
      color: color2,
      disabled,
      disableFocusRipple,
      size
    });
    const classes = useUtilityClasses$8(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(IconButtonRoot, _extends({
      className: clsx(classes.root, className),
      centerRipple: true,
      focusRipple: !disableFocusRipple,
      disabled,
      ref,
      ownerState
    }, other, {
      children
    }));
  });
  IconButton.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The icon to display.
     */
    children: chainPropTypes(PropTypes.node, (props) => {
      const found = reactExports.Children.toArray(props.children).some((child) => /* @__PURE__ */ reactExports.isValidElement(child) && child.props.onClick);
      if (found) {
        return new Error(["MUI: You are providing an onClick event listener to a child of a button element.", "Prefer applying it to the IconButton directly.", "This guarantees that the whole <button> will be responsive to click events."].join("\n"));
      }
      return null;
    }),
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'default'
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["inherit", "default", "primary", "secondary", "error", "info", "success", "warning"]), PropTypes.string]),
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: PropTypes.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: PropTypes.bool,
    /**
     * If given, uses a negative margin to counteract the padding on one
     * side (this is often helpful for aligning the left or right
     * side of the icon with content above or below, without ruining the border
     * size and shape).
     * @default false
     */
    edge: PropTypes.oneOf(["end", "start", false]),
    /**
     * The size of the component.
     * `small` is equivalent to the dense button styling.
     * @default 'medium'
     */
    size: PropTypes.oneOfType([PropTypes.oneOf(["small", "medium", "large"]), PropTypes.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  };
  const IconButton$1 = IconButton;
  const SuccessOutlinedIcon = createSvgIcon$1(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"
  }), "SuccessOutlined");
  const ReportProblemOutlinedIcon = createSvgIcon$1(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"
  }), "ReportProblemOutlined");
  const ErrorOutlineIcon = createSvgIcon$1(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  }), "ErrorOutline");
  const InfoOutlinedIcon = createSvgIcon$1(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"
  }), "InfoOutlined");
  const ClearIcon = createSvgIcon$1(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
  }), "Close");
  const _excluded$8 = ["action", "children", "className", "closeText", "color", "components", "componentsProps", "icon", "iconMapping", "onClose", "role", "severity", "slotProps", "slots", "variant"];
  const useUtilityClasses$7 = (ownerState) => {
    const {
      variant,
      color: color2,
      severity,
      classes
    } = ownerState;
    const slots = {
      root: ["root", `${variant}${capitalize(color2 || severity)}`, `${variant}`],
      icon: ["icon"],
      message: ["message"],
      action: ["action"]
    };
    return composeClasses(slots, getAlertUtilityClass, classes);
  };
  const AlertRoot = styled$1(Paper$1, {
    name: "MuiAlert",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, styles2[ownerState.variant], styles2[`${ownerState.variant}${capitalize(ownerState.color || ownerState.severity)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    const getColor = theme.palette.mode === "light" ? darken : lighten;
    const getBackgroundColor = theme.palette.mode === "light" ? lighten : darken;
    const color2 = ownerState.color || ownerState.severity;
    return _extends({}, theme.typography.body2, {
      backgroundColor: "transparent",
      display: "flex",
      padding: "6px 16px"
    }, color2 && ownerState.variant === "standard" && {
      color: theme.vars ? theme.vars.palette.Alert[`${color2}Color`] : getColor(theme.palette[color2].light, 0.6),
      backgroundColor: theme.vars ? theme.vars.palette.Alert[`${color2}StandardBg`] : getBackgroundColor(theme.palette[color2].light, 0.9),
      [`& .${alertClasses$1.icon}`]: theme.vars ? {
        color: theme.vars.palette.Alert[`${color2}IconColor`]
      } : {
        color: theme.palette[color2].main
      }
    }, color2 && ownerState.variant === "outlined" && {
      color: theme.vars ? theme.vars.palette.Alert[`${color2}Color`] : getColor(theme.palette[color2].light, 0.6),
      border: `1px solid ${(theme.vars || theme).palette[color2].light}`,
      [`& .${alertClasses$1.icon}`]: theme.vars ? {
        color: theme.vars.palette.Alert[`${color2}IconColor`]
      } : {
        color: theme.palette[color2].main
      }
    }, color2 && ownerState.variant === "filled" && _extends({
      fontWeight: theme.typography.fontWeightMedium
    }, theme.vars ? {
      color: theme.vars.palette.Alert[`${color2}FilledColor`],
      backgroundColor: theme.vars.palette.Alert[`${color2}FilledBg`]
    } : {
      backgroundColor: theme.palette.mode === "dark" ? theme.palette[color2].dark : theme.palette[color2].main,
      color: theme.palette.getContrastText(theme.palette[color2].main)
    }));
  });
  const AlertIcon = styled$1("div", {
    name: "MuiAlert",
    slot: "Icon",
    overridesResolver: (props, styles2) => styles2.icon
  })({
    marginRight: 12,
    padding: "7px 0",
    display: "flex",
    fontSize: 22,
    opacity: 0.9
  });
  const AlertMessage = styled$1("div", {
    name: "MuiAlert",
    slot: "Message",
    overridesResolver: (props, styles2) => styles2.message
  })({
    padding: "8px 0",
    minWidth: 0,
    overflow: "auto"
  });
  const AlertAction = styled$1("div", {
    name: "MuiAlert",
    slot: "Action",
    overridesResolver: (props, styles2) => styles2.action
  })({
    display: "flex",
    alignItems: "flex-start",
    padding: "4px 0 0 16px",
    marginLeft: "auto",
    marginRight: -8
  });
  const defaultIconMapping = {
    success: /* @__PURE__ */ jsxRuntimeExports.jsx(SuccessOutlinedIcon, {
      fontSize: "inherit"
    }),
    warning: /* @__PURE__ */ jsxRuntimeExports.jsx(ReportProblemOutlinedIcon, {
      fontSize: "inherit"
    }),
    error: /* @__PURE__ */ jsxRuntimeExports.jsx(ErrorOutlineIcon, {
      fontSize: "inherit"
    }),
    info: /* @__PURE__ */ jsxRuntimeExports.jsx(InfoOutlinedIcon, {
      fontSize: "inherit"
    })
  };
  const Alert = /* @__PURE__ */ reactExports.forwardRef(function Alert2(inProps, ref) {
    var _ref, _slots$closeButton, _ref2, _slots$closeIcon, _slotProps$closeButto, _slotProps$closeIcon;
    const props = useThemeProps({
      props: inProps,
      name: "MuiAlert"
    });
    const {
      action,
      children,
      className,
      closeText = "Close",
      color: color2,
      components = {},
      componentsProps = {},
      icon,
      iconMapping = defaultIconMapping,
      onClose,
      role = "alert",
      severity = "success",
      slotProps = {},
      slots = {},
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$8);
    const ownerState = _extends({}, props, {
      color: color2,
      severity,
      variant
    });
    const classes = useUtilityClasses$7(ownerState);
    const AlertCloseButton = (_ref = (_slots$closeButton = slots.closeButton) != null ? _slots$closeButton : components.CloseButton) != null ? _ref : IconButton$1;
    const AlertCloseIcon = (_ref2 = (_slots$closeIcon = slots.closeIcon) != null ? _slots$closeIcon : components.CloseIcon) != null ? _ref2 : ClearIcon;
    const closeButtonProps = (_slotProps$closeButto = slotProps.closeButton) != null ? _slotProps$closeButto : componentsProps.closeButton;
    const closeIconProps = (_slotProps$closeIcon = slotProps.closeIcon) != null ? _slotProps$closeIcon : componentsProps.closeIcon;
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(AlertRoot, _extends({
      role,
      elevation: 0,
      ownerState,
      className: clsx(classes.root, className),
      ref
    }, other, {
      children: [icon !== false ? /* @__PURE__ */ jsxRuntimeExports.jsx(AlertIcon, {
        ownerState,
        className: classes.icon,
        children: icon || iconMapping[severity] || defaultIconMapping[severity]
      }) : null, /* @__PURE__ */ jsxRuntimeExports.jsx(AlertMessage, {
        ownerState,
        className: classes.message,
        children
      }), action != null ? /* @__PURE__ */ jsxRuntimeExports.jsx(AlertAction, {
        ownerState,
        className: classes.action,
        children: action
      }) : null, action == null && onClose ? /* @__PURE__ */ jsxRuntimeExports.jsx(AlertAction, {
        ownerState,
        className: classes.action,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(AlertCloseButton, _extends({
          size: "small",
          "aria-label": closeText,
          title: closeText,
          color: "inherit",
          onClick: onClose
        }, closeButtonProps, {
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(AlertCloseIcon, _extends({
            fontSize: "small"
          }, closeIconProps))
        }))
      }) : null]
    }));
  });
  Alert.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The action to display. It renders after the message, at the end of the alert.
     */
    action: PropTypes.node,
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * Override the default label for the *close popup* icon button.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Close'
     */
    closeText: PropTypes.string,
    /**
     * The color of the component. Unless provided, the value is taken from the `severity` prop.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["error", "info", "success", "warning"]), PropTypes.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: PropTypes.shape({
      CloseButton: PropTypes.elementType,
      CloseIcon: PropTypes.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: PropTypes.shape({
      closeButton: PropTypes.object,
      closeIcon: PropTypes.object
    }),
    /**
     * Override the icon displayed before the children.
     * Unless provided, the icon is mapped to the value of the `severity` prop.
     * Set to `false` to remove the `icon`.
     */
    icon: PropTypes.node,
    /**
     * The component maps the `severity` prop to a range of different icons,
     * for instance success to `<SuccessOutlined>`.
     * If you wish to change this mapping, you can provide your own.
     * Alternatively, you can use the `icon` prop to override the icon displayed.
     */
    iconMapping: PropTypes.shape({
      error: PropTypes.node,
      info: PropTypes.node,
      success: PropTypes.node,
      warning: PropTypes.node
    }),
    /**
     * Callback fired when the component requests to be closed.
     * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.
     * @param {React.SyntheticEvent} event The event source of the callback.
     */
    onClose: PropTypes.func,
    /**
     * The ARIA role attribute of the element.
     * @default 'alert'
     */
    role: PropTypes.string,
    /**
     * The severity of the alert. This defines the color and icon used.
     * @default 'success'
     */
    severity: PropTypes.oneOf(["error", "info", "success", "warning"]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: PropTypes.shape({
      closeButton: PropTypes.object,
      closeIcon: PropTypes.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: PropTypes.shape({
      closeButton: PropTypes.elementType,
      closeIcon: PropTypes.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The variant to use.
     * @default 'standard'
     */
    variant: PropTypes.oneOfType([PropTypes.oneOf(["filled", "outlined", "standard"]), PropTypes.string])
  };
  const Alert$1 = Alert;
  function getTypographyUtilityClass(slot) {
    return generateUtilityClass("MuiTypography", slot);
  }
  generateUtilityClasses("MuiTypography", ["root", "h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "inherit", "button", "caption", "overline", "alignLeft", "alignRight", "alignCenter", "alignJustify", "noWrap", "gutterBottom", "paragraph"]);
  const _excluded$7 = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];
  const useUtilityClasses$6 = (ownerState) => {
    const {
      align,
      gutterBottom,
      noWrap,
      paragraph,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, ownerState.align !== "inherit" && `align${capitalize(align)}`, gutterBottom && "gutterBottom", noWrap && "noWrap", paragraph && "paragraph"]
    };
    return composeClasses(slots, getTypographyUtilityClass, classes);
  };
  const TypographyRoot = styled$1("span", {
    name: "MuiTypography",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.variant && styles2[ownerState.variant], ownerState.align !== "inherit" && styles2[`align${capitalize(ownerState.align)}`], ownerState.noWrap && styles2.noWrap, ownerState.gutterBottom && styles2.gutterBottom, ownerState.paragraph && styles2.paragraph];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    margin: 0
  }, ownerState.variant === "inherit" && {
    // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.
    font: "inherit"
  }, ownerState.variant !== "inherit" && theme.typography[ownerState.variant], ownerState.align !== "inherit" && {
    textAlign: ownerState.align
  }, ownerState.noWrap && {
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap"
  }, ownerState.gutterBottom && {
    marginBottom: "0.35em"
  }, ownerState.paragraph && {
    marginBottom: 16
  }));
  const defaultVariantMapping = {
    h1: "h1",
    h2: "h2",
    h3: "h3",
    h4: "h4",
    h5: "h5",
    h6: "h6",
    subtitle1: "h6",
    subtitle2: "h6",
    body1: "p",
    body2: "p",
    inherit: "p"
  };
  const colorTransformations$1 = {
    primary: "primary.main",
    textPrimary: "text.primary",
    secondary: "secondary.main",
    textSecondary: "text.secondary",
    error: "error.main"
  };
  const transformDeprecatedColors$1 = (color2) => {
    return colorTransformations$1[color2] || color2;
  };
  const Typography = /* @__PURE__ */ reactExports.forwardRef(function Typography2(inProps, ref) {
    const themeProps = useThemeProps({
      props: inProps,
      name: "MuiTypography"
    });
    const color2 = transformDeprecatedColors$1(themeProps.color);
    const props = extendSxProp(_extends({}, themeProps, {
      color: color2
    }));
    const {
      align = "inherit",
      className,
      component,
      gutterBottom = false,
      noWrap = false,
      paragraph = false,
      variant = "body1",
      variantMapping = defaultVariantMapping
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$7);
    const ownerState = _extends({}, props, {
      align,
      color: color2,
      className,
      component,
      gutterBottom,
      noWrap,
      paragraph,
      variant,
      variantMapping
    });
    const Component = component || (paragraph ? "p" : variantMapping[variant] || defaultVariantMapping[variant]) || "span";
    const classes = useUtilityClasses$6(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TypographyRoot, _extends({
      as: Component,
      ref,
      ownerState,
      className: clsx(classes.root, className)
    }, other));
  });
  Typography.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Set the text-align on the component.
     * @default 'inherit'
     */
    align: PropTypes.oneOf(["center", "inherit", "justify", "left", "right"]),
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, the text will have a bottom margin.
     * @default false
     */
    gutterBottom: PropTypes.bool,
    /**
     * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
     *
     * Note that text overflow can only happen with block or inline-block level elements
     * (the element needs to have a width in order to overflow).
     * @default false
     */
    noWrap: PropTypes.bool,
    /**
     * If `true`, the element will be a paragraph element.
     * @default false
     */
    paragraph: PropTypes.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * Applies the theme typography styles.
     * @default 'body1'
     */
    variant: PropTypes.oneOfType([PropTypes.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), PropTypes.string]),
    /**
     * The component maps the variant prop to a range of different HTML element types.
     * For instance, subtitle1 to `<h6>`.
     * If you wish to change that mapping, you can provide your own.
     * Alternatively, you can use the `component` prop.
     * @default {
     *   h1: 'h1',
     *   h2: 'h2',
     *   h3: 'h3',
     *   h4: 'h4',
     *   h5: 'h5',
     *   h6: 'h6',
     *   subtitle1: 'h6',
     *   subtitle2: 'h6',
     *   body1: 'p',
     *   body2: 'p',
     *   inherit: 'p',
     * }
     */
    variantMapping: PropTypes.object
  };
  const Typography$1 = Typography;
  const FormControlContext = /* @__PURE__ */ reactExports.createContext(void 0);
  {
    FormControlContext.displayName = "FormControlContext";
  }
  const FormControlContext$1 = FormControlContext;
  function useFormControl() {
    return reactExports.useContext(FormControlContext$1);
  }
  const _excluded$6 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  const styles = {
    entering: {
      opacity: 1
    },
    entered: {
      opacity: 1
    }
  };
  const Fade = /* @__PURE__ */ reactExports.forwardRef(function Fade2(props, ref) {
    const theme = useTheme();
    const defaultTimeout = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      addEndListener,
      appear = true,
      children,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style2,
      timeout = defaultTimeout,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition$1
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$6);
    const nodeRef = reactExports.useRef(null);
    const handleRef = useForkRef(nodeRef, children.ref, ref);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      const transitionProps = getTransitionProps({
        style: style2,
        timeout,
        easing: easing2
      }, {
        mode: "enter"
      });
      node2.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
      node2.style.transition = theme.transitions.create("opacity", transitionProps);
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const transitionProps = getTransitionProps({
        style: style2,
        timeout,
        easing: easing2
      }, {
        mode: "exit"
      });
      node2.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
      node2.style.transition = theme.transitions.create("opacity", transitionProps);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next2) => {
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends({
      appear,
      in: inProp,
      nodeRef,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ reactExports.cloneElement(children, _extends({
          style: _extends({
            opacity: 0,
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, styles[state], style2, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  Fade.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: PropTypes.func,
    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: PropTypes.bool,
    /**
     * A single child content element.
     */
    children: elementAcceptingRef$1.isRequired,
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: PropTypes.oneOfType([PropTypes.shape({
      enter: PropTypes.string,
      exit: PropTypes.string
    }), PropTypes.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: PropTypes.bool,
    /**
     * @ignore
     */
    onEnter: PropTypes.func,
    /**
     * @ignore
     */
    onEntered: PropTypes.func,
    /**
     * @ignore
     */
    onEntering: PropTypes.func,
    /**
     * @ignore
     */
    onExit: PropTypes.func,
    /**
     * @ignore
     */
    onExited: PropTypes.func,
    /**
     * @ignore
     */
    onExiting: PropTypes.func,
    /**
     * @ignore
     */
    style: PropTypes.object,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    timeout: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
      appear: PropTypes.number,
      enter: PropTypes.number,
      exit: PropTypes.number
    })])
  };
  const Fade$1 = Fade;
  function getBackdropUtilityClass(slot) {
    return generateUtilityClass("MuiBackdrop", slot);
  }
  generateUtilityClasses("MuiBackdrop", ["root", "invisible"]);
  const _excluded$5 = ["children", "className", "component", "components", "componentsProps", "invisible", "open", "slotProps", "slots", "TransitionComponent", "transitionDuration"];
  const useUtilityClasses$5 = (ownerState) => {
    const {
      classes,
      invisible
    } = ownerState;
    const slots = {
      root: ["root", invisible && "invisible"]
    };
    return composeClasses(slots, getBackdropUtilityClass, classes);
  };
  const BackdropRoot = styled$1("div", {
    name: "MuiBackdrop",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.invisible && styles2.invisible];
    }
  })(({
    ownerState
  }) => _extends({
    position: "fixed",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    right: 0,
    bottom: 0,
    top: 0,
    left: 0,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    WebkitTapHighlightColor: "transparent"
  }, ownerState.invisible && {
    backgroundColor: "transparent"
  }));
  const Backdrop = /* @__PURE__ */ reactExports.forwardRef(function Backdrop2(inProps, ref) {
    var _slotProps$root, _ref, _slots$root;
    const props = useThemeProps({
      props: inProps,
      name: "MuiBackdrop"
    });
    const {
      children,
      className,
      component = "div",
      components = {},
      componentsProps = {},
      invisible = false,
      open,
      slotProps = {},
      slots = {},
      TransitionComponent = Fade$1,
      transitionDuration
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$5);
    const ownerState = _extends({}, props, {
      component,
      invisible
    });
    const classes = useUtilityClasses$5(ownerState);
    const rootSlotProps = (_slotProps$root = slotProps.root) != null ? _slotProps$root : componentsProps.root;
    return /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends({
      in: open,
      timeout: transitionDuration
    }, other, {
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(BackdropRoot, _extends({
        "aria-hidden": true
      }, rootSlotProps, {
        as: (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : component,
        className: clsx(classes.root, className, rootSlotProps == null ? void 0 : rootSlotProps.className),
        ownerState: _extends({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
        classes,
        ref,
        children
      }))
    }));
  });
  Backdrop.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: PropTypes.shape({
      Root: PropTypes.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: PropTypes.shape({
      root: PropTypes.object
    }),
    /**
     * If `true`, the backdrop is invisible.
     * It can be used when rendering a popover or a custom select component.
     * @default false
     */
    invisible: PropTypes.bool,
    /**
     * If `true`, the component is shown.
     */
    open: PropTypes.bool.isRequired,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: PropTypes.shape({
      root: PropTypes.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: PropTypes.shape({
      root: PropTypes.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Fade
     */
    TransitionComponent: PropTypes.elementType,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     */
    transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
      appear: PropTypes.number,
      enter: PropTypes.number,
      exit: PropTypes.number
    })])
  };
  const Backdrop$1 = Backdrop;
  const defaultTheme = createTheme();
  const Box = createBox({
    themeId: THEME_ID,
    defaultTheme,
    defaultClassName: "MuiBox-root",
    generateClassName: ClassNameGenerator$1.generate
  });
  Box.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: PropTypes.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
  };
  const Box$1 = Box;
  function getButtonUtilityClass(slot) {
    return generateUtilityClass("MuiButton", slot);
  }
  const buttonClasses = generateUtilityClasses("MuiButton", ["root", "text", "textInherit", "textPrimary", "textSecondary", "textSuccess", "textError", "textInfo", "textWarning", "outlined", "outlinedInherit", "outlinedPrimary", "outlinedSecondary", "outlinedSuccess", "outlinedError", "outlinedInfo", "outlinedWarning", "contained", "containedInherit", "containedPrimary", "containedSecondary", "containedSuccess", "containedError", "containedInfo", "containedWarning", "disableElevation", "focusVisible", "disabled", "colorInherit", "textSizeSmall", "textSizeMedium", "textSizeLarge", "outlinedSizeSmall", "outlinedSizeMedium", "outlinedSizeLarge", "containedSizeSmall", "containedSizeMedium", "containedSizeLarge", "sizeMedium", "sizeSmall", "sizeLarge", "fullWidth", "startIcon", "endIcon", "iconSizeSmall", "iconSizeMedium", "iconSizeLarge"]);
  const buttonClasses$1 = buttonClasses;
  const ButtonGroupContext = /* @__PURE__ */ reactExports.createContext({});
  {
    ButtonGroupContext.displayName = "ButtonGroupContext";
  }
  const ButtonGroupContext$1 = ButtonGroupContext;
  const ButtonGroupButtonContext = /* @__PURE__ */ reactExports.createContext(void 0);
  {
    ButtonGroupButtonContext.displayName = "ButtonGroupButtonContext";
  }
  const ButtonGroupButtonContext$1 = ButtonGroupButtonContext;
  const _excluded$4 = ["children", "color", "component", "className", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"];
  const useUtilityClasses$4 = (ownerState) => {
    const {
      color: color2,
      disableElevation,
      fullWidth,
      size,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, `${variant}${capitalize(color2)}`, `size${capitalize(size)}`, `${variant}Size${capitalize(size)}`, color2 === "inherit" && "colorInherit", disableElevation && "disableElevation", fullWidth && "fullWidth"],
      label: ["label"],
      startIcon: ["startIcon", `iconSize${capitalize(size)}`],
      endIcon: ["endIcon", `iconSize${capitalize(size)}`]
    };
    const composedClasses = composeClasses(slots, getButtonUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  const commonIconStyles = (ownerState) => _extends({}, ownerState.size === "small" && {
    "& > *:nth-of-type(1)": {
      fontSize: 18
    }
  }, ownerState.size === "medium" && {
    "& > *:nth-of-type(1)": {
      fontSize: 20
    }
  }, ownerState.size === "large" && {
    "& > *:nth-of-type(1)": {
      fontSize: 22
    }
  });
  const ButtonRoot = styled$1(ButtonBase$1, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiButton",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, styles2[ownerState.variant], styles2[`${ownerState.variant}${capitalize(ownerState.color)}`], styles2[`size${capitalize(ownerState.size)}`], styles2[`${ownerState.variant}Size${capitalize(ownerState.size)}`], ownerState.color === "inherit" && styles2.colorInherit, ownerState.disableElevation && styles2.disableElevation, ownerState.fullWidth && styles2.fullWidth];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$palette$getCon, _theme$palette;
    const inheritContainedBackgroundColor = theme.palette.mode === "light" ? theme.palette.grey[300] : theme.palette.grey[800];
    const inheritContainedHoverBackgroundColor = theme.palette.mode === "light" ? theme.palette.grey.A100 : theme.palette.grey[700];
    return _extends({}, theme.typography.button, {
      minWidth: 64,
      padding: "6px 16px",
      borderRadius: (theme.vars || theme).shape.borderRadius,
      transition: theme.transitions.create(["background-color", "box-shadow", "border-color", "color"], {
        duration: theme.transitions.duration.short
      }),
      "&:hover": _extends({
        textDecoration: "none",
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
        border: `1px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "contained" && {
        backgroundColor: theme.vars ? theme.vars.palette.Button.inheritContainedHoverBg : inheritContainedHoverBackgroundColor,
        boxShadow: (theme.vars || theme).shadows[4],
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          boxShadow: (theme.vars || theme).shadows[2],
          backgroundColor: (theme.vars || theme).palette.grey[300]
        }
      }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: (theme.vars || theme).palette[ownerState.color].main
        }
      }),
      "&:active": _extends({}, ownerState.variant === "contained" && {
        boxShadow: (theme.vars || theme).shadows[8]
      }),
      [`&.${buttonClasses$1.focusVisible}`]: _extends({}, ownerState.variant === "contained" && {
        boxShadow: (theme.vars || theme).shadows[6]
      }),
      [`&.${buttonClasses$1.disabled}`]: _extends({
        color: (theme.vars || theme).palette.action.disabled
      }, ownerState.variant === "outlined" && {
        border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`
      }, ownerState.variant === "contained" && {
        color: (theme.vars || theme).palette.action.disabled,
        boxShadow: (theme.vars || theme).shadows[0],
        backgroundColor: (theme.vars || theme).palette.action.disabledBackground
      })
    }, ownerState.variant === "text" && {
      padding: "6px 8px"
    }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].main
    }, ownerState.variant === "outlined" && {
      padding: "5px 15px",
      border: "1px solid currentColor"
    }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].main,
      border: theme.vars ? `1px solid rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : `1px solid ${alpha(theme.palette[ownerState.color].main, 0.5)}`
    }, ownerState.variant === "contained" && {
      color: theme.vars ? (
        // this is safe because grey does not change between default light/dark mode
        theme.vars.palette.text.primary
      ) : (_theme$palette$getCon = (_theme$palette = theme.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme.palette.grey[300]),
      backgroundColor: theme.vars ? theme.vars.palette.Button.inheritContainedBg : inheritContainedBackgroundColor,
      boxShadow: (theme.vars || theme).shadows[2]
    }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].contrastText,
      backgroundColor: (theme.vars || theme).palette[ownerState.color].main
    }, ownerState.color === "inherit" && {
      color: "inherit",
      borderColor: "currentColor"
    }, ownerState.size === "small" && ownerState.variant === "text" && {
      padding: "4px 5px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "text" && {
      padding: "8px 11px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.size === "small" && ownerState.variant === "outlined" && {
      padding: "3px 9px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "outlined" && {
      padding: "7px 21px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.size === "small" && ownerState.variant === "contained" && {
      padding: "4px 10px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "contained" && {
      padding: "8px 22px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.fullWidth && {
      width: "100%"
    });
  }, ({
    ownerState
  }) => ownerState.disableElevation && {
    boxShadow: "none",
    "&:hover": {
      boxShadow: "none"
    },
    [`&.${buttonClasses$1.focusVisible}`]: {
      boxShadow: "none"
    },
    "&:active": {
      boxShadow: "none"
    },
    [`&.${buttonClasses$1.disabled}`]: {
      boxShadow: "none"
    }
  });
  const ButtonStartIcon = styled$1("span", {
    name: "MuiButton",
    slot: "StartIcon",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.startIcon, styles2[`iconSize${capitalize(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    display: "inherit",
    marginRight: 8,
    marginLeft: -4
  }, ownerState.size === "small" && {
    marginLeft: -2
  }, commonIconStyles(ownerState)));
  const ButtonEndIcon = styled$1("span", {
    name: "MuiButton",
    slot: "EndIcon",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.endIcon, styles2[`iconSize${capitalize(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    display: "inherit",
    marginRight: -4,
    marginLeft: 8
  }, ownerState.size === "small" && {
    marginRight: -2
  }, commonIconStyles(ownerState)));
  const Button = /* @__PURE__ */ reactExports.forwardRef(function Button2(inProps, ref) {
    const contextProps = reactExports.useContext(ButtonGroupContext$1);
    const buttonGroupButtonContextPositionClassName = reactExports.useContext(ButtonGroupButtonContext$1);
    const resolvedProps = resolveProps(contextProps, inProps);
    const props = useThemeProps({
      props: resolvedProps,
      name: "MuiButton"
    });
    const {
      children,
      color: color2 = "primary",
      component = "button",
      className,
      disabled = false,
      disableElevation = false,
      disableFocusRipple = false,
      endIcon: endIconProp,
      focusVisibleClassName,
      fullWidth = false,
      size = "medium",
      startIcon: startIconProp,
      type,
      variant = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$4);
    const ownerState = _extends({}, props, {
      color: color2,
      component,
      disabled,
      disableElevation,
      disableFocusRipple,
      fullWidth,
      size,
      type,
      variant
    });
    const classes = useUtilityClasses$4(ownerState);
    const startIcon = startIconProp && /* @__PURE__ */ jsxRuntimeExports.jsx(ButtonStartIcon, {
      className: classes.startIcon,
      ownerState,
      children: startIconProp
    });
    const endIcon = endIconProp && /* @__PURE__ */ jsxRuntimeExports.jsx(ButtonEndIcon, {
      className: classes.endIcon,
      ownerState,
      children: endIconProp
    });
    const positionClassName = buttonGroupButtonContextPositionClassName || "";
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(ButtonRoot, _extends({
      ownerState,
      className: clsx(contextProps.className, classes.root, className, positionClassName),
      component,
      disabled,
      focusRipple: !disableFocusRipple,
      focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
      ref,
      type
    }, other, {
      classes,
      children: [startIcon, children, endIcon]
    }));
  });
  Button.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'primary'
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["inherit", "primary", "secondary", "success", "error", "info", "warning"]), PropTypes.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, no elevation is used.
     * @default false
     */
    disableElevation: PropTypes.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: PropTypes.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: PropTypes.bool,
    /**
     * Element placed after the children.
     */
    endIcon: PropTypes.node,
    /**
     * @ignore
     */
    focusVisibleClassName: PropTypes.string,
    /**
     * If `true`, the button will take up the full width of its container.
     * @default false
     */
    fullWidth: PropTypes.bool,
    /**
     * The URL to link to when the button is clicked.
     * If defined, an `a` element will be used as the root node.
     */
    href: PropTypes.string,
    /**
     * The size of the component.
     * `small` is equivalent to the dense button styling.
     * @default 'medium'
     */
    size: PropTypes.oneOfType([PropTypes.oneOf(["small", "medium", "large"]), PropTypes.string]),
    /**
     * Element placed before the children.
     */
    startIcon: PropTypes.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * @ignore
     */
    type: PropTypes.oneOfType([PropTypes.oneOf(["button", "reset", "submit"]), PropTypes.string]),
    /**
     * The variant to use.
     * @default 'text'
     */
    variant: PropTypes.oneOfType([PropTypes.oneOf(["contained", "outlined", "text"]), PropTypes.string])
  };
  const Button$1 = Button;
  function getSwitchBaseUtilityClass(slot) {
    return generateUtilityClass("PrivateSwitchBase", slot);
  }
  generateUtilityClasses("PrivateSwitchBase", ["root", "checked", "disabled", "input", "edgeStart", "edgeEnd"]);
  const _excluded$3 = ["autoFocus", "checked", "checkedIcon", "className", "defaultChecked", "disabled", "disableFocusRipple", "edge", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"];
  const useUtilityClasses$3 = (ownerState) => {
    const {
      classes,
      checked,
      disabled,
      edge
    } = ownerState;
    const slots = {
      root: ["root", checked && "checked", disabled && "disabled", edge && `edge${capitalize(edge)}`],
      input: ["input"]
    };
    return composeClasses(slots, getSwitchBaseUtilityClass, classes);
  };
  const SwitchBaseRoot = styled$1(ButtonBase$1)(({
    ownerState
  }) => _extends({
    padding: 9,
    borderRadius: "50%"
  }, ownerState.edge === "start" && {
    marginLeft: ownerState.size === "small" ? -3 : -12
  }, ownerState.edge === "end" && {
    marginRight: ownerState.size === "small" ? -3 : -12
  }));
  const SwitchBaseInput = styled$1("input")({
    cursor: "inherit",
    position: "absolute",
    opacity: 0,
    width: "100%",
    height: "100%",
    top: 0,
    left: 0,
    margin: 0,
    padding: 0,
    zIndex: 1
  });
  const SwitchBase = /* @__PURE__ */ reactExports.forwardRef(function SwitchBase2(props, ref) {
    const {
      autoFocus,
      checked: checkedProp,
      checkedIcon,
      className,
      defaultChecked,
      disabled: disabledProp,
      disableFocusRipple = false,
      edge = false,
      icon,
      id,
      inputProps,
      inputRef,
      name,
      onBlur,
      onChange,
      onFocus,
      readOnly,
      required = false,
      tabIndex,
      type,
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$3);
    const [checked, setCheckedState] = useControlled({
      controlled: checkedProp,
      default: Boolean(defaultChecked),
      name: "SwitchBase",
      state: "checked"
    });
    const muiFormControl = useFormControl();
    const handleFocus = (event) => {
      if (onFocus) {
        onFocus(event);
      }
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      }
    };
    const handleBlur = (event) => {
      if (onBlur) {
        onBlur(event);
      }
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      }
    };
    const handleInputChange = (event) => {
      if (event.nativeEvent.defaultPrevented) {
        return;
      }
      const newChecked = event.target.checked;
      setCheckedState(newChecked);
      if (onChange) {
        onChange(event, newChecked);
      }
    };
    let disabled = disabledProp;
    if (muiFormControl) {
      if (typeof disabled === "undefined") {
        disabled = muiFormControl.disabled;
      }
    }
    const hasLabelFor = type === "checkbox" || type === "radio";
    const ownerState = _extends({}, props, {
      checked,
      disabled,
      disableFocusRipple,
      edge
    });
    const classes = useUtilityClasses$3(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(SwitchBaseRoot, _extends({
      component: "span",
      className: clsx(classes.root, className),
      centerRipple: true,
      focusRipple: !disableFocusRipple,
      disabled,
      tabIndex: null,
      role: void 0,
      onFocus: handleFocus,
      onBlur: handleBlur,
      ownerState,
      ref
    }, other, {
      children: [/* @__PURE__ */ jsxRuntimeExports.jsx(SwitchBaseInput, _extends({
        autoFocus,
        checked: checkedProp,
        defaultChecked,
        className: classes.input,
        disabled,
        id: hasLabelFor ? id : void 0,
        name,
        onChange: handleInputChange,
        readOnly,
        ref: inputRef,
        required,
        ownerState,
        tabIndex,
        type
      }, type === "checkbox" && value === void 0 ? {} : {
        value
      }, inputProps)), checked ? checkedIcon : icon]
    }));
  });
  SwitchBase.propTypes = {
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: PropTypes.bool,
    /**
     * If `true`, the component is checked.
     */
    checked: PropTypes.bool,
    /**
     * The icon to display when the component is checked.
     */
    checkedIcon: PropTypes.node.isRequired,
    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * @ignore
     */
    defaultChecked: PropTypes.bool,
    /**
     * If `true`, the component is disabled.
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: PropTypes.bool,
    /**
     * If given, uses a negative margin to counteract the padding on one
     * side (this is often helpful for aligning the left or right
     * side of the icon with content above or below, without ruining the border
     * size and shape).
     * @default false
     */
    edge: PropTypes.oneOf(["end", "start", false]),
    /**
     * The icon to display when the component is unchecked.
     */
    icon: PropTypes.node.isRequired,
    /**
     * The id of the `input` element.
     */
    id: PropTypes.string,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: PropTypes.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType$1,
    /*
     * @ignore
     */
    name: PropTypes.string,
    /**
     * @ignore
     */
    onBlur: PropTypes.func,
    /**
     * Callback fired when the state is changed.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: PropTypes.func,
    /**
     * @ignore
     */
    onFocus: PropTypes.func,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: PropTypes.bool,
    /**
     * If `true`, the `input` element is required.
     */
    required: PropTypes.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.object,
    /**
     * @ignore
     */
    tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * The input component prop `type`.
     */
    type: PropTypes.string.isRequired,
    /**
     * The value of the component.
     */
    value: PropTypes.any
  };
  const SwitchBase$1 = SwitchBase;
  const CheckBoxOutlineBlankIcon = createSvgIcon$1(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
  }), "CheckBoxOutlineBlank");
  const CheckBoxIcon = createSvgIcon$1(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
  }), "CheckBox");
  const IndeterminateCheckBoxIcon = createSvgIcon$1(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
    d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
  }), "IndeterminateCheckBox");
  function getCheckboxUtilityClass(slot) {
    return generateUtilityClass("MuiCheckbox", slot);
  }
  const checkboxClasses = generateUtilityClasses("MuiCheckbox", ["root", "checked", "disabled", "indeterminate", "colorPrimary", "colorSecondary", "sizeSmall", "sizeMedium"]);
  const checkboxClasses$1 = checkboxClasses;
  const _excluded$2 = ["checkedIcon", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps", "size", "className"];
  const useUtilityClasses$2 = (ownerState) => {
    const {
      classes,
      indeterminate,
      color: color2,
      size
    } = ownerState;
    const slots = {
      root: ["root", indeterminate && "indeterminate", `color${capitalize(color2)}`, `size${capitalize(size)}`]
    };
    const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  const CheckboxRoot = styled$1(SwitchBase$1, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiCheckbox",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.indeterminate && styles2.indeterminate, ownerState.color !== "default" && styles2[`color${capitalize(ownerState.color)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    color: (theme.vars || theme).palette.text.secondary
  }, !ownerState.disableRipple && {
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${ownerState.color === "default" ? theme.vars.palette.action.activeChannel : theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === "default" ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }, ownerState.color !== "default" && {
    [`&.${checkboxClasses$1.checked}, &.${checkboxClasses$1.indeterminate}`]: {
      color: (theme.vars || theme).palette[ownerState.color].main
    },
    [`&.${checkboxClasses$1.disabled}`]: {
      color: (theme.vars || theme).palette.action.disabled
    }
  }));
  const defaultCheckedIcon = /* @__PURE__ */ jsxRuntimeExports.jsx(CheckBoxIcon, {});
  const defaultIcon = /* @__PURE__ */ jsxRuntimeExports.jsx(CheckBoxOutlineBlankIcon, {});
  const defaultIndeterminateIcon = /* @__PURE__ */ jsxRuntimeExports.jsx(IndeterminateCheckBoxIcon, {});
  const Checkbox = /* @__PURE__ */ reactExports.forwardRef(function Checkbox2(inProps, ref) {
    var _icon$props$fontSize, _indeterminateIcon$pr;
    const props = useThemeProps({
      props: inProps,
      name: "MuiCheckbox"
    });
    const {
      checkedIcon = defaultCheckedIcon,
      color: color2 = "primary",
      icon: iconProp = defaultIcon,
      indeterminate = false,
      indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,
      inputProps,
      size = "medium",
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$2);
    const icon = indeterminate ? indeterminateIconProp : iconProp;
    const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;
    const ownerState = _extends({}, props, {
      color: color2,
      indeterminate,
      size
    });
    const classes = useUtilityClasses$2(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(CheckboxRoot, _extends({
      type: "checkbox",
      inputProps: _extends({
        "data-indeterminate": indeterminate
      }, inputProps),
      icon: /* @__PURE__ */ reactExports.cloneElement(icon, {
        fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size
      }),
      checkedIcon: /* @__PURE__ */ reactExports.cloneElement(indeterminateIcon, {
        fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size
      }),
      ownerState,
      ref,
      className: clsx(classes.root, className)
    }, other, {
      classes
    }));
  });
  Checkbox.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the component is checked.
     */
    checked: PropTypes.bool,
    /**
     * The icon to display when the component is checked.
     * @default <CheckBoxIcon />
     */
    checkedIcon: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'primary'
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), PropTypes.string]),
    /**
     * The default checked state. Use when the component is not controlled.
     */
    defaultChecked: PropTypes.bool,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: PropTypes.bool,
    /**
     * If `true`, the ripple effect is disabled.
     * @default false
     */
    disableRipple: PropTypes.bool,
    /**
     * The icon to display when the component is unchecked.
     * @default <CheckBoxOutlineBlankIcon />
     */
    icon: PropTypes.node,
    /**
     * The id of the `input` element.
     */
    id: PropTypes.string,
    /**
     * If `true`, the component appears indeterminate.
     * This does not set the native input element to indeterminate due
     * to inconsistent behavior across browsers.
     * However, we set a `data-indeterminate` attribute on the `input`.
     * @default false
     */
    indeterminate: PropTypes.bool,
    /**
     * The icon to display when the component is indeterminate.
     * @default <IndeterminateCheckBoxIcon />
     */
    indeterminateIcon: PropTypes.node,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: PropTypes.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType$1,
    /**
     * Callback fired when the state is changed.
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: PropTypes.func,
    /**
     * If `true`, the `input` element is required.
     * @default false
     */
    required: PropTypes.bool,
    /**
     * The size of the component.
     * `small` is equivalent to the dense checkbox styling.
     * @default 'medium'
     */
    size: PropTypes.oneOfType([PropTypes.oneOf(["medium", "small"]), PropTypes.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The value of the component. The DOM API casts this to a string.
     * The browser uses "on" as the default value.
     */
    value: PropTypes.any
  };
  const Checkbox$1 = Checkbox;
  function getCircularProgressUtilityClass(slot) {
    return generateUtilityClass("MuiCircularProgress", slot);
  }
  generateUtilityClasses("MuiCircularProgress", ["root", "determinate", "indeterminate", "colorPrimary", "colorSecondary", "svg", "circle", "circleDeterminate", "circleIndeterminate", "circleDisableShrink"]);
  const _excluded$1 = ["className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"];
  let _ = (t) => t, _t, _t2, _t3, _t4;
  const SIZE = 44;
  const circularRotateKeyframe = keyframes(_t || (_t = _`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`));
  const circularDashKeyframe = keyframes(_t2 || (_t2 = _`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`));
  const useUtilityClasses$1 = (ownerState) => {
    const {
      classes,
      variant,
      color: color2,
      disableShrink
    } = ownerState;
    const slots = {
      root: ["root", variant, `color${capitalize(color2)}`],
      svg: ["svg"],
      circle: ["circle", `circle${capitalize(variant)}`, disableShrink && "circleDisableShrink"]
    };
    return composeClasses(slots, getCircularProgressUtilityClass, classes);
  };
  const CircularProgressRoot = styled$1("span", {
    name: "MuiCircularProgress",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, styles2[ownerState.variant], styles2[`color${capitalize(ownerState.color)}`]];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    display: "inline-block"
  }, ownerState.variant === "determinate" && {
    transition: theme.transitions.create("transform")
  }, ownerState.color !== "inherit" && {
    color: (theme.vars || theme).palette[ownerState.color].main
  }), ({
    ownerState
  }) => ownerState.variant === "indeterminate" && css(_t3 || (_t3 = _`
      animation: ${0} 1.4s linear infinite;
    `), circularRotateKeyframe));
  const CircularProgressSVG = styled$1("svg", {
    name: "MuiCircularProgress",
    slot: "Svg",
    overridesResolver: (props, styles2) => styles2.svg
  })({
    display: "block"
    // Keeps the progress centered
  });
  const CircularProgressCircle = styled$1("circle", {
    name: "MuiCircularProgress",
    slot: "Circle",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.circle, styles2[`circle${capitalize(ownerState.variant)}`], ownerState.disableShrink && styles2.circleDisableShrink];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    stroke: "currentColor"
  }, ownerState.variant === "determinate" && {
    transition: theme.transitions.create("stroke-dashoffset")
  }, ownerState.variant === "indeterminate" && {
    // Some default value that looks fine waiting for the animation to kicks in.
    strokeDasharray: "80px, 200px",
    strokeDashoffset: 0
    // Add the unit to fix a Edge 16 and below bug.
  }), ({
    ownerState
  }) => ownerState.variant === "indeterminate" && !ownerState.disableShrink && css(_t4 || (_t4 = _`
      animation: ${0} 1.4s ease-in-out infinite;
    `), circularDashKeyframe));
  const CircularProgress = /* @__PURE__ */ reactExports.forwardRef(function CircularProgress2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiCircularProgress"
    });
    const {
      className,
      color: color2 = "primary",
      disableShrink = false,
      size = 40,
      style: style2,
      thickness = 3.6,
      value = 0,
      variant = "indeterminate"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded$1);
    const ownerState = _extends({}, props, {
      color: color2,
      disableShrink,
      size,
      thickness,
      value,
      variant
    });
    const classes = useUtilityClasses$1(ownerState);
    const circleStyle = {};
    const rootStyle = {};
    const rootProps = {};
    if (variant === "determinate") {
      const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
      circleStyle.strokeDasharray = circumference.toFixed(3);
      rootProps["aria-valuenow"] = Math.round(value);
      circleStyle.strokeDashoffset = `${((100 - value) / 100 * circumference).toFixed(3)}px`;
      rootStyle.transform = "rotate(-90deg)";
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(CircularProgressRoot, _extends({
      className: clsx(classes.root, className),
      style: _extends({
        width: size,
        height: size
      }, rootStyle, style2),
      ownerState,
      ref,
      role: "progressbar"
    }, rootProps, other, {
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(CircularProgressSVG, {
        className: classes.svg,
        ownerState,
        viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(CircularProgressCircle, {
          className: classes.circle,
          style: circleStyle,
          ownerState,
          cx: SIZE,
          cy: SIZE,
          r: (SIZE - thickness) / 2,
          fill: "none",
          strokeWidth: thickness
        })
      })
    }));
  });
  CircularProgress.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'primary'
     */
    color: PropTypes.oneOfType([PropTypes.oneOf(["inherit", "primary", "secondary", "error", "info", "success", "warning"]), PropTypes.string]),
    /**
     * If `true`, the shrink animation is disabled.
     * This only works if variant is `indeterminate`.
     * @default false
     */
    disableShrink: chainPropTypes(PropTypes.bool, (props) => {
      if (props.disableShrink && props.variant && props.variant !== "indeterminate") {
        return new Error("MUI: You have provided the `disableShrink` prop with a variant other than `indeterminate`. This will have no effect.");
      }
      return null;
    }),
    /**
     * The size of the component.
     * If using a number, the pixel unit is assumed.
     * If using a string, you need to provide the CSS unit, e.g. '3rem'.
     * @default 40
     */
    size: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    /**
     * @ignore
     */
    style: PropTypes.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * The thickness of the circle.
     * @default 3.6
     */
    thickness: PropTypes.number,
    /**
     * The value of the progress indicator for the determinate variant.
     * Value between 0 and 100.
     * @default 0
     */
    value: PropTypes.number,
    /**
     * The variant to use.
     * Use indeterminate when there is no progress value.
     * @default 'indeterminate'
     */
    variant: PropTypes.oneOf(["determinate", "indeterminate"])
  };
  const CircularProgress$1 = CircularProgress;
  function getLinkUtilityClass(slot) {
    return generateUtilityClass("MuiLink", slot);
  }
  const linkClasses = generateUtilityClasses("MuiLink", ["root", "underlineNone", "underlineHover", "underlineAlways", "button", "focusVisible"]);
  const linkClasses$1 = linkClasses;
  const colorTransformations = {
    primary: "primary.main",
    textPrimary: "text.primary",
    secondary: "secondary.main",
    textSecondary: "text.secondary",
    error: "error.main"
  };
  const transformDeprecatedColors = (color2) => {
    return colorTransformations[color2] || color2;
  };
  const getTextDecoration = ({
    theme,
    ownerState
  }) => {
    const transformedColor = transformDeprecatedColors(ownerState.color);
    const color2 = getPath(theme, `palette.${transformedColor}`, false) || ownerState.color;
    const channelColor = getPath(theme, `palette.${transformedColor}Channel`);
    if ("vars" in theme && channelColor) {
      return `rgba(${channelColor} / 0.4)`;
    }
    return alpha(color2, 0.4);
  };
  const getTextDecoration$1 = getTextDecoration;
  const _excluded = ["className", "color", "component", "onBlur", "onFocus", "TypographyClasses", "underline", "variant", "sx"];
  const useUtilityClasses = (ownerState) => {
    const {
      classes,
      component,
      focusVisible,
      underline
    } = ownerState;
    const slots = {
      root: ["root", `underline${capitalize(underline)}`, component === "button" && "button", focusVisible && "focusVisible"]
    };
    return composeClasses(slots, getLinkUtilityClass, classes);
  };
  const LinkRoot = styled$1(Typography$1, {
    name: "MuiLink",
    slot: "Root",
    overridesResolver: (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, styles2[`underline${capitalize(ownerState.underline)}`], ownerState.component === "button" && styles2.button];
    }
  })(({
    theme,
    ownerState
  }) => {
    return _extends({}, ownerState.underline === "none" && {
      textDecoration: "none"
    }, ownerState.underline === "hover" && {
      textDecoration: "none",
      "&:hover": {
        textDecoration: "underline"
      }
    }, ownerState.underline === "always" && _extends({
      textDecoration: "underline"
    }, ownerState.color !== "inherit" && {
      textDecorationColor: getTextDecoration$1({
        theme,
        ownerState
      })
    }, {
      "&:hover": {
        textDecorationColor: "inherit"
      }
    }), ownerState.component === "button" && {
      position: "relative",
      WebkitTapHighlightColor: "transparent",
      backgroundColor: "transparent",
      // Reset default value
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0,
      border: 0,
      margin: 0,
      // Remove the margin in Safari
      borderRadius: 0,
      padding: 0,
      // Remove the padding in Firefox
      cursor: "pointer",
      userSelect: "none",
      verticalAlign: "middle",
      MozAppearance: "none",
      // Reset
      WebkitAppearance: "none",
      // Reset
      "&::-moz-focus-inner": {
        borderStyle: "none"
        // Remove Firefox dotted outline.
      },
      [`&.${linkClasses$1.focusVisible}`]: {
        outline: "auto"
      }
    });
  });
  const Link = /* @__PURE__ */ reactExports.forwardRef(function Link2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiLink"
    });
    const {
      className,
      color: color2 = "primary",
      component = "a",
      onBlur,
      onFocus,
      TypographyClasses,
      underline = "always",
      variant = "inherit",
      sx
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
    const {
      isFocusVisibleRef,
      onBlur: handleBlurVisible,
      onFocus: handleFocusVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible();
    const [focusVisible, setFocusVisible] = reactExports.useState(false);
    const handlerRef = useForkRef(ref, focusVisibleRef);
    const handleBlur = (event) => {
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }
      if (onBlur) {
        onBlur(event);
      }
    };
    const handleFocus = (event) => {
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setFocusVisible(true);
      }
      if (onFocus) {
        onFocus(event);
      }
    };
    const ownerState = _extends({}, props, {
      color: color2,
      component,
      focusVisible,
      underline,
      variant
    });
    const classes = useUtilityClasses(ownerState);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(LinkRoot, _extends({
      color: color2,
      className: clsx(classes.root, className),
      classes: TypographyClasses,
      component,
      onBlur: handleBlur,
      onFocus: handleFocus,
      ref: handlerRef,
      ownerState,
      variant,
      sx: [...!Object.keys(colorTransformations).includes(color2) ? [{
        color: color2
      }] : [], ...Array.isArray(sx) ? sx : [sx]]
    }, other));
  });
  Link.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: PropTypes.object,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The color of the link.
     * @default 'primary'
     */
    color: PropTypes.any,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: elementTypeAcceptingRef$1,
    /**
     * @ignore
     */
    onBlur: PropTypes.func,
    /**
     * @ignore
     */
    onFocus: PropTypes.func,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
    /**
     * `classes` prop applied to the [`Typography`](/material-ui/api/typography/) element.
     */
    TypographyClasses: PropTypes.object,
    /**
     * Controls when the link should have an underline.
     * @default 'always'
     */
    underline: PropTypes.oneOf(["always", "hover", "none"]),
    /**
     * Applies the theme typography styles.
     * @default 'inherit'
     */
    variant: PropTypes.oneOfType([PropTypes.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), PropTypes.string])
  };
  const Link$1 = Link;
  var Check = {};
  var interopRequireDefault = { exports: {} };
  (function(module2) {
    function _interopRequireDefault2(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    module2.exports = _interopRequireDefault2, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  })(interopRequireDefault);
  var interopRequireDefaultExports = interopRequireDefault.exports;
  var createSvgIcon = {};
  const require$$0 = /* @__PURE__ */ getAugmentedNamespace(utils);
  var hasRequiredCreateSvgIcon;
  function requireCreateSvgIcon() {
    if (hasRequiredCreateSvgIcon)
      return createSvgIcon;
    hasRequiredCreateSvgIcon = 1;
    (function(exports2) {
      "use client";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      Object.defineProperty(exports2, "default", {
        enumerable: true,
        get: function() {
          return _utils.createSvgIcon;
        }
      });
      var _utils = require$$0;
    })(createSvgIcon);
    return createSvgIcon;
  }
  var _interopRequireDefault = interopRequireDefaultExports;
  Object.defineProperty(Check, "__esModule", {
    value: true
  });
  var default_1 = Check.default = void 0;
  var _createSvgIcon = _interopRequireDefault(requireCreateSvgIcon());
  var _jsxRuntime = jsxRuntimeExports;
  var _default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
    d: "M9 16.17 4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"
  }), "Check");
  default_1 = Check.default = _default;
  const normalizeIcon = (Icon) => {
    return Icon.default ? Icon.default : Icon;
  };
  const CheckIconNormalized = normalizeIcon(default_1);
  const getHash = (item) => {
    if (!item.hash) {
      throw new Error("item.hash is undefined");
    }
    return item.hash;
  };
  const CaptchaWidget = ({ challenge, solution, onClick }) => {
    const items = challenge.captcha.items;
    const theme = useTheme();
    const isTouchDevice = "ontouchstart" in window;
    return jsxRuntimeExports.jsx(Box$1, { component: "div", pr: 0.5, pb: 0.5, sx: {
      // expand to full height / width of parent
      width: "100%",
      height: "100%",
      // display children in flex, spreading them evenly and wrapping when row length exceeded
      display: "flex",
      flexDirection: "row",
      flexWrap: "wrap"
    }, children: items.map((item, index2) => {
      const hash2 = getHash(item);
      return jsxRuntimeExports.jsx(Box$1, { pt: 0.5, pl: 0.5, sx: {
        // enable the items in the grid to grow in width to use up excess space
        flexGrow: 1,
        // make the width of each item 1/3rd of the width overall, i.e. 3 columns
        flexBasis: "33.3333%",
        // include the padding / margin / border in the width
        boxSizing: "border-box"
      }, children: jsxRuntimeExports.jsxs(Box$1, { sx: { cursor: "pointer", height: "100%", width: "100%" }, onClick: isTouchDevice ? void 0 : () => onClick(hash2), onTouchStart: isTouchDevice ? () => onClick(hash2) : void 0, children: [jsxRuntimeExports.jsx(Box$1, { sx: { border: 1, borderColor: "lightgray" }, children: jsxRuntimeExports.jsx("img", { style: {
        width: "100%",
        backgroundColor: "lightgray",
        opacity: solution.includes(hash2) && isTouchDevice ? "50%" : "100%",
        display: "block",
        objectFit: "contain",
        aspectRatio: "1/1"
        // force AR to be 1, letterboxing images with different aspect ratios
      }, src: item.data, alt: `Captcha image ${index2 + 1}` }) }), jsxRuntimeExports.jsx(Fade$1, { in: solution.includes(hash2), children: jsxRuntimeExports.jsx(Box$1, { sx: {
        // relative to where the element _should_ be positioned
        position: "relative",
        // make the overlay the full height/width of an item
        width: "100%",
        height: "100%",
        // shift it up 100% to overlay the item element
        top: "-100%",
        // transition on opacity upon (de)selection
        transitionDuration: "300ms",
        transitionProperty: "opacity"
      }, children: jsxRuntimeExports.jsx(Box$1, { sx: {
        // make the overlay absolute positioned compare to its container
        position: "absolute",
        // spread across 100% width/height of the item box
        top: 0,
        left: 0,
        bottom: 0,
        right: 0,
        height: "100%",
        width: "100%",
        // display overlays in center
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        // make bg half opacity, i.e. shadowing the item's img
        backgroundColor: "rgba(0,0,0,0.5)"
      }, children: jsxRuntimeExports.jsx(CheckIconNormalized, { htmlColor: theme.palette.background.default, sx: {
        // img must be displayed as block otherwise get's a bottom whitespace border
        display: "block",
        // how big the overlay icon is
        width: "35%",
        height: "35%"
      } }) }) }) })] }) }, index2);
    }) });
  };
  const lightTheme = createTheme({
    palette: {
      mode: "light",
      primary: {
        main: "#1976d2",
        contrastText: "#000"
      },
      background: {
        default: "#fff"
      }
    }
  });
  const darkTheme = createTheme({
    palette: {
      mode: "dark",
      primary: {
        main: "#1976d2",
        contrastText: "#fff"
      },
      background: {
        default: "#303030"
      }
    }
  });
  function renameKeysForDataAttr(data2 = {}) {
    return Object.keys(data2).reduce((prev2, curr) => ({ ...prev2, [`data-${curr}`]: data2[curr] }), {});
  }
  function addDataAttr({ general, dev }) {
    return {
      ...renameKeysForDataAttr(general),
      ...renameKeysForDataAttr(dev)
    };
  }
  const CaptchaComponent = ({ challenge, index: index2, solutions, onSubmit, onCancel, onClick, onNext, themeColor }) => {
    const { t } = useTranslation();
    const captcha = at(challenge.captchas, index2);
    const solution = at(solutions, index2);
    const theme = reactExports.useMemo(() => themeColor === "light" ? lightTheme : darkTheme, [themeColor]);
    return jsxRuntimeExports.jsx(Box$1, { sx: {
      // center the popup horizontally and vertically
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      // fill entire screen
      width: "100%",
      height: "100%"
    }, children: jsxRuntimeExports.jsx(Box$1, { sx: {
      // introduce scroll bars when screen < minWidth of children
      overflowX: "auto",
      overflowY: "auto",
      width: "100%",
      // limit the popup width
      maxWidth: "450px",
      // maxHeight introduces vertical scroll bars if children content longer than window
      maxHeight: "100%"
    }, children: jsxRuntimeExports.jsxs(Box$1, { bgcolor: theme.palette.background.default, sx: {
      display: "flex",
      flexDirection: "column",
      // the min width of the popup before scroll bars appear
      minWidth: "300px"
    }, children: [jsxRuntimeExports.jsxs(Box$1, { px: 2, py: 3, sx: {
      // center the header
      display: "flex",
      alignItems: "center",
      width: "100%"
    }, bgcolor: theme.palette.primary.main, children: [jsxRuntimeExports.jsxs(Typography$1, { sx: {
      color: "#ffffff",
      fontWeight: 700
    }, children: [t("WIDGET.SELECT_ALL"), ": "] }), jsxRuntimeExports.jsx(Typography$1, { px: 1, sx: {
      color: "#ffffff",
      fontWeight: 700,
      textTransform: "uppercase",
      fontSize: theme.typography.h6.fontSize
    }, children: `${at(challenge.captchas, index2).captcha.target}` })] }), jsxRuntimeExports.jsx(Box$1, { ...addDataAttr({ dev: { cy: "captcha-" + index2 } }), children: jsxRuntimeExports.jsx(CaptchaWidget, { challenge: captcha, solution, onClick }) }), jsxRuntimeExports.jsx(Box$1, { px: 2, py: 1, sx: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      width: "100%"
    }, ...addDataAttr({ dev: { cy: "dots-captcha" } }), children: challenge.captchas.map((_2, i2) => jsxRuntimeExports.jsx(Box$1, { sx: {
      width: 7,
      height: 7,
      borderRadius: "50%",
      border: "1px solid #CFCFCF"
    }, mx: 0.5, bgcolor: index2 === i2 ? theme.palette.background.default : "#CFCFCF" }, i2)) }), jsxRuntimeExports.jsxs(Box$1, { px: 2, pt: 0, pb: 2, sx: {
      display: "flex",
      alignItems: "center",
      justifyContent: "space-between"
    }, children: [jsxRuntimeExports.jsx(Button$1, { onClick: onCancel, variant: "text", children: t("WIDGET.CANCEL") }), jsxRuntimeExports.jsx(Button$1, { color: "primary", onClick: index2 < challenge.captchas.length - 1 ? onNext : onSubmit, variant: "contained", ...addDataAttr({ dev: { cy: "button-next" } }), children: index2 < challenge.captchas.length - 1 ? t("WIDGET.NEXT") : t("WIDGET.SUBMIT") })] })] }) }) });
  };
  function jsx(type, props, key) {
    if (!hasOwnProperty.call(props, "css")) {
      return jsxRuntimeExports.jsx(type, props, key);
    }
    return jsxRuntimeExports.jsx(Emotion$1, createEmotionProps(type, props), key);
  }
  function jsxs(type, props, key) {
    if (!hasOwnProperty.call(props, "css")) {
      return jsxRuntimeExports.jsxs(type, props, key);
    }
    return jsxRuntimeExports.jsxs(Emotion$1, createEmotionProps(type, props), key);
  }
  const logoStyle = css`
    align-items: center;
    justify-content: flex-end;
    display: flex;
    padding: 8px;

    @media (max-width: 245px) {
        &:nth-of-type(1),
        &:nth-of-type(2) {
            display: none;
        } /* Both logos hidden */
    }

    @media (min-width: 245px) and (max-width: 400px) {
        &:nth-of-type(1) {
            display: flex;
        } /* logoWithText */
        &:nth-of-type(2) {
            display: none;
        } /* logoWithoutText */
    }

    @media (min-width: 401px) {
        &:nth-of-type(1) {
            display: none;
        } /* logoWithText */
        &:nth-of-type(2) {
            display: flex;
        } /* logoWithoutText */
    }
`;
  const useRefAsState = (defaultValue) => {
    const ref = reactExports.useRef(defaultValue);
    const setter = (value2) => {
      ref.current = value2;
    };
    const value = ref.current;
    return [value, setter];
  };
  const useProcaptcha = () => {
    const [isHuman, setIsHuman] = reactExports.useState(false);
    const [index2, setIndex] = reactExports.useState(-1);
    const [solutions, setSolutions] = reactExports.useState([]);
    const [captchaApi, setCaptchaApi] = useRefAsState(void 0);
    const [showModal, setShowModal] = reactExports.useState(false);
    const [challenge, setChallenge] = reactExports.useState(void 0);
    const [loading, setLoading] = reactExports.useState(false);
    const [account2, setAccount2] = reactExports.useState(void 0);
    const [dappAccount, setDappAccount] = reactExports.useState(void 0);
    const [submission, setSubmission] = useRefAsState(void 0);
    const [timeout, setTimeout2] = useRefAsState(void 0);
    const [blockNumber, setBlockNumber] = useRefAsState(void 0);
    return [
      // the state
      {
        isHuman,
        index: index2,
        solutions,
        captchaApi,
        showModal,
        challenge,
        loading,
        account: account2,
        dappAccount,
        submission,
        timeout,
        blockNumber
      },
      // and method to update the state
      (nextState) => {
        if (nextState.account !== void 0)
          setAccount2(nextState.account);
        if (nextState.isHuman !== void 0)
          setIsHuman(nextState.isHuman);
        if (nextState.index !== void 0)
          setIndex(nextState.index);
        if (nextState.solutions !== void 0)
          setSolutions(nextState.solutions.slice());
        if (nextState.captchaApi !== void 0)
          setCaptchaApi(nextState.captchaApi);
        if (nextState.showModal !== void 0)
          setShowModal(nextState.showModal);
        if (nextState.challenge !== void 0)
          setChallenge(nextState.challenge);
        if (nextState.loading !== void 0)
          setLoading(nextState.loading);
        if (nextState.showModal !== void 0)
          setShowModal(nextState.showModal);
        if (nextState.dappAccount !== void 0)
          setDappAccount(nextState.dappAccount);
        if (nextState.submission !== void 0)
          setSubmission(nextState.submission);
        if (nextState.timeout !== void 0)
          setTimeout2(nextState.timeout);
        if (nextState.blockNumber !== void 0)
          setBlockNumber(nextState.blockNumber);
      }
    ];
  };
  const Procaptcha = (props) => {
    console.log("config", props.config);
    const config2 = props.config;
    const callbacks = props.callbacks || {};
    const [state, updateState] = useProcaptcha();
    console.log("state", state);
    const manager = Manager(config2, state, updateState, callbacks);
    const configSx = { maxWidth: "400px", minWidth: "200px" };
    const theme = reactExports.useMemo(() => props.config.theme === "light" ? lightTheme : darkTheme, [props.config.theme]);
    return jsx(ThemeProvider, { theme, children: jsxs(Box$1, { sx: { maxWidth: "100%", maxHeight: "100%", overflowX: "auto" }, children: [jsx(Backdrop$1, { open: state.showModal, sx: { zIndex: (theme2) => theme2.zIndex.drawer + 1 }, children: state.challenge ? jsx(CaptchaComponent, { challenge: state.challenge, index: state.index, solutions: state.solutions, onSubmit: manager.submit, onCancel: manager.cancel, onClick: manager.select, onNext: manager.nextRound, themeColor: config2.theme ?? "light" }) : jsx(Alert$1, { children: "No challenge set." }) }), jsxs(Box$1, { p: 0, sx: [...Array.isArray(configSx) ? configSx : [configSx]], "data-cy": "button-human", children: [" ", jsxs(Box$1, { p: 1, border: 1, bgcolor: theme.palette.background.default, borderColor: "grey.300", borderRadius: 2, sx: {
      display: "flex",
      justifyContent: "space-between",
      alignItems: "center",
      flexWrap: "wrap"
    }, children: [jsx(Box$1, { sx: { display: "flex", flexDirection: "column" }, children: jsxs(Box$1, { sx: {
      display: "flex",
      justifyContent: "flex-start",
      alignItems: "center",
      flexWrap: "wrap"
    }, children: [jsxs(Box$1, { sx: {
      height: "50px",
      width: "50px",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      flexDirection: "column"
    }, children: [jsx(Box$1, { sx: {
      display: !state.loading ? "block" : "none"
    }, children: jsx(Checkbox$1, { onChange: manager.start, checked: state.isHuman, inputProps: { "aria-label": "controlled" }, sx: {
      "& .MuiSvgIcon-root": { fontSize: 32, position: "relative" },
      "& .PrivateSwitchBase-input": {
        width: "1.4em",
        height: "1.4em",
        top: "auto",
        left: "auto",
        opacity: "1",
        "&::before": {
          content: '""',
          position: "absolute",
          background: "white",
          height: "100%",
          width: "100%"
        }
      }
    } }) }), jsx(Box$1, { sx: {
      display: state.loading ? "block" : "none"
    }, children: jsx(Box$1, { pt: "5px", children: jsx(CircularProgress$1, { size: "24px", disableShrink: true }) }) })] }), jsx(Box$1, { p: 1, children: jsx(Typography$1, { color: theme.palette.primary.contrastText, children: "I am a human" }) })] }) }), jsx(Box$1, { children: jsx(Link$1, { href: "https://prosopo.io", target: "_blank", children: jsx(Box$1, { children: jsxs("div", { children: [jsx("div", { css: logoStyle, dangerouslySetInnerHTML: {
      __html: props.config.theme === "light" ? logoWithoutTextBlack : logoWithoutTextWhite
    } }), jsx("div", { css: logoStyle, dangerouslySetInnerHTML: {
      __html: props.config.theme === "light" ? logoWithTextBlack : logoWithTextWhite
    } })] }) }) }) })] })] })] }) });
  };
  const logoWithTextBlack = '<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 2062.63 468.67" height="35px" width="140px"><defs><style>.cls-1{fill:#1d1d1b;}</style></defs><title>Prosopo Logo Black</title><path class="cls-1" d="M335.55,1825.19A147.75,147.75,0,0,1,483.3,1972.94h50.5c0-109.49-88.76-198.25-198.25-198.25v50.5Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M269.36,1891.39A147.74,147.74,0,0,1,417.1,2039.13h50.5c0-109.49-88.75-198.24-198.24-198.24v50.5Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M414,2157.17a147.75,147.75,0,0,1-147.74-147.74h-50.5c0,109.49,88.75,198.24,198.24,198.24v-50.5Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M480.17,2091a147.74,147.74,0,0,1-147.74-147.75H281.92c0,109.49,88.76,198.25,198.25,198.25V2091Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M862.8,2017.5q-27.39,22.86-78.25,22.86h-65v112.19H654.82v-312h134q46.32,0,73.86,24.13t27.55,74.72Q890.2,1994.64,862.8,2017.5ZM813,1905.1q-12.37-10.36-34.7-10.38H719.59v91.87h58.75q22.32,0,34.7-11.22t12.39-35.56Q825.43,1915.48,813,1905.1Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1045.69,1916.42c.78.08,2.51.19,5.19.32v61.81c-3.81-.42-7.2-.71-10.16-.85s-5.36-.21-7.2-.21q-36.4,0-48.89,23.71-7,13.33-7,41.06v110.29H916.89V1921.82h57.58V1962q14-23.07,24.34-31.54,16.94-14.18,44-14.18C1044,1916.32,1044.92,1916.35,1045.69,1916.42Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1265.64,2124.32q-29.21,36.06-88.69,36.06t-88.69-36.06Q1059,2088.26,1059,2037.5q0-49.9,29.22-86.5t88.69-36.59q59.47,0,88.69,36.59t29.21,86.5Q1294.85,2088.26,1265.64,2124.32ZM1217.38,2091q14.17-18.81,14.18-53.48t-14.18-53.37q-14.19-18.7-40.64-18.71T1136,1984.13q-14.29,18.72-14.29,53.37T1136,2091q14.28,18.81,40.75,18.81T1217.38,2091Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1371.81,2078.88q1.92,16.1,8.29,22.87,11.28,12.06,41.7,12.06,17.85,0,28.39-5.29t10.53-15.88a17.12,17.12,0,0,0-8.48-15.45q-8.49-5.28-63.12-18.2-39.33-9.73-55.41-24.35-16.08-14.39-16.09-41.49,0-32,25.14-54.93t70.75-23q43.26,0,70.53,17.25t31.29,59.59H1455q-1.27-11.64-6.58-18.42-10-12.27-34-12.28-19.74,0-28.13,6.14t-8.38,14.4c0,6.91,3,11.93,8.92,15q8.89,4.89,63,16.73,36,8.46,54.05,25.61,17.77,17.35,17.78,43.39,0,34.3-25.56,56t-79,21.7q-54.51,0-80.49-23t-26-58.53Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1745.54,2124.32q-29.22,36.06-88.7,36.06t-88.69-36.06q-29.2-36.06-29.21-86.82,0-49.9,29.21-86.5t88.69-36.59q59.49,0,88.7,36.59t29.21,86.5Q1774.75,2088.26,1745.54,2124.32ZM1697.27,2091q14.19-18.81,14.19-53.48t-14.19-53.37q-14.18-18.7-40.64-18.71t-40.75,18.71q-14.28,18.72-14.28,53.37t14.28,53.48q14.3,18.81,40.75,18.81T1697.27,2091Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1992.75,1946.59q28.24,29.84,28.23,87.63,0,61-27.58,92.93t-71.06,32q-27.69,0-46-13.76-10-7.62-19.6-22.23v120.24H1797V1921.82h57.79v34.08q9.79-15,20.88-23.71,20.23-15.43,48.15-15.45Q1964.53,1916.74,1992.75,1946.59Zm-46.3,43.39q-12.3-20.52-39.88-20.53-33.15,0-45.54,31.11-6.43,16.51-6.42,41.92,0,40.21,21.58,56.51,12.82,9.53,30.37,9.53,25.45,0,38.83-19.48t13.36-51.86Q1958.75,2010.51,1946.45,1990Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M2249.14,2124.32q-29.2,36.06-88.69,36.06t-88.69-36.06q-29.22-36.06-29.21-86.82,0-49.9,29.21-86.5t88.69-36.59q59.49,0,88.69,36.59t29.22,86.5Q2278.36,2088.26,2249.14,2124.32ZM2200.88,2091q14.19-18.81,14.18-53.48t-14.18-53.37q-14.18-18.7-40.64-18.71t-40.75,18.71q-14.28,18.72-14.29,53.37t14.29,53.48q14.3,18.81,40.75,18.81T2200.88,2091Z" transform="translate(-215.73 -1774.69)"/></svg>';
  const logoWithTextWhite = '<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 2062.63 468.67" height="35px" width="140px"><defs><style>.cls-1{fill:#fff;}</style></defs><title>Prosopo Logo Black</title><path class="cls-1" d="M335.55,1825.19A147.75,147.75,0,0,1,483.3,1972.94h50.5c0-109.49-88.76-198.25-198.25-198.25v50.5Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M269.36,1891.39A147.74,147.74,0,0,1,417.1,2039.13h50.5c0-109.49-88.75-198.24-198.24-198.24v50.5Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M414,2157.17a147.75,147.75,0,0,1-147.74-147.74h-50.5c0,109.49,88.75,198.24,198.24,198.24v-50.5Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M480.17,2091a147.74,147.74,0,0,1-147.74-147.75H281.92c0,109.49,88.76,198.25,198.25,198.25V2091Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M862.8,2017.5q-27.39,22.86-78.25,22.86h-65v112.19H654.82v-312h134q46.32,0,73.86,24.13t27.55,74.72Q890.2,1994.64,862.8,2017.5ZM813,1905.1q-12.37-10.36-34.7-10.38H719.59v91.87h58.75q22.32,0,34.7-11.22t12.39-35.56Q825.43,1915.48,813,1905.1Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1045.69,1916.42c.78.08,2.51.19,5.19.32v61.81c-3.81-.42-7.2-.71-10.16-.85s-5.36-.21-7.2-.21q-36.4,0-48.89,23.71-7,13.33-7,41.06v110.29H916.89V1921.82h57.58V1962q14-23.07,24.34-31.54,16.94-14.18,44-14.18C1044,1916.32,1044.92,1916.35,1045.69,1916.42Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1265.64,2124.32q-29.21,36.06-88.69,36.06t-88.69-36.06Q1059,2088.26,1059,2037.5q0-49.9,29.22-86.5t88.69-36.59q59.47,0,88.69,36.59t29.21,86.5Q1294.85,2088.26,1265.64,2124.32ZM1217.38,2091q14.17-18.81,14.18-53.48t-14.18-53.37q-14.19-18.7-40.64-18.71T1136,1984.13q-14.29,18.72-14.29,53.37T1136,2091q14.28,18.81,40.75,18.81T1217.38,2091Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1371.81,2078.88q1.92,16.1,8.29,22.87,11.28,12.06,41.7,12.06,17.85,0,28.39-5.29t10.53-15.88a17.12,17.12,0,0,0-8.48-15.45q-8.49-5.28-63.12-18.2-39.33-9.73-55.41-24.35-16.08-14.39-16.09-41.49,0-32,25.14-54.93t70.75-23q43.26,0,70.53,17.25t31.29,59.59H1455q-1.27-11.64-6.58-18.42-10-12.27-34-12.28-19.74,0-28.13,6.14t-8.38,14.4c0,6.91,3,11.93,8.92,15q8.89,4.89,63,16.73,36,8.46,54.05,25.61,17.77,17.35,17.78,43.39,0,34.3-25.56,56t-79,21.7q-54.51,0-80.49-23t-26-58.53Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1745.54,2124.32q-29.22,36.06-88.7,36.06t-88.69-36.06q-29.2-36.06-29.21-86.82,0-49.9,29.21-86.5t88.69-36.59q59.49,0,88.7,36.59t29.21,86.5Q1774.75,2088.26,1745.54,2124.32ZM1697.27,2091q14.19-18.81,14.19-53.48t-14.19-53.37q-14.18-18.7-40.64-18.71t-40.75,18.71q-14.28,18.72-14.28,53.37t14.28,53.48q14.3,18.81,40.75,18.81T1697.27,2091Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M1992.75,1946.59q28.24,29.84,28.23,87.63,0,61-27.58,92.93t-71.06,32q-27.69,0-46-13.76-10-7.62-19.6-22.23v120.24H1797V1921.82h57.79v34.08q9.79-15,20.88-23.71,20.23-15.43,48.15-15.45Q1964.53,1916.74,1992.75,1946.59Zm-46.3,43.39q-12.3-20.52-39.88-20.53-33.15,0-45.54,31.11-6.43,16.51-6.42,41.92,0,40.21,21.58,56.51,12.82,9.53,30.37,9.53,25.45,0,38.83-19.48t13.36-51.86Q1958.75,2010.51,1946.45,1990Z" transform="translate(-215.73 -1774.69)"/><path class="cls-1" d="M2249.14,2124.32q-29.2,36.06-88.69,36.06t-88.69-36.06q-29.22-36.06-29.21-86.82,0-49.9,29.21-86.5t88.69-36.59q59.49,0,88.69,36.59t29.22,86.5Q2278.36,2088.26,2249.14,2124.32ZM2200.88,2091q14.19-18.81,14.18-53.48t-14.18-53.37q-14.18-18.7-40.64-18.71t-40.75,18.71q-14.28,18.72-14.29,53.37t14.29,53.48q14.3,18.81,40.75,18.81T2200.88,2091Z" transform="translate(-215.73 -1774.69)"/></svg>';
  const logoWithoutTextWhite = '<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 260 348" height="35px"><path id="Vector" d="M95.7053 40.2707C127.005 40.2707 157.022 52.6841 179.154 74.78C201.286 96.8759 213.719 126.844 213.719 158.093H254.056C254.056 70.7808 183.16 -4.57764e-05 95.7053 -4.57764e-05V40.2707Z" fill="#fff"/><path id="Vector_2" d="M42.8365 93.0614C58.3333 93.0614 73.6784 96.1087 87.9955 102.029C102.313 107.95 115.322 116.628 126.279 127.568C137.237 138.508 145.93 151.496 151.86 165.79C157.79 180.084 160.843 195.404 160.843 210.875H201.179C201.179 123.564 130.291 52.7906 42.8365 52.7906V93.0614Z" fill="#fff"/><path id="Vector_3" d="M158.367 305.005C127.07 305.003 97.056 292.59 74.926 270.496C52.796 248.402 40.3626 218.437 40.3604 187.191H0.0239563C0.0239563 274.503 70.9123 345.276 158.367 345.276V305.005Z" fill="#fff"/><path id="Vector_4" d="M211.219 252.239C195.722 252.239 180.376 249.191 166.059 243.27C151.741 237.349 138.732 228.67 127.774 217.729C116.816 206.788 108.123 193.799 102.194 179.505C96.2637 165.21 93.2121 149.889 93.2132 134.417H52.8687C52.8687 221.729 123.765 292.509 211.219 292.509V252.239Z" fill="#fff"/></g><defs><clipPath id="clip0_1_2"><rect width="254" height="345" fill="white"/></clipPath></defs></svg>';
  const logoWithoutTextBlack = '<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 260 348" height="35px"><path id="Vector" d="M95.7053 40.2707C127.005 40.2707 157.022 52.6841 179.154 74.78C201.286 96.8759 213.719 126.844 213.719 158.093H254.056C254.056 70.7808 183.16 -4.57764e-05 95.7053 -4.57764e-05V40.2707Z" fill="#000000"/><path id="Vector_2" d="M42.8365 93.0614C58.3333 93.0614 73.6784 96.1087 87.9955 102.029C102.313 107.95 115.322 116.628 126.279 127.568C137.237 138.508 145.93 151.496 151.86 165.79C157.79 180.084 160.843 195.404 160.843 210.875H201.179C201.179 123.564 130.291 52.7906 42.8365 52.7906V93.0614Z" fill="#000000"/><path id="Vector_3" d="M158.367 305.005C127.07 305.003 97.056 292.59 74.926 270.496C52.796 248.402 40.3626 218.437 40.3604 187.191H0.0239563C0.0239563 274.503 70.9123 345.276 158.367 345.276V305.005Z" fill="#000000"/><path id="Vector_4" d="M211.219 252.239C195.722 252.239 180.376 249.191 166.059 243.27C151.741 237.349 138.732 228.67 127.774 217.729C116.816 206.788 108.123 193.799 102.194 179.505C96.2637 165.21 93.2121 149.889 93.2132 134.417H52.8687C52.8687 221.729 123.765 292.509 211.219 292.509V252.239Z" fill="#000000"/></g><defs><clipPath id="clip0_1_2"><rect width="254" height="345" fill="white"/></clipPath></defs></svg>';
  var createRoot;
  var m = reactDomExports;
  {
    var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    createRoot = function(c, o) {
      i.usingClientEntryPoint = true;
      try {
        return m.createRoot(c, o);
      } finally {
        i.usingClientEntryPoint = false;
      }
    };
  }
  function getConfig(siteKey) {
    if (!siteKey) {
      siteKey = process.env.DAPP_SITE_KEY || void 0 || "";
    }
    return {
      logLevel: LogLevel.enum.info,
      defaultEnvironment: EnvironmentTypesSchema.enum.development,
      userAccountAddress: "",
      web2: true,
      dappName: "Prosopo",
      account: {
        address: siteKey
      },
      networks: {
        [EnvironmentTypesSchema.enum.development]: {
          endpoint: "wss://rococo-contracts-rpc.polkadot.io:443",
          contract: {
            address: "5HiVWQhJrysNcFNEWf2crArKht16zrhro3FcekVWocyQjx5u",
            name: "prosopo"
          },
          accounts: []
        },
        [EnvironmentTypesSchema.enum.rococo]: {
          endpoint: "wss://rococo-contracts-rpc.polkadot.io:443",
          contract: {
            address: "5HiVWQhJrysNcFNEWf2crArKht16zrhro3FcekVWocyQjx5u",
            name: "prosopo"
          },
          accounts: []
        }
      },
      solutionThreshold: 80,
      serverUrl: ""
    };
  }
  function getParentForm(element) {
    let parent = element.parentElement;
    while (parent) {
      if (parent.tagName === "FORM") {
        return parent;
      }
      parent = parent.parentElement;
    }
    return null;
  }
  function render(callbacks) {
    var _a;
    const elements = Array.from(document.getElementsByClassName("procaptcha"));
    const siteKey = at(elements, 0).getAttribute("data-sitekey") || void 0;
    const config2 = getConfig(siteKey);
    if (!callbacks) {
      callbacks = {};
    }
    for (const element of elements) {
      for (const callbackName of ProcapchaEventNames) {
        const dataCallbackName = "data-".concat(callbackName.toLowerCase());
        const callback = element.getAttribute(dataCallbackName);
        if (callback) {
          callbacks[callbackName] = window[callback.replace("window.", "")];
        }
      }
      const customThemeList = ["light", "dark"];
      const themeAttribute = (_a = element.getAttribute("data-theme")) != null ? _a : "light";
      config2["theme"] = customThemeList.includes(themeAttribute) ? themeAttribute : "light";
      if (!callbacks["onHuman"]) {
        callbacks["onHuman"] = function(payload) {
          const form = getParentForm(element);
          if (form) {
            const input = document.createElement("input");
            input.type = "hidden";
            input.name = ApiParams.procaptchaResponse, input.value = JSON.stringify(payload);
            form.appendChild(input);
          }
        };
      }
      createRoot(element).render(/* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Procaptcha, { config: config2, callbacks }, void 0, false, {
        fileName: "/home/hugh/captcha/packages/procaptcha-bundle/src/index.tsx",
        lineNumber: 110,
        columnNumber: 36
      }, this));
    }
  }
  function ready(fn) {
    if (document && document.readyState != "loading") {
      console.log("document.readyState ready!");
      fn();
    } else {
      console.log("DOMContentLoaded listener!");
      document.addEventListener("DOMContentLoaded", fn);
    }
  }
  ready(render);
  exports.default = ready;
  exports.render = render;
  Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
  return exports;
}({});
